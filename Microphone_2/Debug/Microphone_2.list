
Microphone_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080073dc  080073dc  000173dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073fc  080073fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007404  08007404  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f9c  2000000c  08007418  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fa8  08007418  00021fa8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee48  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ba  00000000  00000000  0003ee82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  00042640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a0  00000000  00000000  00043e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a08  00000000  00000000  000454d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc1a  00000000  00000000  00076ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a64a  00000000  00000000  00094af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001bf13c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f8  00000000  00000000  001bf18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080073c4 	.word	0x080073c4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080073c4 	.word	0x080073c4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f001 fd6d 	bl	800201e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f828 	bl	8000598 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000548:	f000 f892 	bl	8000670 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fd14 	bl	8000f78 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000550:	f000 f8be 	bl	80006d0 <MX_ADC3_Init>
  MX_DSIHOST_DSI_Init();
 8000554:	f000 f9c2 	bl	80008dc <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000558:	f000 fc12 	bl	8000d80 <MX_FMC_Init>
  MX_QUADSPI_Init();
 800055c:	f000 fa76 	bl	8000a4c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000560:	f000 faa0 	bl	8000aa4 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000564:	f000 faca 	bl	8000afc <MX_SAI2_Init>
  //MX_SDMMC1_MMC_Init();
  MX_SPDIFRX_Init();
 8000568:	f000 fb22 	bl	8000bb0 <MX_SPDIFRX_Init>
  MX_USART1_UART_Init();
 800056c:	f000 fb52 	bl	8000c14 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000570:	f000 fb80 	bl	8000c74 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000574:	f000 fbac 	bl	8000cd0 <MX_USB_OTG_HS_PCD_Init>
  MX_DFSDM1_Init();
 8000578:	f000 f8fc 	bl	8000774 <MX_DFSDM1_Init>
  MX_DMA_Init();
 800057c:	f000 fbda 	bl	8000d34 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, rec_buf, AUDIO_REC);
 8000580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000584:	4902      	ldr	r1, [pc, #8]	; (8000590 <main+0x54>)
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <main+0x58>)
 8000588:	f002 fb50 	bl	8002c2c <HAL_DFSDM_FilterRegularStart_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x50>
 800058e:	bf00      	nop
 8000590:	20000f68 	.word	0x20000f68
 8000594:	20000070 	.word	0x20000070

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 ff04 	bl	80073b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005bc:	f003 fff8 	bl	80045b0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <SystemClock_Config+0xd0>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a28      	ldr	r2, [pc, #160]	; (8000668 <SystemClock_Config+0xd0>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <SystemClock_Config+0xd0>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <SystemClock_Config+0xd4>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <SystemClock_Config+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000608:	2319      	movs	r3, #25
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800060c:	23c0      	movs	r3, #192	; 0xc0
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000610:	2304      	movs	r3, #4
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f897 	bl	8004754 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800062c:	f000 fe8e 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000630:	230f      	movs	r3, #15
 8000632:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000634:	2302      	movs	r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000640:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f004 fb2e 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800065a:	f000 fe77 	bl	800134c <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a4      	sub	sp, #144	; 0x90
 8000674:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2290      	movs	r2, #144	; 0x90
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f006 fe99 	bl	80073b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <PeriphCommonClock_Config+0x5c>)
 8000684:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000686:	23c0      	movs	r3, #192	; 0xc0
 8000688:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000692:	2300      	movs	r3, #0
 8000694:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000696:	2301      	movs	r3, #1
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800069a:	2300      	movs	r3, #0
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006a2:	2300      	movs	r3, #0
 80006a4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fce1 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80006c0:	f000 fe44 	bl	800134c <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3790      	adds	r7, #144	; 0x90
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	18380000 	.word	0x18380000

080006d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC3_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC3_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC3_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ADC3_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC3_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ADC3_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC3_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC3_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_ADC3_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC3_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC3_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC3_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC3_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC3_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_ADC3_Init+0x98>)
 8000730:	f001 fcf6 	bl	8002120 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fe07 	bl	800134c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800073e:	2308      	movs	r3, #8
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC3_Init+0x98>)
 8000750:	f001 fd2a 	bl	80021a8 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fdf7 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000028 	.word	0x20000028
 800076c:	40012200 	.word	0x40012200
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000778:	4b4f      	ldr	r3, [pc, #316]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 800077a:	4a50      	ldr	r2, [pc, #320]	; (80008bc <MX_DFSDM1_Init+0x148>)
 800077c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 8000786:	2201      	movs	r2, #1
 8000788:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800078a:	4b4b      	ldr	r3, [pc, #300]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 800078c:	2201      	movs	r2, #1
 800078e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000790:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 8000792:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000796:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000798:	4b47      	ldr	r3, [pc, #284]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 800079a:	2240      	movs	r2, #64	; 0x40
 800079c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800079e:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007a4:	4844      	ldr	r0, [pc, #272]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 80007a6:	f002 f921 	bl	80029ec <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007aa:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007ac:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <MX_DFSDM1_Init+0x150>)
 80007ae:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007b0:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007b6:	4b42      	ldr	r3, [pc, #264]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80007bc:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007be:	2201      	movs	r2, #1
 80007c0:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007c2:	4b3f      	ldr	r3, [pc, #252]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007c4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007c8:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007cc:	2240      	movs	r2, #64	; 0x40
 80007ce:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80007d0:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80007d6:	483a      	ldr	r0, [pc, #232]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80007d8:	f002 f908 	bl	80029ec <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 80007de:	4a3b      	ldr	r2, [pc, #236]	; (80008cc <MX_DFSDM1_Init+0x158>)
 80007e0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80007e2:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 80007ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ee:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 80007f0:	4b35      	ldr	r3, [pc, #212]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80007fc:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 8000804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000808:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000810:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 8000812:	2204      	movs	r2, #4
 8000814:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 8000818:	2200      	movs	r2, #0
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 800081c:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 800081e:	2201      	movs	r2, #1
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 8000824:	2200      	movs	r2, #0
 8000826:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000828:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 800082a:	2202      	movs	r2, #2
 800082c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800082e:	4826      	ldr	r0, [pc, #152]	; (80008c8 <MX_DFSDM1_Init+0x154>)
 8000830:	f002 f81c 	bl	800286c <HAL_DFSDM_ChannelInit>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_DFSDM1_Init+0xca>
  {
    Error_Handler();
 800083a:	f000 fd87 	bl	800134c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000840:	4a24      	ldr	r2, [pc, #144]	; (80008d4 <MX_DFSDM1_Init+0x160>)
 8000842:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000846:	2201      	movs	r2, #1
 8000848:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 800084c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000850:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000854:	2202      	movs	r2, #2
 8000856:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000872:	2204      	movs	r2, #4
 8000874:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 800087e:	2201      	movs	r2, #1
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 800088a:	2202      	movs	r2, #2
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <MX_DFSDM1_Init+0x15c>)
 8000890:	f001 ffec 	bl	800286c <HAL_DFSDM_ChannelInit>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_DFSDM1_Init+0x12a>
  {
    Error_Handler();
 800089a:	f000 fd57 	bl	800134c <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800089e:	2201      	movs	r2, #1
 80008a0:	490d      	ldr	r1, [pc, #52]	; (80008d8 <MX_DFSDM1_Init+0x164>)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_DFSDM1_Init+0x144>)
 80008a4:	f002 f97c 	bl	8002ba0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0, DFSDM_CONTINUOUS_CONV_ON);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_DFSDM1_Init+0x14c>)
 80008ae:	f002 f977 	bl	8002ba0 <HAL_DFSDM_FilterConfigRegChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000070 	.word	0x20000070
 80008bc:	40017500 	.word	0x40017500
 80008c0:	200000c4 	.word	0x200000c4
 80008c4:	40017580 	.word	0x40017580
 80008c8:	20000118 	.word	0x20000118
 80008cc:	40017400 	.word	0x40017400
 80008d0:	20000150 	.word	0x20000150
 80008d4:	40017420 	.word	0x40017420
 80008d8:	00010002 	.word	0x00010002

080008dc <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0a0      	sub	sp, #128	; 0x80
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80008e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80008ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008f2:	2224      	movs	r2, #36	; 0x24
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 fd5c 	bl	80073b4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80008fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2234      	movs	r2, #52	; 0x34
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f006 fd4d 	bl	80073b4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800091a:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 800091c:	4a4a      	ldr	r2, [pc, #296]	; (8000a48 <MX_DSIHOST_DSI_Init+0x16c>)
 800091e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000920:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000926:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 8000928:	2204      	movs	r2, #4
 800092a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 800092c:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000932:	2314      	movs	r3, #20
 8000934:	677b      	str	r3, [r7, #116]	; 0x74
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000936:	2301      	movs	r3, #1
 8000938:	67bb      	str	r3, [r7, #120]	; 0x78
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800093e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000942:	4619      	mov	r1, r3
 8000944:	483f      	ldr	r0, [pc, #252]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 8000946:	f002 fe5b 	bl	8003600 <HAL_DSI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_DSIHOST_DSI_Init+0x78>
  {
    Error_Handler();
 8000950:	f000 fcfc 	bl	800134c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	653b      	str	r3, [r7, #80]	; 0x50
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	657b      	str	r3, [r7, #84]	; 0x54
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	65bb      	str	r3, [r7, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	65fb      	str	r3, [r7, #92]	; 0x5c
  HostTimeouts.LowPowerReadTimeout = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	663b      	str	r3, [r7, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	667b      	str	r3, [r7, #100]	; 0x64
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	66bb      	str	r3, [r7, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	; 0x6c
  HostTimeouts.BTATimeout = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000978:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097c:	4619      	mov	r1, r3
 800097e:	4831      	ldr	r0, [pc, #196]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 8000980:	f003 f906 	bl	8003b90 <HAL_DSI_ConfigHostTimeouts>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_DSIHOST_DSI_Init+0xb2>
  {
    Error_Handler();
 800098a:	f000 fcdf 	bl	800134c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800098e:	231c      	movs	r3, #28
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000992:	2321      	movs	r3, #33	; 0x21
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  PhyTimings.DataLaneHS2LPTime = 15;
 8000996:	230f      	movs	r3, #15
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 800099a:	2319      	movs	r3, #25
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  PhyTimings.DataLaneMaxReadTime = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  PhyTimings.StopWaitTime = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80009a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009aa:	4619      	mov	r1, r3
 80009ac:	4825      	ldr	r0, [pc, #148]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 80009ae:	f003 f885 	bl	8003abc <HAL_DSI_ConfigPhyTimer>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_DSIHOST_DSI_Init+0xe0>
  {
    Error_Handler();
 80009b8:	f000 fcc8 	bl	800134c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80009bc:	2104      	movs	r1, #4
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 80009c0:	f003 f854 	bl	8003a6c <HAL_DSI_ConfigFlowControl>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_DSIHOST_DSI_Init+0xf2>
  {
    Error_Handler();
 80009ca:	f000 fcbf 	bl	800134c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80009ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80009d2:	481c      	ldr	r0, [pc, #112]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 80009d4:	f003 f9a4 	bl	8003d20 <HAL_DSI_SetLowPowerRXFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_DSIHOST_DSI_Init+0x106>
  {
    Error_Handler();
 80009de:	f000 fcb5 	bl	800134c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4817      	ldr	r0, [pc, #92]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 80009e6:	f002 ff27 	bl	8003838 <HAL_DSI_ConfigErrorMonitor>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_DSIHOST_DSI_Init+0x118>
  {
    Error_Handler();
 80009f0:	f000 fcac 	bl	800134c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a2e:	f002 ffbf 	bl	80039b0 <HAL_DSI_ConfigCommand>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000a38:	f000 fc88 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3780      	adds	r7, #128	; 0x80
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000248 	.word	0x20000248
 8000a48:	40016c00 	.word	0x40016c00

08000a4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a52:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <MX_QUADSPI_Init+0x54>)
 8000a54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a64:	2210      	movs	r2, #16
 8000a66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a70:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000a74:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_QUADSPI_Init+0x50>)
 8000a8a:	f003 fda1 	bl	80045d0 <HAL_QSPI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 fc5a 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000264 	.word	0x20000264
 8000aa0:	a0001000 	.word	0xa0001000

08000aa4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_SAI1_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ace:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000ad2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <MX_SAI1_Init+0x50>)
 8000ae2:	f005 f865 	bl	8005bb0 <HAL_SAI_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_SAI1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fc2e 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200002b0 	.word	0x200002b0
 8000af8:	40015804 	.word	0x40015804

08000afc <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000b00:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b02:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <MX_SAI2_Init+0xac>)
 8000b04:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b0c:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b3e:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <MX_SAI2_Init+0xb0>)
 8000b40:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_SAI2_Init+0xa8>)
 8000b92:	f005 f80d 	bl	8005bb0 <HAL_SAI_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000b9c:	f000 fbd6 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000334 	.word	0x20000334
 8000ba8:	40015c24 	.word	0x40015c24
 8000bac:	0002ee00 	.word	0x0002ee00

08000bb0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bb6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000bba:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bc2:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_SPDIFRX_Init+0x60>)
 8000bfc:	f005 f9c2 	bl	8005f84 <HAL_SPDIFRX_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8000c06:	f000 fba1 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200003b8 	.word	0x200003b8

08000c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART1_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART1_UART_Init+0x58>)
 8000c58:	f005 fa38 	bl	80060cc <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c62:	f000 fb73 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000404 	.word	0x20000404
 8000c70:	40011000 	.word	0x40011000

08000c74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c78:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c82:	2206      	movs	r2, #6
 8000c84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb8:	f003 fb32 	bl	8004320 <HAL_PCD_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cc2:	f000 fb43 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000048c 	.word	0x2000048c

08000cd0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cd6:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000cd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cdc:	2209      	movs	r2, #9
 8000cde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d18:	f003 fb02 	bl	8004320 <HAL_PCD_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d22:	f000 fb13 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000994 	.word	0x20000994
 8000d30:	40040000 	.word	0x40040000

08000d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <MX_DMA_Init+0x48>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <MX_DMA_Init+0x48>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0d      	ldr	r3, [pc, #52]	; (8000d7c <MX_DMA_Init+0x48>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2038      	movs	r0, #56	; 0x38
 8000d58:	f001 fd51 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d5c:	2038      	movs	r0, #56	; 0x38
 8000d5e:	f001 fd6a 	bl	8002836 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	2039      	movs	r0, #57	; 0x39
 8000d68:	f001 fd49 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000d6c:	2039      	movs	r0, #57	; 0x39
 8000d6e:	f001 fd62 	bl	8002836 <HAL_NVIC_EnableIRQ>

}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	611a      	str	r2, [r3, #16]
 8000d96:	615a      	str	r2, [r3, #20]
 8000d98:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b6b      	ldr	r3, [pc, #428]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000db6:	4a6c      	ldr	r2, [pc, #432]	; (8000f68 <MX_FMC_Init+0x1e8>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b6a      	ldr	r3, [pc, #424]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000dc6:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dc8:	2208      	movs	r2, #8
 8000dca:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b65      	ldr	r3, [pc, #404]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000de4:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dea:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000df6:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000df8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b54      	ldr	r3, [pc, #336]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484a      	ldr	r0, [pc, #296]	; (8000f64 <MX_FMC_Init+0x1e4>)
 8000e3c:	f003 f964 	bl	8004108 <HAL_NOR_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_FMC_Init+0xca>
  {
    Error_Handler( );
 8000e46:	f000 fa81 	bl	800134c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000e4a:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e4c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e50:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e54:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <MX_FMC_Init+0x1e8>)
 8000e56:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8000e58:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000e5e:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000e64:	4b41      	ldr	r3, [pc, #260]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e6a:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000e70:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e76:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000e82:	4b3a      	ldr	r3, [pc, #232]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000e8e:	4b37      	ldr	r3, [pc, #220]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000e94:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000eb8:	230f      	movs	r3, #15
 8000eba:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000ec0:	230f      	movs	r3, #15
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000ec8:	2311      	movs	r3, #17
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4824      	ldr	r0, [pc, #144]	; (8000f6c <MX_FMC_Init+0x1ec>)
 8000eda:	f005 f8af 	bl	800603c <HAL_SRAM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_FMC_Init+0x168>
  {
    Error_Handler( );
 8000ee4:	f000 fa32 	bl	800134c <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000eea:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <MX_FMC_Init+0x1f4>)
 8000eec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000efc:	2208      	movs	r2, #8
 8000efe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f02:	2220      	movs	r2, #32
 8000f04:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f08:	2240      	movs	r2, #64	; 0x40
 8000f0a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f2e:	2310      	movs	r3, #16
 8000f30:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 8000f32:	2310      	movs	r3, #16
 8000f34:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8000f36:	2310      	movs	r3, #16
 8000f38:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 8000f42:	2310      	movs	r3, #16
 8000f44:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <MX_FMC_Init+0x1f0>)
 8000f4c:	f004 ffe6 	bl	8005f1c <HAL_SDRAM_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_FMC_Init+0x1da>
  {
    Error_Handler( );
 8000f56:	f000 f9f9 	bl	800134c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3738      	adds	r7, #56	; 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000e9c 	.word	0x20000e9c
 8000f68:	a0000104 	.word	0xa0000104
 8000f6c:	20000ee8 	.word	0x20000ee8
 8000f70:	20000f34 	.word	0x20000f34
 8000f74:	a0000140 	.word	0xa0000140

08000f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	; 0x40
 8000f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	4bad      	ldr	r3, [pc, #692]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4aac      	ldr	r2, [pc, #688]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000f94:	f043 0310 	orr.w	r3, r3, #16
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4baa      	ldr	r3, [pc, #680]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0310 	and.w	r3, r3, #16
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa6:	4ba7      	ldr	r3, [pc, #668]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4aa6      	ldr	r2, [pc, #664]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4ba4      	ldr	r3, [pc, #656]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4ba1      	ldr	r3, [pc, #644]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4aa0      	ldr	r2, [pc, #640]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b9e      	ldr	r3, [pc, #632]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd6:	4b9b      	ldr	r3, [pc, #620]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a9a      	ldr	r2, [pc, #616]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b98      	ldr	r3, [pc, #608]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b95      	ldr	r3, [pc, #596]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a94      	ldr	r2, [pc, #592]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b92      	ldr	r3, [pc, #584]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	61bb      	str	r3, [r7, #24]
 8001004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b8f      	ldr	r3, [pc, #572]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a8e      	ldr	r2, [pc, #568]	; (8001244 <MX_GPIO_Init+0x2cc>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b8c      	ldr	r3, [pc, #560]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800101e:	4b89      	ldr	r3, [pc, #548]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a88      	ldr	r2, [pc, #544]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b86      	ldr	r3, [pc, #536]	; (8001244 <MX_GPIO_Init+0x2cc>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001036:	4b83      	ldr	r3, [pc, #524]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a82      	ldr	r2, [pc, #520]	; (8001244 <MX_GPIO_Init+0x2cc>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a7c      	ldr	r2, [pc, #496]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001054:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <MX_GPIO_Init+0x2cc>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001066:	4b77      	ldr	r3, [pc, #476]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a76      	ldr	r2, [pc, #472]	; (8001244 <MX_GPIO_Init+0x2cc>)
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107e:	4b71      	ldr	r3, [pc, #452]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a70      	ldr	r2, [pc, #448]	; (8001244 <MX_GPIO_Init+0x2cc>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b6e      	ldr	r3, [pc, #440]	; (8001244 <MX_GPIO_Init+0x2cc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 8001096:	2200      	movs	r2, #0
 8001098:	f243 010b 	movw	r1, #12299	; 0x300b
 800109c:	486a      	ldr	r0, [pc, #424]	; (8001248 <MX_GPIO_Init+0x2d0>)
 800109e:	f003 f819 	bl	80040d4 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a8:	4868      	ldr	r0, [pc, #416]	; (800124c <MX_GPIO_Init+0x2d4>)
 80010aa:	f003 f813 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80010ae:	2304      	movs	r3, #4
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010be:	230b      	movs	r3, #11
 80010c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	4861      	ldr	r0, [pc, #388]	; (8001250 <MX_GPIO_Init+0x2d8>)
 80010ca:	f002 fe57 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 80010ce:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e0:	230b      	movs	r3, #11
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	4619      	mov	r1, r3
 80010ea:	485a      	ldr	r0, [pc, #360]	; (8001254 <MX_GPIO_Init+0x2dc>)
 80010ec:	f002 fe46 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80010f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f6:	2312      	movs	r3, #18
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001102:	2304      	movs	r3, #4
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	4852      	ldr	r0, [pc, #328]	; (8001258 <MX_GPIO_Init+0x2e0>)
 800110e:	f002 fe35 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_D3_Pin SD2_D2_Pin */
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 8001112:	2318      	movs	r3, #24
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001122:	230a      	movs	r3, #10
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112a:	4619      	mov	r1, r3
 800112c:	484a      	ldr	r0, [pc, #296]	; (8001258 <MX_GPIO_Init+0x2e0>)
 800112e:	f002 fe25 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_CMD_Pin */
  GPIO_InitStruct.Pin = SD2_CMD_Pin;
 8001132:	2380      	movs	r3, #128	; 0x80
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001142:	230b      	movs	r3, #11
 8001144:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_CMD_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114a:	4619      	mov	r1, r3
 800114c:	4843      	ldr	r0, [pc, #268]	; (800125c <MX_GPIO_Init+0x2e4>)
 800114e:	f002 fe15 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_VSYNC_Pin */
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001162:	230d      	movs	r3, #13
 8001164:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116a:	4619      	mov	r1, r3
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <MX_GPIO_Init+0x2e0>)
 800116e:	f002 fe05 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_GPIO_Pin MII_MDIO_GPIO_Pin LED3_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 8001172:	f243 030b 	movw	r3, #12299	; 0x300b
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001188:	4619      	mov	r1, r3
 800118a:	482f      	ldr	r0, [pc, #188]	; (8001248 <MX_GPIO_Init+0x2d0>)
 800118c:	f002 fdf6 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXPANDER_INT_Pin */
  GPIO_InitStruct.Pin = EXPANDER_INT_Pin;
 8001190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001196:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800119a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a4:	4619      	mov	r1, r3
 80011a6:	4829      	ldr	r0, [pc, #164]	; (800124c <MX_GPIO_Init+0x2d4>)
 80011a8:	f002 fde8 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80011ac:	23f8      	movs	r3, #248	; 0xf8
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011bc:	230e      	movs	r3, #14
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c4:	4619      	mov	r1, r3
 80011c6:	4826      	ldr	r0, [pc, #152]	; (8001260 <MX_GPIO_Init+0x2e8>)
 80011c8:	f002 fdd8 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_D1_Pin */
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80011de:	230b      	movs	r3, #11
 80011e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	481a      	ldr	r0, [pc, #104]	; (8001254 <MX_GPIO_Init+0x2dc>)
 80011ea:	f002 fdc7 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B2_Pin LCD_B3_Pin LCD_R5_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 80011ee:	f24c 0330 	movw	r3, #49200	; 0xc030
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001200:	230e      	movs	r3, #14
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001208:	4619      	mov	r1, r3
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <MX_GPIO_Init+0x2d0>)
 800120c:	f002 fdb6 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_WKUP_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_WKUP_KEY_Pin;
 8001210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <MX_GPIO_Init+0x2ec>)
 8001228:	f002 fda8 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 800122c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800123e:	230e      	movs	r3, #14
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001242:	e011      	b.n	8001268 <MX_GPIO_Init+0x2f0>
 8001244:	40023800 	.word	0x40023800
 8001248:	40022400 	.word	0x40022400
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	40021800 	.word	0x40021800
 8001258:	40020400 	.word	0x40020400
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40022800 	.word	0x40022800
 8001264:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	4833      	ldr	r0, [pc, #204]	; (800133c <MX_GPIO_Init+0x3c4>)
 8001270:	f002 fd84 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_MCO_Pin */
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001286:	2300      	movs	r3, #0
 8001288:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128e:	4619      	mov	r1, r3
 8001290:	482b      	ldr	r0, [pc, #172]	; (8001340 <MX_GPIO_Init+0x3c8>)
 8001292:	f002 fd73 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129c:	2301      	movs	r3, #1
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ac:	4619      	mov	r1, r3
 80012ae:	4823      	ldr	r0, [pc, #140]	; (800133c <MX_GPIO_Init+0x3c4>)
 80012b0:	f002 fd64 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_CLK_Pin MII_TXD2_Pin MII_RXD0_Pin MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 80012b4:	233c      	movs	r3, #60	; 0x3c
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c4:	230b      	movs	r3, #11
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012cc:	4619      	mov	r1, r3
 80012ce:	481d      	ldr	r0, [pc, #116]	; (8001344 <MX_GPIO_Init+0x3cc>)
 80012d0:	f002 fd54 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80012d4:	2382      	movs	r3, #130	; 0x82
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e4:	230b      	movs	r3, #11
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <MX_GPIO_Init+0x3c8>)
 80012f0:	f002 fd44 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAR_HSYNC_Pin PAR_PCLK_Pin */
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 80012f4:	2350      	movs	r3, #80	; 0x50
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001304:	230d      	movs	r3, #13
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130c:	4619      	mov	r1, r3
 800130e:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_GPIO_Init+0x3c8>)
 8001310:	f002 fd34 	bl	8003d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RXD3_Pin MII_RXD2_Pin */
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8001314:	23c0      	movs	r3, #192	; 0xc0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001324:	230b      	movs	r3, #11
 8001326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_GPIO_Init+0x3d0>)
 8001330:	f002 fd24 	bl	8003d7c <HAL_GPIO_Init>

}
 8001334:	bf00      	nop
 8001336:	3740      	adds	r7, #64	; 0x40
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40022000 	.word	0x40022000
 8001340:	40020000 	.word	0x40020000
 8001344:	40020800 	.word	0x40020800
 8001348:	40021c00 	.word	0x40021c00

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_MspInit+0x44>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_MspInit+0x44>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_MspInit+0x44>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_MspInit+0x44>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_MspInit+0x44>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_MspInit+0x44>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <HAL_ADC_MspInit+0x74>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d124      	bne.n	800140c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_ADC_MspInit+0x78>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a14      	ldr	r2, [pc, #80]	; (8001418 <HAL_ADC_MspInit+0x78>)
 80013c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_ADC_MspInit+0x78>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013da:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_ADC_MspInit+0x78>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <HAL_ADC_MspInit+0x78>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_ADC_MspInit+0x78>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 80013f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f8:	2303      	movs	r3, #3
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4805      	ldr	r0, [pc, #20]	; (800141c <HAL_ADC_MspInit+0x7c>)
 8001408:	f002 fcb8 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3728      	adds	r7, #40	; 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40012200 	.word	0x40012200
 8001418:	40023800 	.word	0x40023800
 800141c:	40021400 	.word	0x40021400

08001420 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d145      	bne.n	80014cc <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001440:	4b62      	ldr	r3, [pc, #392]	; (80015cc <HAL_DFSDM_FilterMspInit+0x1ac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	4a61      	ldr	r2, [pc, #388]	; (80015cc <HAL_DFSDM_FilterMspInit+0x1ac>)
 8001448:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800144a:	4b60      	ldr	r3, [pc, #384]	; (80015cc <HAL_DFSDM_FilterMspInit+0x1ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d10b      	bne.n	800146a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001452:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001482:	2340      	movs	r3, #64	; 0x40
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001492:	230a      	movs	r3, #10
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	484d      	ldr	r0, [pc, #308]	; (80015d4 <HAL_DFSDM_FilterMspInit+0x1b4>)
 800149e:	f002 fc6d 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a2:	2308      	movs	r3, #8
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80014b2:	2303      	movs	r3, #3
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4845      	ldr	r0, [pc, #276]	; (80015d4 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80014be:	f002 fc5d 	bl	8003d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014c2:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a3f      	ldr	r2, [pc, #252]	; (80015c8 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80014ca:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a41      	ldr	r2, [pc, #260]	; (80015d8 <HAL_DFSDM_FilterMspInit+0x1b8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d136      	bne.n	8001544 <HAL_DFSDM_FilterMspInit+0x124>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 80014d8:	4a41      	ldr	r2, [pc, #260]	; (80015e0 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80014da:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80014dc:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 80014de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014e2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e4:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80014f0:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 80014fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fe:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001500:	4b36      	ldr	r3, [pc, #216]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 800150e:	4b33      	ldr	r3, [pc, #204]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001510:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001514:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001516:	4b31      	ldr	r3, [pc, #196]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800151c:	482f      	ldr	r0, [pc, #188]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 800151e:	f001 fcf7 	bl	8002f10 <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_DFSDM_FilterMspInit+0x10c>
    {
      Error_Handler();
 8001528:	f7ff ff10 	bl	800134c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
 8001532:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a28      	ldr	r2, [pc, #160]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
 800153e:	4a27      	ldr	r2, [pc, #156]	; (80015dc <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a26      	ldr	r2, [pc, #152]	; (80015e4 <HAL_DFSDM_FilterMspInit+0x1c4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d137      	bne.n	80015be <HAL_DFSDM_FilterMspInit+0x19e>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001550:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_DFSDM_FilterMspInit+0x1cc>)
 8001552:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8001554:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800156a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001576:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800157a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001586:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800158a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158e:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001598:	f001 fcba 	bl	8002f10 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_DFSDM_FilterMspInit+0x186>
    {
      Error_Handler();
 80015a2:	f7ff fed3 	bl	800134c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ac:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
 80015b8:	4a0b      	ldr	r2, [pc, #44]	; (80015e8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	; 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20001f6c 	.word	0x20001f6c
 80015cc:	20001f68 	.word	0x20001f68
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40017500 	.word	0x40017500
 80015dc:	20000188 	.word	0x20000188
 80015e0:	40026410 	.word	0x40026410
 80015e4:	40017580 	.word	0x40017580
 80015e8:	200001e8 	.word	0x200001e8
 80015ec:	40026428 	.word	0x40026428

080015f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d145      	bne.n	800169c <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001618:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10b      	bne.n	800163a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001622:	4b22      	ldr	r3, [pc, #136]	; (80016ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001628:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a1b      	ldr	r2, [pc, #108]	; (80016ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001662:	230a      	movs	r3, #10
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800166e:	f002 fb85 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001672:	2308      	movs	r3, #8
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001682:	2303      	movs	r3, #3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4808      	ldr	r0, [pc, #32]	; (80016b0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800168e:	f002 fb75 	bl	8003d7c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a02      	ldr	r2, [pc, #8]	; (80016a4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800169a:	6013      	str	r3, [r2, #0]
  }

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20001f6c 	.word	0x20001f6c
 80016a8:	20001f68 	.word	0x20001f68
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020c00 	.word	0x40020c00

080016b4 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_DSI_MspInit+0x7c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d127      	bne.n	8001726 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_DSI_MspInit+0x80>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <HAL_DSI_MspInit+0x80>)
 80016dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <HAL_DSI_MspInit+0x80>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_DSI_MspInit+0x80>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_DSI_MspInit+0x80>)
 80016f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_DSI_MspInit+0x80>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001706:	2304      	movs	r3, #4
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001716:	230d      	movs	r3, #13
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_DSI_MspInit+0x84>)
 8001722:	f002 fb2b 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40016c00 	.word	0x40016c00
 8001734:	40023800 	.word	0x40023800
 8001738:	40022400 	.word	0x40022400

0800173c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a35      	ldr	r2, [pc, #212]	; (8001830 <HAL_QSPI_MspInit+0xf4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d164      	bne.n	8001828 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6393      	str	r3, [r2, #56]	; 0x38
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 800176c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800178e:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 8001794:	f043 0320 	orr.w	r3, r3, #32
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_QSPI_MspInit+0xf8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017b6:	230a      	movs	r3, #10
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <HAL_QSPI_MspInit+0xfc>)
 80017c2:	f002 fadb 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin;
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017d6:	2309      	movs	r3, #9
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4816      	ldr	r0, [pc, #88]	; (800183c <HAL_QSPI_MspInit+0x100>)
 80017e2:	f002 facb 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80017e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017f8:	230a      	movs	r3, #10
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <HAL_QSPI_MspInit+0x100>)
 8001804:	f002 faba 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001808:	2304      	movs	r3, #4
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001818:	2309      	movs	r3, #9
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <HAL_QSPI_MspInit+0xfc>)
 8001824:	f002 faaa 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	a0001000 	.word	0xa0001000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400
 800183c:	40021400 	.word	0x40021400

08001840 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ae      	sub	sp, #184	; 0xb8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2290      	movs	r2, #144	; 0x90
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f005 fda7 	bl	80073b4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800186e:	d144      	bne.n	80018fa <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001874:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001876:	23c0      	movs	r3, #192	; 0xc0
 8001878:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800187a:	2302      	movs	r3, #2
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800187e:	2302      	movs	r3, #2
 8001880:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001882:	2302      	movs	r3, #2
 8001884:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4618      	mov	r0, r3
 8001890:	f003 fbf4 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800189a:	f7ff fd57 	bl	800134c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_SPDIFRX_MspInit+0xc4>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a18      	ldr	r2, [pc, #96]	; (8001904 <HAL_SPDIFRX_MspInit+0xc4>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_SPDIFRX_MspInit+0xc4>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_SPDIFRX_MspInit+0xc4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_SPDIFRX_MspInit+0xc4>)
 80018bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_SPDIFRX_MspInit+0xc4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX1_Pin;
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <HAL_SPDIFRX_MspInit+0xc8>)
 80018f6:	f002 fa41 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	37b8      	adds	r7, #184	; 0xb8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40021800 	.word	0x40021800

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0ae      	sub	sp, #184	; 0xb8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2290      	movs	r2, #144	; 0x90
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f005 fd41 	bl	80073b4 <memset>
  if(huart->Instance==USART1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_UART_MspInit+0xb0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d13b      	bne.n	80019b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800193c:	2340      	movs	r3, #64	; 0x40
 800193e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001940:	2300      	movs	r3, #0
 8001942:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4618      	mov	r0, r3
 800194a:	f003 fb97 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001954:	f7ff fcfa 	bl	800134c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 800195e:	f043 0310 	orr.w	r3, r3, #16
 8001962:	6453      	str	r3, [r2, #68]	; 0x44
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_UART_MspInit+0xb4>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS2320IrDA0T_Pin;
 8001988:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800198c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a2:	2307      	movs	r3, #7
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_UART_MspInit+0xb8>)
 80019b0:	f002 f9e4 	bl	8003d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	37b8      	adds	r7, #184	; 0xb8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000

080019c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b0b6      	sub	sp, #216	; 0xd8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e4:	2290      	movs	r2, #144	; 0x90
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f005 fce3 	bl	80073b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f6:	d14a      	bne.n	8001a8e <HAL_PCD_MspInit+0xc6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80019f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fb37 	bl	800507c <HAL_RCCEx_PeriphCLKConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a14:	f7ff fc9a 	bl	800134c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a8b      	ldr	r2, [pc, #556]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001a30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a4a:	230a      	movs	r3, #10
 8001a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a54:	4619      	mov	r1, r3
 8001a56:	487e      	ldr	r0, [pc, #504]	; (8001c50 <HAL_PCD_MspInit+0x288>)
 8001a58:	f002 f990 	bl	8003d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a60:	4a7a      	ldr	r2, [pc, #488]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	6353      	str	r3, [r2, #52]	; 0x34
 8001a68:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	4a74      	ldr	r2, [pc, #464]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a80:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001a8c:	e0da      	b.n	8001c44 <HAL_PCD_MspInit+0x27c>
  else if(hpcd->Instance==USB_OTG_HS)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a70      	ldr	r2, [pc, #448]	; (8001c54 <HAL_PCD_MspInit+0x28c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	f040 80d5 	bne.w	8001c44 <HAL_PCD_MspInit+0x27c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b6c      	ldr	r3, [pc, #432]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a6b      	ldr	r2, [pc, #428]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ab2:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a65      	ldr	r2, [pc, #404]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	623b      	str	r3, [r7, #32]
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aca:	4b60      	ldr	r3, [pc, #384]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a5f      	ldr	r2, [pc, #380]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a59      	ldr	r2, [pc, #356]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a53      	ldr	r2, [pc, #332]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001b12:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4847      	ldr	r0, [pc, #284]	; (8001c58 <HAL_PCD_MspInit+0x290>)
 8001b3a:	f002 f91f 	bl	8003d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b58:	230a      	movs	r3, #10
 8001b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b62:	4619      	mov	r1, r3
 8001b64:	483d      	ldr	r0, [pc, #244]	; (8001c5c <HAL_PCD_MspInit+0x294>)
 8001b66:	f002 f909 	bl	8003d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b82:	230a      	movs	r3, #10
 8001b84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4834      	ldr	r0, [pc, #208]	; (8001c60 <HAL_PCD_MspInit+0x298>)
 8001b90:	f002 f8f4 	bl	8003d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bac:	230a      	movs	r3, #10
 8001bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	482a      	ldr	r0, [pc, #168]	; (8001c64 <HAL_PCD_MspInit+0x29c>)
 8001bba:	f002 f8df 	bl	8003d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001bbe:	2328      	movs	r3, #40	; 0x28
 8001bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be0:	4619      	mov	r1, r3
 8001be2:	481b      	ldr	r0, [pc, #108]	; (8001c50 <HAL_PCD_MspInit+0x288>)
 8001be4:	f002 f8ca 	bl	8003d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_FS2_DM_Pin|USB_FS2_DP_Pin;
 8001be8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001c02:	230c      	movs	r3, #12
 8001c04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <HAL_PCD_MspInit+0x290>)
 8001c10:	f002 f8b4 	bl	8003d7c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a0c      	ldr	r2, [pc, #48]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b0a      	ldr	r3, [pc, #40]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001c32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_PCD_MspInit+0x284>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	bf00      	nop
 8001c46:	37d8      	adds	r7, #216	; 0xd8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40040000 	.word	0x40040000
 8001c58:	40020400 	.word	0x40020400
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021c00 	.word	0x40021c00
 8001c64:	40020800 	.word	0x40020800

08001c68 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c7c:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_FMC_MspInit+0x124>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d17e      	bne.n	8001d82 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8001c84:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <HAL_FMC_MspInit+0x124>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_FMC_MspInit+0x128>)
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <HAL_FMC_MspInit+0x128>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6393      	str	r3, [r2, #56]	; 0x38
 8001c96:	4b3e      	ldr	r3, [pc, #248]	; (8001d90 <HAL_FMC_MspInit+0x128>)
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = A20_Pin|A19_Pin|FMC_NBL1_Pin|FMC_NBL0_Pin
 8001ca2:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001ca6:	607b      	str	r3, [r7, #4]
                          |A21_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4835      	ldr	r0, [pc, #212]	; (8001d94 <HAL_FMC_MspInit+0x12c>)
 8001cbe:	f002 f85d 	bl	8003d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|NAND_INT_Pin|FMC_NE3_Pin
 8001cc2:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8001cc6:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A13_Pin|A12_Pin|A10_Pin
                          |A15_Pin|A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cd4:	230c      	movs	r3, #12
 8001cd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	482e      	ldr	r0, [pc, #184]	; (8001d98 <HAL_FMC_MspInit+0x130>)
 8001cde:	f002 f84d 	bl	8003d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|FMC_NWE_Pin|D3_Pin|FMC_NOE_Pin
 8001ce2:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001ce6:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D15_Pin|D0_Pin|D14_Pin
                          |D13_Pin|A17_Pin|A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4827      	ldr	r0, [pc, #156]	; (8001d9c <HAL_FMC_MspInit+0x134>)
 8001cfe:	f002 f83d 	bl	8003d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001d02:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001d06:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d14:	230c      	movs	r3, #12
 8001d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4820      	ldr	r0, [pc, #128]	; (8001da0 <HAL_FMC_MspInit+0x138>)
 8001d1e:	f002 f82d 	bl	8003d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001d22:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d26:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d34:	230c      	movs	r3, #12
 8001d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4819      	ldr	r0, [pc, #100]	; (8001da4 <HAL_FMC_MspInit+0x13c>)
 8001d3e:	f002 f81d 	bl	8003d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8001d42:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001d46:	607b      	str	r3, [r7, #4]
                          |SDNE0_Pin|SDCKE0_Pin|D20_Pin|D17_Pin
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d54:	230c      	movs	r3, #12
 8001d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4812      	ldr	r0, [pc, #72]	; (8001da8 <HAL_FMC_MspInit+0x140>)
 8001d5e:	f002 f80d 	bl	8003d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin;
 8001d62:	23c0      	movs	r3, #192	; 0xc0
 8001d64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001d72:	2309      	movs	r3, #9
 8001d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480c      	ldr	r0, [pc, #48]	; (8001dac <HAL_FMC_MspInit+0x144>)
 8001d7c:	f001 fffe 	bl	8003d7c <HAL_GPIO_Init>
 8001d80:	e000      	b.n	8001d84 <HAL_FMC_MspInit+0x11c>
    return;
 8001d82:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001f70 	.word	0x20001f70
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021800 	.word	0x40021800
 8001d9c:	40020c00 	.word	0x40020c00
 8001da0:	40022000 	.word	0x40022000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40020800 	.word	0x40020800

08001db0 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001db8:	f7ff ff56 	bl	8001c68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001dcc:	f7ff ff4c 	bl	8001c68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001de0:	f7ff ff42 	bl	8001c68 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a43      	ldr	r2, [pc, #268]	; (8001f08 <HAL_SAI_MspInit+0x11c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d124      	bne.n	8001e48 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_SAI_MspInit+0x120>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10b      	bne.n	8001e1e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e06:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_SAI_MspInit+0x124>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a41      	ldr	r2, [pc, #260]	; (8001f10 <HAL_SAI_MspInit+0x124>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <HAL_SAI_MspInit+0x124>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001e1e:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <HAL_SAI_MspInit+0x120>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <HAL_SAI_MspInit+0x120>)
 8001e26:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e38:	2306      	movs	r3, #6
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4834      	ldr	r0, [pc, #208]	; (8001f14 <HAL_SAI_MspInit+0x128>)
 8001e44:	f001 ff9a 	bl	8003d7c <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a32      	ldr	r2, [pc, #200]	; (8001f18 <HAL_SAI_MspInit+0x12c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d155      	bne.n	8001efe <HAL_SAI_MspInit+0x112>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8001e52:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_SAI_MspInit+0x130>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10b      	bne.n	8001e72 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_SAI_MspInit+0x124>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <HAL_SAI_MspInit+0x124>)
 8001e60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e64:	6453      	str	r3, [r2, #68]	; 0x44
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_SAI_MspInit+0x124>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <HAL_SAI_MspInit+0x130>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <HAL_SAI_MspInit+0x130>)
 8001e7a:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
 8001e7c:	2340      	movs	r3, #64	; 0x40
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4822      	ldr	r0, [pc, #136]	; (8001f20 <HAL_SAI_MspInit+0x134>)
 8001e98:	f001 ff70 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 8001e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001eae:	230a      	movs	r3, #10
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481a      	ldr	r0, [pc, #104]	; (8001f24 <HAL_SAI_MspInit+0x138>)
 8001eba:	f001 ff5f 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ece:	230a      	movs	r3, #10
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4813      	ldr	r0, [pc, #76]	; (8001f28 <HAL_SAI_MspInit+0x13c>)
 8001eda:	f001 ff4f 	bl	8003d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001eee:	2308      	movs	r3, #8
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <HAL_SAI_MspInit+0x13c>)
 8001efa:	f001 ff3f 	bl	8003d7c <HAL_GPIO_Init>

    }
}
 8001efe:	bf00      	nop
 8001f00:	3728      	adds	r7, #40	; 0x28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40015804 	.word	0x40015804
 8001f0c:	20001f74 	.word	0x20001f74
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40015c24 	.word	0x40015c24
 8001f1c:	20001f78 	.word	0x20001f78
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40020000 	.word	0x40020000

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler+0x4>

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f78:	f000 f88e 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <DMA2_Stream0_IRQHandler+0x10>)
 8001f86:	f001 f8d1 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000188 	.word	0x20000188

08001f94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <DMA2_Stream1_IRQHandler+0x10>)
 8001f9a:	f001 f8c7 	bl	800312c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200001e8 	.word	0x200001e8

08001fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd8:	e002      	b.n	8001fe0 <LoopCopyDataInit>

08001fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fde:	3304      	adds	r3, #4

08001fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe4:	d3f9      	bcc.n	8001fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe8:	4c0b      	ldr	r4, [pc, #44]	; (8002018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fec:	e001      	b.n	8001ff2 <LoopFillZerobss>

08001fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ff0:	3204      	adds	r2, #4

08001ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff4:	d3fb      	bcc.n	8001fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ff6:	f7ff ffd7 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ffa:	f005 f9b7 	bl	800736c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffe:	f7fe fa9d 	bl	800053c <main>
  bx  lr    
 8002002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002004:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800200c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002010:	0800740c 	.word	0x0800740c
  ldr r2, =_sbss
 8002014:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002018:	20001fa8 	.word	0x20001fa8

0800201c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800201c:	e7fe      	b.n	800201c <ADC_IRQHandler>

0800201e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002022:	2003      	movs	r0, #3
 8002024:	f000 fbe0 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002028:	2000      	movs	r0, #0
 800202a:	f000 f805 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202e:	f7ff f993 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fbfb 	bl	8002852 <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002074:	f000 fbc3 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000000 	.word	0x20000000
 8002090:	20000008 	.word	0x20000008
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000008 	.word	0x20000008
 80020bc:	20001f7c 	.word	0x20001f7c

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	20001f7c 	.word	0x20001f7c

080020d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ffee 	bl	80020c0 <HAL_GetTick>
 80020e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f0:	d005      	beq.n	80020fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_Delay+0x44>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fe:	bf00      	nop
 8002100:	f7ff ffde 	bl	80020c0 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	429a      	cmp	r2, r3
 800210e:	d8f7      	bhi.n	8002100 <HAL_Delay+0x28>
  {
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000008 	.word	0x20000008

08002120 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e031      	b.n	800219a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff f92e 	bl	80013a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d116      	bne.n	800218c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_ADC_Init+0x84>)
 8002164:	4013      	ands	r3, r2
 8002166:	f043 0202 	orr.w	r2, r3, #2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f970 	bl	8002454 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
 800218a:	e001      	b.n	8002190 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	ffffeefd 	.word	0xffffeefd

080021a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x1c>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e136      	b.n	8002432 <HAL_ADC_ConfigChannel+0x28a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d93a      	bls.n	800224a <HAL_ADC_ConfigChannel+0xa2>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021dc:	d035      	beq.n	800224a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68d9      	ldr	r1, [r3, #12]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	3b1e      	subs	r3, #30
 80021f4:	2207      	movs	r2, #7
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a8d      	ldr	r2, [pc, #564]	; (8002440 <HAL_ADC_ConfigChannel+0x298>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10a      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68d9      	ldr	r1, [r3, #12]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002222:	e035      	b.n	8002290 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	4603      	mov	r3, r0
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4403      	add	r3, r0
 800223c:	3b1e      	subs	r3, #30
 800223e:	409a      	lsls	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002248:	e022      	b.n	8002290 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6919      	ldr	r1, [r3, #16]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	2207      	movs	r2, #7
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43da      	mvns	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	400a      	ands	r2, r1
 800226c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6919      	ldr	r1, [r3, #16]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4618      	mov	r0, r3
 8002280:	4603      	mov	r3, r0
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4403      	add	r3, r0
 8002286:	409a      	lsls	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d824      	bhi.n	80022e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b05      	subs	r3, #5
 80022aa:	221f      	movs	r2, #31
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43da      	mvns	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	400a      	ands	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	3b05      	subs	r3, #5
 80022d4:	fa00 f203 	lsl.w	r2, r0, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	; 0x34
 80022e0:	e04c      	b.n	800237c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b0c      	cmp	r3, #12
 80022e8:	d824      	bhi.n	8002334 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	3b23      	subs	r3, #35	; 0x23
 80022fc:	221f      	movs	r2, #31
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	400a      	ands	r2, r1
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	3b23      	subs	r3, #35	; 0x23
 8002326:	fa00 f203 	lsl.w	r2, r0, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
 8002332:	e023      	b.n	800237c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	3b41      	subs	r3, #65	; 0x41
 8002346:	221f      	movs	r2, #31
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43da      	mvns	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	400a      	ands	r2, r1
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	3b41      	subs	r3, #65	; 0x41
 8002370:	fa00 f203 	lsl.w	r2, r0, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a30      	ldr	r2, [pc, #192]	; (8002444 <HAL_ADC_ConfigChannel+0x29c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10a      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1f4>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800238e:	d105      	bne.n	800239c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002390:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a2c      	ldr	r2, [pc, #176]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 8002396:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800239a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a28      	ldr	r2, [pc, #160]	; (8002444 <HAL_ADC_ConfigChannel+0x29c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10f      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x21e>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b12      	cmp	r3, #18
 80023ac:	d10b      	bne.n	80023c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a25      	ldr	r2, [pc, #148]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4a22      	ldr	r2, [pc, #136]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1e      	ldr	r2, [pc, #120]	; (8002444 <HAL_ADC_ConfigChannel+0x29c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d12b      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x280>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_ADC_ConfigChannel+0x298>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <HAL_ADC_ConfigChannel+0x23a>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b11      	cmp	r3, #17
 80023e0:	d122      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4a18      	ldr	r2, [pc, #96]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_ADC_ConfigChannel+0x298>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d111      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_ADC_ConfigChannel+0x2a4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_ADC_ConfigChannel+0x2a8>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	0c9a      	lsrs	r2, r3, #18
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800241a:	e002      	b.n	8002422 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	3b01      	subs	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f9      	bne.n	800241c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	10000012 	.word	0x10000012
 8002444:	40012000 	.word	0x40012000
 8002448:	40012300 	.word	0x40012300
 800244c:	20000000 	.word	0x20000000
 8002450:	431bde83 	.word	0x431bde83

08002454 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800245c:	4b78      	ldr	r3, [pc, #480]	; (8002640 <ADC_Init+0x1ec>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a77      	ldr	r2, [pc, #476]	; (8002640 <ADC_Init+0x1ec>)
 8002462:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002466:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002468:	4b75      	ldr	r3, [pc, #468]	; (8002640 <ADC_Init+0x1ec>)
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4973      	ldr	r1, [pc, #460]	; (8002640 <ADC_Init+0x1ec>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	021a      	lsls	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	4a58      	ldr	r2, [pc, #352]	; (8002644 <ADC_Init+0x1f0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d022      	beq.n	800252e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6899      	ldr	r1, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002518:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	e00f      	b.n	800254e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800254c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0202 	bic.w	r2, r2, #2
 800255c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6899      	ldr	r1, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	005a      	lsls	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800259a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	3b01      	subs	r3, #1
 80025a8:	035a      	lsls	r2, r3, #13
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	e007      	b.n	80025c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	3b01      	subs	r3, #1
 80025e0:	051a      	lsls	r2, r3, #20
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6899      	ldr	r1, [r3, #8]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002606:	025a      	lsls	r2, r3, #9
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	029a      	lsls	r2, r3, #10
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40012300 	.word	0x40012300
 8002644:	0f000001 	.word	0x0f000001

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	05fa0000 	.word	0x05fa0000

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	; (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
         );
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff29 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002810:	f7ff ff3e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 8002814:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7ff ff8e 	bl	800273c <NVIC_EncodePriority>
 8002820:	4602      	mov	r2, r0
 8002822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5d 	bl	80026e8 <__NVIC_SetPriority>
}
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	4603      	mov	r3, r0
 800283e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff31 	bl	80026ac <__NVIC_EnableIRQ>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff ffa2 	bl	80027a4 <SysTick_Config>
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0ac      	b.n	80029d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 faa2 	bl	8002dcc <DFSDM_GetChannelFromInstance>
 8002888:	4603      	mov	r3, r0
 800288a:	4a55      	ldr	r2, [pc, #340]	; (80029e0 <HAL_DFSDM_ChannelInit+0x174>)
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e09f      	b.n	80029d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fe fea9 	bl	80015f0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800289e:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <HAL_DFSDM_ChannelInit+0x178>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a4f      	ldr	r2, [pc, #316]	; (80029e4 <HAL_DFSDM_ChannelInit+0x178>)
 80028a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80028a8:	4b4e      	ldr	r3, [pc, #312]	; (80029e4 <HAL_DFSDM_ChannelInit+0x178>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d125      	bne.n	80028fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80028b0:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80028bc:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4948      	ldr	r1, [pc, #288]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80028ca:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a46      	ldr	r2, [pc, #280]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80028d4:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	791b      	ldrb	r3, [r3, #4]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d108      	bne.n	80028f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80028de:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	041b      	lsls	r3, r3, #16
 80028ea:	493f      	ldr	r1, [pc, #252]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a3c      	ldr	r2, [pc, #240]	; (80029e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80028f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800290a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800291a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002920:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 020f 	bic.w	r2, r2, #15
 8002938:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6819      	ldr	r1, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002960:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f002 0207 	and.w	r2, r2, #7
 800298c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fa00 	bl	8002dcc <DFSDM_GetChannelFromInstance>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4904      	ldr	r1, [pc, #16]	; (80029e0 <HAL_DFSDM_ChannelInit+0x174>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20001f84 	.word	0x20001f84
 80029e4:	20001f80 	.word	0x20001f80
 80029e8:	40017400 	.word	0x40017400

080029ec <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e0c6      	b.n	8002b8c <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a64      	ldr	r2, [pc, #400]	; (8002b94 <HAL_DFSDM_FilterInit+0x1a8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d109      	bne.n	8002a1c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d003      	beq.n	8002a18 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b7      	b.n	8002b8c <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fe fcf3 	bl	8001420 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002a48:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7a1b      	ldrb	r3, [r3, #8]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d108      	bne.n	8002a64 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	e007      	b.n	8002a74 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a72:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7a5b      	ldrb	r3, [r3, #9]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d108      	bne.n	8002a8e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_DFSDM_FilterInit+0x1ac>)
 8002aaa:	400b      	ands	r3, r1
 8002aac:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d108      	bne.n	8002ac8 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7c1b      	ldrb	r3, [r3, #16]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d108      	bne.n	8002ae2 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0210 	orr.w	r2, r2, #16
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	e007      	b.n	8002af2 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0210 	bic.w	r2, r2, #16
 8002af0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7c5b      	ldrb	r3, [r3, #17]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d108      	bne.n	8002b0c <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0220 	orr.w	r2, r2, #32
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	e007      	b.n	8002b1c <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0220 	bic.w	r2, r2, #32
 8002b1a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6959      	ldr	r1, [r3, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <HAL_DFSDM_FilterInit+0x1b0>)
 8002b28:	400b      	ands	r3, r1
 8002b2a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6959      	ldr	r1, [r3, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002b3e:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8002b46:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7c1a      	ldrb	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0201 	orr.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40017500 	.word	0x40017500
 8002b98:	ffff80f7 	.word	0xffff80f7
 8002b9c:	1c00ff00 	.word	0x1c00ff00

08002ba0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02c      	beq.n	8002c14 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002bc0:	2bff      	cmp	r3, #255	; 0xff
 8002bc2:	d027      	beq.n	8002c14 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6819      	ldr	r1, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d10d      	bne.n	8002bf6 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	021b      	lsls	r3, r3, #8
 8002be4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	e00a      	b.n	8002c0c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
 8002c12:	e001      	b.n	8002c18 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	f8fbffff 	.word	0xf8fbffff

08002c2c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d102      	bne.n	8002c4e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	75fb      	strb	r3, [r7, #23]
 8002c4c:	e066      	b.n	8002d1c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c5c:	d002      	beq.n	8002c64 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
 8002c62:	e05b      	b.n	8002d1c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10e      	bne.n	8002c8a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d002      	beq.n	8002c8a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
 8002c88:	e048      	b.n	8002d1c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca4:	d102      	bne.n	8002cac <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
 8002caa:	e037      	b.n	8002d1c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d004      	beq.n	8002cc0 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d12b      	bne.n	8002d18 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8002cce:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	d101      	bne.n	8002ce0 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8002cde:	e000      	b.n	8002ce2 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8002ce0:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	331c      	adds	r3, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f000 f9b8 	bl	800306c <HAL_DMA_Start_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	22ff      	movs	r2, #255	; 0xff
 8002d06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002d0e:	e005      	b.n	8002d1c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f8a7 	bl	8002e64 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002d16:	e001      	b.n	8002d1c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	08002d8d 	.word	0x08002d8d
 8002d2c:	08002da9 	.word	0x08002da9
 8002d30:	08002d71 	.word	0x08002d71

08002d34 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff ffe2 	bl	8002d48 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f7ff ffca 	bl	8002d34 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2203      	movs	r2, #3
 8002dba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff ffcd 	bl	8002d5c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <DFSDM_GetChannelFromInstance+0x7c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d102      	bne.n	8002de2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	e02b      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <DFSDM_GetChannelFromInstance+0x80>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d102      	bne.n	8002df0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e024      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <DFSDM_GetChannelFromInstance+0x84>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d102      	bne.n	8002dfe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e01d      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <DFSDM_GetChannelFromInstance+0x88>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d102      	bne.n	8002e0c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002e06:	2303      	movs	r3, #3
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e016      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <DFSDM_GetChannelFromInstance+0x8c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d102      	bne.n	8002e1a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002e14:	2304      	movs	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e00f      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a0f      	ldr	r2, [pc, #60]	; (8002e5c <DFSDM_GetChannelFromInstance+0x90>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d102      	bne.n	8002e28 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002e22:	2305      	movs	r3, #5
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	e008      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	; (8002e60 <DFSDM_GetChannelFromInstance+0x94>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d102      	bne.n	8002e36 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002e30:	2306      	movs	r3, #6
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e001      	b.n	8002e3a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002e36:	2307      	movs	r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	40017400 	.word	0x40017400
 8002e4c:	40017420 	.word	0x40017420
 8002e50:	40017440 	.word	0x40017440
 8002e54:	40017460 	.word	0x40017460
 8002e58:	40017480 	.word	0x40017480
 8002e5c:	400174a0 	.word	0x400174a0
 8002e60:	400174c0 	.word	0x400174c0

08002e64 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d108      	bne.n	8002e86 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e033      	b.n	8002eee <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002ea4:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d116      	bne.n	8002eee <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d107      	bne.n	8002ed8 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0202 	orr.w	r2, r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <DFSDM_RegConvStart+0x84>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	e000      	b.n	8002eea <DFSDM_RegConvStart+0x86>
 8002ee8:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <DFSDM_RegConvStart+0x98>
 8002ef8:	2202      	movs	r2, #2
 8002efa:	e000      	b.n	8002efe <DFSDM_RegConvStart+0x9a>
 8002efc:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7ff f8d0 	bl	80020c0 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e099      	b.n	8003060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4c:	e00f      	b.n	8002f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f4e:	f7ff f8b7 	bl	80020c0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d908      	bls.n	8002f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e078      	b.n	8003060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e8      	bne.n	8002f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_DMA_Init+0x158>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d117      	bne.n	8003032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fa77 	bl	8003508 <DMA_CheckFifoParam>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2240      	movs	r2, #64	; 0x40
 8003024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800302e:	2301      	movs	r3, #1
 8003030:	e016      	b.n	8003060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa2e 	bl	800349c <DMA_CalcBaseAndBitshift>
 8003040:	4603      	mov	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	223f      	movs	r2, #63	; 0x3f
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	e010803f 	.word	0xe010803f

0800306c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_DMA_Start_IT+0x26>
 800308e:	2302      	movs	r3, #2
 8003090:	e048      	b.n	8003124 <HAL_DMA_Start_IT+0xb8>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d137      	bne.n	8003116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9c0 	bl	8003440 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c4:	223f      	movs	r2, #63	; 0x3f
 80030c6:	409a      	lsls	r2, r3
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0216 	orr.w	r2, r2, #22
 80030da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0208 	orr.w	r2, r2, #8
 8003102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e005      	b.n	8003122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003138:	4b8e      	ldr	r3, [pc, #568]	; (8003374 <HAL_DMA_IRQHandler+0x248>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a8e      	ldr	r2, [pc, #568]	; (8003378 <HAL_DMA_IRQHandler+0x24c>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	0a9b      	lsrs	r3, r3, #10
 8003144:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	2208      	movs	r2, #8
 8003158:	409a      	lsls	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	2208      	movs	r2, #8
 8003186:	409a      	lsls	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f043 0201 	orr.w	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2201      	movs	r2, #1
 80031bc:	409a      	lsls	r2, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f043 0202 	orr.w	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2204      	movs	r2, #4
 80031d4:	409a      	lsls	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d012      	beq.n	8003204 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	2204      	movs	r2, #4
 80031f2:	409a      	lsls	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	f043 0204 	orr.w	r2, r3, #4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2210      	movs	r2, #16
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d043      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03c      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2210      	movs	r2, #16
 8003228:	409a      	lsls	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d018      	beq.n	800326e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d108      	bne.n	800325c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d024      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
 800325a:	e01f      	b.n	800329c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003260:	2b00      	cmp	r3, #0
 8003262:	d01b      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e016      	b.n	800329c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003278:	2b00      	cmp	r3, #0
 800327a:	d107      	bne.n	800328c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0208 	bic.w	r2, r2, #8
 800328a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a0:	2220      	movs	r2, #32
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 808f 	beq.w	80033cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 8087 	beq.w	80033cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c2:	2220      	movs	r2, #32
 80032c4:	409a      	lsls	r2, r3
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d136      	bne.n	8003344 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0216 	bic.w	r2, r2, #22
 80032e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_DMA_IRQHandler+0x1da>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0208 	bic.w	r2, r2, #8
 8003314:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331a:	223f      	movs	r2, #63	; 0x3f
 800331c:	409a      	lsls	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	2b00      	cmp	r3, #0
 8003338:	d07e      	beq.n	8003438 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	4798      	blx	r3
        }
        return;
 8003342:	e079      	b.n	8003438 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01d      	beq.n	800338e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10d      	bne.n	800337c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	2b00      	cmp	r3, #0
 8003366:	d031      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3
 8003370:	e02c      	b.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
 8003372:	bf00      	nop
 8003374:	20000000 	.word	0x20000000
 8003378:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	2b00      	cmp	r3, #0
 8003382:	d023      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
 800338c:	e01e      	b.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10f      	bne.n	80033bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0210 	bic.w	r2, r2, #16
 80033aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d032      	beq.n	800343a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d022      	beq.n	8003426 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2205      	movs	r2, #5
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	d307      	bcc.n	8003414 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f2      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x2cc>
 8003412:	e000      	b.n	8003416 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003414:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
 8003436:	e000      	b.n	800343a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003438:	bf00      	nop
    }
  }
}
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800345c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2b40      	cmp	r3, #64	; 0x40
 800346c:	d108      	bne.n	8003480 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800347e:	e007      	b.n	8003490 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]
}
 8003490:	bf00      	nop
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	3b10      	subs	r3, #16
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <DMA_CalcBaseAndBitshift+0x60>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <DMA_CalcBaseAndBitshift+0x64>)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d908      	bls.n	80034dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	1d1a      	adds	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	659a      	str	r2, [r3, #88]	; 0x58
 80034da:	e006      	b.n	80034ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <DMA_CalcBaseAndBitshift+0x68>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	aaaaaaab 	.word	0xaaaaaaab
 8003500:	080073f4 	.word	0x080073f4
 8003504:	fffffc00 	.word	0xfffffc00

08003508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d11f      	bne.n	8003562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b03      	cmp	r3, #3
 8003526:	d856      	bhi.n	80035d6 <DMA_CheckFifoParam+0xce>
 8003528:	a201      	add	r2, pc, #4	; (adr r2, 8003530 <DMA_CheckFifoParam+0x28>)
 800352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352e:	bf00      	nop
 8003530:	08003541 	.word	0x08003541
 8003534:	08003553 	.word	0x08003553
 8003538:	08003541 	.word	0x08003541
 800353c:	080035d7 	.word	0x080035d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d046      	beq.n	80035da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003550:	e043      	b.n	80035da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800355a:	d140      	bne.n	80035de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003560:	e03d      	b.n	80035de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356a:	d121      	bne.n	80035b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d837      	bhi.n	80035e2 <DMA_CheckFifoParam+0xda>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <DMA_CheckFifoParam+0x70>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	08003589 	.word	0x08003589
 800357c:	0800358f 	.word	0x0800358f
 8003580:	08003589 	.word	0x08003589
 8003584:	080035a1 	.word	0x080035a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e030      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d025      	beq.n	80035e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800359e:	e022      	b.n	80035e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a8:	d11f      	bne.n	80035ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035ae:	e01c      	b.n	80035ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d903      	bls.n	80035be <DMA_CheckFifoParam+0xb6>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d003      	beq.n	80035c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035bc:	e018      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      break;
 80035c2:	e015      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00e      	beq.n	80035ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      break;
 80035d4:	e00b      	b.n	80035ee <DMA_CheckFifoParam+0xe6>
      break;
 80035d6:	bf00      	nop
 80035d8:	e00a      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e008      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e006      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e2:	bf00      	nop
 80035e4:	e004      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
 80035e8:	e002      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80035ea:	bf00      	nop
 80035ec:	e000      	b.n	80035f0 <DMA_CheckFifoParam+0xe8>
      break;
 80035ee:	bf00      	nop
    }
  } 
  
  return status; 
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e109      	b.n	8003828 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	7c5b      	ldrb	r3, [r3, #17]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe f848 	bl	80016b4 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2203      	movs	r2, #3
 8003628:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800363e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800364a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003652:	f7fe fd35 	bl	80020c0 <HAL_GetTick>
 8003656:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003658:	e009      	b.n	800366e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800365a:	f7fe fd31 	bl	80020c0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003668:	d901      	bls.n	800366e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e0dc      	b.n	8003828 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8003676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ed      	beq.n	800365a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b69      	ldr	r3, [pc, #420]	; (8003830 <HAL_DSI_Init+0x230>)
 800368c:	400b      	ands	r3, r1
 800368e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80036a6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80036ae:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80036e2:	2001      	movs	r0, #1
 80036e4:	f7fe fcf8 	bl	80020d8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80036e8:	f7fe fcea 	bl	80020c0 <HAL_GetTick>
 80036ec:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80036ee:	e009      	b.n	8003704 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80036f0:	f7fe fce6 	bl	80020c0 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fe:	d901      	bls.n	8003704 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e091      	b.n	8003828 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ed      	beq.n	80036f0 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0206 	orr.w	r2, r2, #6
 8003724:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0203 	bic.w	r2, r2, #3
 8003738:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0203 	bic.w	r2, r2, #3
 8003766:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800378e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_DSI_Init+0x1b0>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	e000      	b.n	80037b2 <HAL_DSI_Init+0x1b2>
 80037b0:	2301      	movs	r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_DSI_Init+0x234>)
 80037b8:	fb03 f202 	mul.w	r2, r3, r2
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	409a      	lsls	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80037ce:	fb01 f303 	mul.w	r3, r1, r3
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80037e8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2200      	movs	r2, #0
 8003806:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	fffc8603 	.word	0xfffc8603
 8003834:	003d0900 	.word	0x003d0900

08003838 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7c1b      	ldrb	r3, [r3, #16]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_DSI_ConfigErrorMonitor+0x16>
 800384a:	2302      	movs	r3, #2
 800384c:	e0aa      	b.n	80039a4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2200      	movs	r2, #0
 800385a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003888:	430b      	orrs	r3, r1
 800388a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80038a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0202 	orr.w	r2, r2, #2
 80038e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 020c 	orr.w	r2, r2, #12
 8003902:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0210 	orr.w	r2, r2, #16
 8003920:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800397a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8003998:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7c1b      	ldrb	r3, [r3, #16]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_DSI_ConfigCommand+0x16>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e049      	b.n	8003a5a <HAL_DSI_ConfigCommand+0xaa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_DSI_ConfigCommand+0xb8>)
 80039d8:	400b      	ands	r3, r1
 80039da:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80039ea:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80039f0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80039f6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80039fc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003a02:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003a08:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003a0e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003a14:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003a1a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003a20:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003a26:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0202 	bic.w	r2, r2, #2
 8003a3e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	fef080ff 	.word	0xfef080ff

08003a6c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7c1b      	ldrb	r3, [r3, #16]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_DSI_ConfigFlowControl+0x16>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e016      	b.n	8003ab0 <HAL_DSI_ConfigFlowControl+0x44>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 021f 	bic.w	r2, r2, #31
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7c1b      	ldrb	r3, [r3, #16]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_DSI_ConfigPhyTimer+0x16>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e058      	b.n	8003b84 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	bf38      	it	cc
 8003ae4:	4613      	movcc	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003af8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	041a      	lsls	r2, r3, #16
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003b26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003b60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	021a      	lsls	r2, r3, #8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7c1b      	ldrb	r3, [r3, #16]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e0b4      	b.n	8003d10 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003bba:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6899      	ldr	r1, [r3, #8]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	021a      	lsls	r2, r3, #8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	041a      	lsls	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b3f      	ldr	r3, [pc, #252]	; (8003d1c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003c20:	400b      	ands	r3, r1
 8003c22:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003c44:	400b      	ands	r3, r1
 8003c46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003c6e:	400b      	ands	r3, r1
 8003c70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	695a      	ldr	r2, [r3, #20]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003cec:	400b      	ands	r3, r1
 8003cee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	ffff0000 	.word	0xffff0000

08003d20 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7c1b      	ldrb	r3, [r3, #16]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e01b      	b.n	8003d6e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8003d4c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	065a      	lsls	r2, r3, #25
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	e175      	b.n	8004088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	f040 8164 	bne.w	8004082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d005      	beq.n	8003dd2 <HAL_GPIO_Init+0x56>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d130      	bne.n	8003e34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2203      	movs	r2, #3
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0201 	and.w	r2, r3, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d017      	beq.n	8003e70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d123      	bne.n	8003ec4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	08da      	lsrs	r2, r3, #3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3208      	adds	r2, #8
 8003e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	220f      	movs	r2, #15
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	08da      	lsrs	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	69b9      	ldr	r1, [r7, #24]
 8003ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0203 	and.w	r2, r3, #3
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80be 	beq.w	8004082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f06:	4b66      	ldr	r3, [pc, #408]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f10:	6453      	str	r3, [r2, #68]	; 0x44
 8003f12:	4b63      	ldr	r3, [pc, #396]	; (80040a0 <HAL_GPIO_Init+0x324>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f1e:	4a61      	ldr	r2, [pc, #388]	; (80040a4 <HAL_GPIO_Init+0x328>)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	089b      	lsrs	r3, r3, #2
 8003f24:	3302      	adds	r3, #2
 8003f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	220f      	movs	r2, #15
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a58      	ldr	r2, [pc, #352]	; (80040a8 <HAL_GPIO_Init+0x32c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d037      	beq.n	8003fba <HAL_GPIO_Init+0x23e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a57      	ldr	r2, [pc, #348]	; (80040ac <HAL_GPIO_Init+0x330>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d031      	beq.n	8003fb6 <HAL_GPIO_Init+0x23a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a56      	ldr	r2, [pc, #344]	; (80040b0 <HAL_GPIO_Init+0x334>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02b      	beq.n	8003fb2 <HAL_GPIO_Init+0x236>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a55      	ldr	r2, [pc, #340]	; (80040b4 <HAL_GPIO_Init+0x338>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d025      	beq.n	8003fae <HAL_GPIO_Init+0x232>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a54      	ldr	r2, [pc, #336]	; (80040b8 <HAL_GPIO_Init+0x33c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01f      	beq.n	8003faa <HAL_GPIO_Init+0x22e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a53      	ldr	r2, [pc, #332]	; (80040bc <HAL_GPIO_Init+0x340>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d019      	beq.n	8003fa6 <HAL_GPIO_Init+0x22a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_GPIO_Init+0x344>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d013      	beq.n	8003fa2 <HAL_GPIO_Init+0x226>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a51      	ldr	r2, [pc, #324]	; (80040c4 <HAL_GPIO_Init+0x348>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00d      	beq.n	8003f9e <HAL_GPIO_Init+0x222>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a50      	ldr	r2, [pc, #320]	; (80040c8 <HAL_GPIO_Init+0x34c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d007      	beq.n	8003f9a <HAL_GPIO_Init+0x21e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4f      	ldr	r2, [pc, #316]	; (80040cc <HAL_GPIO_Init+0x350>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_GPIO_Init+0x21a>
 8003f92:	2309      	movs	r3, #9
 8003f94:	e012      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003f96:	230a      	movs	r3, #10
 8003f98:	e010      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e00e      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003f9e:	2307      	movs	r3, #7
 8003fa0:	e00c      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	e00a      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	e008      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003faa:	2304      	movs	r3, #4
 8003fac:	e006      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e004      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_Init+0x240>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	f002 0203 	and.w	r2, r2, #3
 8003fc2:	0092      	lsls	r2, r2, #2
 8003fc4:	4093      	lsls	r3, r2
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fcc:	4935      	ldr	r1, [pc, #212]	; (80040a4 <HAL_GPIO_Init+0x328>)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004004:	4b32      	ldr	r3, [pc, #200]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004028:	4a29      	ldr	r2, [pc, #164]	; (80040d0 <HAL_GPIO_Init+0x354>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004052:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <HAL_GPIO_Init+0x354>)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <HAL_GPIO_Init+0x354>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_GPIO_Init+0x354>)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	3301      	adds	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	2b0f      	cmp	r3, #15
 800408c:	f67f ae86 	bls.w	8003d9c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	3724      	adds	r7, #36	; 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40013800 	.word	0x40013800
 80040a8:	40020000 	.word	0x40020000
 80040ac:	40020400 	.word	0x40020400
 80040b0:	40020800 	.word	0x40020800
 80040b4:	40020c00 	.word	0x40020c00
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40021400 	.word	0x40021400
 80040c0:	40021800 	.word	0x40021800
 80040c4:	40021c00 	.word	0x40021c00
 80040c8:	40022000 	.word	0x40022000
 80040cc:	40022400 	.word	0x40022400
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040f0:	e003      	b.n	80040fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e090      	b.n	8004244 <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7fd fe3a 	bl	8001db0 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3308      	adds	r3, #8
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f002 fc28 	bl	800699c <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	461a      	mov	r2, r3
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	f002 fcb0 	bl	8006abc <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6858      	ldr	r0, [r3, #4]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	f002 fcf7 	bl	8006b5c <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6892      	ldr	r2, [r2, #8]
 8004182:	f041 0101 	orr.w	r1, r1, #1
 8004186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_NOR_Init+0x144>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e002      	b.n	80041a0 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 800419a:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_NOR_Init+0x144>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 80041b0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e012      	b.n	80041de <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d103      	bne.n	80041c8 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 80041c0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00a      	b.n	80041de <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d103      	bne.n	80041d8 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 80041d0:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	e002      	b.n	80041de <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 80041d8:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80041dc:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10c      	bne.n	8004200 <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f002 fceb 	bl	8006bcc <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2204      	movs	r2, #4
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041fe:	e020      	b.n	8004242 <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <HAL_NOR_Init+0x144>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d102      	bne.n	800420e <HAL_NOR_Init+0x106>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	33aa      	adds	r3, #170	; 0xaa
 800420c:	e001      	b.n	8004212 <HAL_NOR_Init+0x10a>
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	3355      	adds	r3, #85	; 0x55
 8004212:	2298      	movs	r2, #152	; 0x98
 8004214:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004216:	f3bf 8f4f 	dsb	sy
}
 800421a:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_NOR_Init+0x144>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_NOR_Init+0x122>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3326      	adds	r3, #38	; 0x26
 8004228:	e001      	b.n	800422e <HAL_NOR_Init+0x126>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3313      	adds	r3, #19
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f000 f809 	bl	8004250 <HAL_NOR_ReturnToReadMode>
 800423e:	4603      	mov	r3, r0
 8004240:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8004242:	7cfb      	ldrb	r3, [r7, #19]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20001fa4 	.word	0x20001fa4

08004250 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004262:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8004264:	7abb      	ldrb	r3, [r7, #10]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d101      	bne.n	800426e <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
 800426c:	e052      	b.n	8004314 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 800426e:	7abb      	ldrb	r3, [r7, #10]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d101      	bne.n	8004278 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e04d      	b.n	8004314 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8004278:	7abb      	ldrb	r3, [r7, #10]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d149      	bne.n	8004312 <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_NOR_ReturnToReadMode+0x3c>
 8004288:	2302      	movs	r3, #2
 800428a:	e043      	b.n	8004314 <HAL_NOR_ReturnToReadMode+0xc4>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 80042a4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e012      	b.n	80042d2 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d103      	bne.n	80042bc <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 80042b4:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e00a      	b.n	80042d2 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d103      	bne.n	80042cc <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 80042c4:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e002      	b.n	80042d2 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 80042cc:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 80042d0:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d105      	bne.n	80042e6 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22f0      	movs	r2, #240	; 0xf0
 80042de:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80042e0:	f3bf 8f4f 	dsb	sy
}
 80042e4:	e00b      	b.n	80042fe <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d105      	bne.n	80042fa <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80042f4:	f3bf 8f4f 	dsb	sy
}
 80042f8:	e001      	b.n	80042fe <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7aba      	ldrb	r2, [r7, #10]
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	e000      	b.n	8004314 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004322:	b08f      	sub	sp, #60	; 0x3c
 8004324:	af0a      	add	r7, sp, #40	; 0x28
 8004326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e116      	b.n	8004560 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d106      	bne.n	8004352 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fd fb3b 	bl	80019c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2203      	movs	r2, #3
 8004356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fd5f 	bl	8006e34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	687e      	ldr	r6, [r7, #4]
 800437e:	466d      	mov	r5, sp
 8004380:	f106 0410 	add.w	r4, r6, #16
 8004384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800438a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800438c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004390:	e885 0003 	stmia.w	r5, {r0, r1}
 8004394:	1d33      	adds	r3, r6, #4
 8004396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	f002 fcf3 	bl	8006d84 <USB_CoreInit>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0d7      	b.n	8004560 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f002 fd4d 	bl	8006e56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043bc:	2300      	movs	r3, #0
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e04a      	b.n	8004458 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	333d      	adds	r3, #61	; 0x3d
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	333c      	adds	r3, #60	; 0x3c
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	b298      	uxth	r0, r3
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3344      	adds	r3, #68	; 0x44
 80043fe:	4602      	mov	r2, r0
 8004400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	3340      	adds	r3, #64	; 0x40
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	3348      	adds	r3, #72	; 0x48
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800442a:	7bfa      	ldrb	r2, [r7, #15]
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	4613      	mov	r3, r2
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	440b      	add	r3, r1
 8004438:	334c      	adds	r3, #76	; 0x4c
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3354      	adds	r3, #84	; 0x54
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	3301      	adds	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3af      	bcc.n	80043c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e044      	b.n	80044f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044a6:	2200      	movs	r2, #0
 80044a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044c0:	7bfa      	ldrb	r2, [r7, #15]
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	3301      	adds	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d3b5      	bcc.n	8004468 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	687e      	ldr	r6, [r7, #4]
 8004504:	466d      	mov	r5, sp
 8004506:	f106 0410 	add.w	r4, r6, #16
 800450a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800450c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004516:	e885 0003 	stmia.w	r5, {r0, r1}
 800451a:	1d33      	adds	r3, r6, #4
 800451c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800451e:	6838      	ldr	r0, [r7, #0]
 8004520:	f002 fce6 	bl	8006ef0 <USB_DevInit>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e014      	b.n	8004560 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f80a 	bl	8004568 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f002 fea4 	bl	80072a6 <USB_DevDisconnect>

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004568 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_PCDEx_ActivateLPM+0x44>)
 8004598:	4313      	orrs	r3, r2
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	10000003 	.word	0x10000003

080045b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40007000 	.word	0x40007000

080045d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7fd fd72 	bl	80020c0 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e067      	b.n	80046b8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fd f89d 	bl	800173c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004602:	f241 3188 	movw	r1, #5000	; 0x1388
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f85e 	bl	80046c8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	3b01      	subs	r3, #1
 800461c:	021a      	lsls	r2, r3, #8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	2120      	movs	r1, #32
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f856 	bl	80046e4 <QSPI_WaitFlagStateUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800463c:	7afb      	ldrb	r3, [r7, #11]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d135      	bne.n	80046ae <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_QSPI_Init+0xf0>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6852      	ldr	r2, [r2, #4]
 8004650:	0611      	lsls	r1, r2, #24
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68d2      	ldr	r2, [r2, #12]
 8004656:	4311      	orrs	r1, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	69d2      	ldr	r2, [r2, #28]
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6a12      	ldr	r2, [r2, #32]
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_QSPI_Init+0xf4>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6912      	ldr	r2, [r2, #16]
 800467a:	0411      	lsls	r1, r2, #16
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6952      	ldr	r2, [r2, #20]
 8004680:	4311      	orrs	r1, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6992      	ldr	r2, [r2, #24]
 8004686:	4311      	orrs	r1, r2
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	430b      	orrs	r3, r1
 800468e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80046b6:	7afb      	ldrb	r3, [r7, #11]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	00ffff2f 	.word	0x00ffff2f
 80046c4:	ffe0f8fe 	.word	0xffe0f8fe

080046c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046f4:	e01a      	b.n	800472c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046fc:	d016      	beq.n	800472c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fd fcdf 	bl	80020c0 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2204      	movs	r2, #4
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e00e      	b.n	800474a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	79fb      	ldrb	r3, [r7, #7]
 8004744:	429a      	cmp	r2, r3
 8004746:	d1d6      	bne.n	80046f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800475c:	2300      	movs	r3, #0
 800475e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e29b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8087 	beq.w	8004886 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004778:	4b96      	ldr	r3, [pc, #600]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b04      	cmp	r3, #4
 8004782:	d00c      	beq.n	800479e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004784:	4b93      	ldr	r3, [pc, #588]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b08      	cmp	r3, #8
 800478e:	d112      	bne.n	80047b6 <HAL_RCC_OscConfig+0x62>
 8004790:	4b90      	ldr	r3, [pc, #576]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479c:	d10b      	bne.n	80047b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479e:	4b8d      	ldr	r3, [pc, #564]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d06c      	beq.n	8004884 <HAL_RCC_OscConfig+0x130>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d168      	bne.n	8004884 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e275      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d106      	bne.n	80047ce <HAL_RCC_OscConfig+0x7a>
 80047c0:	4b84      	ldr	r3, [pc, #528]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a83      	ldr	r2, [pc, #524]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e02e      	b.n	800482c <HAL_RCC_OscConfig+0xd8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCC_OscConfig+0x9c>
 80047d6:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a7e      	ldr	r2, [pc, #504]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047e0:	6013      	str	r3, [r2, #0]
 80047e2:	4b7c      	ldr	r3, [pc, #496]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7b      	ldr	r2, [pc, #492]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	e01d      	b.n	800482c <HAL_RCC_OscConfig+0xd8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f8:	d10c      	bne.n	8004814 <HAL_RCC_OscConfig+0xc0>
 80047fa:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a75      	ldr	r2, [pc, #468]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	4b73      	ldr	r3, [pc, #460]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a72      	ldr	r2, [pc, #456]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800480c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e00b      	b.n	800482c <HAL_RCC_OscConfig+0xd8>
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6e      	ldr	r2, [pc, #440]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800481a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6b      	ldr	r2, [pc, #428]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fd fc44 	bl	80020c0 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7fd fc40 	bl	80020c0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e229      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0xe8>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fd fc30 	bl	80020c0 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004864:	f7fd fc2c 	bl	80020c0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e215      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	4b57      	ldr	r3, [pc, #348]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x110>
 8004882:	e000      	b.n	8004886 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d069      	beq.n	8004966 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004892:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800489e:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d11c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x190>
 80048aa:	4b4a      	ldr	r3, [pc, #296]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d116      	bne.n	80048e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x17a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e1e9      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	e040      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d023      	beq.n	8004934 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f8:	f7fd fbe2 	bl	80020c0 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004900:	f7fd fbde 	bl	80020c0 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1c7      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004912:	4b30      	ldr	r3, [pc, #192]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800492e:	4313      	orrs	r3, r2
 8004930:	600b      	str	r3, [r1, #0]
 8004932:	e018      	b.n	8004966 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a26      	ldr	r2, [pc, #152]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd fbbe 	bl	80020c0 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004948:	f7fd fbba 	bl	80020c0 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1a3      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d038      	beq.n	80049e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d019      	beq.n	80049ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497a:	4b16      	ldr	r3, [pc, #88]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004986:	f7fd fb9b 	bl	80020c0 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800498e:	f7fd fb97 	bl	80020c0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e180      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a0:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x23a>
 80049ac:	e01a      	b.n	80049e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x280>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ba:	f7fd fb81 	bl	80020c0 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c2:	f7fd fb7d 	bl	80020c0 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d903      	bls.n	80049d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e166      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
 80049d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d8:	4b92      	ldr	r3, [pc, #584]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 80049da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ee      	bne.n	80049c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80a4 	beq.w	8004b3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b8c      	ldr	r3, [pc, #560]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b89      	ldr	r3, [pc, #548]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	4a88      	ldr	r2, [pc, #544]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6413      	str	r3, [r2, #64]	; 0x40
 8004a0a:	4b86      	ldr	r3, [pc, #536]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1a:	4b83      	ldr	r3, [pc, #524]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d118      	bne.n	8004a58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a26:	4b80      	ldr	r3, [pc, #512]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a7f      	ldr	r2, [pc, #508]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a32:	f7fd fb45 	bl	80020c0 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a3a:	f7fd fb41 	bl	80020c0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	; 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e12a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4c:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCC_OscConfig+0x4d4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x31a>
 8004a60:	4b70      	ldr	r3, [pc, #448]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a6f      	ldr	r2, [pc, #444]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	e02d      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x33c>
 8004a76:	4b6b      	ldr	r3, [pc, #428]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	4a6a      	ldr	r2, [pc, #424]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	6713      	str	r3, [r2, #112]	; 0x70
 8004a82:	4b68      	ldr	r3, [pc, #416]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a67      	ldr	r2, [pc, #412]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	e01c      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x35e>
 8004a98:	4b62      	ldr	r3, [pc, #392]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9c:	4a61      	ldr	r2, [pc, #388]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004a9e:	f043 0304 	orr.w	r3, r3, #4
 8004aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa4:	4b5f      	ldr	r3, [pc, #380]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa8:	4a5e      	ldr	r2, [pc, #376]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab0:	e00b      	b.n	8004aca <HAL_RCC_OscConfig+0x376>
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70
 8004abe:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004ac4:	f023 0304 	bic.w	r3, r3, #4
 8004ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d015      	beq.n	8004afe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fd faf5 	bl	80020c0 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	e00a      	b.n	8004af0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ada:	f7fd faf1 	bl	80020c0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0d8      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af0:	4b4c      	ldr	r3, [pc, #304]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ee      	beq.n	8004ada <HAL_RCC_OscConfig+0x386>
 8004afc:	e014      	b.n	8004b28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd fadf 	bl	80020c0 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd fadb 	bl	80020c0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0c2      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1c:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1ee      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a3c      	ldr	r2, [pc, #240]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 80ae 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 030c 	and.w	r3, r3, #12
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d06d      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d14b      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b58:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a31      	ldr	r2, [pc, #196]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd faac 	bl	80020c0 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd faa8 	bl	80020c0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e091      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	019b      	lsls	r3, r3, #6
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	071b      	lsls	r3, r3, #28
 8004bb6:	491b      	ldr	r1, [pc, #108]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fa7a 	bl	80020c0 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd fa76 	bl	80020c0 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e05f      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x47c>
 8004bee:	e057      	b.n	8004ca0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd fa60 	bl	80020c0 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd fa5c 	bl	80020c0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e045      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x4b0>
 8004c22:	e03d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x54c>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	; (8004cac <HAL_RCC_OscConfig+0x558>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d030      	beq.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d129      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d122      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d119      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	3b01      	subs	r3, #1
 8004c76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d10f      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800

08004cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d0      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc8:	4b6a      	ldr	r3, [pc, #424]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d910      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd6:	4b67      	ldr	r3, [pc, #412]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f023 020f 	bic.w	r2, r3, #15
 8004cde:	4965      	ldr	r1, [pc, #404]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce6:	4b63      	ldr	r3, [pc, #396]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0b8      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0304 	and.w	r3, r3, #4
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d10:	4b59      	ldr	r3, [pc, #356]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a58      	ldr	r2, [pc, #352]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d34:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	494d      	ldr	r1, [pc, #308]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d040      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d115      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e07f      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e073      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d82:	4b3d      	ldr	r3, [pc, #244]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e06b      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b39      	ldr	r3, [pc, #228]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4936      	ldr	r1, [pc, #216]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da4:	f7fd f98c 	bl	80020c0 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dac:	f7fd f988 	bl	80020c0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e053      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc2:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 020c 	and.w	r2, r3, #12
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d1eb      	bne.n	8004dac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b27      	ldr	r3, [pc, #156]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d210      	bcs.n	8004e04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	4922      	ldr	r1, [pc, #136]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b20      	ldr	r3, [pc, #128]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e032      	b.n	8004e6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e10:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4916      	ldr	r1, [pc, #88]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	490e      	ldr	r1, [pc, #56]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e42:	f000 f821 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8004e46:	4602      	mov	r2, r0
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	091b      	lsrs	r3, r3, #4
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	490a      	ldr	r1, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x1cc>)
 8004e54:	5ccb      	ldrb	r3, [r1, r3]
 8004e56:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1d0>)
 8004e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCC_ClockConfig+0x1d4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fd f8e8 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023c00 	.word	0x40023c00
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	080073dc 	.word	0x080073dc
 8004e80:	20000000 	.word	0x20000000
 8004e84:	20000004 	.word	0x20000004

08004e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e8c:	b090      	sub	sp, #64	; 0x40
 8004e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
 8004e94:	2300      	movs	r3, #0
 8004e96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e98:	2300      	movs	r3, #0
 8004e9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ea0:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d00d      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	f200 80a1 	bhi.w	8004ff4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0x34>
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d003      	beq.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004eba:	e09b      	b.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ebc:	4b53      	ldr	r3, [pc, #332]	; (800500c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ebe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ec0:	e09b      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ec2:	4b53      	ldr	r3, [pc, #332]	; (8005010 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ec6:	e098      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec8:	4b4f      	ldr	r3, [pc, #316]	; (8005008 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ed2:	4b4d      	ldr	r3, [pc, #308]	; (8005008 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d028      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ede:	4b4a      	ldr	r3, [pc, #296]	; (8005008 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	623b      	str	r3, [r7, #32]
 8004ee8:	627a      	str	r2, [r7, #36]	; 0x24
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	4b47      	ldr	r3, [pc, #284]	; (8005010 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ef4:	fb03 f201 	mul.w	r2, r3, r1
 8004ef8:	2300      	movs	r3, #0
 8004efa:	fb00 f303 	mul.w	r3, r0, r3
 8004efe:	4413      	add	r3, r2
 8004f00:	4a43      	ldr	r2, [pc, #268]	; (8005010 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f02:	fba0 1202 	umull	r1, r2, r0, r2
 8004f06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f08:	460a      	mov	r2, r1
 8004f0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f0e:	4413      	add	r3, r2
 8004f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	2200      	movs	r2, #0
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	61fa      	str	r2, [r7, #28]
 8004f1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f22:	f7fb f989 	bl	8000238 <__aeabi_uldivmod>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2e:	e053      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f30:	4b35      	ldr	r3, [pc, #212]	; (8005008 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	2200      	movs	r2, #0
 8004f38:	613b      	str	r3, [r7, #16]
 8004f3a:	617a      	str	r2, [r7, #20]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f42:	f04f 0b00 	mov.w	fp, #0
 8004f46:	4652      	mov	r2, sl
 8004f48:	465b      	mov	r3, fp
 8004f4a:	f04f 0000 	mov.w	r0, #0
 8004f4e:	f04f 0100 	mov.w	r1, #0
 8004f52:	0159      	lsls	r1, r3, #5
 8004f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f58:	0150      	lsls	r0, r2, #5
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	ebb2 080a 	subs.w	r8, r2, sl
 8004f62:	eb63 090b 	sbc.w	r9, r3, fp
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f7a:	ebb2 0408 	subs.w	r4, r2, r8
 8004f7e:	eb63 0509 	sbc.w	r5, r3, r9
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	00eb      	lsls	r3, r5, #3
 8004f8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f90:	00e2      	lsls	r2, r4, #3
 8004f92:	4614      	mov	r4, r2
 8004f94:	461d      	mov	r5, r3
 8004f96:	eb14 030a 	adds.w	r3, r4, sl
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	eb45 030b 	adc.w	r3, r5, fp
 8004fa0:	607b      	str	r3, [r7, #4]
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fae:	4629      	mov	r1, r5
 8004fb0:	028b      	lsls	r3, r1, #10
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fb8:	4621      	mov	r1, r4
 8004fba:	028a      	lsls	r2, r1, #10
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	60fa      	str	r2, [r7, #12]
 8004fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fcc:	f7fb f934 	bl	8000238 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004fd8:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	0c1b      	lsrs	r3, r3, #16
 8004fde:	f003 0303 	and.w	r3, r3, #3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ff2:	e002      	b.n	8004ffa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ff4:	4b05      	ldr	r3, [pc, #20]	; (800500c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3740      	adds	r7, #64	; 0x40
 8005000:	46bd      	mov	sp, r7
 8005002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005006:	bf00      	nop
 8005008:	40023800 	.word	0x40023800
 800500c:	00f42400 	.word	0x00f42400
 8005010:	017d7840 	.word	0x017d7840

08005014 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <HAL_RCC_GetHCLKFreq+0x14>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000

0800502c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005030:	f7ff fff0 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005034:	4602      	mov	r2, r0
 8005036:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	0a9b      	lsrs	r3, r3, #10
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	4903      	ldr	r1, [pc, #12]	; (8005050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005042:	5ccb      	ldrb	r3, [r1, r3]
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005048:	4618      	mov	r0, r3
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40023800 	.word	0x40023800
 8005050:	080073ec 	.word	0x080073ec

08005054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005058:	f7ff ffdc 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 800505c:	4602      	mov	r2, r0
 800505e:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	0b5b      	lsrs	r3, r3, #13
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	4903      	ldr	r1, [pc, #12]	; (8005078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800506a:	5ccb      	ldrb	r3, [r1, r3]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40023800 	.word	0x40023800
 8005078:	080073ec 	.word	0x080073ec

0800507c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005094:	2300      	movs	r3, #0
 8005096:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d012      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050a4:	4b69      	ldr	r3, [pc, #420]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a68      	ldr	r2, [pc, #416]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80050ae:	6093      	str	r3, [r2, #8]
 80050b0:	4b66      	ldr	r3, [pc, #408]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	4964      	ldr	r1, [pc, #400]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80050c6:	2301      	movs	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d017      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050d6:	4b5d      	ldr	r3, [pc, #372]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	4959      	ldr	r1, [pc, #356]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f4:	d101      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80050f6:	2301      	movs	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005102:	2301      	movs	r3, #1
 8005104:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d017      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005112:	4b4e      	ldr	r3, [pc, #312]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005120:	494a      	ldr	r1, [pc, #296]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005130:	d101      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800513e:	2301      	movs	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800514e:	2301      	movs	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 808b 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005160:	4b3a      	ldr	r3, [pc, #232]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	4a39      	ldr	r2, [pc, #228]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	6413      	str	r3, [r2, #64]	; 0x40
 800516c:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800516e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a34      	ldr	r2, [pc, #208]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005184:	f7fc ff9c 	bl	80020c0 <HAL_GetTick>
 8005188:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518c:	f7fc ff98 	bl	80020c0 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b64      	cmp	r3, #100	; 0x64
 8005198:	d901      	bls.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e38f      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800519e:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051aa:	4b28      	ldr	r3, [pc, #160]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d035      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d02e      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051c8:	4b20      	ldr	r3, [pc, #128]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051d2:	4b1e      	ldr	r3, [pc, #120]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d6:	4a1d      	ldr	r2, [pc, #116]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051de:	4b1b      	ldr	r3, [pc, #108]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e2:	4a1a      	ldr	r2, [pc, #104]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051f0:	4b16      	ldr	r3, [pc, #88]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d114      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fc ff60 	bl	80020c0 <HAL_GetTick>
 8005200:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	e00a      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005204:	f7fc ff5c 	bl	80020c0 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e351      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0ee      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005232:	d111      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005240:	4b04      	ldr	r3, [pc, #16]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005242:	400b      	ands	r3, r1
 8005244:	4901      	ldr	r1, [pc, #4]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	4313      	orrs	r3, r2
 8005248:	608b      	str	r3, [r1, #8]
 800524a:	e00b      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800524c:	40023800 	.word	0x40023800
 8005250:	40007000 	.word	0x40007000
 8005254:	0ffffcff 	.word	0x0ffffcff
 8005258:	4bac      	ldr	r3, [pc, #688]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	4aab      	ldr	r2, [pc, #684]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800525e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005262:	6093      	str	r3, [r2, #8]
 8005264:	4ba9      	ldr	r3, [pc, #676]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005266:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005270:	49a6      	ldr	r1, [pc, #664]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005272:	4313      	orrs	r3, r2
 8005274:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005282:	4ba2      	ldr	r3, [pc, #648]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005288:	4aa0      	ldr	r2, [pc, #640]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800528a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800528e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005292:	4b9e      	ldr	r3, [pc, #632]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005294:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	499b      	ldr	r1, [pc, #620]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b0:	4b96      	ldr	r3, [pc, #600]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052be:	4993      	ldr	r1, [pc, #588]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052d2:	4b8e      	ldr	r3, [pc, #568]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052e0:	498a      	ldr	r1, [pc, #552]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052f4:	4b85      	ldr	r3, [pc, #532]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005302:	4982      	ldr	r1, [pc, #520]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005316:	4b7d      	ldr	r3, [pc, #500]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800531c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	4979      	ldr	r1, [pc, #484]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005338:	4b74      	ldr	r3, [pc, #464]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4971      	ldr	r1, [pc, #452]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800535a:	4b6c      	ldr	r3, [pc, #432]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005360:	f023 020c 	bic.w	r2, r3, #12
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005368:	4968      	ldr	r1, [pc, #416]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800537c:	4b63      	ldr	r3, [pc, #396]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800538a:	4960      	ldr	r1, [pc, #384]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800539e:	4b5b      	ldr	r3, [pc, #364]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ac:	4957      	ldr	r1, [pc, #348]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053c0:	4b52      	ldr	r3, [pc, #328]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ce:	494f      	ldr	r1, [pc, #316]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80053e2:	4b4a      	ldr	r3, [pc, #296]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f0:	4946      	ldr	r1, [pc, #280]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005404:	4b41      	ldr	r3, [pc, #260]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005412:	493e      	ldr	r1, [pc, #248]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005426:	4b39      	ldr	r3, [pc, #228]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005434:	4935      	ldr	r1, [pc, #212]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005448:	4b30      	ldr	r3, [pc, #192]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800544a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005456:	492d      	ldr	r1, [pc, #180]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d011      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800546a:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005478:	4924      	ldr	r1, [pc, #144]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005488:	d101      	bne.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800548a:	2301      	movs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0308 	and.w	r3, r3, #8
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800549a:	2301      	movs	r3, #1
 800549c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054aa:	4b18      	ldr	r3, [pc, #96]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b8:	4914      	ldr	r1, [pc, #80]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054cc:	4b0f      	ldr	r3, [pc, #60]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054dc:	490b      	ldr	r1, [pc, #44]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00f      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005500:	4902      	ldr	r1, [pc, #8]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005508:	e002      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800551c:	4b8a      	ldr	r3, [pc, #552]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005522:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552c:	4986      	ldr	r1, [pc, #536]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005540:	4b81      	ldr	r3, [pc, #516]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005546:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005550:	497d      	ldr	r1, [pc, #500]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d006      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80d6 	beq.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800556c:	4b76      	ldr	r3, [pc, #472]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a75      	ldr	r2, [pc, #468]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005572:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fc fda2 	bl	80020c0 <HAL_GetTick>
 800557c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005580:	f7fc fd9e 	bl	80020c0 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e195      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005592:	4b6d      	ldr	r3, [pc, #436]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d021      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d11d      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80055b2:	4b65      	ldr	r3, [pc, #404]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055c0:	4b61      	ldr	r3, [pc, #388]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c6:	0e1b      	lsrs	r3, r3, #24
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	019a      	lsls	r2, r3, #6
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	041b      	lsls	r3, r3, #16
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	061b      	lsls	r3, r3, #24
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	071b      	lsls	r3, r3, #28
 80055e6:	4958      	ldr	r1, [pc, #352]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005602:	d00a      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02e      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005618:	d129      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800561a:	4b4b      	ldr	r3, [pc, #300]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005628:	4b47      	ldr	r3, [pc, #284]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800562a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800562e:	0f1b      	lsrs	r3, r3, #28
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	019a      	lsls	r2, r3, #6
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	041b      	lsls	r3, r3, #16
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	061b      	lsls	r3, r3, #24
 8005648:	431a      	orrs	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	071b      	lsls	r3, r3, #28
 800564e:	493e      	ldr	r1, [pc, #248]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005656:	4b3c      	ldr	r3, [pc, #240]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800565c:	f023 021f 	bic.w	r2, r3, #31
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	3b01      	subs	r3, #1
 8005666:	4938      	ldr	r1, [pc, #224]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01d      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800567a:	4b33      	ldr	r3, [pc, #204]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800567c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005680:	0e1b      	lsrs	r3, r3, #24
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005688:	4b2f      	ldr	r3, [pc, #188]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800568a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800568e:	0f1b      	lsrs	r3, r3, #28
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	019a      	lsls	r2, r3, #6
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	431a      	orrs	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	071b      	lsls	r3, r3, #28
 80056ae:	4926      	ldr	r1, [pc, #152]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	019a      	lsls	r2, r3, #6
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	041b      	lsls	r3, r3, #16
 80056ce:	431a      	orrs	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	061b      	lsls	r3, r3, #24
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	071b      	lsls	r3, r3, #28
 80056de:	491a      	ldr	r1, [pc, #104]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056e6:	4b18      	ldr	r3, [pc, #96]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f2:	f7fc fce5 	bl	80020c0 <HAL_GetTick>
 80056f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056fa:	f7fc fce1 	bl	80020c0 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b64      	cmp	r3, #100	; 0x64
 8005706:	d901      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e0d8      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800570c:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b01      	cmp	r3, #1
 800571c:	f040 80ce 	bne.w	80058bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a08      	ldr	r2, [pc, #32]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572c:	f7fc fcc8 	bl	80020c0 <HAL_GetTick>
 8005730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005732:	e00b      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005734:	f7fc fcc4 	bl	80020c0 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b64      	cmp	r3, #100	; 0x64
 8005740:	d904      	bls.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e0bb      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800574c:	4b5e      	ldr	r3, [pc, #376]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005758:	d0ec      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d003      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d009      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005776:	2b00      	cmp	r3, #0
 8005778:	d02e      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d12a      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005782:	4b51      	ldr	r3, [pc, #324]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005790:	4b4d      	ldr	r3, [pc, #308]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	0f1b      	lsrs	r3, r3, #28
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	019a      	lsls	r2, r3, #6
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	041b      	lsls	r3, r3, #16
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	061b      	lsls	r3, r3, #24
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	071b      	lsls	r3, r3, #28
 80057b6:	4944      	ldr	r1, [pc, #272]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057be:	4b42      	ldr	r3, [pc, #264]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	3b01      	subs	r3, #1
 80057ce:	021b      	lsls	r3, r3, #8
 80057d0:	493d      	ldr	r1, [pc, #244]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d022      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ec:	d11d      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057ee:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	0e1b      	lsrs	r3, r3, #24
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057fc:	4b32      	ldr	r3, [pc, #200]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80057fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005802:	0f1b      	lsrs	r3, r3, #28
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	019a      	lsls	r2, r3, #6
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	041b      	lsls	r3, r3, #16
 8005816:	431a      	orrs	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	061b      	lsls	r3, r3, #24
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	071b      	lsls	r3, r3, #28
 8005822:	4929      	ldr	r1, [pc, #164]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d028      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005836:	4b24      	ldr	r3, [pc, #144]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	0e1b      	lsrs	r3, r3, #24
 800583e:	f003 030f 	and.w	r3, r3, #15
 8005842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	0c1b      	lsrs	r3, r3, #16
 800584c:	f003 0303 	and.w	r3, r3, #3
 8005850:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	019a      	lsls	r2, r3, #6
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	041b      	lsls	r3, r3, #16
 800585c:	431a      	orrs	r2, r3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	061b      	lsls	r3, r3, #24
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	071b      	lsls	r3, r3, #28
 800586a:	4917      	ldr	r1, [pc, #92]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4911      	ldr	r1, [pc, #68]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800588e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005894:	f7fc fc14 	bl	80020c0 <HAL_GetTick>
 8005898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800589c:	f7fc fc10 	bl	80020c0 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b64      	cmp	r3, #100	; 0x64
 80058a8:	d901      	bls.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e007      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ba:	d1ef      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800

080058cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058ea:	f040 80a3 	bne.w	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80058ee:	4ba8      	ldr	r3, [pc, #672]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80058fc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005904:	f000 808a 	beq.w	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800590e:	f200 8093 	bhi.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005918:	d07d      	beq.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005920:	f200 808a 	bhi.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005930:	d039      	beq.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005932:	e081      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005934:	4b96      	ldr	r3, [pc, #600]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d108      	bne.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005940:	4b93      	ldr	r3, [pc, #588]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005948:	4a92      	ldr	r2, [pc, #584]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	e007      	b.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005952:	4b8f      	ldr	r3, [pc, #572]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800595a:	4a8f      	ldr	r2, [pc, #572]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005962:	4b8b      	ldr	r3, [pc, #556]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005968:	0e1b      	lsrs	r3, r3, #24
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005970:	4b87      	ldr	r3, [pc, #540]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	099b      	lsrs	r3, r3, #6
 8005978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	fb03 f202 	mul.w	r2, r3, r2
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800598a:	4b81      	ldr	r3, [pc, #516]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800598c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	617b      	str	r3, [r7, #20]
        break;
 80059a4:	e049      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80059a6:	4b7a      	ldr	r3, [pc, #488]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d108      	bne.n	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80059b2:	4b77      	ldr	r3, [pc, #476]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ba:	4a76      	ldr	r2, [pc, #472]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	613b      	str	r3, [r7, #16]
 80059c2:	e007      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80059c4:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059cc:	4a72      	ldr	r2, [pc, #456]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80059d4:	4b6e      	ldr	r3, [pc, #440]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059da:	0e1b      	lsrs	r3, r3, #24
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80059e2:	4b6b      	ldr	r3, [pc, #428]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059e8:	099b      	lsrs	r3, r3, #6
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	fb03 f202 	mul.w	r2, r3, r2
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80059fc:	4b64      	ldr	r3, [pc, #400]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80059fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a12:	617b      	str	r3, [r7, #20]
        break;
 8005a14:	e011      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005a16:	4b61      	ldr	r3, [pc, #388]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005a18:	617b      	str	r3, [r7, #20]
        break;
 8005a1a:	e00e      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a1c:	4b5c      	ldr	r3, [pc, #368]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d102      	bne.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005a28:	4b5a      	ldr	r3, [pc, #360]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005a2a:	617b      	str	r3, [r7, #20]
        break;
 8005a2c:	e005      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005a2e:	4b5a      	ldr	r3, [pc, #360]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005a30:	617b      	str	r3, [r7, #20]
        break;
 8005a32:	e002      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8005a38:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a40:	f040 80a3 	bne.w	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005a44:	4b52      	ldr	r3, [pc, #328]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a4a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005a52:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a5a:	f000 808a 	beq.w	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a64:	f200 809c 	bhi.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a6e:	d07d      	beq.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a76:	f200 8093 	bhi.w	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a86:	d039      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005a88:	e08a      	b.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005a8a:	4b41      	ldr	r3, [pc, #260]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a96:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9e:	4a3d      	ldr	r2, [pc, #244]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e007      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005aa8:	4b39      	ldr	r3, [pc, #228]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab0:	4a39      	ldr	r2, [pc, #228]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005ab8:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abe:	0e1b      	lsrs	r3, r3, #24
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005ac6:	4b32      	ldr	r3, [pc, #200]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	fb03 f202 	mul.w	r2, r3, r2
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ade:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005ae0:	4b2b      	ldr	r3, [pc, #172]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
        break;
 8005afa:	e052      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005afc:	4b24      	ldr	r3, [pc, #144]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d108      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005b08:	4b21      	ldr	r3, [pc, #132]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b10:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	613b      	str	r3, [r7, #16]
 8005b18:	e007      	b.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b22:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005b2a:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b30:	0e1b      	lsrs	r3, r3, #24
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	fb03 f202 	mul.w	r2, r3, r2
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b50:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005b52:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b68:	617b      	str	r3, [r7, #20]
        break;
 8005b6a:	e01a      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005b6e:	617b      	str	r3, [r7, #20]
        break;
 8005b70:	e017      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005b80:	617b      	str	r3, [r7, #20]
        break;
 8005b82:	e00e      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005b86:	617b      	str	r3, [r7, #20]
        break;
 8005b88:	e00b      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8005b8a:	bf00      	nop
 8005b8c:	e009      	b.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005b8e:	bf00      	nop
 8005b90:	40023800 	.word	0x40023800
 8005b94:	00f42400 	.word	0x00f42400
 8005b98:	017d7840 	.word	0x017d7840
 8005b9c:	00bb8000 	.word	0x00bb8000
        break;
 8005ba0:	bf00      	nop

  return frequency;
 8005ba2:	697b      	ldr	r3, [r7, #20]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e156      	b.n	8005e7c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc f902 	bl	8001dec <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f95b 	bl	8005eac <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d00c      	beq.n	8005c18 <HAL_SAI_Init+0x68>
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d80d      	bhi.n	8005c1e <HAL_SAI_Init+0x6e>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SAI_Init+0x5c>
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d003      	beq.n	8005c12 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005c0a:	e008      	b.n	8005c1e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
      break;
 8005c10:	e006      	b.n	8005c20 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005c12:	2310      	movs	r3, #16
 8005c14:	61fb      	str	r3, [r7, #28]
      break;
 8005c16:	e003      	b.n	8005c20 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005c18:	2320      	movs	r3, #32
 8005c1a:	61fb      	str	r3, [r7, #28]
      break;
 8005c1c:	e000      	b.n	8005c20 <HAL_SAI_Init+0x70>
      break;
 8005c1e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d81e      	bhi.n	8005c66 <HAL_SAI_Init+0xb6>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <HAL_SAI_Init+0x80>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c47 	.word	0x08005c47
 8005c38:	08005c4f 	.word	0x08005c4f
 8005c3c:	08005c57 	.word	0x08005c57
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
    }
    break;
 8005c44:	e010      	b.n	8005c68 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c4a:	617b      	str	r3, [r7, #20]
    }
    break;
 8005c4c:	e00c      	b.n	8005c68 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c52:	617b      	str	r3, [r7, #20]
    }
    break;
 8005c54:	e008      	b.n	8005c68 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c5a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005c64:	e000      	b.n	8005c68 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005c66:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a85      	ldr	r2, [pc, #532]	; (8005e84 <HAL_SAI_Init+0x2d4>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_SAI_Init+0xcc>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a84      	ldr	r2, [pc, #528]	; (8005e88 <HAL_SAI_Init+0x2d8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d103      	bne.n	8005c84 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005c7c:	4a83      	ldr	r2, [pc, #524]	; (8005e8c <HAL_SAI_Init+0x2dc>)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e002      	b.n	8005c8a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005c84:	4a82      	ldr	r2, [pc, #520]	; (8005e90 <HAL_SAI_Init+0x2e0>)
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d04c      	beq.n	8005d2c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a7a      	ldr	r2, [pc, #488]	; (8005e84 <HAL_SAI_Init+0x2d4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d004      	beq.n	8005caa <HAL_SAI_Init+0xfa>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a78      	ldr	r2, [pc, #480]	; (8005e88 <HAL_SAI_Init+0x2d8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d104      	bne.n	8005cb4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005caa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005cae:	f7ff fe0d 	bl	80058cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005cb2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a76      	ldr	r2, [pc, #472]	; (8005e94 <HAL_SAI_Init+0x2e4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_SAI_Init+0x118>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a75      	ldr	r2, [pc, #468]	; (8005e98 <HAL_SAI_Init+0x2e8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d104      	bne.n	8005cd2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005cc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005ccc:	f7ff fdfe 	bl	80058cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005cd0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	025b      	lsls	r3, r3, #9
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a6b      	ldr	r2, [pc, #428]	; (8005e9c <HAL_SAI_Init+0x2ec>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	08da      	lsrs	r2, r3, #3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	4b68      	ldr	r3, [pc, #416]	; (8005e9c <HAL_SAI_Init+0x2ec>)
 8005cfc:	fba3 2301 	umull	r2, r3, r3, r1
 8005d00:	08da      	lsrs	r2, r3, #3
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	1aca      	subs	r2, r1, r3
 8005d0c:	2a08      	cmp	r2, #8
 8005d0e:	d904      	bls.n	8005d1a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d104      	bne.n	8005d2c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	085a      	lsrs	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d003      	beq.n	8005d3c <HAL_SAI_Init+0x18c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d109      	bne.n	8005d50 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <HAL_SAI_Init+0x198>
 8005d44:	2300      	movs	r3, #0
 8005d46:	e001      	b.n	8005d4c <HAL_SAI_Init+0x19c>
 8005d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e008      	b.n	8005d62 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d102      	bne.n	8005d5e <HAL_SAI_Init+0x1ae>
 8005d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d5c:	e000      	b.n	8005d60 <HAL_SAI_Init+0x1b0>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6819      	ldr	r1, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b4c      	ldr	r3, [pc, #304]	; (8005ea0 <HAL_SAI_Init+0x2f0>)
 8005d6e:	400b      	ands	r3, r1
 8005d70:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6819      	ldr	r1, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d80:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005d86:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005d9a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005da6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	051b      	lsls	r3, r3, #20
 8005dae:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	430a      	orrs	r2, r1
 8005db6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6859      	ldr	r1, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b38      	ldr	r3, [pc, #224]	; (8005ea4 <HAL_SAI_Init+0x2f4>)
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <HAL_SAI_Init+0x2f8>)
 8005df2:	400b      	ands	r3, r1
 8005df4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6899      	ldr	r1, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005e06:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005e0c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005e12:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005e1c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68d9      	ldr	r1, [r3, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005e34:	400b      	ands	r3, r1
 8005e36:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68d9      	ldr	r1, [r3, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e46:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	3b01      	subs	r3, #1
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40015804 	.word	0x40015804
 8005e88:	40015824 	.word	0x40015824
 8005e8c:	40015800 	.word	0x40015800
 8005e90:	40015c00 	.word	0x40015c00
 8005e94:	40015c04 	.word	0x40015c04
 8005e98:	40015c24 	.word	0x40015c24
 8005e9c:	cccccccd 	.word	0xcccccccd
 8005ea0:	ff05c010 	.word	0xff05c010
 8005ea4:	ffff1ff0 	.word	0xffff1ff0
 8005ea8:	fff88000 	.word	0xfff88000

08005eac <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005eb4:	4b17      	ldr	r3, [pc, #92]	; (8005f14 <SAI_Disable+0x68>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <SAI_Disable+0x6c>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	0b1b      	lsrs	r3, r3, #12
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ed6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	1e5a      	subs	r2, r3, #1
 8005edc:	60fa      	str	r2, [r7, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	72fb      	strb	r3, [r7, #11]
      break;
 8005ef6:	e006      	b.n	8005f06 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e8      	bne.n	8005ed8 <SAI_Disable+0x2c>

  return status;
 8005f06:	7afb      	ldrb	r3, [r7, #11]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	20000000 	.word	0x20000000
 8005f18:	95cbec1b 	.word	0x95cbec1b

08005f1c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e025      	b.n	8005f7c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fb ff47 	bl	8001dd8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f000 fe4b 	bl	8006bf8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6839      	ldr	r1, [r7, #0]
 8005f6e:	f000 fe9f 	bl	8006cb0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3708      	adds	r7, #8
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e04c      	b.n	8006030 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fc48 	bl	8001840 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0203 	bic.w	r2, r2, #3
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4b19      	ldr	r3, [pc, #100]	; (8006038 <HAL_SPDIFRX_Init+0xb4>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005fe0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8005fe6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005fec:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8005ff2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8005ff8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8005ffe:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8006004:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800600a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8006010:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	fff88407 	.word	0xfff88407

0800603c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e038      	b.n	80060c4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7fb feac 	bl	8001dc4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3308      	adds	r3, #8
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f000 fc90 	bl	800699c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	461a      	mov	r2, r3
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	f000 fd18 	bl	8006abc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6858      	ldr	r0, [r3, #4]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	f000 fd5f 	bl	8006b5c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6892      	ldr	r2, [r2, #8]
 80060a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	6892      	ldr	r2, [r2, #8]
 80060b2:	f041 0101 	orr.w	r1, r1, #1
 80060b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e040      	b.n	8006160 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb fc0c 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2224      	movs	r2, #36	; 0x24
 80060f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f82c 	bl	8006168 <UART_SetConfig>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e022      	b.n	8006160 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa84 	bl	8006630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fb0b 	bl	8006774 <UART_CheckIdleState>
 800615e:	4603      	mov	r3, r0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4ba6      	ldr	r3, [pc, #664]	; (800642c <UART_SetConfig+0x2c4>)
 8006194:	4013      	ands	r3, r2
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	430b      	orrs	r3, r1
 800619e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a94      	ldr	r2, [pc, #592]	; (8006430 <UART_SetConfig+0x2c8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d120      	bne.n	8006226 <UART_SetConfig+0xbe>
 80061e4:	4b93      	ldr	r3, [pc, #588]	; (8006434 <UART_SetConfig+0x2cc>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d816      	bhi.n	8006220 <UART_SetConfig+0xb8>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x90>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006209 	.word	0x08006209
 80061fc:	08006215 	.word	0x08006215
 8006200:	0800620f 	.word	0x0800620f
 8006204:	0800621b 	.word	0x0800621b
 8006208:	2301      	movs	r3, #1
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e150      	b.n	80064b0 <UART_SetConfig+0x348>
 800620e:	2302      	movs	r3, #2
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e14d      	b.n	80064b0 <UART_SetConfig+0x348>
 8006214:	2304      	movs	r3, #4
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e14a      	b.n	80064b0 <UART_SetConfig+0x348>
 800621a:	2308      	movs	r3, #8
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e147      	b.n	80064b0 <UART_SetConfig+0x348>
 8006220:	2310      	movs	r3, #16
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e144      	b.n	80064b0 <UART_SetConfig+0x348>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a83      	ldr	r2, [pc, #524]	; (8006438 <UART_SetConfig+0x2d0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d132      	bne.n	8006296 <UART_SetConfig+0x12e>
 8006230:	4b80      	ldr	r3, [pc, #512]	; (8006434 <UART_SetConfig+0x2cc>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b0c      	cmp	r3, #12
 800623c:	d828      	bhi.n	8006290 <UART_SetConfig+0x128>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0xdc>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	08006291 	.word	0x08006291
 800624c:	08006291 	.word	0x08006291
 8006250:	08006291 	.word	0x08006291
 8006254:	08006285 	.word	0x08006285
 8006258:	08006291 	.word	0x08006291
 800625c:	08006291 	.word	0x08006291
 8006260:	08006291 	.word	0x08006291
 8006264:	0800627f 	.word	0x0800627f
 8006268:	08006291 	.word	0x08006291
 800626c:	08006291 	.word	0x08006291
 8006270:	08006291 	.word	0x08006291
 8006274:	0800628b 	.word	0x0800628b
 8006278:	2300      	movs	r3, #0
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e118      	b.n	80064b0 <UART_SetConfig+0x348>
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e115      	b.n	80064b0 <UART_SetConfig+0x348>
 8006284:	2304      	movs	r3, #4
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e112      	b.n	80064b0 <UART_SetConfig+0x348>
 800628a:	2308      	movs	r3, #8
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e10f      	b.n	80064b0 <UART_SetConfig+0x348>
 8006290:	2310      	movs	r3, #16
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e10c      	b.n	80064b0 <UART_SetConfig+0x348>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a68      	ldr	r2, [pc, #416]	; (800643c <UART_SetConfig+0x2d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d120      	bne.n	80062e2 <UART_SetConfig+0x17a>
 80062a0:	4b64      	ldr	r3, [pc, #400]	; (8006434 <UART_SetConfig+0x2cc>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062aa:	2b30      	cmp	r3, #48	; 0x30
 80062ac:	d013      	beq.n	80062d6 <UART_SetConfig+0x16e>
 80062ae:	2b30      	cmp	r3, #48	; 0x30
 80062b0:	d814      	bhi.n	80062dc <UART_SetConfig+0x174>
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d009      	beq.n	80062ca <UART_SetConfig+0x162>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d810      	bhi.n	80062dc <UART_SetConfig+0x174>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x15c>
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d006      	beq.n	80062d0 <UART_SetConfig+0x168>
 80062c2:	e00b      	b.n	80062dc <UART_SetConfig+0x174>
 80062c4:	2300      	movs	r3, #0
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e0f2      	b.n	80064b0 <UART_SetConfig+0x348>
 80062ca:	2302      	movs	r3, #2
 80062cc:	77fb      	strb	r3, [r7, #31]
 80062ce:	e0ef      	b.n	80064b0 <UART_SetConfig+0x348>
 80062d0:	2304      	movs	r3, #4
 80062d2:	77fb      	strb	r3, [r7, #31]
 80062d4:	e0ec      	b.n	80064b0 <UART_SetConfig+0x348>
 80062d6:	2308      	movs	r3, #8
 80062d8:	77fb      	strb	r3, [r7, #31]
 80062da:	e0e9      	b.n	80064b0 <UART_SetConfig+0x348>
 80062dc:	2310      	movs	r3, #16
 80062de:	77fb      	strb	r3, [r7, #31]
 80062e0:	e0e6      	b.n	80064b0 <UART_SetConfig+0x348>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a56      	ldr	r2, [pc, #344]	; (8006440 <UART_SetConfig+0x2d8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d120      	bne.n	800632e <UART_SetConfig+0x1c6>
 80062ec:	4b51      	ldr	r3, [pc, #324]	; (8006434 <UART_SetConfig+0x2cc>)
 80062ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d013      	beq.n	8006322 <UART_SetConfig+0x1ba>
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d814      	bhi.n	8006328 <UART_SetConfig+0x1c0>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0x1ae>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d810      	bhi.n	8006328 <UART_SetConfig+0x1c0>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x1a8>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d006      	beq.n	800631c <UART_SetConfig+0x1b4>
 800630e:	e00b      	b.n	8006328 <UART_SetConfig+0x1c0>
 8006310:	2300      	movs	r3, #0
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e0cc      	b.n	80064b0 <UART_SetConfig+0x348>
 8006316:	2302      	movs	r3, #2
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e0c9      	b.n	80064b0 <UART_SetConfig+0x348>
 800631c:	2304      	movs	r3, #4
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e0c6      	b.n	80064b0 <UART_SetConfig+0x348>
 8006322:	2308      	movs	r3, #8
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e0c3      	b.n	80064b0 <UART_SetConfig+0x348>
 8006328:	2310      	movs	r3, #16
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e0c0      	b.n	80064b0 <UART_SetConfig+0x348>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a44      	ldr	r2, [pc, #272]	; (8006444 <UART_SetConfig+0x2dc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d125      	bne.n	8006384 <UART_SetConfig+0x21c>
 8006338:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <UART_SetConfig+0x2cc>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006346:	d017      	beq.n	8006378 <UART_SetConfig+0x210>
 8006348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634c:	d817      	bhi.n	800637e <UART_SetConfig+0x216>
 800634e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006352:	d00b      	beq.n	800636c <UART_SetConfig+0x204>
 8006354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006358:	d811      	bhi.n	800637e <UART_SetConfig+0x216>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <UART_SetConfig+0x1fe>
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	d006      	beq.n	8006372 <UART_SetConfig+0x20a>
 8006364:	e00b      	b.n	800637e <UART_SetConfig+0x216>
 8006366:	2300      	movs	r3, #0
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e0a1      	b.n	80064b0 <UART_SetConfig+0x348>
 800636c:	2302      	movs	r3, #2
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e09e      	b.n	80064b0 <UART_SetConfig+0x348>
 8006372:	2304      	movs	r3, #4
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e09b      	b.n	80064b0 <UART_SetConfig+0x348>
 8006378:	2308      	movs	r3, #8
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e098      	b.n	80064b0 <UART_SetConfig+0x348>
 800637e:	2310      	movs	r3, #16
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e095      	b.n	80064b0 <UART_SetConfig+0x348>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2f      	ldr	r2, [pc, #188]	; (8006448 <UART_SetConfig+0x2e0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d125      	bne.n	80063da <UART_SetConfig+0x272>
 800638e:	4b29      	ldr	r3, [pc, #164]	; (8006434 <UART_SetConfig+0x2cc>)
 8006390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800639c:	d017      	beq.n	80063ce <UART_SetConfig+0x266>
 800639e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a2:	d817      	bhi.n	80063d4 <UART_SetConfig+0x26c>
 80063a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a8:	d00b      	beq.n	80063c2 <UART_SetConfig+0x25a>
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ae:	d811      	bhi.n	80063d4 <UART_SetConfig+0x26c>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <UART_SetConfig+0x254>
 80063b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b8:	d006      	beq.n	80063c8 <UART_SetConfig+0x260>
 80063ba:	e00b      	b.n	80063d4 <UART_SetConfig+0x26c>
 80063bc:	2301      	movs	r3, #1
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e076      	b.n	80064b0 <UART_SetConfig+0x348>
 80063c2:	2302      	movs	r3, #2
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e073      	b.n	80064b0 <UART_SetConfig+0x348>
 80063c8:	2304      	movs	r3, #4
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e070      	b.n	80064b0 <UART_SetConfig+0x348>
 80063ce:	2308      	movs	r3, #8
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e06d      	b.n	80064b0 <UART_SetConfig+0x348>
 80063d4:	2310      	movs	r3, #16
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e06a      	b.n	80064b0 <UART_SetConfig+0x348>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1b      	ldr	r2, [pc, #108]	; (800644c <UART_SetConfig+0x2e4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d138      	bne.n	8006456 <UART_SetConfig+0x2ee>
 80063e4:	4b13      	ldr	r3, [pc, #76]	; (8006434 <UART_SetConfig+0x2cc>)
 80063e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f2:	d017      	beq.n	8006424 <UART_SetConfig+0x2bc>
 80063f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f8:	d82a      	bhi.n	8006450 <UART_SetConfig+0x2e8>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	d00b      	beq.n	8006418 <UART_SetConfig+0x2b0>
 8006400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006404:	d824      	bhi.n	8006450 <UART_SetConfig+0x2e8>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <UART_SetConfig+0x2aa>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	d006      	beq.n	800641e <UART_SetConfig+0x2b6>
 8006410:	e01e      	b.n	8006450 <UART_SetConfig+0x2e8>
 8006412:	2300      	movs	r3, #0
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e04b      	b.n	80064b0 <UART_SetConfig+0x348>
 8006418:	2302      	movs	r3, #2
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e048      	b.n	80064b0 <UART_SetConfig+0x348>
 800641e:	2304      	movs	r3, #4
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e045      	b.n	80064b0 <UART_SetConfig+0x348>
 8006424:	2308      	movs	r3, #8
 8006426:	77fb      	strb	r3, [r7, #31]
 8006428:	e042      	b.n	80064b0 <UART_SetConfig+0x348>
 800642a:	bf00      	nop
 800642c:	efff69f3 	.word	0xefff69f3
 8006430:	40011000 	.word	0x40011000
 8006434:	40023800 	.word	0x40023800
 8006438:	40004400 	.word	0x40004400
 800643c:	40004800 	.word	0x40004800
 8006440:	40004c00 	.word	0x40004c00
 8006444:	40005000 	.word	0x40005000
 8006448:	40011400 	.word	0x40011400
 800644c:	40007800 	.word	0x40007800
 8006450:	2310      	movs	r3, #16
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e02c      	b.n	80064b0 <UART_SetConfig+0x348>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a72      	ldr	r2, [pc, #456]	; (8006624 <UART_SetConfig+0x4bc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d125      	bne.n	80064ac <UART_SetConfig+0x344>
 8006460:	4b71      	ldr	r3, [pc, #452]	; (8006628 <UART_SetConfig+0x4c0>)
 8006462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006466:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800646a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800646e:	d017      	beq.n	80064a0 <UART_SetConfig+0x338>
 8006470:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006474:	d817      	bhi.n	80064a6 <UART_SetConfig+0x33e>
 8006476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647a:	d00b      	beq.n	8006494 <UART_SetConfig+0x32c>
 800647c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006480:	d811      	bhi.n	80064a6 <UART_SetConfig+0x33e>
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <UART_SetConfig+0x326>
 8006486:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648a:	d006      	beq.n	800649a <UART_SetConfig+0x332>
 800648c:	e00b      	b.n	80064a6 <UART_SetConfig+0x33e>
 800648e:	2300      	movs	r3, #0
 8006490:	77fb      	strb	r3, [r7, #31]
 8006492:	e00d      	b.n	80064b0 <UART_SetConfig+0x348>
 8006494:	2302      	movs	r3, #2
 8006496:	77fb      	strb	r3, [r7, #31]
 8006498:	e00a      	b.n	80064b0 <UART_SetConfig+0x348>
 800649a:	2304      	movs	r3, #4
 800649c:	77fb      	strb	r3, [r7, #31]
 800649e:	e007      	b.n	80064b0 <UART_SetConfig+0x348>
 80064a0:	2308      	movs	r3, #8
 80064a2:	77fb      	strb	r3, [r7, #31]
 80064a4:	e004      	b.n	80064b0 <UART_SetConfig+0x348>
 80064a6:	2310      	movs	r3, #16
 80064a8:	77fb      	strb	r3, [r7, #31]
 80064aa:	e001      	b.n	80064b0 <UART_SetConfig+0x348>
 80064ac:	2310      	movs	r3, #16
 80064ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69db      	ldr	r3, [r3, #28]
 80064b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b8:	d15b      	bne.n	8006572 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d828      	bhi.n	8006512 <UART_SetConfig+0x3aa>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <UART_SetConfig+0x360>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064f5 	.word	0x080064f5
 80064d0:	080064fd 	.word	0x080064fd
 80064d4:	08006513 	.word	0x08006513
 80064d8:	08006503 	.word	0x08006503
 80064dc:	08006513 	.word	0x08006513
 80064e0:	08006513 	.word	0x08006513
 80064e4:	08006513 	.word	0x08006513
 80064e8:	0800650b 	.word	0x0800650b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ec:	f7fe fd9e 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 80064f0:	61b8      	str	r0, [r7, #24]
        break;
 80064f2:	e013      	b.n	800651c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f4:	f7fe fdae 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 80064f8:	61b8      	str	r0, [r7, #24]
        break;
 80064fa:	e00f      	b.n	800651c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064fc:	4b4b      	ldr	r3, [pc, #300]	; (800662c <UART_SetConfig+0x4c4>)
 80064fe:	61bb      	str	r3, [r7, #24]
        break;
 8006500:	e00c      	b.n	800651c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006502:	f7fe fcc1 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 8006506:	61b8      	str	r0, [r7, #24]
        break;
 8006508:	e008      	b.n	800651c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650e:	61bb      	str	r3, [r7, #24]
        break;
 8006510:	e004      	b.n	800651c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	77bb      	strb	r3, [r7, #30]
        break;
 800651a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d074      	beq.n	800660c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	005a      	lsls	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	441a      	add	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b0f      	cmp	r3, #15
 800653c:	d916      	bls.n	800656c <UART_SetConfig+0x404>
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006544:	d212      	bcs.n	800656c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f023 030f 	bic.w	r3, r3, #15
 800654e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	b29b      	uxth	r3, r3
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	b29a      	uxth	r2, r3
 800655c:	89fb      	ldrh	r3, [r7, #14]
 800655e:	4313      	orrs	r3, r2
 8006560:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	89fa      	ldrh	r2, [r7, #14]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	e04f      	b.n	800660c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	77bb      	strb	r3, [r7, #30]
 8006570:	e04c      	b.n	800660c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006572:	7ffb      	ldrb	r3, [r7, #31]
 8006574:	2b08      	cmp	r3, #8
 8006576:	d828      	bhi.n	80065ca <UART_SetConfig+0x462>
 8006578:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <UART_SetConfig+0x418>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065b5 	.word	0x080065b5
 800658c:	080065cb 	.word	0x080065cb
 8006590:	080065bb 	.word	0x080065bb
 8006594:	080065cb 	.word	0x080065cb
 8006598:	080065cb 	.word	0x080065cb
 800659c:	080065cb 	.word	0x080065cb
 80065a0:	080065c3 	.word	0x080065c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fe fd42 	bl	800502c <HAL_RCC_GetPCLK1Freq>
 80065a8:	61b8      	str	r0, [r7, #24]
        break;
 80065aa:	e013      	b.n	80065d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ac:	f7fe fd52 	bl	8005054 <HAL_RCC_GetPCLK2Freq>
 80065b0:	61b8      	str	r0, [r7, #24]
        break;
 80065b2:	e00f      	b.n	80065d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <UART_SetConfig+0x4c4>)
 80065b6:	61bb      	str	r3, [r7, #24]
        break;
 80065b8:	e00c      	b.n	80065d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ba:	f7fe fc65 	bl	8004e88 <HAL_RCC_GetSysClockFreq>
 80065be:	61b8      	str	r0, [r7, #24]
        break;
 80065c0:	e008      	b.n	80065d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c6:	61bb      	str	r3, [r7, #24]
        break;
 80065c8:	e004      	b.n	80065d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	77bb      	strb	r3, [r7, #30]
        break;
 80065d2:	bf00      	nop
    }

    if (pclk != 0U)
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d018      	beq.n	800660c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	085a      	lsrs	r2, r3, #1
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	441a      	add	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b0f      	cmp	r3, #15
 80065f2:	d909      	bls.n	8006608 <UART_SetConfig+0x4a0>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fa:	d205      	bcs.n	8006608 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e001      	b.n	800660c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006618:	7fbb      	ldrb	r3, [r7, #30]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40007c00 	.word	0x40007c00
 8006628:	40023800 	.word	0x40023800
 800662c:	00f42400 	.word	0x00f42400

08006630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672e:	d10a      	bne.n	8006746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af02      	add	r7, sp, #8
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006784:	f7fb fc9c 	bl	80020c0 <HAL_GetTick>
 8006788:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b08      	cmp	r3, #8
 8006796:	d10e      	bne.n	80067b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006798:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f831 	bl	800680e <UART_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e027      	b.n	8006806 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d10e      	bne.n	80067e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f81b 	bl	800680e <UART_WaitOnFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e011      	b.n	8006806 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b09c      	sub	sp, #112	; 0x70
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	603b      	str	r3, [r7, #0]
 800681a:	4613      	mov	r3, r2
 800681c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	e0a7      	b.n	8006970 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006826:	f000 80a3 	beq.w	8006970 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682a:	f7fb fc49 	bl	80020c0 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006836:	429a      	cmp	r2, r3
 8006838:	d302      	bcc.n	8006840 <UART_WaitOnFlagUntilTimeout+0x32>
 800683a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800683c:	2b00      	cmp	r3, #0
 800683e:	d13f      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006854:	667b      	str	r3, [r7, #100]	; 0x64
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006860:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800686c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	663b      	str	r3, [r7, #96]	; 0x60
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006892:	64ba      	str	r2, [r7, #72]	; 0x48
 8006894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e068      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d050      	beq.n	8006970 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068dc:	d148      	bne.n	8006970 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006906:	637b      	str	r3, [r7, #52]	; 0x34
 8006908:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800690c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	613b      	str	r3, [r7, #16]
   return(result);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	66bb      	str	r3, [r7, #104]	; 0x68
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800693a:	623a      	str	r2, [r7, #32]
 800693c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	69f9      	ldr	r1, [r7, #28]
 8006940:	6a3a      	ldr	r2, [r7, #32]
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	61bb      	str	r3, [r7, #24]
   return(result);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e010      	b.n	8006992 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4013      	ands	r3, r2
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	429a      	cmp	r2, r3
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	429a      	cmp	r2, r3
 800698c:	f43f af48 	beq.w	8006820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3770      	adds	r7, #112	; 0x70
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	f023 0101 	bic.w	r1, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d102      	bne.n	80069cc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80069c6:	2340      	movs	r3, #64	; 0x40
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e001      	b.n	80069d0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80069dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80069e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80069e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80069ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80069f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80069fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8006a00:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8006a06:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8006a0c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8006a34:	4b20      	ldr	r3, [pc, #128]	; (8006ab8 <FMC_NORSRAM_Init+0x11c>)
 8006a36:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a3e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a46:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006a4e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	43db      	mvns	r3, r3
 8006a5e:	ea02 0103 	and.w	r1, r2, r3
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4319      	orrs	r1, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a78:	d10c      	bne.n	8006a94 <FMC_NORSRAM_Init+0xf8>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	371c      	adds	r7, #28
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	0008fb7f 	.word	0x0008fb7f

08006abc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	1c5a      	adds	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	051b      	lsls	r3, r3, #20
 8006afa:	431a      	orrs	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	3b02      	subs	r3, #2
 8006b02:	061b      	lsls	r3, r3, #24
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	3201      	adds	r2, #1
 8006b10:	4319      	orrs	r1, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b24:	d113      	bne.n	8006b4e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b2e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	051b      	lsls	r3, r3, #20
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b70:	d11d      	bne.n	8006bae <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b7a:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	6811      	ldr	r1, [r2, #0]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	6852      	ldr	r2, [r2, #4]
 8006b86:	0112      	lsls	r2, r2, #4
 8006b88:	4311      	orrs	r1, r2
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	6892      	ldr	r2, [r2, #8]
 8006b8e:	0212      	lsls	r2, r2, #8
 8006b90:	4311      	orrs	r1, r2
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	6992      	ldr	r2, [r2, #24]
 8006b96:	4311      	orrs	r1, r2
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	68d2      	ldr	r2, [r2, #12]
 8006b9c:	0412      	lsls	r2, r2, #16
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	ea43 0102 	orr.w	r1, r3, r2
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006bac:	e005      	b.n	8006bba <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	cff00000 	.word	0xcff00000

08006bcc <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d121      	bne.n	8006c4e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b27      	ldr	r3, [pc, #156]	; (8006cac <FMC_SDRAM_Init+0xb4>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	6851      	ldr	r1, [r2, #4]
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	6892      	ldr	r2, [r2, #8]
 8006c1a:	4311      	orrs	r1, r2
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	68d2      	ldr	r2, [r2, #12]
 8006c20:	4311      	orrs	r1, r2
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	6912      	ldr	r2, [r2, #16]
 8006c26:	4311      	orrs	r1, r2
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	6952      	ldr	r2, [r2, #20]
 8006c2c:	4311      	orrs	r1, r2
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	6992      	ldr	r2, [r2, #24]
 8006c32:	4311      	orrs	r1, r2
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	69d2      	ldr	r2, [r2, #28]
 8006c38:	4311      	orrs	r1, r2
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	6a12      	ldr	r2, [r2, #32]
 8006c3e:	4311      	orrs	r1, r2
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c44:	430a      	orrs	r2, r1
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e026      	b.n	8006c9c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	69d9      	ldr	r1, [r3, #28]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	4319      	orrs	r1, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	430b      	orrs	r3, r1
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685a      	ldr	r2, [r3, #4]
 8006c70:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <FMC_SDRAM_Init+0xb4>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	6851      	ldr	r1, [r2, #4]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	6892      	ldr	r2, [r2, #8]
 8006c7c:	4311      	orrs	r1, r2
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68d2      	ldr	r2, [r2, #12]
 8006c82:	4311      	orrs	r1, r2
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	6912      	ldr	r2, [r2, #16]
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	6952      	ldr	r2, [r2, #20]
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	6992      	ldr	r2, [r2, #24]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	ffff8000 	.word	0xffff8000

08006cb0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d128      	bne.n	8006d14 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	1e59      	subs	r1, r3, #1
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	4319      	orrs	r1, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	4319      	orrs	r1, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	031b      	lsls	r3, r3, #12
 8006cec:	4319      	orrs	r1, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	041b      	lsls	r3, r3, #16
 8006cf6:	4319      	orrs	r1, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	695b      	ldr	r3, [r3, #20]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	051b      	lsls	r3, r3, #20
 8006d00:	4319      	orrs	r1, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	061b      	lsls	r3, r3, #24
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	609a      	str	r2, [r3, #8]
 8006d12:	e02d      	b.n	8006d70 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <FMC_SDRAM_Timing_Init+0xd0>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	68d2      	ldr	r2, [r2, #12]
 8006d20:	3a01      	subs	r2, #1
 8006d22:	0311      	lsls	r1, r2, #12
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	6952      	ldr	r2, [r2, #20]
 8006d28:	3a01      	subs	r2, #1
 8006d2a:	0512      	lsls	r2, r2, #20
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	1e59      	subs	r1, r3, #1
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	4319      	orrs	r1, r3
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	021b      	lsls	r3, r3, #8
 8006d54:	4319      	orrs	r1, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	4319      	orrs	r1, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	061b      	lsls	r3, r3, #24
 8006d68:	430b      	orrs	r3, r1
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	ff0f0fff 	.word	0xff0f0fff

08006d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d84:	b084      	sub	sp, #16
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b084      	sub	sp, #16
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	f107 001c 	add.w	r0, r7, #28
 8006d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d120      	bne.n	8006dde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <USB_CoreInit+0xac>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d105      	bne.n	8006dd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa96 	bl	8007304 <USB_CoreReset>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
 8006ddc:	e010      	b.n	8006e00 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fa8a 	bl	8007304 <USB_CoreReset>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d10b      	bne.n	8006e1e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f043 0206 	orr.w	r2, r3, #6
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e2a:	b004      	add	sp, #16
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	ffbdffbf 	.word	0xffbdffbf

08006e34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f023 0201 	bic.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d115      	bne.n	8006ea4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fb f927 	bl	80020d8 <HAL_Delay>
      ms++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fa29 	bl	80072e8 <USB_GetMode>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d01e      	beq.n	8006eda <USB_SetCurrentMode+0x84>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b31      	cmp	r3, #49	; 0x31
 8006ea0:	d9f0      	bls.n	8006e84 <USB_SetCurrentMode+0x2e>
 8006ea2:	e01a      	b.n	8006eda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d115      	bne.n	8006ed6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f7fb f90e 	bl	80020d8 <HAL_Delay>
      ms++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fa10 	bl	80072e8 <USB_GetMode>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <USB_SetCurrentMode+0x84>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b31      	cmp	r3, #49	; 0x31
 8006ed2:	d9f0      	bls.n	8006eb6 <USB_SetCurrentMode+0x60>
 8006ed4:	e001      	b.n	8006eda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e005      	b.n	8006ee6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b32      	cmp	r3, #50	; 0x32
 8006ede:	d101      	bne.n	8006ee4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	e009      	b.n	8006f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	3340      	adds	r3, #64	; 0x40
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3301      	adds	r3, #1
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b0e      	cmp	r3, #14
 8006f28:	d9f2      	bls.n	8006f10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11c      	bne.n	8006f6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f3e:	f043 0302 	orr.w	r3, r3, #2
 8006f42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e005      	b.n	8006f76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	4619      	mov	r1, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f90:	461a      	mov	r2, r3
 8006f92:	680b      	ldr	r3, [r1, #0]
 8006f94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10c      	bne.n	8006fb6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f965 	bl	8007274 <USB_SetDevSpeed>
 8006faa:	e008      	b.n	8006fbe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fac:	2101      	movs	r1, #1
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f960 	bl	8007274 <USB_SetDevSpeed>
 8006fb4:	e003      	b.n	8006fbe <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f95b 	bl	8007274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006fbe:	2110      	movs	r1, #16
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f8f3 	bl	80071ac <USB_FlushTxFifo>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f91f 	bl	8007214 <USB_FlushRxFifo>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffe:	461a      	mov	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e043      	b.n	8007092 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800701c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007020:	d118      	bne.n	8007054 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007034:	461a      	mov	r2, r3
 8007036:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	e013      	b.n	8007066 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704a:	461a      	mov	r2, r3
 800704c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e008      	b.n	8007066 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	461a      	mov	r2, r3
 8007062:	2300      	movs	r3, #0
 8007064:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	461a      	mov	r2, r3
 8007074:	2300      	movs	r3, #0
 8007076:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	461a      	mov	r2, r3
 8007086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800708a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	3301      	adds	r3, #1
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	429a      	cmp	r2, r3
 8007098:	d3b7      	bcc.n	800700a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
 800709e:	e043      	b.n	8007128 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b6:	d118      	bne.n	80070ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10a      	bne.n	80070d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	461a      	mov	r2, r3
 80070cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	e013      	b.n	80070fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	461a      	mov	r2, r3
 80070e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	e008      	b.n	80070fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	461a      	mov	r2, r3
 80070f8:	2300      	movs	r3, #0
 80070fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007108:	461a      	mov	r2, r3
 800710a:	2300      	movs	r3, #0
 800710c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	461a      	mov	r2, r3
 800711c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	3301      	adds	r3, #1
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	429a      	cmp	r2, r3
 800712e:	d3b7      	bcc.n	80070a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007142:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007150:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f043 0210 	orr.w	r2, r3, #16
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <USB_DevInit+0x2b4>)
 800716a:	4313      	orrs	r3, r2
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d005      	beq.n	8007182 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	f043 0208 	orr.w	r2, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d105      	bne.n	8007194 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	699a      	ldr	r2, [r3, #24]
 800718c:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <USB_DevInit+0x2b8>)
 800718e:	4313      	orrs	r3, r2
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071a0:	b004      	add	sp, #16
 80071a2:	4770      	bx	lr
 80071a4:	803c3800 	.word	0x803c3800
 80071a8:	40000004 	.word	0x40000004

080071ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4a13      	ldr	r2, [pc, #76]	; (8007210 <USB_FlushTxFifo+0x64>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d901      	bls.n	80071cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e01b      	b.n	8007204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	daf2      	bge.n	80071ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	019b      	lsls	r3, r3, #6
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	3301      	adds	r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4a08      	ldr	r2, [pc, #32]	; (8007210 <USB_FlushTxFifo+0x64>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d901      	bls.n	80071f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e006      	b.n	8007204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d0f0      	beq.n	80071e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	00030d40 	.word	0x00030d40

08007214 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800721c:	2300      	movs	r3, #0
 800721e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4a11      	ldr	r2, [pc, #68]	; (8007270 <USB_FlushRxFifo+0x5c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e018      	b.n	8007264 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	daf2      	bge.n	8007220 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2210      	movs	r2, #16
 8007242:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a08      	ldr	r2, [pc, #32]	; (8007270 <USB_FlushRxFifo+0x5c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d901      	bls.n	8007256 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e006      	b.n	8007264 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b10      	cmp	r3, #16
 8007260:	d0f0      	beq.n	8007244 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	00030d40 	.word	0x00030d40

08007274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	78fb      	ldrb	r3, [r7, #3]
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007294:	4313      	orrs	r3, r2
 8007296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072c0:	f023 0303 	bic.w	r3, r3, #3
 80072c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072d4:	f043 0302 	orr.w	r3, r3, #2
 80072d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	f003 0301 	and.w	r3, r3, #1
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a13      	ldr	r2, [pc, #76]	; (8007368 <USB_CoreReset+0x64>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e01b      	b.n	800735a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	daf2      	bge.n	8007310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f043 0201 	orr.w	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a09      	ldr	r2, [pc, #36]	; (8007368 <USB_CoreReset+0x64>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d901      	bls.n	800734c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e006      	b.n	800735a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d0f0      	beq.n	800733a <USB_CoreReset+0x36>

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	00030d40 	.word	0x00030d40

0800736c <__libc_init_array>:
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	4d0d      	ldr	r5, [pc, #52]	; (80073a4 <__libc_init_array+0x38>)
 8007370:	4c0d      	ldr	r4, [pc, #52]	; (80073a8 <__libc_init_array+0x3c>)
 8007372:	1b64      	subs	r4, r4, r5
 8007374:	10a4      	asrs	r4, r4, #2
 8007376:	2600      	movs	r6, #0
 8007378:	42a6      	cmp	r6, r4
 800737a:	d109      	bne.n	8007390 <__libc_init_array+0x24>
 800737c:	4d0b      	ldr	r5, [pc, #44]	; (80073ac <__libc_init_array+0x40>)
 800737e:	4c0c      	ldr	r4, [pc, #48]	; (80073b0 <__libc_init_array+0x44>)
 8007380:	f000 f820 	bl	80073c4 <_init>
 8007384:	1b64      	subs	r4, r4, r5
 8007386:	10a4      	asrs	r4, r4, #2
 8007388:	2600      	movs	r6, #0
 800738a:	42a6      	cmp	r6, r4
 800738c:	d105      	bne.n	800739a <__libc_init_array+0x2e>
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	f855 3b04 	ldr.w	r3, [r5], #4
 8007394:	4798      	blx	r3
 8007396:	3601      	adds	r6, #1
 8007398:	e7ee      	b.n	8007378 <__libc_init_array+0xc>
 800739a:	f855 3b04 	ldr.w	r3, [r5], #4
 800739e:	4798      	blx	r3
 80073a0:	3601      	adds	r6, #1
 80073a2:	e7f2      	b.n	800738a <__libc_init_array+0x1e>
 80073a4:	08007404 	.word	0x08007404
 80073a8:	08007404 	.word	0x08007404
 80073ac:	08007404 	.word	0x08007404
 80073b0:	08007408 	.word	0x08007408

080073b4 <memset>:
 80073b4:	4402      	add	r2, r0
 80073b6:	4603      	mov	r3, r0
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d100      	bne.n	80073be <memset+0xa>
 80073bc:	4770      	bx	lr
 80073be:	f803 1b01 	strb.w	r1, [r3], #1
 80073c2:	e7f9      	b.n	80073b8 <memset+0x4>

080073c4 <_init>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr

080073d0 <_fini>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr
