
Speech_to_text_phase1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b38  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00172118  08013d40  08013d40  00023d40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08185e58  08185e58  001a141c  2**0
                  CONTENTS
  4 .ARM          00000008  08185e58  08185e58  00195e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08185e60  08185e60  001a141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08185e60  08185e60  00195e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08185e64  08185e64  00195e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  08185e68  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019558  2000141c  08187284  001a141c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2001a974  08187284  001aa974  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001a141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e52a  00000000  00000000  001a144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006fd9  00000000  00000000  001cf974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002240  00000000  00000000  001d6950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e48  00000000  00000000  001d8b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039dd8  00000000  00000000  001da9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033de9  00000000  00000000  002147b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00140c9d  00000000  00000000  00248599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  00389236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ee8  00000000  00000000  003892f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  003921dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000141c 	.word	0x2000141c
 800021c:	00000000 	.word	0x00000000
 8000220:	08013d20 	.word	0x08013d20

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001420 	.word	0x20001420
 800023c:	08013d20 	.word	0x08013d20

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x98>)
 8000716:	f002 f8c1 	bl	800289c <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fdd8 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_ADC1_Init+0xa4>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x98>)
 8000736:	f002 f8f5 	bl	8002924 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 fdc8 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001438 	.word	0x20001438
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001
 8000758:	10000012 	.word	0x10000012

0800075c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_ADC_MspInit+0x38>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000
 8000798:	40023800 	.word	0x40023800

0800079c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MX_CRC_Init+0x40>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c6:	f002 fc0f 	bl	8002fe8 <HAL_CRC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d0:	f000 fd80 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20001480 	.word	0x20001480
 80007dc:	40023000 	.word	0x40023000

080007e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_CRC_MspInit+0x38>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_CRC_MspInit+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023000 	.word	0x40023000
 800081c:	40023800 	.word	0x40023800

08000820 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000824:	4b63      	ldr	r3, [pc, #396]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <MX_DFSDM1_Init+0x198>)
 8000828:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000830:	4b60      	ldr	r3, [pc, #384]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000832:	2201      	movs	r2, #1
 8000834:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000838:	2201      	movs	r2, #1
 800083a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000842:	4b5c      	ldr	r3, [pc, #368]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000844:	2200      	movs	r2, #0
 8000846:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000848:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800084a:	2200      	movs	r2, #0
 800084c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800084e:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800085c:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800085e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000862:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000864:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000866:	22b0      	movs	r2, #176	; 0xb0
 8000868:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800086c:	2201      	movs	r2, #1
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000872:	f002 fd63 	bl	800333c <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000878:	4a51      	ldr	r2, [pc, #324]	; (80009c0 <MX_DFSDM1_Init+0x1a0>)
 800087a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800087c:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000884:	2201      	movs	r2, #1
 8000886:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800088a:	2201      	movs	r2, #1
 800088c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000894:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000896:	2201      	movs	r2, #1
 8000898:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800089c:	2200      	movs	r2, #0
 800089e:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008b0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008b8:	22b0      	movs	r2, #176	; 0xb0
 80008ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008bc:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008c2:	483e      	ldr	r0, [pc, #248]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008c4:	f002 fd3a 	bl	800333c <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008c8:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MX_DFSDM1_Init+0x1a8>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 80008dc:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008de:	2204      	movs	r2, #4
 80008e0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008fe:	2204      	movs	r2, #4
 8000900:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000908:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 800090a:	2201      	movs	r2, #1
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 800091c:	f002 fc4e 	bl	80031bc <HAL_DFSDM_ChannelInit>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000926:	f000 fcd5 	bl	80012d4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MX_DFSDM1_Init+0x1b0>)
 800092e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000932:	2201      	movs	r2, #1
 8000934:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000940:	2204      	movs	r2, #4
 8000942:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800095e:	2204      	movs	r2, #4
 8000960:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800096a:	220a      	movs	r2, #10
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000976:	2202      	movs	r2, #2
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800097c:	f002 fc1e 	bl	80031bc <HAL_DFSDM_ChannelInit>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000986:	f000 fca5 	bl	80012d4 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800098a:	2201      	movs	r2, #1
 800098c:	4911      	ldr	r1, [pc, #68]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000990:	f002 fdae 	bl	80034f0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000994:	490f      	ldr	r1, [pc, #60]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000998:	f002 fdf0 	bl	800357c <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800099c:	2201      	movs	r2, #1
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80009a2:	f002 fda5 	bl	80034f0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80009a6:	2101      	movs	r1, #1
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80009aa:	f002 fde7 	bl	800357c <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200014a4 	.word	0x200014a4
 80009b8:	40017500 	.word	0x40017500
 80009bc:	200014f8 	.word	0x200014f8
 80009c0:	40017580 	.word	0x40017580
 80009c4:	2000154c 	.word	0x2000154c
 80009c8:	40017400 	.word	0x40017400
 80009cc:	20001584 	.word	0x20001584
 80009d0:	40017420 	.word	0x40017420
 80009d4:	00010002 	.word	0x00010002

080009d8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80009f0:	4b63      	ldr	r3, [pc, #396]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d145      	bne.n	8000a84 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009f8:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a61      	ldr	r2, [pc, #388]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000a00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a02:	4b60      	ldr	r3, [pc, #384]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10b      	bne.n	8000a22 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a0a:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a5e      	ldr	r2, [pc, #376]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b59      	ldr	r3, [pc, #356]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a58      	ldr	r2, [pc, #352]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	484d      	ldr	r0, [pc, #308]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a56:	f003 fae3 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4845      	ldr	r0, [pc, #276]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a76:	f003 fad3 	bl	8004020 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a82:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d137      	bne.n	8000afe <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000a92:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ace:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ad8:	f002 fefc 	bl	80038d4 <HAL_DMA_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000ae2:	f000 fbf7 	bl	80012d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aec:	4a29      	ldr	r2, [pc, #164]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d137      	bne.n	8000b78 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b0a:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000b0c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b14:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b48:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b52:	f002 febf 	bl	80038d4 <HAL_DMA_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000b5c:	f000 fbba 	bl	80012d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20001680 	.word	0x20001680
 8000b84:	2000167c 	.word	0x2000167c
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40017500 	.word	0x40017500
 8000b94:	200015bc 	.word	0x200015bc
 8000b98:	40026410 	.word	0x40026410
 8000b9c:	40017580 	.word	0x40017580
 8000ba0:	2000161c 	.word	0x2000161c
 8000ba4:	40026488 	.word	0x40026488

08000ba8 <HAL_DFSDM_ChannelMspInit>:

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d145      	bne.n	8000c54 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c26:	f003 f9fb 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c46:	f003 f9eb 	bl	8004020 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a02      	ldr	r2, [pc, #8]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c52:	6013      	str	r3, [r2, #0]
  }
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20001680 	.word	0x20001680
 8000c60:	2000167c 	.word	0x2000167c
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f002 f973 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f002 f98c 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2039      	movs	r0, #57	; 0x39
 8000ca0:	f002 f96b 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ca4:	2039      	movs	r0, #57	; 0x39
 8000ca6:	f002 f984 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	203b      	movs	r0, #59	; 0x3b
 8000cb0:	f002 f963 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cb4:	203b      	movs	r0, #59	; 0x3b
 8000cb6:	f002 f97c 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2044      	movs	r0, #68	; 0x44
 8000cc0:	f002 f95b 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cc4:	2044      	movs	r0, #68	; 0x44
 8000cc6:	f002 f974 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2045      	movs	r0, #69	; 0x45
 8000cd0:	f002 f953 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cd4:	2045      	movs	r0, #69	; 0x45
 8000cd6:	f002 f96c 	bl	8002fb2 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a56      	ldr	r2, [pc, #344]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a50      	ldr	r2, [pc, #320]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4826      	ldr	r0, [pc, #152]	; (8000e78 <MX_GPIO_Init+0x190>)
 8000dde:	f003 fae3 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	210b      	movs	r1, #11
 8000de6:	4825      	ldr	r0, [pc, #148]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000de8:	f003 fade 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_GPIO_Init+0x198>)
 8000e04:	f003 f90c 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4815      	ldr	r0, [pc, #84]	; (8000e78 <MX_GPIO_Init+0x190>)
 8000e22:	f003 f8fd 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000e26:	230b      	movs	r3, #11
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480f      	ldr	r0, [pc, #60]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000e3e:	f003 f8ef 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000e58:	f003 f8e2 	bl	8004020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f002 f88a 	bl	8002f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f002 f8a3 	bl	8002fb2 <HAL_NVIC_EnableIRQ>

}
 8000e6c:	bf00      	nop
 8000e6e:	3738      	adds	r7, #56	; 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	40022400 	.word	0x40022400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400

08000e88 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e8c:	f3bf 8f4f 	dsb	sy
}
 8000e90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e92:	f3bf 8f6f 	isb	sy
}
 8000e96:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea0:	f3bf 8f4f 	dsb	sy
}
 8000ea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea6:	f3bf 8f6f 	isb	sy
}
 8000eaa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb8:	f3bf 8f4f 	dsb	sy
}
 8000ebc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ebe:	f3bf 8f6f 	isb	sy
}
 8000ec2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee2:	f3bf 8f4f 	dsb	sy
}
 8000ee6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eee:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0b5b      	lsrs	r3, r3, #13
 8000ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ef8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f02:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f0c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f12:	4911      	ldr	r1, [pc, #68]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ef      	bne.n	8000f04 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	60fa      	str	r2, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1e5      	bne.n	8000efa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2e:	f3bf 8f4f 	dsb	sy
}
 8000f32:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f40:	f3bf 8f4f 	dsb	sy
}
 8000f44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f46:	f3bf 8f6f 	isb	sy
}
 8000f4a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09e      	sub	sp, #120	; 0x78
 8000f60:	af00      	add	r7, sp, #0

	ModelOutput output;
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f62:	f7ff ff91 	bl	8000e88 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f66:	f7ff ffb5 	bl	8000ed4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 fc15 	bl	8002798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f90d 	bl	800118c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f72:	f000 f97f 	bl	8001274 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff feb7 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fe77 	bl	8000c6c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f7e:	f7ff fc4f 	bl	8000820 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000f82:	f000 fa7f 	bl	8001484 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000f86:	f7ff fb95 	bl	80006b4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000f8a:	f000 fe19 	bl	8001bc0 <MX_UART4_Init>
  MX_CRC_Init();
 8000f8e:	f7ff fc05 	bl	800079c <MX_CRC_Init>
  MX_RTC_Init();
 8000f92:	f000 f9a5 	bl	80012e0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f96:	f000 fb7f 	bl	8001698 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f9a:	f008 fd1f 	bl	80099dc <MX_FATFS_Init>
  MX_TIM2_Init();
 8000f9e:	f000 fd97 	bl	8001ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa6:	496c      	ldr	r1, [pc, #432]	; (8001158 <main+0x1fc>)
 8000fa8:	486c      	ldr	r0, [pc, #432]	; (800115c <main+0x200>)
 8000faa:	f002 fb17 	bl	80035dc <HAL_DFSDM_FilterRegularStart_DMA>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <main+0x5c>
    {
      Error_Handler();
 8000fb4:	f000 f98e 	bl	80012d4 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fbc:	4968      	ldr	r1, [pc, #416]	; (8001160 <main+0x204>)
 8000fbe:	4869      	ldr	r0, [pc, #420]	; (8001164 <main+0x208>)
 8000fc0:	f002 fb0c 	bl	80035dc <HAL_DFSDM_FilterRegularStart_DMA>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <main+0x72>
    {
      Error_Handler();
 8000fca:	f000 f983 	bl	80012d4 <Error_Handler>
    }


	SDInit();
 8000fce:	f00c f9ef 	bl	800d3b0 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd8:	4863      	ldr	r0, [pc, #396]	; (8001168 <main+0x20c>)
 8000fda:	f003 f9e5 	bl	80043a8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4862      	ldr	r0, [pc, #392]	; (800116c <main+0x210>)
 8000fe4:	f003 f9e0 	bl	80043a8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2102      	movs	r1, #2
 8000fec:	485f      	ldr	r0, [pc, #380]	; (800116c <main+0x210>)
 8000fee:	f003 f9db 	bl	80043a8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	485d      	ldr	r0, [pc, #372]	; (800116c <main+0x210>)
 8000ff8:	f003 f9d6 	bl	80043a8 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000ffc:	f00b ff9e 	bl	800cf3c <Preprocessing_Init>
	 if (modelSetup()!= AI_OK)
 8001000:	f00b fe08 	bl	800cc14 <modelSetup>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <main+0xb2>
	{
		Error_Handler();
 800100a:	f000 f963 	bl	80012d4 <Error_Handler>
	}
	 HAL_TIM_Base_Start_IT(&htim2);
 800100e:	4858      	ldr	r0, [pc, #352]	; (8001170 <main+0x214>)
 8001010:	f006 fe96 	bl	8007d40 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for the temper button to be pressed
	  while (!recording);
 8001014:	bf00      	nop
 8001016:	4b57      	ldr	r3, [pc, #348]	; (8001174 <main+0x218>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0fb      	beq.n	8001016 <main+0xba>
	  // debouncing
	  HAL_Delay(250);
 800101e:	20fa      	movs	r0, #250	; 0xfa
 8001020:	f001 fc18 	bl	8002854 <HAL_Delay>
	  recording = 1;
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <main+0x218>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <main+0x21c>)
 800102c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001030:	461a      	mov	r2, r3
 8001032:	2300      	movs	r3, #0
 8001034:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 8001038:	4b4f      	ldr	r3, [pc, #316]	; (8001178 <main+0x21c>)
 800103a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	  //LEDs on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104a:	4847      	ldr	r0, [pc, #284]	; (8001168 <main+0x20c>)
 800104c:	f003 f9ac 	bl	80043a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2101      	movs	r1, #1
 8001054:	4845      	ldr	r0, [pc, #276]	; (800116c <main+0x210>)
 8001056:	f003 f9a7 	bl	80043a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	4843      	ldr	r0, [pc, #268]	; (800116c <main+0x210>)
 8001060:	f003 f9a2 	bl	80043a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2108      	movs	r1, #8
 8001068:	4840      	ldr	r0, [pc, #256]	; (800116c <main+0x210>)
 800106a:	f003 f99d 	bl	80043a8 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 800106e:	e001      	b.n	8001074 <main+0x118>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 8001070:	f00c f872 	bl	800d158 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <main+0x218>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <main+0x12e>
 800107c:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <main+0x21c>)
 800107e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001082:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f2      	beq.n	8001070 <main+0x114>
	  }
	  HAL_Delay(250);
 800108a:	20fa      	movs	r0, #250	; 0xfa
 800108c:	f001 fbe2 	bl	8002854 <HAL_Delay>
	  recording = 0;
 8001090:	4b38      	ldr	r3, [pc, #224]	; (8001174 <main+0x218>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
	  //read date to folder name
	  get_date((char*)directory_name);
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	4618      	mov	r0, r3
 800109c:	f00c f91e 	bl	800d2dc <get_date>
	  //creates a folder with the date
	  f_mkdir ((char*)(directory_name));
 80010a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00b f85a 	bl	800c15e <f_mkdir>
	  //read time and date
	  get_time_filename((char*)file_name);
 80010aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00c f936 	bl	800d320 <get_time_filename>


//////////////////////////////////////
	  //getting the mel spectrogram
	  AudioPreprocessing_RunMethod4(BufferCtl.pcm_buff, (float32_t*)spectrogram_output, BufferCtl.fptr);
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <main+0x21c>)
 80010b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010ba:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80010be:	461a      	mov	r2, r3
 80010c0:	492e      	ldr	r1, [pc, #184]	; (800117c <main+0x220>)
 80010c2:	482d      	ldr	r0, [pc, #180]	; (8001178 <main+0x21c>)
 80010c4:	f00b ffc2 	bl	800d04c <AudioPreprocessing_RunMethod4>
		  	  SDclose();
	  	  }
//////////////////////////////////////
	  if (EXPORT_WAV)
	  {
		  sprintf((char*)file_path,"%s/%s.wav",directory_name, file_name);
 80010c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010d0:	1d38      	adds	r0, r7, #4
 80010d2:	492b      	ldr	r1, [pc, #172]	; (8001180 <main+0x224>)
 80010d4:	f011 faee 	bl	80126b4 <siprintf>
		  //write to the sd card
		  createFile((char*)file_path);
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4618      	mov	r0, r3
 80010dc:	f00c f97c 	bl	800d3d8 <createFile>
		  //creates the header and saves audio file
		  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 80010e0:	4928      	ldr	r1, [pc, #160]	; (8001184 <main+0x228>)
 80010e2:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010e6:	f00c fa1d 	bl	800d524 <WavProcess_EncInit>
		  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 80010ea:	212c      	movs	r1, #44	; 0x2c
 80010ec:	4825      	ldr	r0, [pc, #148]	; (8001184 <main+0x228>)
 80010ee:	f00c f98b 	bl	800d408 <writeToFile>
		  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <main+0x21c>)
 80010f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010f8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 80010fc:	4619      	mov	r1, r3
 80010fe:	481e      	ldr	r0, [pc, #120]	; (8001178 <main+0x21c>)
 8001100:	f00c f982 	bl	800d408 <writeToFile>
		  SDclose();
 8001104:	f00c f994 	bl	800d430 <SDclose>

////////////////////////////////////// AI
	  if (EXPORT_WAV)
	  {
		  //getting the mel spectrogram
		  output = modelRun((float32_t*)spectrogram_output);
 8001108:	481c      	ldr	r0, [pc, #112]	; (800117c <main+0x220>)
 800110a:	f00b fddd 	bl	800ccc8 <modelRun>
 800110e:	4603      	mov	r3, r0
 8001110:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  sprintf((char*)file_path,"%s/%s.txt",directory_name, file_name);
 8001114:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001118:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800111c:	1d38      	adds	r0, r7, #4
 800111e:	491a      	ldr	r1, [pc, #104]	; (8001188 <main+0x22c>)
 8001120:	f011 fac8 	bl	80126b4 <siprintf>
		  //write to the sd card
		  createFile((char*)file_path);
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	4618      	mov	r0, r3
 8001128:	f00c f956 	bl	800d3d8 <createFile>
		  char * answer = getText(output);
 800112c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001130:	4618      	mov	r0, r3
 8001132:	f00b fd77 	bl	800cc24 <getText>
 8001136:	6738      	str	r0, [r7, #112]	; 0x70
		  writeToFile(answer, strlen(answer));
 8001138:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800113a:	f7ff f8e1 	bl	8000300 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	4619      	mov	r1, r3
 8001142:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001144:	f00c f960 	bl	800d408 <writeToFile>
		  SDclose();
 8001148:	f00c f972 	bl	800d430 <SDclose>
	  }
	  ledsShowValue(output);
 800114c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001150:	4618      	mov	r0, r3
 8001152:	f00c f995 	bl	800d480 <ledsShowValue>
  {
 8001156:	e75d      	b.n	8001014 <main+0xb8>
 8001158:	20003688 	.word	0x20003688
 800115c:	200014f8 	.word	0x200014f8
 8001160:	20001688 	.word	0x20001688
 8001164:	200014a4 	.word	0x200014a4
 8001168:	40022000 	.word	0x40022000
 800116c:	40022400 	.word	0x40022400
 8001170:	200058e8 	.word	0x200058e8
 8001174:	20001684 	.word	0x20001684
 8001178:	2000a5f8 	.word	0x2000a5f8
 800117c:	20012b0c 	.word	0x20012b0c
 8001180:	08013d40 	.word	0x08013d40
 8001184:	2001a938 	.word	0x2001a938
 8001188:	08013d4c 	.word	0x08013d4c

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b094      	sub	sp, #80	; 0x50
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2234      	movs	r2, #52	; 0x34
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f011 f992 	bl	80124c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011b0:	f003 f92c 	bl	800440c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	4b2d      	ldr	r3, [pc, #180]	; (800126c <SystemClock_Config+0xe0>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b8:	4a2c      	ldr	r2, [pc, #176]	; (800126c <SystemClock_Config+0xe0>)
 80011ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011be:	6413      	str	r3, [r2, #64]	; 0x40
 80011c0:	4b2a      	ldr	r3, [pc, #168]	; (800126c <SystemClock_Config+0xe0>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <SystemClock_Config+0xe4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a27      	ldr	r2, [pc, #156]	; (8001270 <SystemClock_Config+0xe4>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <SystemClock_Config+0xe4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011e4:	2309      	movs	r3, #9
 80011e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011ee:	2301      	movs	r3, #1
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011fc:	2319      	movs	r3, #25
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001200:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001204:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800120a:	2309      	movs	r3, #9
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800120e:	2302      	movs	r3, #2
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4618      	mov	r0, r3
 8001218:	f003 f958 	bl	80044cc <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001222:	f000 f857 	bl	80012d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001226:	f003 f901 	bl	800442c <HAL_PWREx_EnableOverDrive>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001230:	f000 f850 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2302      	movs	r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001240:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001244:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	2107      	movs	r1, #7
 8001252:	4618      	mov	r0, r3
 8001254:	f003 fbe8 	bl	8004a28 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800125e:	f000 f839 	bl	80012d4 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	; 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0a4      	sub	sp, #144	; 0x90
 8001278:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2290      	movs	r2, #144	; 0x90
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f011 f91f 	bl	80124c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <PeriphCommonClock_Config+0x5c>)
 8001288:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 800128a:	f240 13ad 	movw	r3, #429	; 0x1ad
 800128e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001290:	2302      	movs	r3, #2
 8001292:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001294:	2306      	movs	r3, #6
 8001296:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 800129c:	2306      	movs	r3, #6
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 80012a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b6:	463b      	mov	r3, r7
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fd9b 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80012c4:	f000 f806 	bl	80012d4 <Error_Handler>
  }
}
 80012c8:	bf00      	nop
 80012ca:	3790      	adds	r7, #144	; 0x90
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	18300000 	.word	0x18300000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b090      	sub	sp, #64	; 0x40
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012f6:	2300      	movs	r3, #0
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2228      	movs	r2, #40	; 0x28
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f011 f8df 	bl	80124c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001306:	4b42      	ldr	r3, [pc, #264]	; (8001410 <MX_RTC_Init+0x130>)
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <MX_RTC_Init+0x134>)
 800130a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800130c:	4b40      	ldr	r3, [pc, #256]	; (8001410 <MX_RTC_Init+0x130>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_RTC_Init+0x130>)
 8001314:	227f      	movs	r2, #127	; 0x7f
 8001316:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001318:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <MX_RTC_Init+0x130>)
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800131e:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <MX_RTC_Init+0x130>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001324:	4b3a      	ldr	r3, [pc, #232]	; (8001410 <MX_RTC_Init+0x130>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800132a:	4b39      	ldr	r3, [pc, #228]	; (8001410 <MX_RTC_Init+0x130>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001330:	4837      	ldr	r0, [pc, #220]	; (8001410 <MX_RTC_Init+0x130>)
 8001332:	f004 faf9 	bl	8005928 <HAL_RTC_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800133c:	f7ff ffca 	bl	80012d4 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!(!SET_TIME_RTC && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2))
 8001340:	2100      	movs	r1, #0
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <MX_RTC_Init+0x130>)
 8001344:	f004 ffa2 	bl	800628c <HAL_RTCEx_BKUPRead>
 8001348:	4603      	mov	r3, r0
 800134a:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800134e:	4293      	cmp	r3, r2
 8001350:	d036      	beq.n	80013c0 <MX_RTC_Init+0xe0>
  {
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001352:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001356:	2100      	movs	r1, #0
 8001358:	482d      	ldr	r0, [pc, #180]	; (8001410 <MX_RTC_Init+0x130>)
 800135a:	f004 ff7d 	bl	8006258 <HAL_RTCEx_BKUPWrite>
	  sTime.Hours = HOUR;
 800135e:	2300      	movs	r3, #0
 8001360:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  sTime.Minutes = MIN;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  sTime.Seconds = SEC;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001378:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	4823      	ldr	r0, [pc, #140]	; (8001410 <MX_RTC_Init+0x130>)
 8001382:	f004 fb55 	bl	8005a30 <HAL_RTC_SetTime>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_RTC_Init+0xb0>
	  {
		Error_Handler();
 800138c:	f7ff ffa2 	bl	80012d4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001390:	2301      	movs	r3, #1
 8001392:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  sDate.Month = MONTH;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  sDate.Date = DAY;
 800139c:	2327      	movs	r3, #39	; 0x27
 800139e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  sDate.Year = YEAR;
 80013a2:	2323      	movs	r3, #35	; 0x23
 80013a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	4817      	ldr	r0, [pc, #92]	; (8001410 <MX_RTC_Init+0x130>)
 80013b2:	f004 fc35 	bl	8005c20 <HAL_RTC_SetDate>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_RTC_Init+0xe0>
	  {
		Error_Handler();
 80013bc:	f7ff ff8a 	bl	80012d4 <Error_Handler>
	  }
  }
  if (ALARM)
  {
	  	sAlarm.AlarmTime.Hours = A_HOUR;
 80013c0:	2300      	movs	r3, #0
 80013c2:	703b      	strb	r3, [r7, #0]
		sAlarm.AlarmTime.Minutes = A_MIN;
 80013c4:	2301      	movs	r3, #1
 80013c6:	707b      	strb	r3, [r7, #1]
		sAlarm.AlarmTime.Seconds = 0x0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	70bb      	strb	r3, [r7, #2]
		sAlarm.AlarmTime.SubSeconds = 0x0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80013d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013dc:	617b      	str	r3, [r7, #20]
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
		sAlarm.AlarmDateWeekDay = 0x9; // DATE
 80013e6:	2309      	movs	r3, #9
 80013e8:	f887 3020 	strb.w	r3, [r7, #32]
		sAlarm.Alarm = RTC_ALARM_A;
 80013ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013f2:	463b      	mov	r3, r7
 80013f4:	2201      	movs	r2, #1
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_RTC_Init+0x130>)
 80013fa:	f004 fce5 	bl	8005dc8 <HAL_RTC_SetAlarm_IT>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_RTC_Init+0x128>
		{
			Error_Handler();
 8001404:	f7ff ff66 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001408:	3740      	adds	r7, #64	; 0x40
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20005698 	.word	0x20005698
 8001414:	40002800 	.word	0x40002800

08001418 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0a6      	sub	sp, #152	; 0x98
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	2290      	movs	r2, #144	; 0x90
 8001426:	2100      	movs	r1, #0
 8001428:	4618      	mov	r0, r3
 800142a:	f011 f84b 	bl	80124c4 <memset>
  if(rtcHandle->Instance==RTC)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <HAL_RTC_MspInit+0x64>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d11c      	bne.n	8001472 <HAL_RTC_MspInit+0x5a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001438:	2320      	movs	r3, #32
 800143a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fcd4 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001452:	f7ff ff3f 	bl	80012d4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_RTC_MspInit+0x68>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_RTC_MspInit+0x68>)
 800145c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001460:	6713      	str	r3, [r2, #112]	; 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2029      	movs	r0, #41	; 0x29
 8001468:	f001 fd87 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800146c:	2029      	movs	r0, #41	; 0x29
 800146e:	f001 fda0 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3798      	adds	r7, #152	; 0x98
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40002800 	.word	0x40002800
 8001480:	40023800 	.word	0x40023800

08001484 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_SAI2_Init+0xb0>)
 800148a:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <MX_SAI2_Init+0xb4>)
 800148c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800148e:	4b29      	ldr	r3, [pc, #164]	; (8001534 <MX_SAI2_Init+0xb0>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_SAI2_Init+0xb0>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <MX_SAI2_Init+0xb0>)
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014b8:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <MX_SAI2_Init+0xb8>)
 80014ca:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014e6:	2220      	movs	r2, #32
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014ec:	2210      	movs	r2, #16
 80014ee:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SAI2_Init+0xb0>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_SAI2_Init+0xb0>)
 8001500:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001504:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_SAI2_Init+0xb0>)
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SAI2_Init+0xb0>)
 800150e:	2200      	movs	r2, #0
 8001510:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_SAI2_Init+0xb0>)
 8001514:	2202      	movs	r2, #2
 8001516:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SAI2_Init+0xb0>)
 800151a:	2203      	movs	r2, #3
 800151c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_SAI2_Init+0xb0>)
 8001520:	f004 fed6 	bl	80062d0 <HAL_SAI_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800152a:	f7ff fed3 	bl	80012d4 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200056b8 	.word	0x200056b8
 8001538:	40015c24 	.word	0x40015c24
 800153c:	0002ee00 	.word	0x0002ee00

08001540 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <HAL_SAI_MspInit+0x138>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f040 808e 	bne.w	8001670 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001554:	4b49      	ldr	r3, [pc, #292]	; (800167c <HAL_SAI_MspInit+0x13c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10b      	bne.n	8001574 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800155c:	4b48      	ldr	r3, [pc, #288]	; (8001680 <HAL_SAI_MspInit+0x140>)
 800155e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001560:	4a47      	ldr	r2, [pc, #284]	; (8001680 <HAL_SAI_MspInit+0x140>)
 8001562:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001566:	6453      	str	r3, [r2, #68]	; 0x44
 8001568:	4b45      	ldr	r3, [pc, #276]	; (8001680 <HAL_SAI_MspInit+0x140>)
 800156a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_SAI_MspInit+0x13c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	4a40      	ldr	r2, [pc, #256]	; (800167c <HAL_SAI_MspInit+0x13c>)
 800157c:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800157e:	2340      	movs	r3, #64	; 0x40
 8001580:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800158e:	230a      	movs	r3, #10
 8001590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	483a      	ldr	r0, [pc, #232]	; (8001684 <HAL_SAI_MspInit+0x144>)
 800159a:	f002 fd41 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015b0:	230a      	movs	r3, #10
 80015b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4833      	ldr	r0, [pc, #204]	; (8001688 <HAL_SAI_MspInit+0x148>)
 80015bc:	f002 fd30 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015d0:	230a      	movs	r3, #10
 80015d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	482c      	ldr	r0, [pc, #176]	; (800168c <HAL_SAI_MspInit+0x14c>)
 80015dc:	f002 fd20 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e0:	2304      	movs	r3, #4
 80015e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 80015f0:	2308      	movs	r3, #8
 80015f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4824      	ldr	r0, [pc, #144]	; (800168c <HAL_SAI_MspInit+0x14c>)
 80015fc:	f002 fd10 	bl	8004020 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001600:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001602:	4a24      	ldr	r2, [pc, #144]	; (8001694 <HAL_SAI_MspInit+0x154>)
 8001604:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8001606:	4b22      	ldr	r3, [pc, #136]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001608:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 800160c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001610:	2240      	movs	r2, #64	; 0x40
 8001612:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_SAI_MspInit+0x150>)
 800161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001620:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001628:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_SAI_MspInit+0x150>)
 800162c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001630:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001638:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_SAI_MspInit+0x150>)
 800163c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001640:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001648:	4811      	ldr	r0, [pc, #68]	; (8001690 <HAL_SAI_MspInit+0x150>)
 800164a:	f002 f943 	bl	80038d4 <HAL_DMA_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 8001654:	f7ff fe3e 	bl	80012d4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a0d      	ldr	r2, [pc, #52]	; (8001690 <HAL_SAI_MspInit+0x150>)
 800165c:	671a      	str	r2, [r3, #112]	; 0x70
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_SAI_MspInit+0x150>)
 8001668:	66da      	str	r2, [r3, #108]	; 0x6c
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <HAL_SAI_MspInit+0x150>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40015c24 	.word	0x40015c24
 800167c:	2000579c 	.word	0x2000579c
 8001680:	40023800 	.word	0x40023800
 8001684:	40021000 	.word	0x40021000
 8001688:	40021800 	.word	0x40021800
 800168c:	40020000 	.word	0x40020000
 8001690:	2000573c 	.word	0x2000573c
 8001694:	40026428 	.word	0x40026428

08001698 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 800169e:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <MX_SDMMC1_SD_Init+0x3c>)
 80016a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 80016bc:	2200      	movs	r2, #0
 80016be:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <MX_SDMMC1_SD_Init+0x38>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	200057a0 	.word	0x200057a0
 80016d4:	40012c00 	.word	0x40012c00

080016d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0ae      	sub	sp, #184	; 0xb8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2290      	movs	r2, #144	; 0x90
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f010 fee3 	bl	80124c4 <memset>
  if(sdHandle->Instance==SDMMC1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a74      	ldr	r2, [pc, #464]	; (80018d4 <HAL_SD_MspInit+0x1fc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 80e0 	bne.w	80018ca <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800170a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800170e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fb67 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 800172c:	f7ff fdd2 	bl	80012d4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001730:	4b69      	ldr	r3, [pc, #420]	; (80018d8 <HAL_SD_MspInit+0x200>)
 8001732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001734:	4a68      	ldr	r2, [pc, #416]	; (80018d8 <HAL_SD_MspInit+0x200>)
 8001736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173a:	6453      	str	r3, [r2, #68]	; 0x44
 800173c:	4b66      	ldr	r3, [pc, #408]	; (80018d8 <HAL_SD_MspInit+0x200>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_SD_MspInit+0x200>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	4a62      	ldr	r2, [pc, #392]	; (80018d8 <HAL_SD_MspInit+0x200>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6313      	str	r3, [r2, #48]	; 0x30
 8001754:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <HAL_SD_MspInit+0x200>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001760:	4b5d      	ldr	r3, [pc, #372]	; (80018d8 <HAL_SD_MspInit+0x200>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001764:	4a5c      	ldr	r2, [pc, #368]	; (80018d8 <HAL_SD_MspInit+0x200>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6313      	str	r3, [r2, #48]	; 0x30
 800176c:	4b5a      	ldr	r3, [pc, #360]	; (80018d8 <HAL_SD_MspInit+0x200>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001778:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800177c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001792:	230c      	movs	r3, #12
 8001794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800179c:	4619      	mov	r1, r3
 800179e:	484f      	ldr	r0, [pc, #316]	; (80018dc <HAL_SD_MspInit+0x204>)
 80017a0:	f002 fc3e 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a4:	2304      	movs	r3, #4
 80017a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017bc:	230c      	movs	r3, #12
 80017be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4845      	ldr	r0, [pc, #276]	; (80018e0 <HAL_SD_MspInit+0x208>)
 80017ca:	f002 fc29 	bl	8004020 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80017ce:	4b45      	ldr	r3, [pc, #276]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_SD_MspInit+0x210>)
 80017d2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017da:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017dc:	4b41      	ldr	r3, [pc, #260]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	4b40      	ldr	r3, [pc, #256]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ee:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017f0:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017f8:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 80017fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001800:	4b38      	ldr	r3, [pc, #224]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 8001802:	2220      	movs	r2, #32
 8001804:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800180c:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 800180e:	2204      	movs	r2, #4
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 8001814:	2203      	movs	r2, #3
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001818:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 800181a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 8001822:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001828:	482e      	ldr	r0, [pc, #184]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 800182a:	f002 f853 	bl	80038d4 <HAL_DMA_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001834:	f7ff fd4e 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
 800183e:	4a29      	ldr	r2, [pc, #164]	; (80018e4 <HAL_SD_MspInit+0x20c>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001846:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_SD_MspInit+0x218>)
 8001848:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_SD_MspInit+0x214>)
 800184c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001850:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_SD_MspInit+0x214>)
 800185a:	2200      	movs	r2, #0
 800185c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001864:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001870:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001874:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001876:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001878:	2220      	movs	r2, #32
 800187a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_SD_MspInit+0x214>)
 800187e:	2200      	movs	r2, #0
 8001880:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001884:	2204      	movs	r2, #4
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_SD_MspInit+0x214>)
 800188a:	2203      	movs	r2, #3
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001890:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_SD_MspInit+0x214>)
 8001898:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <HAL_SD_MspInit+0x214>)
 80018a0:	f002 f818 	bl	80038d4 <HAL_DMA_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80018aa:	f7ff fd13 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_SD_MspInit+0x214>)
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80018b4:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <HAL_SD_MspInit+0x214>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2031      	movs	r0, #49	; 0x31
 80018c0:	f001 fb5b 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80018c4:	2031      	movs	r0, #49	; 0x31
 80018c6:	f001 fb74 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80018ca:	bf00      	nop
 80018cc:	37b8      	adds	r7, #184	; 0xb8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40012c00 	.word	0x40012c00
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	20005824 	.word	0x20005824
 80018e8:	400264a0 	.word	0x400264a0
 80018ec:	20005884 	.word	0x20005884
 80018f0:	40026458 	.word	0x40026458

080018f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x44>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_MspInit+0x44>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_MspInit+0x44>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x44>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x44>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x44>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 ff44 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <TIM2_IRQHandler+0x10>)
 8001996:	f006 fa4b 	bl	8007e30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200058e8 	.word	0x200058e8

080019a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80019a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ac:	f002 fd16 	bl	80043dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019b8:	4802      	ldr	r0, [pc, #8]	; (80019c4 <RTC_Alarm_IRQHandler+0x10>)
 80019ba:	f004 fb47 	bl	800604c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20005698 	.word	0x20005698

080019c8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <SDMMC1_IRQHandler+0x10>)
 80019ce:	f005 f8b5 	bl	8006b3c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200057a0 	.word	0x200057a0

080019dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA2_Stream0_IRQHandler+0x10>)
 80019e2:	f002 f8a7 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200015bc 	.word	0x200015bc

080019f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA2_Stream1_IRQHandler+0x10>)
 80019f6:	f002 f89d 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2000573c 	.word	0x2000573c

08001a04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <DMA2_Stream3_IRQHandler+0x10>)
 8001a0a:	f002 f893 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20005884 	.word	0x20005884

08001a18 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA2_Stream5_IRQHandler+0x10>)
 8001a1e:	f002 f889 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000161c 	.word	0x2000161c

08001a2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <DMA2_Stream6_IRQHandler+0x10>)
 8001a32:	f002 f87f 	bl	8003b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20005824 	.word	0x20005824

08001a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <_sbrk+0x5c>)
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <_sbrk+0x60>)
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <_sbrk+0x64>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <_sbrk+0x64>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	; (8001aa8 <_sbrk+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d207      	bcs.n	8001a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a70:	f010 fcf0 	bl	8012454 <__errno>
 8001a74:	4603      	mov	r3, r0
 8001a76:	220c      	movs	r2, #12
 8001a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7e:	e009      	b.n	8001a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_sbrk+0x64>)
 8001a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a92:	68fb      	ldr	r3, [r7, #12]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20080000 	.word	0x20080000
 8001aa0:	00000800 	.word	0x00000800
 8001aa4:	200058e4 	.word	0x200058e4
 8001aa8:	2001a978 	.word	0x2001a978

08001aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <SystemInit+0x20>)
 8001ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <SystemInit+0x20>)
 8001ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  if (TIMER)
  {
	  htim2.Instance = TIM2;
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af4:	601a      	str	r2, [r3, #0]
	  htim2.Init.Prescaler = 1000;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001afc:	605a      	str	r2, [r3, #4]
	  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
	  htim2.Init.Period = 108000*T_PERIOD;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <MX_TIM2_Init+0xa4>)
 8001b08:	60da      	str	r2, [r3, #12]
	  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
	  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b16:	4816      	ldr	r0, [pc, #88]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b18:	f006 f8bb 	bl	8007c92 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM2_Init+0x56>
	  {
		Error_Handler();
 8001b22:	f7ff fbd7 	bl	80012d4 <Error_Handler>
	  }
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4619      	mov	r1, r3
 8001b32:	480f      	ldr	r0, [pc, #60]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b34:	f006 fa9c 	bl	8008070 <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM2_Init+0x72>
	  {
		Error_Handler();
 8001b3e:	f7ff fbc9 	bl	80012d4 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b50:	f006 fcba 	bl	80084c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x8e>
	  {
		Error_Handler();
 8001b5a:	f7ff fbbb 	bl	80012d4 <Error_Handler>
	  }
	  if (!TRIGGER_FROM_RESET)
	  {
		  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <MX_TIM2_Init+0xa0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0201 	mvn.w	r2, #1
 8001b66:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	200058e8 	.word	0x200058e8
 8001b74:	004a2860 	.word	0x004a2860

08001b78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b88:	d113      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_TIM_Base_MspInit+0x44>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <HAL_TIM_Base_MspInit+0x44>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_TIM_Base_MspInit+0x44>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	201c      	movs	r0, #28
 8001ba8:	f001 f9e7 	bl	8002f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bac:	201c      	movs	r0, #28
 8001bae:	f001 fa00 	bl	8002fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bc6:	4a15      	ldr	r2, [pc, #84]	; (8001c1c <MX_UART4_Init+0x5c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_UART4_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_UART4_Init+0x58>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_UART4_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_UART4_Init+0x58>)
 8001c04:	f006 fd0c 	bl	8008620 <HAL_UART_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c0e:	f7ff fb61 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20005934 	.word	0x20005934
 8001c1c:	40004c00 	.word	0x40004c00

08001c20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	; 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2290      	movs	r2, #144	; 0x90
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f010 fc3f 	bl	80124c4 <memset>
  if(uartHandle->Instance==UART4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a32      	ldr	r2, [pc, #200]	; (8001d14 <HAL_UART_MspInit+0xf4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d15d      	bne.n	8001d0c <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 f8c8 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c6a:	f7ff fb33 	bl	80012d4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001c74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_UART_MspInit+0xf8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4810      	ldr	r0, [pc, #64]	; (8001d1c <HAL_UART_MspInit+0xfc>)
 8001cdc:	f002 f9a0 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <HAL_UART_MspInit+0x100>)
 8001d08:	f002 f98a 	bl	8004020 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	37b8      	adds	r7, #184	; 0xb8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40004c00 	.word	0x40004c00
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40020000 	.word	0x40020000

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d40:	4c0b      	ldr	r4, [pc, #44]	; (8001d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff fead 	bl	8001aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f010 fb85 	bl	8012460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7ff f901 	bl	8000f5c <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8001d5c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	2000141c 	.word	0x2000141c
  ldr r2, =_sidata
 8001d68:	08185e68 	.word	0x08185e68
  ldr r2, =_sbss
 8001d6c:	2000141c 	.word	0x2000141c
  ldr r4, =_ebss
 8001d70:	2001a974 	.word	0x2001a974

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>

08001d76 <buf_to_float>:
 * @param      *pInSignal  points to input signal buffer
 * @param      *pOutSignal points to output signal buffer
 * @param      len         signal length
 */
void buf_to_float(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b087      	sub	sp, #28
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e012      	b.n	8001dae <buf_to_float+0x38>
  {
    pOutSignal[i] = (float32_t) pInSignal[i];
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	ee07 1a90 	vmov	s15, r1
 8001da0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da4:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3e8      	bcc.n	8001d88 <buf_to_float+0x12>
  }
}
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	; 0x30
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6899      	ldr	r1, [r3, #8]
 8001de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	68b8      	ldr	r0, [r7, #8]
 8001dec:	f00f fffa 	bl	8011de4 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	18d0      	adds	r0, r2, r3
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2100      	movs	r1, #0
 8001e02:	f010 fb5f 	bl	80124c4 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	6a3a      	ldr	r2, [r7, #32]
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	f00f fb2c 	bl	801146c <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	ed93 7a00 	vldr	s14, [r3]
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e24:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	ed93 7a00 	vldr	s14, [r3]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	3304      	adds	r3, #4
 8001e34:	edd3 7a00 	vldr	s15, [r3]
 8001e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3c:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69fa      	ldr	r2, [r7, #28]
 8001e44:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f103 0008 	add.w	r0, r3, #8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1d19      	adds	r1, r3, #4
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	461a      	mov	r2, r3
 8001e58:	f00f ff6c 	bl	8011d34 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d12c      	bne.n	8001ecc <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e76:	e023      	b.n	8001ec0 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	440b      	add	r3, r1
 8001e8a:	617a      	str	r2, [r7, #20]
 8001e8c:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001e8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9a:	db09      	blt.n	8001eb0 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001e9c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ea0:	f011 f912 	bl	80130c8 <sqrtf>
 8001ea4:	eef0 7a40 	vmov.f32	s15, s0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001eae:	e004      	b.n	8001eba <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001eb8:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3d5      	bcc.n	8001e78 <SpectrogramColumn+0xb4>
    }
  }
}
 8001ecc:	bf00      	nop
 8001ece:	3730      	adds	r7, #48	; 0x30
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b08f      	sub	sp, #60	; 0x3c
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff5a 	bl	8001dc4 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6979      	ldr	r1, [r7, #20]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fa49 	bl	80023b2 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	; 0x34
 8001f24:	e012      	b.n	8001f4c <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	edd3 6a00 	vldr	s13, [r3]
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f42:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f48:	3301      	adds	r3, #1
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d3e8      	bcc.n	8001f26 <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
 8001f58:	e014      	b.n	8001f84 <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6e:	d806      	bhi.n	8001f7e <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8001f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f7c:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f80:	3301      	adds	r3, #1
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
 8001f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3e6      	bcc.n	8001f5a <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d14a      	bne.n	800202a <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f98:	e018      	b.n	8001fcc <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	f011 f85f 	bl	801306c <log10f>
 8001fae:	eef0 7a40 	vmov.f32	s15, s0
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc2:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	3301      	adds	r3, #1
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3e2      	bcc.n	8001f9a <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd8:	e022      	b.n	8002020 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	ed93 7a00 	vldr	s14, [r3]
 8001fe6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fea:	eef1 7a67 	vneg.f32	s15, s15
 8001fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	d504      	bpl.n	8002002 <LogMelSpectrogramColumn+0x12e>
 8001ff8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ffc:	eef1 7a67 	vneg.f32	s15, s15
 8002000:	e005      	b.n	800200e <LogMelSpectrogramColumn+0x13a>
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	3301      	adds	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3d8      	bcc.n	8001fda <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8002028:	e01b      	b.n	8002062 <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
 800202e:	e014      	b.n	800205a <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	18d4      	adds	r4, r2, r3
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	f010 ffaa 	bl	8012fa0 <logf>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3301      	adds	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	429a      	cmp	r2, r3
 8002060:	d3e6      	bcc.n	8002030 <LogMelSpectrogramColumn+0x15c>
}
 8002062:	bf00      	nop
 8002064:	373c      	adds	r7, #60	; 0x3c
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}

0800206a <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b0a4      	sub	sp, #144	; 0x90
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002084:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	330c      	adds	r3, #12
 80020a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 80020c0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80020c4:	4618      	mov	r0, r3
 80020c6:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80020ca:	f000 f9c7 	bl	800245c <MelScale>
 80020ce:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 80020d2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80020d6:	4618      	mov	r0, r3
 80020d8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80020dc:	f000 f9be 	bl	800245c <MelScale>
 80020e0:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 80020e4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80020e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020f2:	3301      	adds	r3, #1
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002100:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8002104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002112:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002118:	085b      	lsrs	r3, r3, #1
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002126:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 800212a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8002130:	2300      	movs	r3, #0
 8002132:	66bb      	str	r3, [r7, #104]	; 0x68
 8002134:	e133      	b.n	800239e <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8002136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d044      	beq.n	80021c6 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 800213c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002146:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800214a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002156:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800215a:	4618      	mov	r0, r3
 800215c:	eeb0 0a67 	vmov.f32	s0, s15
 8002160:	f000 f9ec 	bl	800253c <InverseMelScale>
 8002164:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8002168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800216a:	3301      	adds	r3, #1
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002174:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002184:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002188:	4618      	mov	r0, r3
 800218a:	eeb0 0a67 	vmov.f32	s0, s15
 800218e:	f000 f9d5 	bl	800253c <InverseMelScale>
 8002192:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8002196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002198:	3302      	adds	r3, #2
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021aa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80021ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80021b6:	4618      	mov	r0, r3
 80021b8:	eeb0 0a67 	vmov.f32	s0, s15
 80021bc:	f000 f9be 	bl	800253c <InverseMelScale>
 80021c0:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 80021c4:	e02e      	b.n	8002224 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 80021c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 80021e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e6:	3301      	adds	r3, #1
 80021e8:	ee07 3a90 	vmov	s15, r3
 80021ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8002204:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002206:	3302      	adds	r3, #2
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002210:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002218:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800221c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002220:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8002224:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002228:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800222c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002230:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8002234:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002238:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800223c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002240:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8002254:	2300      	movs	r3, #0
 8002256:	667b      	str	r3, [r7, #100]	; 0x64
 8002258:	e098      	b.n	800238c <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 800225a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8002260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002272:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8002276:	e011      	b.n	800229c <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8002278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002282:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800228e:	4618      	mov	r0, r3
 8002290:	eeb0 0a67 	vmov.f32	s0, s15
 8002294:	f000 f8e2 	bl	800245c <MelScale>
 8002298:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 800229c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80022a0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80022a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a8:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 80022ac:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80022b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80022b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b8:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 80022bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c0:	eef1 6a67 	vneg.f32	s13, s15
 80022c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022cc:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 80022d0:	edd7 6a06 	vldr	s13, [r7, #24]
 80022d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022dc:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 80022e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80022e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f0:	d502      	bpl.n	80022f8 <MelFilterbank_Init+0x28e>
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	673b      	str	r3, [r7, #112]	; 0x70
 80022f6:	e001      	b.n	80022fc <MelFilterbank_Init+0x292>
      else min = upper;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 80022fc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	dd2f      	ble.n	800236a <MelFilterbank_Init+0x300>
      {
        weight = min;
 800230a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800230c:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 800230e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8002314:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002318:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800231c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002320:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002328:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 800232c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002330:	edd7 7a03 	vldr	s15, [r7, #12]
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 800233c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002340:	1d1a      	adds	r2, r3, #4
 8002342:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002346:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002348:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 800234a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002352:	d102      	bne.n	800235a <MelFilterbank_Init+0x2f0>
          start_index = j;
 8002354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800235a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800235c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8002360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002368:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800236a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002370:	4413      	add	r3, r2
 8002372:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002376:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8002378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800237e:	4413      	add	r3, r2
 8002380:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002384:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8002386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002388:	3301      	adds	r3, #1
 800238a:	667b      	str	r3, [r7, #100]	; 0x64
 800238c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002392:	429a      	cmp	r2, r3
 8002394:	f4ff af61 	bcc.w	800225a <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8002398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800239a:	3301      	adds	r3, #1
 800239c:	66bb      	str	r3, [r7, #104]	; 0x68
 800239e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80023a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a2:	429a      	cmp	r2, r3
 80023a4:	f4ff aec7 	bcc.w	8002136 <MelFilterbank_Init+0xcc>
    }
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3790      	adds	r7, #144	; 0x90
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b08d      	sub	sp, #52	; 0x34
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
 80023da:	e034      	b.n	8002446 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4413      	add	r3, r2
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80023fa:	8a7b      	ldrh	r3, [r7, #18]
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	e015      	b.n	800242c <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	4413      	add	r3, r2
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	1d1a      	adds	r2, r3, #4
 8002410:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	3301      	adds	r3, #1
 800242a:	623b      	str	r3, [r7, #32]
 800242c:	8a3b      	ldrh	r3, [r7, #16]
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d9e5      	bls.n	8002400 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800243e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	3301      	adds	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	429a      	cmp	r2, r3
 800244c:	d3c6      	bcc.n	80023dc <MelFilterbank+0x2a>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3734      	adds	r7, #52	; 0x34
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b088      	sub	sp, #32
 8002460:	af00      	add	r7, sp, #0
 8002462:	ed87 0a01 	vstr	s0, [r7, #4]
 8002466:	4603      	mov	r3, r0
 8002468:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d042      	beq.n	80024f6 <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8002476:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <MelScale+0xcc>)
 8002478:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800247a:	ed97 7a01 	vldr	s14, [r7, #4]
 800247e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002482:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002486:	ed97 7a05 	vldr	s14, [r7, #20]
 800248a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <MelScale+0xd0>)
 8002494:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8002496:	ed97 7a04 	vldr	s14, [r7, #16]
 800249a:	edd7 7a06 	vldr	s15, [r7, #24]
 800249e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80024a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024aa:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <MelScale+0xd4>)
 80024b0:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 80024b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80024b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	db15      	blt.n	80024f0 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 80024c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80024c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024d0:	eeb0 0a66 	vmov.f32	s0, s13
 80024d4:	f010 fd64 	bl	8012fa0 <logf>
 80024d8:	eef0 6a40 	vmov.f32	s13, s0
 80024dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80024e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80024e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ec:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 80024f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024f4:	e013      	b.n	800251e <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 80024f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024fa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002534 <MelScale+0xd8>
 80024fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800250a:	eeb0 0a67 	vmov.f32	s0, s15
 800250e:	f010 fd47 	bl	8012fa0 <logf>
 8002512:	eef0 7a40 	vmov.f32	s15, s0
 8002516:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002538 <MelScale+0xdc>
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800251e:	eeb0 0a67 	vmov.f32	s0, s15
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	42855555 	.word	0x42855555
 800252c:	447a0000 	.word	0x447a0000
 8002530:	3d8ccdbb 	.word	0x3d8ccdbb
 8002534:	442f0000 	.word	0x442f0000
 8002538:	448ce000 	.word	0x448ce000

0800253c <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	ed87 0a01 	vstr	s0, [r7, #4]
 8002546:	4603      	mov	r3, r0
 8002548:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d042      	beq.n	80025d6 <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <InverseMelScale+0xcc>)
 8002558:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800255a:	ed97 7a05 	vldr	s14, [r7, #20]
 800255e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	ed97 7a06 	vldr	s14, [r7, #24]
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <InverseMelScale+0xd0>)
 8002574:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 8002576:	ed97 7a04 	vldr	s14, [r7, #16]
 800257a:	edd7 7a06 	vldr	s15, [r7, #24]
 800257e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002582:	ed97 7a05 	vldr	s14, [r7, #20]
 8002586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258a:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <InverseMelScale+0xd4>)
 8002590:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 8002592:	ed97 7a01 	vldr	s14, [r7, #4]
 8002596:	edd7 7a03 	vldr	s15, [r7, #12]
 800259a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a2:	db15      	blt.n	80025d0 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 80025a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80025a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	eeb0 0a67 	vmov.f32	s0, s15
 80025bc:	f010 fc7c 	bl	8012eb8 <expf>
 80025c0:	eeb0 7a40 	vmov.f32	s14, s0
 80025c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025cc:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 80025d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80025d4:	e013      	b.n	80025fe <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 80025d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025da:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002614 <InverseMelScale+0xd8>
 80025de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025e2:	eeb0 0a47 	vmov.f32	s0, s14
 80025e6:	f010 fc67 	bl	8012eb8 <expf>
 80025ea:	eef0 7a40 	vmov.f32	s15, s0
 80025ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025f6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002618 <InverseMelScale+0xdc>
 80025fa:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80025fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002602:	3720      	adds	r7, #32
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	42855555 	.word	0x42855555
 800260c:	447a0000 	.word	0x447a0000
 8002610:	3d8ccdbb 	.word	0x3d8ccdbb
 8002614:	448ce000 	.word	0x448ce000
 8002618:	442f0000 	.word	0x442f0000
 800261c:	00000000 	.word	0x00000000

08002620 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

  switch (type)
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d01c      	beq.n	8002672 <Window_Init+0x52>
 8002638:	2b02      	cmp	r3, #2
 800263a:	dc25      	bgt.n	8002688 <Window_Init+0x68>
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <Window_Init+0x26>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d00b      	beq.n	800265c <Window_Init+0x3c>
 8002644:	e020      	b.n	8002688 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 8002646:	ed9f 2b16 	vldr	d2, [pc, #88]	; 80026a0 <Window_Init+0x80>
 800264a:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800264e:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f837 	bl	80026c8 <cosine_sum_window_create>
      break;
 800265a:	e019      	b.n	8002690 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800265c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 80026a0 <Window_Init+0x80>
 8002660:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80026a8 <Window_Init+0x88>
 8002664:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80026b0 <Window_Init+0x90>
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f82c 	bl	80026c8 <cosine_sum_window_create>
      break;
 8002670:	e00e      	b.n	8002690 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8002672:	ed9f 2b11 	vldr	d2, [pc, #68]	; 80026b8 <Window_Init+0x98>
 8002676:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800267a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80026c0 <Window_Init+0xa0>
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f821 	bl	80026c8 <cosine_sum_window_create>
      break;
 8002686:	e003      	b.n	8002690 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8002688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	bf00      	nop
  }

  return status;
 8002690:	697b      	ldr	r3, [r7, #20]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	f3af 8000 	nop.w
	...
 80026a8:	d70a3d71 	.word	0xd70a3d71
 80026ac:	3fdd70a3 	.word	0x3fdd70a3
 80026b0:	147ae148 	.word	0x147ae148
 80026b4:	3fe147ae 	.word	0x3fe147ae
 80026b8:	47ae147b 	.word	0x47ae147b
 80026bc:	3fb47ae1 	.word	0x3fb47ae1
 80026c0:	ae147ae1 	.word	0xae147ae1
 80026c4:	3fdae147 	.word	0x3fdae147

080026c8 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	ed2d 8b02 	vpush	{d8}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	61f8      	str	r0, [r7, #28]
 80026d4:	61b9      	str	r1, [r7, #24]
 80026d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80026da:	ed87 1b02 	vstr	d1, [r7, #8]
 80026de:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e043      	b.n	8002770 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80026f2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002788 <cosine_sum_window_create+0xc0>
 80026f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002704:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002708:	eeb0 0b45 	vmov.f64	d0, d5
 800270c:	f010 fb88 	bl	8012e20 <cos>
 8002710:	eeb0 6b40 	vmov.f64	d6, d0
 8002714:	ed97 7b02 	vldr	d7, [r7, #8]
 8002718:	ee26 7b07 	vmul.f64	d7, d6, d7
 800271c:	ed97 6b04 	vldr	d6, [r7, #16]
 8002720:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800272e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002790 <cosine_sum_window_create+0xc8>
 8002732:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	ee07 3a90 	vmov	s15, r3
 800273c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002740:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002744:	eeb0 0b45 	vmov.f64	d0, d5
 8002748:	f010 fb6a 	bl	8012e20 <cos>
 800274c:	eeb0 6b40 	vmov.f64	d6, d0
 8002750:	ed97 7b00 	vldr	d7, [r7]
 8002754:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002758:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	1d1a      	adds	r2, r3, #4
 8002760:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8002762:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 8002766:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	3301      	adds	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
 8002770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3b7      	bcc.n	80026e8 <cosine_sum_window_create+0x20>
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	ecbd 8b02 	vpop	{d8}
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	54442d18 	.word	0x54442d18
 800278c:	401921fb 	.word	0x401921fb
 8002790:	54442d18 	.word	0x54442d18
 8002794:	402921fb 	.word	0x402921fb

08002798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279c:	2003      	movs	r0, #3
 800279e:	f000 fbe1 	bl	8002f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027a2:	200f      	movs	r0, #15
 80027a4:	f000 f806 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a8:	f7ff f8a4 	bl	80018f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fbfb 	bl	8002fce <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f0:	f000 fbc3 	bl	8002f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000000 	.word	0x20000000
 800280c:	20000008 	.word	0x20000008
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_IncTick+0x20>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x24>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_IncTick+0x24>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000008 	.word	0x20000008
 8002838:	200059bc 	.word	0x200059bc

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	200059bc 	.word	0x200059bc

08002854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff ffee 	bl	800283c <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286c:	d005      	beq.n	800287a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <HAL_Delay+0x44>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800287a:	bf00      	nop
 800287c:	f7ff ffde 	bl	800283c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f7      	bhi.n	800287c <HAL_Delay+0x28>
  {
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008

0800289c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e031      	b.n	8002916 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fd ff4e 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_ADC_Init+0x84>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	f043 0202 	orr.w	r2, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f970 	bl	8002bd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f023 0303 	bic.w	r3, r3, #3
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
 8002906:	e001      	b.n	800290c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	ffffeefd 	.word	0xffffeefd

08002924 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x1c>
 800293c:	2302      	movs	r3, #2
 800293e:	e136      	b.n	8002bae <HAL_ADC_ConfigChannel+0x28a>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2b09      	cmp	r3, #9
 800294e:	d93a      	bls.n	80029c6 <HAL_ADC_ConfigChannel+0xa2>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002958:	d035      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68d9      	ldr	r1, [r3, #12]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	b29b      	uxth	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	3b1e      	subs	r3, #30
 8002970:	2207      	movs	r2, #7
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	400a      	ands	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a8d      	ldr	r2, [pc, #564]	; (8002bbc <HAL_ADC_ConfigChannel+0x298>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	061a      	lsls	r2, r3, #24
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800299e:	e035      	b.n	8002a0c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4403      	add	r3, r0
 80029b8:	3b1e      	subs	r3, #30
 80029ba:	409a      	lsls	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029c4:	e022      	b.n	8002a0c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	2207      	movs	r2, #7
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43da      	mvns	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	400a      	ands	r2, r1
 80029e8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6919      	ldr	r1, [r3, #16]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	4603      	mov	r3, r0
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4403      	add	r3, r0
 8002a02:	409a      	lsls	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b06      	cmp	r3, #6
 8002a12:	d824      	bhi.n	8002a5e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	3b05      	subs	r3, #5
 8002a26:	221f      	movs	r2, #31
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	400a      	ands	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3b05      	subs	r3, #5
 8002a50:	fa00 f203 	lsl.w	r2, r0, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5c:	e04c      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d824      	bhi.n	8002ab0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	3b23      	subs	r3, #35	; 0x23
 8002a78:	221f      	movs	r2, #31
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	400a      	ands	r2, r1
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3b23      	subs	r3, #35	; 0x23
 8002aa2:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
 8002aae:	e023      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b41      	subs	r3, #65	; 0x41
 8002ac2:	221f      	movs	r2, #31
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	400a      	ands	r2, r1
 8002ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b41      	subs	r3, #65	; 0x41
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a30      	ldr	r2, [pc, #192]	; (8002bc0 <HAL_ADC_ConfigChannel+0x29c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d10a      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1f4>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b0a:	d105      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b12:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b16:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <HAL_ADC_ConfigChannel+0x29c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10f      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x21e>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d10b      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b34:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b40:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_ADC_ConfigChannel+0x29c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d12b      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x280>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_ADC_ConfigChannel+0x298>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <HAL_ADC_ConfigChannel+0x23a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b11      	cmp	r3, #17
 8002b5c:	d122      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b5e:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b68:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b74:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_ADC_ConfigChannel+0x298>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_ADC_ConfigChannel+0x2a8>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0c9a      	lsrs	r2, r3, #18
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b96:	e002      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f9      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	10000012 	.word	0x10000012
 8002bc0:	40012000 	.word	0x40012000
 8002bc4:	40012300 	.word	0x40012300
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	431bde83 	.word	0x431bde83

08002bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bd8:	4b78      	ldr	r3, [pc, #480]	; (8002dbc <ADC_Init+0x1ec>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4a77      	ldr	r2, [pc, #476]	; (8002dbc <ADC_Init+0x1ec>)
 8002bde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002be2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002be4:	4b75      	ldr	r3, [pc, #468]	; (8002dbc <ADC_Init+0x1ec>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4973      	ldr	r1, [pc, #460]	; (8002dbc <ADC_Init+0x1ec>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <ADC_Init+0x1f0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6899      	ldr	r1, [r3, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	e00f      	b.n	8002cca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0202 	bic.w	r2, r2, #2
 8002cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6899      	ldr	r1, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	005a      	lsls	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01b      	beq.n	8002d30 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	3b01      	subs	r3, #1
 8002d24:	035a      	lsls	r2, r3, #13
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	e007      	b.n	8002d40 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	051a      	lsls	r2, r3, #20
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6899      	ldr	r1, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d82:	025a      	lsls	r2, r3, #9
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	029a      	lsls	r2, r3, #10
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	40012300 	.word	0x40012300
 8002dc0:	0f000001 	.word	0x0f000001

08002dc4 <__NVIC_SetPriorityGrouping>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <__NVIC_SetPriorityGrouping+0x40>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x40>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00
 8002e08:	05fa0000 	.word	0x05fa0000

08002e0c <__NVIC_GetPriorityGrouping>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <__NVIC_GetPriorityGrouping+0x18>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 0307 	and.w	r3, r3, #7
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_EnableIRQ>:
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	db0b      	blt.n	8002e52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4907      	ldr	r1, [pc, #28]	; (8002e60 <__NVIC_EnableIRQ+0x38>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2001      	movs	r0, #1
 8002e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f30:	d301      	bcc.n	8002f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00f      	b.n	8002f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <SysTick_Config+0x40>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3e:	210f      	movs	r1, #15
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f44:	f7ff ff8e 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <SysTick_Config+0x40>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <SysTick_Config+0x40>)
 8002f50:	2207      	movs	r2, #7
 8002f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	e000e010 	.word	0xe000e010

08002f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff29 	bl	8002dc4 <__NVIC_SetPriorityGrouping>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f8c:	f7ff ff3e 	bl	8002e0c <__NVIC_GetPriorityGrouping>
 8002f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff ff8e 	bl	8002eb8 <NVIC_EncodePriority>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff5d 	bl	8002e64 <__NVIC_SetPriority>
}
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff31 	bl	8002e28 <__NVIC_EnableIRQ>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ffa2 	bl	8002f20 <SysTick_Config>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e054      	b.n	80030a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	7f5b      	ldrb	r3, [r3, #29]
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fbe8 	bl	80007e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	791b      	ldrb	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_CRC_Init+0xc4>)
 8003024:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0218 	bic.w	r2, r2, #24
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	e00c      	b.n	8003052 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	461a      	mov	r2, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f834 	bl	80030b0 <HAL_CRCEx_Polynomial_Set>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e028      	b.n	80030a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	795b      	ldrb	r3, [r3, #5]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003062:	611a      	str	r2, [r3, #16]
 8003064:	e004      	b.n	8003070 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6912      	ldr	r2, [r2, #16]
 800306e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	04c11db7 	.word	0x04c11db7

080030b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80030c0:	231f      	movs	r3, #31
 80030c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80030c4:	bf00      	nop
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1e5a      	subs	r2, r3, #1
 80030ca:	613a      	str	r2, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b18      	cmp	r3, #24
 80030e8:	d846      	bhi.n	8003178 <HAL_CRCEx_Polynomial_Set+0xc8>
 80030ea:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f0:	0800317f 	.word	0x0800317f
 80030f4:	08003179 	.word	0x08003179
 80030f8:	08003179 	.word	0x08003179
 80030fc:	08003179 	.word	0x08003179
 8003100:	08003179 	.word	0x08003179
 8003104:	08003179 	.word	0x08003179
 8003108:	08003179 	.word	0x08003179
 800310c:	08003179 	.word	0x08003179
 8003110:	0800316d 	.word	0x0800316d
 8003114:	08003179 	.word	0x08003179
 8003118:	08003179 	.word	0x08003179
 800311c:	08003179 	.word	0x08003179
 8003120:	08003179 	.word	0x08003179
 8003124:	08003179 	.word	0x08003179
 8003128:	08003179 	.word	0x08003179
 800312c:	08003179 	.word	0x08003179
 8003130:	08003161 	.word	0x08003161
 8003134:	08003179 	.word	0x08003179
 8003138:	08003179 	.word	0x08003179
 800313c:	08003179 	.word	0x08003179
 8003140:	08003179 	.word	0x08003179
 8003144:	08003179 	.word	0x08003179
 8003148:	08003179 	.word	0x08003179
 800314c:	08003179 	.word	0x08003179
 8003150:	08003155 	.word	0x08003155
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b06      	cmp	r3, #6
 8003158:	d913      	bls.n	8003182 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800315e:	e010      	b.n	8003182 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b07      	cmp	r3, #7
 8003164:	d90f      	bls.n	8003186 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800316a:	e00c      	b.n	8003186 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	d90b      	bls.n	800318a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003176:	e008      	b.n	800318a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	75fb      	strb	r3, [r7, #23]
      break;
 800317c:	e006      	b.n	800318c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800317e:	bf00      	nop
 8003180:	e004      	b.n	800318c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003182:	bf00      	nop
 8003184:	e002      	b.n	800318c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003186:	bf00      	nop
 8003188:	e000      	b.n	800318c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800318a:	bf00      	nop
  }
  if (status == HAL_OK)
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10d      	bne.n	80031ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f023 0118 	bic.w	r1, r3, #24
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0ac      	b.n	8003328 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fadc 	bl	8003790 <DFSDM_GetChannelFromInstance>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a55      	ldr	r2, [pc, #340]	; (8003330 <HAL_DFSDM_ChannelInit+0x174>)
 80031dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e09f      	b.n	8003328 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7fd fcdd 	bl	8000ba8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_DFSDM_ChannelInit+0x178>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_DFSDM_ChannelInit+0x178>)
 80031f6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80031f8:	4b4e      	ldr	r3, [pc, #312]	; (8003334 <HAL_DFSDM_ChannelInit+0x178>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d125      	bne.n	800324c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003200:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800320a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4948      	ldr	r1, [pc, #288]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a46      	ldr	r2, [pc, #280]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003220:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003224:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	791b      	ldrb	r3, [r3, #4]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 800322e:	4b42      	ldr	r3, [pc, #264]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	493f      	ldr	r1, [pc, #252]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003240:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <HAL_DFSDM_ChannelInit+0x17c>)
 8003246:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800324a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800325a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800326a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003270:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 020f 	bic.w	r2, r2, #15
 8003288:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80032b0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	3b01      	subs	r3, #1
 80032c2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 0207 	and.w	r2, r2, #7
 80032dc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003308:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f000 fa3a 	bl	8003790 <DFSDM_GetChannelFromInstance>
 800331c:	4602      	mov	r2, r0
 800331e:	4904      	ldr	r1, [pc, #16]	; (8003330 <HAL_DFSDM_ChannelInit+0x174>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	200059c4 	.word	0x200059c4
 8003334:	200059c0 	.word	0x200059c0
 8003338:	40017400 	.word	0x40017400

0800333c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e0c6      	b.n	80034dc <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a64      	ldr	r2, [pc, #400]	; (80034e4 <HAL_DFSDM_FilterInit+0x1a8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d109      	bne.n	800336c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800335c:	2b01      	cmp	r3, #1
 800335e:	d003      	beq.n	8003368 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b7      	b.n	80034dc <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd fb27 	bl	80009d8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003398:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	7a1b      	ldrb	r3, [r3, #8]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d108      	bne.n	80033b4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e007      	b.n	80033c4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80033c2:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7a5b      	ldrb	r3, [r3, #9]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d108      	bne.n	80033de <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e007      	b.n	80033ee <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80033ec:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <HAL_DFSDM_FilterInit+0x1ac>)
 80033fa:	400b      	ands	r3, r1
 80033fc:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d108      	bne.n	8003418 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7c1b      	ldrb	r3, [r3, #16]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d108      	bne.n	8003432 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0210 	orr.w	r2, r2, #16
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e007      	b.n	8003442 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0210 	bic.w	r2, r2, #16
 8003440:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7c5b      	ldrb	r3, [r3, #17]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d108      	bne.n	800345c <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0220 	orr.w	r2, r2, #32
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0220 	bic.w	r2, r2, #32
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6959      	ldr	r1, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_DFSDM_FilterInit+0x1b0>)
 8003478:	400b      	ands	r3, r1
 800347a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6959      	ldr	r1, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	3b01      	subs	r3, #1
 800348c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800348e:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003496:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7c1a      	ldrb	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0201 	orr.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40017500 	.word	0x40017500
 80034e8:	ffff80f7 	.word	0xffff80f7
 80034ec:	1c00ff00 	.word	0x1c00ff00

080034f0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d02c      	beq.n	8003564 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003510:	2bff      	cmp	r3, #255	; 0xff
 8003512:	d027      	beq.n	8003564 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6819      	ldr	r1, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b16      	ldr	r3, [pc, #88]	; (8003578 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8003520:	400b      	ands	r3, r1
 8003522:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003538:	431a      	orrs	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	e00a      	b.n	800355c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	631a      	str	r2, [r3, #48]	; 0x30
 8003562:	e001      	b.n	8003568 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003568:	7dfb      	ldrb	r3, [r7, #23]
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	f8fbffff 	.word	0xf8fbffff

0800357c <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	d016      	beq.n	80035cc <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	b292      	uxth	r2, r2
 80035a6:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80035a8:	6838      	ldr	r0, [r7, #0]
 80035aa:	f000 f8d2 	bl	8003752 <DFSDM_GetInjChannelsNbr>
 80035ae:	4602      	mov	r2, r0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	e000      	b.n	80035c6 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80035c4:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6493      	str	r3, [r2, #72]	; 0x48
 80035ca:	e001      	b.n	80035d0 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
 80035fc:	e066      	b.n	80036cc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360c:	d002      	beq.n	8003614 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
 8003612:	e05b      	b.n	80036cc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10e      	bne.n	800363a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d002      	beq.n	800363a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	75fb      	strb	r3, [r7, #23]
 8003638:	e048      	b.n	80036cc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10c      	bne.n	800365c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003646:	2b00      	cmp	r3, #0
 8003648:	d108      	bne.n	800365c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003654:	d102      	bne.n	800365c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
 800365a:	e037      	b.n	80036cc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d004      	beq.n	8003670 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800366c:	2b03      	cmp	r3, #3
 800366e:	d12b      	bne.n	80036c8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003676:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800367e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368a:	d101      	bne.n	8003690 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800368e:	e000      	b.n	8003692 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003690:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	331c      	adds	r3, #28
 80036a2:	4619      	mov	r1, r3
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f000 f9c2 	bl	8003a30 <HAL_DMA_Start_IT>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	22ff      	movs	r2, #255	; 0xff
 80036b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80036be:	e005      	b.n	80036cc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f8b1 	bl	8003828 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80036c6:	e001      	b.n	80036cc <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	08003715 	.word	0x08003715
 80036dc:	08003731 	.word	0x08003731
 80036e0:	080036f9 	.word	0x080036f9

080036e4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003704:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f009 fcee 	bl	800d0e8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800370c:	bf00      	nop
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f009 fcfc 	bl	800d120 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2203      	movs	r2, #3
 8003742:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff ffcd 	bl	80036e4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	b29b      	uxth	r3, r3
 8003762:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8003764:	e00a      	b.n	800377c <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3301      	adds	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f1      	bne.n	8003766 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <DFSDM_GetChannelFromInstance+0x7c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d102      	bne.n	80037a6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e02b      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a19      	ldr	r2, [pc, #100]	; (8003810 <DFSDM_GetChannelFromInstance+0x80>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d102      	bne.n	80037b4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e024      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <DFSDM_GetChannelFromInstance+0x84>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d102      	bne.n	80037c2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80037bc:	2302      	movs	r3, #2
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	e01d      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <DFSDM_GetChannelFromInstance+0x88>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d102      	bne.n	80037d0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80037ca:	2303      	movs	r3, #3
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	e016      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <DFSDM_GetChannelFromInstance+0x8c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d102      	bne.n	80037de <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80037d8:	2304      	movs	r3, #4
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e00f      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <DFSDM_GetChannelFromInstance+0x90>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d102      	bne.n	80037ec <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80037e6:	2305      	movs	r3, #5
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e008      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <DFSDM_GetChannelFromInstance+0x94>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d102      	bne.n	80037fa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80037f4:	2306      	movs	r3, #6
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e001      	b.n	80037fe <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80037fa:	2307      	movs	r3, #7
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80037fe:	68fb      	ldr	r3, [r7, #12]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40017400 	.word	0x40017400
 8003810:	40017420 	.word	0x40017420
 8003814:	40017440 	.word	0x40017440
 8003818:	40017460 	.word	0x40017460
 800381c:	40017480 	.word	0x40017480
 8003820:	400174a0 	.word	0x400174a0
 8003824:	400174c0 	.word	0x400174c0

08003828 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e033      	b.n	80038b2 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0201 	bic.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003868:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003880:	2b03      	cmp	r3, #3
 8003882:	d116      	bne.n	80038b2 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0202 	orr.w	r2, r2, #2
 800389a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d102      	bne.n	80038ac <DFSDM_RegConvStart+0x84>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	e000      	b.n	80038ae <DFSDM_RegConvStart+0x86>
 80038ac:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <DFSDM_RegConvStart+0x98>
 80038bc:	2202      	movs	r2, #2
 80038be:	e000      	b.n	80038c2 <DFSDM_RegConvStart+0x9a>
 80038c0:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7fe ffac 	bl	800283c <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e099      	b.n	8003a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003910:	e00f      	b.n	8003932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003912:	f7fe ff93 	bl	800283c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b05      	cmp	r3, #5
 800391e:	d908      	bls.n	8003932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2203      	movs	r2, #3
 800392a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e078      	b.n	8003a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e8      	bne.n	8003912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <HAL_DMA_Init+0x158>)
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	4313      	orrs	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b04      	cmp	r3, #4
 800398a:	d107      	bne.n	800399c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4313      	orrs	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0307 	bic.w	r3, r3, #7
 80039b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d117      	bne.n	80039f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 faa5 	bl	8003f28 <DMA_CheckFifoParam>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	; 0x40
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039f2:	2301      	movs	r3, #1
 80039f4:	e016      	b.n	8003a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa5c 	bl	8003ebc <DMA_CalcBaseAndBitshift>
 8003a04:	4603      	mov	r3, r0
 8003a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	223f      	movs	r2, #63	; 0x3f
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	e010803f 	.word	0xe010803f

08003a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
 8003a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_DMA_Start_IT+0x26>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e048      	b.n	8003ae8 <HAL_DMA_Start_IT+0xb8>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d137      	bne.n	8003ada <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9ee 	bl	8003e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	223f      	movs	r2, #63	; 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0216 	orr.w	r2, r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0208 	orr.w	r2, r2, #8
 8003ac6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e005      	b.n	8003ae6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00c      	b.n	8003b28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2205      	movs	r2, #5
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b40:	4b8e      	ldr	r3, [pc, #568]	; (8003d7c <HAL_DMA_IRQHandler+0x248>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a8e      	ldr	r2, [pc, #568]	; (8003d80 <HAL_DMA_IRQHandler+0x24c>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	2208      	movs	r2, #8
 8003b60:	409a      	lsls	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01a      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d013      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0204 	bic.w	r2, r2, #4
 8003b86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	2208      	movs	r2, #8
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	f043 0201 	orr.w	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f043 0202 	orr.w	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	2204      	movs	r2, #4
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d012      	beq.n	8003c0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	f043 0204 	orr.w	r2, r3, #4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	2210      	movs	r2, #16
 8003c12:	409a      	lsls	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d043      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d03c      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	2210      	movs	r2, #16
 8003c30:	409a      	lsls	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d024      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
 8003c62:	e01f      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01b      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
 8003c74:	e016      	b.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0208 	bic.w	r2, r2, #8
 8003c92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca8:	2220      	movs	r2, #32
 8003caa:	409a      	lsls	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 808f 	beq.w	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8087 	beq.w	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	2220      	movs	r2, #32
 8003ccc:	409a      	lsls	r2, r3
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b05      	cmp	r3, #5
 8003cdc:	d136      	bne.n	8003d4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0216 	bic.w	r2, r2, #22
 8003cec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x1da>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0208 	bic.w	r2, r2, #8
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	223f      	movs	r2, #63	; 0x3f
 8003d24:	409a      	lsls	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d07e      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4798      	blx	r3
        }
        return;
 8003d4a:	e079      	b.n	8003e40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01d      	beq.n	8003d96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10d      	bne.n	8003d84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d031      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
 8003d78:	e02c      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000
 8003d80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d023      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
 8003d94:	e01e      	b.n	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10f      	bne.n	8003dc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0210 	bic.w	r2, r2, #16
 8003db2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d032      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2205      	movs	r2, #5
 8003dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0201 	bic.w	r2, r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	3301      	adds	r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d307      	bcc.n	8003e1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f2      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x2cc>
 8003e1a:	e000      	b.n	8003e1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	4798      	blx	r3
 8003e3e:	e000      	b.n	8003e42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e40:	bf00      	nop
    }
  }
}
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d108      	bne.n	8003ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e9e:	e007      	b.n	8003eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	3b10      	subs	r3, #16
 8003ecc:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <DMA_CalcBaseAndBitshift+0x60>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <DMA_CalcBaseAndBitshift+0x64>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d908      	bls.n	8003efc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	; (8003f24 <DMA_CalcBaseAndBitshift+0x68>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	1d1a      	adds	r2, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	659a      	str	r2, [r3, #88]	; 0x58
 8003efa:	e006      	b.n	8003f0a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <DMA_CalcBaseAndBitshift+0x68>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	aaaaaaab 	.word	0xaaaaaaab
 8003f20:	08013e44 	.word	0x08013e44
 8003f24:	fffffc00 	.word	0xfffffc00

08003f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11f      	bne.n	8003f82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d856      	bhi.n	8003ff6 <DMA_CheckFifoParam+0xce>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <DMA_CheckFifoParam+0x28>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f61 	.word	0x08003f61
 8003f54:	08003f73 	.word	0x08003f73
 8003f58:	08003f61 	.word	0x08003f61
 8003f5c:	08003ff7 	.word	0x08003ff7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d046      	beq.n	8003ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f70:	e043      	b.n	8003ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f7a:	d140      	bne.n	8003ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f80:	e03d      	b.n	8003ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8a:	d121      	bne.n	8003fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d837      	bhi.n	8004002 <DMA_CheckFifoParam+0xda>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <DMA_CheckFifoParam+0x70>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fa9 	.word	0x08003fa9
 8003f9c:	08003faf 	.word	0x08003faf
 8003fa0:	08003fa9 	.word	0x08003fa9
 8003fa4:	08003fc1 	.word	0x08003fc1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e030      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d025      	beq.n	8004006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbe:	e022      	b.n	8004006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fc8:	d11f      	bne.n	800400a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fce:	e01c      	b.n	800400a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d903      	bls.n	8003fde <DMA_CheckFifoParam+0xb6>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d003      	beq.n	8003fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fdc:	e018      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe2:	e015      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00e      	beq.n	800400e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff4:	e00b      	b.n	800400e <DMA_CheckFifoParam+0xe6>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e00a      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e008      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffe:	bf00      	nop
 8004000:	e006      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      break;
 8004002:	bf00      	nop
 8004004:	e004      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      break;
 8004006:	bf00      	nop
 8004008:	e002      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      break;   
 800400a:	bf00      	nop
 800400c:	e000      	b.n	8004010 <DMA_CheckFifoParam+0xe8>
      break;
 800400e:	bf00      	nop
    }
  } 
  
  return status; 
 8004010:	7bfb      	ldrb	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop

08004020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004036:	2300      	movs	r3, #0
 8004038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	e175      	b.n	800432c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004040:	2201      	movs	r2, #1
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	429a      	cmp	r2, r3
 800405a:	f040 8164 	bne.w	8004326 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b01      	cmp	r3, #1
 8004068:	d005      	beq.n	8004076 <HAL_GPIO_Init+0x56>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d130      	bne.n	80040d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	2203      	movs	r2, #3
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	4013      	ands	r3, r2
 800408c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ac:	2201      	movs	r2, #1
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 0201 	and.w	r2, r3, #1
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d017      	beq.n	8004114 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d123      	bne.n	8004168 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800412c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	220f      	movs	r2, #15
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	08da      	lsrs	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3208      	adds	r2, #8
 8004162:	69b9      	ldr	r1, [r7, #24]
 8004164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	2203      	movs	r2, #3
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f003 0203 	and.w	r2, r3, #3
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80be 	beq.w	8004326 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041aa:	4b66      	ldr	r3, [pc, #408]	; (8004344 <HAL_GPIO_Init+0x324>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	4a65      	ldr	r2, [pc, #404]	; (8004344 <HAL_GPIO_Init+0x324>)
 80041b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041b4:	6453      	str	r3, [r2, #68]	; 0x44
 80041b6:	4b63      	ldr	r3, [pc, #396]	; (8004344 <HAL_GPIO_Init+0x324>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80041c2:	4a61      	ldr	r2, [pc, #388]	; (8004348 <HAL_GPIO_Init+0x328>)
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	3302      	adds	r3, #2
 80041ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	220f      	movs	r2, #15
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	4013      	ands	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a58      	ldr	r2, [pc, #352]	; (800434c <HAL_GPIO_Init+0x32c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d037      	beq.n	800425e <HAL_GPIO_Init+0x23e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_GPIO_Init+0x330>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_GPIO_Init+0x23a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_GPIO_Init+0x334>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d02b      	beq.n	8004256 <HAL_GPIO_Init+0x236>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a55      	ldr	r2, [pc, #340]	; (8004358 <HAL_GPIO_Init+0x338>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d025      	beq.n	8004252 <HAL_GPIO_Init+0x232>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a54      	ldr	r2, [pc, #336]	; (800435c <HAL_GPIO_Init+0x33c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01f      	beq.n	800424e <HAL_GPIO_Init+0x22e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a53      	ldr	r2, [pc, #332]	; (8004360 <HAL_GPIO_Init+0x340>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d019      	beq.n	800424a <HAL_GPIO_Init+0x22a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a52      	ldr	r2, [pc, #328]	; (8004364 <HAL_GPIO_Init+0x344>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <HAL_GPIO_Init+0x226>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a51      	ldr	r2, [pc, #324]	; (8004368 <HAL_GPIO_Init+0x348>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00d      	beq.n	8004242 <HAL_GPIO_Init+0x222>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a50      	ldr	r2, [pc, #320]	; (800436c <HAL_GPIO_Init+0x34c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <HAL_GPIO_Init+0x21e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a4f      	ldr	r2, [pc, #316]	; (8004370 <HAL_GPIO_Init+0x350>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_GPIO_Init+0x21a>
 8004236:	2309      	movs	r3, #9
 8004238:	e012      	b.n	8004260 <HAL_GPIO_Init+0x240>
 800423a:	230a      	movs	r3, #10
 800423c:	e010      	b.n	8004260 <HAL_GPIO_Init+0x240>
 800423e:	2308      	movs	r3, #8
 8004240:	e00e      	b.n	8004260 <HAL_GPIO_Init+0x240>
 8004242:	2307      	movs	r3, #7
 8004244:	e00c      	b.n	8004260 <HAL_GPIO_Init+0x240>
 8004246:	2306      	movs	r3, #6
 8004248:	e00a      	b.n	8004260 <HAL_GPIO_Init+0x240>
 800424a:	2305      	movs	r3, #5
 800424c:	e008      	b.n	8004260 <HAL_GPIO_Init+0x240>
 800424e:	2304      	movs	r3, #4
 8004250:	e006      	b.n	8004260 <HAL_GPIO_Init+0x240>
 8004252:	2303      	movs	r3, #3
 8004254:	e004      	b.n	8004260 <HAL_GPIO_Init+0x240>
 8004256:	2302      	movs	r3, #2
 8004258:	e002      	b.n	8004260 <HAL_GPIO_Init+0x240>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_GPIO_Init+0x240>
 800425e:	2300      	movs	r3, #0
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	f002 0203 	and.w	r2, r2, #3
 8004266:	0092      	lsls	r2, r2, #2
 8004268:	4093      	lsls	r3, r2
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4313      	orrs	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004270:	4935      	ldr	r1, [pc, #212]	; (8004348 <HAL_GPIO_Init+0x328>)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	089b      	lsrs	r3, r3, #2
 8004276:	3302      	adds	r3, #2
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800427e:	4b3d      	ldr	r3, [pc, #244]	; (8004374 <HAL_GPIO_Init+0x354>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042a2:	4a34      	ldr	r2, [pc, #208]	; (8004374 <HAL_GPIO_Init+0x354>)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <HAL_GPIO_Init+0x354>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042cc:	4a29      	ldr	r2, [pc, #164]	; (8004374 <HAL_GPIO_Init+0x354>)
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80042d2:	4b28      	ldr	r3, [pc, #160]	; (8004374 <HAL_GPIO_Init+0x354>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042f6:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <HAL_GPIO_Init+0x354>)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042fc:	4b1d      	ldr	r3, [pc, #116]	; (8004374 <HAL_GPIO_Init+0x354>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <HAL_GPIO_Init+0x354>)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3301      	adds	r3, #1
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	f67f ae86 	bls.w	8004040 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	3724      	adds	r7, #36	; 0x24
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800
 8004348:	40013800 	.word	0x40013800
 800434c:	40020000 	.word	0x40020000
 8004350:	40020400 	.word	0x40020400
 8004354:	40020800 	.word	0x40020800
 8004358:	40020c00 	.word	0x40020c00
 800435c:	40021000 	.word	0x40021000
 8004360:	40021400 	.word	0x40021400
 8004364:	40021800 	.word	0x40021800
 8004368:	40021c00 	.word	0x40021c00
 800436c:	40022000 	.word	0x40022000
 8004370:	40022400 	.word	0x40022400
 8004374:	40013c00 	.word	0x40013c00

08004378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b8:	787b      	ldrb	r3, [r7, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80043c4:	e003      	b.n	80043ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	041a      	lsls	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	619a      	str	r2, [r3, #24]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	4013      	ands	r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d006      	beq.n	8004400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043f2:	4a05      	ldr	r2, [pc, #20]	; (8004408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043f8:	88fb      	ldrh	r3, [r7, #6]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f009 f822 	bl	800d444 <HAL_GPIO_EXTI_Callback>
  }
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40013c00 	.word	0x40013c00

0800440c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40007000 	.word	0x40007000

0800442c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800443c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004440:	6413      	str	r3, [r2, #64]	; 0x40
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800444e:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800445a:	f7fe f9ef 	bl	800283c <HAL_GetTick>
 800445e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004460:	e009      	b.n	8004476 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004462:	f7fe f9eb 	bl	800283c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004470:	d901      	bls.n	8004476 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e022      	b.n	80044bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004476:	4b14      	ldr	r3, [pc, #80]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800447e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004482:	d1ee      	bne.n	8004462 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800448a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800448e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004490:	f7fe f9d4 	bl	800283c <HAL_GetTick>
 8004494:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004496:	e009      	b.n	80044ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004498:	f7fe f9d0 	bl	800283c <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a6:	d901      	bls.n	80044ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e007      	b.n	80044bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b8:	d1ee      	bne.n	8004498 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	40007000 	.word	0x40007000

080044cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e29b      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8087 	beq.w	80045fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f0:	4b96      	ldr	r3, [pc, #600]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00c      	beq.n	8004516 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fc:	4b93      	ldr	r3, [pc, #588]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d112      	bne.n	800452e <HAL_RCC_OscConfig+0x62>
 8004508:	4b90      	ldr	r3, [pc, #576]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004514:	d10b      	bne.n	800452e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004516:	4b8d      	ldr	r3, [pc, #564]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d06c      	beq.n	80045fc <HAL_RCC_OscConfig+0x130>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d168      	bne.n	80045fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e275      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004536:	d106      	bne.n	8004546 <HAL_RCC_OscConfig+0x7a>
 8004538:	4b84      	ldr	r3, [pc, #528]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a83      	ldr	r2, [pc, #524]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e02e      	b.n	80045a4 <HAL_RCC_OscConfig+0xd8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0x9c>
 800454e:	4b7f      	ldr	r3, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7e      	ldr	r2, [pc, #504]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b7c      	ldr	r3, [pc, #496]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7b      	ldr	r2, [pc, #492]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e01d      	b.n	80045a4 <HAL_RCC_OscConfig+0xd8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0xc0>
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a75      	ldr	r2, [pc, #468]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b73      	ldr	r3, [pc, #460]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a72      	ldr	r2, [pc, #456]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e00b      	b.n	80045a4 <HAL_RCC_OscConfig+0xd8>
 800458c:	4b6f      	ldr	r3, [pc, #444]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6e      	ldr	r2, [pc, #440]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b6c      	ldr	r3, [pc, #432]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6b      	ldr	r2, [pc, #428]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800459e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe f946 	bl	800283c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fe f942 	bl	800283c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e229      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0xe8>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe f932 	bl	800283c <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fe f92e 	bl	800283c <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e215      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x110>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d069      	beq.n	80046de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460a:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b4d      	ldr	r3, [pc, #308]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b08      	cmp	r3, #8
 8004620:	d11c      	bne.n	800465c <HAL_RCC_OscConfig+0x190>
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x17a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e1e9      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	493d      	ldr	r1, [pc, #244]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465a:	e040      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a38      	ldr	r2, [pc, #224]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fe f8e4 	bl	800283c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fe f8e0 	bl	800283c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1c7      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4929      	ldr	r1, [pc, #164]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
 80046aa:	e018      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe f8c0 	bl	800283c <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fe f8bc 	bl	800283c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e1a3      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d038      	beq.n	800475c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fe f89d 	bl	800283c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fe f899 	bl	800283c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e180      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x23a>
 8004724:	e01a      	b.n	800475c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fe f883 	bl	800283c <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fe f87f 	bl	800283c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d903      	bls.n	8004750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e166      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
 800474c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b92      	ldr	r3, [pc, #584]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a4 	beq.w	80048b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b8c      	ldr	r3, [pc, #560]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	4b89      	ldr	r3, [pc, #548]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4a88      	ldr	r2, [pc, #544]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	6413      	str	r3, [r2, #64]	; 0x40
 8004782:	4b86      	ldr	r3, [pc, #536]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b83      	ldr	r3, [pc, #524]	; (80049a0 <HAL_RCC_OscConfig+0x4d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d118      	bne.n	80047d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800479e:	4b80      	ldr	r3, [pc, #512]	; (80049a0 <HAL_RCC_OscConfig+0x4d4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7f      	ldr	r2, [pc, #508]	; (80049a0 <HAL_RCC_OscConfig+0x4d4>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047aa:	f7fe f847 	bl	800283c <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fe f843 	bl	800283c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e12a      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c4:	4b76      	ldr	r3, [pc, #472]	; (80049a0 <HAL_RCC_OscConfig+0x4d4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <HAL_RCC_OscConfig+0x31a>
 80047d8:	4b70      	ldr	r3, [pc, #448]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a6f      	ldr	r2, [pc, #444]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	e02d      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x33c>
 80047ee:	4b6b      	ldr	r3, [pc, #428]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a6a      	ldr	r2, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
 80047fa:	4b68      	ldr	r3, [pc, #416]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a67      	ldr	r2, [pc, #412]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
 8004806:	e01c      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b05      	cmp	r3, #5
 800480e:	d10c      	bne.n	800482a <HAL_RCC_OscConfig+0x35e>
 8004810:	4b62      	ldr	r3, [pc, #392]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a61      	ldr	r2, [pc, #388]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b5f      	ldr	r3, [pc, #380]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a5e      	ldr	r2, [pc, #376]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	e00b      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5b      	ldr	r2, [pc, #364]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	4b59      	ldr	r3, [pc, #356]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a58      	ldr	r2, [pc, #352]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d015      	beq.n	8004876 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fd fff7 	bl	800283c <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd fff3 	bl	800283c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0d8      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	4b4c      	ldr	r3, [pc, #304]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RCC_OscConfig+0x386>
 8004874:	e014      	b.n	80048a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fd ffe1 	bl	800283c <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fd ffdd 	bl	800283c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0c2      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b3d      	ldr	r3, [pc, #244]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a3c      	ldr	r2, [pc, #240]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80ae 	beq.w	8004a18 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048bc:	4b37      	ldr	r3, [pc, #220]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d06d      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d14b      	bne.n	8004968 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a31      	ldr	r2, [pc, #196]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd ffae 	bl	800283c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd ffaa 	bl	800283c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e091      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	491b      	ldr	r1, [pc, #108]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004930:	4313      	orrs	r3, r2
 8004932:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004934:	4b19      	ldr	r3, [pc, #100]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a18      	ldr	r2, [pc, #96]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800493a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fd ff7c 	bl	800283c <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fd ff78 	bl	800283c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e05f      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0x47c>
 8004966:	e057      	b.n	8004a18 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004968:	4b0c      	ldr	r3, [pc, #48]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0b      	ldr	r2, [pc, #44]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 800496e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fd ff62 	bl	800283c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497c:	f7fd ff5e 	bl	800283c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e045      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b03      	ldr	r3, [pc, #12]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x4b0>
 800499a:	e03d      	b.n	8004a18 <HAL_RCC_OscConfig+0x54c>
 800499c:	40023800 	.word	0x40023800
 80049a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <HAL_RCC_OscConfig+0x558>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d030      	beq.n	8004a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d129      	bne.n	8004a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d122      	bne.n	8004a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049dc:	4293      	cmp	r3, r2
 80049de:	d119      	bne.n	8004a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d10f      	bne.n	8004a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0d0      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b6a      	ldr	r3, [pc, #424]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d910      	bls.n	8004a70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b67      	ldr	r3, [pc, #412]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 020f 	bic.w	r2, r3, #15
 8004a56:	4965      	ldr	r1, [pc, #404]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5e:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0b8      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a88:	4b59      	ldr	r3, [pc, #356]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa0:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	4a52      	ldr	r2, [pc, #328]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	494d      	ldr	r1, [pc, #308]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d040      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d107      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	4b47      	ldr	r3, [pc, #284]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d115      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e07f      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aea:	4b41      	ldr	r3, [pc, #260]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d109      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e073      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afa:	4b3d      	ldr	r3, [pc, #244]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e06b      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0a:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f023 0203 	bic.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4936      	ldr	r1, [pc, #216]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1c:	f7fd fe8e 	bl	800283c <HAL_GetTick>
 8004b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b22:	e00a      	b.n	8004b3a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b24:	f7fd fe8a 	bl	800283c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e053      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 020c 	and.w	r2, r3, #12
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d1eb      	bne.n	8004b24 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d210      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5a:	4b24      	ldr	r3, [pc, #144]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f023 020f 	bic.w	r2, r3, #15
 8004b62:	4922      	ldr	r1, [pc, #136]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d001      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e032      	b.n	8004be2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b88:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4916      	ldr	r1, [pc, #88]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	490e      	ldr	r1, [pc, #56]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bba:	f000 f821 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	490a      	ldr	r1, [pc, #40]	; (8004bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8004bcc:	5ccb      	ldrb	r3, [r1, r3]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8004bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bd6:	4b09      	ldr	r3, [pc, #36]	; (8004bfc <HAL_RCC_ClockConfig+0x1d4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fdea 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023c00 	.word	0x40023c00
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	08013e2c 	.word	0x08013e2c
 8004bf8:	20000000 	.word	0x20000000
 8004bfc:	20000004 	.word	0x20000004

08004c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c04:	b090      	sub	sp, #64	; 0x40
 8004c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c10:	2300      	movs	r3, #0
 8004c12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d00d      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x40>
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	f200 80a1 	bhi.w	8004d6c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x34>
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c32:	e09b      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c38:	e09b      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c3a:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c3e:	e098      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c40:	4b4f      	ldr	r3, [pc, #316]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d028      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	627a      	str	r2, [r7, #36]	; 0x24
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4b47      	ldr	r3, [pc, #284]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c6c:	fb03 f201 	mul.w	r2, r3, r1
 8004c70:	2300      	movs	r3, #0
 8004c72:	fb00 f303 	mul.w	r3, r0, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	4a43      	ldr	r2, [pc, #268]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c80:	460a      	mov	r2, r1
 8004c82:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	4413      	add	r3, r2
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	61fa      	str	r2, [r7, #28]
 8004c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c9a:	f7fb fb89 	bl	80003b0 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca6:	e053      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca8:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	099b      	lsrs	r3, r3, #6
 8004cae:	2200      	movs	r2, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	617a      	str	r2, [r7, #20]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cba:	f04f 0b00 	mov.w	fp, #0
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	465b      	mov	r3, fp
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	0159      	lsls	r1, r3, #5
 8004ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd0:	0150      	lsls	r0, r2, #5
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	ebb2 080a 	subs.w	r8, r2, sl
 8004cda:	eb63 090b 	sbc.w	r9, r3, fp
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cf2:	ebb2 0408 	subs.w	r4, r2, r8
 8004cf6:	eb63 0509 	sbc.w	r5, r3, r9
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	00eb      	lsls	r3, r5, #3
 8004d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d08:	00e2      	lsls	r2, r4, #3
 8004d0a:	4614      	mov	r4, r2
 8004d0c:	461d      	mov	r5, r3
 8004d0e:	eb14 030a 	adds.w	r3, r4, sl
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	eb45 030b 	adc.w	r3, r5, fp
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d26:	4629      	mov	r1, r5
 8004d28:	028b      	lsls	r3, r1, #10
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d30:	4621      	mov	r1, r4
 8004d32:	028a      	lsls	r2, r1, #10
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	60fa      	str	r2, [r7, #12]
 8004d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d44:	f7fb fb34 	bl	80003b0 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d6a:	e002      	b.n	8004d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3740      	adds	r7, #64	; 0x40
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	017d7840 	.word	0x017d7840

08004d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000000 	.word	0x20000000

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08013e3c 	.word	0x08013e3c

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffdc 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0b5b      	lsrs	r3, r3, #13
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	08013e3c 	.word	0x08013e3c

08004df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e1c:	4b69      	ldr	r3, [pc, #420]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a68      	ldr	r2, [pc, #416]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e26:	6093      	str	r3, [r2, #8]
 8004e28:	4b66      	ldr	r3, [pc, #408]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e30:	4964      	ldr	r1, [pc, #400]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d017      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e4e:	4b5d      	ldr	r3, [pc, #372]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5c:	4959      	ldr	r1, [pc, #356]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d017      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e8a:	4b4e      	ldr	r3, [pc, #312]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	494a      	ldr	r1, [pc, #296]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 808b 	beq.w	8004fee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4b3a      	ldr	r3, [pc, #232]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee4:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a34      	ldr	r2, [pc, #208]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004efc:	f7fd fc9e 	bl	800283c <HAL_GetTick>
 8004f00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fd fc9a 	bl	800283c <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e38f      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f16:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f22:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d035      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d02e      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f4a:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f62:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f68:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d114      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fd fc62 	bl	800283c <HAL_GetTick>
 8004f78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f7c:	f7fd fc5e 	bl	800283c <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e351      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ee      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004faa:	d111      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fba:	400b      	ands	r3, r1
 8004fbc:	4901      	ldr	r1, [pc, #4]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	0ffffcff 	.word	0x0ffffcff
 8004fd0:	4bac      	ldr	r3, [pc, #688]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4aab      	ldr	r2, [pc, #684]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	4ba9      	ldr	r3, [pc, #676]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	49a6      	ldr	r1, [pc, #664]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d010      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ffa:	4ba2      	ldr	r3, [pc, #648]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	4aa0      	ldr	r2, [pc, #640]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800500a:	4b9e      	ldr	r3, [pc, #632]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	499b      	ldr	r1, [pc, #620]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005028:	4b96      	ldr	r3, [pc, #600]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005036:	4993      	ldr	r1, [pc, #588]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800504a:	4b8e      	ldr	r3, [pc, #568]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005050:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005058:	498a      	ldr	r1, [pc, #552]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800506c:	4b85      	ldr	r3, [pc, #532]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800507a:	4982      	ldr	r1, [pc, #520]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800508e:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	4979      	ldr	r1, [pc, #484]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050b0:	4b74      	ldr	r3, [pc, #464]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	4971      	ldr	r1, [pc, #452]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050d2:	4b6c      	ldr	r3, [pc, #432]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f023 020c 	bic.w	r2, r3, #12
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e0:	4968      	ldr	r1, [pc, #416]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050f4:	4b63      	ldr	r3, [pc, #396]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	4960      	ldr	r1, [pc, #384]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005124:	4957      	ldr	r1, [pc, #348]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005138:	4b52      	ldr	r3, [pc, #328]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005146:	494f      	ldr	r1, [pc, #316]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800515a:	4b4a      	ldr	r3, [pc, #296]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005168:	4946      	ldr	r1, [pc, #280]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800517c:	4b41      	ldr	r3, [pc, #260]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	493e      	ldr	r1, [pc, #248]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800519e:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	4935      	ldr	r1, [pc, #212]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051c0:	4b30      	ldr	r3, [pc, #192]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ce:	492d      	ldr	r1, [pc, #180]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d011      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051e2:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f0:	4924      	ldr	r1, [pc, #144]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005212:	2301      	movs	r3, #1
 8005214:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005222:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	4914      	ldr	r1, [pc, #80]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005254:	490b      	ldr	r1, [pc, #44]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005268:	4b06      	ldr	r3, [pc, #24]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005278:	4902      	ldr	r1, [pc, #8]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005282:	bf00      	nop
 8005284:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005294:	4b8a      	ldr	r3, [pc, #552]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800529a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	4986      	ldr	r1, [pc, #536]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052b8:	4b81      	ldr	r3, [pc, #516]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052c8:	497d      	ldr	r1, [pc, #500]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d006      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 80d6 	beq.w	8005490 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052e4:	4b76      	ldr	r3, [pc, #472]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a75      	ldr	r2, [pc, #468]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f0:	f7fd faa4 	bl	800283c <HAL_GetTick>
 80052f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f8:	f7fd faa0 	bl	800283c <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	; 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e195      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800530a:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f0      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d021      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11d      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800532a:	4b65      	ldr	r3, [pc, #404]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005338:	4b61      	ldr	r3, [pc, #388]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533e:	0e1b      	lsrs	r3, r3, #24
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	019a      	lsls	r2, r3, #6
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	431a      	orrs	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	4958      	ldr	r1, [pc, #352]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02e      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005390:	d129      	bne.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005392:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053a0:	4b47      	ldr	r3, [pc, #284]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a6:	0f1b      	lsrs	r3, r3, #28
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	019a      	lsls	r2, r3, #6
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	041b      	lsls	r3, r3, #16
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	061b      	lsls	r3, r3, #24
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	071b      	lsls	r3, r3, #28
 80053c6:	493e      	ldr	r1, [pc, #248]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053ce:	4b3c      	ldr	r3, [pc, #240]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d4:	f023 021f 	bic.w	r2, r3, #31
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	3b01      	subs	r3, #1
 80053de:	4938      	ldr	r1, [pc, #224]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01d      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053f2:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f8:	0e1b      	lsrs	r3, r3, #24
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005400:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005406:	0f1b      	lsrs	r3, r3, #28
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	019a      	lsls	r2, r3, #6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	431a      	orrs	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	061b      	lsls	r3, r3, #24
 8005420:	431a      	orrs	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	4926      	ldr	r1, [pc, #152]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d011      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	019a      	lsls	r2, r3, #6
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	041b      	lsls	r3, r3, #16
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	061b      	lsls	r3, r3, #24
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	071b      	lsls	r3, r3, #28
 8005456:	491a      	ldr	r1, [pc, #104]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800545e:	4b18      	ldr	r3, [pc, #96]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546a:	f7fd f9e7 	bl	800283c <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005472:	f7fd f9e3 	bl	800283c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b64      	cmp	r3, #100	; 0x64
 800547e:	d901      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e0d8      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	f040 80ce 	bne.w	8005634 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800549e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a4:	f7fd f9ca 	bl	800283c <HAL_GetTick>
 80054a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054aa:	e00b      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054ac:	f7fd f9c6 	bl	800283c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	; 0x64
 80054b8:	d904      	bls.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e0bb      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80054be:	bf00      	nop
 80054c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054c4:	4b5e      	ldr	r3, [pc, #376]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d0:	d0ec      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d12a      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054fa:	4b51      	ldr	r3, [pc, #324]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	0c1b      	lsrs	r3, r3, #16
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005508:	4b4d      	ldr	r3, [pc, #308]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800550a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550e:	0f1b      	lsrs	r3, r3, #28
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	019a      	lsls	r2, r3, #6
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	061b      	lsls	r3, r3, #24
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	071b      	lsls	r3, r3, #28
 800552e:	4944      	ldr	r1, [pc, #272]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005536:	4b42      	ldr	r3, [pc, #264]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	3b01      	subs	r3, #1
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	493d      	ldr	r1, [pc, #244]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d022      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005564:	d11d      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005566:	4b36      	ldr	r3, [pc, #216]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556c:	0e1b      	lsrs	r3, r3, #24
 800556e:	f003 030f 	and.w	r3, r3, #15
 8005572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	0f1b      	lsrs	r3, r3, #28
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	019a      	lsls	r2, r3, #6
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	431a      	orrs	r2, r3
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	431a      	orrs	r2, r3
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	071b      	lsls	r3, r3, #28
 800559a:	4929      	ldr	r1, [pc, #164]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d028      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	0e1b      	lsrs	r3, r3, #24
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055bc:	4b20      	ldr	r3, [pc, #128]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	0c1b      	lsrs	r3, r3, #16
 80055c4:	f003 0303 	and.w	r3, r3, #3
 80055c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	019a      	lsls	r2, r3, #6
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	041b      	lsls	r3, r3, #16
 80055d4:	431a      	orrs	r2, r3
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	071b      	lsls	r3, r3, #28
 80055e2:	4917      	ldr	r1, [pc, #92]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055ea:	4b15      	ldr	r3, [pc, #84]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4911      	ldr	r1, [pc, #68]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005600:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0e      	ldr	r2, [pc, #56]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560c:	f7fd f916 	bl	800283c <HAL_GetTick>
 8005610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005614:	f7fd f912 	bl	800283c <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e007      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005632:	d1ef      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800

08005644 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005662:	f040 80a3 	bne.w	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005666:	4ba8      	ldr	r3, [pc, #672]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005674:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800567c:	f000 808a 	beq.w	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005686:	f200 8093 	bhi.w	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005690:	d07d      	beq.n	800578e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005698:	f200 808a 	bhi.w	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d004      	beq.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a8:	d039      	beq.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80056aa:	e081      	b.n	80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056ac:	4b96      	ldr	r3, [pc, #600]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056b8:	4b93      	ldr	r3, [pc, #588]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c0:	4a92      	ldr	r2, [pc, #584]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	e007      	b.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056ca:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d2:	4a8f      	ldr	r2, [pc, #572]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80056da:	4b8b      	ldr	r3, [pc, #556]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	0e1b      	lsrs	r3, r3, #24
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80056e8:	4b87      	ldr	r3, [pc, #540]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ee:	099b      	lsrs	r3, r3, #6
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	fb03 f202 	mul.w	r2, r3, r2
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005702:	4b81      	ldr	r3, [pc, #516]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	3301      	adds	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]
        break;
 800571c:	e049      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800571e:	4b7a      	ldr	r3, [pc, #488]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d108      	bne.n	800573c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800572a:	4b77      	ldr	r3, [pc, #476]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005732:	4a76      	ldr	r2, [pc, #472]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005734:	fbb2 f3f3 	udiv	r3, r2, r3
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e007      	b.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800573c:	4b72      	ldr	r3, [pc, #456]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005744:	4a72      	ldr	r2, [pc, #456]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800574c:	4b6e      	ldr	r3, [pc, #440]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800574e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005752:	0e1b      	lsrs	r3, r3, #24
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800575a:	4b6b      	ldr	r3, [pc, #428]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800575c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005760:	099b      	lsrs	r3, r3, #6
 8005762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	fb03 f202 	mul.w	r2, r3, r2
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005772:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005774:	4b64      	ldr	r3, [pc, #400]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	617b      	str	r3, [r7, #20]
        break;
 800578c:	e011      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800578e:	4b61      	ldr	r3, [pc, #388]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005790:	617b      	str	r3, [r7, #20]
        break;
 8005792:	e00e      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005794:	4b5c      	ldr	r3, [pc, #368]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d102      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80057a0:	4b5a      	ldr	r3, [pc, #360]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80057a2:	617b      	str	r3, [r7, #20]
        break;
 80057a4:	e005      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80057a6:	4b5a      	ldr	r3, [pc, #360]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80057a8:	617b      	str	r3, [r7, #20]
        break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80057ac:	bf00      	nop
 80057ae:	e000      	b.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80057b0:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b8:	f040 80a3 	bne.w	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80057bc:	4b52      	ldr	r3, [pc, #328]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80057be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80057ca:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057d2:	f000 808a 	beq.w	80058ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057dc:	f200 809c 	bhi.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057e6:	d07d      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057ee:	f200 8093 	bhi.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057fe:	d039      	beq.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005800:	e08a      	b.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005802:	4b41      	ldr	r3, [pc, #260]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d108      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800580e:	4b3e      	ldr	r3, [pc, #248]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005816:	4a3d      	ldr	r2, [pc, #244]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	e007      	b.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005820:	4b39      	ldr	r3, [pc, #228]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005830:	4b35      	ldr	r3, [pc, #212]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	0e1b      	lsrs	r3, r3, #24
 8005838:	f003 030f 	and.w	r3, r3, #15
 800583c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800583e:	4b32      	ldr	r3, [pc, #200]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	099b      	lsrs	r3, r3, #6
 8005846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	fb03 f202 	mul.w	r2, r3, r2
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005858:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800585a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
        break;
 8005872:	e052      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005874:	4b24      	ldr	r3, [pc, #144]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d108      	bne.n	8005892 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800588a:	fbb2 f3f3 	udiv	r3, r2, r3
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	e007      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800589a:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a8:	0e1b      	lsrs	r3, r3, #24
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80058b0:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	fb03 f202 	mul.w	r2, r3, r2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	617b      	str	r3, [r7, #20]
        break;
 80058e2:	e01a      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80058e4:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80058e6:	617b      	str	r3, [r7, #20]
        break;
 80058e8:	e017      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d102      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80058f8:	617b      	str	r3, [r7, #20]
        break;
 80058fa:	e00e      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80058fe:	617b      	str	r3, [r7, #20]
        break;
 8005900:	e00b      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8005902:	bf00      	nop
 8005904:	e009      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	00f42400 	.word	0x00f42400
 8005910:	017d7840 	.word	0x017d7840
 8005914:	00bb8000 	.word	0x00bb8000
        break;
 8005918:	bf00      	nop

  return frequency;
 800591a:	697b      	ldr	r3, [r7, #20]
}
 800591c:	4618      	mov	r0, r3
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e071      	b.n	8005a22 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	7f5b      	ldrb	r3, [r3, #29]
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d105      	bne.n	8005954 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fb fd62 	bl	8001418 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d053      	beq.n	8005a10 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	22ca      	movs	r2, #202	; 0xca
 800596e:	625a      	str	r2, [r3, #36]	; 0x24
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2253      	movs	r2, #83	; 0x53
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fbd5 	bl	8006128 <RTC_EnterInitMode>
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d12a      	bne.n	80059de <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <HAL_RTC_Init+0x104>)
 8005994:	400b      	ands	r3, r1
 8005996:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6899      	ldr	r1, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68d2      	ldr	r2, [r2, #12]
 80059be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6919      	ldr	r1, [r3, #16]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	041a      	lsls	r2, r3, #16
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fbde 	bl	8006196 <RTC_ExitInitMode>
 80059da:	4603      	mov	r3, r0
 80059dc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d110      	bne.n	8005a06 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0208 	bic.w	r2, r2, #8
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	22ff      	movs	r2, #255	; 0xff
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a0e:	e001      	b.n	8005a14 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d102      	bne.n	8005a20 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	ff8fffbf 	.word	0xff8fffbf

08005a30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b087      	sub	sp, #28
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	7f1b      	ldrb	r3, [r3, #28]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_RTC_SetTime+0x1c>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e085      	b.n	8005b58 <HAL_RTC_SetTime+0x128>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2202      	movs	r2, #2
 8005a56:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d126      	bne.n	8005aac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fbb2 	bl	80061e0 <RTC_ByteToBcd2>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fbab 	bl	80061e0 <RTC_ByteToBcd2>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005a8e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	789b      	ldrb	r3, [r3, #2]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fba3 	bl	80061e0 <RTC_ByteToBcd2>
 8005a9a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a9c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	78db      	ldrb	r3, [r3, #3]
 8005aa4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	e018      	b.n	8005ade <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2200      	movs	r2, #0
 8005abe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005acc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005ad2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	78db      	ldrb	r3, [r3, #3]
 8005ad8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ca      	movs	r2, #202	; 0xca
 8005ae4:	625a      	str	r2, [r3, #36]	; 0x24
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2253      	movs	r2, #83	; 0x53
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fb1a 	bl	8006128 <RTC_EnterInitMode>
 8005af4:	4603      	mov	r3, r0
 8005af6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d11e      	bne.n	8005b3c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	4b16      	ldr	r3, [pc, #88]	; (8005b60 <HAL_RTC_SetTime+0x130>)
 8005b06:	400b      	ands	r3, r1
 8005b08:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	68da      	ldr	r2, [r3, #12]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fb2f 	bl	8006196 <RTC_ExitInitMode>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b3c:	7cfb      	ldrb	r3, [r7, #19]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	22ff      	movs	r2, #255	; 0xff
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]

  return status;
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd90      	pop	{r4, r7, pc}
 8005b60:	007f7f7f 	.word	0x007f7f7f

08005b64 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b22      	ldr	r3, [pc, #136]	; (8005c1c <HAL_RTC_GetTime+0xb8>)
 8005b94:	4013      	ands	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	0a1b      	lsrs	r3, r3, #8
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	0d9b      	lsrs	r3, r3, #22
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11a      	bne.n	8005c12 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fb1b 	bl	800621c <RTC_Bcd2ToByte>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fb12 	bl	800621c <RTC_Bcd2ToByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	789b      	ldrb	r3, [r3, #2]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 fb09 	bl	800621c <RTC_Bcd2ToByte>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	007f7f7f 	.word	0x007f7f7f

08005c20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	7f1b      	ldrb	r3, [r3, #28]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_RTC_SetDate+0x1c>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e06f      	b.n	8005d1c <HAL_RTC_SetDate+0xfc>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10e      	bne.n	8005c6c <HAL_RTC_SetDate+0x4c>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	f023 0310 	bic.w	r3, r3, #16
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	330a      	adds	r3, #10
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d11c      	bne.n	8005cac <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fab2 	bl	80061e0 <RTC_ByteToBcd2>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 faab 	bl	80061e0 <RTC_ByteToBcd2>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005c8e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	789b      	ldrb	r3, [r3, #2]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f000 faa3 	bl	80061e0 <RTC_ByteToBcd2>
 8005c9a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c9c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e00e      	b.n	8005cca <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005cb8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005cbe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	22ca      	movs	r2, #202	; 0xca
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2253      	movs	r2, #83	; 0x53
 8005cd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fa24 	bl	8006128 <RTC_EnterInitMode>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <HAL_RTC_SetDate+0x104>)
 8005cf2:	400b      	ands	r3, r1
 8005cf4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fa4d 	bl	8006196 <RTC_ExitInitMode>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	22ff      	movs	r2, #255	; 0xff
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	771a      	strb	r2, [r3, #28]

  return status;
 8005d1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd90      	pop	{r4, r7, pc}
 8005d24:	00ffff3f 	.word	0x00ffff3f

08005d28 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4b21      	ldr	r3, [pc, #132]	; (8005dc4 <HAL_RTC_GetDate+0x9c>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	f003 031f 	and.w	r3, r3, #31
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	0b5b      	lsrs	r3, r3, #13
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d11a      	bne.n	8005db8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	78db      	ldrb	r3, [r3, #3]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fa48 	bl	800621c <RTC_Bcd2ToByte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 fa3f 	bl	800621c <RTC_Bcd2ToByte>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	789b      	ldrb	r3, [r3, #2]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fa36 	bl	800621c <RTC_Bcd2ToByte>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	00ffff3f 	.word	0x00ffff3f

08005dc8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b089      	sub	sp, #36	; 0x24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005dd4:	4b9a      	ldr	r3, [pc, #616]	; (8006040 <HAL_RTC_SetAlarm_IT+0x278>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a9a      	ldr	r2, [pc, #616]	; (8006044 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	0adb      	lsrs	r3, r3, #11
 8005de0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	7f1b      	ldrb	r3, [r3, #28]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_RTC_SetAlarm_IT+0x36>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e11c      	b.n	8006038 <HAL_RTC_SetAlarm_IT+0x270>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2202      	movs	r2, #2
 8005e08:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d137      	bne.n	8005e80 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2200      	movs	r2, #0
 8005e22:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f9d9 	bl	80061e0 <RTC_ByteToBcd2>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f9d2 	bl	80061e0 <RTC_ByteToBcd2>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e40:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	789b      	ldrb	r3, [r3, #2]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 f9ca 	bl	80061e0 <RTC_ByteToBcd2>
 8005e4c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	78db      	ldrb	r3, [r3, #3]
 8005e56:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e58:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f9bc 	bl	80061e0 <RTC_ByteToBcd2>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e6c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	e023      	b.n	8005ec8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2200      	movs	r2, #0
 8005e92:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ea0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ea6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	78db      	ldrb	r3, [r3, #3]
 8005eac:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005eae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eb6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005eb8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005ebe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	22ca      	movs	r2, #202	; 0xca
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2253      	movs	r2, #83	; 0x53
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eec:	d141      	bne.n	8005f72 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005f0e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	1e5a      	subs	r2, r3, #1
 8005f14:	617a      	str	r2, [r7, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	22ff      	movs	r2, #255	; 0xff
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2203      	movs	r2, #3
 8005f26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e082      	b.n	8006038 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0e7      	beq.n	8005f10 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f5e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	e04b      	b.n	800600a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f80:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005f92:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005f94:	4b2a      	ldr	r3, [pc, #168]	; (8006040 <HAL_RTC_SetAlarm_IT+0x278>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0adb      	lsrs	r3, r3, #11
 8005fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	1e5a      	subs	r2, r3, #1
 8005fae:	617a      	str	r2, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	22ff      	movs	r2, #255	; 0xff
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e035      	b.n	8006038 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0e7      	beq.n	8005faa <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800600a:	4b0f      	ldr	r3, [pc, #60]	; (8006048 <HAL_RTC_SetAlarm_IT+0x280>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a0e      	ldr	r2, [pc, #56]	; (8006048 <HAL_RTC_SetAlarm_IT+0x280>)
 8006010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006014:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <HAL_RTC_SetAlarm_IT+0x280>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <HAL_RTC_SetAlarm_IT+0x280>)
 800601c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006020:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	22ff      	movs	r2, #255	; 0xff
 8006028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3724      	adds	r7, #36	; 0x24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd90      	pop	{r4, r7, pc}
 8006040:	20000000 	.word	0x20000000
 8006044:	10624dd3 	.word	0x10624dd3
 8006048:	40013c00 	.word	0x40013c00

0800604c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006054:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8006056:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800605a:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d012      	beq.n	8006090 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006088:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f007 f980 	bl	800d390 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d012      	beq.n	80060c4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00b      	beq.n	80060c4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80060bc:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f8fc 	bl	80062bc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	775a      	strb	r2, [r3, #29]
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40013c00 	.word	0x40013c00

080060d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80060f2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f4:	f7fc fba2 	bl	800283c <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80060fa:	e009      	b.n	8006110 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060fc:	f7fc fb9e 	bl	800283c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610a:	d901      	bls.n	8006110 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e007      	b.n	8006120 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ee      	beq.n	80060fc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d122      	bne.n	800618c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006154:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006156:	f7fc fb71 	bl	800283c <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800615c:	e00c      	b.n	8006178 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800615e:	f7fc fb6d 	bl	800283c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616c:	d904      	bls.n	8006178 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2204      	movs	r2, #4
 8006172:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <RTC_EnterInitMode+0x64>
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d1e8      	bne.n	800615e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b084      	sub	sp, #16
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff89 	bl	80060d8 <HAL_RTC_WaitForSynchro>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2204      	movs	r2, #4
 80061d0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80061ee:	e005      	b.n	80061fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	3b0a      	subs	r3, #10
 80061fa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b09      	cmp	r3, #9
 8006200:	d8f6      	bhi.n	80061f0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	b2da      	uxtb	r2, r3
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	4313      	orrs	r3, r2
 800620e:	b2db      	uxtb	r3, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4413      	add	r3, r2
 800624a:	b2db      	uxtb	r3, r3
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3350      	adds	r3, #80	; 0x50
 800626e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4413      	add	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	601a      	str	r2, [r3, #0]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3350      	adds	r3, #80	; 0x50
 80062a0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e156      	b.n	800659c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7fb f91c 	bl	8001540 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f95b 	bl	80065cc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d00c      	beq.n	8006338 <HAL_SAI_Init+0x68>
 800631e:	2b02      	cmp	r3, #2
 8006320:	d80d      	bhi.n	800633e <HAL_SAI_Init+0x6e>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SAI_Init+0x5c>
 8006326:	2b01      	cmp	r3, #1
 8006328:	d003      	beq.n	8006332 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800632a:	e008      	b.n	800633e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800632c:	2300      	movs	r3, #0
 800632e:	61fb      	str	r3, [r7, #28]
      break;
 8006330:	e006      	b.n	8006340 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006332:	2310      	movs	r3, #16
 8006334:	61fb      	str	r3, [r7, #28]
      break;
 8006336:	e003      	b.n	8006340 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006338:	2320      	movs	r3, #32
 800633a:	61fb      	str	r3, [r7, #28]
      break;
 800633c:	e000      	b.n	8006340 <HAL_SAI_Init+0x70>
      break;
 800633e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d81e      	bhi.n	8006386 <HAL_SAI_Init+0xb6>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <HAL_SAI_Init+0x80>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006361 	.word	0x08006361
 8006354:	08006367 	.word	0x08006367
 8006358:	0800636f 	.word	0x0800636f
 800635c:	08006377 	.word	0x08006377
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
    }
    break;
 8006364:	e010      	b.n	8006388 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636a:	617b      	str	r3, [r7, #20]
    }
    break;
 800636c:	e00c      	b.n	8006388 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800636e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006372:	617b      	str	r3, [r7, #20]
    }
    break;
 8006374:	e008      	b.n	8006388 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006376:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800637a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	61fb      	str	r3, [r7, #28]
    }
    break;
 8006384:	e000      	b.n	8006388 <HAL_SAI_Init+0xb8>
    default:
      break;
 8006386:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a85      	ldr	r2, [pc, #532]	; (80065a4 <HAL_SAI_Init+0x2d4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_SAI_Init+0xcc>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a84      	ldr	r2, [pc, #528]	; (80065a8 <HAL_SAI_Init+0x2d8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d103      	bne.n	80063a4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800639c:	4a83      	ldr	r2, [pc, #524]	; (80065ac <HAL_SAI_Init+0x2dc>)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e002      	b.n	80063aa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80063a4:	4a82      	ldr	r2, [pc, #520]	; (80065b0 <HAL_SAI_Init+0x2e0>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d04c      	beq.n	800644c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7a      	ldr	r2, [pc, #488]	; (80065a4 <HAL_SAI_Init+0x2d4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_SAI_Init+0xfa>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a78      	ldr	r2, [pc, #480]	; (80065a8 <HAL_SAI_Init+0x2d8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d104      	bne.n	80063d4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80063ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80063ce:	f7ff f939 	bl	8005644 <HAL_RCCEx_GetPeriphCLKFreq>
 80063d2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a76      	ldr	r2, [pc, #472]	; (80065b4 <HAL_SAI_Init+0x2e4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d004      	beq.n	80063e8 <HAL_SAI_Init+0x118>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a75      	ldr	r2, [pc, #468]	; (80065b8 <HAL_SAI_Init+0x2e8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d104      	bne.n	80063f2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80063e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80063ec:	f7ff f92a 	bl	8005644 <HAL_RCCEx_GetPeriphCLKFreq>
 80063f0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	461a      	mov	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	025b      	lsls	r3, r3, #9
 8006404:	fbb2 f3f3 	udiv	r3, r2, r3
 8006408:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4a6b      	ldr	r2, [pc, #428]	; (80065bc <HAL_SAI_Init+0x2ec>)
 800640e:	fba2 2303 	umull	r2, r3, r2, r3
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	4b68      	ldr	r3, [pc, #416]	; (80065bc <HAL_SAI_Init+0x2ec>)
 800641c:	fba3 2301 	umull	r2, r3, r3, r1
 8006420:	08da      	lsrs	r2, r3, #3
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	1aca      	subs	r2, r1, r3
 800642c:	2a08      	cmp	r2, #8
 800642e:	d904      	bls.n	800643a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	2b04      	cmp	r3, #4
 8006440:	d104      	bne.n	800644c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	085a      	lsrs	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_SAI_Init+0x18c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d109      	bne.n	8006470 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_SAI_Init+0x198>
 8006464:	2300      	movs	r3, #0
 8006466:	e001      	b.n	800646c <HAL_SAI_Init+0x19c>
 8006468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	e008      	b.n	8006482 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_SAI_Init+0x1ae>
 8006478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647c:	e000      	b.n	8006480 <HAL_SAI_Init+0x1b0>
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6819      	ldr	r1, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b4c      	ldr	r3, [pc, #304]	; (80065c0 <HAL_SAI_Init+0x2f0>)
 800648e:	400b      	ands	r3, r1
 8006490:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6819      	ldr	r1, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064a6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	431a      	orrs	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80064ba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80064c6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	051b      	lsls	r3, r3, #20
 80064ce:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <HAL_SAI_Init+0x2f4>)
 80064e4:	400b      	ands	r3, r1
 80064e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6859      	ldr	r1, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <HAL_SAI_Init+0x2f8>)
 8006512:	400b      	ands	r3, r1
 8006514:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6899      	ldr	r1, [r3, #8]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006520:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006526:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800652c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006532:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	3b01      	subs	r3, #1
 800653a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800653c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68d9      	ldr	r1, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006554:	400b      	ands	r3, r1
 8006556:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68d9      	ldr	r1, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006566:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006574:	3b01      	subs	r3, #1
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40015804 	.word	0x40015804
 80065a8:	40015824 	.word	0x40015824
 80065ac:	40015800 	.word	0x40015800
 80065b0:	40015c00 	.word	0x40015c00
 80065b4:	40015c04 	.word	0x40015c04
 80065b8:	40015c24 	.word	0x40015c24
 80065bc:	cccccccd 	.word	0xcccccccd
 80065c0:	ff05c010 	.word	0xff05c010
 80065c4:	ffff1ff0 	.word	0xffff1ff0
 80065c8:	fff88000 	.word	0xfff88000

080065cc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80065d4:	4b17      	ldr	r3, [pc, #92]	; (8006634 <SAI_Disable+0x68>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a17      	ldr	r2, [pc, #92]	; (8006638 <SAI_Disable+0x6c>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	0b1b      	lsrs	r3, r3, #12
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80065f6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1e5a      	subs	r2, r3, #1
 80065fc:	60fa      	str	r2, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	72fb      	strb	r3, [r7, #11]
      break;
 8006616:	e006      	b.n	8006626 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e8      	bne.n	80065f8 <SAI_Disable+0x2c>

  return status;
 8006626:	7afb      	ldrb	r3, [r7, #11]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000000 	.word	0x20000000
 8006638:	95cbec1b 	.word	0x95cbec1b

0800663c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e022      	b.n	8006694 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7fb f839 	bl	80016d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2203      	movs	r2, #3
 800666a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f814 	bl	800669c <HAL_SD_InitCard>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e00a      	b.n	8006694 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800669c:	b5b0      	push	{r4, r5, r7, lr}
 800669e:	b08e      	sub	sp, #56	; 0x38
 80066a0:	af04      	add	r7, sp, #16
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80066b8:	2376      	movs	r3, #118	; 0x76
 80066ba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681d      	ldr	r5, [r3, #0]
 80066c0:	466c      	mov	r4, sp
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066ce:	f107 0308 	add.w	r3, r7, #8
 80066d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80066d4:	4628      	mov	r0, r5
 80066d6:	f002 fc0b 	bl	8008ef0 <SDMMC_Init>
 80066da:	4603      	mov	r3, r0
 80066dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80066e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e059      	b.n	80067a0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066fa:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f002 fc3f 	bl	8008f84 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006714:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006716:	2002      	movs	r0, #2
 8006718:	f7fc f89c 	bl	8002854 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fff3 	bl	8007708 <SD_PowerON>
 8006722:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e02e      	b.n	80067a0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 ff12 	bl	800756c <SD_InitCard>
 8006748:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	431a      	orrs	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e01b      	b.n	80067a0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006770:	4618      	mov	r0, r3
 8006772:	f002 fc99 	bl	80090a8 <SDMMC_CmdBlockLength>
 8006776:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00f      	beq.n	800679e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a09      	ldr	r2, [pc, #36]	; (80067a8 <HAL_SD_InitCard+0x10c>)
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3728      	adds	r7, #40	; 0x28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bdb0      	pop	{r4, r5, r7, pc}
 80067a8:	004005ff 	.word	0x004005ff

080067ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	; 0x30
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d107      	bne.n	80067d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0c3      	b.n	800695c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 80bc 	bne.w	800695a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80067e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	441a      	add	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d907      	bls.n	8006806 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e0aa      	b.n	800695c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	4a4e      	ldr	r2, [pc, #312]	; (8006964 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a4d      	ldr	r2, [pc, #308]	; (8006968 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006834:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2200      	movs	r2, #0
 800683c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3380      	adds	r3, #128	; 0x80
 800686c:	4619      	mov	r1, r3
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	025b      	lsls	r3, r3, #9
 8006874:	089b      	lsrs	r3, r3, #2
 8006876:	f7fd f8db 	bl	8003a30 <HAL_DMA_Start_IT>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d017      	beq.n	80068b0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800688e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a35      	ldr	r2, [pc, #212]	; (800696c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e055      	b.n	800695c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0208 	orr.w	r2, r2, #8
 80068be:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d002      	beq.n	80068ce <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	025b      	lsls	r3, r3, #9
 80068cc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	025b      	lsls	r3, r3, #9
 80068d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80068da:	2390      	movs	r3, #144	; 0x90
 80068dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80068de:	2302      	movs	r3, #2
 80068e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80068e6:	2301      	movs	r3, #1
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f107 0210 	add.w	r2, r7, #16
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f002 fbab 	bl	8009050 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d90a      	bls.n	8006916 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2282      	movs	r2, #130	; 0x82
 8006904:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800690c:	4618      	mov	r0, r3
 800690e:	f002 fc0f 	bl	8009130 <SDMMC_CmdReadMultiBlock>
 8006912:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006914:	e009      	b.n	800692a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2281      	movs	r2, #129	; 0x81
 800691a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006922:	4618      	mov	r0, r3
 8006924:	f002 fbe2 	bl	80090ec <SDMMC_CmdReadSingleBlock>
 8006928:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800692a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d012      	beq.n	8006956 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0d      	ldr	r2, [pc, #52]	; (800696c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800693c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693e:	431a      	orrs	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e002      	b.n	800695c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
  }
}
 800695c:	4618      	mov	r0, r3
 800695e:	3730      	adds	r7, #48	; 0x30
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	0800737b 	.word	0x0800737b
 8006968:	080073ed 	.word	0x080073ed
 800696c:	004005ff 	.word	0x004005ff

08006970 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08c      	sub	sp, #48	; 0x30
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d107      	bne.n	8006998 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0c6      	b.n	8006b26 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	f040 80bf 	bne.w	8006b24 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80069ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	441a      	add	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d907      	bls.n	80069ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e0ad      	b.n	8006b26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2203      	movs	r2, #3
 80069ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2200      	movs	r2, #0
 80069d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f042 021a 	orr.w	r2, r2, #26
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ee:	4a50      	ldr	r2, [pc, #320]	; (8006b30 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80069f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	4a4f      	ldr	r2, [pc, #316]	; (8006b34 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80069f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	2200      	movs	r2, #0
 8006a00:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d002      	beq.n	8006a10 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	025b      	lsls	r3, r3, #9
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d90a      	bls.n	8006a2c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	22a0      	movs	r2, #160	; 0xa0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a22:	4618      	mov	r0, r3
 8006a24:	f002 fbc8 	bl	80091b8 <SDMMC_CmdWriteMultiBlock>
 8006a28:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a2a:	e009      	b.n	8006a40 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2290      	movs	r2, #144	; 0x90
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f002 fb9b 	bl	8009174 <SDMMC_CmdWriteSingleBlock>
 8006a3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d012      	beq.n	8006a6c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a3b      	ldr	r2, [pc, #236]	; (8006b38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006a4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	431a      	orrs	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e05c      	b.n	8006b26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f042 0208 	orr.w	r2, r2, #8
 8006a7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	2240      	movs	r2, #64	; 0x40
 8006a82:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006aa4:	68b9      	ldr	r1, [r7, #8]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3380      	adds	r3, #128	; 0x80
 8006aac:	461a      	mov	r2, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	025b      	lsls	r3, r3, #9
 8006ab2:	089b      	lsrs	r3, r3, #2
 8006ab4:	f7fc ffbc 	bl	8003a30 <HAL_DMA_Start_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01a      	beq.n	8006af4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 021a 	bic.w	r2, r2, #26
 8006acc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a19      	ldr	r2, [pc, #100]	; (8006b38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e018      	b.n	8006b26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006af8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	025b      	lsls	r3, r3, #9
 8006afe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006b00:	2390      	movs	r3, #144	; 0x90
 8006b02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f107 0210 	add.w	r2, r7, #16
 8006b18:	4611      	mov	r1, r2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f002 fa98 	bl	8009050 <SDMMC_ConfigData>

      return HAL_OK;
 8006b20:	2300      	movs	r3, #0
 8006b22:	e000      	b.n	8006b26 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006b24:	2302      	movs	r3, #2
  }
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3730      	adds	r7, #48	; 0x30
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	08007351 	.word	0x08007351
 8006b34:	080073ed 	.word	0x080073ed
 8006b38:	004005ff 	.word	0x004005ff

08006b3c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <HAL_SD_IRQHandler+0x2e>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 ffef 	bl	8007b46 <SD_Read_IT>
 8006b68:	e15a      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 808d 	beq.w	8006c94 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b82:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b9a      	ldr	r3, [pc, #616]	; (8006df8 <HAL_SD_IRQHandler+0x2bc>)
 8006b90:	400b      	ands	r3, r1
 8006b92:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0201 	bic.w	r2, r2, #1
 8006ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d039      	beq.n	8006c22 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d104      	bne.n	8006bc2 <HAL_SD_IRQHandler+0x86>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 0320 	and.w	r3, r3, #32
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d011      	beq.n	8006be6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fb18 	bl	80091fc <SDMMC_CmdStopTransfer>
 8006bcc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f921 	bl	8006e28 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d104      	bne.n	8006c12 <HAL_SD_IRQHandler+0xd6>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f002 ff88 	bl	8009b28 <HAL_SD_RxCpltCallback>
 8006c18:	e102      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f002 ff7a 	bl	8009b14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c20:	e0fe      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80f9 	beq.w	8006e20 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d011      	beq.n	8006c5c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f002 fadd 	bl	80091fc <SDMMC_CmdStopTransfer>
 8006c42:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8e6 	bl	8006e28 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 80dc 	bne.w	8006e20 <HAL_SD_IRQHandler+0x2e4>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f040 80d6 	bne.w	8006e20 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0208 	bic.w	r2, r2, #8
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f002 ff41 	bl	8009b14 <HAL_SD_TxCpltCallback>
}
 8006c92:	e0c5      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <HAL_SD_IRQHandler+0x178>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 ff9b 	bl	8007be8 <SD_Write_IT>
 8006cb2:	e0b5      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	f000 80ae 	beq.w	8006e20 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	f043 0202 	orr.w	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce4:	f003 0308 	and.w	r3, r3, #8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	f043 0208 	orr.w	r2, r3, #8
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	f043 0220 	orr.w	r2, r3, #32
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	f043 0210 	orr.w	r2, r3, #16
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006d44:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f002 fa56 	bl	80091fc <SDMMC_CmdStopTransfer>
 8006d50:	4602      	mov	r2, r0
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f857 	bl	8006e28 <HAL_SD_ErrorCallback>
}
 8006d7a:	e051      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d04c      	beq.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 0310 	and.w	r3, r3, #16
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d104      	bne.n	8006d9a <HAL_SD_IRQHandler+0x25e>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d011      	beq.n	8006dbe <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <HAL_SD_IRQHandler+0x2c0>)
 8006da0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fc fea2 	bl	8003af0 <HAL_DMA_Abort_IT>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d036      	beq.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fb6a 	bl	8007490 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006dbc:	e030      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <HAL_SD_IRQHandler+0x296>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d018      	beq.n	8006e04 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	; (8006e00 <HAL_SD_IRQHandler+0x2c4>)
 8006dd8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fc fe86 	bl	8003af0 <HAL_DMA_Abort_IT>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01a      	beq.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb85 	bl	80074fe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006df4:	e014      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
 8006df6:	bf00      	nop
 8006df8:	ffff3ec5 	.word	0xffff3ec5
 8006dfc:	08007491 	.word	0x08007491
 8006e00:	080074ff 	.word	0x080074ff
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f002 fe71 	bl	8009b00 <HAL_SD_AbortCallback>
}
 8006e1e:	e7ff      	b.n	8006e20 <HAL_SD_IRQHandler+0x2e4>
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e4a:	0f9b      	lsrs	r3, r3, #30
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e56:	0e9b      	lsrs	r3, r3, #26
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e68:	0e1b      	lsrs	r3, r3, #24
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0303 	and.w	r3, r3, #3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e9c:	0d1b      	lsrs	r3, r3, #20
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eba:	0bdb      	lsrs	r3, r3, #15
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ecc:	0b9b      	lsrs	r3, r3, #14
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ede:	0b5b      	lsrs	r3, r3, #13
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef0:	0b1b      	lsrs	r3, r3, #12
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2200      	movs	r2, #0
 8006f02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d163      	bne.n	8006fd4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f10:	009a      	lsls	r2, r3, #2
 8006f12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006f16:	4013      	ands	r3, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006f1c:	0f92      	lsrs	r2, r2, #30
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f28:	0edb      	lsrs	r3, r3, #27
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f3a:	0e1b      	lsrs	r3, r3, #24
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f003 0307 	and.w	r3, r3, #7
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f4c:	0d5b      	lsrs	r3, r3, #21
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5e:	0c9b      	lsrs	r3, r3, #18
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f70:	0bdb      	lsrs	r3, r3, #15
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	f003 0307 	and.w	r3, r3, #7
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	7e1b      	ldrb	r3, [r3, #24]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	3302      	adds	r3, #2
 8006f94:	2201      	movs	r2, #1
 8006f96:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006f9e:	fb03 f202 	mul.w	r2, r3, r2
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	7a1b      	ldrb	r3, [r3, #8]
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006fc0:	0a52      	lsrs	r2, r2, #9
 8006fc2:	fb03 f202 	mul.w	r2, r3, r2
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fd0:	661a      	str	r2, [r3, #96]	; 0x60
 8006fd2:	e031      	b.n	8007038 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d11d      	bne.n	8007018 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fea:	0c1b      	lsrs	r3, r3, #16
 8006fec:	431a      	orrs	r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	029a      	lsls	r2, r3, #10
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	661a      	str	r2, [r3, #96]	; 0x60
 8007016:	e00f      	b.n	8007038 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a58      	ldr	r2, [pc, #352]	; (8007180 <HAL_SD_GetCardCSD+0x344>)
 800701e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e09d      	b.n	8007174 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703c:	0b9b      	lsrs	r3, r3, #14
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	b2da      	uxtb	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800704e:	09db      	lsrs	r3, r3, #7
 8007050:	b2db      	uxtb	r3, r3
 8007052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007056:	b2da      	uxtb	r2, r3
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007066:	b2da      	uxtb	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	0fdb      	lsrs	r3, r3, #31
 8007072:	b2da      	uxtb	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	0f5b      	lsrs	r3, r3, #29
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	b2da      	uxtb	r2, r3
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	0e9b      	lsrs	r3, r3, #26
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	b2da      	uxtb	r2, r3
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	0d9b      	lsrs	r3, r3, #22
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	0d5b      	lsrs	r3, r3, #21
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	0bdb      	lsrs	r3, r3, #15
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	0b9b      	lsrs	r3, r3, #14
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	0b5b      	lsrs	r3, r3, #13
 800710c:	b2db      	uxtb	r3, r3
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	b2da      	uxtb	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	0b1b      	lsrs	r3, r3, #12
 8007120:	b2db      	uxtb	r3, r3
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	b2da      	uxtb	r2, r3
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007132:	0a9b      	lsrs	r3, r3, #10
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	b2da      	uxtb	r2, r3
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	b2da      	uxtb	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	b2db      	uxtb	r3, r3
 800715e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007162:	b2da      	uxtb	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	004005ff 	.word	0x004005ff

08007184 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80071dc:	b5b0      	push	{r4, r5, r7, lr}
 80071de:	b08e      	sub	sp, #56	; 0x38
 80071e0:	af04      	add	r7, sp, #16
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2203      	movs	r2, #3
 80071f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d02e      	beq.n	800725a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	d106      	bne.n	8007212 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
 8007210:	e029      	b.n	8007266 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007218:	d10a      	bne.n	8007230 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fb2a 	bl	8007874 <SD_WideBus_Enable>
 8007220:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	639a      	str	r2, [r3, #56]	; 0x38
 800722e:	e01a      	b.n	8007266 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fb67 	bl	800790a <SD_WideBus_Disable>
 800723c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
 800724a:	e00c      	b.n	8007266 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38
 8007258:	e005      	b.n	8007266 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00b      	beq.n	8007286 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a26      	ldr	r2, [pc, #152]	; (800730c <HAL_SD_ConfigWideBusOperation+0x130>)
 8007274:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007284:	e01f      	b.n	80072c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681d      	ldr	r5, [r3, #0]
 80072ac:	466c      	mov	r4, sp
 80072ae:	f107 0314 	add.w	r3, r7, #20
 80072b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80072b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80072ba:	f107 0308 	add.w	r3, r7, #8
 80072be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072c0:	4628      	mov	r0, r5
 80072c2:	f001 fe15 	bl	8008ef0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072ce:	4618      	mov	r0, r3
 80072d0:	f001 feea 	bl	80090a8 <SDMMC_CmdBlockLength>
 80072d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00c      	beq.n	80072f6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	; (800730c <HAL_SD_ConfigWideBusOperation+0x130>)
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80072fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007302:	4618      	mov	r0, r3
 8007304:	3728      	adds	r7, #40	; 0x28
 8007306:	46bd      	mov	sp, r7
 8007308:	bdb0      	pop	{r4, r5, r7, pc}
 800730a:	bf00      	nop
 800730c:	004005ff 	.word	0x004005ff

08007310 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800731c:	f107 030c 	add.w	r3, r7, #12
 8007320:	4619      	mov	r1, r3
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa7e 	bl	8007824 <SD_SendStatus>
 8007328:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	0a5b      	lsrs	r3, r3, #9
 8007340:	f003 030f 	and.w	r3, r3, #15
 8007344:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007346:	693b      	ldr	r3, [r7, #16]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800736c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	2b82      	cmp	r3, #130	; 0x82
 800738e:	d111      	bne.n	80073b4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4618      	mov	r0, r3
 8007396:	f001 ff31 	bl	80091fc <SDMMC_CmdStopTransfer>
 800739a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fd3a 	bl	8006e28 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0208 	bic.w	r2, r2, #8
 80073c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f240 523a 	movw	r2, #1338	; 0x53a
 80073cc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f002 fba3 	bl	8009b28 <HAL_SD_RxCpltCallback>
#endif
}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fc fd24 	bl	8003e48 <HAL_DMA_GetError>
 8007400:	4603      	mov	r3, r0
 8007402:	2b02      	cmp	r3, #2
 8007404:	d03e      	beq.n	8007484 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007414:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d002      	beq.n	8007422 <SD_DMAError+0x36>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d12d      	bne.n	800747e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a19      	ldr	r2, [pc, #100]	; (800748c <SD_DMAError+0xa0>)
 8007428:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007438:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007446:	6978      	ldr	r0, [r7, #20]
 8007448:	f7ff ff62 	bl	8007310 <HAL_SD_GetCardState>
 800744c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b06      	cmp	r3, #6
 8007452:	d002      	beq.n	800745a <SD_DMAError+0x6e>
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b05      	cmp	r3, #5
 8007458:	d10a      	bne.n	8007470 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f001 fecc 	bl	80091fc <SDMMC_CmdStopTransfer>
 8007464:	4602      	mov	r2, r0
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	431a      	orrs	r2, r3
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800747e:	6978      	ldr	r0, [r7, #20]
 8007480:	f7ff fcd2 	bl	8006e28 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007484:	bf00      	nop
 8007486:	3718      	adds	r7, #24
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	004005ff 	.word	0x004005ff

08007490 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80074a6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff ff31 	bl	8007310 <HAL_SD_GetCardState>
 80074ae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d002      	beq.n	80074ca <SD_DMATxAbort+0x3a>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	d10a      	bne.n	80074e0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 fe94 	bl	80091fc <SDMMC_CmdStopTransfer>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	431a      	orrs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f002 fb09 	bl	8009b00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80074ee:	e002      	b.n	80074f6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fc99 	bl	8006e28 <HAL_SD_ErrorCallback>
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f240 523a 	movw	r2, #1338	; 0x53a
 8007514:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fefa 	bl	8007310 <HAL_SD_GetCardState>
 800751c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b06      	cmp	r3, #6
 8007530:	d002      	beq.n	8007538 <SD_DMARxAbort+0x3a>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b05      	cmp	r3, #5
 8007536:	d10a      	bne.n	800754e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f001 fe5d 	bl	80091fc <SDMMC_CmdStopTransfer>
 8007542:	4602      	mov	r2, r0
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	431a      	orrs	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	2b00      	cmp	r3, #0
 8007554:	d103      	bne.n	800755e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f002 fad2 	bl	8009b00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800755c:	e002      	b.n	8007564 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff fc62 	bl	8006e28 <HAL_SD_ErrorCallback>
}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800756c:	b5b0      	push	{r4, r5, r7, lr}
 800756e:	b094      	sub	sp, #80	; 0x50
 8007570:	af04      	add	r7, sp, #16
 8007572:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007574:	2301      	movs	r3, #1
 8007576:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fd0f 	bl	8008fa0 <SDMMC_GetPowerState>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007588:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800758c:	e0b8      	b.n	8007700 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	2b03      	cmp	r3, #3
 8007594:	d02f      	beq.n	80075f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f001 ff39 	bl	8009412 <SDMMC_CmdSendCID>
 80075a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80075a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <SD_InitCard+0x40>
    {
      return errorstate;
 80075a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075aa:	e0a9      	b.n	8007700 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2100      	movs	r1, #0
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 fd39 	bl	800902a <SDMMC_GetResponse>
 80075b8:	4602      	mov	r2, r0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2104      	movs	r1, #4
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 fd30 	bl	800902a <SDMMC_GetResponse>
 80075ca:	4602      	mov	r2, r0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2108      	movs	r1, #8
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fd27 	bl	800902a <SDMMC_GetResponse>
 80075dc:	4602      	mov	r2, r0
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	210c      	movs	r1, #12
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fd1e 	bl	800902a <SDMMC_GetResponse>
 80075ee:	4602      	mov	r2, r0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d00d      	beq.n	800761a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f107 020e 	add.w	r2, r7, #14
 8007606:	4611      	mov	r1, r2
 8007608:	4618      	mov	r0, r3
 800760a:	f001 ff3f 	bl	800948c <SDMMC_CmdSetRelAdd>
 800760e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <SD_InitCard+0xae>
    {
      return errorstate;
 8007616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007618:	e072      	b.n	8007700 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	2b03      	cmp	r3, #3
 8007620:	d036      	beq.n	8007690 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007622:	89fb      	ldrh	r3, [r7, #14]
 8007624:	461a      	mov	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	4619      	mov	r1, r3
 8007636:	4610      	mov	r0, r2
 8007638:	f001 ff09 	bl	800944e <SDMMC_CmdSendCSD>
 800763c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800763e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	e05b      	b.n	8007700 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2100      	movs	r1, #0
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fceb 	bl	800902a <SDMMC_GetResponse>
 8007654:	4602      	mov	r2, r0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2104      	movs	r1, #4
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fce2 	bl	800902a <SDMMC_GetResponse>
 8007666:	4602      	mov	r2, r0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2108      	movs	r1, #8
 8007672:	4618      	mov	r0, r3
 8007674:	f001 fcd9 	bl	800902a <SDMMC_GetResponse>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	210c      	movs	r1, #12
 8007684:	4618      	mov	r0, r3
 8007686:	f001 fcd0 	bl	800902a <SDMMC_GetResponse>
 800768a:	4602      	mov	r2, r0
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2104      	movs	r1, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f001 fcc7 	bl	800902a <SDMMC_GetResponse>
 800769c:	4603      	mov	r3, r0
 800769e:	0d1a      	lsrs	r2, r3, #20
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80076a4:	f107 0310 	add.w	r3, r7, #16
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fbc6 	bl	8006e3c <HAL_SD_GetCardCSD>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076ba:	e021      	b.n	8007700 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	041b      	lsls	r3, r3, #16
 80076c6:	2200      	movs	r2, #0
 80076c8:	461c      	mov	r4, r3
 80076ca:	4615      	mov	r5, r2
 80076cc:	4622      	mov	r2, r4
 80076ce:	462b      	mov	r3, r5
 80076d0:	4608      	mov	r0, r1
 80076d2:	f001 fdb5 	bl	8009240 <SDMMC_CmdSelDesel>
 80076d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80076d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d001      	beq.n	80076e2 <SD_InitCard+0x176>
  {
    return errorstate;
 80076de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e0:	e00e      	b.n	8007700 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681d      	ldr	r5, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	466c      	mov	r4, sp
 80076ea:	f103 0210 	add.w	r2, r3, #16
 80076ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80076f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076f4:	3304      	adds	r3, #4
 80076f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076f8:	4628      	mov	r0, r5
 80076fa:	f001 fbf9 	bl	8008ef0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3740      	adds	r7, #64	; 0x40
 8007704:	46bd      	mov	sp, r7
 8007706:	bdb0      	pop	{r4, r5, r7, pc}

08007708 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f001 fdb0 	bl	8009286 <SDMMC_CmdGoIdleState>
 8007726:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <SD_PowerON+0x2a>
  {
    return errorstate;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	e072      	b.n	8007818 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fdc3 	bl	80092c2 <SDMMC_CmdOperCond>
 800773c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00d      	beq.n	8007760 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f001 fd99 	bl	8009286 <SDMMC_CmdGoIdleState>
 8007754:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <SD_PowerON+0x5e>
    {
      return errorstate;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	e05b      	b.n	8007818 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776a:	2b01      	cmp	r3, #1
 800776c:	d137      	bne.n	80077de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f001 fdc3 	bl	8009300 <SDMMC_CmdAppCommand>
 800777a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d02d      	beq.n	80077de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007782:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007786:	e047      	b.n	8007818 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f001 fdb6 	bl	8009300 <SDMMC_CmdAppCommand>
 8007794:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e03b      	b.n	8007818 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	491e      	ldr	r1, [pc, #120]	; (8007820 <SD_PowerON+0x118>)
 80077a6:	4618      	mov	r0, r3
 80077a8:	f001 fdcc 	bl	8009344 <SDMMC_CmdAppOperCommand>
 80077ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077b8:	e02e      	b.n	8007818 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2100      	movs	r1, #0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f001 fc32 	bl	800902a <SDMMC_GetResponse>
 80077c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	0fdb      	lsrs	r3, r3, #31
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <SD_PowerON+0xcc>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <SD_PowerON+0xce>
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]

    count++;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3301      	adds	r3, #1
 80077dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d802      	bhi.n	80077ee <SD_PowerON+0xe6>
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0cc      	beq.n	8007788 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d902      	bls.n	80077fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80077f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077fc:	e00c      	b.n	8007818 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	645a      	str	r2, [r3, #68]	; 0x44
 800780e:	e002      	b.n	8007816 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	c1100000 	.word	0xc1100000

08007824 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d102      	bne.n	800783a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007834:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007838:	e018      	b.n	800786c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f001 fe41 	bl	80094ce <SDMMC_CmdSendStatus>
 800784c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	e009      	b.n	800786c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2100      	movs	r1, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fbe3 	bl	800902a <SDMMC_GetResponse>
 8007864:	4602      	mov	r2, r0
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800786a:	2300      	movs	r3, #0
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	2300      	movs	r3, #0
 8007882:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2100      	movs	r1, #0
 800788a:	4618      	mov	r0, r3
 800788c:	f001 fbcd 	bl	800902a <SDMMC_GetResponse>
 8007890:	4603      	mov	r3, r0
 8007892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800789a:	d102      	bne.n	80078a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800789c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078a0:	e02f      	b.n	8007902 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80078a2:	f107 030c 	add.w	r3, r7, #12
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f879 	bl	80079a0 <SD_FindSCR>
 80078ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	e023      	b.n	8007902 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01c      	beq.n	80078fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078cc:	041b      	lsls	r3, r3, #16
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f001 fd15 	bl	8009300 <SDMMC_CmdAppCommand>
 80078d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d001      	beq.n	80078e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	e00f      	b.n	8007902 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2102      	movs	r1, #2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 fd4f 	bl	800938c <SDMMC_CmdBusWidth>
 80078ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	e003      	b.n	8007902 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	e001      	b.n	8007902 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80078fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b086      	sub	sp, #24
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f001 fb82 	bl	800902a <SDMMC_GetResponse>
 8007926:	4603      	mov	r3, r0
 8007928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007930:	d102      	bne.n	8007938 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007936:	e02f      	b.n	8007998 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007938:	f107 030c 	add.w	r3, r7, #12
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f82e 	bl	80079a0 <SD_FindSCR>
 8007944:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	e023      	b.n	8007998 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d01c      	beq.n	8007994 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007962:	041b      	lsls	r3, r3, #16
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f001 fcca 	bl	8009300 <SDMMC_CmdAppCommand>
 800796c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	e00f      	b.n	8007998 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2100      	movs	r1, #0
 800797e:	4618      	mov	r0, r3
 8007980:	f001 fd04 	bl	800938c <SDMMC_CmdBusWidth>
 8007984:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	e003      	b.n	8007998 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007990:	2300      	movs	r3, #0
 8007992:	e001      	b.n	8007998 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007994:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b08f      	sub	sp, #60	; 0x3c
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80079aa:	f7fa ff47 	bl	800283c <HAL_GetTick>
 80079ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80079b4:	2300      	movs	r3, #0
 80079b6:	60bb      	str	r3, [r7, #8]
 80079b8:	2300      	movs	r3, #0
 80079ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2108      	movs	r1, #8
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 fb6e 	bl	80090a8 <SDMMC_CmdBlockLength>
 80079cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	e0b2      	b.n	8007b3e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e0:	041b      	lsls	r3, r3, #16
 80079e2:	4619      	mov	r1, r3
 80079e4:	4610      	mov	r0, r2
 80079e6:	f001 fc8b 	bl	8009300 <SDMMC_CmdAppCommand>
 80079ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	e0a3      	b.n	8007b3e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80079f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80079fc:	2308      	movs	r3, #8
 80079fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007a00:	2330      	movs	r3, #48	; 0x30
 8007a02:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a04:	2302      	movs	r3, #2
 8007a06:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f107 0210 	add.w	r2, r7, #16
 8007a18:	4611      	mov	r1, r2
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 fb18 	bl	8009050 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f001 fcd3 	bl	80093d0 <SDMMC_CmdSendSCR>
 8007a2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d02a      	beq.n	8007a88 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	e083      	b.n	8007b3e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00f      	beq.n	8007a64 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6819      	ldr	r1, [r3, #0]
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	f107 0208 	add.w	r2, r7, #8
 8007a50:	18d4      	adds	r4, r2, r3
 8007a52:	4608      	mov	r0, r1
 8007a54:	f001 fa78 	bl	8008f48 <SDMMC_ReadFIFO>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	6023      	str	r3, [r4, #0]
      index++;
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5e:	3301      	adds	r3, #1
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
 8007a62:	e006      	b.n	8007a72 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007a72:	f7fa fee3 	bl	800283c <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a80:	d102      	bne.n	8007a88 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007a82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a86:	e05a      	b.n	8007b3e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0cf      	beq.n	8007a36 <SD_FindSCR+0x96>
 8007a96:	e000      	b.n	8007a9a <SD_FindSCR+0xfa>
      break;
 8007a98:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f003 0308 	and.w	r3, r3, #8
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2208      	movs	r2, #8
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007ab0:	2308      	movs	r3, #8
 8007ab2:	e044      	b.n	8007b3e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d005      	beq.n	8007ace <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007aca:	2302      	movs	r3, #2
 8007acc:	e037      	b.n	8007b3e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007ae4:	2320      	movs	r3, #32
 8007ae6:	e02a      	b.n	8007b3e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f240 523a 	movw	r2, #1338	; 0x53a
 8007af0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	061a      	lsls	r2, r3, #24
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007afe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	0e1b      	lsrs	r3, r3, #24
 8007b0e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	601a      	str	r2, [r3, #0]
    scr++;
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	3304      	adds	r3, #4
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	061a      	lsls	r2, r3, #24
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b26:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	0a1b      	lsrs	r3, r3, #8
 8007b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	0e1b      	lsrs	r3, r3, #24
 8007b36:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	373c      	adds	r7, #60	; 0x3c
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd90      	pop	{r4, r7, pc}

08007b46 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d03f      	beq.n	8007be0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]
 8007b64:	e033      	b.n	8007bce <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 f9ec 	bl	8008f48 <SDMMC_ReadFIFO>
 8007b70:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	0a1b      	lsrs	r3, r3, #8
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3301      	adds	r3, #1
 8007b94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	0e1b      	lsrs	r3, r3, #24
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b07      	cmp	r3, #7
 8007bd2:	d9c8      	bls.n	8007b66 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007be0:	bf00      	nop
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d043      	beq.n	8007c8a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]
 8007c06:	e037      	b.n	8007c78 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	021a      	lsls	r2, r3, #8
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	041a      	lsls	r2, r3, #16
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	061a      	lsls	r2, r3, #24
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f107 0208 	add.w	r2, r7, #8
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f001 f978 	bl	8008f62 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	3301      	adds	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b07      	cmp	r3, #7
 8007c7c:	d9c4      	bls.n	8007c08 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e049      	b.n	8007d38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d106      	bne.n	8007cbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7f9 ff5d 	bl	8001b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	f000 fabf 	bl	8008254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d001      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e054      	b.n	8007e02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0201 	orr.w	r2, r2, #1
 8007d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d022      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d82:	d01d      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a22      	ldr	r2, [pc, #136]	; (8007e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d018      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d013      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	; (8007e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00e      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <HAL_TIM_Base_Start_IT+0xe0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d009      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a1c      	ldr	r2, [pc, #112]	; (8007e24 <HAL_TIM_Base_Start_IT+0xe4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d004      	beq.n	8007dc0 <HAL_TIM_Base_Start_IT+0x80>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a1b      	ldr	r2, [pc, #108]	; (8007e28 <HAL_TIM_Base_Start_IT+0xe8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d115      	bne.n	8007dec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <HAL_TIM_Base_Start_IT+0xec>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b06      	cmp	r3, #6
 8007dd0:	d015      	beq.n	8007dfe <HAL_TIM_Base_Start_IT+0xbe>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd8:	d011      	beq.n	8007dfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dea:	e008      	b.n	8007dfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0201 	orr.w	r2, r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	e000      	b.n	8007e00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40001800 	.word	0x40001800
 8007e2c:	00010007 	.word	0x00010007

08007e30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d122      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0302 	and.w	r3, r3, #2
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d11b      	bne.n	8007e8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0202 	mvn.w	r2, #2
 8007e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9d0 	bl	8008218 <HAL_TIM_IC_CaptureCallback>
 8007e78:	e005      	b.n	8007e86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9c2 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9d3 	bl	800822c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d122      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d11b      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0204 	mvn.w	r2, #4
 8007eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9a6 	bl	8008218 <HAL_TIM_IC_CaptureCallback>
 8007ecc:	e005      	b.n	8007eda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f998 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9a9 	bl	800822c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0308 	and.w	r3, r3, #8
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d122      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b08      	cmp	r3, #8
 8007efa:	d11b      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0208 	mvn.w	r2, #8
 8007f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2204      	movs	r2, #4
 8007f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f003 0303 	and.w	r3, r3, #3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f97c 	bl	8008218 <HAL_TIM_IC_CaptureCallback>
 8007f20:	e005      	b.n	8007f2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f96e 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f97f 	bl	800822c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b10      	cmp	r3, #16
 8007f40:	d122      	bne.n	8007f88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d11b      	bne.n	8007f88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0210 	mvn.w	r2, #16
 8007f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f952 	bl	8008218 <HAL_TIM_IC_CaptureCallback>
 8007f74:	e005      	b.n	8007f82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f944 	bl	8008204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f955 	bl	800822c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d10e      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d107      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f06f 0201 	mvn.w	r2, #1
 8007fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f005 faa8 	bl	800d504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	d10e      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fcc:	2b80      	cmp	r3, #128	; 0x80
 8007fce:	d107      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fb0c 	bl	80085f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fee:	d10e      	bne.n	800800e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffa:	2b80      	cmp	r3, #128	; 0x80
 8007ffc:	d107      	bne.n	800800e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 faff 	bl	800860c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d10e      	bne.n	800803a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d107      	bne.n	800803a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 f903 	bl	8008240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0320 	and.w	r3, r3, #32
 8008044:	2b20      	cmp	r3, #32
 8008046:	d10e      	bne.n	8008066 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b20      	cmp	r3, #32
 8008054:	d107      	bne.n	8008066 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f06f 0220 	mvn.w	r2, #32
 800805e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fabf 	bl	80085e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_TIM_ConfigClockSource+0x1c>
 8008088:	2302      	movs	r3, #2
 800808a:	e0b4      	b.n	80081f6 <HAL_TIM_ConfigClockSource+0x186>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	4b56      	ldr	r3, [pc, #344]	; (8008200 <HAL_TIM_ConfigClockSource+0x190>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d03e      	beq.n	8008144 <HAL_TIM_ConfigClockSource+0xd4>
 80080c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ca:	f200 8087 	bhi.w	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d2:	f000 8086 	beq.w	80081e2 <HAL_TIM_ConfigClockSource+0x172>
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	d87f      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b70      	cmp	r3, #112	; 0x70
 80080de:	d01a      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0xa6>
 80080e0:	2b70      	cmp	r3, #112	; 0x70
 80080e2:	d87b      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b60      	cmp	r3, #96	; 0x60
 80080e6:	d050      	beq.n	800818a <HAL_TIM_ConfigClockSource+0x11a>
 80080e8:	2b60      	cmp	r3, #96	; 0x60
 80080ea:	d877      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d03c      	beq.n	800816a <HAL_TIM_ConfigClockSource+0xfa>
 80080f0:	2b50      	cmp	r3, #80	; 0x50
 80080f2:	d873      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d058      	beq.n	80081aa <HAL_TIM_ConfigClockSource+0x13a>
 80080f8:	2b40      	cmp	r3, #64	; 0x40
 80080fa:	d86f      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d064      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008100:	2b30      	cmp	r3, #48	; 0x30
 8008102:	d86b      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d060      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008108:	2b20      	cmp	r3, #32
 800810a:	d867      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d05c      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008110:	2b10      	cmp	r3, #16
 8008112:	d05a      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008114:	e062      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6899      	ldr	r1, [r3, #8]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	f000 f9af 	bl	8008488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	609a      	str	r2, [r3, #8]
      break;
 8008142:	e04f      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6899      	ldr	r1, [r3, #8]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f000 f998 	bl	8008488 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008166:	609a      	str	r2, [r3, #8]
      break;
 8008168:	e03c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6859      	ldr	r1, [r3, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	461a      	mov	r2, r3
 8008178:	f000 f90c 	bl	8008394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2150      	movs	r1, #80	; 0x50
 8008182:	4618      	mov	r0, r3
 8008184:	f000 f965 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 8008188:	e02c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6859      	ldr	r1, [r3, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	461a      	mov	r2, r3
 8008198:	f000 f92b 	bl	80083f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2160      	movs	r1, #96	; 0x60
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 f955 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 80081a8:	e01c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f000 f8ec 	bl	8008394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f945 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 80081c8:	e00c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f000 f93c 	bl	8008452 <TIM_ITRx_SetConfig>
      break;
 80081da:	e003      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
      break;
 80081e0:	e000      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	fffeff88 	.word	0xfffeff88

08008204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a40      	ldr	r2, [pc, #256]	; (8008368 <TIM_Base_SetConfig+0x114>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d013      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008272:	d00f      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a3d      	ldr	r2, [pc, #244]	; (800836c <TIM_Base_SetConfig+0x118>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d00b      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a3c      	ldr	r2, [pc, #240]	; (8008370 <TIM_Base_SetConfig+0x11c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d007      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a3b      	ldr	r2, [pc, #236]	; (8008374 <TIM_Base_SetConfig+0x120>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_Base_SetConfig+0x40>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a3a      	ldr	r2, [pc, #232]	; (8008378 <TIM_Base_SetConfig+0x124>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d108      	bne.n	80082a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a2f      	ldr	r2, [pc, #188]	; (8008368 <TIM_Base_SetConfig+0x114>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d02b      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082b4:	d027      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a2c      	ldr	r2, [pc, #176]	; (800836c <TIM_Base_SetConfig+0x118>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d023      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <TIM_Base_SetConfig+0x11c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01f      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a2a      	ldr	r2, [pc, #168]	; (8008374 <TIM_Base_SetConfig+0x120>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d01b      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a29      	ldr	r2, [pc, #164]	; (8008378 <TIM_Base_SetConfig+0x124>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d017      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a28      	ldr	r2, [pc, #160]	; (800837c <TIM_Base_SetConfig+0x128>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a27      	ldr	r2, [pc, #156]	; (8008380 <TIM_Base_SetConfig+0x12c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00f      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a26      	ldr	r2, [pc, #152]	; (8008384 <TIM_Base_SetConfig+0x130>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d00b      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a25      	ldr	r2, [pc, #148]	; (8008388 <TIM_Base_SetConfig+0x134>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d007      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a24      	ldr	r2, [pc, #144]	; (800838c <TIM_Base_SetConfig+0x138>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d003      	beq.n	8008306 <TIM_Base_SetConfig+0xb2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a23      	ldr	r2, [pc, #140]	; (8008390 <TIM_Base_SetConfig+0x13c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d108      	bne.n	8008318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800830c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a0a      	ldr	r2, [pc, #40]	; (8008368 <TIM_Base_SetConfig+0x114>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d003      	beq.n	800834c <TIM_Base_SetConfig+0xf8>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a0c      	ldr	r2, [pc, #48]	; (8008378 <TIM_Base_SetConfig+0x124>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d103      	bne.n	8008354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	615a      	str	r2, [r3, #20]
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40010400 	.word	0x40010400
 800837c:	40014000 	.word	0x40014000
 8008380:	40014400 	.word	0x40014400
 8008384:	40014800 	.word	0x40014800
 8008388:	40001800 	.word	0x40001800
 800838c:	40001c00 	.word	0x40001c00
 8008390:	40002000 	.word	0x40002000

08008394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008394:	b480      	push	{r7}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1b      	ldr	r3, [r3, #32]
 80083a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f023 0201 	bic.w	r2, r3, #1
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	011b      	lsls	r3, r3, #4
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f023 030a 	bic.w	r3, r3, #10
 80083d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	621a      	str	r2, [r3, #32]
}
 80083e6:	bf00      	nop
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	f023 0210 	bic.w	r2, r3, #16
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800842e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	011b      	lsls	r3, r3, #4
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	f043 0307 	orr.w	r3, r3, #7
 8008474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	609a      	str	r2, [r3, #8]
}
 800847c:	bf00      	nop
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
 8008494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	021a      	lsls	r2, r3, #8
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	609a      	str	r2, [r3, #8]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084dc:	2302      	movs	r3, #2
 80084de:	e06d      	b.n	80085bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a30      	ldr	r2, [pc, #192]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d004      	beq.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a2f      	ldr	r2, [pc, #188]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d108      	bne.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800851a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a20      	ldr	r2, [pc, #128]	; (80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d022      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008552:	d01d      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1d      	ldr	r2, [pc, #116]	; (80085d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d018      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a1c      	ldr	r2, [pc, #112]	; (80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d013      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a1a      	ldr	r2, [pc, #104]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00e      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a15      	ldr	r2, [pc, #84]	; (80085cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d009      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a16      	ldr	r2, [pc, #88]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d004      	beq.n	8008590 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d10c      	bne.n	80085aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008596:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	40010000 	.word	0x40010000
 80085cc:	40010400 	.word	0x40010400
 80085d0:	40000400 	.word	0x40000400
 80085d4:	40000800 	.word	0x40000800
 80085d8:	40000c00 	.word	0x40000c00
 80085dc:	40014000 	.word	0x40014000
 80085e0:	40001800 	.word	0x40001800

080085e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008614:	bf00      	nop
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e040      	b.n	80086b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f9 faec 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2224      	movs	r2, #36	; 0x24
 800864c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0201 	bic.w	r2, r2, #1
 800865c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f82c 	bl	80086bc <UART_SetConfig>
 8008664:	4603      	mov	r3, r0
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e022      	b.n	80086b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa84 	bl	8008b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800868a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800869a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f042 0201 	orr.w	r2, r2, #1
 80086aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fb0b 	bl	8008cc8 <UART_CheckIdleState>
 80086b2:	4603      	mov	r3, r0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3708      	adds	r7, #8
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	4313      	orrs	r3, r2
 80086de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	4ba6      	ldr	r3, [pc, #664]	; (8008980 <UART_SetConfig+0x2c4>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6812      	ldr	r2, [r2, #0]
 80086ee:	6979      	ldr	r1, [r7, #20]
 80086f0:	430b      	orrs	r3, r1
 80086f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	430a      	orrs	r2, r1
 800872c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a94      	ldr	r2, [pc, #592]	; (8008984 <UART_SetConfig+0x2c8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d120      	bne.n	800877a <UART_SetConfig+0xbe>
 8008738:	4b93      	ldr	r3, [pc, #588]	; (8008988 <UART_SetConfig+0x2cc>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	2b03      	cmp	r3, #3
 8008744:	d816      	bhi.n	8008774 <UART_SetConfig+0xb8>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x90>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800875d 	.word	0x0800875d
 8008750:	08008769 	.word	0x08008769
 8008754:	08008763 	.word	0x08008763
 8008758:	0800876f 	.word	0x0800876f
 800875c:	2301      	movs	r3, #1
 800875e:	77fb      	strb	r3, [r7, #31]
 8008760:	e150      	b.n	8008a04 <UART_SetConfig+0x348>
 8008762:	2302      	movs	r3, #2
 8008764:	77fb      	strb	r3, [r7, #31]
 8008766:	e14d      	b.n	8008a04 <UART_SetConfig+0x348>
 8008768:	2304      	movs	r3, #4
 800876a:	77fb      	strb	r3, [r7, #31]
 800876c:	e14a      	b.n	8008a04 <UART_SetConfig+0x348>
 800876e:	2308      	movs	r3, #8
 8008770:	77fb      	strb	r3, [r7, #31]
 8008772:	e147      	b.n	8008a04 <UART_SetConfig+0x348>
 8008774:	2310      	movs	r3, #16
 8008776:	77fb      	strb	r3, [r7, #31]
 8008778:	e144      	b.n	8008a04 <UART_SetConfig+0x348>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a83      	ldr	r2, [pc, #524]	; (800898c <UART_SetConfig+0x2d0>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d132      	bne.n	80087ea <UART_SetConfig+0x12e>
 8008784:	4b80      	ldr	r3, [pc, #512]	; (8008988 <UART_SetConfig+0x2cc>)
 8008786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878a:	f003 030c 	and.w	r3, r3, #12
 800878e:	2b0c      	cmp	r3, #12
 8008790:	d828      	bhi.n	80087e4 <UART_SetConfig+0x128>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <UART_SetConfig+0xdc>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080087cd 	.word	0x080087cd
 800879c:	080087e5 	.word	0x080087e5
 80087a0:	080087e5 	.word	0x080087e5
 80087a4:	080087e5 	.word	0x080087e5
 80087a8:	080087d9 	.word	0x080087d9
 80087ac:	080087e5 	.word	0x080087e5
 80087b0:	080087e5 	.word	0x080087e5
 80087b4:	080087e5 	.word	0x080087e5
 80087b8:	080087d3 	.word	0x080087d3
 80087bc:	080087e5 	.word	0x080087e5
 80087c0:	080087e5 	.word	0x080087e5
 80087c4:	080087e5 	.word	0x080087e5
 80087c8:	080087df 	.word	0x080087df
 80087cc:	2300      	movs	r3, #0
 80087ce:	77fb      	strb	r3, [r7, #31]
 80087d0:	e118      	b.n	8008a04 <UART_SetConfig+0x348>
 80087d2:	2302      	movs	r3, #2
 80087d4:	77fb      	strb	r3, [r7, #31]
 80087d6:	e115      	b.n	8008a04 <UART_SetConfig+0x348>
 80087d8:	2304      	movs	r3, #4
 80087da:	77fb      	strb	r3, [r7, #31]
 80087dc:	e112      	b.n	8008a04 <UART_SetConfig+0x348>
 80087de:	2308      	movs	r3, #8
 80087e0:	77fb      	strb	r3, [r7, #31]
 80087e2:	e10f      	b.n	8008a04 <UART_SetConfig+0x348>
 80087e4:	2310      	movs	r3, #16
 80087e6:	77fb      	strb	r3, [r7, #31]
 80087e8:	e10c      	b.n	8008a04 <UART_SetConfig+0x348>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a68      	ldr	r2, [pc, #416]	; (8008990 <UART_SetConfig+0x2d4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d120      	bne.n	8008836 <UART_SetConfig+0x17a>
 80087f4:	4b64      	ldr	r3, [pc, #400]	; (8008988 <UART_SetConfig+0x2cc>)
 80087f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087fe:	2b30      	cmp	r3, #48	; 0x30
 8008800:	d013      	beq.n	800882a <UART_SetConfig+0x16e>
 8008802:	2b30      	cmp	r3, #48	; 0x30
 8008804:	d814      	bhi.n	8008830 <UART_SetConfig+0x174>
 8008806:	2b20      	cmp	r3, #32
 8008808:	d009      	beq.n	800881e <UART_SetConfig+0x162>
 800880a:	2b20      	cmp	r3, #32
 800880c:	d810      	bhi.n	8008830 <UART_SetConfig+0x174>
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <UART_SetConfig+0x15c>
 8008812:	2b10      	cmp	r3, #16
 8008814:	d006      	beq.n	8008824 <UART_SetConfig+0x168>
 8008816:	e00b      	b.n	8008830 <UART_SetConfig+0x174>
 8008818:	2300      	movs	r3, #0
 800881a:	77fb      	strb	r3, [r7, #31]
 800881c:	e0f2      	b.n	8008a04 <UART_SetConfig+0x348>
 800881e:	2302      	movs	r3, #2
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e0ef      	b.n	8008a04 <UART_SetConfig+0x348>
 8008824:	2304      	movs	r3, #4
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e0ec      	b.n	8008a04 <UART_SetConfig+0x348>
 800882a:	2308      	movs	r3, #8
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e0e9      	b.n	8008a04 <UART_SetConfig+0x348>
 8008830:	2310      	movs	r3, #16
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e0e6      	b.n	8008a04 <UART_SetConfig+0x348>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a56      	ldr	r2, [pc, #344]	; (8008994 <UART_SetConfig+0x2d8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d120      	bne.n	8008882 <UART_SetConfig+0x1c6>
 8008840:	4b51      	ldr	r3, [pc, #324]	; (8008988 <UART_SetConfig+0x2cc>)
 8008842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800884a:	2bc0      	cmp	r3, #192	; 0xc0
 800884c:	d013      	beq.n	8008876 <UART_SetConfig+0x1ba>
 800884e:	2bc0      	cmp	r3, #192	; 0xc0
 8008850:	d814      	bhi.n	800887c <UART_SetConfig+0x1c0>
 8008852:	2b80      	cmp	r3, #128	; 0x80
 8008854:	d009      	beq.n	800886a <UART_SetConfig+0x1ae>
 8008856:	2b80      	cmp	r3, #128	; 0x80
 8008858:	d810      	bhi.n	800887c <UART_SetConfig+0x1c0>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <UART_SetConfig+0x1a8>
 800885e:	2b40      	cmp	r3, #64	; 0x40
 8008860:	d006      	beq.n	8008870 <UART_SetConfig+0x1b4>
 8008862:	e00b      	b.n	800887c <UART_SetConfig+0x1c0>
 8008864:	2300      	movs	r3, #0
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	e0cc      	b.n	8008a04 <UART_SetConfig+0x348>
 800886a:	2302      	movs	r3, #2
 800886c:	77fb      	strb	r3, [r7, #31]
 800886e:	e0c9      	b.n	8008a04 <UART_SetConfig+0x348>
 8008870:	2304      	movs	r3, #4
 8008872:	77fb      	strb	r3, [r7, #31]
 8008874:	e0c6      	b.n	8008a04 <UART_SetConfig+0x348>
 8008876:	2308      	movs	r3, #8
 8008878:	77fb      	strb	r3, [r7, #31]
 800887a:	e0c3      	b.n	8008a04 <UART_SetConfig+0x348>
 800887c:	2310      	movs	r3, #16
 800887e:	77fb      	strb	r3, [r7, #31]
 8008880:	e0c0      	b.n	8008a04 <UART_SetConfig+0x348>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a44      	ldr	r2, [pc, #272]	; (8008998 <UART_SetConfig+0x2dc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d125      	bne.n	80088d8 <UART_SetConfig+0x21c>
 800888c:	4b3e      	ldr	r3, [pc, #248]	; (8008988 <UART_SetConfig+0x2cc>)
 800888e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800889a:	d017      	beq.n	80088cc <UART_SetConfig+0x210>
 800889c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088a0:	d817      	bhi.n	80088d2 <UART_SetConfig+0x216>
 80088a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a6:	d00b      	beq.n	80088c0 <UART_SetConfig+0x204>
 80088a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ac:	d811      	bhi.n	80088d2 <UART_SetConfig+0x216>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <UART_SetConfig+0x1fe>
 80088b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b6:	d006      	beq.n	80088c6 <UART_SetConfig+0x20a>
 80088b8:	e00b      	b.n	80088d2 <UART_SetConfig+0x216>
 80088ba:	2300      	movs	r3, #0
 80088bc:	77fb      	strb	r3, [r7, #31]
 80088be:	e0a1      	b.n	8008a04 <UART_SetConfig+0x348>
 80088c0:	2302      	movs	r3, #2
 80088c2:	77fb      	strb	r3, [r7, #31]
 80088c4:	e09e      	b.n	8008a04 <UART_SetConfig+0x348>
 80088c6:	2304      	movs	r3, #4
 80088c8:	77fb      	strb	r3, [r7, #31]
 80088ca:	e09b      	b.n	8008a04 <UART_SetConfig+0x348>
 80088cc:	2308      	movs	r3, #8
 80088ce:	77fb      	strb	r3, [r7, #31]
 80088d0:	e098      	b.n	8008a04 <UART_SetConfig+0x348>
 80088d2:	2310      	movs	r3, #16
 80088d4:	77fb      	strb	r3, [r7, #31]
 80088d6:	e095      	b.n	8008a04 <UART_SetConfig+0x348>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a2f      	ldr	r2, [pc, #188]	; (800899c <UART_SetConfig+0x2e0>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d125      	bne.n	800892e <UART_SetConfig+0x272>
 80088e2:	4b29      	ldr	r3, [pc, #164]	; (8008988 <UART_SetConfig+0x2cc>)
 80088e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088f0:	d017      	beq.n	8008922 <UART_SetConfig+0x266>
 80088f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088f6:	d817      	bhi.n	8008928 <UART_SetConfig+0x26c>
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fc:	d00b      	beq.n	8008916 <UART_SetConfig+0x25a>
 80088fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008902:	d811      	bhi.n	8008928 <UART_SetConfig+0x26c>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <UART_SetConfig+0x254>
 8008908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800890c:	d006      	beq.n	800891c <UART_SetConfig+0x260>
 800890e:	e00b      	b.n	8008928 <UART_SetConfig+0x26c>
 8008910:	2301      	movs	r3, #1
 8008912:	77fb      	strb	r3, [r7, #31]
 8008914:	e076      	b.n	8008a04 <UART_SetConfig+0x348>
 8008916:	2302      	movs	r3, #2
 8008918:	77fb      	strb	r3, [r7, #31]
 800891a:	e073      	b.n	8008a04 <UART_SetConfig+0x348>
 800891c:	2304      	movs	r3, #4
 800891e:	77fb      	strb	r3, [r7, #31]
 8008920:	e070      	b.n	8008a04 <UART_SetConfig+0x348>
 8008922:	2308      	movs	r3, #8
 8008924:	77fb      	strb	r3, [r7, #31]
 8008926:	e06d      	b.n	8008a04 <UART_SetConfig+0x348>
 8008928:	2310      	movs	r3, #16
 800892a:	77fb      	strb	r3, [r7, #31]
 800892c:	e06a      	b.n	8008a04 <UART_SetConfig+0x348>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <UART_SetConfig+0x2e4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d138      	bne.n	80089aa <UART_SetConfig+0x2ee>
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <UART_SetConfig+0x2cc>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008942:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008946:	d017      	beq.n	8008978 <UART_SetConfig+0x2bc>
 8008948:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800894c:	d82a      	bhi.n	80089a4 <UART_SetConfig+0x2e8>
 800894e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008952:	d00b      	beq.n	800896c <UART_SetConfig+0x2b0>
 8008954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008958:	d824      	bhi.n	80089a4 <UART_SetConfig+0x2e8>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <UART_SetConfig+0x2aa>
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008962:	d006      	beq.n	8008972 <UART_SetConfig+0x2b6>
 8008964:	e01e      	b.n	80089a4 <UART_SetConfig+0x2e8>
 8008966:	2300      	movs	r3, #0
 8008968:	77fb      	strb	r3, [r7, #31]
 800896a:	e04b      	b.n	8008a04 <UART_SetConfig+0x348>
 800896c:	2302      	movs	r3, #2
 800896e:	77fb      	strb	r3, [r7, #31]
 8008970:	e048      	b.n	8008a04 <UART_SetConfig+0x348>
 8008972:	2304      	movs	r3, #4
 8008974:	77fb      	strb	r3, [r7, #31]
 8008976:	e045      	b.n	8008a04 <UART_SetConfig+0x348>
 8008978:	2308      	movs	r3, #8
 800897a:	77fb      	strb	r3, [r7, #31]
 800897c:	e042      	b.n	8008a04 <UART_SetConfig+0x348>
 800897e:	bf00      	nop
 8008980:	efff69f3 	.word	0xefff69f3
 8008984:	40011000 	.word	0x40011000
 8008988:	40023800 	.word	0x40023800
 800898c:	40004400 	.word	0x40004400
 8008990:	40004800 	.word	0x40004800
 8008994:	40004c00 	.word	0x40004c00
 8008998:	40005000 	.word	0x40005000
 800899c:	40011400 	.word	0x40011400
 80089a0:	40007800 	.word	0x40007800
 80089a4:	2310      	movs	r3, #16
 80089a6:	77fb      	strb	r3, [r7, #31]
 80089a8:	e02c      	b.n	8008a04 <UART_SetConfig+0x348>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a72      	ldr	r2, [pc, #456]	; (8008b78 <UART_SetConfig+0x4bc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d125      	bne.n	8008a00 <UART_SetConfig+0x344>
 80089b4:	4b71      	ldr	r3, [pc, #452]	; (8008b7c <UART_SetConfig+0x4c0>)
 80089b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80089be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80089c2:	d017      	beq.n	80089f4 <UART_SetConfig+0x338>
 80089c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80089c8:	d817      	bhi.n	80089fa <UART_SetConfig+0x33e>
 80089ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089ce:	d00b      	beq.n	80089e8 <UART_SetConfig+0x32c>
 80089d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089d4:	d811      	bhi.n	80089fa <UART_SetConfig+0x33e>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <UART_SetConfig+0x326>
 80089da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089de:	d006      	beq.n	80089ee <UART_SetConfig+0x332>
 80089e0:	e00b      	b.n	80089fa <UART_SetConfig+0x33e>
 80089e2:	2300      	movs	r3, #0
 80089e4:	77fb      	strb	r3, [r7, #31]
 80089e6:	e00d      	b.n	8008a04 <UART_SetConfig+0x348>
 80089e8:	2302      	movs	r3, #2
 80089ea:	77fb      	strb	r3, [r7, #31]
 80089ec:	e00a      	b.n	8008a04 <UART_SetConfig+0x348>
 80089ee:	2304      	movs	r3, #4
 80089f0:	77fb      	strb	r3, [r7, #31]
 80089f2:	e007      	b.n	8008a04 <UART_SetConfig+0x348>
 80089f4:	2308      	movs	r3, #8
 80089f6:	77fb      	strb	r3, [r7, #31]
 80089f8:	e004      	b.n	8008a04 <UART_SetConfig+0x348>
 80089fa:	2310      	movs	r3, #16
 80089fc:	77fb      	strb	r3, [r7, #31]
 80089fe:	e001      	b.n	8008a04 <UART_SetConfig+0x348>
 8008a00:	2310      	movs	r3, #16
 8008a02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a0c:	d15b      	bne.n	8008ac6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008a0e:	7ffb      	ldrb	r3, [r7, #31]
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d828      	bhi.n	8008a66 <UART_SetConfig+0x3aa>
 8008a14:	a201      	add	r2, pc, #4	; (adr r2, 8008a1c <UART_SetConfig+0x360>)
 8008a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a1a:	bf00      	nop
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a49 	.word	0x08008a49
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	08008a67 	.word	0x08008a67
 8008a2c:	08008a57 	.word	0x08008a57
 8008a30:	08008a67 	.word	0x08008a67
 8008a34:	08008a67 	.word	0x08008a67
 8008a38:	08008a67 	.word	0x08008a67
 8008a3c:	08008a5f 	.word	0x08008a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a40:	f7fc f9b0 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8008a44:	61b8      	str	r0, [r7, #24]
        break;
 8008a46:	e013      	b.n	8008a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7fc f9c0 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8008a4c:	61b8      	str	r0, [r7, #24]
        break;
 8008a4e:	e00f      	b.n	8008a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a50:	4b4b      	ldr	r3, [pc, #300]	; (8008b80 <UART_SetConfig+0x4c4>)
 8008a52:	61bb      	str	r3, [r7, #24]
        break;
 8008a54:	e00c      	b.n	8008a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a56:	f7fc f8d3 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8008a5a:	61b8      	str	r0, [r7, #24]
        break;
 8008a5c:	e008      	b.n	8008a70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a62:	61bb      	str	r3, [r7, #24]
        break;
 8008a64:	e004      	b.n	8008a70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	77bb      	strb	r3, [r7, #30]
        break;
 8008a6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d074      	beq.n	8008b60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	005a      	lsls	r2, r3, #1
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	441a      	add	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b0f      	cmp	r3, #15
 8008a90:	d916      	bls.n	8008ac0 <UART_SetConfig+0x404>
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a98:	d212      	bcs.n	8008ac0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f023 030f 	bic.w	r3, r3, #15
 8008aa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	085b      	lsrs	r3, r3, #1
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	89fb      	ldrh	r3, [r7, #14]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	89fa      	ldrh	r2, [r7, #14]
 8008abc:	60da      	str	r2, [r3, #12]
 8008abe:	e04f      	b.n	8008b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	77bb      	strb	r3, [r7, #30]
 8008ac4:	e04c      	b.n	8008b60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008ac6:	7ffb      	ldrb	r3, [r7, #31]
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d828      	bhi.n	8008b1e <UART_SetConfig+0x462>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <UART_SetConfig+0x418>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008af9 	.word	0x08008af9
 8008ad8:	08008b01 	.word	0x08008b01
 8008adc:	08008b09 	.word	0x08008b09
 8008ae0:	08008b1f 	.word	0x08008b1f
 8008ae4:	08008b0f 	.word	0x08008b0f
 8008ae8:	08008b1f 	.word	0x08008b1f
 8008aec:	08008b1f 	.word	0x08008b1f
 8008af0:	08008b1f 	.word	0x08008b1f
 8008af4:	08008b17 	.word	0x08008b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008af8:	f7fc f954 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8008afc:	61b8      	str	r0, [r7, #24]
        break;
 8008afe:	e013      	b.n	8008b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b00:	f7fc f964 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8008b04:	61b8      	str	r0, [r7, #24]
        break;
 8008b06:	e00f      	b.n	8008b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b08:	4b1d      	ldr	r3, [pc, #116]	; (8008b80 <UART_SetConfig+0x4c4>)
 8008b0a:	61bb      	str	r3, [r7, #24]
        break;
 8008b0c:	e00c      	b.n	8008b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b0e:	f7fc f877 	bl	8004c00 <HAL_RCC_GetSysClockFreq>
 8008b12:	61b8      	str	r0, [r7, #24]
        break;
 8008b14:	e008      	b.n	8008b28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1a:	61bb      	str	r3, [r7, #24]
        break;
 8008b1c:	e004      	b.n	8008b28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	77bb      	strb	r3, [r7, #30]
        break;
 8008b26:	bf00      	nop
    }

    if (pclk != 0U)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d018      	beq.n	8008b60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	085a      	lsrs	r2, r3, #1
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	2b0f      	cmp	r3, #15
 8008b46:	d909      	bls.n	8008b5c <UART_SetConfig+0x4a0>
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b4e:	d205      	bcs.n	8008b5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	e001      	b.n	8008b60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40007c00 	.word	0x40007c00
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	00f42400 	.word	0x00f42400

08008b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c82:	d10a      	bne.n	8008c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cd8:	f7f9 fdb0 	bl	800283c <HAL_GetTick>
 8008cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d10e      	bne.n	8008d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f831 	bl	8008d62 <UART_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e027      	b.n	8008d5a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d10e      	bne.n	8008d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f81b 	bl	8008d62 <UART_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e011      	b.n	8008d5a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b09c      	sub	sp, #112	; 0x70
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	603b      	str	r3, [r7, #0]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d72:	e0a7      	b.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d7a:	f000 80a3 	beq.w	8008ec4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7e:	f7f9 fd5d 	bl	800283c <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d13f      	bne.n	8008e14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008da8:	667b      	str	r3, [r7, #100]	; 0x64
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008db4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008db8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dba:	e841 2300 	strex	r3, r2, [r1]
 8008dbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e6      	bne.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3308      	adds	r3, #8
 8008de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008de6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008de8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e5      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	e068      	b.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d050      	beq.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e30:	d148      	bne.n	8008ec4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e6      	bne.n	8008e3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e8e:	623a      	str	r2, [r7, #32]
 8008e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	69f9      	ldr	r1, [r7, #28]
 8008e94:	6a3a      	ldr	r2, [r7, #32]
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e5      	bne.n	8008e6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e010      	b.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	69da      	ldr	r2, [r3, #28]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	bf0c      	ite	eq
 8008ed4:	2301      	moveq	r3, #1
 8008ed6:	2300      	movne	r3, #0
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	461a      	mov	r2, r3
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	f43f af48 	beq.w	8008d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3770      	adds	r7, #112	; 0x70
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	b480      	push	{r7}
 8008ef4:	b085      	sub	sp, #20
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	f107 001c 	add.w	r0, r7, #28
 8008efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008f06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008f08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008f0a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008f0e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008f12:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008f16:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008f1a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <SDMMC_Init+0x54>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	b004      	add	sp, #16
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	ffff8100 	.word	0xffff8100

08008f48 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2203      	movs	r2, #3
 8008f90:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0303 	and.w	r3, r3, #3
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008fe0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008fe6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	4b06      	ldr	r3, [pc, #24]	; (800900c <SDMMC_SendCommand+0x50>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	fffff000 	.word	0xfffff000

08009010 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	b2db      	uxtb	r3, r3
}
 800901e:	4618      	mov	r0, r3
 8009020:	370c      	adds	r7, #12
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3314      	adds	r3, #20
 8009038:	461a      	mov	r2, r3
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	4413      	add	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
}  
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009076:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800907c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009082:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4313      	orrs	r3, r2
 8009088:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800909a:	2300      	movs	r3, #0

}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b088      	sub	sp, #32
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80090b6:	2310      	movs	r3, #16
 80090b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090ba:	2340      	movs	r3, #64	; 0x40
 80090bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090be:	2300      	movs	r3, #0
 80090c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090c8:	f107 0308 	add.w	r3, r7, #8
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7ff ff74 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80090d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d8:	2110      	movs	r1, #16
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa1a 	bl	8009514 <SDMMC_GetCmdResp1>
 80090e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090e2:	69fb      	ldr	r3, [r7, #28]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090fa:	2311      	movs	r3, #17
 80090fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80090fe:	2340      	movs	r3, #64	; 0x40
 8009100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009102:	2300      	movs	r3, #0
 8009104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800910c:	f107 0308 	add.w	r3, r7, #8
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff ff52 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009118:	f241 3288 	movw	r2, #5000	; 0x1388
 800911c:	2111      	movs	r1, #17
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f9f8 	bl	8009514 <SDMMC_GetCmdResp1>
 8009124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009126:	69fb      	ldr	r3, [r7, #28]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3720      	adds	r7, #32
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800913e:	2312      	movs	r3, #18
 8009140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009142:	2340      	movs	r3, #64	; 0x40
 8009144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009146:	2300      	movs	r3, #0
 8009148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800914a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009150:	f107 0308 	add.w	r3, r7, #8
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff ff30 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800915c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009160:	2112      	movs	r1, #18
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9d6 	bl	8009514 <SDMMC_GetCmdResp1>
 8009168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800916a:	69fb      	ldr	r3, [r7, #28]
}
 800916c:	4618      	mov	r0, r3
 800916e:	3720      	adds	r7, #32
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009182:	2318      	movs	r3, #24
 8009184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009186:	2340      	movs	r3, #64	; 0x40
 8009188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800918e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009192:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009194:	f107 0308 	add.w	r3, r7, #8
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff ff0e 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80091a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a4:	2118      	movs	r1, #24
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f9b4 	bl	8009514 <SDMMC_GetCmdResp1>
 80091ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091ae:	69fb      	ldr	r3, [r7, #28]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3720      	adds	r7, #32
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091c6:	2319      	movs	r3, #25
 80091c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ca:	2340      	movs	r3, #64	; 0x40
 80091cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091d8:	f107 0308 	add.w	r3, r7, #8
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff feec 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	2119      	movs	r1, #25
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f992 	bl	8009514 <SDMMC_GetCmdResp1>
 80091f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f2:	69fb      	ldr	r3, [r7, #28]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b088      	sub	sp, #32
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009208:	230c      	movs	r3, #12
 800920a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800920c:	2340      	movs	r3, #64	; 0x40
 800920e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009218:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff fecb 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009226:	4a05      	ldr	r2, [pc, #20]	; (800923c <SDMMC_CmdStopTransfer+0x40>)
 8009228:	210c      	movs	r1, #12
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f972 	bl	8009514 <SDMMC_GetCmdResp1>
 8009230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009232:	69fb      	ldr	r3, [r7, #28]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3720      	adds	r7, #32
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	05f5e100 	.word	0x05f5e100

08009240 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	; 0x28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009250:	2307      	movs	r3, #7
 8009252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009254:	2340      	movs	r3, #64	; 0x40
 8009256:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009258:	2300      	movs	r3, #0
 800925a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800925c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009260:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009262:	f107 0310 	add.w	r3, r7, #16
 8009266:	4619      	mov	r1, r3
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f7ff fea7 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800926e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009272:	2107      	movs	r1, #7
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f94d 	bl	8009514 <SDMMC_GetCmdResp1>
 800927a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800927e:	4618      	mov	r0, r3
 8009280:	3728      	adds	r7, #40	; 0x28
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b088      	sub	sp, #32
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800929e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092a4:	f107 0308 	add.w	r3, r7, #8
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff fe86 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fb67 	bl	8009984 <SDMMC_GetCmdError>
 80092b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092b8:	69fb      	ldr	r3, [r7, #28]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3720      	adds	r7, #32
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b088      	sub	sp, #32
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80092ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092d0:	2308      	movs	r3, #8
 80092d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092d4:	2340      	movs	r3, #64	; 0x40
 80092d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092d8:	2300      	movs	r3, #0
 80092da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092e2:	f107 0308 	add.w	r3, r7, #8
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff fe67 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fafa 	bl	80098e8 <SDMMC_GetCmdResp7>
 80092f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092f6:	69fb      	ldr	r3, [r7, #28]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800930e:	2337      	movs	r3, #55	; 0x37
 8009310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009312:	2340      	movs	r3, #64	; 0x40
 8009314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800931a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800931e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009320:	f107 0308 	add.w	r3, r7, #8
 8009324:	4619      	mov	r1, r3
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff fe48 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800932c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009330:	2137      	movs	r1, #55	; 0x37
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 f8ee 	bl	8009514 <SDMMC_GetCmdResp1>
 8009338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800933a:	69fb      	ldr	r3, [r7, #28]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3720      	adds	r7, #32
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4b0d      	ldr	r3, [pc, #52]	; (8009388 <SDMMC_CmdAppOperCommand+0x44>)
 8009352:	4313      	orrs	r3, r2
 8009354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009356:	2329      	movs	r3, #41	; 0x29
 8009358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800935a:	2340      	movs	r3, #64	; 0x40
 800935c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800935e:	2300      	movs	r3, #0
 8009360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009368:	f107 0308 	add.w	r3, r7, #8
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fe24 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa03 	bl	8009780 <SDMMC_GetCmdResp3>
 800937a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800937c:	69fb      	ldr	r3, [r7, #28]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	80100000 	.word	0x80100000

0800938c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800939a:	2306      	movs	r3, #6
 800939c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800939e:	2340      	movs	r3, #64	; 0x40
 80093a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093a2:	2300      	movs	r3, #0
 80093a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093ac:	f107 0308 	add.w	r3, r7, #8
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fe02 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80093b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80093bc:	2106      	movs	r1, #6
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f8a8 	bl	8009514 <SDMMC_GetCmdResp1>
 80093c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093c6:	69fb      	ldr	r3, [r7, #28]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3720      	adds	r7, #32
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80093dc:	2333      	movs	r3, #51	; 0x33
 80093de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093e0:	2340      	movs	r3, #64	; 0x40
 80093e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093ee:	f107 0308 	add.w	r3, r7, #8
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff fde1 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80093fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fe:	2133      	movs	r1, #51	; 0x33
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f887 	bl	8009514 <SDMMC_GetCmdResp1>
 8009406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009408:	69fb      	ldr	r3, [r7, #28]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3720      	adds	r7, #32
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b088      	sub	sp, #32
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800941a:	2300      	movs	r3, #0
 800941c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800941e:	2302      	movs	r3, #2
 8009420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009422:	23c0      	movs	r3, #192	; 0xc0
 8009424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800942a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff fdc0 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f957 	bl	80096f0 <SDMMC_GetCmdResp2>
 8009442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009444:	69fb      	ldr	r3, [r7, #28]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3720      	adds	r7, #32
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b088      	sub	sp, #32
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800945c:	2309      	movs	r3, #9
 800945e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009460:	23c0      	movs	r3, #192	; 0xc0
 8009462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800946c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800946e:	f107 0308 	add.w	r3, r7, #8
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff fda1 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f938 	bl	80096f0 <SDMMC_GetCmdResp2>
 8009480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009482:	69fb      	ldr	r3, [r7, #28]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800949a:	2303      	movs	r3, #3
 800949c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800949e:	2340      	movs	r3, #64	; 0x40
 80094a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094ac:	f107 0308 	add.w	r3, r7, #8
 80094b0:	4619      	mov	r1, r3
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7ff fd82 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	2103      	movs	r1, #3
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f99d 	bl	80097fc <SDMMC_GetCmdResp6>
 80094c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094c4:	69fb      	ldr	r3, [r7, #28]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3720      	adds	r7, #32
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b088      	sub	sp, #32
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80094dc:	230d      	movs	r3, #13
 80094de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094e0:	2340      	movs	r3, #64	; 0x40
 80094e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fd61 	bl	8008fbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80094fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80094fe:	210d      	movs	r1, #13
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f807 	bl	8009514 <SDMMC_GetCmdResp1>
 8009506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009508:	69fb      	ldr	r3, [r7, #28]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3720      	adds	r7, #32
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b088      	sub	sp, #32
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	460b      	mov	r3, r1
 800951e:	607a      	str	r2, [r7, #4]
 8009520:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009522:	4b70      	ldr	r3, [pc, #448]	; (80096e4 <SDMMC_GetCmdResp1+0x1d0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a70      	ldr	r2, [pc, #448]	; (80096e8 <SDMMC_GetCmdResp1+0x1d4>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	0a5a      	lsrs	r2, r3, #9
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	fb02 f303 	mul.w	r3, r2, r3
 8009534:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009536:	69fb      	ldr	r3, [r7, #28]
 8009538:	1e5a      	subs	r2, r3, #1
 800953a:	61fa      	str	r2, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009544:	e0c9      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0ef      	beq.n	8009536 <SDMMC_GetCmdResp1+0x22>
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1ea      	bne.n	8009536 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2204      	movs	r2, #4
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009572:	2304      	movs	r3, #4
 8009574:	e0b1      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009588:	2301      	movs	r3, #1
 800958a:	e0a6      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	22c5      	movs	r2, #197	; 0xc5
 8009590:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f7ff fd3c 	bl	8009010 <SDMMC_GetCommandResponse>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	7afb      	ldrb	r3, [r7, #11]
 800959e:	4293      	cmp	r3, r2
 80095a0:	d001      	beq.n	80095a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e099      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f7ff fd3e 	bl	800902a <SDMMC_GetResponse>
 80095ae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095b0:	697a      	ldr	r2, [r7, #20]
 80095b2:	4b4e      	ldr	r3, [pc, #312]	; (80096ec <SDMMC_GetCmdResp1+0x1d8>)
 80095b4:	4013      	ands	r3, r2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d101      	bne.n	80095be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	e08d      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	da02      	bge.n	80095ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095c8:	e087      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095d4:	2340      	movs	r3, #64	; 0x40
 80095d6:	e080      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095e2:	2380      	movs	r3, #128	; 0x80
 80095e4:	e079      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095f4:	e071      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009604:	e069      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009614:	e061      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d002      	beq.n	8009626 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009624:	e059      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d002      	beq.n	8009636 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009634:	e051      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009640:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009644:	e049      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009654:	e041      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009664:	e039      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009670:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009674:	e031      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d002      	beq.n	8009686 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009680:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009684:	e029      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009690:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009694:	e021      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d002      	beq.n	80096a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80096a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096a4:	e019      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096b4:	e011      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80096c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096c4:	e009      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d002      	beq.n	80096d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80096d4:	e001      	b.n	80096da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3720      	adds	r7, #32
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20000000 	.word	0x20000000
 80096e8:	10624dd3 	.word	0x10624dd3
 80096ec:	fdffe008 	.word	0xfdffe008

080096f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096f8:	4b1f      	ldr	r3, [pc, #124]	; (8009778 <SDMMC_GetCmdResp2+0x88>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a1f      	ldr	r2, [pc, #124]	; (800977c <SDMMC_GetCmdResp2+0x8c>)
 80096fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009702:	0a5b      	lsrs	r3, r3, #9
 8009704:	f241 3288 	movw	r2, #5000	; 0x1388
 8009708:	fb02 f303 	mul.w	r3, r2, r3
 800970c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	1e5a      	subs	r2, r3, #1
 8009712:	60fa      	str	r2, [r7, #12]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d102      	bne.n	800971e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009718:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800971c:	e026      	b.n	800976c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009722:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0ef      	beq.n	800970e <SDMMC_GetCmdResp2+0x1e>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009734:	2b00      	cmp	r3, #0
 8009736:	d1ea      	bne.n	800970e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d004      	beq.n	800974e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2204      	movs	r2, #4
 8009748:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800974a:	2304      	movs	r3, #4
 800974c:	e00e      	b.n	800976c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009760:	2301      	movs	r3, #1
 8009762:	e003      	b.n	800976c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	22c5      	movs	r2, #197	; 0xc5
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr
 8009778:	20000000 	.word	0x20000000
 800977c:	10624dd3 	.word	0x10624dd3

08009780 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009788:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <SDMMC_GetCmdResp3+0x74>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a1a      	ldr	r2, [pc, #104]	; (80097f8 <SDMMC_GetCmdResp3+0x78>)
 800978e:	fba2 2303 	umull	r2, r3, r2, r3
 8009792:	0a5b      	lsrs	r3, r3, #9
 8009794:	f241 3288 	movw	r2, #5000	; 0x1388
 8009798:	fb02 f303 	mul.w	r3, r2, r3
 800979c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1e5a      	subs	r2, r3, #1
 80097a2:	60fa      	str	r2, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097ac:	e01b      	b.n	80097e6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0ef      	beq.n	800979e <SDMMC_GetCmdResp3+0x1e>
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d1ea      	bne.n	800979e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2204      	movs	r2, #4
 80097d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097da:	2304      	movs	r3, #4
 80097dc:	e003      	b.n	80097e6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	22c5      	movs	r2, #197	; 0xc5
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000000 	.word	0x20000000
 80097f8:	10624dd3 	.word	0x10624dd3

080097fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	460b      	mov	r3, r1
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800980a:	4b35      	ldr	r3, [pc, #212]	; (80098e0 <SDMMC_GetCmdResp6+0xe4>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a35      	ldr	r2, [pc, #212]	; (80098e4 <SDMMC_GetCmdResp6+0xe8>)
 8009810:	fba2 2303 	umull	r2, r3, r2, r3
 8009814:	0a5b      	lsrs	r3, r3, #9
 8009816:	f241 3288 	movw	r2, #5000	; 0x1388
 800981a:	fb02 f303 	mul.w	r3, r2, r3
 800981e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	1e5a      	subs	r2, r3, #1
 8009824:	61fa      	str	r2, [r7, #28]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800982a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800982e:	e052      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009834:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800983c:	2b00      	cmp	r3, #0
 800983e:	d0ef      	beq.n	8009820 <SDMMC_GetCmdResp6+0x24>
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1ea      	bne.n	8009820 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2204      	movs	r2, #4
 800985a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800985c:	2304      	movs	r3, #4
 800985e:	e03a      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2201      	movs	r2, #1
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009872:	2301      	movs	r3, #1
 8009874:	e02f      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff fbca 	bl	8009010 <SDMMC_GetCommandResponse>
 800987c:	4603      	mov	r3, r0
 800987e:	461a      	mov	r2, r3
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	4293      	cmp	r3, r2
 8009884:	d001      	beq.n	800988a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009886:	2301      	movs	r3, #1
 8009888:	e025      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	22c5      	movs	r2, #197	; 0xc5
 800988e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009890:	2100      	movs	r1, #0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fbc9 	bl	800902a <SDMMC_GetResponse>
 8009898:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	0c1b      	lsrs	r3, r3, #16
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	e011      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098c0:	e009      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d0:	e001      	b.n	80098d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000000 	.word	0x20000000
 80098e4:	10624dd3 	.word	0x10624dd3

080098e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098f0:	4b22      	ldr	r3, [pc, #136]	; (800997c <SDMMC_GetCmdResp7+0x94>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a22      	ldr	r2, [pc, #136]	; (8009980 <SDMMC_GetCmdResp7+0x98>)
 80098f6:	fba2 2303 	umull	r2, r3, r2, r3
 80098fa:	0a5b      	lsrs	r3, r3, #9
 80098fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009900:	fb02 f303 	mul.w	r3, r2, r3
 8009904:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	60fa      	str	r2, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d102      	bne.n	8009916 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009910:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009914:	e02c      	b.n	8009970 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800991a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0ef      	beq.n	8009906 <SDMMC_GetCmdResp7+0x1e>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1ea      	bne.n	8009906 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	2b00      	cmp	r3, #0
 800993a:	d004      	beq.n	8009946 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2204      	movs	r2, #4
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009942:	2304      	movs	r3, #4
 8009944:	e014      	b.n	8009970 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d004      	beq.n	800995c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009958:	2301      	movs	r3, #1
 800995a:	e009      	b.n	8009970 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d002      	beq.n	800996e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2240      	movs	r2, #64	; 0x40
 800996c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800996e:	2300      	movs	r3, #0
  
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	20000000 	.word	0x20000000
 8009980:	10624dd3 	.word	0x10624dd3

08009984 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800998c:	4b11      	ldr	r3, [pc, #68]	; (80099d4 <SDMMC_GetCmdError+0x50>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a11      	ldr	r2, [pc, #68]	; (80099d8 <SDMMC_GetCmdError+0x54>)
 8009992:	fba2 2303 	umull	r2, r3, r2, r3
 8009996:	0a5b      	lsrs	r3, r3, #9
 8009998:	f241 3288 	movw	r2, #5000	; 0x1388
 800999c:	fb02 f303 	mul.w	r3, r2, r3
 80099a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	1e5a      	subs	r2, r3, #1
 80099a6:	60fa      	str	r2, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099b0:	e009      	b.n	80099c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0f1      	beq.n	80099a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	22c5      	movs	r2, #197	; 0xc5
 80099c2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop
 80099d4:	20000000 	.word	0x20000000
 80099d8:	10624dd3 	.word	0x10624dd3

080099dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80099e0:	4904      	ldr	r1, [pc, #16]	; (80099f4 <MX_FATFS_Init+0x18>)
 80099e2:	4805      	ldr	r0, [pc, #20]	; (80099f8 <MX_FATFS_Init+0x1c>)
 80099e4:	f002 fd0e 	bl	800c404 <FATFS_LinkDriver>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	4b03      	ldr	r3, [pc, #12]	; (80099fc <MX_FATFS_Init+0x20>)
 80099ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099f0:	bf00      	nop
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	200059e8 	.word	0x200059e8
 80099f8:	08013e4c 	.word	0x08013e4c
 80099fc:	200059e4 	.word	0x200059e4

08009a00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009a04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a1a:	f000 f896 	bl	8009b4a <BSP_SD_IsDetected>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d001      	beq.n	8009a28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009a24:	2302      	movs	r3, #2
 8009a26:	e012      	b.n	8009a4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009a28:	480b      	ldr	r0, [pc, #44]	; (8009a58 <BSP_SD_Init+0x48>)
 8009a2a:	f7fc fe07 	bl	800663c <HAL_SD_Init>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009a32:	79fb      	ldrb	r3, [r7, #7]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a3c:	4806      	ldr	r0, [pc, #24]	; (8009a58 <BSP_SD_Init+0x48>)
 8009a3e:	f7fd fbcd 	bl	80071dc <HAL_SD_ConfigWideBusOperation>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009a4c:	79fb      	ldrb	r3, [r7, #7]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	200057a0 	.word	0x200057a0

08009a5c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	68f9      	ldr	r1, [r7, #12]
 8009a72:	4806      	ldr	r0, [pc, #24]	; (8009a8c <BSP_SD_ReadBlocks_DMA+0x30>)
 8009a74:	f7fc fe9a 	bl	80067ac <HAL_SD_ReadBlocks_DMA>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200057a0 	.word	0x200057a0

08009a90 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	68f9      	ldr	r1, [r7, #12]
 8009aa6:	4806      	ldr	r0, [pc, #24]	; (8009ac0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009aa8:	f7fc ff62 	bl	8006970 <HAL_SD_WriteBlocks_DMA>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200057a0 	.word	0x200057a0

08009ac4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009ac8:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <BSP_SD_GetCardState+0x1c>)
 8009aca:	f7fd fc21 	bl	8007310 <HAL_SD_GetCardState>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	bf14      	ite	ne
 8009ad4:	2301      	movne	r3, #1
 8009ad6:	2300      	moveq	r3, #0
 8009ad8:	b2db      	uxtb	r3, r3
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	200057a0 	.word	0x200057a0

08009ae4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	4803      	ldr	r0, [pc, #12]	; (8009afc <BSP_SD_GetCardInfo+0x18>)
 8009af0:	f7fd fb48 	bl	8007184 <HAL_SD_GetCardInfo>
}
 8009af4:	bf00      	nop
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200057a0 	.word	0x200057a0

08009b00 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009b08:	f000 f818 	bl	8009b3c <BSP_SD_AbortCallback>
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009b1c:	f000 f9a8 	bl	8009e70 <BSP_SD_WriteCpltCallback>
}
 8009b20:	bf00      	nop
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009b30:	f000 f9aa 	bl	8009e88 <BSP_SD_ReadCpltCallback>
}
 8009b34:	bf00      	nop
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0

}
 8009b40:	bf00      	nop
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b50:	2301      	movs	r3, #1
 8009b52:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009b54:	f000 f80c 	bl	8009b70 <BSP_PlatformIsDetected>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	b2db      	uxtb	r3, r3
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009b76:	2301      	movs	r3, #1
 8009b78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b7e:	4806      	ldr	r0, [pc, #24]	; (8009b98 <BSP_PlatformIsDetected+0x28>)
 8009b80:	f7fa fbfa 	bl	8004378 <HAL_GPIO_ReadPin>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	40020400 	.word	0x40020400

08009b9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009ba4:	f7f8 fe4a 	bl	800283c <HAL_GetTick>
 8009ba8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009baa:	e006      	b.n	8009bba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009bac:	f7ff ff8a 	bl	8009ac4 <BSP_SD_GetCardState>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e009      	b.n	8009bce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009bba:	f7f8 fe3f 	bl	800283c <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d8f0      	bhi.n	8009bac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009be2:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <SD_CheckStatus+0x38>)
 8009be4:	2201      	movs	r2, #1
 8009be6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009be8:	f7ff ff6c 	bl	8009ac4 <BSP_SD_GetCardState>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d107      	bne.n	8009c02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009bf2:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <SD_CheckStatus+0x38>)
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f023 0301 	bic.w	r3, r3, #1
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <SD_CheckStatus+0x38>)
 8009c00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c02:	4b03      	ldr	r3, [pc, #12]	; (8009c10 <SD_CheckStatus+0x38>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	b2db      	uxtb	r3, r3
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20000009 	.word	0x20000009

08009c14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009c1e:	f7ff fef7 	bl	8009a10 <BSP_SD_Init>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d107      	bne.n	8009c38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009c28:	79fb      	ldrb	r3, [r7, #7]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff ffd4 	bl	8009bd8 <SD_CheckStatus>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <SD_initialize+0x34>)
 8009c36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009c38:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <SD_initialize+0x34>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	20000009 	.word	0x20000009

08009c4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff ffbd 	bl	8009bd8 <SD_CheckStatus>
 8009c5e:	4603      	mov	r3, r0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c7c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c80:	f7ff ff8c 	bl	8009b9c <SD_CheckStatusWithTimeout>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da01      	bge.n	8009c8e <SD_read+0x26>
  {
    return res;
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	e03b      	b.n	8009d06 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	68b8      	ldr	r0, [r7, #8]
 8009c94:	f7ff fee2 	bl	8009a5c <BSP_SD_ReadBlocks_DMA>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d132      	bne.n	8009d04 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009c9e:	4b1c      	ldr	r3, [pc, #112]	; (8009d10 <SD_read+0xa8>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009ca4:	f7f8 fdca 	bl	800283c <HAL_GetTick>
 8009ca8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009caa:	bf00      	nop
 8009cac:	4b18      	ldr	r3, [pc, #96]	; (8009d10 <SD_read+0xa8>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d108      	bne.n	8009cc6 <SD_read+0x5e>
 8009cb4:	f7f8 fdc2 	bl	800283c <HAL_GetTick>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	1ad3      	subs	r3, r2, r3
 8009cbe:	f247 522f 	movw	r2, #29999	; 0x752f
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d9f2      	bls.n	8009cac <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009cc6:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <SD_read+0xa8>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d102      	bne.n	8009cd4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	75fb      	strb	r3, [r7, #23]
 8009cd2:	e017      	b.n	8009d04 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009cd4:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <SD_read+0xa8>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009cda:	f7f8 fdaf 	bl	800283c <HAL_GetTick>
 8009cde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ce0:	e007      	b.n	8009cf2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009ce2:	f7ff feef 	bl	8009ac4 <BSP_SD_GetCardState>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d102      	bne.n	8009cf2 <SD_read+0x8a>
          {
            res = RES_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009cf0:	e008      	b.n	8009d04 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009cf2:	f7f8 fda3 	bl	800283c <HAL_GetTick>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	1ad3      	subs	r3, r2, r3
 8009cfc:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d9ee      	bls.n	8009ce2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20005e50 	.word	0x20005e50

08009d14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009d28:	4b24      	ldr	r3, [pc, #144]	; (8009dbc <SD_write+0xa8>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d2e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009d32:	f7ff ff33 	bl	8009b9c <SD_CheckStatusWithTimeout>
 8009d36:	4603      	mov	r3, r0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	da01      	bge.n	8009d40 <SD_write+0x2c>
  {
    return res;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	e038      	b.n	8009db2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f7ff fea3 	bl	8009a90 <BSP_SD_WriteBlocks_DMA>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d12f      	bne.n	8009db0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009d50:	f7f8 fd74 	bl	800283c <HAL_GetTick>
 8009d54:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009d56:	bf00      	nop
 8009d58:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <SD_write+0xa8>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d108      	bne.n	8009d72 <SD_write+0x5e>
 8009d60:	f7f8 fd6c 	bl	800283c <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d9f2      	bls.n	8009d58 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <SD_write+0xa8>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	75fb      	strb	r3, [r7, #23]
 8009d7e:	e017      	b.n	8009db0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009d80:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <SD_write+0xa8>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009d86:	f7f8 fd59 	bl	800283c <HAL_GetTick>
 8009d8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d8c:	e007      	b.n	8009d9e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d8e:	f7ff fe99 	bl	8009ac4 <BSP_SD_GetCardState>
 8009d92:	4603      	mov	r3, r0
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <SD_write+0x8a>
          {
            res = RES_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	75fb      	strb	r3, [r7, #23]
            break;
 8009d9c:	e008      	b.n	8009db0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d9e:	f7f8 fd4d 	bl	800283c <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	f247 522f 	movw	r2, #29999	; 0x752f
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d9ee      	bls.n	8009d8e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20005e4c 	.word	0x20005e4c

08009dc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08c      	sub	sp, #48	; 0x30
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	603a      	str	r2, [r7, #0]
 8009dca:	71fb      	strb	r3, [r7, #7]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009dd6:	4b25      	ldr	r3, [pc, #148]	; (8009e6c <SD_ioctl+0xac>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <SD_ioctl+0x28>
 8009de4:	2303      	movs	r3, #3
 8009de6:	e03c      	b.n	8009e62 <SD_ioctl+0xa2>

  switch (cmd)
 8009de8:	79bb      	ldrb	r3, [r7, #6]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d834      	bhi.n	8009e58 <SD_ioctl+0x98>
 8009dee:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <SD_ioctl+0x34>)
 8009df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e0d 	.word	0x08009e0d
 8009dfc:	08009e25 	.word	0x08009e25
 8009e00:	08009e3f 	.word	0x08009e3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e0a:	e028      	b.n	8009e5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e0c:	f107 030c 	add.w	r3, r7, #12
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fe67 	bl	8009ae4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e22:	e01c      	b.n	8009e5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e24:	f107 030c 	add.w	r3, r7, #12
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7ff fe5b 	bl	8009ae4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e3c:	e00f      	b.n	8009e5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009e3e:	f107 030c 	add.w	r3, r7, #12
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff fe4e 	bl	8009ae4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	0a5a      	lsrs	r2, r3, #9
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009e56:	e002      	b.n	8009e5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009e58:	2304      	movs	r3, #4
 8009e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3730      	adds	r7, #48	; 0x30
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20000009 	.word	0x20000009

08009e70 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009e74:	4b03      	ldr	r3, [pc, #12]	; (8009e84 <BSP_SD_WriteCpltCallback+0x14>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	601a      	str	r2, [r3, #0]
}
 8009e7a:	bf00      	nop
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	20005e4c 	.word	0x20005e4c

08009e88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009e8c:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <BSP_SD_ReadCpltCallback+0x14>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
}
 8009e92:	bf00      	nop
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	20005e50 	.word	0x20005e50

08009ea0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009eaa:	79fb      	ldrb	r3, [r7, #7]
 8009eac:	4a08      	ldr	r2, [pc, #32]	; (8009ed0 <disk_status+0x30>)
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	79fa      	ldrb	r2, [r7, #7]
 8009eb8:	4905      	ldr	r1, [pc, #20]	; (8009ed0 <disk_status+0x30>)
 8009eba:	440a      	add	r2, r1
 8009ebc:	7a12      	ldrb	r2, [r2, #8]
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4798      	blx	r3
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20005e7c 	.word	0x20005e7c

08009ed4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	4a0d      	ldr	r2, [pc, #52]	; (8009f1c <disk_initialize+0x48>)
 8009ee6:	5cd3      	ldrb	r3, [r2, r3]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d111      	bne.n	8009f10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	4a0b      	ldr	r2, [pc, #44]	; (8009f1c <disk_initialize+0x48>)
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ef4:	79fb      	ldrb	r3, [r7, #7]
 8009ef6:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <disk_initialize+0x48>)
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4413      	add	r3, r2
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	79fa      	ldrb	r2, [r7, #7]
 8009f02:	4906      	ldr	r1, [pc, #24]	; (8009f1c <disk_initialize+0x48>)
 8009f04:	440a      	add	r2, r1
 8009f06:	7a12      	ldrb	r2, [r2, #8]
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4798      	blx	r3
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20005e7c 	.word	0x20005e7c

08009f20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009f20:	b590      	push	{r4, r7, lr}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60b9      	str	r1, [r7, #8]
 8009f28:	607a      	str	r2, [r7, #4]
 8009f2a:	603b      	str	r3, [r7, #0]
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4a0a      	ldr	r2, [pc, #40]	; (8009f5c <disk_read+0x3c>)
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	689c      	ldr	r4, [r3, #8]
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4a07      	ldr	r2, [pc, #28]	; (8009f5c <disk_read+0x3c>)
 8009f40:	4413      	add	r3, r2
 8009f42:	7a18      	ldrb	r0, [r3, #8]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	68b9      	ldr	r1, [r7, #8]
 8009f4a:	47a0      	blx	r4
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd90      	pop	{r4, r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20005e7c 	.word	0x20005e7c

08009f60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009f60:	b590      	push	{r4, r7, lr}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	4a0a      	ldr	r2, [pc, #40]	; (8009f9c <disk_write+0x3c>)
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	68dc      	ldr	r4, [r3, #12]
 8009f7c:	7bfb      	ldrb	r3, [r7, #15]
 8009f7e:	4a07      	ldr	r2, [pc, #28]	; (8009f9c <disk_write+0x3c>)
 8009f80:	4413      	add	r3, r2
 8009f82:	7a18      	ldrb	r0, [r3, #8]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	68b9      	ldr	r1, [r7, #8]
 8009f8a:	47a0      	blx	r4
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd90      	pop	{r4, r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20005e7c 	.word	0x20005e7c

08009fa0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	603a      	str	r2, [r7, #0]
 8009faa:	71fb      	strb	r3, [r7, #7]
 8009fac:	460b      	mov	r3, r1
 8009fae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009fb0:	79fb      	ldrb	r3, [r7, #7]
 8009fb2:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <disk_ioctl+0x38>)
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	79fa      	ldrb	r2, [r7, #7]
 8009fbe:	4906      	ldr	r1, [pc, #24]	; (8009fd8 <disk_ioctl+0x38>)
 8009fc0:	440a      	add	r2, r1
 8009fc2:	7a10      	ldrb	r0, [r2, #8]
 8009fc4:	79b9      	ldrb	r1, [r7, #6]
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	4798      	blx	r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  return res;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20005e7c 	.word	0x20005e7c

08009fdc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009fec:	89fb      	ldrh	r3, [r7, #14]
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	b21a      	sxth	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b21b      	sxth	r3, r3
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	b21b      	sxth	r3, r3
 8009ffc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ffe:	89fb      	ldrh	r3, [r7, #14]
}
 800a000:	4618      	mov	r0, r3
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3303      	adds	r3, #3
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	3202      	adds	r2, #2
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	3201      	adds	r2, #1
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	4313      	orrs	r3, r2
 800a036:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	021b      	lsls	r3, r3, #8
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7812      	ldrb	r2, [r2, #0]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
	return rv;
 800a044:	68fb      	ldr	r3, [r7, #12]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	460b      	mov	r3, r1
 800a05c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	887a      	ldrh	r2, [r7, #2]
 800a066:	b2d2      	uxtb	r2, r2
 800a068:	701a      	strb	r2, [r3, #0]
 800a06a:	887b      	ldrh	r3, [r7, #2]
 800a06c:	0a1b      	lsrs	r3, r3, #8
 800a06e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	887a      	ldrh	r2, [r7, #2]
 800a078:	b2d2      	uxtb	r2, r2
 800a07a:	701a      	strb	r2, [r3, #0]
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	1c5a      	adds	r2, r3, #1
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	0a1b      	lsrs	r3, r3, #8
 800a0a2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	607a      	str	r2, [r7, #4]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	0a1b      	lsrs	r3, r3, #8
 800a0b4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	1c5a      	adds	r2, r3, #1
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	b2d2      	uxtb	r2, r2
 800a0c0:	701a      	strb	r2, [r3, #0]
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	0a1b      	lsrs	r3, r3, #8
 800a0c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	607a      	str	r2, [r7, #4]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	b2d2      	uxtb	r2, r2
 800a0d2:	701a      	strb	r2, [r3, #0]
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00d      	beq.n	800a116 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	1c53      	adds	r3, r2, #1
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	1c59      	adds	r1, r3, #1
 800a104:	6179      	str	r1, [r7, #20]
 800a106:	7812      	ldrb	r2, [r2, #0]
 800a108:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	607b      	str	r3, [r7, #4]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f1      	bne.n	800a0fa <mem_cpy+0x1a>
	}
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a122:	b480      	push	{r7}
 800a124:	b087      	sub	sp, #28
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	1c5a      	adds	r2, r3, #1
 800a136:	617a      	str	r2, [r7, #20]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3b01      	subs	r3, #1
 800a142:	607b      	str	r3, [r7, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d1f3      	bne.n	800a132 <mem_set+0x10>
}
 800a14a:	bf00      	nop
 800a14c:	bf00      	nop
 800a14e:	371c      	adds	r7, #28
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a158:	b480      	push	{r7}
 800a15a:	b089      	sub	sp, #36	; 0x24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	61fa      	str	r2, [r7, #28]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	4619      	mov	r1, r3
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	61ba      	str	r2, [r7, #24]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	1acb      	subs	r3, r1, r3
 800a184:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3b01      	subs	r3, #1
 800a18a:	607b      	str	r3, [r7, #4]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d002      	beq.n	800a198 <mem_cmp+0x40>
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d0eb      	beq.n	800a170 <mem_cmp+0x18>

	return r;
 800a198:	697b      	ldr	r3, [r7, #20]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3724      	adds	r7, #36	; 0x24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a1b0:	e002      	b.n	800a1b8 <chk_chr+0x12>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	607b      	str	r3, [r7, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d005      	beq.n	800a1cc <chk_chr+0x26>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d1f2      	bne.n	800a1b2 <chk_chr+0xc>
	return *str;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60bb      	str	r3, [r7, #8]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	60fb      	str	r3, [r7, #12]
 800a1ee:	e029      	b.n	800a244 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a1f0:	4a27      	ldr	r2, [pc, #156]	; (800a290 <chk_lock+0xb4>)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	4413      	add	r3, r2
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01d      	beq.n	800a23a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1fe:	4a24      	ldr	r2, [pc, #144]	; (800a290 <chk_lock+0xb4>)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	4413      	add	r3, r2
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d116      	bne.n	800a23e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a210:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <chk_lock+0xb4>)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	011b      	lsls	r3, r3, #4
 800a216:	4413      	add	r3, r2
 800a218:	3304      	adds	r3, #4
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a220:	429a      	cmp	r2, r3
 800a222:	d10c      	bne.n	800a23e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a224:	4a1a      	ldr	r2, [pc, #104]	; (800a290 <chk_lock+0xb4>)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	011b      	lsls	r3, r3, #4
 800a22a:	4413      	add	r3, r2
 800a22c:	3308      	adds	r3, #8
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a234:	429a      	cmp	r2, r3
 800a236:	d102      	bne.n	800a23e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a238:	e007      	b.n	800a24a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a23a:	2301      	movs	r3, #1
 800a23c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d9d2      	bls.n	800a1f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d109      	bne.n	800a264 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d102      	bne.n	800a25c <chk_lock+0x80>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d101      	bne.n	800a260 <chk_lock+0x84>
 800a25c:	2300      	movs	r3, #0
 800a25e:	e010      	b.n	800a282 <chk_lock+0xa6>
 800a260:	2312      	movs	r3, #18
 800a262:	e00e      	b.n	800a282 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d108      	bne.n	800a27c <chk_lock+0xa0>
 800a26a:	4a09      	ldr	r2, [pc, #36]	; (800a290 <chk_lock+0xb4>)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	4413      	add	r3, r2
 800a272:	330c      	adds	r3, #12
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27a:	d101      	bne.n	800a280 <chk_lock+0xa4>
 800a27c:	2310      	movs	r3, #16
 800a27e:	e000      	b.n	800a282 <chk_lock+0xa6>
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20005e5c 	.word	0x20005e5c

0800a294 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a29a:	2300      	movs	r3, #0
 800a29c:	607b      	str	r3, [r7, #4]
 800a29e:	e002      	b.n	800a2a6 <enq_lock+0x12>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	607b      	str	r3, [r7, #4]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d806      	bhi.n	800a2ba <enq_lock+0x26>
 800a2ac:	4a09      	ldr	r2, [pc, #36]	; (800a2d4 <enq_lock+0x40>)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	011b      	lsls	r3, r3, #4
 800a2b2:	4413      	add	r3, r2
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f2      	bne.n	800a2a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	bf14      	ite	ne
 800a2c0:	2301      	movne	r3, #1
 800a2c2:	2300      	moveq	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	370c      	adds	r7, #12
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20005e5c 	.word	0x20005e5c

0800a2d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e01f      	b.n	800a328 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a2e8:	4a41      	ldr	r2, [pc, #260]	; (800a3f0 <inc_lock+0x118>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	011b      	lsls	r3, r3, #4
 800a2ee:	4413      	add	r3, r2
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d113      	bne.n	800a322 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a2fa:	4a3d      	ldr	r2, [pc, #244]	; (800a3f0 <inc_lock+0x118>)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	4413      	add	r3, r2
 800a302:	3304      	adds	r3, #4
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d109      	bne.n	800a322 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a30e:	4a38      	ldr	r2, [pc, #224]	; (800a3f0 <inc_lock+0x118>)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	011b      	lsls	r3, r3, #4
 800a314:	4413      	add	r3, r2
 800a316:	3308      	adds	r3, #8
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a31e:	429a      	cmp	r2, r3
 800a320:	d006      	beq.n	800a330 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d9dc      	bls.n	800a2e8 <inc_lock+0x10>
 800a32e:	e000      	b.n	800a332 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a330:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b02      	cmp	r3, #2
 800a336:	d132      	bne.n	800a39e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	e002      	b.n	800a344 <inc_lock+0x6c>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3301      	adds	r3, #1
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d806      	bhi.n	800a358 <inc_lock+0x80>
 800a34a:	4a29      	ldr	r2, [pc, #164]	; (800a3f0 <inc_lock+0x118>)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	4413      	add	r3, r2
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1f2      	bne.n	800a33e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d101      	bne.n	800a362 <inc_lock+0x8a>
 800a35e:	2300      	movs	r3, #0
 800a360:	e040      	b.n	800a3e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4922      	ldr	r1, [pc, #136]	; (800a3f0 <inc_lock+0x118>)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	011b      	lsls	r3, r3, #4
 800a36c:	440b      	add	r3, r1
 800a36e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	491e      	ldr	r1, [pc, #120]	; (800a3f0 <inc_lock+0x118>)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	011b      	lsls	r3, r3, #4
 800a37a:	440b      	add	r3, r1
 800a37c:	3304      	adds	r3, #4
 800a37e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	695a      	ldr	r2, [r3, #20]
 800a384:	491a      	ldr	r1, [pc, #104]	; (800a3f0 <inc_lock+0x118>)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	011b      	lsls	r3, r3, #4
 800a38a:	440b      	add	r3, r1
 800a38c:	3308      	adds	r3, #8
 800a38e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a390:	4a17      	ldr	r2, [pc, #92]	; (800a3f0 <inc_lock+0x118>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	4413      	add	r3, r2
 800a398:	330c      	adds	r3, #12
 800a39a:	2200      	movs	r2, #0
 800a39c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <inc_lock+0xe0>
 800a3a4:	4a12      	ldr	r2, [pc, #72]	; (800a3f0 <inc_lock+0x118>)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	4413      	add	r3, r2
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <inc_lock+0xe0>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e015      	b.n	800a3e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d108      	bne.n	800a3d0 <inc_lock+0xf8>
 800a3be:	4a0c      	ldr	r2, [pc, #48]	; (800a3f0 <inc_lock+0x118>)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	011b      	lsls	r3, r3, #4
 800a3c4:	4413      	add	r3, r2
 800a3c6:	330c      	adds	r3, #12
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	e001      	b.n	800a3d4 <inc_lock+0xfc>
 800a3d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a3d4:	4906      	ldr	r1, [pc, #24]	; (800a3f0 <inc_lock+0x118>)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	440b      	add	r3, r1
 800a3dc:	330c      	adds	r3, #12
 800a3de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3301      	adds	r3, #1
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20005e5c 	.word	0x20005e5c

0800a3f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	607b      	str	r3, [r7, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d825      	bhi.n	800a454 <dec_lock+0x60>
		n = Files[i].ctr;
 800a408:	4a17      	ldr	r2, [pc, #92]	; (800a468 <dec_lock+0x74>)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	4413      	add	r3, r2
 800a410:	330c      	adds	r3, #12
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a416:	89fb      	ldrh	r3, [r7, #14]
 800a418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a41c:	d101      	bne.n	800a422 <dec_lock+0x2e>
 800a41e:	2300      	movs	r3, #0
 800a420:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a422:	89fb      	ldrh	r3, [r7, #14]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <dec_lock+0x3a>
 800a428:	89fb      	ldrh	r3, [r7, #14]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a42e:	4a0e      	ldr	r2, [pc, #56]	; (800a468 <dec_lock+0x74>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	4413      	add	r3, r2
 800a436:	330c      	adds	r3, #12
 800a438:	89fa      	ldrh	r2, [r7, #14]
 800a43a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a43c:	89fb      	ldrh	r3, [r7, #14]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d105      	bne.n	800a44e <dec_lock+0x5a>
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <dec_lock+0x74>)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	4413      	add	r3, r2
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	737b      	strb	r3, [r7, #13]
 800a452:	e001      	b.n	800a458 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a454:	2302      	movs	r3, #2
 800a456:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a458:	7b7b      	ldrb	r3, [r7, #13]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20005e5c 	.word	0x20005e5c

0800a46c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	e010      	b.n	800a49c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a47a:	4a0d      	ldr	r2, [pc, #52]	; (800a4b0 <clear_lock+0x44>)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	4413      	add	r3, r2
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	429a      	cmp	r2, r3
 800a488:	d105      	bne.n	800a496 <clear_lock+0x2a>
 800a48a:	4a09      	ldr	r2, [pc, #36]	; (800a4b0 <clear_lock+0x44>)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	011b      	lsls	r3, r3, #4
 800a490:	4413      	add	r3, r2
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	3301      	adds	r3, #1
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d9eb      	bls.n	800a47a <clear_lock+0xe>
	}
}
 800a4a2:	bf00      	nop
 800a4a4:	bf00      	nop
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	20005e5c 	.word	0x20005e5c

0800a4b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	78db      	ldrb	r3, [r3, #3]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d034      	beq.n	800a532 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	7858      	ldrb	r0, [r3, #1]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a4d8:	2301      	movs	r3, #1
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	f7ff fd40 	bl	8009f60 <disk_write>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d002      	beq.n	800a4ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	73fb      	strb	r3, [r7, #15]
 800a4ea:	e022      	b.n	800a532 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	1ad2      	subs	r2, r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d217      	bcs.n	800a532 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	789b      	ldrb	r3, [r3, #2]
 800a506:	613b      	str	r3, [r7, #16]
 800a508:	e010      	b.n	800a52c <sync_window+0x78>
					wsect += fs->fsize;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	4413      	add	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7858      	ldrb	r0, [r3, #1]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a51e:	2301      	movs	r3, #1
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	f7ff fd1d 	bl	8009f60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3b01      	subs	r3, #1
 800a52a:	613b      	str	r3, [r7, #16]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d8eb      	bhi.n	800a50a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a532:	7bfb      	ldrb	r3, [r7, #15]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	429a      	cmp	r2, r3
 800a552:	d01b      	beq.n	800a58c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ffad 	bl	800a4b4 <sync_window>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d113      	bne.n	800a58c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	7858      	ldrb	r0, [r3, #1]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a56e:	2301      	movs	r3, #1
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	f7ff fcd5 	bl	8009f20 <disk_read>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a580:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a582:	2301      	movs	r3, #1
 800a584:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f7ff ff87 	bl	800a4b4 <sync_window>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a5aa:	7bfb      	ldrb	r3, [r7, #15]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d158      	bne.n	800a662 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b03      	cmp	r3, #3
 800a5b6:	d148      	bne.n	800a64a <sync_fs+0xb2>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	791b      	ldrb	r3, [r3, #4]
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d144      	bne.n	800a64a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3330      	adds	r3, #48	; 0x30
 800a5c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7ff fda9 	bl	800a122 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3330      	adds	r3, #48	; 0x30
 800a5d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fd38 	bl	800a052 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3330      	adds	r3, #48	; 0x30
 800a5e6:	4921      	ldr	r1, [pc, #132]	; (800a66c <sync_fs+0xd4>)
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fd4d 	bl	800a088 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3330      	adds	r3, #48	; 0x30
 800a5f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5f6:	491e      	ldr	r1, [pc, #120]	; (800a670 <sync_fs+0xd8>)
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff fd45 	bl	800a088 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3330      	adds	r3, #48	; 0x30
 800a602:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	4619      	mov	r1, r3
 800a60c:	4610      	mov	r0, r2
 800a60e:	f7ff fd3b 	bl	800a088 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3330      	adds	r3, #48	; 0x30
 800a616:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	4619      	mov	r1, r3
 800a620:	4610      	mov	r0, r2
 800a622:	f7ff fd31 	bl	800a088 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	7858      	ldrb	r0, [r3, #1]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a63e:	2301      	movs	r3, #1
 800a640:	f7ff fc8e 	bl	8009f60 <disk_write>
			fs->fsi_flag = 0;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	2200      	movs	r2, #0
 800a650:	2100      	movs	r1, #0
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fca4 	bl	8009fa0 <disk_ioctl>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <sync_fs+0xca>
 800a65e:	2301      	movs	r3, #1
 800a660:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	41615252 	.word	0x41615252
 800a670:	61417272 	.word	0x61417272

0800a674 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	3b02      	subs	r3, #2
 800a682:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	3b02      	subs	r3, #2
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d301      	bcc.n	800a694 <clust2sect+0x20>
 800a690:	2300      	movs	r3, #0
 800a692:	e008      	b.n	800a6a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	895b      	ldrh	r3, [r3, #10]
 800a698:	461a      	mov	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	fb03 f202 	mul.w	r2, r3, r2
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a4:	4413      	add	r3, r2
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
 800a6ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d904      	bls.n	800a6d2 <get_fat+0x20>
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	683a      	ldr	r2, [r7, #0]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d302      	bcc.n	800a6d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	617b      	str	r3, [r7, #20]
 800a6d6:	e08f      	b.n	800a7f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a6d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b03      	cmp	r3, #3
 800a6e4:	d062      	beq.n	800a7ac <get_fat+0xfa>
 800a6e6:	2b03      	cmp	r3, #3
 800a6e8:	dc7c      	bgt.n	800a7e4 <get_fat+0x132>
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d002      	beq.n	800a6f4 <get_fat+0x42>
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d042      	beq.n	800a778 <get_fat+0xc6>
 800a6f2:	e077      	b.n	800a7e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	085b      	lsrs	r3, r3, #1
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4413      	add	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	6a1a      	ldr	r2, [r3, #32]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	0a5b      	lsrs	r3, r3, #9
 800a70a:	4413      	add	r3, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	6938      	ldr	r0, [r7, #16]
 800a710:	f7ff ff14 	bl	800a53c <move_window>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d167      	bne.n	800a7ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	60fa      	str	r2, [r7, #12]
 800a720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	4413      	add	r3, r2
 800a728:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a72c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	6a1a      	ldr	r2, [r3, #32]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	0a5b      	lsrs	r3, r3, #9
 800a736:	4413      	add	r3, r2
 800a738:	4619      	mov	r1, r3
 800a73a:	6938      	ldr	r0, [r7, #16]
 800a73c:	f7ff fefe 	bl	800a53c <move_window>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d153      	bne.n	800a7ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a754:	021b      	lsls	r3, r3, #8
 800a756:	461a      	mov	r2, r3
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	4313      	orrs	r3, r2
 800a75c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	f003 0301 	and.w	r3, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <get_fat+0xbc>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	091b      	lsrs	r3, r3, #4
 800a76c:	e002      	b.n	800a774 <get_fat+0xc2>
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a774:	617b      	str	r3, [r7, #20]
			break;
 800a776:	e03f      	b.n	800a7f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	6a1a      	ldr	r2, [r3, #32]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	0a1b      	lsrs	r3, r3, #8
 800a780:	4413      	add	r3, r2
 800a782:	4619      	mov	r1, r3
 800a784:	6938      	ldr	r0, [r7, #16]
 800a786:	f7ff fed9 	bl	800a53c <move_window>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d130      	bne.n	800a7f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a79e:	4413      	add	r3, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff fc1b 	bl	8009fdc <ld_word>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	617b      	str	r3, [r7, #20]
			break;
 800a7aa:	e025      	b.n	800a7f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6a1a      	ldr	r2, [r3, #32]
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	09db      	lsrs	r3, r3, #7
 800a7b4:	4413      	add	r3, r2
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	6938      	ldr	r0, [r7, #16]
 800a7ba:	f7ff febf 	bl	800a53c <move_window>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d118      	bne.n	800a7f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a7d2:	4413      	add	r3, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fc19 	bl	800a00c <ld_dword>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7e0:	617b      	str	r3, [r7, #20]
			break;
 800a7e2:	e009      	b.n	800a7f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e006      	b.n	800a7f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7ea:	bf00      	nop
 800a7ec:	e004      	b.n	800a7f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7ee:	bf00      	nop
 800a7f0:	e002      	b.n	800a7f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7f2:	bf00      	nop
 800a7f4:	e000      	b.n	800a7f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7f6:	bf00      	nop
		}
	}

	return val;
 800a7f8:	697b      	ldr	r3, [r7, #20]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a802:	b590      	push	{r4, r7, lr}
 800a804:	b089      	sub	sp, #36	; 0x24
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	60b9      	str	r1, [r7, #8]
 800a80c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a80e:	2302      	movs	r3, #2
 800a810:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	2b01      	cmp	r3, #1
 800a816:	f240 80d2 	bls.w	800a9be <put_fat+0x1bc>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	429a      	cmp	r2, r3
 800a822:	f080 80cc 	bcs.w	800a9be <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	f000 8096 	beq.w	800a95c <put_fat+0x15a>
 800a830:	2b03      	cmp	r3, #3
 800a832:	f300 80cd 	bgt.w	800a9d0 <put_fat+0x1ce>
 800a836:	2b01      	cmp	r3, #1
 800a838:	d002      	beq.n	800a840 <put_fat+0x3e>
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d06e      	beq.n	800a91c <put_fat+0x11a>
 800a83e:	e0c7      	b.n	800a9d0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	61bb      	str	r3, [r7, #24]
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	085b      	lsrs	r3, r3, #1
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	4413      	add	r3, r2
 800a84c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6a1a      	ldr	r2, [r3, #32]
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	0a5b      	lsrs	r3, r3, #9
 800a856:	4413      	add	r3, r2
 800a858:	4619      	mov	r1, r3
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f7ff fe6e 	bl	800a53c <move_window>
 800a860:	4603      	mov	r3, r0
 800a862:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a864:	7ffb      	ldrb	r3, [r7, #31]
 800a866:	2b00      	cmp	r3, #0
 800a868:	f040 80ab 	bne.w	800a9c2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	1c59      	adds	r1, r3, #1
 800a876:	61b9      	str	r1, [r7, #24]
 800a878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87c:	4413      	add	r3, r2
 800a87e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00d      	beq.n	800a8a6 <put_fat+0xa4>
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	b25b      	sxtb	r3, r3
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	b25a      	sxtb	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	011b      	lsls	r3, r3, #4
 800a89c:	b25b      	sxtb	r3, r3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	b25b      	sxtb	r3, r3
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	e001      	b.n	800a8aa <put_fat+0xa8>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6a1a      	ldr	r2, [r3, #32]
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	0a5b      	lsrs	r3, r3, #9
 800a8bc:	4413      	add	r3, r2
 800a8be:	4619      	mov	r1, r3
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f7ff fe3b 	bl	800a53c <move_window>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8ca:	7ffb      	ldrb	r3, [r7, #31]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d17a      	bne.n	800a9c6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8dc:	4413      	add	r3, r2
 800a8de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <put_fat+0xf0>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	091b      	lsrs	r3, r3, #4
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	e00e      	b.n	800a910 <put_fat+0x10e>
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	b25b      	sxtb	r3, r3
 800a8f8:	f023 030f 	bic.w	r3, r3, #15
 800a8fc:	b25a      	sxtb	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	0a1b      	lsrs	r3, r3, #8
 800a902:	b25b      	sxtb	r3, r3
 800a904:	f003 030f 	and.w	r3, r3, #15
 800a908:	b25b      	sxtb	r3, r3
 800a90a:	4313      	orrs	r3, r2
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	70da      	strb	r2, [r3, #3]
			break;
 800a91a:	e059      	b.n	800a9d0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	0a1b      	lsrs	r3, r3, #8
 800a924:	4413      	add	r3, r2
 800a926:	4619      	mov	r1, r3
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f7ff fe07 	bl	800a53c <move_window>
 800a92e:	4603      	mov	r3, r0
 800a930:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a932:	7ffb      	ldrb	r3, [r7, #31]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d148      	bne.n	800a9ca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a946:	4413      	add	r3, r2
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	b292      	uxth	r2, r2
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fb7f 	bl	800a052 <st_word>
			fs->wflag = 1;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2201      	movs	r2, #1
 800a958:	70da      	strb	r2, [r3, #3]
			break;
 800a95a:	e039      	b.n	800a9d0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a1a      	ldr	r2, [r3, #32]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	09db      	lsrs	r3, r3, #7
 800a964:	4413      	add	r3, r2
 800a966:	4619      	mov	r1, r3
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff fde7 	bl	800a53c <move_window>
 800a96e:	4603      	mov	r3, r0
 800a970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a972:	7ffb      	ldrb	r3, [r7, #31]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d12a      	bne.n	800a9ce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a98c:	4413      	add	r3, r2
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff fb3c 	bl	800a00c <ld_dword>
 800a994:	4603      	mov	r3, r0
 800a996:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a99a:	4323      	orrs	r3, r4
 800a99c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a9ac:	4413      	add	r3, r2
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff fb69 	bl	800a088 <st_dword>
			fs->wflag = 1;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	70da      	strb	r2, [r3, #3]
			break;
 800a9bc:	e008      	b.n	800a9d0 <put_fat+0x1ce>
		}
	}
 800a9be:	bf00      	nop
 800a9c0:	e006      	b.n	800a9d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9c2:	bf00      	nop
 800a9c4:	e004      	b.n	800a9d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9c6:	bf00      	nop
 800a9c8:	e002      	b.n	800a9d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9ca:	bf00      	nop
 800a9cc:	e000      	b.n	800a9d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a9ce:	bf00      	nop
	return res;
 800a9d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3724      	adds	r7, #36	; 0x24
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd90      	pop	{r4, r7, pc}

0800a9da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b088      	sub	sp, #32
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60f8      	str	r0, [r7, #12]
 800a9e2:	60b9      	str	r1, [r7, #8]
 800a9e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d904      	bls.n	800aa00 <remove_chain+0x26>
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d301      	bcc.n	800aa04 <remove_chain+0x2a>
 800aa00:	2302      	movs	r3, #2
 800aa02:	e04b      	b.n	800aa9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00c      	beq.n	800aa24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aa0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	69b8      	ldr	r0, [r7, #24]
 800aa12:	f7ff fef6 	bl	800a802 <put_fat>
 800aa16:	4603      	mov	r3, r0
 800aa18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aa1a:	7ffb      	ldrb	r3, [r7, #31]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <remove_chain+0x4a>
 800aa20:	7ffb      	ldrb	r3, [r7, #31]
 800aa22:	e03b      	b.n	800aa9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aa24:	68b9      	ldr	r1, [r7, #8]
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7ff fe43 	bl	800a6b2 <get_fat>
 800aa2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d031      	beq.n	800aa98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <remove_chain+0x64>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e02e      	b.n	800aa9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa44:	d101      	bne.n	800aa4a <remove_chain+0x70>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e028      	b.n	800aa9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	69b8      	ldr	r0, [r7, #24]
 800aa50:	f7ff fed7 	bl	800a802 <put_fat>
 800aa54:	4603      	mov	r3, r0
 800aa56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa58:	7ffb      	ldrb	r3, [r7, #31]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <remove_chain+0x88>
 800aa5e:	7ffb      	ldrb	r3, [r7, #31]
 800aa60:	e01c      	b.n	800aa9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	691a      	ldr	r2, [r3, #16]
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	3b02      	subs	r3, #2
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d20b      	bcs.n	800aa88 <remove_chain+0xae>
			fs->free_clst++;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	1c5a      	adds	r2, r3, #1
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	791b      	ldrb	r3, [r3, #4]
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	695b      	ldr	r3, [r3, #20]
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d3c6      	bcc.n	800aa24 <remove_chain+0x4a>
 800aa96:	e000      	b.n	800aa9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3720      	adds	r7, #32
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10d      	bne.n	800aad6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <create_chain+0x2c>
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d31b      	bcc.n	800ab08 <create_chain+0x64>
 800aad0:	2301      	movs	r3, #1
 800aad2:	61bb      	str	r3, [r7, #24]
 800aad4:	e018      	b.n	800ab08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff fdea 	bl	800a6b2 <get_fat>
 800aade:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d801      	bhi.n	800aaea <create_chain+0x46>
 800aae6:	2301      	movs	r3, #1
 800aae8:	e070      	b.n	800abcc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaf0:	d101      	bne.n	800aaf6 <create_chain+0x52>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	e06a      	b.n	800abcc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	695b      	ldr	r3, [r3, #20]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d201      	bcs.n	800ab04 <create_chain+0x60>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	e063      	b.n	800abcc <create_chain+0x128>
		scl = clst;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	69fa      	ldr	r2, [r7, #28]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d307      	bcc.n	800ab2c <create_chain+0x88>
				ncl = 2;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d901      	bls.n	800ab2c <create_chain+0x88>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e04f      	b.n	800abcc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ab2c:	69f9      	ldr	r1, [r7, #28]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff fdbf 	bl	800a6b2 <get_fat>
 800ab34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00e      	beq.n	800ab5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d003      	beq.n	800ab4a <create_chain+0xa6>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab48:	d101      	bne.n	800ab4e <create_chain+0xaa>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	e03e      	b.n	800abcc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	69bb      	ldr	r3, [r7, #24]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d1da      	bne.n	800ab0c <create_chain+0x68>
 800ab56:	2300      	movs	r3, #0
 800ab58:	e038      	b.n	800abcc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab60:	69f9      	ldr	r1, [r7, #28]
 800ab62:	6938      	ldr	r0, [r7, #16]
 800ab64:	f7ff fe4d 	bl	800a802 <put_fat>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab6c:	7dfb      	ldrb	r3, [r7, #23]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <create_chain+0xe2>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d006      	beq.n	800ab86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab78:	69fa      	ldr	r2, [r7, #28]
 800ab7a:	6839      	ldr	r1, [r7, #0]
 800ab7c:	6938      	ldr	r0, [r7, #16]
 800ab7e:	f7ff fe40 	bl	800a802 <put_fat>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d116      	bne.n	800abba <create_chain+0x116>
		fs->last_clst = ncl;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	69fa      	ldr	r2, [r7, #28]
 800ab90:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab92:	693b      	ldr	r3, [r7, #16]
 800ab94:	691a      	ldr	r2, [r3, #16]
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	3b02      	subs	r3, #2
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d804      	bhi.n	800abaa <create_chain+0x106>
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	711a      	strb	r2, [r3, #4]
 800abb8:	e007      	b.n	800abca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d102      	bne.n	800abc6 <create_chain+0x122>
 800abc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abc4:	e000      	b.n	800abc8 <create_chain+0x124>
 800abc6:	2301      	movs	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800abca:	69fb      	ldr	r3, [r7, #28]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3720      	adds	r7, #32
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b087      	sub	sp, #28
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	3304      	adds	r3, #4
 800abea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	0a5b      	lsrs	r3, r3, #9
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	8952      	ldrh	r2, [r2, #10]
 800abf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800abf8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	613a      	str	r2, [r7, #16]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <clmt_clust+0x3a>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e010      	b.n	800ac30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d307      	bcc.n	800ac26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	3304      	adds	r3, #4
 800ac22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ac24:	e7e9      	b.n	800abfa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ac26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	4413      	add	r3, r2
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac52:	d204      	bcs.n	800ac5e <dir_sdi+0x22>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	f003 031f 	and.w	r3, r3, #31
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e063      	b.n	800ad2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d106      	bne.n	800ac82 <dir_sdi+0x46>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d902      	bls.n	800ac82 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	095b      	lsrs	r3, r3, #5
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	8912      	ldrh	r2, [r2, #8]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d301      	bcc.n	800ac98 <dir_sdi+0x5c>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e048      	b.n	800ad2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	61da      	str	r2, [r3, #28]
 800aca0:	e029      	b.n	800acf6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	895b      	ldrh	r3, [r3, #10]
 800aca6:	025b      	lsls	r3, r3, #9
 800aca8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800acaa:	e019      	b.n	800ace0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6979      	ldr	r1, [r7, #20]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7ff fcfe 	bl	800a6b2 <get_fat>
 800acb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acbe:	d101      	bne.n	800acc4 <dir_sdi+0x88>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e032      	b.n	800ad2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d904      	bls.n	800acd4 <dir_sdi+0x98>
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	695b      	ldr	r3, [r3, #20]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d301      	bcc.n	800acd8 <dir_sdi+0x9c>
 800acd4:	2302      	movs	r3, #2
 800acd6:	e028      	b.n	800ad2a <dir_sdi+0xee>
			ofs -= csz;
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d2e1      	bcs.n	800acac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ace8:	6979      	ldr	r1, [r7, #20]
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f7ff fcc2 	bl	800a674 <clust2sect>
 800acf0:	4602      	mov	r2, r0
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <dir_sdi+0xcc>
 800ad04:	2302      	movs	r3, #2
 800ad06:	e010      	b.n	800ad2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	69da      	ldr	r2, [r3, #28]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	0a5b      	lsrs	r3, r3, #9
 800ad10:	441a      	add	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad22:	441a      	add	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	3320      	adds	r3, #32
 800ad48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <dir_next+0x28>
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad58:	d301      	bcc.n	800ad5e <dir_next+0x2c>
 800ad5a:	2304      	movs	r3, #4
 800ad5c:	e0aa      	b.n	800aeb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 8098 	bne.w	800ae9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	699b      	ldr	r3, [r3, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	095b      	lsrs	r3, r3, #5
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	8912      	ldrh	r2, [r2, #8]
 800ad84:	4293      	cmp	r3, r2
 800ad86:	f0c0 8088 	bcc.w	800ae9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	61da      	str	r2, [r3, #28]
 800ad90:	2304      	movs	r3, #4
 800ad92:	e08f      	b.n	800aeb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	0a5b      	lsrs	r3, r3, #9
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	8952      	ldrh	r2, [r2, #10]
 800ad9c:	3a01      	subs	r2, #1
 800ad9e:	4013      	ands	r3, r2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d17a      	bne.n	800ae9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	4619      	mov	r1, r3
 800adac:	4610      	mov	r0, r2
 800adae:	f7ff fc80 	bl	800a6b2 <get_fat>
 800adb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d801      	bhi.n	800adbe <dir_next+0x8c>
 800adba:	2302      	movs	r3, #2
 800adbc:	e07a      	b.n	800aeb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adc4:	d101      	bne.n	800adca <dir_next+0x98>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e074      	b.n	800aeb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	d358      	bcc.n	800ae86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d104      	bne.n	800ade4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	61da      	str	r2, [r3, #28]
 800ade0:	2304      	movs	r3, #4
 800ade2:	e067      	b.n	800aeb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	4619      	mov	r1, r3
 800adec:	4610      	mov	r0, r2
 800adee:	f7ff fe59 	bl	800aaa4 <create_chain>
 800adf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <dir_next+0xcc>
 800adfa:	2307      	movs	r3, #7
 800adfc:	e05a      	b.n	800aeb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d101      	bne.n	800ae08 <dir_next+0xd6>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e055      	b.n	800aeb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae0e:	d101      	bne.n	800ae14 <dir_next+0xe2>
 800ae10:	2301      	movs	r3, #1
 800ae12:	e04f      	b.n	800aeb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f7ff fb4d 	bl	800a4b4 <sync_window>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d001      	beq.n	800ae24 <dir_next+0xf2>
 800ae20:	2301      	movs	r3, #1
 800ae22:	e047      	b.n	800aeb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	3330      	adds	r3, #48	; 0x30
 800ae28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff f977 	bl	800a122 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae34:	2300      	movs	r3, #0
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f7ff fc1a 	bl	800a674 <clust2sect>
 800ae40:	4602      	mov	r2, r0
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae46:	e012      	b.n	800ae6e <dir_next+0x13c>
						fs->wflag = 1;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ae4e:	68f8      	ldr	r0, [r7, #12]
 800ae50:	f7ff fb30 	bl	800a4b4 <sync_window>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d001      	beq.n	800ae5e <dir_next+0x12c>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e02a      	b.n	800aeb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	3301      	adds	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	62da      	str	r2, [r3, #44]	; 0x2c
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	895b      	ldrh	r3, [r3, #10]
 800ae72:	461a      	mov	r2, r3
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d3e6      	bcc.n	800ae48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	1ad2      	subs	r2, r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	68f8      	ldr	r0, [r7, #12]
 800ae90:	f7ff fbf0 	bl	800a674 <clust2sect>
 800ae94:	4602      	mov	r2, r0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeac:	441a      	add	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff feb4 	bl	800ac3c <dir_sdi>
 800aed4:	4603      	mov	r3, r0
 800aed6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aed8:	7dfb      	ldrb	r3, [r7, #23]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d12b      	bne.n	800af36 <dir_alloc+0x7a>
		n = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	4619      	mov	r1, r3
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7ff fb27 	bl	800a53c <move_window>
 800aeee:	4603      	mov	r3, r0
 800aef0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aef2:	7dfb      	ldrb	r3, [r7, #23]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11d      	bne.n	800af34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	2be5      	cmp	r3, #229	; 0xe5
 800af00:	d004      	beq.n	800af0c <dir_alloc+0x50>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d107      	bne.n	800af1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	3301      	adds	r3, #1
 800af10:	613b      	str	r3, [r7, #16]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d102      	bne.n	800af20 <dir_alloc+0x64>
 800af1a:	e00c      	b.n	800af36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800af1c:	2300      	movs	r3, #0
 800af1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800af20:	2101      	movs	r1, #1
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff ff05 	bl	800ad32 <dir_next>
 800af28:	4603      	mov	r3, r0
 800af2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0d7      	beq.n	800aee2 <dir_alloc+0x26>
 800af32:	e000      	b.n	800af36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800af34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	2b04      	cmp	r3, #4
 800af3a:	d101      	bne.n	800af40 <dir_alloc+0x84>
 800af3c:	2307      	movs	r3, #7
 800af3e:	75fb      	strb	r3, [r7, #23]
	return res;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
 800af52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	331a      	adds	r3, #26
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff f83f 	bl	8009fdc <ld_word>
 800af5e:	4603      	mov	r3, r0
 800af60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	2b03      	cmp	r3, #3
 800af68:	d109      	bne.n	800af7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	3314      	adds	r3, #20
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff f834 	bl	8009fdc <ld_word>
 800af74:	4603      	mov	r3, r0
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800af7e:	68fb      	ldr	r3, [r7, #12]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	331a      	adds	r3, #26
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	b292      	uxth	r2, r2
 800af9c:	4611      	mov	r1, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff f857 	bl	800a052 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d109      	bne.n	800afc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f103 0214 	add.w	r2, r3, #20
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	0c1b      	lsrs	r3, r3, #16
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	4619      	mov	r1, r3
 800afba:	4610      	mov	r0, r2
 800afbc:	f7ff f849 	bl	800a052 <st_word>
	}
}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800afd6:	2100      	movs	r1, #0
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7ff fe2f 	bl	800ac3c <dir_sdi>
 800afde:	4603      	mov	r3, r0
 800afe0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800afe2:	7dfb      	ldrb	r3, [r7, #23]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <dir_find+0x24>
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	e03e      	b.n	800b06a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6938      	ldr	r0, [r7, #16]
 800aff4:	f7ff faa2 	bl	800a53c <move_window>
 800aff8:	4603      	mov	r3, r0
 800affa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800affc:	7dfb      	ldrb	r3, [r7, #23]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d12f      	bne.n	800b062 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d102      	bne.n	800b016 <dir_find+0x4e>
 800b010:	2304      	movs	r3, #4
 800b012:	75fb      	strb	r3, [r7, #23]
 800b014:	e028      	b.n	800b068 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	330b      	adds	r3, #11
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	330b      	adds	r3, #11
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	f003 0308 	and.w	r3, r3, #8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <dir_find+0x86>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a18      	ldr	r0, [r3, #32]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3324      	adds	r3, #36	; 0x24
 800b040:	220b      	movs	r2, #11
 800b042:	4619      	mov	r1, r3
 800b044:	f7ff f888 	bl	800a158 <mem_cmp>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b04e:	2100      	movs	r1, #0
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fe6e 	bl	800ad32 <dir_next>
 800b056:	4603      	mov	r3, r0
 800b058:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0c5      	beq.n	800afec <dir_find+0x24>
 800b060:	e002      	b.n	800b068 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b062:	bf00      	nop
 800b064:	e000      	b.n	800b068 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b066:	bf00      	nop

	return res;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b080:	2101      	movs	r1, #1
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff ff1a 	bl	800aebc <dir_alloc>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d11c      	bne.n	800b0cc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	4619      	mov	r1, r3
 800b098:	68b8      	ldr	r0, [r7, #8]
 800b09a:	f7ff fa4f 	bl	800a53c <move_window>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d111      	bne.n	800b0cc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7ff f836 	bl	800a122 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a18      	ldr	r0, [r3, #32]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3324      	adds	r3, #36	; 0x24
 800b0be:	220b      	movs	r2, #11
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f7ff f80d 	bl	800a0e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b088      	sub	sp, #32
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3324      	adds	r3, #36	; 0x24
 800b0ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b0ee:	220b      	movs	r2, #11
 800b0f0:	2120      	movs	r1, #32
 800b0f2:	68b8      	ldr	r0, [r7, #8]
 800b0f4:	f7ff f815 	bl	800a122 <mem_set>
	si = i = 0; ni = 8;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	61fb      	str	r3, [r7, #28]
 800b100:	2308      	movs	r3, #8
 800b102:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	61fa      	str	r2, [r7, #28]
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4413      	add	r3, r2
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b112:	7efb      	ldrb	r3, [r7, #27]
 800b114:	2b20      	cmp	r3, #32
 800b116:	d94e      	bls.n	800b1b6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b118:	7efb      	ldrb	r3, [r7, #27]
 800b11a:	2b2f      	cmp	r3, #47	; 0x2f
 800b11c:	d006      	beq.n	800b12c <create_name+0x54>
 800b11e:	7efb      	ldrb	r3, [r7, #27]
 800b120:	2b5c      	cmp	r3, #92	; 0x5c
 800b122:	d110      	bne.n	800b146 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b124:	e002      	b.n	800b12c <create_name+0x54>
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	3301      	adds	r3, #1
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	4413      	add	r3, r2
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	2b2f      	cmp	r3, #47	; 0x2f
 800b136:	d0f6      	beq.n	800b126 <create_name+0x4e>
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	4413      	add	r3, r2
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	2b5c      	cmp	r3, #92	; 0x5c
 800b142:	d0f0      	beq.n	800b126 <create_name+0x4e>
			break;
 800b144:	e038      	b.n	800b1b8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b146:	7efb      	ldrb	r3, [r7, #27]
 800b148:	2b2e      	cmp	r3, #46	; 0x2e
 800b14a:	d003      	beq.n	800b154 <create_name+0x7c>
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	429a      	cmp	r2, r3
 800b152:	d30c      	bcc.n	800b16e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b0b      	cmp	r3, #11
 800b158:	d002      	beq.n	800b160 <create_name+0x88>
 800b15a:	7efb      	ldrb	r3, [r7, #27]
 800b15c:	2b2e      	cmp	r3, #46	; 0x2e
 800b15e:	d001      	beq.n	800b164 <create_name+0x8c>
 800b160:	2306      	movs	r3, #6
 800b162:	e044      	b.n	800b1ee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b164:	2308      	movs	r3, #8
 800b166:	613b      	str	r3, [r7, #16]
 800b168:	230b      	movs	r3, #11
 800b16a:	617b      	str	r3, [r7, #20]
			continue;
 800b16c:	e022      	b.n	800b1b4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b16e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b172:	2b00      	cmp	r3, #0
 800b174:	da04      	bge.n	800b180 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b176:	7efb      	ldrb	r3, [r7, #27]
 800b178:	3b80      	subs	r3, #128	; 0x80
 800b17a:	4a1f      	ldr	r2, [pc, #124]	; (800b1f8 <create_name+0x120>)
 800b17c:	5cd3      	ldrb	r3, [r2, r3]
 800b17e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b180:	7efb      	ldrb	r3, [r7, #27]
 800b182:	4619      	mov	r1, r3
 800b184:	481d      	ldr	r0, [pc, #116]	; (800b1fc <create_name+0x124>)
 800b186:	f7ff f80e 	bl	800a1a6 <chk_chr>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <create_name+0xbc>
 800b190:	2306      	movs	r3, #6
 800b192:	e02c      	b.n	800b1ee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b194:	7efb      	ldrb	r3, [r7, #27]
 800b196:	2b60      	cmp	r3, #96	; 0x60
 800b198:	d905      	bls.n	800b1a6 <create_name+0xce>
 800b19a:	7efb      	ldrb	r3, [r7, #27]
 800b19c:	2b7a      	cmp	r3, #122	; 0x7a
 800b19e:	d802      	bhi.n	800b1a6 <create_name+0xce>
 800b1a0:	7efb      	ldrb	r3, [r7, #27]
 800b1a2:	3b20      	subs	r3, #32
 800b1a4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	1c5a      	adds	r2, r3, #1
 800b1aa:	613a      	str	r2, [r7, #16]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	7efa      	ldrb	r2, [r7, #27]
 800b1b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b1b4:	e7a6      	b.n	800b104 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b1b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	441a      	add	r2, r3
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <create_name+0xf4>
 800b1c8:	2306      	movs	r3, #6
 800b1ca:	e010      	b.n	800b1ee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	781b      	ldrb	r3, [r3, #0]
 800b1d0:	2be5      	cmp	r3, #229	; 0xe5
 800b1d2:	d102      	bne.n	800b1da <create_name+0x102>
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	2205      	movs	r2, #5
 800b1d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b1da:	7efb      	ldrb	r3, [r7, #27]
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d801      	bhi.n	800b1e4 <create_name+0x10c>
 800b1e0:	2204      	movs	r2, #4
 800b1e2:	e000      	b.n	800b1e6 <create_name+0x10e>
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	330b      	adds	r3, #11
 800b1ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b1ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3720      	adds	r7, #32
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	08013e60 	.word	0x08013e60
 800b1fc:	08013d58 	.word	0x08013d58

0800b200 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b086      	sub	sp, #24
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b214:	e002      	b.n	800b21c <follow_path+0x1c>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	2b2f      	cmp	r3, #47	; 0x2f
 800b222:	d0f8      	beq.n	800b216 <follow_path+0x16>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	2b5c      	cmp	r3, #92	; 0x5c
 800b22a:	d0f4      	beq.n	800b216 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2200      	movs	r2, #0
 800b230:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b1f      	cmp	r3, #31
 800b238:	d80a      	bhi.n	800b250 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2280      	movs	r2, #128	; 0x80
 800b23e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b242:	2100      	movs	r1, #0
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fcf9 	bl	800ac3c <dir_sdi>
 800b24a:	4603      	mov	r3, r0
 800b24c:	75fb      	strb	r3, [r7, #23]
 800b24e:	e043      	b.n	800b2d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b250:	463b      	mov	r3, r7
 800b252:	4619      	mov	r1, r3
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ff3f 	bl	800b0d8 <create_name>
 800b25a:	4603      	mov	r3, r0
 800b25c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d134      	bne.n	800b2ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff feaf 	bl	800afc8 <dir_find>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b274:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b27c:	7dfb      	ldrb	r3, [r7, #23]
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d127      	bne.n	800b2d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b282:	7afb      	ldrb	r3, [r7, #11]
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d122      	bne.n	800b2d2 <follow_path+0xd2>
 800b28c:	2305      	movs	r3, #5
 800b28e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b290:	e01f      	b.n	800b2d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b292:	7afb      	ldrb	r3, [r7, #11]
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d11c      	bne.n	800b2d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	799b      	ldrb	r3, [r3, #6]
 800b2a0:	f003 0310 	and.w	r3, r3, #16
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b2a8:	2305      	movs	r3, #5
 800b2aa:	75fb      	strb	r3, [r7, #23]
 800b2ac:	e014      	b.n	800b2d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2bc:	4413      	add	r3, r2
 800b2be:	4619      	mov	r1, r3
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff fe42 	bl	800af4a <ld_clust>
 800b2c6:	4602      	mov	r2, r0
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b2cc:	e7c0      	b.n	800b250 <follow_path+0x50>
			if (res != FR_OK) break;
 800b2ce:	bf00      	nop
 800b2d0:	e002      	b.n	800b2d8 <follow_path+0xd8>
				break;
 800b2d2:	bf00      	nop
 800b2d4:	e000      	b.n	800b2d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b2d6:	bf00      	nop
			}
		}
	}

	return res;
 800b2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b087      	sub	sp, #28
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b2ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d031      	beq.n	800b35c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	617b      	str	r3, [r7, #20]
 800b2fe:	e002      	b.n	800b306 <get_ldnumber+0x24>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	3301      	adds	r3, #1
 800b304:	617b      	str	r3, [r7, #20]
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d903      	bls.n	800b316 <get_ldnumber+0x34>
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b3a      	cmp	r3, #58	; 0x3a
 800b314:	d1f4      	bne.n	800b300 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	2b3a      	cmp	r3, #58	; 0x3a
 800b31c:	d11c      	bne.n	800b358 <get_ldnumber+0x76>
			tp = *path;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	60fa      	str	r2, [r7, #12]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	3b30      	subs	r3, #48	; 0x30
 800b32e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2b09      	cmp	r3, #9
 800b334:	d80e      	bhi.n	800b354 <get_ldnumber+0x72>
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d10a      	bne.n	800b354 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d107      	bne.n	800b354 <get_ldnumber+0x72>
					vol = (int)i;
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	3301      	adds	r3, #1
 800b34c:	617b      	str	r3, [r7, #20]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	e002      	b.n	800b35e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b358:	2300      	movs	r3, #0
 800b35a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b35c:	693b      	ldr	r3, [r7, #16]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	371c      	adds	r7, #28
 800b362:	46bd      	mov	sp, r7
 800b364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b368:	4770      	bx	lr
	...

0800b36c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	70da      	strb	r2, [r3, #3]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b382:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff f8d8 	bl	800a53c <move_window>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <check_fs+0x2a>
 800b392:	2304      	movs	r3, #4
 800b394:	e038      	b.n	800b408 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	3330      	adds	r3, #48	; 0x30
 800b39a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe fe1c 	bl	8009fdc <ld_word>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d001      	beq.n	800b3b4 <check_fs+0x48>
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e029      	b.n	800b408 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3ba:	2be9      	cmp	r3, #233	; 0xe9
 800b3bc:	d009      	beq.n	800b3d2 <check_fs+0x66>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3c4:	2beb      	cmp	r3, #235	; 0xeb
 800b3c6:	d11e      	bne.n	800b406 <check_fs+0x9a>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b3ce:	2b90      	cmp	r3, #144	; 0x90
 800b3d0:	d119      	bne.n	800b406 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3330      	adds	r3, #48	; 0x30
 800b3d6:	3336      	adds	r3, #54	; 0x36
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe fe17 	bl	800a00c <ld_dword>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b3e4:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <check_fs+0xa4>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d101      	bne.n	800b3ee <check_fs+0x82>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e00c      	b.n	800b408 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3330      	adds	r3, #48	; 0x30
 800b3f2:	3352      	adds	r3, #82	; 0x52
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fe fe09 	bl	800a00c <ld_dword>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4a05      	ldr	r2, [pc, #20]	; (800b414 <check_fs+0xa8>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d101      	bne.n	800b406 <check_fs+0x9a>
 800b402:	2300      	movs	r3, #0
 800b404:	e000      	b.n	800b408 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b406:	2302      	movs	r3, #2
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	00544146 	.word	0x00544146
 800b414:	33544146 	.word	0x33544146

0800b418 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b096      	sub	sp, #88	; 0x58
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	4613      	mov	r3, r2
 800b424:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7ff ff58 	bl	800b2e2 <get_ldnumber>
 800b432:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b436:	2b00      	cmp	r3, #0
 800b438:	da01      	bge.n	800b43e <find_volume+0x26>
 800b43a:	230b      	movs	r3, #11
 800b43c:	e22d      	b.n	800b89a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b43e:	4aa1      	ldr	r2, [pc, #644]	; (800b6c4 <find_volume+0x2ac>)
 800b440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b446:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <find_volume+0x3a>
 800b44e:	230c      	movs	r3, #12
 800b450:	e223      	b.n	800b89a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b456:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	f023 0301 	bic.w	r3, r3, #1
 800b45e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d01a      	beq.n	800b49e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f7fe fd17 	bl	8009ea0 <disk_status>
 800b472:	4603      	mov	r3, r0
 800b474:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b478:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10c      	bne.n	800b49e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d007      	beq.n	800b49a <find_volume+0x82>
 800b48a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b496:	230a      	movs	r3, #10
 800b498:	e1ff      	b.n	800b89a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b49a:	2300      	movs	r3, #0
 800b49c:	e1fd      	b.n	800b89a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4a6:	b2da      	uxtb	r2, r3
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ae:	785b      	ldrb	r3, [r3, #1]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fd0f 	bl	8009ed4 <disk_initialize>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b4bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d001      	beq.n	800b4cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e1e6      	b.n	800b89a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b4cc:	79fb      	ldrb	r3, [r7, #7]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d007      	beq.n	800b4e2 <find_volume+0xca>
 800b4d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b4d6:	f003 0304 	and.w	r3, r3, #4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d001      	beq.n	800b4e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b4de:	230a      	movs	r3, #10
 800b4e0:	e1db      	b.n	800b89a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b4e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b4ea:	f7ff ff3f 	bl	800b36c <check_fs>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b4f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d149      	bne.n	800b590 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b500:	e01e      	b.n	800b540 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b504:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b510:	4413      	add	r3, r2
 800b512:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	3304      	adds	r3, #4
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d006      	beq.n	800b52c <find_volume+0x114>
 800b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b520:	3308      	adds	r3, #8
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe fd72 	bl	800a00c <ld_dword>
 800b528:	4602      	mov	r2, r0
 800b52a:	e000      	b.n	800b52e <find_volume+0x116>
 800b52c:	2200      	movs	r2, #0
 800b52e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	3358      	adds	r3, #88	; 0x58
 800b534:	443b      	add	r3, r7
 800b536:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b53c:	3301      	adds	r3, #1
 800b53e:	643b      	str	r3, [r7, #64]	; 0x40
 800b540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b542:	2b03      	cmp	r3, #3
 800b544:	d9dd      	bls.n	800b502 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b546:	2300      	movs	r3, #0
 800b548:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <find_volume+0x13e>
 800b550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b552:	3b01      	subs	r3, #1
 800b554:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	3358      	adds	r3, #88	; 0x58
 800b55c:	443b      	add	r3, r7
 800b55e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b562:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <find_volume+0x15e>
 800b56a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b56c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b56e:	f7ff fefd 	bl	800b36c <check_fs>
 800b572:	4603      	mov	r3, r0
 800b574:	e000      	b.n	800b578 <find_volume+0x160>
 800b576:	2303      	movs	r3, #3
 800b578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b57c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b580:	2b01      	cmp	r3, #1
 800b582:	d905      	bls.n	800b590 <find_volume+0x178>
 800b584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b586:	3301      	adds	r3, #1
 800b588:	643b      	str	r3, [r7, #64]	; 0x40
 800b58a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d9e2      	bls.n	800b556 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b594:	2b04      	cmp	r3, #4
 800b596:	d101      	bne.n	800b59c <find_volume+0x184>
 800b598:	2301      	movs	r3, #1
 800b59a:	e17e      	b.n	800b89a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d901      	bls.n	800b5a8 <find_volume+0x190>
 800b5a4:	230d      	movs	r3, #13
 800b5a6:	e178      	b.n	800b89a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	3330      	adds	r3, #48	; 0x30
 800b5ac:	330b      	adds	r3, #11
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe fd14 	bl	8009fdc <ld_word>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ba:	d001      	beq.n	800b5c0 <find_volume+0x1a8>
 800b5bc:	230d      	movs	r3, #13
 800b5be:	e16c      	b.n	800b89a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	3330      	adds	r3, #48	; 0x30
 800b5c4:	3316      	adds	r3, #22
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fd08 	bl	8009fdc <ld_word>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d106      	bne.n	800b5e4 <find_volume+0x1cc>
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	3330      	adds	r3, #48	; 0x30
 800b5da:	3324      	adds	r3, #36	; 0x24
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fe fd15 	bl	800a00c <ld_dword>
 800b5e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f6:	789b      	ldrb	r3, [r3, #2]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d005      	beq.n	800b608 <find_volume+0x1f0>
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5fe:	789b      	ldrb	r3, [r3, #2]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d001      	beq.n	800b608 <find_volume+0x1f0>
 800b604:	230d      	movs	r3, #13
 800b606:	e148      	b.n	800b89a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b60a:	789b      	ldrb	r3, [r3, #2]
 800b60c:	461a      	mov	r2, r3
 800b60e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b610:	fb02 f303 	mul.w	r3, r2, r3
 800b614:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b620:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	895b      	ldrh	r3, [r3, #10]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d008      	beq.n	800b63c <find_volume+0x224>
 800b62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62c:	895b      	ldrh	r3, [r3, #10]
 800b62e:	461a      	mov	r2, r3
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	895b      	ldrh	r3, [r3, #10]
 800b634:	3b01      	subs	r3, #1
 800b636:	4013      	ands	r3, r2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <find_volume+0x228>
 800b63c:	230d      	movs	r3, #13
 800b63e:	e12c      	b.n	800b89a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	3330      	adds	r3, #48	; 0x30
 800b644:	3311      	adds	r3, #17
 800b646:	4618      	mov	r0, r3
 800b648:	f7fe fcc8 	bl	8009fdc <ld_word>
 800b64c:	4603      	mov	r3, r0
 800b64e:	461a      	mov	r2, r3
 800b650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b652:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b656:	891b      	ldrh	r3, [r3, #8]
 800b658:	f003 030f 	and.w	r3, r3, #15
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <find_volume+0x24e>
 800b662:	230d      	movs	r3, #13
 800b664:	e119      	b.n	800b89a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b668:	3330      	adds	r3, #48	; 0x30
 800b66a:	3313      	adds	r3, #19
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fcb5 	bl	8009fdc <ld_word>
 800b672:	4603      	mov	r3, r0
 800b674:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d106      	bne.n	800b68a <find_volume+0x272>
 800b67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67e:	3330      	adds	r3, #48	; 0x30
 800b680:	3320      	adds	r3, #32
 800b682:	4618      	mov	r0, r3
 800b684:	f7fe fcc2 	bl	800a00c <ld_dword>
 800b688:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68c:	3330      	adds	r3, #48	; 0x30
 800b68e:	330e      	adds	r3, #14
 800b690:	4618      	mov	r0, r3
 800b692:	f7fe fca3 	bl	8009fdc <ld_word>
 800b696:	4603      	mov	r3, r0
 800b698:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b69a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d101      	bne.n	800b6a4 <find_volume+0x28c>
 800b6a0:	230d      	movs	r3, #13
 800b6a2:	e0fa      	b.n	800b89a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b6a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6a8:	4413      	add	r3, r2
 800b6aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ac:	8912      	ldrh	r2, [r2, #8]
 800b6ae:	0912      	lsrs	r2, r2, #4
 800b6b0:	b292      	uxth	r2, r2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b6b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d204      	bcs.n	800b6c8 <find_volume+0x2b0>
 800b6be:	230d      	movs	r3, #13
 800b6c0:	e0eb      	b.n	800b89a <find_volume+0x482>
 800b6c2:	bf00      	nop
 800b6c4:	20005e54 	.word	0x20005e54
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6d0:	8952      	ldrh	r2, [r2, #10]
 800b6d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <find_volume+0x2ca>
 800b6de:	230d      	movs	r3, #13
 800b6e0:	e0db      	b.n	800b89a <find_volume+0x482>
		fmt = FS_FAT32;
 800b6e2:	2303      	movs	r3, #3
 800b6e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d802      	bhi.n	800b6f8 <find_volume+0x2e0>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d802      	bhi.n	800b708 <find_volume+0x2f0>
 800b702:	2301      	movs	r3, #1
 800b704:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	1c9a      	adds	r2, r3, #2
 800b70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b70e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b714:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b716:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b71a:	441a      	add	r2, r3
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	441a      	add	r2, r3
 800b726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b728:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b72a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d11e      	bne.n	800b770 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	3330      	adds	r3, #48	; 0x30
 800b736:	332a      	adds	r3, #42	; 0x2a
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fe fc4f 	bl	8009fdc <ld_word>
 800b73e:	4603      	mov	r3, r0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d001      	beq.n	800b748 <find_volume+0x330>
 800b744:	230d      	movs	r3, #13
 800b746:	e0a8      	b.n	800b89a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	891b      	ldrh	r3, [r3, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <find_volume+0x33c>
 800b750:	230d      	movs	r3, #13
 800b752:	e0a2      	b.n	800b89a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	3330      	adds	r3, #48	; 0x30
 800b758:	332c      	adds	r3, #44	; 0x2c
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fe fc56 	bl	800a00c <ld_dword>
 800b760:	4602      	mov	r2, r0
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	647b      	str	r3, [r7, #68]	; 0x44
 800b76e:	e01f      	b.n	800b7b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b772:	891b      	ldrh	r3, [r3, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <find_volume+0x364>
 800b778:	230d      	movs	r3, #13
 800b77a:	e08e      	b.n	800b89a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	6a1a      	ldr	r2, [r3, #32]
 800b780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b782:	441a      	add	r2, r3
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d103      	bne.n	800b798 <find_volume+0x380>
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	e00a      	b.n	800b7ae <find_volume+0x396>
 800b798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b79a:	695a      	ldr	r2, [r3, #20]
 800b79c:	4613      	mov	r3, r2
 800b79e:	005b      	lsls	r3, r3, #1
 800b7a0:	4413      	add	r3, r2
 800b7a2:	085a      	lsrs	r2, r3, #1
 800b7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a6:	695b      	ldr	r3, [r3, #20]
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b7ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	699a      	ldr	r2, [r3, #24]
 800b7b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b7ba:	0a5b      	lsrs	r3, r3, #9
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d201      	bcs.n	800b7c4 <find_volume+0x3ac>
 800b7c0:	230d      	movs	r3, #13
 800b7c2:	e06a      	b.n	800b89a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ca:	611a      	str	r2, [r3, #16]
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	2280      	movs	r2, #128	; 0x80
 800b7d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b7da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7de:	2b03      	cmp	r3, #3
 800b7e0:	d149      	bne.n	800b876 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e4:	3330      	adds	r3, #48	; 0x30
 800b7e6:	3330      	adds	r3, #48	; 0x30
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fbf7 	bl	8009fdc <ld_word>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d140      	bne.n	800b876 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7fc:	f7fe fe9e 	bl	800a53c <move_window>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d137      	bne.n	800b876 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2200      	movs	r2, #0
 800b80a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	3330      	adds	r3, #48	; 0x30
 800b810:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fbe1 	bl	8009fdc <ld_word>
 800b81a:	4603      	mov	r3, r0
 800b81c:	461a      	mov	r2, r3
 800b81e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b822:	429a      	cmp	r2, r3
 800b824:	d127      	bne.n	800b876 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	3330      	adds	r3, #48	; 0x30
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fe fbee 	bl	800a00c <ld_dword>
 800b830:	4603      	mov	r3, r0
 800b832:	4a1c      	ldr	r2, [pc, #112]	; (800b8a4 <find_volume+0x48c>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d11e      	bne.n	800b876 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83a:	3330      	adds	r3, #48	; 0x30
 800b83c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b840:	4618      	mov	r0, r3
 800b842:	f7fe fbe3 	bl	800a00c <ld_dword>
 800b846:	4603      	mov	r3, r0
 800b848:	4a17      	ldr	r2, [pc, #92]	; (800b8a8 <find_volume+0x490>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d113      	bne.n	800b876 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	3330      	adds	r3, #48	; 0x30
 800b852:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b856:	4618      	mov	r0, r3
 800b858:	f7fe fbd8 	bl	800a00c <ld_dword>
 800b85c:	4602      	mov	r2, r0
 800b85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b860:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b864:	3330      	adds	r3, #48	; 0x30
 800b866:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fe fbce 	bl	800a00c <ld_dword>
 800b870:	4602      	mov	r2, r0
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b878:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b87c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b87e:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <find_volume+0x494>)
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	b29a      	uxth	r2, r3
 800b886:	4b09      	ldr	r3, [pc, #36]	; (800b8ac <find_volume+0x494>)
 800b888:	801a      	strh	r2, [r3, #0]
 800b88a:	4b08      	ldr	r3, [pc, #32]	; (800b8ac <find_volume+0x494>)
 800b88c:	881a      	ldrh	r2, [r3, #0]
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b892:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b894:	f7fe fdea 	bl	800a46c <clear_lock>
#endif
	return FR_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3758      	adds	r7, #88	; 0x58
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	41615252 	.word	0x41615252
 800b8a8:	61417272 	.word	0x61417272
 800b8ac:	20005e58 	.word	0x20005e58

0800b8b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b8ba:	2309      	movs	r3, #9
 800b8bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d01c      	beq.n	800b8fe <validate+0x4e>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d018      	beq.n	800b8fe <validate+0x4e>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d013      	beq.n	800b8fe <validate+0x4e>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	889a      	ldrh	r2, [r3, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	88db      	ldrh	r3, [r3, #6]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d10c      	bne.n	800b8fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	785b      	ldrb	r3, [r3, #1]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fad8 	bl	8009ea0 <disk_status>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d101      	bne.n	800b8fe <validate+0x4e>
			res = FR_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <validate+0x5a>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	e000      	b.n	800b90c <validate+0x5c>
 800b90a:	2300      	movs	r3, #0
 800b90c:	683a      	ldr	r2, [r7, #0]
 800b90e:	6013      	str	r3, [r2, #0]
	return res;
 800b910:	7bfb      	ldrb	r3, [r7, #15]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b92e:	f107 0310 	add.w	r3, r7, #16
 800b932:	4618      	mov	r0, r3
 800b934:	f7ff fcd5 	bl	800b2e2 <get_ldnumber>
 800b938:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da01      	bge.n	800b944 <f_mount+0x28>
 800b940:	230b      	movs	r3, #11
 800b942:	e02b      	b.n	800b99c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b944:	4a17      	ldr	r2, [pc, #92]	; (800b9a4 <f_mount+0x88>)
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b94c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d005      	beq.n	800b960 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b954:	69b8      	ldr	r0, [r7, #24]
 800b956:	f7fe fd89 	bl	800a46c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	490d      	ldr	r1, [pc, #52]	; (800b9a4 <f_mount+0x88>)
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <f_mount+0x66>
 800b97c:	79fb      	ldrb	r3, [r7, #7]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d001      	beq.n	800b986 <f_mount+0x6a>
 800b982:	2300      	movs	r3, #0
 800b984:	e00a      	b.n	800b99c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b986:	f107 010c 	add.w	r1, r7, #12
 800b98a:	f107 0308 	add.w	r3, r7, #8
 800b98e:	2200      	movs	r2, #0
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff fd41 	bl	800b418 <find_volume>
 800b996:	4603      	mov	r3, r0
 800b998:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20005e54 	.word	0x20005e54

0800b9a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b098      	sub	sp, #96	; 0x60
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d101      	bne.n	800b9c0 <f_open+0x18>
 800b9bc:	2309      	movs	r3, #9
 800b9be:	e1ad      	b.n	800bd1c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b9c8:	79fa      	ldrb	r2, [r7, #7]
 800b9ca:	f107 0110 	add.w	r1, r7, #16
 800b9ce:	f107 0308 	add.w	r3, r7, #8
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fd20 	bl	800b418 <find_volume>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b9de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f040 8191 	bne.w	800bd0a <f_open+0x362>
		dj.obj.fs = fs;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	f107 0314 	add.w	r3, r7, #20
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff fc03 	bl	800b200 <follow_path>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ba00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d11a      	bne.n	800ba3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ba08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba0c:	b25b      	sxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	da03      	bge.n	800ba1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ba12:	2306      	movs	r3, #6
 800ba14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba18:	e011      	b.n	800ba3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	f023 0301 	bic.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	bf14      	ite	ne
 800ba24:	2301      	movne	r3, #1
 800ba26:	2300      	moveq	r3, #0
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f107 0314 	add.w	r3, r7, #20
 800ba30:	4611      	mov	r1, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fbd2 	bl	800a1dc <chk_lock>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	f003 031c 	and.w	r3, r3, #28
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d07f      	beq.n	800bb48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ba48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d017      	beq.n	800ba80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ba50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d10e      	bne.n	800ba76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ba58:	f7fe fc1c 	bl	800a294 <enq_lock>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d006      	beq.n	800ba70 <f_open+0xc8>
 800ba62:	f107 0314 	add.w	r3, r7, #20
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fb03 	bl	800b072 <dir_register>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	e000      	b.n	800ba72 <f_open+0xca>
 800ba70:	2312      	movs	r3, #18
 800ba72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	f043 0308 	orr.w	r3, r3, #8
 800ba7c:	71fb      	strb	r3, [r7, #7]
 800ba7e:	e010      	b.n	800baa2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ba80:	7ebb      	ldrb	r3, [r7, #26]
 800ba82:	f003 0311 	and.w	r3, r3, #17
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <f_open+0xea>
					res = FR_DENIED;
 800ba8a:	2307      	movs	r3, #7
 800ba8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ba90:	e007      	b.n	800baa2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ba92:	79fb      	ldrb	r3, [r7, #7]
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <f_open+0xfa>
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800baa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d168      	bne.n	800bb7c <f_open+0x1d4>
 800baaa:	79fb      	ldrb	r3, [r7, #7]
 800baac:	f003 0308 	and.w	r3, r3, #8
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d063      	beq.n	800bb7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800bab4:	f7fd ffa4 	bl	8009a00 <get_fattime>
 800bab8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800baba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babc:	330e      	adds	r3, #14
 800babe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fae1 	bl	800a088 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac8:	3316      	adds	r3, #22
 800baca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe fadb 	bl	800a088 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad4:	330b      	adds	r3, #11
 800bad6:	2220      	movs	r2, #32
 800bad8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7ff fa32 	bl	800af4a <ld_clust>
 800bae6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800baec:	2200      	movs	r2, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fa4a 	bl	800af88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800baf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baf6:	331c      	adds	r3, #28
 800baf8:	2100      	movs	r1, #0
 800bafa:	4618      	mov	r0, r3
 800bafc:	f7fe fac4 	bl	800a088 <st_dword>
					fs->wflag = 1;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2201      	movs	r2, #1
 800bb04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bb06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d037      	beq.n	800bb7c <f_open+0x1d4>
						dw = fs->winsect;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bb12:	f107 0314 	add.w	r3, r7, #20
 800bb16:	2200      	movs	r2, #0
 800bb18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7fe ff5d 	bl	800a9da <remove_chain>
 800bb20:	4603      	mov	r3, r0
 800bb22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bb26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d126      	bne.n	800bb7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe fd02 	bl	800a53c <move_window>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb42:	3a01      	subs	r2, #1
 800bb44:	60da      	str	r2, [r3, #12]
 800bb46:	e019      	b.n	800bb7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bb48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d115      	bne.n	800bb7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bb50:	7ebb      	ldrb	r3, [r7, #26]
 800bb52:	f003 0310 	and.w	r3, r3, #16
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800bb5a:	2304      	movs	r3, #4
 800bb5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bb60:	e00c      	b.n	800bb7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d007      	beq.n	800bb7c <f_open+0x1d4>
 800bb6c:	7ebb      	ldrb	r3, [r7, #26]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <f_open+0x1d4>
						res = FR_DENIED;
 800bb76:	2307      	movs	r3, #7
 800bb78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bb7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d128      	bne.n	800bbd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	f003 0308 	and.w	r3, r3, #8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bb8e:	79fb      	ldrb	r3, [r7, #7]
 800bb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bb9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	f023 0301 	bic.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bf14      	ite	ne
 800bbae:	2301      	movne	r3, #1
 800bbb0:	2300      	moveq	r3, #0
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	f107 0314 	add.w	r3, r7, #20
 800bbba:	4611      	mov	r1, r2
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fb8b 	bl	800a2d8 <inc_lock>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <f_open+0x22e>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bbd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 8095 	bne.w	800bd0a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff f9af 	bl	800af4a <ld_clust>
 800bbec:	4602      	mov	r2, r0
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	331c      	adds	r3, #28
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fe fa08 	bl	800a00c <ld_dword>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2200      	movs	r2, #0
 800bc06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	88da      	ldrh	r2, [r3, #6]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	79fa      	ldrb	r2, [r7, #7]
 800bc1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3330      	adds	r3, #48	; 0x30
 800bc32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc36:	2100      	movs	r1, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe fa72 	bl	800a122 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	f003 0320 	and.w	r3, r3, #32
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d060      	beq.n	800bd0a <f_open+0x362>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d05c      	beq.n	800bd0a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	895b      	ldrh	r3, [r3, #10]
 800bc5c:	025b      	lsls	r3, r3, #9
 800bc5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc6c:	e016      	b.n	800bc9c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fd1d 	bl	800a6b2 <get_fat>
 800bc78:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bc7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d802      	bhi.n	800bc86 <f_open+0x2de>
 800bc80:	2302      	movs	r3, #2
 800bc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bc86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc8c:	d102      	bne.n	800bc94 <f_open+0x2ec>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bc94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d103      	bne.n	800bcac <f_open+0x304>
 800bca4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d8e0      	bhi.n	800bc6e <f_open+0x2c6>
				}
				fp->clust = clst;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bcb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d127      	bne.n	800bd0a <f_open+0x362>
 800bcba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d022      	beq.n	800bd0a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fcd3 	bl	800a674 <clust2sect>
 800bcce:	6478      	str	r0, [r7, #68]	; 0x44
 800bcd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d103      	bne.n	800bcde <f_open+0x336>
						res = FR_INT_ERR;
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bcdc:	e015      	b.n	800bd0a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bce0:	0a5a      	lsrs	r2, r3, #9
 800bce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce4:	441a      	add	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	7858      	ldrb	r0, [r3, #1]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6a1a      	ldr	r2, [r3, #32]
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f7fe f911 	bl	8009f20 <disk_read>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d002      	beq.n	800bd0a <f_open+0x362>
 800bd04:	2301      	movs	r3, #1
 800bd06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bd0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d002      	beq.n	800bd18 <f_open+0x370>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bd18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3760      	adds	r7, #96	; 0x60
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08c      	sub	sp, #48	; 0x30
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f107 0210 	add.w	r2, r7, #16
 800bd42:	4611      	mov	r1, r2
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7ff fdb3 	bl	800b8b0 <validate>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bd50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d107      	bne.n	800bd68 <f_write+0x44>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	7d5b      	ldrb	r3, [r3, #21]
 800bd5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bd60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d002      	beq.n	800bd6e <f_write+0x4a>
 800bd68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd6c:	e14b      	b.n	800c006 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	7d1b      	ldrb	r3, [r3, #20]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <f_write+0x5a>
 800bd7a:	2307      	movs	r3, #7
 800bd7c:	e143      	b.n	800c006 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	699a      	ldr	r2, [r3, #24]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	441a      	add	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	f080 812d 	bcs.w	800bfea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	699b      	ldr	r3, [r3, #24]
 800bd94:	43db      	mvns	r3, r3
 800bd96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bd98:	e127      	b.n	800bfea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	699b      	ldr	r3, [r3, #24]
 800bd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f040 80e3 	bne.w	800bf6e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	0a5b      	lsrs	r3, r3, #9
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	8952      	ldrh	r2, [r2, #10]
 800bdb2:	3a01      	subs	r2, #1
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d143      	bne.n	800be46 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10c      	bne.n	800bde0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d11a      	bne.n	800be08 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fe fe64 	bl	800aaa4 <create_chain>
 800bddc:	62b8      	str	r0, [r7, #40]	; 0x28
 800bdde:	e013      	b.n	800be08 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d007      	beq.n	800bdf8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	4619      	mov	r1, r3
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f7fe fef0 	bl	800abd4 <clmt_clust>
 800bdf4:	62b8      	str	r0, [r7, #40]	; 0x28
 800bdf6:	e007      	b.n	800be08 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	69db      	ldr	r3, [r3, #28]
 800bdfe:	4619      	mov	r1, r3
 800be00:	4610      	mov	r0, r2
 800be02:	f7fe fe4f 	bl	800aaa4 <create_chain>
 800be06:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 80f2 	beq.w	800bff4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	2b01      	cmp	r3, #1
 800be14:	d104      	bne.n	800be20 <f_write+0xfc>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2202      	movs	r2, #2
 800be1a:	755a      	strb	r2, [r3, #21]
 800be1c:	2302      	movs	r3, #2
 800be1e:	e0f2      	b.n	800c006 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be26:	d104      	bne.n	800be32 <f_write+0x10e>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2201      	movs	r2, #1
 800be2c:	755a      	strb	r2, [r3, #21]
 800be2e:	2301      	movs	r3, #1
 800be30:	e0e9      	b.n	800c006 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be36:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d102      	bne.n	800be46 <f_write+0x122>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be44:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	7d1b      	ldrb	r3, [r3, #20]
 800be4a:	b25b      	sxtb	r3, r3
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	da18      	bge.n	800be82 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	7858      	ldrb	r0, [r3, #1]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a1a      	ldr	r2, [r3, #32]
 800be5e:	2301      	movs	r3, #1
 800be60:	f7fe f87e 	bl	8009f60 <disk_write>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <f_write+0x150>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2201      	movs	r2, #1
 800be6e:	755a      	strb	r2, [r3, #21]
 800be70:	2301      	movs	r3, #1
 800be72:	e0c8      	b.n	800c006 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	7d1b      	ldrb	r3, [r3, #20]
 800be78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be7c:	b2da      	uxtb	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	4619      	mov	r1, r3
 800be8a:	4610      	mov	r0, r2
 800be8c:	f7fe fbf2 	bl	800a674 <clust2sect>
 800be90:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d104      	bne.n	800bea2 <f_write+0x17e>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2202      	movs	r2, #2
 800be9c:	755a      	strb	r2, [r3, #21]
 800be9e:	2302      	movs	r3, #2
 800bea0:	e0b1      	b.n	800c006 <f_write+0x2e2>
			sect += csect;
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	4413      	add	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	0a5b      	lsrs	r3, r3, #9
 800beae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800beb0:	6a3b      	ldr	r3, [r7, #32]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d03c      	beq.n	800bf30 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	4413      	add	r3, r2
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	8952      	ldrh	r2, [r2, #10]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d905      	bls.n	800bed0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	895b      	ldrh	r3, [r3, #10]
 800bec8:	461a      	mov	r2, r3
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	1ad3      	subs	r3, r2, r3
 800bece:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	7858      	ldrb	r0, [r3, #1]
 800bed4:	6a3b      	ldr	r3, [r7, #32]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	69f9      	ldr	r1, [r7, #28]
 800beda:	f7fe f841 	bl	8009f60 <disk_write>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d004      	beq.n	800beee <f_write+0x1ca>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2201      	movs	r2, #1
 800bee8:	755a      	strb	r2, [r3, #21]
 800beea:	2301      	movs	r3, #1
 800beec:	e08b      	b.n	800c006 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	6a1a      	ldr	r2, [r3, #32]
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	6a3a      	ldr	r2, [r7, #32]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d915      	bls.n	800bf28 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6a1a      	ldr	r2, [r3, #32]
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	025b      	lsls	r3, r3, #9
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf14:	4619      	mov	r1, r3
 800bf16:	f7fe f8e3 	bl	800a0e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	7d1b      	ldrb	r3, [r3, #20]
 800bf1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf22:	b2da      	uxtb	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	025b      	lsls	r3, r3, #9
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bf2e:	e03f      	b.n	800bfb0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d016      	beq.n	800bf68 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	699a      	ldr	r2, [r3, #24]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d210      	bcs.n	800bf68 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	7858      	ldrb	r0, [r3, #1]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf50:	2301      	movs	r3, #1
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	f7fd ffe4 	bl	8009f20 <disk_read>
 800bf58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	755a      	strb	r2, [r3, #21]
 800bf64:	2301      	movs	r3, #1
 800bf66:	e04e      	b.n	800c006 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	699b      	ldr	r3, [r3, #24]
 800bf72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf76:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bf7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bf7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d901      	bls.n	800bf88 <f_write+0x264>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	699b      	ldr	r3, [r3, #24]
 800bf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf96:	4413      	add	r3, r2
 800bf98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf9a:	69f9      	ldr	r1, [r7, #28]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fe f89f 	bl	800a0e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	7d1b      	ldrb	r3, [r3, #20]
 800bfa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bfb0:	69fa      	ldr	r2, [r7, #28]
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	4413      	add	r3, r2
 800bfb6:	61fb      	str	r3, [r7, #28]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	699a      	ldr	r2, [r3, #24]
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	441a      	add	r2, r3
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	619a      	str	r2, [r3, #24]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	68da      	ldr	r2, [r3, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	bf38      	it	cc
 800bfd0:	461a      	movcc	r2, r3
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	60da      	str	r2, [r3, #12]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	441a      	add	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe6:	1ad3      	subs	r3, r2, r3
 800bfe8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f47f aed4 	bne.w	800bd9a <f_write+0x76>
 800bff2:	e000      	b.n	800bff6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bff4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	7d1b      	ldrb	r3, [r3, #20]
 800bffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bffe:	b2da      	uxtb	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c004:	2300      	movs	r3, #0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3730      	adds	r7, #48	; 0x30
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b086      	sub	sp, #24
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f107 0208 	add.w	r2, r7, #8
 800c01c:	4611      	mov	r1, r2
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff fc46 	bl	800b8b0 <validate>
 800c024:	4603      	mov	r3, r0
 800c026:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d168      	bne.n	800c100 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	7d1b      	ldrb	r3, [r3, #20]
 800c032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c036:	2b00      	cmp	r3, #0
 800c038:	d062      	beq.n	800c100 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7d1b      	ldrb	r3, [r3, #20]
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	da15      	bge.n	800c070 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	7858      	ldrb	r0, [r3, #1]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6a1a      	ldr	r2, [r3, #32]
 800c052:	2301      	movs	r3, #1
 800c054:	f7fd ff84 	bl	8009f60 <disk_write>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d001      	beq.n	800c062 <f_sync+0x54>
 800c05e:	2301      	movs	r3, #1
 800c060:	e04f      	b.n	800c102 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	7d1b      	ldrb	r3, [r3, #20]
 800c066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06a:	b2da      	uxtb	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c070:	f7fd fcc6 	bl	8009a00 <get_fattime>
 800c074:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	4619      	mov	r1, r3
 800c07e:	4610      	mov	r0, r2
 800c080:	f7fe fa5c 	bl	800a53c <move_window>
 800c084:	4603      	mov	r3, r0
 800c086:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c088:	7dfb      	ldrb	r3, [r7, #23]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d138      	bne.n	800c100 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c092:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	330b      	adds	r3, #11
 800c098:	781a      	ldrb	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	330b      	adds	r3, #11
 800c09e:	f042 0220 	orr.w	r2, r2, #32
 800c0a2:	b2d2      	uxtb	r2, r2
 800c0a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	68f9      	ldr	r1, [r7, #12]
 800c0b2:	f7fe ff69 	bl	800af88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f103 021c 	add.w	r2, r3, #28
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	f7fd ffe0 	bl	800a088 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	3316      	adds	r3, #22
 800c0cc:	6939      	ldr	r1, [r7, #16]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fd ffda 	bl	800a088 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3312      	adds	r3, #18
 800c0d8:	2100      	movs	r1, #0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd ffb9 	bl	800a052 <st_word>
					fs->wflag = 1;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fe fa55 	bl	800a598 <sync_fs>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7d1b      	ldrb	r3, [r3, #20]
 800c0f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c100:	7dfb      	ldrb	r3, [r7, #23]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b084      	sub	sp, #16
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f7ff ff7b 	bl	800c00e <f_sync>
 800c118:	4603      	mov	r3, r0
 800c11a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d118      	bne.n	800c154 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f107 0208 	add.w	r2, r7, #8
 800c128:	4611      	mov	r1, r2
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7ff fbc0 	bl	800b8b0 <validate>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c134:	7bfb      	ldrb	r3, [r7, #15]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10c      	bne.n	800c154 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	4618      	mov	r0, r3
 800c140:	f7fe f958 	bl	800a3f4 <dec_lock>
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d102      	bne.n	800c154 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b096      	sub	sp, #88	; 0x58
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c166:	f107 0108 	add.w	r1, r7, #8
 800c16a:	1d3b      	adds	r3, r7, #4
 800c16c:	2202      	movs	r2, #2
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff f952 	bl	800b418 <find_volume>
 800c174:	4603      	mov	r3, r0
 800c176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800c17e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c182:	2b00      	cmp	r3, #0
 800c184:	f040 80ec 	bne.w	800c360 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800c188:	687a      	ldr	r2, [r7, #4]
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f7ff f835 	bl	800b200 <follow_path>
 800c196:	4603      	mov	r3, r0
 800c198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800c19c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d102      	bne.n	800c1aa <f_mkdir+0x4c>
 800c1a4:	2308      	movs	r3, #8
 800c1a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800c1aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	f040 80d6 	bne.w	800c360 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800c1b4:	f107 030c 	add.w	r3, r7, #12
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fc72 	bl	800aaa4 <create_chain>
 800c1c0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	895b      	ldrh	r3, [r3, #10]
 800c1c6:	025b      	lsls	r3, r3, #9
 800c1c8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800c1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d102      	bne.n	800c1dc <f_mkdir+0x7e>
 800c1d6:	2307      	movs	r3, #7
 800c1d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800c1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d102      	bne.n	800c1e8 <f_mkdir+0x8a>
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1ee:	d102      	bne.n	800c1f6 <f_mkdir+0x98>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800c1f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <f_mkdir+0xae>
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	4618      	mov	r0, r3
 800c202:	f7fe f957 	bl	800a4b4 <sync_window>
 800c206:	4603      	mov	r3, r0
 800c208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800c20c:	f7fd fbf8 	bl	8009a00 <get_fattime>
 800c210:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800c212:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c216:	2b00      	cmp	r3, #0
 800c218:	d16a      	bne.n	800c2f0 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fe fa28 	bl	800a674 <clust2sect>
 800c224:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	3330      	adds	r3, #48	; 0x30
 800c22a:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800c22c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c230:	2100      	movs	r1, #0
 800c232:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c234:	f7fd ff75 	bl	800a122 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c238:	220b      	movs	r2, #11
 800c23a:	2120      	movs	r1, #32
 800c23c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c23e:	f7fd ff70 	bl	800a122 <mem_set>
					dir[DIR_Name] = '.';
 800c242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c244:	222e      	movs	r2, #46	; 0x2e
 800c246:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c24a:	330b      	adds	r3, #11
 800c24c:	2210      	movs	r2, #16
 800c24e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c252:	3316      	adds	r3, #22
 800c254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c256:	4618      	mov	r0, r3
 800c258:	f7fd ff16 	bl	800a088 <st_dword>
					st_clust(fs, dir, dcl);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fe90 	bl	800af88 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c26a:	3320      	adds	r3, #32
 800c26c:	2220      	movs	r2, #32
 800c26e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c270:	4618      	mov	r0, r3
 800c272:	f7fd ff35 	bl	800a0e0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c278:	3321      	adds	r3, #33	; 0x21
 800c27a:	222e      	movs	r2, #46	; 0x2e
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b03      	cmp	r3, #3
 800c288:	d106      	bne.n	800c298 <f_mkdir+0x13a>
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c290:	429a      	cmp	r2, r3
 800c292:	d101      	bne.n	800c298 <f_mkdir+0x13a>
 800c294:	2300      	movs	r3, #0
 800c296:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800c298:	68b8      	ldr	r0, [r7, #8]
 800c29a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c29c:	3320      	adds	r3, #32
 800c29e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	f7fe fe71 	bl	800af88 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	895b      	ldrh	r3, [r3, #10]
 800c2aa:	653b      	str	r3, [r7, #80]	; 0x50
 800c2ac:	e01b      	b.n	800c2e6 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800c2ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe f8f7 	bl	800a4b4 <sync_window>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800c2cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d10c      	bne.n	800c2ee <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800c2d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2d8:	2100      	movs	r1, #0
 800c2da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2dc:	f7fd ff21 	bl	800a122 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c2e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	653b      	str	r3, [r7, #80]	; 0x50
 800c2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e0      	bne.n	800c2ae <f_mkdir+0x150>
 800c2ec:	e000      	b.n	800c2f0 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800c2ee:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800c2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d107      	bne.n	800c308 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800c2f8:	f107 030c 	add.w	r3, r7, #12
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe feb8 	bl	800b072 <dir_register>
 800c302:	4603      	mov	r3, r0
 800c304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800c308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d120      	bne.n	800c352 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800c310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800c314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c316:	3316      	adds	r3, #22
 800c318:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fd feb4 	bl	800a088 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c324:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe fe2e 	bl	800af88 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800c32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32e:	330b      	adds	r3, #11
 800c330:	2210      	movs	r2, #16
 800c332:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	2201      	movs	r2, #1
 800c338:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800c33a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10e      	bne.n	800c360 <f_mkdir+0x202>
					res = sync_fs(fs);
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	4618      	mov	r0, r3
 800c346:	f7fe f927 	bl	800a598 <sync_fs>
 800c34a:	4603      	mov	r3, r0
 800c34c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800c350:	e006      	b.n	800c360 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800c352:	f107 030c 	add.w	r3, r7, #12
 800c356:	2200      	movs	r2, #0
 800c358:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe fb3d 	bl	800a9da <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c360:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800c364:	4618      	mov	r0, r3
 800c366:	3758      	adds	r7, #88	; 0x58
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	4613      	mov	r3, r2
 800c378:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c37a:	2301      	movs	r3, #1
 800c37c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c382:	4b1f      	ldr	r3, [pc, #124]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c384:	7a5b      	ldrb	r3, [r3, #9]
 800c386:	b2db      	uxtb	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d131      	bne.n	800c3f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c38c:	4b1c      	ldr	r3, [pc, #112]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c38e:	7a5b      	ldrb	r3, [r3, #9]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	461a      	mov	r2, r3
 800c394:	4b1a      	ldr	r3, [pc, #104]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c396:	2100      	movs	r1, #0
 800c398:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c39a:	4b19      	ldr	r3, [pc, #100]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c39c:	7a5b      	ldrb	r3, [r3, #9]
 800c39e:	b2db      	uxtb	r3, r3
 800c3a0:	4a17      	ldr	r2, [pc, #92]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c3aa:	4b15      	ldr	r3, [pc, #84]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c3ac:	7a5b      	ldrb	r3, [r3, #9]
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	4b13      	ldr	r3, [pc, #76]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c3b4:	4413      	add	r3, r2
 800c3b6:	79fa      	ldrb	r2, [r7, #7]
 800c3b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c3ba:	4b11      	ldr	r3, [pc, #68]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c3bc:	7a5b      	ldrb	r3, [r3, #9]
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	1c5a      	adds	r2, r3, #1
 800c3c2:	b2d1      	uxtb	r1, r2
 800c3c4:	4a0e      	ldr	r2, [pc, #56]	; (800c400 <FATFS_LinkDriverEx+0x94>)
 800c3c6:	7251      	strb	r1, [r2, #9]
 800c3c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c3ca:	7dbb      	ldrb	r3, [r7, #22]
 800c3cc:	3330      	adds	r3, #48	; 0x30
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	223a      	movs	r2, #58	; 0x3a
 800c3da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	3302      	adds	r3, #2
 800c3e0:	222f      	movs	r2, #47	; 0x2f
 800c3e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	3303      	adds	r3, #3
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	371c      	adds	r7, #28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	20005e7c 	.word	0x20005e7c

0800c404 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c40e:	2200      	movs	r2, #0
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff ffaa 	bl	800c36c <FATFS_LinkDriverEx>
 800c418:	4603      	mov	r3, r0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <phase_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_phase_1_activations_map, 1, params)) {
 800c42e:	683a      	ldr	r2, [r7, #0]
 800c430:	2101      	movs	r1, #1
 800c432:	485e      	ldr	r0, [pc, #376]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c434:	f001 fa72 	bl	800d91c <ai_platform_get_activations_map>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 80ac 	beq.w	800c598 <phase_1_configure_activations+0x174>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_3_input0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800c440:	4b5a      	ldr	r3, [pc, #360]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	4b5a      	ldr	r3, [pc, #360]	; (800c5b0 <phase_1_configure_activations+0x18c>)
 800c446:	4413      	add	r3, r2
 800c448:	4a5a      	ldr	r2, [pc, #360]	; (800c5b4 <phase_1_configure_activations+0x190>)
 800c44a:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_3_input0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800c44c:	4b57      	ldr	r3, [pc, #348]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	4b57      	ldr	r3, [pc, #348]	; (800c5b0 <phase_1_configure_activations+0x18c>)
 800c452:	4413      	add	r3, r2
 800c454:	4a57      	ldr	r2, [pc, #348]	; (800c5b4 <phase_1_configure_activations+0x190>)
 800c456:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c458:	4b54      	ldr	r3, [pc, #336]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a56      	ldr	r2, [pc, #344]	; (800c5b8 <phase_1_configure_activations+0x194>)
 800c45e:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c460:	4b52      	ldr	r3, [pc, #328]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a54      	ldr	r2, [pc, #336]	; (800c5b8 <phase_1_configure_activations+0x194>)
 800c466:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c468:	4b50      	ldr	r3, [pc, #320]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a53      	ldr	r2, [pc, #332]	; (800c5bc <phase_1_configure_activations+0x198>)
 800c46e:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c470:	4b4e      	ldr	r3, [pc, #312]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a51      	ldr	r2, [pc, #324]	; (800c5bc <phase_1_configure_activations+0x198>)
 800c476:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c478:	4b4c      	ldr	r3, [pc, #304]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a50      	ldr	r2, [pc, #320]	; (800c5c0 <phase_1_configure_activations+0x19c>)
 800c47e:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c480:	4b4a      	ldr	r3, [pc, #296]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a4e      	ldr	r2, [pc, #312]	; (800c5c0 <phase_1_configure_activations+0x19c>)
 800c486:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800c488:	4b48      	ldr	r3, [pc, #288]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c490:	4a4c      	ldr	r2, [pc, #304]	; (800c5c4 <phase_1_configure_activations+0x1a0>)
 800c492:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800c494:	4b45      	ldr	r3, [pc, #276]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c49c:	4a49      	ldr	r2, [pc, #292]	; (800c5c4 <phase_1_configure_activations+0x1a0>)
 800c49e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800c4a0:	4b42      	ldr	r3, [pc, #264]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800c4a8:	4a47      	ldr	r2, [pc, #284]	; (800c5c8 <phase_1_configure_activations+0x1a4>)
 800c4aa:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800c4ac:	4b3f      	ldr	r3, [pc, #252]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800c4b4:	4a44      	ldr	r2, [pc, #272]	; (800c5c8 <phase_1_configure_activations+0x1a4>)
 800c4b6:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c4b8:	4b3c      	ldr	r3, [pc, #240]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a43      	ldr	r2, [pc, #268]	; (800c5cc <phase_1_configure_activations+0x1a8>)
 800c4be:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c4c0:	4b3a      	ldr	r3, [pc, #232]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a41      	ldr	r2, [pc, #260]	; (800c5cc <phase_1_configure_activations+0x1a8>)
 800c4c6:	60d3      	str	r3, [r2, #12]
    
    pool_9_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800c4c8:	4b38      	ldr	r3, [pc, #224]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800c4d0:	4a3f      	ldr	r2, [pc, #252]	; (800c5d0 <phase_1_configure_activations+0x1ac>)
 800c4d2:	6093      	str	r3, [r2, #8]
    pool_9_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800c4d4:	4b35      	ldr	r3, [pc, #212]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800c4dc:	4a3c      	ldr	r2, [pc, #240]	; (800c5d0 <phase_1_configure_activations+0x1ac>)
 800c4de:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c4e0:	4b32      	ldr	r3, [pc, #200]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a3b      	ldr	r2, [pc, #236]	; (800c5d4 <phase_1_configure_activations+0x1b0>)
 800c4e6:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c4e8:	4b30      	ldr	r3, [pc, #192]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a39      	ldr	r2, [pc, #228]	; (800c5d4 <phase_1_configure_activations+0x1b0>)
 800c4ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800c4f0:	4b2e      	ldr	r3, [pc, #184]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c4f8:	4a37      	ldr	r2, [pc, #220]	; (800c5d8 <phase_1_configure_activations+0x1b4>)
 800c4fa:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800c4fc:	4b2b      	ldr	r3, [pc, #172]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c504:	4a34      	ldr	r2, [pc, #208]	; (800c5d8 <phase_1_configure_activations+0x1b4>)
 800c506:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800c508:	4b28      	ldr	r3, [pc, #160]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800c510:	4a32      	ldr	r2, [pc, #200]	; (800c5dc <phase_1_configure_activations+0x1b8>)
 800c512:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800c514:	4b25      	ldr	r3, [pc, #148]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800c51c:	4a2f      	ldr	r2, [pc, #188]	; (800c5dc <phase_1_configure_activations+0x1b8>)
 800c51e:	60d3      	str	r3, [r2, #12]
    
    pool_15_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c520:	4b22      	ldr	r3, [pc, #136]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4a2e      	ldr	r2, [pc, #184]	; (800c5e0 <phase_1_configure_activations+0x1bc>)
 800c526:	6093      	str	r3, [r2, #8]
    pool_15_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c528:	4b20      	ldr	r3, [pc, #128]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a2c      	ldr	r2, [pc, #176]	; (800c5e0 <phase_1_configure_activations+0x1bc>)
 800c52e:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800c530:	4b1e      	ldr	r3, [pc, #120]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c538:	4a2a      	ldr	r2, [pc, #168]	; (800c5e4 <phase_1_configure_activations+0x1c0>)
 800c53a:	6093      	str	r3, [r2, #8]
    eltwise_17_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800c53c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c544:	4a27      	ldr	r2, [pc, #156]	; (800c5e4 <phase_1_configure_activations+0x1c0>)
 800c546:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c548:	4b18      	ldr	r3, [pc, #96]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a26      	ldr	r2, [pc, #152]	; (800c5e8 <phase_1_configure_activations+0x1c4>)
 800c54e:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c550:	4b16      	ldr	r3, [pc, #88]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a24      	ldr	r2, [pc, #144]	; (800c5e8 <phase_1_configure_activations+0x1c4>)
 800c556:	60d3      	str	r3, [r2, #12]
    
    nl_19_nl_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800c558:	4b14      	ldr	r3, [pc, #80]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c560:	4a22      	ldr	r2, [pc, #136]	; (800c5ec <phase_1_configure_activations+0x1c8>)
 800c562:	6093      	str	r3, [r2, #8]
    nl_19_nl_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800c564:	4b11      	ldr	r3, [pc, #68]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c56c:	4a1f      	ldr	r2, [pc, #124]	; (800c5ec <phase_1_configure_activations+0x1c8>)
 800c56e:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c570:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a1e      	ldr	r2, [pc, #120]	; (800c5f0 <phase_1_configure_activations+0x1cc>)
 800c576:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800c578:	4b0c      	ldr	r3, [pc, #48]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a1c      	ldr	r2, [pc, #112]	; (800c5f0 <phase_1_configure_activations+0x1cc>)
 800c57e:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 40);
 800c580:	4b0a      	ldr	r3, [pc, #40]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3328      	adds	r3, #40	; 0x28
 800c586:	4a1b      	ldr	r2, [pc, #108]	; (800c5f4 <phase_1_configure_activations+0x1d0>)
 800c588:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 40);
 800c58a:	4b08      	ldr	r3, [pc, #32]	; (800c5ac <phase_1_configure_activations+0x188>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	3328      	adds	r3, #40	; 0x28
 800c590:	4a18      	ldr	r2, [pc, #96]	; (800c5f4 <phase_1_configure_activations+0x1d0>)
 800c592:	60d3      	str	r3, [r2, #12]
    
    return true;
 800c594:	2301      	movs	r3, #1
 800c596:	e005      	b.n	800c5a4 <phase_1_configure_activations+0x180>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800c598:	2213      	movs	r2, #19
 800c59a:	2130      	movs	r1, #48	; 0x30
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 fb21 	bl	800dbe4 <ai_platform_network_set_error>
  return false;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20005e88 	.word	0x20005e88
 800c5b0:	0003c080 	.word	0x0003c080
 800c5b4:	200000dc 	.word	0x200000dc
 800c5b8:	200000ec 	.word	0x200000ec
 800c5bc:	2000010c 	.word	0x2000010c
 800c5c0:	2000011c 	.word	0x2000011c
 800c5c4:	2000012c 	.word	0x2000012c
 800c5c8:	2000013c 	.word	0x2000013c
 800c5cc:	2000014c 	.word	0x2000014c
 800c5d0:	2000015c 	.word	0x2000015c
 800c5d4:	2000016c 	.word	0x2000016c
 800c5d8:	2000017c 	.word	0x2000017c
 800c5dc:	2000018c 	.word	0x2000018c
 800c5e0:	2000019c 	.word	0x2000019c
 800c5e4:	200001ac 	.word	0x200001ac
 800c5e8:	200001bc 	.word	0x200001bc
 800c5ec:	200001cc 	.word	0x200001cc
 800c5f0:	200001dc 	.word	0x200001dc
 800c5f4:	200001ec 	.word	0x200001ec

0800c5f8 <phase_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_phase_1_weights_map, 1, params)) {
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	2101      	movs	r1, #1
 800c606:	4892      	ldr	r0, [pc, #584]	; (800c850 <phase_1_configure_weights+0x258>)
 800c608:	f001 f930 	bl	800d86c <ai_platform_get_weights_map>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f000 81c4 	beq.w	800c99c <phase_1_configure_weights+0x3a4>
    /* Updating weights (byte) offsets */
    
    eltwise_8_scale_array.format |= AI_FMT_FLAG_CONST;
 800c614:	4b8f      	ldr	r3, [pc, #572]	; (800c854 <phase_1_configure_weights+0x25c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c61c:	4a8d      	ldr	r2, [pc, #564]	; (800c854 <phase_1_configure_weights+0x25c>)
 800c61e:	6013      	str	r3, [r2, #0]
    eltwise_8_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 0);
 800c620:	4b8b      	ldr	r3, [pc, #556]	; (800c850 <phase_1_configure_weights+0x258>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a8b      	ldr	r2, [pc, #556]	; (800c854 <phase_1_configure_weights+0x25c>)
 800c626:	6093      	str	r3, [r2, #8]
    eltwise_8_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 0);
 800c628:	4b89      	ldr	r3, [pc, #548]	; (800c850 <phase_1_configure_weights+0x258>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a89      	ldr	r2, [pc, #548]	; (800c854 <phase_1_configure_weights+0x25c>)
 800c62e:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800c630:	4b89      	ldr	r3, [pc, #548]	; (800c858 <phase_1_configure_weights+0x260>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c638:	4a87      	ldr	r2, [pc, #540]	; (800c858 <phase_1_configure_weights+0x260>)
 800c63a:	6013      	str	r3, [r2, #0]
    eltwise_8_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 256);
 800c63c:	4b84      	ldr	r3, [pc, #528]	; (800c850 <phase_1_configure_weights+0x258>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c644:	4a84      	ldr	r2, [pc, #528]	; (800c858 <phase_1_configure_weights+0x260>)
 800c646:	6093      	str	r3, [r2, #8]
    eltwise_8_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 256);
 800c648:	4b81      	ldr	r3, [pc, #516]	; (800c850 <phase_1_configure_weights+0x258>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c650:	4a81      	ldr	r2, [pc, #516]	; (800c858 <phase_1_configure_weights+0x260>)
 800c652:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_scale_array.format |= AI_FMT_FLAG_CONST;
 800c654:	4b81      	ldr	r3, [pc, #516]	; (800c85c <phase_1_configure_weights+0x264>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c65c:	4a7f      	ldr	r2, [pc, #508]	; (800c85c <phase_1_configure_weights+0x264>)
 800c65e:	6013      	str	r3, [r2, #0]
    eltwise_11_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 512);
 800c660:	4b7b      	ldr	r3, [pc, #492]	; (800c850 <phase_1_configure_weights+0x258>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c668:	4a7c      	ldr	r2, [pc, #496]	; (800c85c <phase_1_configure_weights+0x264>)
 800c66a:	6093      	str	r3, [r2, #8]
    eltwise_11_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 512);
 800c66c:	4b78      	ldr	r3, [pc, #480]	; (800c850 <phase_1_configure_weights+0x258>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c674:	4a79      	ldr	r2, [pc, #484]	; (800c85c <phase_1_configure_weights+0x264>)
 800c676:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800c678:	4b79      	ldr	r3, [pc, #484]	; (800c860 <phase_1_configure_weights+0x268>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c680:	4a77      	ldr	r2, [pc, #476]	; (800c860 <phase_1_configure_weights+0x268>)
 800c682:	6013      	str	r3, [r2, #0]
    eltwise_11_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 768);
 800c684:	4b72      	ldr	r3, [pc, #456]	; (800c850 <phase_1_configure_weights+0x258>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c68c:	4a74      	ldr	r2, [pc, #464]	; (800c860 <phase_1_configure_weights+0x268>)
 800c68e:	6093      	str	r3, [r2, #8]
    eltwise_11_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 768);
 800c690:	4b6f      	ldr	r3, [pc, #444]	; (800c850 <phase_1_configure_weights+0x258>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800c698:	4a71      	ldr	r2, [pc, #452]	; (800c860 <phase_1_configure_weights+0x268>)
 800c69a:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800c69c:	4b71      	ldr	r3, [pc, #452]	; (800c864 <phase_1_configure_weights+0x26c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6a4:	4a6f      	ldr	r2, [pc, #444]	; (800c864 <phase_1_configure_weights+0x26c>)
 800c6a6:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800c6a8:	4b69      	ldr	r3, [pc, #420]	; (800c850 <phase_1_configure_weights+0x258>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6b0:	4a6c      	ldr	r2, [pc, #432]	; (800c864 <phase_1_configure_weights+0x26c>)
 800c6b2:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800c6b4:	4b66      	ldr	r3, [pc, #408]	; (800c850 <phase_1_configure_weights+0x258>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6bc:	4a69      	ldr	r2, [pc, #420]	; (800c864 <phase_1_configure_weights+0x26c>)
 800c6be:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800c6c0:	4b69      	ldr	r3, [pc, #420]	; (800c868 <phase_1_configure_weights+0x270>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6c8:	4a67      	ldr	r2, [pc, #412]	; (800c868 <phase_1_configure_weights+0x270>)
 800c6ca:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800c6cc:	4b60      	ldr	r3, [pc, #384]	; (800c850 <phase_1_configure_weights+0x258>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	4b66      	ldr	r3, [pc, #408]	; (800c86c <phase_1_configure_weights+0x274>)
 800c6d2:	4413      	add	r3, r2
 800c6d4:	4a64      	ldr	r2, [pc, #400]	; (800c868 <phase_1_configure_weights+0x270>)
 800c6d6:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800c6d8:	4b5d      	ldr	r3, [pc, #372]	; (800c850 <phase_1_configure_weights+0x258>)
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	4b63      	ldr	r3, [pc, #396]	; (800c86c <phase_1_configure_weights+0x274>)
 800c6de:	4413      	add	r3, r2
 800c6e0:	4a61      	ldr	r2, [pc, #388]	; (800c868 <phase_1_configure_weights+0x270>)
 800c6e2:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 800c6e4:	4b62      	ldr	r3, [pc, #392]	; (800c870 <phase_1_configure_weights+0x278>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c6ec:	4a60      	ldr	r2, [pc, #384]	; (800c870 <phase_1_configure_weights+0x278>)
 800c6ee:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800c6f0:	4b57      	ldr	r3, [pc, #348]	; (800c850 <phase_1_configure_weights+0x258>)
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	4b5f      	ldr	r3, [pc, #380]	; (800c874 <phase_1_configure_weights+0x27c>)
 800c6f6:	4413      	add	r3, r2
 800c6f8:	4a5d      	ldr	r2, [pc, #372]	; (800c870 <phase_1_configure_weights+0x278>)
 800c6fa:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800c6fc:	4b54      	ldr	r3, [pc, #336]	; (800c850 <phase_1_configure_weights+0x258>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	4b5c      	ldr	r3, [pc, #368]	; (800c874 <phase_1_configure_weights+0x27c>)
 800c702:	4413      	add	r3, r2
 800c704:	4a5a      	ldr	r2, [pc, #360]	; (800c870 <phase_1_configure_weights+0x278>)
 800c706:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800c708:	4b5b      	ldr	r3, [pc, #364]	; (800c878 <phase_1_configure_weights+0x280>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c710:	4a59      	ldr	r2, [pc, #356]	; (800c878 <phase_1_configure_weights+0x280>)
 800c712:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800c714:	4b4e      	ldr	r3, [pc, #312]	; (800c850 <phase_1_configure_weights+0x258>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800c71c:	4a56      	ldr	r2, [pc, #344]	; (800c878 <phase_1_configure_weights+0x280>)
 800c71e:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800c720:	4b4b      	ldr	r3, [pc, #300]	; (800c850 <phase_1_configure_weights+0x258>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800c728:	4a53      	ldr	r2, [pc, #332]	; (800c878 <phase_1_configure_weights+0x280>)
 800c72a:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_scale_array.format |= AI_FMT_FLAG_CONST;
 800c72c:	4b53      	ldr	r3, [pc, #332]	; (800c87c <phase_1_configure_weights+0x284>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c734:	4a51      	ldr	r2, [pc, #324]	; (800c87c <phase_1_configure_weights+0x284>)
 800c736:	6013      	str	r3, [r2, #0]
    eltwise_17_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800c738:	4b45      	ldr	r3, [pc, #276]	; (800c850 <phase_1_configure_weights+0x258>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	4b50      	ldr	r3, [pc, #320]	; (800c880 <phase_1_configure_weights+0x288>)
 800c73e:	4413      	add	r3, r2
 800c740:	4a4e      	ldr	r2, [pc, #312]	; (800c87c <phase_1_configure_weights+0x284>)
 800c742:	6093      	str	r3, [r2, #8]
    eltwise_17_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800c744:	4b42      	ldr	r3, [pc, #264]	; (800c850 <phase_1_configure_weights+0x258>)
 800c746:	681a      	ldr	r2, [r3, #0]
 800c748:	4b4d      	ldr	r3, [pc, #308]	; (800c880 <phase_1_configure_weights+0x288>)
 800c74a:	4413      	add	r3, r2
 800c74c:	4a4b      	ldr	r2, [pc, #300]	; (800c87c <phase_1_configure_weights+0x284>)
 800c74e:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800c750:	4b4c      	ldr	r3, [pc, #304]	; (800c884 <phase_1_configure_weights+0x28c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c758:	4a4a      	ldr	r2, [pc, #296]	; (800c884 <phase_1_configure_weights+0x28c>)
 800c75a:	6013      	str	r3, [r2, #0]
    eltwise_17_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800c75c:	4b3c      	ldr	r3, [pc, #240]	; (800c850 <phase_1_configure_weights+0x258>)
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	4b49      	ldr	r3, [pc, #292]	; (800c888 <phase_1_configure_weights+0x290>)
 800c762:	4413      	add	r3, r2
 800c764:	4a47      	ldr	r2, [pc, #284]	; (800c884 <phase_1_configure_weights+0x28c>)
 800c766:	6093      	str	r3, [r2, #8]
    eltwise_17_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800c768:	4b39      	ldr	r3, [pc, #228]	; (800c850 <phase_1_configure_weights+0x258>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	4b46      	ldr	r3, [pc, #280]	; (800c888 <phase_1_configure_weights+0x290>)
 800c76e:	4413      	add	r3, r2
 800c770:	4a44      	ldr	r2, [pc, #272]	; (800c884 <phase_1_configure_weights+0x28c>)
 800c772:	60d3      	str	r3, [r2, #12]
    
    dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800c774:	4b45      	ldr	r3, [pc, #276]	; (800c88c <phase_1_configure_weights+0x294>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c77c:	4a43      	ldr	r2, [pc, #268]	; (800c88c <phase_1_configure_weights+0x294>)
 800c77e:	6013      	str	r3, [r2, #0]
    dense_19_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 299520);
 800c780:	4b33      	ldr	r3, [pc, #204]	; (800c850 <phase_1_configure_weights+0x258>)
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	4b42      	ldr	r3, [pc, #264]	; (800c890 <phase_1_configure_weights+0x298>)
 800c786:	4413      	add	r3, r2
 800c788:	4a40      	ldr	r2, [pc, #256]	; (800c88c <phase_1_configure_weights+0x294>)
 800c78a:	6093      	str	r3, [r2, #8]
    dense_19_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 298496);
 800c78c:	4b30      	ldr	r3, [pc, #192]	; (800c850 <phase_1_configure_weights+0x258>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	4b40      	ldr	r3, [pc, #256]	; (800c894 <phase_1_configure_weights+0x29c>)
 800c792:	4413      	add	r3, r2
 800c794:	4a3d      	ldr	r2, [pc, #244]	; (800c88c <phase_1_configure_weights+0x294>)
 800c796:	60d3      	str	r3, [r2, #12]
    
    dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800c798:	4b3f      	ldr	r3, [pc, #252]	; (800c898 <phase_1_configure_weights+0x2a0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7a0:	4a3d      	ldr	r2, [pc, #244]	; (800c898 <phase_1_configure_weights+0x2a0>)
 800c7a2:	6013      	str	r3, [r2, #0]
    dense_19_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800c7a4:	4b2a      	ldr	r3, [pc, #168]	; (800c850 <phase_1_configure_weights+0x258>)
 800c7a6:	681a      	ldr	r2, [r3, #0]
 800c7a8:	4b3c      	ldr	r3, [pc, #240]	; (800c89c <phase_1_configure_weights+0x2a4>)
 800c7aa:	4413      	add	r3, r2
 800c7ac:	4a3a      	ldr	r2, [pc, #232]	; (800c898 <phase_1_configure_weights+0x2a0>)
 800c7ae:	6093      	str	r3, [r2, #8]
    dense_19_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800c7b0:	4b27      	ldr	r3, [pc, #156]	; (800c850 <phase_1_configure_weights+0x258>)
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	4b39      	ldr	r3, [pc, #228]	; (800c89c <phase_1_configure_weights+0x2a4>)
 800c7b6:	4413      	add	r3, r2
 800c7b8:	4a37      	ldr	r2, [pc, #220]	; (800c898 <phase_1_configure_weights+0x2a0>)
 800c7ba:	60d3      	str	r3, [r2, #12]
    
    dense_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800c7bc:	4b38      	ldr	r3, [pc, #224]	; (800c8a0 <phase_1_configure_weights+0x2a8>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7c4:	4a36      	ldr	r2, [pc, #216]	; (800c8a0 <phase_1_configure_weights+0x2a8>)
 800c7c6:	6013      	str	r3, [r2, #0]
    dense_20_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800c7c8:	4b21      	ldr	r3, [pc, #132]	; (800c850 <phase_1_configure_weights+0x258>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	4b35      	ldr	r3, [pc, #212]	; (800c8a4 <phase_1_configure_weights+0x2ac>)
 800c7ce:	4413      	add	r3, r2
 800c7d0:	4a33      	ldr	r2, [pc, #204]	; (800c8a0 <phase_1_configure_weights+0x2a8>)
 800c7d2:	6093      	str	r3, [r2, #8]
    dense_20_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800c7d4:	4b1e      	ldr	r3, [pc, #120]	; (800c850 <phase_1_configure_weights+0x258>)
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	4b32      	ldr	r3, [pc, #200]	; (800c8a4 <phase_1_configure_weights+0x2ac>)
 800c7da:	4413      	add	r3, r2
 800c7dc:	4a30      	ldr	r2, [pc, #192]	; (800c8a0 <phase_1_configure_weights+0x2a8>)
 800c7de:	60d3      	str	r3, [r2, #12]
    
    dense_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800c7e0:	4b31      	ldr	r3, [pc, #196]	; (800c8a8 <phase_1_configure_weights+0x2b0>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7e8:	4a2f      	ldr	r2, [pc, #188]	; (800c8a8 <phase_1_configure_weights+0x2b0>)
 800c7ea:	6013      	str	r3, [r2, #0]
    dense_20_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800c7ec:	4b18      	ldr	r3, [pc, #96]	; (800c850 <phase_1_configure_weights+0x258>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	4b2e      	ldr	r3, [pc, #184]	; (800c8ac <phase_1_configure_weights+0x2b4>)
 800c7f2:	4413      	add	r3, r2
 800c7f4:	4a2c      	ldr	r2, [pc, #176]	; (800c8a8 <phase_1_configure_weights+0x2b0>)
 800c7f6:	6093      	str	r3, [r2, #8]
    dense_20_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800c7f8:	4b15      	ldr	r3, [pc, #84]	; (800c850 <phase_1_configure_weights+0x258>)
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	4b2b      	ldr	r3, [pc, #172]	; (800c8ac <phase_1_configure_weights+0x2b4>)
 800c7fe:	4413      	add	r3, r2
 800c800:	4a29      	ldr	r2, [pc, #164]	; (800c8a8 <phase_1_configure_weights+0x2b0>)
 800c802:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800c804:	4b2a      	ldr	r3, [pc, #168]	; (800c8b0 <phase_1_configure_weights+0x2b8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c80c:	4a28      	ldr	r2, [pc, #160]	; (800c8b0 <phase_1_configure_weights+0x2b8>)
 800c80e:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800c810:	4b0f      	ldr	r3, [pc, #60]	; (800c850 <phase_1_configure_weights+0x258>)
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	4b27      	ldr	r3, [pc, #156]	; (800c8b4 <phase_1_configure_weights+0x2bc>)
 800c816:	4413      	add	r3, r2
 800c818:	4a25      	ldr	r2, [pc, #148]	; (800c8b0 <phase_1_configure_weights+0x2b8>)
 800c81a:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800c81c:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <phase_1_configure_weights+0x258>)
 800c81e:	681a      	ldr	r2, [r3, #0]
 800c820:	4b24      	ldr	r3, [pc, #144]	; (800c8b4 <phase_1_configure_weights+0x2bc>)
 800c822:	4413      	add	r3, r2
 800c824:	4a22      	ldr	r2, [pc, #136]	; (800c8b0 <phase_1_configure_weights+0x2b8>)
 800c826:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800c828:	4b23      	ldr	r3, [pc, #140]	; (800c8b8 <phase_1_configure_weights+0x2c0>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c830:	4a21      	ldr	r2, [pc, #132]	; (800c8b8 <phase_1_configure_weights+0x2c0>)
 800c832:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800c834:	4b06      	ldr	r3, [pc, #24]	; (800c850 <phase_1_configure_weights+0x258>)
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	4b20      	ldr	r3, [pc, #128]	; (800c8bc <phase_1_configure_weights+0x2c4>)
 800c83a:	4413      	add	r3, r2
 800c83c:	4a1e      	ldr	r2, [pc, #120]	; (800c8b8 <phase_1_configure_weights+0x2c0>)
 800c83e:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800c840:	4b03      	ldr	r3, [pc, #12]	; (800c850 <phase_1_configure_weights+0x258>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	4b1d      	ldr	r3, [pc, #116]	; (800c8bc <phase_1_configure_weights+0x2c4>)
 800c846:	4413      	add	r3, r2
 800c848:	4a1b      	ldr	r2, [pc, #108]	; (800c8b8 <phase_1_configure_weights+0x2c0>)
 800c84a:	60d3      	str	r3, [r2, #12]
 800c84c:	e038      	b.n	800c8c0 <phase_1_configure_weights+0x2c8>
 800c84e:	bf00      	nop
 800c850:	20005e8c 	.word	0x20005e8c
 800c854:	2000000c 	.word	0x2000000c
 800c858:	2000001c 	.word	0x2000001c
 800c85c:	2000002c 	.word	0x2000002c
 800c860:	2000003c 	.word	0x2000003c
 800c864:	2000004c 	.word	0x2000004c
 800c868:	2000005c 	.word	0x2000005c
 800c86c:	00048400 	.word	0x00048400
 800c870:	2000006c 	.word	0x2000006c
 800c874:	00048600 	.word	0x00048600
 800c878:	2000007c 	.word	0x2000007c
 800c87c:	2000008c 	.word	0x2000008c
 800c880:	00048a00 	.word	0x00048a00
 800c884:	2000009c 	.word	0x2000009c
 800c888:	00048c00 	.word	0x00048c00
 800c88c:	200000ac 	.word	0x200000ac
 800c890:	00049200 	.word	0x00049200
 800c894:	00048e00 	.word	0x00048e00
 800c898:	200000bc 	.word	0x200000bc
 800c89c:	00149200 	.word	0x00149200
 800c8a0:	200000cc 	.word	0x200000cc
 800c8a4:	00149600 	.word	0x00149600
 800c8a8:	200000fc 	.word	0x200000fc
 800c8ac:	0014be00 	.word	0x0014be00
 800c8b0:	200001fc 	.word	0x200001fc
 800c8b4:	0014be28 	.word	0x0014be28
 800c8b8:	2000020c 	.word	0x2000020c
 800c8bc:	0014c2a8 	.word	0x0014c2a8
    
    eltwise_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800c8c0:	4b3b      	ldr	r3, [pc, #236]	; (800c9b0 <phase_1_configure_weights+0x3b8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8c8:	4a39      	ldr	r2, [pc, #228]	; (800c9b0 <phase_1_configure_weights+0x3b8>)
 800c8ca:	6013      	str	r3, [r2, #0]
    eltwise_2_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800c8cc:	4b39      	ldr	r3, [pc, #228]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	4b39      	ldr	r3, [pc, #228]	; (800c9b8 <phase_1_configure_weights+0x3c0>)
 800c8d2:	4413      	add	r3, r2
 800c8d4:	4a36      	ldr	r2, [pc, #216]	; (800c9b0 <phase_1_configure_weights+0x3b8>)
 800c8d6:	6093      	str	r3, [r2, #8]
    eltwise_2_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800c8d8:	4b36      	ldr	r3, [pc, #216]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	4b36      	ldr	r3, [pc, #216]	; (800c9b8 <phase_1_configure_weights+0x3c0>)
 800c8de:	4413      	add	r3, r2
 800c8e0:	4a33      	ldr	r2, [pc, #204]	; (800c9b0 <phase_1_configure_weights+0x3b8>)
 800c8e2:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800c8e4:	4b35      	ldr	r3, [pc, #212]	; (800c9bc <phase_1_configure_weights+0x3c4>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8ec:	4a33      	ldr	r2, [pc, #204]	; (800c9bc <phase_1_configure_weights+0x3c4>)
 800c8ee:	6013      	str	r3, [r2, #0]
    eltwise_2_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800c8f0:	4b30      	ldr	r3, [pc, #192]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	4b32      	ldr	r3, [pc, #200]	; (800c9c0 <phase_1_configure_weights+0x3c8>)
 800c8f6:	4413      	add	r3, r2
 800c8f8:	4a30      	ldr	r2, [pc, #192]	; (800c9bc <phase_1_configure_weights+0x3c4>)
 800c8fa:	6093      	str	r3, [r2, #8]
    eltwise_2_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800c8fc:	4b2d      	ldr	r3, [pc, #180]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	4b2f      	ldr	r3, [pc, #188]	; (800c9c0 <phase_1_configure_weights+0x3c8>)
 800c902:	4413      	add	r3, r2
 800c904:	4a2d      	ldr	r2, [pc, #180]	; (800c9bc <phase_1_configure_weights+0x3c4>)
 800c906:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_scale_array.format |= AI_FMT_FLAG_CONST;
 800c908:	4b2e      	ldr	r3, [pc, #184]	; (800c9c4 <phase_1_configure_weights+0x3cc>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c910:	4a2c      	ldr	r2, [pc, #176]	; (800c9c4 <phase_1_configure_weights+0x3cc>)
 800c912:	6013      	str	r3, [r2, #0]
    eltwise_5_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800c914:	4b27      	ldr	r3, [pc, #156]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	4b2b      	ldr	r3, [pc, #172]	; (800c9c8 <phase_1_configure_weights+0x3d0>)
 800c91a:	4413      	add	r3, r2
 800c91c:	4a29      	ldr	r2, [pc, #164]	; (800c9c4 <phase_1_configure_weights+0x3cc>)
 800c91e:	6093      	str	r3, [r2, #8]
    eltwise_5_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800c920:	4b24      	ldr	r3, [pc, #144]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	4b28      	ldr	r3, [pc, #160]	; (800c9c8 <phase_1_configure_weights+0x3d0>)
 800c926:	4413      	add	r3, r2
 800c928:	4a26      	ldr	r2, [pc, #152]	; (800c9c4 <phase_1_configure_weights+0x3cc>)
 800c92a:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800c92c:	4b27      	ldr	r3, [pc, #156]	; (800c9cc <phase_1_configure_weights+0x3d4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c934:	4a25      	ldr	r2, [pc, #148]	; (800c9cc <phase_1_configure_weights+0x3d4>)
 800c936:	6013      	str	r3, [r2, #0]
    eltwise_5_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800c938:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	4b24      	ldr	r3, [pc, #144]	; (800c9d0 <phase_1_configure_weights+0x3d8>)
 800c93e:	4413      	add	r3, r2
 800c940:	4a22      	ldr	r2, [pc, #136]	; (800c9cc <phase_1_configure_weights+0x3d4>)
 800c942:	6093      	str	r3, [r2, #8]
    eltwise_5_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800c944:	4b1b      	ldr	r3, [pc, #108]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	4b21      	ldr	r3, [pc, #132]	; (800c9d0 <phase_1_configure_weights+0x3d8>)
 800c94a:	4413      	add	r3, r2
 800c94c:	4a1f      	ldr	r2, [pc, #124]	; (800c9cc <phase_1_configure_weights+0x3d4>)
 800c94e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800c950:	4b20      	ldr	r3, [pc, #128]	; (800c9d4 <phase_1_configure_weights+0x3dc>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c958:	4a1e      	ldr	r2, [pc, #120]	; (800c9d4 <phase_1_configure_weights+0x3dc>)
 800c95a:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800c95c:	4b15      	ldr	r3, [pc, #84]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	4b1d      	ldr	r3, [pc, #116]	; (800c9d8 <phase_1_configure_weights+0x3e0>)
 800c962:	4413      	add	r3, r2
 800c964:	4a1b      	ldr	r2, [pc, #108]	; (800c9d4 <phase_1_configure_weights+0x3dc>)
 800c966:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800c968:	4b12      	ldr	r3, [pc, #72]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	4b1a      	ldr	r3, [pc, #104]	; (800c9d8 <phase_1_configure_weights+0x3e0>)
 800c96e:	4413      	add	r3, r2
 800c970:	4a18      	ldr	r2, [pc, #96]	; (800c9d4 <phase_1_configure_weights+0x3dc>)
 800c972:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800c974:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <phase_1_configure_weights+0x3e4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c97c:	4a17      	ldr	r2, [pc, #92]	; (800c9dc <phase_1_configure_weights+0x3e4>)
 800c97e:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800c980:	4b0c      	ldr	r3, [pc, #48]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	4b16      	ldr	r3, [pc, #88]	; (800c9e0 <phase_1_configure_weights+0x3e8>)
 800c986:	4413      	add	r3, r2
 800c988:	4a14      	ldr	r2, [pc, #80]	; (800c9dc <phase_1_configure_weights+0x3e4>)
 800c98a:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800c98c:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <phase_1_configure_weights+0x3bc>)
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	4b13      	ldr	r3, [pc, #76]	; (800c9e0 <phase_1_configure_weights+0x3e8>)
 800c992:	4413      	add	r3, r2
 800c994:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <phase_1_configure_weights+0x3e4>)
 800c996:	60d3      	str	r3, [r2, #12]
    
    return true;
 800c998:	2301      	movs	r3, #1
 800c99a:	e005      	b.n	800c9a8 <phase_1_configure_weights+0x3b0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800c99c:	2212      	movs	r2, #18
 800c99e:	2130      	movs	r1, #48	; 0x30
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f001 f91f 	bl	800dbe4 <ai_platform_network_set_error>
  return false;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3708      	adds	r7, #8
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	2000021c 	.word	0x2000021c
 800c9b4:	20005e8c 	.word	0x20005e8c
 800c9b8:	0014c328 	.word	0x0014c328
 800c9bc:	2000022c 	.word	0x2000022c
 800c9c0:	0014c3a8 	.word	0x0014c3a8
 800c9c4:	2000023c 	.word	0x2000023c
 800c9c8:	0014c428 	.word	0x0014c428
 800c9cc:	2000024c 	.word	0x2000024c
 800c9d0:	0014c4a8 	.word	0x0014c4a8
 800c9d4:	2000025c 	.word	0x2000025c
 800c9d8:	0014c528 	.word	0x0014c528
 800c9dc:	2000026c 	.word	0x2000026c
 800c9e0:	0015e528 	.word	0x0015e528

0800c9e4 <ai_phase_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_phase_1_get_error(ai_handle network)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 ffed 	bl	800d9cc <ai_platform_network_get_error>
 800c9f2:	4603      	mov	r3, r0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <ai_phase_1_create>:

AI_API_ENTRY
ai_error ai_phase_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af02      	add	r7, sp, #8
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ca06:	2300      	movs	r3, #0
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	2305      	movs	r3, #5
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	2301      	movs	r3, #1
 800ca10:	4a04      	ldr	r2, [pc, #16]	; (800ca24 <ai_phase_1_create+0x28>)
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 fbff 	bl	800e218 <ai_platform_network_create>
 800ca1a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20001308 	.word	0x20001308

0800ca28 <ai_phase_1_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_phase_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d104      	bne.n	800ca42 <ai_phase_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ca38:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <ai_phase_1_inputs_get+0x2c>)
 800ca3a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a06      	ldr	r2, [pc, #24]	; (800ca58 <ai_phase_1_inputs_get+0x30>)
 800ca40:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 f8d3 	bl	800dbf0 <ai_platform_inputs_get>
 800ca4a:	4603      	mov	r3, r0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	20001308 	.word	0x20001308
 800ca58:	a1c00100 	.word	0xa1c00100

0800ca5c <ai_phase_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_phase_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d104      	bne.n	800ca76 <ai_phase_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800ca6c:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <ai_phase_1_outputs_get+0x2c>)
 800ca6e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a06      	ldr	r2, [pc, #24]	; (800ca8c <ai_phase_1_outputs_get+0x30>)
 800ca74:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f001 fa45 	bl	800df08 <ai_platform_outputs_get>
 800ca7e:	4603      	mov	r3, r0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20001308 	.word	0x20001308
 800ca8c:	a1c00100 	.word	0xa1c00100

0800ca90 <ai_phase_1_init>:
}

AI_API_ENTRY
ai_bool ai_phase_1_init(
  ai_handle network, const ai_network_params* params)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 fd95 	bl	800e5cc <ai_platform_network_init>
 800caa2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d101      	bne.n	800caae <ai_phase_1_init+0x1e>
 800caaa:	2300      	movs	r3, #0
 800caac:	e028      	b.n	800cb00 <ai_phase_1_init+0x70>

  ai_bool ok = true;
 800caae:	2301      	movs	r3, #1
 800cab0:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_weights(net_ctx, params);
 800cab2:	6839      	ldr	r1, [r7, #0]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f7ff fd9f 	bl	800c5f8 <phase_1_configure_weights>
 800caba:	4603      	mov	r3, r0
 800cabc:	461a      	mov	r2, r3
 800cabe:	7afb      	ldrb	r3, [r7, #11]
 800cac0:	4013      	ands	r3, r2
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	bf14      	ite	ne
 800cac6:	2301      	movne	r3, #1
 800cac8:	2300      	moveq	r3, #0
 800caca:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_activations(net_ctx, params);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7ff fca8 	bl	800c424 <phase_1_configure_activations>
 800cad4:	4603      	mov	r3, r0
 800cad6:	461a      	mov	r2, r3
 800cad8:	7afb      	ldrb	r3, [r7, #11]
 800cada:	4013      	ands	r3, r2
 800cadc:	2b00      	cmp	r3, #0
 800cade:	bf14      	ite	ne
 800cae0:	2301      	movne	r3, #1
 800cae2:	2300      	moveq	r3, #0
 800cae4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f001 ff0c 	bl	800e904 <ai_platform_network_post_init>
 800caec:	4603      	mov	r3, r0
 800caee:	461a      	mov	r2, r3
 800caf0:	7afb      	ldrb	r3, [r7, #11]
 800caf2:	4013      	ands	r3, r2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bf14      	ite	ne
 800caf8:	2301      	movne	r3, #1
 800cafa:	2300      	moveq	r3, #0
 800cafc:	72fb      	strb	r3, [r7, #11]

  return ok;
 800cafe:	7afb      	ldrb	r3, [r7, #11]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <ai_phase_1_run>:


AI_API_ENTRY
ai_i32 ai_phase_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f002 f81d 	bl	800eb58 <ai_platform_network_process>
 800cb1e:	4603      	mov	r3, r0
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <ai_phase_1_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_activations_buffer_get(const ai_handle ptr)
{
 800cb28:	b4b0      	push	{r4, r5, r7}
 800cb2a:	b08f      	sub	sp, #60	; 0x3c
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800cb32:	4b15      	ldr	r3, [pc, #84]	; (800cb88 <ai_phase_1_data_activations_buffer_get+0x60>)
 800cb34:	61fb      	str	r3, [r7, #28]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	623b      	str	r3, [r7, #32]
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb3e:	2300      	movs	r3, #0
 800cb40:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb42:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <ai_phase_1_data_activations_buffer_get+0x64>)
 800cb44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb46:	2301      	movs	r3, #1
 800cb48:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	2204      	movs	r2, #4
 800cb50:	f362 231f 	bfi	r3, r2, #8, #24
 800cb54:	633b      	str	r3, [r7, #48]	; 0x30
 800cb56:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <ai_phase_1_data_activations_buffer_get+0x68>)
 800cb58:	f107 040c 	add.w	r4, r7, #12
 800cb5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cb62:	f107 030c 	add.w	r3, r7, #12
 800cb66:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_ACTIVATIONS_SIZE, 1, AI_PHASE_1_DATA_ACTIVATIONS_COUNT),
    AI_PHASE_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	461d      	mov	r5, r3
 800cb6c:	f107 041c 	add.w	r4, r7, #28
 800cb70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cb74:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cb78:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	373c      	adds	r7, #60	; 0x3c
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bcb0      	pop	{r4, r5, r7}
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	00040440 	.word	0x00040440
 800cb8c:	00043e80 	.word	0x00043e80
 800cb90:	08013d9c 	.word	0x08013d9c

0800cb94 <ai_phase_1_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_weights_buffer_get(const ai_handle ptr)
{
 800cb94:	b4b0      	push	{r4, r5, r7}
 800cb96:	b08f      	sub	sp, #60	; 0x3c
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800cb9e:	4b15      	ldr	r3, [pc, #84]	; (800cbf4 <ai_phase_1_data_weights_buffer_get+0x60>)
 800cba0:	61fb      	str	r3, [r7, #28]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	623b      	str	r3, [r7, #32]
 800cba6:	2300      	movs	r3, #0
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
 800cbaa:	2300      	movs	r3, #0
 800cbac:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbae:	4b12      	ldr	r3, [pc, #72]	; (800cbf8 <ai_phase_1_data_weights_buffer_get+0x64>)
 800cbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	2204      	movs	r2, #4
 800cbbc:	f362 231f 	bfi	r3, r2, #8, #24
 800cbc0:	633b      	str	r3, [r7, #48]	; 0x30
 800cbc2:	4b0e      	ldr	r3, [pc, #56]	; (800cbfc <ai_phase_1_data_weights_buffer_get+0x68>)
 800cbc4:	f107 040c 	add.w	r4, r7, #12
 800cbc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cbca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cbce:	f107 030c 	add.w	r3, r7, #12
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_WEIGHTS_SIZE, 1, AI_PHASE_1_DATA_WEIGHTS_COUNT),
    AI_PHASE_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	461d      	mov	r5, r3
 800cbd8:	f107 041c 	add.w	r4, r7, #28
 800cbdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cbe0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800cbe4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	373c      	adds	r7, #60	; 0x3c
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bcb0      	pop	{r4, r5, r7}
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	40040440 	.word	0x40040440
 800cbf8:	0015e628 	.word	0x0015e628
 800cbfc:	08013dac 	.word	0x08013dac

0800cc00 <ai_phase_1_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_phase_1_data_weights_get(void)
{
 800cc00:	b480      	push	{r7}
 800cc02:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_phase_1_weights_table);
 800cc04:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <ai_phase_1_data_weights_get+0x10>)

}
 800cc06:	4618      	mov	r0, r3
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr
 800cc10:	200013ac 	.word	0x200013ac

0800cc14 <modelSetup>:
#include "stdio.h"



int modelSetup()
{
 800cc14:	b480      	push	{r7}
 800cc16:	af00      	add	r7, sp, #0

	  return AI_OK;
 800cc18:	2300      	movs	r3, #0


}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc22:	4770      	bx	lr

0800cc24 <getText>:

char* getText(ModelOutput answer)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	71fb      	strb	r3, [r7, #7]
	switch(answer)
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	2b09      	cmp	r3, #9
 800cc32:	d82b      	bhi.n	800cc8c <getText+0x68>
 800cc34:	a201      	add	r2, pc, #4	; (adr r2, 800cc3c <getText+0x18>)
 800cc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3a:	bf00      	nop
 800cc3c:	0800cc65 	.word	0x0800cc65
 800cc40:	0800cc69 	.word	0x0800cc69
 800cc44:	0800cc6d 	.word	0x0800cc6d
 800cc48:	0800cc71 	.word	0x0800cc71
 800cc4c:	0800cc75 	.word	0x0800cc75
 800cc50:	0800cc79 	.word	0x0800cc79
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc81 	.word	0x0800cc81
 800cc5c:	0800cc85 	.word	0x0800cc85
 800cc60:	0800cc89 	.word	0x0800cc89
	{
	case YES : return "yes";
 800cc64:	4b0d      	ldr	r3, [pc, #52]	; (800cc9c <getText+0x78>)
 800cc66:	e012      	b.n	800cc8e <getText+0x6a>
	case NO : return "no";
 800cc68:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <getText+0x7c>)
 800cc6a:	e010      	b.n	800cc8e <getText+0x6a>
	case UP : return "up";
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <getText+0x80>)
 800cc6e:	e00e      	b.n	800cc8e <getText+0x6a>
	case DOWN : return "down";
 800cc70:	4b0d      	ldr	r3, [pc, #52]	; (800cca8 <getText+0x84>)
 800cc72:	e00c      	b.n	800cc8e <getText+0x6a>
	case RIGHT : return "right";
 800cc74:	4b0d      	ldr	r3, [pc, #52]	; (800ccac <getText+0x88>)
 800cc76:	e00a      	b.n	800cc8e <getText+0x6a>
	case LEFT : return "left";
 800cc78:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <getText+0x8c>)
 800cc7a:	e008      	b.n	800cc8e <getText+0x6a>
	case STOP : return "stop";
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <getText+0x90>)
 800cc7e:	e006      	b.n	800cc8e <getText+0x6a>
	case GO : return "go";
 800cc80:	4b0d      	ldr	r3, [pc, #52]	; (800ccb8 <getText+0x94>)
 800cc82:	e004      	b.n	800cc8e <getText+0x6a>
	case ON : return "on";
 800cc84:	4b0d      	ldr	r3, [pc, #52]	; (800ccbc <getText+0x98>)
 800cc86:	e002      	b.n	800cc8e <getText+0x6a>
	case OFF : return "off";
 800cc88:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <getText+0x9c>)
 800cc8a:	e000      	b.n	800cc8e <getText+0x6a>
	}
	return "";
 800cc8c:	4b0d      	ldr	r3, [pc, #52]	; (800ccc4 <getText+0xa0>)

}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	370c      	adds	r7, #12
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	08013dcc 	.word	0x08013dcc
 800cca0:	08013dd0 	.word	0x08013dd0
 800cca4:	08013dd4 	.word	0x08013dd4
 800cca8:	08013dd8 	.word	0x08013dd8
 800ccac:	08013de0 	.word	0x08013de0
 800ccb0:	08013de8 	.word	0x08013de8
 800ccb4:	08013df0 	.word	0x08013df0
 800ccb8:	08013df8 	.word	0x08013df8
 800ccbc:	08013dfc 	.word	0x08013dfc
 800ccc0:	08013e00 	.word	0x08013e00
 800ccc4:	08013e04 	.word	0x08013e04

0800ccc8 <modelRun>:

ModelOutput modelRun(float* input)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	f5ad 2d97 	sub.w	sp, sp, #309248	; 0x4b800
 800ccce:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ccd8:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 800ccdc:	6018      	str	r0, [r3, #0]

		ai_error ai_err;
		  AI_ALIGNED(4) ai_u8 activations[AI_PHASE_1_DATA_ACTIVATIONS_SIZE];
		  // Set working memory and get weights/biases from model
		  ai_network_params ai_params = {
			AI_PHASE_1_DATA_WEIGHTS(ai_phase_1_data_weights_get()),
 800ccde:	f7ff ff8f 	bl	800cc00 <ai_phase_1_data_weights_get>
 800cce2:	4602      	mov	r2, r0
 800cce4:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800cce8:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800ccec:	4611      	mov	r1, r2
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f7ff ff50 	bl	800cb94 <ai_phase_1_data_weights_buffer_get>
			AI_PHASE_1_DATA_ACTIVATIONS(activations)
 800ccf4:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ccf8:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800ccfc:	f103 021c 	add.w	r2, r3, #28
 800cd00:	4b81      	ldr	r3, [pc, #516]	; (800cf08 <modelRun+0x240>)
 800cd02:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800cd06:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800cd0a:	443b      	add	r3, r7
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	4610      	mov	r0, r2
 800cd10:	f7ff ff0a 	bl	800cb28 <ai_phase_1_data_activations_buffer_get>
		  };

		  // Create instance of neural network
		  ai_err = ai_phase_1_create(&phase_1, AI_PHASE_1_DATA_CONFIG);
 800cd14:	4b7d      	ldr	r3, [pc, #500]	; (800cf0c <modelRun+0x244>)
 800cd16:	443b      	add	r3, r7
 800cd18:	2100      	movs	r1, #0
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff fe6e 	bl	800c9fc <ai_phase_1_create>
 800cd20:	4602      	mov	r2, r0
 800cd22:	4b7b      	ldr	r3, [pc, #492]	; (800cf10 <modelRun+0x248>)
 800cd24:	443b      	add	r3, r7
 800cd26:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800cd2a:	601a      	str	r2, [r3, #0]
		  if (ai_err.type != AI_ERROR_NONE)
 800cd2c:	4b78      	ldr	r3, [pc, #480]	; (800cf10 <modelRun+0x248>)
 800cd2e:	443b      	add	r3, r7
 800cd30:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <modelRun+0x76>
		  {
			return 2;
 800cd3a:	2302      	movs	r3, #2
 800cd3c:	e0dd      	b.n	800cefa <modelRun+0x232>
		  }

			// Initialize neural network
			if (!ai_phase_1_init(phase_1, &ai_params))
 800cd3e:	4b73      	ldr	r3, [pc, #460]	; (800cf0c <modelRun+0x244>)
 800cd40:	443b      	add	r3, r7
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	4b73      	ldr	r3, [pc, #460]	; (800cf14 <modelRun+0x24c>)
 800cd46:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800cd4a:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800cd4e:	443b      	add	r3, r7
 800cd50:	4619      	mov	r1, r3
 800cd52:	4610      	mov	r0, r2
 800cd54:	f7ff fe9c 	bl	800ca90 <ai_phase_1_init>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	f083 0301 	eor.w	r3, r3, #1
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d001      	beq.n	800cd68 <modelRun+0xa0>
			{
			  return 1;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e0c8      	b.n	800cefa <modelRun+0x232>
			}
			// Initialize wrapper structs that hold pointers to data and info about the
			  // data (tensor height, width, channels)
			  ai_input  = ai_phase_1_inputs_get(phase_1, 0);
 800cd68:	4b68      	ldr	r3, [pc, #416]	; (800cf0c <modelRun+0x244>)
 800cd6a:	443b      	add	r3, r7
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2100      	movs	r1, #0
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff fe59 	bl	800ca28 <ai_phase_1_inputs_get>
 800cd76:	4b68      	ldr	r3, [pc, #416]	; (800cf18 <modelRun+0x250>)
 800cd78:	443b      	add	r3, r7
 800cd7a:	6018      	str	r0, [r3, #0]

			  ai_output = AI_PHASE_1_OUT;
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	2000      	movs	r0, #0
 800cd80:	f7ff fe6c 	bl	800ca5c <ai_phase_1_outputs_get>
 800cd84:	4b65      	ldr	r3, [pc, #404]	; (800cf1c <modelRun+0x254>)
 800cd86:	443b      	add	r3, r7
 800cd88:	6018      	str	r0, [r3, #0]


			  // Set pointers wrapper structs to our data buffers
			  //ai_input[0].n_batches = 1;
			  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800cd8a:	4b63      	ldr	r3, [pc, #396]	; (800cf18 <modelRun+0x250>)
 800cd8c:	443b      	add	r3, r7
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	4b63      	ldr	r3, [pc, #396]	; (800cf20 <modelRun+0x258>)
 800cd92:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800cd96:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800cd9a:	443b      	add	r3, r7
 800cd9c:	6053      	str	r3, [r2, #4]
			  //ai_output[0].n_batches = 1;
			  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800cd9e:	4b5f      	ldr	r3, [pc, #380]	; (800cf1c <modelRun+0x254>)
 800cda0:	443b      	add	r3, r7
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	4b5f      	ldr	r3, [pc, #380]	; (800cf24 <modelRun+0x25c>)
 800cda6:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800cdaa:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800cdae:	443b      	add	r3, r7
 800cdb0:	6053      	str	r3, [r2, #4]
		float y_val[10];
		// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	4a5c      	ldr	r2, [pc, #368]	; (800cf28 <modelRun+0x260>)
 800cdb6:	443a      	add	r2, r7
 800cdb8:	6013      	str	r3, [r2, #0]
 800cdba:	e01d      	b.n	800cdf8 <modelRun+0x130>
		{
			((ai_float *)in_data)[i] = (ai_float)input[i];
 800cdbc:	4b5a      	ldr	r3, [pc, #360]	; (800cf28 <modelRun+0x260>)
 800cdbe:	443b      	add	r3, r7
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 800cdc8:	f6a2 5234 	subw	r2, r2, #3380	; 0xd34
 800cdcc:	6812      	ldr	r2, [r2, #0]
 800cdce:	441a      	add	r2, r3
 800cdd0:	4b55      	ldr	r3, [pc, #340]	; (800cf28 <modelRun+0x260>)
 800cdd2:	443b      	add	r3, r7
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	0099      	lsls	r1, r3, #2
 800cdd8:	4b51      	ldr	r3, [pc, #324]	; (800cf20 <modelRun+0x258>)
 800cdda:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800cdde:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800cde2:	443b      	add	r3, r7
 800cde4:	440b      	add	r3, r1
 800cde6:	6812      	ldr	r2, [r2, #0]
 800cde8:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800cdea:	4b4f      	ldr	r3, [pc, #316]	; (800cf28 <modelRun+0x260>)
 800cdec:	443b      	add	r3, r7
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	4a4d      	ldr	r2, [pc, #308]	; (800cf28 <modelRun+0x260>)
 800cdf4:	443a      	add	r2, r7
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	4b4b      	ldr	r3, [pc, #300]	; (800cf28 <modelRun+0x260>)
 800cdfa:	443b      	add	r3, r7
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 800ce02:	d3db      	bcc.n	800cdbc <modelRun+0xf4>
		}


		// Perform inference
		nbatch = ai_phase_1_run(phase_1, &ai_input[0], &ai_output[0]);
 800ce04:	4b41      	ldr	r3, [pc, #260]	; (800cf0c <modelRun+0x244>)
 800ce06:	443b      	add	r3, r7
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a44      	ldr	r2, [pc, #272]	; (800cf1c <modelRun+0x254>)
 800ce0c:	443a      	add	r2, r7
 800ce0e:	6812      	ldr	r2, [r2, #0]
 800ce10:	4941      	ldr	r1, [pc, #260]	; (800cf18 <modelRun+0x250>)
 800ce12:	4439      	add	r1, r7
 800ce14:	6809      	ldr	r1, [r1, #0]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fe76 	bl	800cb08 <ai_phase_1_run>
 800ce1c:	4b43      	ldr	r3, [pc, #268]	; (800cf2c <modelRun+0x264>)
 800ce1e:	443b      	add	r3, r7
 800ce20:	6018      	str	r0, [r3, #0]
		if (nbatch != 1) {
 800ce22:	4b42      	ldr	r3, [pc, #264]	; (800cf2c <modelRun+0x264>)
 800ce24:	443b      	add	r3, r7
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d00b      	beq.n	800ce44 <modelRun+0x17c>
			ai_err =  ai_phase_1_get_error(phase_1);
 800ce2c:	4b37      	ldr	r3, [pc, #220]	; (800cf0c <modelRun+0x244>)
 800ce2e:	443b      	add	r3, r7
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fdd6 	bl	800c9e4 <ai_phase_1_get_error>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	4b35      	ldr	r3, [pc, #212]	; (800cf10 <modelRun+0x248>)
 800ce3c:	443b      	add	r3, r7
 800ce3e:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ce42:	601a      	str	r2, [r3, #0]
		}
		float max = 0;
 800ce44:	f04f 0300 	mov.w	r3, #0
 800ce48:	4a39      	ldr	r2, [pc, #228]	; (800cf30 <modelRun+0x268>)
 800ce4a:	443a      	add	r2, r7
 800ce4c:	6013      	str	r3, [r2, #0]
		int max_ind = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	4a38      	ldr	r2, [pc, #224]	; (800cf34 <modelRun+0x26c>)
 800ce52:	443a      	add	r2, r7
 800ce54:	6013      	str	r3, [r2, #0]
		for (int i =0; i<10; i++)
 800ce56:	2300      	movs	r3, #0
 800ce58:	4a37      	ldr	r2, [pc, #220]	; (800cf38 <modelRun+0x270>)
 800ce5a:	443a      	add	r2, r7
 800ce5c:	6013      	str	r3, [r2, #0]
 800ce5e:	e043      	b.n	800cee8 <modelRun+0x220>
		{
			// Read output (predicted y) of neural network
			y_val[i] = ((float *)out_data)[i];
 800ce60:	4b35      	ldr	r3, [pc, #212]	; (800cf38 <modelRun+0x270>)
 800ce62:	443b      	add	r3, r7
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	009a      	lsls	r2, r3, #2
 800ce68:	4b2e      	ldr	r3, [pc, #184]	; (800cf24 <modelRun+0x25c>)
 800ce6a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ce6e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ce72:	443b      	add	r3, r7
 800ce74:	4413      	add	r3, r2
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ce7c:	f6a3 512c 	subw	r1, r3, #3372	; 0xd2c
 800ce80:	4b2d      	ldr	r3, [pc, #180]	; (800cf38 <modelRun+0x270>)
 800ce82:	443b      	add	r3, r7
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	440b      	add	r3, r1
 800ce8a:	601a      	str	r2, [r3, #0]
			if (y_val[i]>max)
 800ce8c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ce90:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800ce94:	4b28      	ldr	r3, [pc, #160]	; (800cf38 <modelRun+0x270>)
 800ce96:	443b      	add	r3, r7
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	edd3 7a00 	vldr	s15, [r3]
 800cea2:	4b23      	ldr	r3, [pc, #140]	; (800cf30 <modelRun+0x268>)
 800cea4:	443b      	add	r3, r7
 800cea6:	ed93 7a00 	vldr	s14, [r3]
 800ceaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ceae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb2:	d512      	bpl.n	800ceda <modelRun+0x212>
			{
				max_ind = i;
 800ceb4:	4b20      	ldr	r3, [pc, #128]	; (800cf38 <modelRun+0x270>)
 800ceb6:	443b      	add	r3, r7
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a1e      	ldr	r2, [pc, #120]	; (800cf34 <modelRun+0x26c>)
 800cebc:	443a      	add	r2, r7
 800cebe:	6013      	str	r3, [r2, #0]
				max  = y_val[i];
 800cec0:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800cec4:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800cec8:	4b1b      	ldr	r3, [pc, #108]	; (800cf38 <modelRun+0x270>)
 800ceca:	443b      	add	r3, r7
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4a16      	ldr	r2, [pc, #88]	; (800cf30 <modelRun+0x268>)
 800ced6:	443a      	add	r2, r7
 800ced8:	6013      	str	r3, [r2, #0]
		for (int i =0; i<10; i++)
 800ceda:	4b17      	ldr	r3, [pc, #92]	; (800cf38 <modelRun+0x270>)
 800cedc:	443b      	add	r3, r7
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	4a15      	ldr	r2, [pc, #84]	; (800cf38 <modelRun+0x270>)
 800cee4:	443a      	add	r2, r7
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <modelRun+0x270>)
 800ceea:	443b      	add	r3, r7
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b09      	cmp	r3, #9
 800cef0:	ddb6      	ble.n	800ce60 <modelRun+0x198>
			}
		}

		return max_ind;
 800cef2:	4b10      	ldr	r3, [pc, #64]	; (800cf34 <modelRun+0x26c>)
 800cef4:	443b      	add	r3, r7
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	b2db      	uxtb	r3, r3

}
 800cefa:	4618      	mov	r0, r3
 800cefc:	f507 2797 	add.w	r7, r7, #309248	; 0x4b800
 800cf00:	f507 67a7 	add.w	r7, r7, #1336	; 0x538
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	fffb4334 	.word	0xfffb4334
 800cf0c:	0004bd18 	.word	0x0004bd18
 800cf10:	00044d38 	.word	0x00044d38
 800cf14:	fffb42fc 	.word	0xfffb42fc
 800cf18:	0004bd24 	.word	0x0004bd24
 800cf1c:	0004bd20 	.word	0x0004bd20
 800cf20:	ffff81e0 	.word	0xffff81e0
 800cf24:	ffff81b8 	.word	0xffff81b8
 800cf28:	0004bd34 	.word	0x0004bd34
 800cf2c:	0004bd1c 	.word	0x0004bd1c
 800cf30:	0004bd30 	.word	0x0004bd30
 800cf34:	0004bd2c 	.word	0x0004bd2c
 800cf38:	0004bd28 	.word	0x0004bd28

0800cf3c <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800cf40:	2200      	movs	r2, #0
 800cf42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cf46:	4836      	ldr	r0, [pc, #216]	; (800d020 <Preprocessing_Init+0xe4>)
 800cf48:	f7f5 fb6a 	bl	8002620 <Window_Init>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d000      	beq.n	800cf54 <Preprocessing_Init+0x18>
  {
    while(1);
 800cf52:	e7fe      	b.n	800cf52 <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800cf54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cf58:	4832      	ldr	r0, [pc, #200]	; (800d024 <Preprocessing_Init+0xe8>)
 800cf5a:	f004 f9d3 	bl	8011304 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800cf5e:	4b32      	ldr	r3, [pc, #200]	; (800d028 <Preprocessing_Init+0xec>)
 800cf60:	4a30      	ldr	r2, [pc, #192]	; (800d024 <Preprocessing_Init+0xe8>)
 800cf62:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800cf64:	4b30      	ldr	r3, [pc, #192]	; (800d028 <Preprocessing_Init+0xec>)
 800cf66:	2201      	movs	r2, #1
 800cf68:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800cf6a:	4b2f      	ldr	r3, [pc, #188]	; (800d028 <Preprocessing_Init+0xec>)
 800cf6c:	4a2c      	ldr	r2, [pc, #176]	; (800d020 <Preprocessing_Init+0xe4>)
 800cf6e:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800cf70:	4b2d      	ldr	r3, [pc, #180]	; (800d028 <Preprocessing_Init+0xec>)
 800cf72:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cf76:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800cf78:	4b2b      	ldr	r3, [pc, #172]	; (800d028 <Preprocessing_Init+0xec>)
 800cf7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf7e:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800cf80:	4b29      	ldr	r3, [pc, #164]	; (800d028 <Preprocessing_Init+0xec>)
 800cf82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf86:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800cf88:	4b27      	ldr	r3, [pc, #156]	; (800d028 <Preprocessing_Init+0xec>)
 800cf8a:	4a28      	ldr	r2, [pc, #160]	; (800d02c <Preprocessing_Init+0xf0>)
 800cf8c:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800cf8e:	4b28      	ldr	r3, [pc, #160]	; (800d030 <Preprocessing_Init+0xf4>)
 800cf90:	4a28      	ldr	r2, [pc, #160]	; (800d034 <Preprocessing_Init+0xf8>)
 800cf92:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800cf94:	4b26      	ldr	r3, [pc, #152]	; (800d030 <Preprocessing_Init+0xf4>)
 800cf96:	4a28      	ldr	r2, [pc, #160]	; (800d038 <Preprocessing_Init+0xfc>)
 800cf98:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800cf9a:	4b25      	ldr	r3, [pc, #148]	; (800d030 <Preprocessing_Init+0xf4>)
 800cf9c:	4a27      	ldr	r2, [pc, #156]	; (800d03c <Preprocessing_Init+0x100>)
 800cf9e:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800cfa0:	4b23      	ldr	r3, [pc, #140]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfa2:	2280      	movs	r2, #128	; 0x80
 800cfa4:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800cfa6:	4b22      	ldr	r3, [pc, #136]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfac:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800cfae:	4b20      	ldr	r3, [pc, #128]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfb0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800cfb4:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800cfb6:	4b1e      	ldr	r3, [pc, #120]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfb8:	f04f 0200 	mov.w	r2, #0
 800cfbc:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800cfbe:	4b1c      	ldr	r3, [pc, #112]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfc0:	699b      	ldr	r3, [r3, #24]
 800cfc2:	ee07 3a90 	vmov	s15, r3
 800cfc6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800cfca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cfce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cfd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800cfd6:	4b16      	ldr	r3, [pc, #88]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfd8:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800cfdc:	4b14      	ldr	r3, [pc, #80]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800cfe4:	4b12      	ldr	r3, [pc, #72]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <Preprocessing_Init+0xf4>)
 800cfec:	2201      	movs	r2, #1
 800cfee:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800cff0:	480f      	ldr	r0, [pc, #60]	; (800d030 <Preprocessing_Init+0xf4>)
 800cff2:	f7f5 f83a 	bl	800206a <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800cff6:	4b12      	ldr	r3, [pc, #72]	; (800d040 <Preprocessing_Init+0x104>)
 800cff8:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <Preprocessing_Init+0xec>)
 800cffa:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800cffc:	4b10      	ldr	r3, [pc, #64]	; (800d040 <Preprocessing_Init+0x104>)
 800cffe:	4a0c      	ldr	r2, [pc, #48]	; (800d030 <Preprocessing_Init+0xf4>)
 800d000:	605a      	str	r2, [r3, #4]

  S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 800d002:	4b10      	ldr	r3, [pc, #64]	; (800d044 <Preprocessing_Init+0x108>)
 800d004:	4a0e      	ldr	r2, [pc, #56]	; (800d040 <Preprocessing_Init+0x104>)
 800d006:	601a      	str	r2, [r3, #0]
  S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800d008:	4b0e      	ldr	r3, [pc, #56]	; (800d044 <Preprocessing_Init+0x108>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	711a      	strb	r2, [r3, #4]
  S_LogMelSpectr.Ref = 1;
 800d00e:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <Preprocessing_Init+0x108>)
 800d010:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d014:	609a      	str	r2, [r3, #8]
  S_LogMelSpectr.TopdB = 80;
 800d016:	4b0b      	ldr	r3, [pc, #44]	; (800d044 <Preprocessing_Init+0x108>)
 800d018:	4a0b      	ldr	r2, [pc, #44]	; (800d048 <Preprocessing_Init+0x10c>)
 800d01a:	60da      	str	r2, [r3, #12]

}
 800d01c:	bf00      	nop
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	200071f8 	.word	0x200071f8
 800d024:	20005f7c 	.word	0x20005f7c
 800d028:	20005fc4 	.word	0x20005fc4
 800d02c:	200081f8 	.word	0x200081f8
 800d030:	20005f94 	.word	0x20005f94
 800d034:	2000a1f8 	.word	0x2000a1f8
 800d038:	2000a3f8 	.word	0x2000a3f8
 800d03c:	200091f8 	.word	0x200091f8
 800d040:	20005fe0 	.word	0x20005fe0
 800d044:	20005fe8 	.word	0x20005fe8
 800d048:	42a00000 	.word	0x42a00000

0800d04c <AudioPreprocessing_RunMethod4>:
  }
}

//Method 4: Mel scale spectrogram without normalized input and with db scale output
void AudioPreprocessing_RunMethod4(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b088      	sub	sp, #32
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
  uint32_t num_frames;
  //zero pads at the end of the audio buffer
  if (END_ZERO_PADDING)
  {
	  memset(&pInSignal[signal_len], 0, FRAME_LEN);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	4413      	add	r3, r2
 800d060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d064:	2100      	movs	r1, #0
 800d066:	4618      	mov	r0, r3
 800d068:	f005 fa2c 	bl	80124c4 <memset>
	  num_frames = 1 + (signal_len) / HOP_LEN;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	0a1b      	lsrs	r3, r3, #8
 800d070:	3301      	adds	r3, #1
 800d072:	617b      	str	r3, [r7, #20]
  else
  {
	  num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
  }

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800d074:	2300      	movs	r3, #0
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	e027      	b.n	800d0ca <AudioPreprocessing_RunMethod4+0x7e>
  {
    buf_to_float(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	025b      	lsls	r3, r3, #9
 800d07e:	68fa      	ldr	r2, [r7, #12]
 800d080:	4413      	add	r3, r2
 800d082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d086:	4915      	ldr	r1, [pc, #84]	; (800d0dc <AudioPreprocessing_RunMethod4+0x90>)
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f4 fe74 	bl	8001d76 <buf_to_float>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800d08e:	4a14      	ldr	r2, [pc, #80]	; (800d0e0 <AudioPreprocessing_RunMethod4+0x94>)
 800d090:	4912      	ldr	r1, [pc, #72]	; (800d0dc <AudioPreprocessing_RunMethod4+0x90>)
 800d092:	4814      	ldr	r0, [pc, #80]	; (800d0e4 <AudioPreprocessing_RunMethod4+0x98>)
 800d094:	f7f4 ff1e 	bl	8001ed4 <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800d098:	2300      	movs	r3, #0
 800d09a:	61bb      	str	r3, [r7, #24]
 800d09c:	e00f      	b.n	800d0be <AudioPreprocessing_RunMethod4+0x72>
    {
    	pOut[frame_index * NUM_MELS + i] = pOutColBuffer[i];
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	01da      	lsls	r2, r3, #7
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	490c      	ldr	r1, [pc, #48]	; (800d0e0 <AudioPreprocessing_RunMethod4+0x94>)
 800d0ae:	69ba      	ldr	r2, [r7, #24]
 800d0b0:	0092      	lsls	r2, r2, #2
 800d0b2:	440a      	add	r2, r1
 800d0b4:	6812      	ldr	r2, [r2, #0]
 800d0b6:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	61bb      	str	r3, [r7, #24]
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c2:	d9ec      	bls.n	800d09e <AudioPreprocessing_RunMethod4+0x52>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	61fb      	str	r3, [r7, #28]
 800d0ca:	69fa      	ldr	r2, [r7, #28]
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d3d3      	bcc.n	800d07a <AudioPreprocessing_RunMethod4+0x2e>
    }
  }
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	3720      	adds	r7, #32
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	20005ff8 	.word	0x20005ff8
 800d0e0:	20006ff8 	.word	0x20006ff8
 800d0e4:	20005fe8 	.word	0x20005fe8

0800d0e8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a08      	ldr	r2, [pc, #32]	; (800d114 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d103      	bne.n	800d100 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800d0f8:	4b07      	ldr	r3, [pc, #28]	; (800d118 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800d0fe:	e002      	b.n	800d106 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800d100:	4b06      	ldr	r3, [pc, #24]	; (800d11c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800d102:	2201      	movs	r2, #1
 800d104:	601a      	str	r2, [r3, #0]
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	200014a4 	.word	0x200014a4
 800d118:	20005688 	.word	0x20005688
 800d11c:	20005690 	.word	0x20005690

0800d120 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a08      	ldr	r2, [pc, #32]	; (800d14c <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d103      	bne.n	800d138 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800d130:	4b07      	ldr	r3, [pc, #28]	; (800d150 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800d132:	2201      	movs	r2, #1
 800d134:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800d136:	e002      	b.n	800d13e <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800d138:	4b06      	ldr	r3, [pc, #24]	; (800d154 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800d13a:	2201      	movs	r2, #1
 800d13c:	601a      	str	r2, [r3, #0]
}
 800d13e:	bf00      	nop
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	200014a4 	.word	0x200014a4
 800d150:	2000568c 	.word	0x2000568c
 800d154:	20005694 	.word	0x20005694

0800d158 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800d15e:	4b59      	ldr	r3, [pc, #356]	; (800d2c4 <checkMicrophone+0x16c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d151      	bne.n	800d20a <checkMicrophone+0xb2>
 800d166:	4b58      	ldr	r3, [pc, #352]	; (800d2c8 <checkMicrophone+0x170>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d14d      	bne.n	800d20a <checkMicrophone+0xb2>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800d16e:	2300      	movs	r3, #0
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	e040      	b.n	800d1f6 <checkMicrophone+0x9e>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800d174:	4b55      	ldr	r3, [pc, #340]	; (800d2cc <checkMicrophone+0x174>)
 800d176:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d17a:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d028      	beq.n	800d1d4 <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800d182:	4a53      	ldr	r2, [pc, #332]	; (800d2d0 <checkMicrophone+0x178>)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d18a:	121b      	asrs	r3, r3, #8
 800d18c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d190:	db0b      	blt.n	800d1aa <checkMicrophone+0x52>
 800d192:	4a4f      	ldr	r2, [pc, #316]	; (800d2d0 <checkMicrophone+0x178>)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d19a:	121b      	asrs	r3, r3, #8
 800d19c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	bfa8      	it	ge
 800d1a4:	4613      	movge	r3, r2
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	e001      	b.n	800d1ae <checkMicrophone+0x56>
 800d1aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d1ae:	4b47      	ldr	r3, [pc, #284]	; (800d2cc <checkMicrophone+0x174>)
 800d1b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1b4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d1b8:	4944      	ldr	r1, [pc, #272]	; (800d2cc <checkMicrophone+0x174>)
 800d1ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800d1be:	4b43      	ldr	r3, [pc, #268]	; (800d2cc <checkMicrophone+0x174>)
 800d1c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1c4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	4a40      	ldr	r2, [pc, #256]	; (800d2cc <checkMicrophone+0x174>)
 800d1cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800d1d0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800d1d4:	4b3d      	ldr	r3, [pc, #244]	; (800d2cc <checkMicrophone+0x174>)
 800d1d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1da:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d1de:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800d1e2:	d305      	bcc.n	800d1f0 <checkMicrophone+0x98>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800d1e4:	4b39      	ldr	r3, [pc, #228]	; (800d2cc <checkMicrophone+0x174>)
 800d1e6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(int i = 0; i < 1024; i++)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	607b      	str	r3, [r7, #4]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1fc:	dbba      	blt.n	800d174 <checkMicrophone+0x1c>
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800d1fe:	4b31      	ldr	r3, [pc, #196]	; (800d2c4 <checkMicrophone+0x16c>)
 800d200:	2200      	movs	r2, #0
 800d202:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800d204:	4b30      	ldr	r3, [pc, #192]	; (800d2c8 <checkMicrophone+0x170>)
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800d20a:	4b32      	ldr	r3, [pc, #200]	; (800d2d4 <checkMicrophone+0x17c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d152      	bne.n	800d2b8 <checkMicrophone+0x160>
 800d212:	4b31      	ldr	r3, [pc, #196]	; (800d2d8 <checkMicrophone+0x180>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d14e      	bne.n	800d2b8 <checkMicrophone+0x160>
	{
		for(int i = 1024; i < 2048; i++)
 800d21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	e040      	b.n	800d2a4 <checkMicrophone+0x14c>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800d222:	4b2a      	ldr	r3, [pc, #168]	; (800d2cc <checkMicrophone+0x174>)
 800d224:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d228:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d028      	beq.n	800d282 <checkMicrophone+0x12a>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800d230:	4a27      	ldr	r2, [pc, #156]	; (800d2d0 <checkMicrophone+0x178>)
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d238:	121b      	asrs	r3, r3, #8
 800d23a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800d23e:	db0b      	blt.n	800d258 <checkMicrophone+0x100>
 800d240:	4a23      	ldr	r2, [pc, #140]	; (800d2d0 <checkMicrophone+0x178>)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d248:	121b      	asrs	r3, r3, #8
 800d24a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d24e:	4293      	cmp	r3, r2
 800d250:	bfa8      	it	ge
 800d252:	4613      	movge	r3, r2
 800d254:	b29a      	uxth	r2, r3
 800d256:	e001      	b.n	800d25c <checkMicrophone+0x104>
 800d258:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d25c:	4b1b      	ldr	r3, [pc, #108]	; (800d2cc <checkMicrophone+0x174>)
 800d25e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d262:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d266:	4919      	ldr	r1, [pc, #100]	; (800d2cc <checkMicrophone+0x174>)
 800d268:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800d26c:	4b17      	ldr	r3, [pc, #92]	; (800d2cc <checkMicrophone+0x174>)
 800d26e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d272:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d276:	3301      	adds	r3, #1
 800d278:	4a14      	ldr	r2, [pc, #80]	; (800d2cc <checkMicrophone+0x174>)
 800d27a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800d27e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800d282:	4b12      	ldr	r3, [pc, #72]	; (800d2cc <checkMicrophone+0x174>)
 800d284:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d288:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d28c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800d290:	d305      	bcc.n	800d29e <checkMicrophone+0x146>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800d292:	4b0e      	ldr	r3, [pc, #56]	; (800d2cc <checkMicrophone+0x174>)
 800d294:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(int i = 1024; i < 2048; i++)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2aa:	dbba      	blt.n	800d222 <checkMicrophone+0xca>
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800d2ac:	4b09      	ldr	r3, [pc, #36]	; (800d2d4 <checkMicrophone+0x17c>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800d2b2:	4b09      	ldr	r3, [pc, #36]	; (800d2d8 <checkMicrophone+0x180>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	601a      	str	r2, [r3, #0]
	}
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	20005688 	.word	0x20005688
 800d2c8:	20005690 	.word	0x20005690
 800d2cc:	2000a5f8 	.word	0x2000a5f8
 800d2d0:	20001688 	.word	0x20001688
 800d2d4:	2000568c 	.word	0x2000568c
 800d2d8:	20005694 	.word	0x20005694

0800d2dc <get_date>:
extern int recording;


//returns a string containing current date
char* get_date( char* date)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af02      	add	r7, sp, #8
 800d2e2:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800d2e4:	f107 030c 	add.w	r3, r7, #12
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	480a      	ldr	r0, [pc, #40]	; (800d318 <get_date+0x3c>)
 800d2ee:	f7f8 fd1b 	bl	8005d28 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800d2f2:	7bbb      	ldrb	r3, [r7, #14]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	7b7b      	ldrb	r3, [r7, #13]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
 800d2fc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	460b      	mov	r3, r1
 800d304:	4905      	ldr	r1, [pc, #20]	; (800d31c <get_date+0x40>)
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f005 f9d4 	bl	80126b4 <siprintf>

	 return date;
 800d30c:	687b      	ldr	r3, [r7, #4]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20005698 	.word	0x20005698
 800d31c:	08013e08 	.word	0x08013e08

0800d320 <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08c      	sub	sp, #48	; 0x30
 800d324:	af02      	add	r7, sp, #8
 800d326:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800d328:	2364      	movs	r3, #100	; 0x64
 800d32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d32e:	236d      	movs	r3, #109	; 0x6d
 800d330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d334:	2379      	movs	r3, #121	; 0x79
 800d336:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d33a:	2368      	movs	r3, #104	; 0x68
 800d33c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800d340:	236d      	movs	r3, #109	; 0x6d
 800d342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d346:	2373      	movs	r3, #115	; 0x73
 800d348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800d34c:	f107 030c 	add.w	r3, r7, #12
 800d350:	2200      	movs	r2, #0
 800d352:	4619      	mov	r1, r3
 800d354:	480c      	ldr	r0, [pc, #48]	; (800d388 <get_time_filename+0x68>)
 800d356:	f7f8 fc05 	bl	8005b64 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800d35a:	f107 0308 	add.w	r3, r7, #8
 800d35e:	2200      	movs	r2, #0
 800d360:	4619      	mov	r1, r3
 800d362:	4809      	ldr	r0, [pc, #36]	; (800d388 <get_time_filename+0x68>)
 800d364:	f7f8 fce0 	bl	8005d28 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800d368:	7b3b      	ldrb	r3, [r7, #12]
 800d36a:	461a      	mov	r2, r3
 800d36c:	7b7b      	ldrb	r3, [r7, #13]
 800d36e:	4619      	mov	r1, r3
 800d370:	7bbb      	ldrb	r3, [r7, #14]
 800d372:	9300      	str	r3, [sp, #0]
 800d374:	460b      	mov	r3, r1
 800d376:	4905      	ldr	r1, [pc, #20]	; (800d38c <get_time_filename+0x6c>)
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f005 f99b 	bl	80126b4 <siprintf>
	 return name;
 800d37e:	687b      	ldr	r3, [r7, #4]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3728      	adds	r7, #40	; 0x28
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	20005698 	.word	0x20005698
 800d38c:	08013e08 	.word	0x08013e08

0800d390 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
	recording = 1;
 800d398:	4b04      	ldr	r3, [pc, #16]	; (800d3ac <HAL_RTC_AlarmAEventCallback+0x1c>)
 800d39a:	2201      	movs	r2, #1
 800d39c:	601a      	str	r2, [r3, #0]
}
 800d39e:	bf00      	nop
 800d3a0:	370c      	adds	r7, #12
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	20001684 	.word	0x20001684

0800d3b0 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4906      	ldr	r1, [pc, #24]	; (800d3d0 <SDInit+0x20>)
 800d3b8:	4806      	ldr	r0, [pc, #24]	; (800d3d4 <SDInit+0x24>)
 800d3ba:	f7fe faaf 	bl	800b91c <f_mount>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <SDInit+0x18>
	      {
	          Error_Handler();
 800d3c4:	f7f3 ff86 	bl	80012d4 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	200059e8 	.word	0x200059e8
 800d3d4:	200059ec 	.word	0x200059ec

0800d3d8 <createFile>:

int createFile(char* file_name)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800d3e0:	220a      	movs	r2, #10
 800d3e2:	6879      	ldr	r1, [r7, #4]
 800d3e4:	4807      	ldr	r0, [pc, #28]	; (800d404 <createFile+0x2c>)
 800d3e6:	f7fe fadf 	bl	800b9a8 <f_open>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d002      	beq.n	800d3fa <createFile+0x22>
	  {
		  return -1;
 800d3f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3f8:	e000      	b.n	800d3fc <createFile+0x24>
	  }
	  return 0;
 800d3fa:	2300      	movs	r3, #0

}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	20005c1c 	.word	0x20005c1c

0800d408 <writeToFile>:
int writeToFile(char* text, int size)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	f107 030c 	add.w	r3, r7, #12
 800d418:	6879      	ldr	r1, [r7, #4]
 800d41a:	4804      	ldr	r0, [pc, #16]	; (800d42c <writeToFile+0x24>)
 800d41c:	f7fe fc82 	bl	800bd24 <f_write>
	return byteswritten;
 800d420:	68fb      	ldr	r3, [r7, #12]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	20005c1c 	.word	0x20005c1c

0800d430 <SDclose>:
int SDclose()
{
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800d434:	4802      	ldr	r0, [pc, #8]	; (800d440 <SDclose+0x10>)
 800d436:	f7fe fe68 	bl	800c10a <f_close>
	return 0;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20005c1c 	.word	0x20005c1c

0800d444 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern int recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4603      	mov	r3, r0
 800d44c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800d44e:	88fb      	ldrh	r3, [r7, #6]
 800d450:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d454:	d10a      	bne.n	800d46c <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800d456:	4b09      	ldr	r3, [pc, #36]	; (800d47c <HAL_GPIO_EXTI_Callback+0x38>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	bf0c      	ite	eq
 800d45e:	2301      	moveq	r3, #1
 800d460:	2300      	movne	r3, #0
 800d462:	b2db      	uxtb	r3, r3
 800d464:	461a      	mov	r2, r3
 800d466:	4b05      	ldr	r3, [pc, #20]	; (800d47c <HAL_GPIO_EXTI_Callback+0x38>)
 800d468:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800d46a:	e000      	b.n	800d46e <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800d46c:	bf00      	nop
}
 800d46e:	bf00      	nop
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr
 800d47a:	bf00      	nop
 800d47c:	20001684 	.word	0x20001684

0800d480 <ledsShowValue>:

void ledsShowValue(int value)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !((value)&0x1));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bf0c      	ite	eq
 800d492:	2301      	moveq	r3, #1
 800d494:	2300      	movne	r3, #0
 800d496:	b2db      	uxtb	r3, r3
 800d498:	461a      	mov	r2, r3
 800d49a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d49e:	4817      	ldr	r0, [pc, #92]	; (800d4fc <ledsShowValue+0x7c>)
 800d4a0:	f7f6 ff82 	bl	80043a8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !((value>>1)&0x1));
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f003 0302 	and.w	r3, r3, #2
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bf0c      	ite	eq
 800d4ae:	2301      	moveq	r3, #1
 800d4b0:	2300      	movne	r3, #0
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	4811      	ldr	r0, [pc, #68]	; (800d500 <ledsShowValue+0x80>)
 800d4ba:	f7f6 ff75 	bl	80043a8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !((value>>2)&0x1));
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f003 0304 	and.w	r3, r3, #4
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	bf0c      	ite	eq
 800d4c8:	2301      	moveq	r3, #1
 800d4ca:	2300      	movne	r3, #0
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	2102      	movs	r1, #2
 800d4d2:	480b      	ldr	r0, [pc, #44]	; (800d500 <ledsShowValue+0x80>)
 800d4d4:	f7f6 ff68 	bl	80043a8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !((value>>3)&0x1));
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f003 0308 	and.w	r3, r3, #8
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	bf0c      	ite	eq
 800d4e2:	2301      	moveq	r3, #1
 800d4e4:	2300      	movne	r3, #0
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	2108      	movs	r1, #8
 800d4ec:	4804      	ldr	r0, [pc, #16]	; (800d500 <ledsShowValue+0x80>)
 800d4ee:	f7f6 ff5b 	bl	80043a8 <HAL_GPIO_WritePin>
}
 800d4f2:	bf00      	nop
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	40022000 	.word	0x40022000
 800d500:	40022400 	.word	0x40022400

0800d504 <HAL_TIM_PeriodElapsedCallback>:
#import "user_tim.h"

extern int recording;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
    recording = 1;
 800d50c:	4b04      	ldr	r3, [pc, #16]	; (800d520 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800d50e:	2201      	movs	r2, #1
 800d510:	601a      	str	r2, [r3, #0]
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	20001684 	.word	0x20001684

0800d524 <WavProcess_EncInit>:
extern AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800d52e:	4b22      	ldr	r3, [pc, #136]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d530:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800d534:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800d536:	4b20      	ldr	r3, [pc, #128]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d538:	2201      	movs	r2, #1
 800d53a:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800d53c:	4b1e      	ldr	r3, [pc, #120]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d53e:	2210      	movs	r2, #16
 800d540:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800d542:	4b1d      	ldr	r3, [pc, #116]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d544:	4a1d      	ldr	r2, [pc, #116]	; (800d5bc <WavProcess_EncInit+0x98>)
 800d546:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800d548:	4b1b      	ldr	r3, [pc, #108]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d54a:	222c      	movs	r2, #44	; 0x2c
 800d54c:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800d54e:	4b1a      	ldr	r3, [pc, #104]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d550:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800d552:	4a19      	ldr	r2, [pc, #100]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d554:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800d556:	08d2      	lsrs	r2, r2, #3
 800d558:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800d55a:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800d55e:	4a16      	ldr	r2, [pc, #88]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d560:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800d562:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800d566:	4a14      	ldr	r2, [pc, #80]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d568:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800d56a:	4b13      	ldr	r3, [pc, #76]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d56c:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800d56e:	4b12      	ldr	r3, [pc, #72]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d570:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800d572:	08db      	lsrs	r3, r3, #3
 800d574:	b29b      	uxth	r3, r3
 800d576:	fb12 f303 	smulbb	r3, r2, r3
 800d57a:	b29a      	uxth	r2, r3
 800d57c:	4b0e      	ldr	r3, [pc, #56]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d57e:	841a      	strh	r2, [r3, #32]
  BufferCtl.size = BufferCtl.fptr * 2+44;
 800d580:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <WavProcess_EncInit+0x9c>)
 800d582:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d586:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800d58a:	3316      	adds	r3, #22
 800d58c:	005b      	lsls	r3, r3, #1
 800d58e:	4a0c      	ldr	r2, [pc, #48]	; (800d5c0 <WavProcess_EncInit+0x9c>)
 800d590:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800d594:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800d598:	4a09      	ldr	r2, [pc, #36]	; (800d5c0 <WavProcess_EncInit+0x9c>)
 800d59a:	4907      	ldr	r1, [pc, #28]	; (800d5b8 <WavProcess_EncInit+0x94>)
 800d59c:	6838      	ldr	r0, [r7, #0]
 800d59e:	f000 f811 	bl	800d5c4 <WavProcess_HeaderInit>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <WavProcess_EncInit+0x88>
  {
    return 1;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e000      	b.n	800d5ae <WavProcess_EncInit+0x8a>
  }
  return 0;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	2001a90c 	.word	0x2001a90c
 800d5bc:	001d4c00 	.word	0x001d4c00
 800d5c0:	2000a5f8 	.word	0x2000a5f8

0800d5c4 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2252      	movs	r2, #82	; 0x52
 800d5d4:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3301      	adds	r3, #1
 800d5da:	2249      	movs	r2, #73	; 0x49
 800d5dc:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3302      	adds	r3, #2
 800d5e2:	2246      	movs	r2, #70	; 0x46
 800d5e4:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	3303      	adds	r3, #3
 800d5ea:	2246      	movs	r2, #70	; 0x46
 800d5ec:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->size);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d5f4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	b2d2      	uxtb	r2, r2
 800d5fe:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->size >> 8);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d606:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d60a:	0a1a      	lsrs	r2, r3, #8
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	3305      	adds	r3, #5
 800d610:	b2d2      	uxtb	r2, r2
 800d612:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->size >> 16);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d61a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d61e:	0c1a      	lsrs	r2, r3, #16
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3306      	adds	r3, #6
 800d624:	b2d2      	uxtb	r2, r2
 800d626:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->size >> 24);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d62e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d632:	0e1a      	lsrs	r2, r3, #24
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	3307      	adds	r3, #7
 800d638:	b2d2      	uxtb	r2, r2
 800d63a:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	3308      	adds	r3, #8
 800d640:	2257      	movs	r2, #87	; 0x57
 800d642:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	3309      	adds	r3, #9
 800d648:	2241      	movs	r2, #65	; 0x41
 800d64a:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	330a      	adds	r3, #10
 800d650:	2256      	movs	r2, #86	; 0x56
 800d652:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	330b      	adds	r3, #11
 800d658:	2245      	movs	r2, #69	; 0x45
 800d65a:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	330c      	adds	r3, #12
 800d660:	2266      	movs	r2, #102	; 0x66
 800d662:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	330d      	adds	r3, #13
 800d668:	226d      	movs	r2, #109	; 0x6d
 800d66a:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	330e      	adds	r3, #14
 800d670:	2274      	movs	r2, #116	; 0x74
 800d672:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	330f      	adds	r3, #15
 800d678:	2220      	movs	r2, #32
 800d67a:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	3310      	adds	r3, #16
 800d680:	2210      	movs	r2, #16
 800d682:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	3311      	adds	r3, #17
 800d688:	2200      	movs	r2, #0
 800d68a:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	3312      	adds	r3, #18
 800d690:	2200      	movs	r2, #0
 800d692:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	3313      	adds	r3, #19
 800d698:	2200      	movs	r2, #0
 800d69a:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	3314      	adds	r3, #20
 800d6a0:	2201      	movs	r2, #1
 800d6a2:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3315      	adds	r3, #21
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	8ada      	ldrh	r2, [r3, #22]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	3316      	adds	r3, #22
 800d6b4:	b2d2      	uxtb	r2, r2
 800d6b6:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3317      	adds	r3, #23
 800d6bc:	2200      	movs	r2, #0
 800d6be:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	699a      	ldr	r2, [r3, #24]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	3318      	adds	r3, #24
 800d6c8:	b2d2      	uxtb	r2, r2
 800d6ca:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	0a1a      	lsrs	r2, r3, #8
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3319      	adds	r3, #25
 800d6d6:	b2d2      	uxtb	r2, r2
 800d6d8:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	699b      	ldr	r3, [r3, #24]
 800d6de:	0c1a      	lsrs	r2, r3, #16
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	331a      	adds	r3, #26
 800d6e4:	b2d2      	uxtb	r2, r2
 800d6e6:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	0e1a      	lsrs	r2, r3, #24
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	331b      	adds	r3, #27
 800d6f2:	b2d2      	uxtb	r2, r2
 800d6f4:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	69da      	ldr	r2, [r3, #28]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	331c      	adds	r3, #28
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	69db      	ldr	r3, [r3, #28]
 800d706:	0a1a      	lsrs	r2, r3, #8
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	331d      	adds	r3, #29
 800d70c:	b2d2      	uxtb	r2, r2
 800d70e:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	69db      	ldr	r3, [r3, #28]
 800d714:	0c1a      	lsrs	r2, r3, #16
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	331e      	adds	r3, #30
 800d71a:	b2d2      	uxtb	r2, r2
 800d71c:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	0e1a      	lsrs	r2, r3, #24
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	331f      	adds	r3, #31
 800d728:	b2d2      	uxtb	r2, r2
 800d72a:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	8c1a      	ldrh	r2, [r3, #32]
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	3320      	adds	r3, #32
 800d734:	b2d2      	uxtb	r2, r2
 800d736:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	3321      	adds	r3, #33	; 0x21
 800d73c:	2200      	movs	r2, #0
 800d73e:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	3322      	adds	r3, #34	; 0x22
 800d748:	b2d2      	uxtb	r2, r2
 800d74a:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3323      	adds	r3, #35	; 0x23
 800d750:	2200      	movs	r2, #0
 800d752:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3324      	adds	r3, #36	; 0x24
 800d758:	2264      	movs	r2, #100	; 0x64
 800d75a:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3325      	adds	r3, #37	; 0x25
 800d760:	2261      	movs	r2, #97	; 0x61
 800d762:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3326      	adds	r3, #38	; 0x26
 800d768:	2274      	movs	r2, #116	; 0x74
 800d76a:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	3327      	adds	r3, #39	; 0x27
 800d770:	2261      	movs	r2, #97	; 0x61
 800d772:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->size -=44;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d77a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d77e:	3b2c      	subs	r3, #44	; 0x2c
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800d786:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  pHeader[40] = (uint8_t)(BufferCtl->size);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d790:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	3328      	adds	r3, #40	; 0x28
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->size >> 8);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7a2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d7a6:	0a1a      	lsrs	r2, r3, #8
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3329      	adds	r3, #41	; 0x29
 800d7ac:	b2d2      	uxtb	r2, r2
 800d7ae:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->size >> 16);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7b6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d7ba:	0c1a      	lsrs	r2, r3, #16
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	332a      	adds	r3, #42	; 0x2a
 800d7c0:	b2d2      	uxtb	r2, r2
 800d7c2:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->size >> 24);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d7ca:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800d7ce:	0e1a      	lsrs	r2, r3, #24
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	332b      	adds	r3, #43	; 0x2b
 800d7d4:	b2d2      	uxtb	r2, r2
 800d7d6:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3714      	adds	r7, #20
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
	...

0800d7e8 <ai_buffer_get_size>:
 800d7e8:	b368      	cbz	r0, 800d846 <ai_buffer_get_size+0x5e>
 800d7ea:	4b17      	ldr	r3, [pc, #92]	; (800d848 <ai_buffer_get_size+0x60>)
 800d7ec:	4a17      	ldr	r2, [pc, #92]	; (800d84c <ai_buffer_get_size+0x64>)
 800d7ee:	b410      	push	{r4}
 800d7f0:	6804      	ldr	r4, [r0, #0]
 800d7f2:	4023      	ands	r3, r4
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d123      	bne.n	800d840 <ai_buffer_get_size+0x58>
 800d7f8:	b311      	cbz	r1, 800d840 <ai_buffer_get_size+0x58>
 800d7fa:	6984      	ldr	r4, [r0, #24]
 800d7fc:	6862      	ldr	r2, [r4, #4]
 800d7fe:	321f      	adds	r2, #31
 800d800:	f022 021f 	bic.w	r2, r2, #31
 800d804:	7d03      	ldrb	r3, [r0, #20]
 800d806:	6941      	ldr	r1, [r0, #20]
 800d808:	f1a3 0301 	sub.w	r3, r3, #1
 800d80c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800d810:	fab3 f383 	clz	r3, r3
 800d814:	095b      	lsrs	r3, r3, #5
 800d816:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800d81a:	da0c      	bge.n	800d836 <ai_buffer_get_size+0x4e>
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d103      	bne.n	800d828 <ai_buffer_get_size+0x40>
 800d820:	2802      	cmp	r0, #2
 800d822:	f04f 0302 	mov.w	r3, #2
 800d826:	d006      	beq.n	800d836 <ai_buffer_get_size+0x4e>
 800d828:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d82c:	3301      	adds	r3, #1
 800d82e:	4298      	cmp	r0, r3
 800d830:	fb01 f202 	mul.w	r2, r1, r2
 800d834:	d1f2      	bne.n	800d81c <ai_buffer_get_size+0x34>
 800d836:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800d83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d83e:	4770      	bx	lr
 800d840:	6984      	ldr	r4, [r0, #24]
 800d842:	6862      	ldr	r2, [r4, #4]
 800d844:	e7de      	b.n	800d804 <ai_buffer_get_size+0x1c>
 800d846:	4770      	bx	lr
 800d848:	017fffff 	.word	0x017fffff
 800d84c:	000400c0 	.word	0x000400c0

0800d850 <ai_buffer_array_sane>:
 800d850:	b138      	cbz	r0, 800d862 <ai_buffer_array_sane+0x12>
 800d852:	6843      	ldr	r3, [r0, #4]
 800d854:	b123      	cbz	r3, 800d860 <ai_buffer_array_sane+0x10>
 800d856:	8840      	ldrh	r0, [r0, #2]
 800d858:	3800      	subs	r0, #0
 800d85a:	bf18      	it	ne
 800d85c:	2001      	movne	r0, #1
 800d85e:	4770      	bx	lr
 800d860:	4618      	mov	r0, r3
 800d862:	4770      	bx	lr

0800d864 <_ai_platform_acquire_crc>:
 800d864:	2001      	movs	r0, #1
 800d866:	4770      	bx	lr

0800d868 <_ai_platform_release_crc>:
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop

0800d86c <ai_platform_get_weights_map>:
 800d86c:	2900      	cmp	r1, #0
 800d86e:	bf18      	it	ne
 800d870:	2800      	cmpne	r0, #0
 800d872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d874:	bf0c      	ite	eq
 800d876:	2401      	moveq	r4, #1
 800d878:	2400      	movne	r4, #0
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	bf08      	it	eq
 800d87e:	f044 0401 	orreq.w	r4, r4, #1
 800d882:	b114      	cbz	r4, 800d88a <ai_platform_get_weights_map+0x1e>
 800d884:	2400      	movs	r4, #0
 800d886:	4620      	mov	r0, r4
 800d888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d88a:	4616      	mov	r6, r2
 800d88c:	4b22      	ldr	r3, [pc, #136]	; (800d918 <ai_platform_get_weights_map+0xac>)
 800d88e:	6812      	ldr	r2, [r2, #0]
 800d890:	4605      	mov	r5, r0
 800d892:	460f      	mov	r7, r1
 800d894:	429a      	cmp	r2, r3
 800d896:	d022      	beq.n	800d8de <ai_platform_get_weights_map+0x72>
 800d898:	6870      	ldr	r0, [r6, #4]
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0f2      	beq.n	800d884 <ai_platform_get_weights_map+0x18>
 800d89e:	6806      	ldr	r6, [r0, #0]
 800d8a0:	429e      	cmp	r6, r3
 800d8a2:	d006      	beq.n	800d8b2 <ai_platform_get_weights_map+0x46>
 800d8a4:	f1a1 0401 	sub.w	r4, r1, #1
 800d8a8:	6028      	str	r0, [r5, #0]
 800d8aa:	fab4 f484 	clz	r4, r4
 800d8ae:	0964      	lsrs	r4, r4, #5
 800d8b0:	e7e9      	b.n	800d886 <ai_platform_get_weights_map+0x1a>
 800d8b2:	3d04      	subs	r5, #4
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	e000      	b.n	800d8bc <ai_platform_get_weights_map+0x50>
 800d8ba:	4619      	mov	r1, r3
 800d8bc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800d8c0:	42b3      	cmp	r3, r6
 800d8c2:	d025      	beq.n	800d910 <ai_platform_get_weights_map+0xa4>
 800d8c4:	f845 3f04 	str.w	r3, [r5, #4]!
 800d8c8:	1c4b      	adds	r3, r1, #1
 800d8ca:	429f      	cmp	r7, r3
 800d8cc:	d8f5      	bhi.n	800d8ba <ai_platform_get_weights_map+0x4e>
 800d8ce:	d1da      	bne.n	800d886 <ai_platform_get_weights_map+0x1a>
 800d8d0:	3102      	adds	r1, #2
 800d8d2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d8d6:	42b3      	cmp	r3, r6
 800d8d8:	d1d5      	bne.n	800d886 <ai_platform_get_weights_map+0x1a>
 800d8da:	2401      	movs	r4, #1
 800d8dc:	e7d3      	b.n	800d886 <ai_platform_get_weights_map+0x1a>
 800d8de:	1d30      	adds	r0, r6, #4
 800d8e0:	f7ff ffb6 	bl	800d850 <ai_buffer_array_sane>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d0cd      	beq.n	800d884 <ai_platform_get_weights_map+0x18>
 800d8e8:	88f3      	ldrh	r3, [r6, #6]
 800d8ea:	429f      	cmp	r7, r3
 800d8ec:	d1ca      	bne.n	800d884 <ai_platform_get_weights_map+0x18>
 800d8ee:	3d04      	subs	r5, #4
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	68b3      	ldr	r3, [r6, #8]
 800d8f4:	4423      	add	r3, r4
 800d8f6:	341c      	adds	r4, #28
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	b123      	cbz	r3, 800d906 <ai_platform_get_weights_map+0x9a>
 800d8fc:	3201      	adds	r2, #1
 800d8fe:	f845 3f04 	str.w	r3, [r5, #4]!
 800d902:	4297      	cmp	r7, r2
 800d904:	d8f5      	bhi.n	800d8f2 <ai_platform_get_weights_map+0x86>
 800d906:	1abc      	subs	r4, r7, r2
 800d908:	fab4 f484 	clz	r4, r4
 800d90c:	0964      	lsrs	r4, r4, #5
 800d90e:	e7ba      	b.n	800d886 <ai_platform_get_weights_map+0x1a>
 800d910:	428f      	cmp	r7, r1
 800d912:	d1b8      	bne.n	800d886 <ai_platform_get_weights_map+0x1a>
 800d914:	e7e1      	b.n	800d8da <ai_platform_get_weights_map+0x6e>
 800d916:	bf00      	nop
 800d918:	a1facade 	.word	0xa1facade

0800d91c <ai_platform_get_activations_map>:
 800d91c:	2900      	cmp	r1, #0
 800d91e:	bf18      	it	ne
 800d920:	2800      	cmpne	r0, #0
 800d922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d924:	bf0c      	ite	eq
 800d926:	2401      	moveq	r4, #1
 800d928:	2400      	movne	r4, #0
 800d92a:	2a00      	cmp	r2, #0
 800d92c:	bf08      	it	eq
 800d92e:	f044 0401 	orreq.w	r4, r4, #1
 800d932:	b114      	cbz	r4, 800d93a <ai_platform_get_activations_map+0x1e>
 800d934:	2400      	movs	r4, #0
 800d936:	4620      	mov	r0, r4
 800d938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d93a:	4616      	mov	r6, r2
 800d93c:	4b22      	ldr	r3, [pc, #136]	; (800d9c8 <ai_platform_get_activations_map+0xac>)
 800d93e:	6812      	ldr	r2, [r2, #0]
 800d940:	4605      	mov	r5, r0
 800d942:	460f      	mov	r7, r1
 800d944:	429a      	cmp	r2, r3
 800d946:	d022      	beq.n	800d98e <ai_platform_get_activations_map+0x72>
 800d948:	6a30      	ldr	r0, [r6, #32]
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d0f2      	beq.n	800d934 <ai_platform_get_activations_map+0x18>
 800d94e:	6806      	ldr	r6, [r0, #0]
 800d950:	429e      	cmp	r6, r3
 800d952:	d006      	beq.n	800d962 <ai_platform_get_activations_map+0x46>
 800d954:	f1a1 0401 	sub.w	r4, r1, #1
 800d958:	6028      	str	r0, [r5, #0]
 800d95a:	fab4 f484 	clz	r4, r4
 800d95e:	0964      	lsrs	r4, r4, #5
 800d960:	e7e9      	b.n	800d936 <ai_platform_get_activations_map+0x1a>
 800d962:	3d04      	subs	r5, #4
 800d964:	4602      	mov	r2, r0
 800d966:	4621      	mov	r1, r4
 800d968:	e000      	b.n	800d96c <ai_platform_get_activations_map+0x50>
 800d96a:	4619      	mov	r1, r3
 800d96c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800d970:	42b3      	cmp	r3, r6
 800d972:	d026      	beq.n	800d9c2 <ai_platform_get_activations_map+0xa6>
 800d974:	f845 3f04 	str.w	r3, [r5, #4]!
 800d978:	1c4b      	adds	r3, r1, #1
 800d97a:	429f      	cmp	r7, r3
 800d97c:	d8f5      	bhi.n	800d96a <ai_platform_get_activations_map+0x4e>
 800d97e:	d1da      	bne.n	800d936 <ai_platform_get_activations_map+0x1a>
 800d980:	3102      	adds	r1, #2
 800d982:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800d986:	42b3      	cmp	r3, r6
 800d988:	d1d5      	bne.n	800d936 <ai_platform_get_activations_map+0x1a>
 800d98a:	2401      	movs	r4, #1
 800d98c:	e7d3      	b.n	800d936 <ai_platform_get_activations_map+0x1a>
 800d98e:	f106 000c 	add.w	r0, r6, #12
 800d992:	f7ff ff5d 	bl	800d850 <ai_buffer_array_sane>
 800d996:	2800      	cmp	r0, #0
 800d998:	d0cc      	beq.n	800d934 <ai_platform_get_activations_map+0x18>
 800d99a:	89f3      	ldrh	r3, [r6, #14]
 800d99c:	429f      	cmp	r7, r3
 800d99e:	d1c9      	bne.n	800d934 <ai_platform_get_activations_map+0x18>
 800d9a0:	3d04      	subs	r5, #4
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	6933      	ldr	r3, [r6, #16]
 800d9a6:	4423      	add	r3, r4
 800d9a8:	341c      	adds	r4, #28
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	b123      	cbz	r3, 800d9b8 <ai_platform_get_activations_map+0x9c>
 800d9ae:	3201      	adds	r2, #1
 800d9b0:	f845 3f04 	str.w	r3, [r5, #4]!
 800d9b4:	4297      	cmp	r7, r2
 800d9b6:	d8f5      	bhi.n	800d9a4 <ai_platform_get_activations_map+0x88>
 800d9b8:	1abc      	subs	r4, r7, r2
 800d9ba:	fab4 f484 	clz	r4, r4
 800d9be:	0964      	lsrs	r4, r4, #5
 800d9c0:	e7b9      	b.n	800d936 <ai_platform_get_activations_map+0x1a>
 800d9c2:	428f      	cmp	r7, r1
 800d9c4:	d1b7      	bne.n	800d936 <ai_platform_get_activations_map+0x1a>
 800d9c6:	e7e0      	b.n	800d98a <ai_platform_get_activations_map+0x6e>
 800d9c8:	a1facade 	.word	0xa1facade

0800d9cc <ai_platform_network_get_error>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d03f      	beq.n	800da52 <ai_platform_network_get_error+0x86>
 800d9d2:	4b7d      	ldr	r3, [pc, #500]	; (800dbc8 <ai_platform_network_get_error+0x1fc>)
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	6802      	ldr	r2, [r0, #0]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d13a      	bne.n	800da52 <ai_platform_network_get_error+0x86>
 800d9dc:	f7ff ff42 	bl	800d864 <_ai_platform_acquire_crc>
 800d9e0:	4b7a      	ldr	r3, [pc, #488]	; (800dbcc <ai_platform_network_get_error+0x200>)
 800d9e2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9ec:	189a      	adds	r2, r3, r2
 800d9ee:	2a01      	cmp	r2, #1
 800d9f0:	f240 8086 	bls.w	800db00 <ai_platform_network_get_error+0x134>
 800d9f4:	f240 4249 	movw	r2, #1097	; 0x449
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	f000 8081 	beq.w	800db00 <ai_platform_network_get_error+0x134>
 800d9fe:	4a74      	ldr	r2, [pc, #464]	; (800dbd0 <ai_platform_network_get_error+0x204>)
 800da00:	6813      	ldr	r3, [r2, #0]
 800da02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da06:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800da0a:	f000 8087 	beq.w	800db1c <ai_platform_network_get_error+0x150>
 800da0e:	6813      	ldr	r3, [r2, #0]
 800da10:	f240 4183 	movw	r1, #1155	; 0x483
 800da14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da18:	428b      	cmp	r3, r1
 800da1a:	f000 80a9 	beq.w	800db70 <ai_platform_network_get_error+0x1a4>
 800da1e:	6813      	ldr	r3, [r2, #0]
 800da20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da24:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800da28:	f000 80c0 	beq.w	800dbac <ai_platform_network_get_error+0x1e0>
 800da2c:	6813      	ldr	r3, [r2, #0]
 800da2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 8082 	bne.w	800db3c <ai_platform_network_get_error+0x170>
 800da38:	4a66      	ldr	r2, [pc, #408]	; (800dbd4 <ai_platform_network_get_error+0x208>)
 800da3a:	2301      	movs	r3, #1
 800da3c:	6093      	str	r3, [r2, #8]
 800da3e:	6893      	ldr	r3, [r2, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1fc      	bne.n	800da3e <ai_platform_network_get_error+0x72>
 800da44:	4964      	ldr	r1, [pc, #400]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800da46:	4b65      	ldr	r3, [pc, #404]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800da48:	6011      	str	r1, [r2, #0]
 800da4a:	6812      	ldr	r2, [r2, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d075      	beq.n	800db3c <ai_platform_network_get_error+0x170>
 800da50:	e7fe      	b.n	800da50 <ai_platform_network_get_error+0x84>
 800da52:	f7ff ff07 	bl	800d864 <_ai_platform_acquire_crc>
 800da56:	4b5d      	ldr	r3, [pc, #372]	; (800dbcc <ai_platform_network_get_error+0x200>)
 800da58:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da62:	185a      	adds	r2, r3, r1
 800da64:	2a01      	cmp	r2, #1
 800da66:	d929      	bls.n	800dabc <ai_platform_network_get_error+0xf0>
 800da68:	f240 4249 	movw	r2, #1097	; 0x449
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d025      	beq.n	800dabc <ai_platform_network_get_error+0xf0>
 800da70:	4a57      	ldr	r2, [pc, #348]	; (800dbd0 <ai_platform_network_get_error+0x204>)
 800da72:	6813      	ldr	r3, [r2, #0]
 800da74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da78:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800da7c:	d02b      	beq.n	800dad6 <ai_platform_network_get_error+0x10a>
 800da7e:	6813      	ldr	r3, [r2, #0]
 800da80:	f240 4183 	movw	r1, #1155	; 0x483
 800da84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da88:	428b      	cmp	r3, r1
 800da8a:	d060      	beq.n	800db4e <ai_platform_network_get_error+0x182>
 800da8c:	6813      	ldr	r3, [r2, #0]
 800da8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da92:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800da96:	d07c      	beq.n	800db92 <ai_platform_network_get_error+0x1c6>
 800da98:	6813      	ldr	r3, [r2, #0]
 800da9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d129      	bne.n	800daf6 <ai_platform_network_get_error+0x12a>
 800daa2:	4a4c      	ldr	r2, [pc, #304]	; (800dbd4 <ai_platform_network_get_error+0x208>)
 800daa4:	2301      	movs	r3, #1
 800daa6:	6093      	str	r3, [r2, #8]
 800daa8:	6893      	ldr	r3, [r2, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1fc      	bne.n	800daa8 <ai_platform_network_get_error+0xdc>
 800daae:	494a      	ldr	r1, [pc, #296]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800dab0:	4b4a      	ldr	r3, [pc, #296]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800dab2:	6011      	str	r1, [r2, #0]
 800dab4:	6812      	ldr	r2, [r2, #0]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d01d      	beq.n	800daf6 <ai_platform_network_get_error+0x12a>
 800daba:	e7fe      	b.n	800daba <ai_platform_network_get_error+0xee>
 800dabc:	4a45      	ldr	r2, [pc, #276]	; (800dbd4 <ai_platform_network_get_error+0x208>)
 800dabe:	2301      	movs	r3, #1
 800dac0:	6093      	str	r3, [r2, #8]
 800dac2:	6893      	ldr	r3, [r2, #8]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1fc      	bne.n	800dac2 <ai_platform_network_get_error+0xf6>
 800dac8:	4943      	ldr	r1, [pc, #268]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800daca:	4b44      	ldr	r3, [pc, #272]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800dacc:	6011      	str	r1, [r2, #0]
 800dace:	6812      	ldr	r2, [r2, #0]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d010      	beq.n	800daf6 <ai_platform_network_get_error+0x12a>
 800dad4:	e7fe      	b.n	800dad4 <ai_platform_network_get_error+0x108>
 800dad6:	4a42      	ldr	r2, [pc, #264]	; (800dbe0 <ai_platform_network_get_error+0x214>)
 800dad8:	2301      	movs	r3, #1
 800dada:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dade:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1fb      	bne.n	800dade <ai_platform_network_get_error+0x112>
 800dae6:	493c      	ldr	r1, [pc, #240]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800dae8:	4b3c      	ldr	r3, [pc, #240]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800daea:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800daee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d111      	bne.n	800db1a <ai_platform_network_get_error+0x14e>
 800daf6:	f7ff feb7 	bl	800d868 <_ai_platform_release_crc>
 800dafa:	f241 0010 	movw	r0, #4112	; 0x1010
 800dafe:	bd10      	pop	{r4, pc}
 800db00:	4a34      	ldr	r2, [pc, #208]	; (800dbd4 <ai_platform_network_get_error+0x208>)
 800db02:	2301      	movs	r3, #1
 800db04:	6093      	str	r3, [r2, #8]
 800db06:	6893      	ldr	r3, [r2, #8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1fc      	bne.n	800db06 <ai_platform_network_get_error+0x13a>
 800db0c:	4932      	ldr	r1, [pc, #200]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800db0e:	4b33      	ldr	r3, [pc, #204]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800db10:	6011      	str	r1, [r2, #0]
 800db12:	6812      	ldr	r2, [r2, #0]
 800db14:	429a      	cmp	r2, r3
 800db16:	d011      	beq.n	800db3c <ai_platform_network_get_error+0x170>
 800db18:	e7fe      	b.n	800db18 <ai_platform_network_get_error+0x14c>
 800db1a:	e7fe      	b.n	800db1a <ai_platform_network_get_error+0x14e>
 800db1c:	4a30      	ldr	r2, [pc, #192]	; (800dbe0 <ai_platform_network_get_error+0x214>)
 800db1e:	2301      	movs	r3, #1
 800db20:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800db24:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1fb      	bne.n	800db24 <ai_platform_network_get_error+0x158>
 800db2c:	492a      	ldr	r1, [pc, #168]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800db2e:	4b2b      	ldr	r3, [pc, #172]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800db30:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800db34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800db38:	429a      	cmp	r2, r3
 800db3a:	d107      	bne.n	800db4c <ai_platform_network_get_error+0x180>
 800db3c:	f7ff fe94 	bl	800d868 <_ai_platform_release_crc>
 800db40:	f104 0010 	add.w	r0, r4, #16
 800db44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db48:	f001 bae6 	b.w	800f118 <core_get_error>
 800db4c:	e7fe      	b.n	800db4c <ai_platform_network_get_error+0x180>
 800db4e:	4a24      	ldr	r2, [pc, #144]	; (800dbe0 <ai_platform_network_get_error+0x214>)
 800db50:	2301      	movs	r3, #1
 800db52:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800db56:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1fb      	bne.n	800db56 <ai_platform_network_get_error+0x18a>
 800db5e:	491e      	ldr	r1, [pc, #120]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800db60:	4b1e      	ldr	r3, [pc, #120]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800db62:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800db66:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d0c3      	beq.n	800daf6 <ai_platform_network_get_error+0x12a>
 800db6e:	e7fe      	b.n	800db6e <ai_platform_network_get_error+0x1a2>
 800db70:	4a1b      	ldr	r2, [pc, #108]	; (800dbe0 <ai_platform_network_get_error+0x214>)
 800db72:	2301      	movs	r3, #1
 800db74:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800db78:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1fb      	bne.n	800db78 <ai_platform_network_get_error+0x1ac>
 800db80:	4915      	ldr	r1, [pc, #84]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800db82:	4b16      	ldr	r3, [pc, #88]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800db84:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800db88:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d0d5      	beq.n	800db3c <ai_platform_network_get_error+0x170>
 800db90:	e7fe      	b.n	800db90 <ai_platform_network_get_error+0x1c4>
 800db92:	4a10      	ldr	r2, [pc, #64]	; (800dbd4 <ai_platform_network_get_error+0x208>)
 800db94:	2301      	movs	r3, #1
 800db96:	6093      	str	r3, [r2, #8]
 800db98:	6893      	ldr	r3, [r2, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1fc      	bne.n	800db98 <ai_platform_network_get_error+0x1cc>
 800db9e:	490e      	ldr	r1, [pc, #56]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800dba0:	4b0e      	ldr	r3, [pc, #56]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800dba2:	6011      	str	r1, [r2, #0]
 800dba4:	6812      	ldr	r2, [r2, #0]
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d0a5      	beq.n	800daf6 <ai_platform_network_get_error+0x12a>
 800dbaa:	e7fe      	b.n	800dbaa <ai_platform_network_get_error+0x1de>
 800dbac:	4a09      	ldr	r2, [pc, #36]	; (800dbd4 <ai_platform_network_get_error+0x208>)
 800dbae:	2301      	movs	r3, #1
 800dbb0:	6093      	str	r3, [r2, #8]
 800dbb2:	6893      	ldr	r3, [r2, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d1fc      	bne.n	800dbb2 <ai_platform_network_get_error+0x1e6>
 800dbb8:	4907      	ldr	r1, [pc, #28]	; (800dbd8 <ai_platform_network_get_error+0x20c>)
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <ai_platform_network_get_error+0x210>)
 800dbbc:	6011      	str	r1, [r2, #0]
 800dbbe:	6812      	ldr	r2, [r2, #0]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d0bb      	beq.n	800db3c <ai_platform_network_get_error+0x170>
 800dbc4:	e7fe      	b.n	800dbc4 <ai_platform_network_get_error+0x1f8>
 800dbc6:	bf00      	nop
 800dbc8:	a1c00100 	.word	0xa1c00100
 800dbcc:	e0042000 	.word	0xe0042000
 800dbd0:	5c001000 	.word	0x5c001000
 800dbd4:	40023000 	.word	0x40023000
 800dbd8:	f407a5c2 	.word	0xf407a5c2
 800dbdc:	b5e8b5cd 	.word	0xb5e8b5cd
 800dbe0:	58024000 	.word	0x58024000

0800dbe4 <ai_platform_network_set_error>:
 800dbe4:	b110      	cbz	r0, 800dbec <ai_platform_network_set_error+0x8>
 800dbe6:	3010      	adds	r0, #16
 800dbe8:	f001 ba9c 	b.w	800f124 <core_set_error>
 800dbec:	4770      	bx	lr
 800dbee:	bf00      	nop

0800dbf0 <ai_platform_inputs_get>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	9102      	str	r1, [sp, #8]
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f000 8093 	beq.w	800dd24 <ai_platform_inputs_get+0x134>
 800dbfe:	4baa      	ldr	r3, [pc, #680]	; (800dea8 <ai_platform_inputs_get+0x2b8>)
 800dc00:	4681      	mov	r9, r0
 800dc02:	6802      	ldr	r2, [r0, #0]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	f040 808d 	bne.w	800dd24 <ai_platform_inputs_get+0x134>
 800dc0a:	f7ff fe2b 	bl	800d864 <_ai_platform_acquire_crc>
 800dc0e:	4ba7      	ldr	r3, [pc, #668]	; (800deac <ai_platform_inputs_get+0x2bc>)
 800dc10:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc1a:	189a      	adds	r2, r3, r2
 800dc1c:	2a01      	cmp	r2, #1
 800dc1e:	f240 80da 	bls.w	800ddd6 <ai_platform_inputs_get+0x1e6>
 800dc22:	f240 4249 	movw	r2, #1097	; 0x449
 800dc26:	4293      	cmp	r3, r2
 800dc28:	f000 80d5 	beq.w	800ddd6 <ai_platform_inputs_get+0x1e6>
 800dc2c:	4aa0      	ldr	r2, [pc, #640]	; (800deb0 <ai_platform_inputs_get+0x2c0>)
 800dc2e:	6813      	ldr	r3, [r2, #0]
 800dc30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc34:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dc38:	f000 80dc 	beq.w	800ddf4 <ai_platform_inputs_get+0x204>
 800dc3c:	6813      	ldr	r3, [r2, #0]
 800dc3e:	f240 4183 	movw	r1, #1155	; 0x483
 800dc42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc46:	428b      	cmp	r3, r1
 800dc48:	f000 810e 	beq.w	800de68 <ai_platform_inputs_get+0x278>
 800dc4c:	6813      	ldr	r3, [r2, #0]
 800dc4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc52:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dc56:	f000 8143 	beq.w	800dee0 <ai_platform_inputs_get+0x2f0>
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 8113 	beq.w	800de8c <ai_platform_inputs_get+0x29c>
 800dc66:	f7ff fdff 	bl	800d868 <_ai_platform_release_crc>
 800dc6a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f000 80d2 	beq.w	800de18 <ai_platform_inputs_get+0x228>
 800dc74:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800dc78:	f1ba 0f00 	cmp.w	sl, #0
 800dc7c:	f000 80cc 	beq.w	800de18 <ai_platform_inputs_get+0x228>
 800dc80:	2100      	movs	r1, #0
 800dc82:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc86:	460d      	mov	r5, r1
 800dc88:	4689      	mov	r9, r1
 800dc8a:	e016      	b.n	800dcba <ai_platform_inputs_get+0xca>
 800dc8c:	9a01      	ldr	r2, [sp, #4]
 800dc8e:	2301      	movs	r3, #1
 800dc90:	f848 3002 	str.w	r3, [r8, r2]
 800dc94:	69b2      	ldr	r2, [r6, #24]
 800dc96:	f04f 0301 	mov.w	r3, #1
 800dc9a:	6856      	ldr	r6, [r2, #4]
 800dc9c:	3501      	adds	r5, #1
 800dc9e:	f109 091c 	add.w	r9, r9, #28
 800dca2:	7523      	strb	r3, [r4, #20]
 800dca4:	2300      	movs	r3, #0
 800dca6:	6962      	ldr	r2, [r4, #20]
 800dca8:	60a7      	str	r7, [r4, #8]
 800dcaa:	f36b 221f 	bfi	r2, fp, #8, #24
 800dcae:	6126      	str	r6, [r4, #16]
 800dcb0:	61a1      	str	r1, [r4, #24]
 800dcb2:	60e3      	str	r3, [r4, #12]
 800dcb4:	6162      	str	r2, [r4, #20]
 800dcb6:	e9c4 0c00 	strd	r0, ip, [r4]
 800dcba:	f8ba 3000 	ldrh.w	r3, [sl]
 800dcbe:	b2ac      	uxth	r4, r5
 800dcc0:	42ab      	cmp	r3, r5
 800dcc2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	f240 80b5 	bls.w	800de36 <ai_platform_inputs_get+0x246>
 800dccc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 80b0 	beq.w	800de36 <ai_platform_inputs_get+0x246>
 800dcd6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	f000 80ab 	beq.w	800de36 <ai_platform_inputs_get+0x246>
 800dce0:	f8da 3008 	ldr.w	r3, [sl, #8]
 800dce4:	69b2      	ldr	r2, [r6, #24]
 800dce6:	68f1      	ldr	r1, [r6, #12]
 800dce8:	6810      	ldr	r0, [r2, #0]
 800dcea:	9100      	str	r1, [sp, #0]
 800dcec:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800dcf0:	68b3      	ldr	r3, [r6, #8]
 800dcf2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800dcf6:	444c      	add	r4, r9
 800dcf8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800dcfc:	f003 fa5e 	bl	80111bc <ai_array_to_buffer_fmt>
 800dd00:	69b2      	ldr	r2, [r6, #24]
 800dd02:	9900      	ldr	r1, [sp, #0]
 800dd04:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800dd08:	2f00      	cmp	r7, #0
 800dd0a:	d0c4      	beq.n	800dc96 <ai_platform_inputs_get+0xa6>
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800dd12:	6832      	ldr	r2, [r6, #0]
 800dd14:	607a      	str	r2, [r7, #4]
 800dd16:	b112      	cbz	r2, 800dd1e <ai_platform_inputs_get+0x12e>
 800dd18:	8852      	ldrh	r2, [r2, #2]
 800dd1a:	2a00      	cmp	r2, #0
 800dd1c:	d1b6      	bne.n	800dc8c <ai_platform_inputs_get+0x9c>
 800dd1e:	69b2      	ldr	r2, [r6, #24]
 800dd20:	2700      	movs	r7, #0
 800dd22:	e7b8      	b.n	800dc96 <ai_platform_inputs_get+0xa6>
 800dd24:	f7ff fd9e 	bl	800d864 <_ai_platform_acquire_crc>
 800dd28:	4b60      	ldr	r3, [pc, #384]	; (800deac <ai_platform_inputs_get+0x2bc>)
 800dd2a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd34:	185a      	adds	r2, r3, r1
 800dd36:	2a01      	cmp	r2, #1
 800dd38:	d92a      	bls.n	800dd90 <ai_platform_inputs_get+0x1a0>
 800dd3a:	f240 4249 	movw	r2, #1097	; 0x449
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d026      	beq.n	800dd90 <ai_platform_inputs_get+0x1a0>
 800dd42:	4a5b      	ldr	r2, [pc, #364]	; (800deb0 <ai_platform_inputs_get+0x2c0>)
 800dd44:	6813      	ldr	r3, [r2, #0]
 800dd46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd4a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dd4e:	d02c      	beq.n	800ddaa <ai_platform_inputs_get+0x1ba>
 800dd50:	6813      	ldr	r3, [r2, #0]
 800dd52:	f240 4183 	movw	r1, #1155	; 0x483
 800dd56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd5a:	428b      	cmp	r3, r1
 800dd5c:	d073      	beq.n	800de46 <ai_platform_inputs_get+0x256>
 800dd5e:	6813      	ldr	r3, [r2, #0]
 800dd60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd64:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dd68:	f000 80ac 	beq.w	800dec4 <ai_platform_inputs_get+0x2d4>
 800dd6c:	6813      	ldr	r3, [r2, #0]
 800dd6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d129      	bne.n	800ddca <ai_platform_inputs_get+0x1da>
 800dd76:	4a4f      	ldr	r2, [pc, #316]	; (800deb4 <ai_platform_inputs_get+0x2c4>)
 800dd78:	2301      	movs	r3, #1
 800dd7a:	6093      	str	r3, [r2, #8]
 800dd7c:	6893      	ldr	r3, [r2, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d1fc      	bne.n	800dd7c <ai_platform_inputs_get+0x18c>
 800dd82:	494d      	ldr	r1, [pc, #308]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800dd84:	4b4d      	ldr	r3, [pc, #308]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800dd86:	6011      	str	r1, [r2, #0]
 800dd88:	6812      	ldr	r2, [r2, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d01d      	beq.n	800ddca <ai_platform_inputs_get+0x1da>
 800dd8e:	e7fe      	b.n	800dd8e <ai_platform_inputs_get+0x19e>
 800dd90:	4a48      	ldr	r2, [pc, #288]	; (800deb4 <ai_platform_inputs_get+0x2c4>)
 800dd92:	2301      	movs	r3, #1
 800dd94:	6093      	str	r3, [r2, #8]
 800dd96:	6893      	ldr	r3, [r2, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1fc      	bne.n	800dd96 <ai_platform_inputs_get+0x1a6>
 800dd9c:	4946      	ldr	r1, [pc, #280]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800dd9e:	4b47      	ldr	r3, [pc, #284]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800dda0:	6011      	str	r1, [r2, #0]
 800dda2:	6812      	ldr	r2, [r2, #0]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d010      	beq.n	800ddca <ai_platform_inputs_get+0x1da>
 800dda8:	e7fe      	b.n	800dda8 <ai_platform_inputs_get+0x1b8>
 800ddaa:	4a45      	ldr	r2, [pc, #276]	; (800dec0 <ai_platform_inputs_get+0x2d0>)
 800ddac:	2301      	movs	r3, #1
 800ddae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ddb2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1fb      	bne.n	800ddb2 <ai_platform_inputs_get+0x1c2>
 800ddba:	493f      	ldr	r1, [pc, #252]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800ddbc:	4b3f      	ldr	r3, [pc, #252]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800ddbe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ddc2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d113      	bne.n	800ddf2 <ai_platform_inputs_get+0x202>
 800ddca:	f7ff fd4d 	bl	800d868 <_ai_platform_release_crc>
 800ddce:	2000      	movs	r0, #0
 800ddd0:	b005      	add	sp, #20
 800ddd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddd6:	4a37      	ldr	r2, [pc, #220]	; (800deb4 <ai_platform_inputs_get+0x2c4>)
 800ddd8:	2301      	movs	r3, #1
 800ddda:	6093      	str	r3, [r2, #8]
 800dddc:	6893      	ldr	r3, [r2, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1fc      	bne.n	800dddc <ai_platform_inputs_get+0x1ec>
 800dde2:	4b35      	ldr	r3, [pc, #212]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800dde4:	6013      	str	r3, [r2, #0]
 800dde6:	4b35      	ldr	r3, [pc, #212]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800dde8:	6812      	ldr	r2, [r2, #0]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	f43f af3b 	beq.w	800dc66 <ai_platform_inputs_get+0x76>
 800ddf0:	e7fe      	b.n	800ddf0 <ai_platform_inputs_get+0x200>
 800ddf2:	e7fe      	b.n	800ddf2 <ai_platform_inputs_get+0x202>
 800ddf4:	4a32      	ldr	r2, [pc, #200]	; (800dec0 <ai_platform_inputs_get+0x2d0>)
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ddfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800de00:	2b00      	cmp	r3, #0
 800de02:	d1fb      	bne.n	800ddfc <ai_platform_inputs_get+0x20c>
 800de04:	4b2c      	ldr	r3, [pc, #176]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800de06:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800de0a:	4b2c      	ldr	r3, [pc, #176]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800de0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800de10:	429a      	cmp	r2, r3
 800de12:	f43f af28 	beq.w	800dc66 <ai_platform_inputs_get+0x76>
 800de16:	e7fe      	b.n	800de16 <ai_platform_inputs_get+0x226>
 800de18:	2400      	movs	r4, #0
 800de1a:	2218      	movs	r2, #24
 800de1c:	2111      	movs	r1, #17
 800de1e:	f109 0010 	add.w	r0, r9, #16
 800de22:	f001 f97f 	bl	800f124 <core_set_error>
 800de26:	4620      	mov	r0, r4
 800de28:	9b02      	ldr	r3, [sp, #8]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d0d0      	beq.n	800ddd0 <ai_platform_inputs_get+0x1e0>
 800de2e:	801c      	strh	r4, [r3, #0]
 800de30:	b005      	add	sp, #20
 800de32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de36:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800de3a:	2c00      	cmp	r4, #0
 800de3c:	d0ec      	beq.n	800de18 <ai_platform_inputs_get+0x228>
 800de3e:	f8da 3008 	ldr.w	r3, [sl, #8]
 800de42:	6858      	ldr	r0, [r3, #4]
 800de44:	e7f0      	b.n	800de28 <ai_platform_inputs_get+0x238>
 800de46:	4a1e      	ldr	r2, [pc, #120]	; (800dec0 <ai_platform_inputs_get+0x2d0>)
 800de48:	2301      	movs	r3, #1
 800de4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800de4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1fb      	bne.n	800de4e <ai_platform_inputs_get+0x25e>
 800de56:	4918      	ldr	r1, [pc, #96]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800de58:	4b18      	ldr	r3, [pc, #96]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800de5a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800de5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800de62:	429a      	cmp	r2, r3
 800de64:	d0b1      	beq.n	800ddca <ai_platform_inputs_get+0x1da>
 800de66:	e7fe      	b.n	800de66 <ai_platform_inputs_get+0x276>
 800de68:	4a15      	ldr	r2, [pc, #84]	; (800dec0 <ai_platform_inputs_get+0x2d0>)
 800de6a:	2301      	movs	r3, #1
 800de6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800de70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800de74:	2b00      	cmp	r3, #0
 800de76:	d1fb      	bne.n	800de70 <ai_platform_inputs_get+0x280>
 800de78:	4b0f      	ldr	r3, [pc, #60]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800de7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800de7e:	4b0f      	ldr	r3, [pc, #60]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800de80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800de84:	429a      	cmp	r2, r3
 800de86:	f43f aeee 	beq.w	800dc66 <ai_platform_inputs_get+0x76>
 800de8a:	e7fe      	b.n	800de8a <ai_platform_inputs_get+0x29a>
 800de8c:	4a09      	ldr	r2, [pc, #36]	; (800deb4 <ai_platform_inputs_get+0x2c4>)
 800de8e:	2301      	movs	r3, #1
 800de90:	6093      	str	r3, [r2, #8]
 800de92:	6893      	ldr	r3, [r2, #8]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d1fc      	bne.n	800de92 <ai_platform_inputs_get+0x2a2>
 800de98:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <ai_platform_inputs_get+0x2c8>)
 800de9a:	6013      	str	r3, [r2, #0]
 800de9c:	4b07      	ldr	r3, [pc, #28]	; (800debc <ai_platform_inputs_get+0x2cc>)
 800de9e:	6812      	ldr	r2, [r2, #0]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	f43f aee0 	beq.w	800dc66 <ai_platform_inputs_get+0x76>
 800dea6:	e7fe      	b.n	800dea6 <ai_platform_inputs_get+0x2b6>
 800dea8:	a1c00100 	.word	0xa1c00100
 800deac:	e0042000 	.word	0xe0042000
 800deb0:	5c001000 	.word	0x5c001000
 800deb4:	40023000 	.word	0x40023000
 800deb8:	f407a5c2 	.word	0xf407a5c2
 800debc:	b5e8b5cd 	.word	0xb5e8b5cd
 800dec0:	58024000 	.word	0x58024000
 800dec4:	4a0d      	ldr	r2, [pc, #52]	; (800defc <ai_platform_inputs_get+0x30c>)
 800dec6:	2301      	movs	r3, #1
 800dec8:	6093      	str	r3, [r2, #8]
 800deca:	6893      	ldr	r3, [r2, #8]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1fc      	bne.n	800deca <ai_platform_inputs_get+0x2da>
 800ded0:	490b      	ldr	r1, [pc, #44]	; (800df00 <ai_platform_inputs_get+0x310>)
 800ded2:	4b0c      	ldr	r3, [pc, #48]	; (800df04 <ai_platform_inputs_get+0x314>)
 800ded4:	6011      	str	r1, [r2, #0]
 800ded6:	6812      	ldr	r2, [r2, #0]
 800ded8:	429a      	cmp	r2, r3
 800deda:	f43f af76 	beq.w	800ddca <ai_platform_inputs_get+0x1da>
 800dede:	e7fe      	b.n	800dede <ai_platform_inputs_get+0x2ee>
 800dee0:	4a06      	ldr	r2, [pc, #24]	; (800defc <ai_platform_inputs_get+0x30c>)
 800dee2:	2301      	movs	r3, #1
 800dee4:	6093      	str	r3, [r2, #8]
 800dee6:	6893      	ldr	r3, [r2, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1fc      	bne.n	800dee6 <ai_platform_inputs_get+0x2f6>
 800deec:	4b04      	ldr	r3, [pc, #16]	; (800df00 <ai_platform_inputs_get+0x310>)
 800deee:	6013      	str	r3, [r2, #0]
 800def0:	4b04      	ldr	r3, [pc, #16]	; (800df04 <ai_platform_inputs_get+0x314>)
 800def2:	6812      	ldr	r2, [r2, #0]
 800def4:	429a      	cmp	r2, r3
 800def6:	f43f aeb6 	beq.w	800dc66 <ai_platform_inputs_get+0x76>
 800defa:	e7fe      	b.n	800defa <ai_platform_inputs_get+0x30a>
 800defc:	40023000 	.word	0x40023000
 800df00:	f407a5c2 	.word	0xf407a5c2
 800df04:	b5e8b5cd 	.word	0xb5e8b5cd

0800df08 <ai_platform_outputs_get>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	b085      	sub	sp, #20
 800df0e:	9102      	str	r1, [sp, #8]
 800df10:	2800      	cmp	r0, #0
 800df12:	f000 808f 	beq.w	800e034 <ai_platform_outputs_get+0x12c>
 800df16:	4ba8      	ldr	r3, [pc, #672]	; (800e1b8 <ai_platform_outputs_get+0x2b0>)
 800df18:	4681      	mov	r9, r0
 800df1a:	6802      	ldr	r2, [r0, #0]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	f040 8089 	bne.w	800e034 <ai_platform_outputs_get+0x12c>
 800df22:	f7ff fc9f 	bl	800d864 <_ai_platform_acquire_crc>
 800df26:	4ba5      	ldr	r3, [pc, #660]	; (800e1bc <ai_platform_outputs_get+0x2b4>)
 800df28:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df32:	189a      	adds	r2, r3, r2
 800df34:	2a01      	cmp	r2, #1
 800df36:	f240 80d6 	bls.w	800e0e6 <ai_platform_outputs_get+0x1de>
 800df3a:	f240 4249 	movw	r2, #1097	; 0x449
 800df3e:	4293      	cmp	r3, r2
 800df40:	f000 80d1 	beq.w	800e0e6 <ai_platform_outputs_get+0x1de>
 800df44:	4a9e      	ldr	r2, [pc, #632]	; (800e1c0 <ai_platform_outputs_get+0x2b8>)
 800df46:	6813      	ldr	r3, [r2, #0]
 800df48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df4c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800df50:	f000 80d8 	beq.w	800e104 <ai_platform_outputs_get+0x1fc>
 800df54:	6813      	ldr	r3, [r2, #0]
 800df56:	f240 4183 	movw	r1, #1155	; 0x483
 800df5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df5e:	428b      	cmp	r3, r1
 800df60:	f000 8109 	beq.w	800e176 <ai_platform_outputs_get+0x26e>
 800df64:	6813      	ldr	r3, [r2, #0]
 800df66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df6a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800df6e:	f000 813f 	beq.w	800e1f0 <ai_platform_outputs_get+0x2e8>
 800df72:	6813      	ldr	r3, [r2, #0]
 800df74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 810e 	beq.w	800e19a <ai_platform_outputs_get+0x292>
 800df7e:	f7ff fc73 	bl	800d868 <_ai_platform_release_crc>
 800df82:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800df86:	2b01      	cmp	r3, #1
 800df88:	f240 80db 	bls.w	800e142 <ai_platform_outputs_get+0x23a>
 800df8c:	2100      	movs	r1, #0
 800df8e:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800df92:	f8cd 900c 	str.w	r9, [sp, #12]
 800df96:	460d      	mov	r5, r1
 800df98:	4689      	mov	r9, r1
 800df9a:	e016      	b.n	800dfca <ai_platform_outputs_get+0xc2>
 800df9c:	9a01      	ldr	r2, [sp, #4]
 800df9e:	2301      	movs	r3, #1
 800dfa0:	f848 3002 	str.w	r3, [r8, r2]
 800dfa4:	69b2      	ldr	r2, [r6, #24]
 800dfa6:	f04f 0301 	mov.w	r3, #1
 800dfaa:	6856      	ldr	r6, [r2, #4]
 800dfac:	3501      	adds	r5, #1
 800dfae:	f109 091c 	add.w	r9, r9, #28
 800dfb2:	7523      	strb	r3, [r4, #20]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	6962      	ldr	r2, [r4, #20]
 800dfb8:	60a7      	str	r7, [r4, #8]
 800dfba:	f36b 221f 	bfi	r2, fp, #8, #24
 800dfbe:	6126      	str	r6, [r4, #16]
 800dfc0:	61a1      	str	r1, [r4, #24]
 800dfc2:	60e3      	str	r3, [r4, #12]
 800dfc4:	6162      	str	r2, [r4, #20]
 800dfc6:	e9c4 0c00 	strd	r0, ip, [r4]
 800dfca:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800dfce:	b2ac      	uxth	r4, r5
 800dfd0:	42ab      	cmp	r3, r5
 800dfd2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800dfd6:	9301      	str	r3, [sp, #4]
 800dfd8:	f240 80a6 	bls.w	800e128 <ai_platform_outputs_get+0x220>
 800dfdc:	f8da 3010 	ldr.w	r3, [sl, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	f000 80a1 	beq.w	800e128 <ai_platform_outputs_get+0x220>
 800dfe6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800dfea:	2e00      	cmp	r6, #0
 800dfec:	f000 809c 	beq.w	800e128 <ai_platform_outputs_get+0x220>
 800dff0:	f8da 3014 	ldr.w	r3, [sl, #20]
 800dff4:	69b2      	ldr	r2, [r6, #24]
 800dff6:	68f1      	ldr	r1, [r6, #12]
 800dff8:	6810      	ldr	r0, [r2, #0]
 800dffa:	9100      	str	r1, [sp, #0]
 800dffc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800e000:	68b3      	ldr	r3, [r6, #8]
 800e002:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800e006:	444c      	add	r4, r9
 800e008:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800e00c:	f003 f8d6 	bl	80111bc <ai_array_to_buffer_fmt>
 800e010:	69b2      	ldr	r2, [r6, #24]
 800e012:	9900      	ldr	r1, [sp, #0]
 800e014:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800e018:	2f00      	cmp	r7, #0
 800e01a:	d0c4      	beq.n	800dfa6 <ai_platform_outputs_get+0x9e>
 800e01c:	2200      	movs	r2, #0
 800e01e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800e022:	6832      	ldr	r2, [r6, #0]
 800e024:	607a      	str	r2, [r7, #4]
 800e026:	b112      	cbz	r2, 800e02e <ai_platform_outputs_get+0x126>
 800e028:	8852      	ldrh	r2, [r2, #2]
 800e02a:	2a00      	cmp	r2, #0
 800e02c:	d1b6      	bne.n	800df9c <ai_platform_outputs_get+0x94>
 800e02e:	69b2      	ldr	r2, [r6, #24]
 800e030:	2700      	movs	r7, #0
 800e032:	e7b8      	b.n	800dfa6 <ai_platform_outputs_get+0x9e>
 800e034:	f7ff fc16 	bl	800d864 <_ai_platform_acquire_crc>
 800e038:	4b60      	ldr	r3, [pc, #384]	; (800e1bc <ai_platform_outputs_get+0x2b4>)
 800e03a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e044:	185a      	adds	r2, r3, r1
 800e046:	2a01      	cmp	r2, #1
 800e048:	d92a      	bls.n	800e0a0 <ai_platform_outputs_get+0x198>
 800e04a:	f240 4249 	movw	r2, #1097	; 0x449
 800e04e:	4293      	cmp	r3, r2
 800e050:	d026      	beq.n	800e0a0 <ai_platform_outputs_get+0x198>
 800e052:	4a5b      	ldr	r2, [pc, #364]	; (800e1c0 <ai_platform_outputs_get+0x2b8>)
 800e054:	6813      	ldr	r3, [r2, #0]
 800e056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e05a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e05e:	d02c      	beq.n	800e0ba <ai_platform_outputs_get+0x1b2>
 800e060:	6813      	ldr	r3, [r2, #0]
 800e062:	f240 4183 	movw	r1, #1155	; 0x483
 800e066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e06a:	428b      	cmp	r3, r1
 800e06c:	d072      	beq.n	800e154 <ai_platform_outputs_get+0x24c>
 800e06e:	6813      	ldr	r3, [r2, #0]
 800e070:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e074:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e078:	f000 80ac 	beq.w	800e1d4 <ai_platform_outputs_get+0x2cc>
 800e07c:	6813      	ldr	r3, [r2, #0]
 800e07e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e082:	2b00      	cmp	r3, #0
 800e084:	d129      	bne.n	800e0da <ai_platform_outputs_get+0x1d2>
 800e086:	4a4f      	ldr	r2, [pc, #316]	; (800e1c4 <ai_platform_outputs_get+0x2bc>)
 800e088:	2301      	movs	r3, #1
 800e08a:	6093      	str	r3, [r2, #8]
 800e08c:	6893      	ldr	r3, [r2, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1fc      	bne.n	800e08c <ai_platform_outputs_get+0x184>
 800e092:	494d      	ldr	r1, [pc, #308]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e094:	4b4d      	ldr	r3, [pc, #308]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e096:	6011      	str	r1, [r2, #0]
 800e098:	6812      	ldr	r2, [r2, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d01d      	beq.n	800e0da <ai_platform_outputs_get+0x1d2>
 800e09e:	e7fe      	b.n	800e09e <ai_platform_outputs_get+0x196>
 800e0a0:	4a48      	ldr	r2, [pc, #288]	; (800e1c4 <ai_platform_outputs_get+0x2bc>)
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	6093      	str	r3, [r2, #8]
 800e0a6:	6893      	ldr	r3, [r2, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1fc      	bne.n	800e0a6 <ai_platform_outputs_get+0x19e>
 800e0ac:	4946      	ldr	r1, [pc, #280]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e0ae:	4b47      	ldr	r3, [pc, #284]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	6812      	ldr	r2, [r2, #0]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d010      	beq.n	800e0da <ai_platform_outputs_get+0x1d2>
 800e0b8:	e7fe      	b.n	800e0b8 <ai_platform_outputs_get+0x1b0>
 800e0ba:	4a45      	ldr	r2, [pc, #276]	; (800e1d0 <ai_platform_outputs_get+0x2c8>)
 800e0bc:	2301      	movs	r3, #1
 800e0be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e0c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1fb      	bne.n	800e0c2 <ai_platform_outputs_get+0x1ba>
 800e0ca:	493f      	ldr	r1, [pc, #252]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e0cc:	4b3f      	ldr	r3, [pc, #252]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e0ce:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e0d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d113      	bne.n	800e102 <ai_platform_outputs_get+0x1fa>
 800e0da:	f7ff fbc5 	bl	800d868 <_ai_platform_release_crc>
 800e0de:	2000      	movs	r0, #0
 800e0e0:	b005      	add	sp, #20
 800e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e6:	4a37      	ldr	r2, [pc, #220]	; (800e1c4 <ai_platform_outputs_get+0x2bc>)
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	6093      	str	r3, [r2, #8]
 800e0ec:	6893      	ldr	r3, [r2, #8]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1fc      	bne.n	800e0ec <ai_platform_outputs_get+0x1e4>
 800e0f2:	4b35      	ldr	r3, [pc, #212]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e0f4:	6013      	str	r3, [r2, #0]
 800e0f6:	4b35      	ldr	r3, [pc, #212]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e0f8:	6812      	ldr	r2, [r2, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	f43f af3f 	beq.w	800df7e <ai_platform_outputs_get+0x76>
 800e100:	e7fe      	b.n	800e100 <ai_platform_outputs_get+0x1f8>
 800e102:	e7fe      	b.n	800e102 <ai_platform_outputs_get+0x1fa>
 800e104:	4a32      	ldr	r2, [pc, #200]	; (800e1d0 <ai_platform_outputs_get+0x2c8>)
 800e106:	2301      	movs	r3, #1
 800e108:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e10c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1fb      	bne.n	800e10c <ai_platform_outputs_get+0x204>
 800e114:	4b2c      	ldr	r3, [pc, #176]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e116:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e11a:	4b2c      	ldr	r3, [pc, #176]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e11c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e120:	429a      	cmp	r2, r3
 800e122:	f43f af2c 	beq.w	800df7e <ai_platform_outputs_get+0x76>
 800e126:	e7fe      	b.n	800e126 <ai_platform_outputs_get+0x21e>
 800e128:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e12c:	b14c      	cbz	r4, 800e142 <ai_platform_outputs_get+0x23a>
 800e12e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800e132:	6858      	ldr	r0, [r3, #4]
 800e134:	9b02      	ldr	r3, [sp, #8]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d0d2      	beq.n	800e0e0 <ai_platform_outputs_get+0x1d8>
 800e13a:	801c      	strh	r4, [r3, #0]
 800e13c:	b005      	add	sp, #20
 800e13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e142:	2400      	movs	r4, #0
 800e144:	2218      	movs	r2, #24
 800e146:	2111      	movs	r1, #17
 800e148:	f109 0010 	add.w	r0, r9, #16
 800e14c:	f000 ffea 	bl	800f124 <core_set_error>
 800e150:	4620      	mov	r0, r4
 800e152:	e7ef      	b.n	800e134 <ai_platform_outputs_get+0x22c>
 800e154:	4a1e      	ldr	r2, [pc, #120]	; (800e1d0 <ai_platform_outputs_get+0x2c8>)
 800e156:	2301      	movs	r3, #1
 800e158:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e15c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1fb      	bne.n	800e15c <ai_platform_outputs_get+0x254>
 800e164:	4918      	ldr	r1, [pc, #96]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e166:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e168:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e16c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e170:	429a      	cmp	r2, r3
 800e172:	d0b2      	beq.n	800e0da <ai_platform_outputs_get+0x1d2>
 800e174:	e7fe      	b.n	800e174 <ai_platform_outputs_get+0x26c>
 800e176:	4a16      	ldr	r2, [pc, #88]	; (800e1d0 <ai_platform_outputs_get+0x2c8>)
 800e178:	2301      	movs	r3, #1
 800e17a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e17e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1fb      	bne.n	800e17e <ai_platform_outputs_get+0x276>
 800e186:	4b10      	ldr	r3, [pc, #64]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e188:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e18c:	4b0f      	ldr	r3, [pc, #60]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e18e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e192:	429a      	cmp	r2, r3
 800e194:	f43f aef3 	beq.w	800df7e <ai_platform_outputs_get+0x76>
 800e198:	e7fe      	b.n	800e198 <ai_platform_outputs_get+0x290>
 800e19a:	4a0a      	ldr	r2, [pc, #40]	; (800e1c4 <ai_platform_outputs_get+0x2bc>)
 800e19c:	2301      	movs	r3, #1
 800e19e:	6093      	str	r3, [r2, #8]
 800e1a0:	6893      	ldr	r3, [r2, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1fc      	bne.n	800e1a0 <ai_platform_outputs_get+0x298>
 800e1a6:	4b08      	ldr	r3, [pc, #32]	; (800e1c8 <ai_platform_outputs_get+0x2c0>)
 800e1a8:	6013      	str	r3, [r2, #0]
 800e1aa:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <ai_platform_outputs_get+0x2c4>)
 800e1ac:	6812      	ldr	r2, [r2, #0]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	f43f aee5 	beq.w	800df7e <ai_platform_outputs_get+0x76>
 800e1b4:	e7fe      	b.n	800e1b4 <ai_platform_outputs_get+0x2ac>
 800e1b6:	bf00      	nop
 800e1b8:	a1c00100 	.word	0xa1c00100
 800e1bc:	e0042000 	.word	0xe0042000
 800e1c0:	5c001000 	.word	0x5c001000
 800e1c4:	40023000 	.word	0x40023000
 800e1c8:	f407a5c2 	.word	0xf407a5c2
 800e1cc:	b5e8b5cd 	.word	0xb5e8b5cd
 800e1d0:	58024000 	.word	0x58024000
 800e1d4:	4a0d      	ldr	r2, [pc, #52]	; (800e20c <ai_platform_outputs_get+0x304>)
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	6093      	str	r3, [r2, #8]
 800e1da:	6893      	ldr	r3, [r2, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1fc      	bne.n	800e1da <ai_platform_outputs_get+0x2d2>
 800e1e0:	490b      	ldr	r1, [pc, #44]	; (800e210 <ai_platform_outputs_get+0x308>)
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	; (800e214 <ai_platform_outputs_get+0x30c>)
 800e1e4:	6011      	str	r1, [r2, #0]
 800e1e6:	6812      	ldr	r2, [r2, #0]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	f43f af76 	beq.w	800e0da <ai_platform_outputs_get+0x1d2>
 800e1ee:	e7fe      	b.n	800e1ee <ai_platform_outputs_get+0x2e6>
 800e1f0:	4a06      	ldr	r2, [pc, #24]	; (800e20c <ai_platform_outputs_get+0x304>)
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	6093      	str	r3, [r2, #8]
 800e1f6:	6893      	ldr	r3, [r2, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1fc      	bne.n	800e1f6 <ai_platform_outputs_get+0x2ee>
 800e1fc:	4b04      	ldr	r3, [pc, #16]	; (800e210 <ai_platform_outputs_get+0x308>)
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	4b04      	ldr	r3, [pc, #16]	; (800e214 <ai_platform_outputs_get+0x30c>)
 800e202:	6812      	ldr	r2, [r2, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	f43f aeba 	beq.w	800df7e <ai_platform_outputs_get+0x76>
 800e20a:	e7fe      	b.n	800e20a <ai_platform_outputs_get+0x302>
 800e20c:	40023000 	.word	0x40023000
 800e210:	f407a5c2 	.word	0xf407a5c2
 800e214:	b5e8b5cd 	.word	0xb5e8b5cd

0800e218 <ai_platform_network_create>:
 800e218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e21c:	b083      	sub	sp, #12
 800e21e:	4604      	mov	r4, r0
 800e220:	4615      	mov	r5, r2
 800e222:	461e      	mov	r6, r3
 800e224:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800e228:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800e22c:	f7ff fb1a 	bl	800d864 <_ai_platform_acquire_crc>
 800e230:	2800      	cmp	r0, #0
 800e232:	f000 80bd 	beq.w	800e3b0 <ai_platform_network_create+0x198>
 800e236:	4ba5      	ldr	r3, [pc, #660]	; (800e4cc <ai_platform_network_create+0x2b4>)
 800e238:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800e23c:	4601      	mov	r1, r0
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e244:	eb03 020c 	add.w	r2, r3, ip
 800e248:	2a01      	cmp	r2, #1
 800e24a:	f240 80a8 	bls.w	800e39e <ai_platform_network_create+0x186>
 800e24e:	f240 4249 	movw	r2, #1097	; 0x449
 800e252:	4293      	cmp	r3, r2
 800e254:	f000 80a3 	beq.w	800e39e <ai_platform_network_create+0x186>
 800e258:	4a9d      	ldr	r2, [pc, #628]	; (800e4d0 <ai_platform_network_create+0x2b8>)
 800e25a:	6813      	ldr	r3, [r2, #0]
 800e25c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e260:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e264:	f000 80b9 	beq.w	800e3da <ai_platform_network_create+0x1c2>
 800e268:	6813      	ldr	r3, [r2, #0]
 800e26a:	f240 4c83 	movw	ip, #1155	; 0x483
 800e26e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e272:	4563      	cmp	r3, ip
 800e274:	f000 80a1 	beq.w	800e3ba <ai_platform_network_create+0x1a2>
 800e278:	6813      	ldr	r3, [r2, #0]
 800e27a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e27e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e282:	f000 8153 	beq.w	800e52c <ai_platform_network_create+0x314>
 800e286:	6813      	ldr	r3, [r2, #0]
 800e288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f040 808d 	bne.w	800e3ac <ai_platform_network_create+0x194>
 800e292:	4a90      	ldr	r2, [pc, #576]	; (800e4d4 <ai_platform_network_create+0x2bc>)
 800e294:	2318      	movs	r3, #24
 800e296:	6093      	str	r3, [r2, #8]
 800e298:	6893      	ldr	r3, [r2, #8]
 800e29a:	2b18      	cmp	r3, #24
 800e29c:	f040 8086 	bne.w	800e3ac <ai_platform_network_create+0x194>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	6093      	str	r3, [r2, #8]
 800e2a4:	6893      	ldr	r3, [r2, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d1fc      	bne.n	800e2a4 <ai_platform_network_create+0x8c>
 800e2aa:	4608      	mov	r0, r1
 800e2ac:	f7ff fadc 	bl	800d868 <_ai_platform_release_crc>
 800e2b0:	f7ff fad8 	bl	800d864 <_ai_platform_acquire_crc>
 800e2b4:	4b85      	ldr	r3, [pc, #532]	; (800e4cc <ai_platform_network_create+0x2b4>)
 800e2b6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2c0:	189a      	adds	r2, r3, r2
 800e2c2:	2a01      	cmp	r2, #1
 800e2c4:	f240 809f 	bls.w	800e406 <ai_platform_network_create+0x1ee>
 800e2c8:	f240 4249 	movw	r2, #1097	; 0x449
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	f000 809a 	beq.w	800e406 <ai_platform_network_create+0x1ee>
 800e2d2:	4a7f      	ldr	r2, [pc, #508]	; (800e4d0 <ai_platform_network_create+0x2b8>)
 800e2d4:	6813      	ldr	r3, [r2, #0]
 800e2d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e2de:	f000 80a0 	beq.w	800e422 <ai_platform_network_create+0x20a>
 800e2e2:	6813      	ldr	r3, [r2, #0]
 800e2e4:	f240 4183 	movw	r1, #1155	; 0x483
 800e2e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2ec:	428b      	cmp	r3, r1
 800e2ee:	f000 80bf 	beq.w	800e470 <ai_platform_network_create+0x258>
 800e2f2:	6813      	ldr	r3, [r2, #0]
 800e2f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e2fc:	f000 8123 	beq.w	800e546 <ai_platform_network_create+0x32e>
 800e300:	6813      	ldr	r3, [r2, #0]
 800e302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e306:	2b00      	cmp	r3, #0
 800e308:	f000 80c4 	beq.w	800e494 <ai_platform_network_create+0x27c>
 800e30c:	f7ff faac 	bl	800d868 <_ai_platform_release_crc>
 800e310:	2c00      	cmp	r4, #0
 800e312:	f000 80aa 	beq.w	800e46a <ai_platform_network_create+0x252>
 800e316:	4b70      	ldr	r3, [pc, #448]	; (800e4d8 <ai_platform_network_create+0x2c0>)
 800e318:	602b      	str	r3, [r5, #0]
 800e31a:	6025      	str	r5, [r4, #0]
 800e31c:	f000 fefa 	bl	800f114 <core_init>
 800e320:	2800      	cmp	r0, #0
 800e322:	f000 8090 	beq.w	800e446 <ai_platform_network_create+0x22e>
 800e326:	f7ff fa9d 	bl	800d864 <_ai_platform_acquire_crc>
 800e32a:	4b68      	ldr	r3, [pc, #416]	; (800e4cc <ai_platform_network_create+0x2b4>)
 800e32c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e336:	185a      	adds	r2, r3, r1
 800e338:	2a01      	cmp	r2, #1
 800e33a:	f240 80b9 	bls.w	800e4b0 <ai_platform_network_create+0x298>
 800e33e:	f240 4249 	movw	r2, #1097	; 0x449
 800e342:	4293      	cmp	r3, r2
 800e344:	f000 80b4 	beq.w	800e4b0 <ai_platform_network_create+0x298>
 800e348:	4a61      	ldr	r2, [pc, #388]	; (800e4d0 <ai_platform_network_create+0x2b8>)
 800e34a:	6813      	ldr	r3, [r2, #0]
 800e34c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e350:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e354:	f000 80c8 	beq.w	800e4e8 <ai_platform_network_create+0x2d0>
 800e358:	6813      	ldr	r3, [r2, #0]
 800e35a:	f240 4183 	movw	r1, #1155	; 0x483
 800e35e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e362:	428b      	cmp	r3, r1
 800e364:	f000 8107 	beq.w	800e576 <ai_platform_network_create+0x35e>
 800e368:	6813      	ldr	r3, [r2, #0]
 800e36a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e36e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e372:	f000 8111 	beq.w	800e598 <ai_platform_network_create+0x380>
 800e376:	6813      	ldr	r3, [r2, #0]
 800e378:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f040 80c3 	bne.w	800e508 <ai_platform_network_create+0x2f0>
 800e382:	4b54      	ldr	r3, [pc, #336]	; (800e4d4 <ai_platform_network_create+0x2bc>)
 800e384:	2201      	movs	r2, #1
 800e386:	609a      	str	r2, [r3, #8]
 800e388:	689a      	ldr	r2, [r3, #8]
 800e38a:	2a00      	cmp	r2, #0
 800e38c:	d1fc      	bne.n	800e388 <ai_platform_network_create+0x170>
 800e38e:	4a53      	ldr	r2, [pc, #332]	; (800e4dc <ai_platform_network_create+0x2c4>)
 800e390:	601a      	str	r2, [r3, #0]
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	4b52      	ldr	r3, [pc, #328]	; (800e4e0 <ai_platform_network_create+0x2c8>)
 800e396:	429a      	cmp	r2, r3
 800e398:	f000 80b6 	beq.w	800e508 <ai_platform_network_create+0x2f0>
 800e39c:	e7fe      	b.n	800e39c <ai_platform_network_create+0x184>
 800e39e:	4b4d      	ldr	r3, [pc, #308]	; (800e4d4 <ai_platform_network_create+0x2bc>)
 800e3a0:	2218      	movs	r2, #24
 800e3a2:	609a      	str	r2, [r3, #8]
 800e3a4:	689a      	ldr	r2, [r3, #8]
 800e3a6:	2a18      	cmp	r2, #24
 800e3a8:	d027      	beq.n	800e3fa <ai_platform_network_create+0x1e2>
 800e3aa:	4608      	mov	r0, r1
 800e3ac:	f7ff fa5c 	bl	800d868 <_ai_platform_release_crc>
 800e3b0:	f244 1033 	movw	r0, #16691	; 0x4133
 800e3b4:	b003      	add	sp, #12
 800e3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3ba:	4a4a      	ldr	r2, [pc, #296]	; (800e4e4 <ai_platform_network_create+0x2cc>)
 800e3bc:	2318      	movs	r3, #24
 800e3be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e3c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e3c6:	2b18      	cmp	r3, #24
 800e3c8:	d1f0      	bne.n	800e3ac <ai_platform_network_create+0x194>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e3d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1fb      	bne.n	800e3d0 <ai_platform_network_create+0x1b8>
 800e3d8:	e767      	b.n	800e2aa <ai_platform_network_create+0x92>
 800e3da:	4a42      	ldr	r2, [pc, #264]	; (800e4e4 <ai_platform_network_create+0x2cc>)
 800e3dc:	2318      	movs	r3, #24
 800e3de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e3e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e3e6:	2b18      	cmp	r3, #24
 800e3e8:	d1e0      	bne.n	800e3ac <ai_platform_network_create+0x194>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e3f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1fb      	bne.n	800e3f0 <ai_platform_network_create+0x1d8>
 800e3f8:	e757      	b.n	800e2aa <ai_platform_network_create+0x92>
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	609a      	str	r2, [r3, #8]
 800e3fe:	689a      	ldr	r2, [r3, #8]
 800e400:	2a00      	cmp	r2, #0
 800e402:	d1fc      	bne.n	800e3fe <ai_platform_network_create+0x1e6>
 800e404:	e751      	b.n	800e2aa <ai_platform_network_create+0x92>
 800e406:	4a33      	ldr	r2, [pc, #204]	; (800e4d4 <ai_platform_network_create+0x2bc>)
 800e408:	2301      	movs	r3, #1
 800e40a:	6093      	str	r3, [r2, #8]
 800e40c:	6891      	ldr	r1, [r2, #8]
 800e40e:	2900      	cmp	r1, #0
 800e410:	d1fc      	bne.n	800e40c <ai_platform_network_create+0x1f4>
 800e412:	4b32      	ldr	r3, [pc, #200]	; (800e4dc <ai_platform_network_create+0x2c4>)
 800e414:	6013      	str	r3, [r2, #0]
 800e416:	4b32      	ldr	r3, [pc, #200]	; (800e4e0 <ai_platform_network_create+0x2c8>)
 800e418:	6812      	ldr	r2, [r2, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	f43f af76 	beq.w	800e30c <ai_platform_network_create+0xf4>
 800e420:	e7fe      	b.n	800e420 <ai_platform_network_create+0x208>
 800e422:	4a30      	ldr	r2, [pc, #192]	; (800e4e4 <ai_platform_network_create+0x2cc>)
 800e424:	2301      	movs	r3, #1
 800e426:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e42a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1fb      	bne.n	800e42a <ai_platform_network_create+0x212>
 800e432:	4b2a      	ldr	r3, [pc, #168]	; (800e4dc <ai_platform_network_create+0x2c4>)
 800e434:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e438:	4b29      	ldr	r3, [pc, #164]	; (800e4e0 <ai_platform_network_create+0x2c8>)
 800e43a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e43e:	429a      	cmp	r2, r3
 800e440:	f43f af64 	beq.w	800e30c <ai_platform_network_create+0xf4>
 800e444:	e7fe      	b.n	800e444 <ai_platform_network_create+0x22c>
 800e446:	f04f 0930 	mov.w	r9, #48	; 0x30
 800e44a:	2300      	movs	r3, #0
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	2410      	movs	r4, #16
 800e450:	4642      	mov	r2, r8
 800e452:	4639      	mov	r1, r7
 800e454:	4630      	mov	r0, r6
 800e456:	f002 fe95 	bl	8011184 <ai_version_get>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2000      	movs	r0, #0
 800e45e:	64ab      	str	r3, [r5, #72]	; 0x48
 800e460:	f369 0007 	bfi	r0, r9, #0, #8
 800e464:	f364 201f 	bfi	r0, r4, #8, #24
 800e468:	e7a4      	b.n	800e3b4 <ai_platform_network_create+0x19c>
 800e46a:	f241 0010 	movw	r0, #4112	; 0x1010
 800e46e:	e7a1      	b.n	800e3b4 <ai_platform_network_create+0x19c>
 800e470:	4a1c      	ldr	r2, [pc, #112]	; (800e4e4 <ai_platform_network_create+0x2cc>)
 800e472:	2301      	movs	r3, #1
 800e474:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e478:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1fb      	bne.n	800e478 <ai_platform_network_create+0x260>
 800e480:	4b16      	ldr	r3, [pc, #88]	; (800e4dc <ai_platform_network_create+0x2c4>)
 800e482:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e486:	4b16      	ldr	r3, [pc, #88]	; (800e4e0 <ai_platform_network_create+0x2c8>)
 800e488:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e48c:	429a      	cmp	r2, r3
 800e48e:	f43f af3d 	beq.w	800e30c <ai_platform_network_create+0xf4>
 800e492:	e7fe      	b.n	800e492 <ai_platform_network_create+0x27a>
 800e494:	4a0f      	ldr	r2, [pc, #60]	; (800e4d4 <ai_platform_network_create+0x2bc>)
 800e496:	2301      	movs	r3, #1
 800e498:	6093      	str	r3, [r2, #8]
 800e49a:	6893      	ldr	r3, [r2, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d1fc      	bne.n	800e49a <ai_platform_network_create+0x282>
 800e4a0:	4b0e      	ldr	r3, [pc, #56]	; (800e4dc <ai_platform_network_create+0x2c4>)
 800e4a2:	6013      	str	r3, [r2, #0]
 800e4a4:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <ai_platform_network_create+0x2c8>)
 800e4a6:	6812      	ldr	r2, [r2, #0]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	f43f af2f 	beq.w	800e30c <ai_platform_network_create+0xf4>
 800e4ae:	e7fe      	b.n	800e4ae <ai_platform_network_create+0x296>
 800e4b0:	4a08      	ldr	r2, [pc, #32]	; (800e4d4 <ai_platform_network_create+0x2bc>)
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	6093      	str	r3, [r2, #8]
 800e4b6:	6893      	ldr	r3, [r2, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1fc      	bne.n	800e4b6 <ai_platform_network_create+0x29e>
 800e4bc:	4b07      	ldr	r3, [pc, #28]	; (800e4dc <ai_platform_network_create+0x2c4>)
 800e4be:	6013      	str	r3, [r2, #0]
 800e4c0:	4b07      	ldr	r3, [pc, #28]	; (800e4e0 <ai_platform_network_create+0x2c8>)
 800e4c2:	6812      	ldr	r2, [r2, #0]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d01f      	beq.n	800e508 <ai_platform_network_create+0x2f0>
 800e4c8:	e7fe      	b.n	800e4c8 <ai_platform_network_create+0x2b0>
 800e4ca:	bf00      	nop
 800e4cc:	e0042000 	.word	0xe0042000
 800e4d0:	5c001000 	.word	0x5c001000
 800e4d4:	40023000 	.word	0x40023000
 800e4d8:	a1c00100 	.word	0xa1c00100
 800e4dc:	f407a5c2 	.word	0xf407a5c2
 800e4e0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e4e4:	58024000 	.word	0x58024000
 800e4e8:	4a33      	ldr	r2, [pc, #204]	; (800e5b8 <ai_platform_network_create+0x3a0>)
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e4f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1fb      	bne.n	800e4f0 <ai_platform_network_create+0x2d8>
 800e4f8:	4b30      	ldr	r3, [pc, #192]	; (800e5bc <ai_platform_network_create+0x3a4>)
 800e4fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e4fe:	4b30      	ldr	r3, [pc, #192]	; (800e5c0 <ai_platform_network_create+0x3a8>)
 800e500:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e504:	429a      	cmp	r2, r3
 800e506:	d12c      	bne.n	800e562 <ai_platform_network_create+0x34a>
 800e508:	f7ff f9ae 	bl	800d868 <_ai_platform_release_crc>
 800e50c:	2200      	movs	r2, #0
 800e50e:	4639      	mov	r1, r7
 800e510:	4630      	mov	r0, r6
 800e512:	f002 fe37 	bl	8011184 <ai_version_get>
 800e516:	4681      	mov	r9, r0
 800e518:	2200      	movs	r2, #0
 800e51a:	2105      	movs	r1, #5
 800e51c:	2001      	movs	r0, #1
 800e51e:	f002 fe31 	bl	8011184 <ai_version_get>
 800e522:	4581      	cmp	r9, r0
 800e524:	d01e      	beq.n	800e564 <ai_platform_network_create+0x34c>
 800e526:	f04f 0901 	mov.w	r9, #1
 800e52a:	e78e      	b.n	800e44a <ai_platform_network_create+0x232>
 800e52c:	4b25      	ldr	r3, [pc, #148]	; (800e5c4 <ai_platform_network_create+0x3ac>)
 800e52e:	2218      	movs	r2, #24
 800e530:	609a      	str	r2, [r3, #8]
 800e532:	689a      	ldr	r2, [r3, #8]
 800e534:	2a18      	cmp	r2, #24
 800e536:	f47f af39 	bne.w	800e3ac <ai_platform_network_create+0x194>
 800e53a:	2201      	movs	r2, #1
 800e53c:	609a      	str	r2, [r3, #8]
 800e53e:	689a      	ldr	r2, [r3, #8]
 800e540:	2a00      	cmp	r2, #0
 800e542:	d1fc      	bne.n	800e53e <ai_platform_network_create+0x326>
 800e544:	e6b1      	b.n	800e2aa <ai_platform_network_create+0x92>
 800e546:	4a1f      	ldr	r2, [pc, #124]	; (800e5c4 <ai_platform_network_create+0x3ac>)
 800e548:	2301      	movs	r3, #1
 800e54a:	6093      	str	r3, [r2, #8]
 800e54c:	6893      	ldr	r3, [r2, #8]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d1fc      	bne.n	800e54c <ai_platform_network_create+0x334>
 800e552:	4b1a      	ldr	r3, [pc, #104]	; (800e5bc <ai_platform_network_create+0x3a4>)
 800e554:	6013      	str	r3, [r2, #0]
 800e556:	4b1a      	ldr	r3, [pc, #104]	; (800e5c0 <ai_platform_network_create+0x3a8>)
 800e558:	6812      	ldr	r2, [r2, #0]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	f43f aed6 	beq.w	800e30c <ai_platform_network_create+0xf4>
 800e560:	e7fe      	b.n	800e560 <ai_platform_network_create+0x348>
 800e562:	e7fe      	b.n	800e562 <ai_platform_network_create+0x34a>
 800e564:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <ai_platform_network_create+0x3b0>)
 800e566:	a801      	add	r0, sp, #4
 800e568:	9301      	str	r3, [sp, #4]
 800e56a:	f002 fc51 	bl	8010e10 <ai_check_custom_types>
 800e56e:	b300      	cbz	r0, 800e5b2 <ai_platform_network_create+0x39a>
 800e570:	2400      	movs	r4, #0
 800e572:	46a1      	mov	r9, r4
 800e574:	e76c      	b.n	800e450 <ai_platform_network_create+0x238>
 800e576:	4b10      	ldr	r3, [pc, #64]	; (800e5b8 <ai_platform_network_create+0x3a0>)
 800e578:	2201      	movs	r2, #1
 800e57a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800e57e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800e582:	2a00      	cmp	r2, #0
 800e584:	d1fb      	bne.n	800e57e <ai_platform_network_create+0x366>
 800e586:	4a0d      	ldr	r2, [pc, #52]	; (800e5bc <ai_platform_network_create+0x3a4>)
 800e588:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800e58c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800e590:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <ai_platform_network_create+0x3a8>)
 800e592:	429a      	cmp	r2, r3
 800e594:	d0b8      	beq.n	800e508 <ai_platform_network_create+0x2f0>
 800e596:	e7fe      	b.n	800e596 <ai_platform_network_create+0x37e>
 800e598:	4b0a      	ldr	r3, [pc, #40]	; (800e5c4 <ai_platform_network_create+0x3ac>)
 800e59a:	2201      	movs	r2, #1
 800e59c:	609a      	str	r2, [r3, #8]
 800e59e:	689a      	ldr	r2, [r3, #8]
 800e5a0:	2a00      	cmp	r2, #0
 800e5a2:	d1fc      	bne.n	800e59e <ai_platform_network_create+0x386>
 800e5a4:	4a05      	ldr	r2, [pc, #20]	; (800e5bc <ai_platform_network_create+0x3a4>)
 800e5a6:	601a      	str	r2, [r3, #0]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <ai_platform_network_create+0x3a8>)
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d0ab      	beq.n	800e508 <ai_platform_network_create+0x2f0>
 800e5b0:	e7fe      	b.n	800e5b0 <ai_platform_network_create+0x398>
 800e5b2:	f04f 0902 	mov.w	r9, #2
 800e5b6:	e748      	b.n	800e44a <ai_platform_network_create+0x232>
 800e5b8:	58024000 	.word	0x58024000
 800e5bc:	f407a5c2 	.word	0xf407a5c2
 800e5c0:	b5e8b5cd 	.word	0xb5e8b5cd
 800e5c4:	40023000 	.word	0x40023000
 800e5c8:	84048403 	.word	0x84048403

0800e5cc <ai_platform_network_init>:
 800e5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d052      	beq.n	800e67a <ai_platform_network_init+0xae>
 800e5d4:	4bab      	ldr	r3, [pc, #684]	; (800e884 <ai_platform_network_init+0x2b8>)
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	6802      	ldr	r2, [r0, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d14d      	bne.n	800e67a <ai_platform_network_init+0xae>
 800e5de:	460d      	mov	r5, r1
 800e5e0:	f7ff f940 	bl	800d864 <_ai_platform_acquire_crc>
 800e5e4:	4ba8      	ldr	r3, [pc, #672]	; (800e888 <ai_platform_network_init+0x2bc>)
 800e5e6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e5f0:	189a      	adds	r2, r3, r2
 800e5f2:	2a01      	cmp	r2, #1
 800e5f4:	f240 809b 	bls.w	800e72e <ai_platform_network_init+0x162>
 800e5f8:	f240 4249 	movw	r2, #1097	; 0x449
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	f000 8096 	beq.w	800e72e <ai_platform_network_init+0x162>
 800e602:	4aa2      	ldr	r2, [pc, #648]	; (800e88c <ai_platform_network_init+0x2c0>)
 800e604:	6813      	ldr	r3, [r2, #0]
 800e606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e60a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e60e:	f000 809d 	beq.w	800e74c <ai_platform_network_init+0x180>
 800e612:	6813      	ldr	r3, [r2, #0]
 800e614:	f240 4183 	movw	r1, #1155	; 0x483
 800e618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e61c:	428b      	cmp	r3, r1
 800e61e:	f000 80e4 	beq.w	800e7ea <ai_platform_network_init+0x21e>
 800e622:	6813      	ldr	r3, [r2, #0]
 800e624:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e628:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e62c:	f000 811b 	beq.w	800e866 <ai_platform_network_init+0x29a>
 800e630:	6813      	ldr	r3, [r2, #0]
 800e632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 80f9 	beq.w	800e82e <ai_platform_network_init+0x262>
 800e63c:	f7ff f914 	bl	800d868 <_ai_platform_release_crc>
 800e640:	2d00      	cmp	r5, #0
 800e642:	f000 8147 	beq.w	800e8d4 <ai_platform_network_init+0x308>
 800e646:	4b92      	ldr	r3, [pc, #584]	; (800e890 <ai_platform_network_init+0x2c4>)
 800e648:	682a      	ldr	r2, [r5, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	f040 8090 	bne.w	800e770 <ai_platform_network_init+0x1a4>
 800e650:	692b      	ldr	r3, [r5, #16]
 800e652:	89ae      	ldrh	r6, [r5, #12]
 800e654:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800e658:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800e65c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e65e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800e662:	2303      	movs	r3, #3
 800e664:	84a6      	strh	r6, [r4, #36]	; 0x24
 800e666:	4626      	mov	r6, r4
 800e668:	4620      	mov	r0, r4
 800e66a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800e66e:	60e3      	str	r3, [r4, #12]
 800e670:	f002 fbf6 	bl	8010e60 <ai_layers_init_all>
 800e674:	4630      	mov	r0, r6
 800e676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e67a:	f7ff f8f3 	bl	800d864 <_ai_platform_acquire_crc>
 800e67e:	4b82      	ldr	r3, [pc, #520]	; (800e888 <ai_platform_network_init+0x2bc>)
 800e680:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e68a:	185a      	adds	r2, r3, r1
 800e68c:	2a01      	cmp	r2, #1
 800e68e:	d92b      	bls.n	800e6e8 <ai_platform_network_init+0x11c>
 800e690:	f240 4249 	movw	r2, #1097	; 0x449
 800e694:	4293      	cmp	r3, r2
 800e696:	d027      	beq.n	800e6e8 <ai_platform_network_init+0x11c>
 800e698:	4a7c      	ldr	r2, [pc, #496]	; (800e88c <ai_platform_network_init+0x2c0>)
 800e69a:	6813      	ldr	r3, [r2, #0]
 800e69c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6a0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e6a4:	d02d      	beq.n	800e702 <ai_platform_network_init+0x136>
 800e6a6:	6813      	ldr	r3, [r2, #0]
 800e6a8:	f240 4183 	movw	r1, #1155	; 0x483
 800e6ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6b0:	428b      	cmp	r3, r1
 800e6b2:	f000 8089 	beq.w	800e7c8 <ai_platform_network_init+0x1fc>
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6bc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e6c0:	f000 80c3 	beq.w	800e84a <ai_platform_network_init+0x27e>
 800e6c4:	6813      	ldr	r3, [r2, #0]
 800e6c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d129      	bne.n	800e722 <ai_platform_network_init+0x156>
 800e6ce:	4a71      	ldr	r2, [pc, #452]	; (800e894 <ai_platform_network_init+0x2c8>)
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	6093      	str	r3, [r2, #8]
 800e6d4:	6893      	ldr	r3, [r2, #8]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d1fc      	bne.n	800e6d4 <ai_platform_network_init+0x108>
 800e6da:	496f      	ldr	r1, [pc, #444]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e6dc:	4b6f      	ldr	r3, [pc, #444]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e6de:	6011      	str	r1, [r2, #0]
 800e6e0:	6812      	ldr	r2, [r2, #0]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d01d      	beq.n	800e722 <ai_platform_network_init+0x156>
 800e6e6:	e7fe      	b.n	800e6e6 <ai_platform_network_init+0x11a>
 800e6e8:	4a6a      	ldr	r2, [pc, #424]	; (800e894 <ai_platform_network_init+0x2c8>)
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	6093      	str	r3, [r2, #8]
 800e6ee:	6893      	ldr	r3, [r2, #8]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d1fc      	bne.n	800e6ee <ai_platform_network_init+0x122>
 800e6f4:	4968      	ldr	r1, [pc, #416]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e6f6:	4b69      	ldr	r3, [pc, #420]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e6f8:	6011      	str	r1, [r2, #0]
 800e6fa:	6812      	ldr	r2, [r2, #0]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d010      	beq.n	800e722 <ai_platform_network_init+0x156>
 800e700:	e7fe      	b.n	800e700 <ai_platform_network_init+0x134>
 800e702:	4a67      	ldr	r2, [pc, #412]	; (800e8a0 <ai_platform_network_init+0x2d4>)
 800e704:	2301      	movs	r3, #1
 800e706:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e70a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d1fb      	bne.n	800e70a <ai_platform_network_init+0x13e>
 800e712:	4961      	ldr	r1, [pc, #388]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e714:	4b61      	ldr	r3, [pc, #388]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e716:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e71a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e71e:	429a      	cmp	r2, r3
 800e720:	d113      	bne.n	800e74a <ai_platform_network_init+0x17e>
 800e722:	2600      	movs	r6, #0
 800e724:	f7ff f8a0 	bl	800d868 <_ai_platform_release_crc>
 800e728:	4630      	mov	r0, r6
 800e72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e72e:	4a59      	ldr	r2, [pc, #356]	; (800e894 <ai_platform_network_init+0x2c8>)
 800e730:	2301      	movs	r3, #1
 800e732:	6093      	str	r3, [r2, #8]
 800e734:	6893      	ldr	r3, [r2, #8]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1fc      	bne.n	800e734 <ai_platform_network_init+0x168>
 800e73a:	4b57      	ldr	r3, [pc, #348]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	4b57      	ldr	r3, [pc, #348]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e740:	6812      	ldr	r2, [r2, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	f43f af7a 	beq.w	800e63c <ai_platform_network_init+0x70>
 800e748:	e7fe      	b.n	800e748 <ai_platform_network_init+0x17c>
 800e74a:	e7fe      	b.n	800e74a <ai_platform_network_init+0x17e>
 800e74c:	4a54      	ldr	r2, [pc, #336]	; (800e8a0 <ai_platform_network_init+0x2d4>)
 800e74e:	2301      	movs	r3, #1
 800e750:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e754:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1fb      	bne.n	800e754 <ai_platform_network_init+0x188>
 800e75c:	4b4e      	ldr	r3, [pc, #312]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e75e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e762:	4b4e      	ldr	r3, [pc, #312]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e764:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e768:	429a      	cmp	r2, r3
 800e76a:	f43f af67 	beq.w	800e63c <ai_platform_network_init+0x70>
 800e76e:	e7fe      	b.n	800e76e <ai_platform_network_init+0x1a2>
 800e770:	2101      	movs	r1, #1
 800e772:	4628      	mov	r0, r5
 800e774:	f105 081c 	add.w	r8, r5, #28
 800e778:	686e      	ldr	r6, [r5, #4]
 800e77a:	f7ff f835 	bl	800d7e8 <ai_buffer_get_size>
 800e77e:	4607      	mov	r7, r0
 800e780:	2101      	movs	r1, #1
 800e782:	4640      	mov	r0, r8
 800e784:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800e788:	f7ff f82e 	bl	800d7e8 <ai_buffer_get_size>
 800e78c:	2f00      	cmp	r7, #0
 800e78e:	d13e      	bne.n	800e80e <ai_platform_network_init+0x242>
 800e790:	2800      	cmp	r0, #0
 800e792:	f000 808e 	beq.w	800e8b2 <ai_platform_network_init+0x2e6>
 800e796:	f1b9 0f00 	cmp.w	r9, #0
 800e79a:	f000 8094 	beq.w	800e8c6 <ai_platform_network_init+0x2fa>
 800e79e:	f04f 0c01 	mov.w	ip, #1
 800e7a2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800e7a4:	2600      	movs	r6, #0
 800e7a6:	83e7      	strh	r7, [r4, #30]
 800e7a8:	4563      	cmp	r3, ip
 800e7aa:	83a6      	strh	r6, [r4, #28]
 800e7ac:	d37a      	bcc.n	800e8a4 <ai_platform_network_init+0x2d8>
 800e7ae:	f1bc 0f00 	cmp.w	ip, #0
 800e7b2:	f000 809c 	beq.w	800e8ee <ai_platform_network_init+0x322>
 800e7b6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e7b8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800e7bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e7be:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800e7c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e7c6:	e74c      	b.n	800e662 <ai_platform_network_init+0x96>
 800e7c8:	4a35      	ldr	r2, [pc, #212]	; (800e8a0 <ai_platform_network_init+0x2d4>)
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e7d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1fb      	bne.n	800e7d0 <ai_platform_network_init+0x204>
 800e7d8:	492f      	ldr	r1, [pc, #188]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e7da:	4b30      	ldr	r3, [pc, #192]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e7dc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800e7e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d09c      	beq.n	800e722 <ai_platform_network_init+0x156>
 800e7e8:	e7fe      	b.n	800e7e8 <ai_platform_network_init+0x21c>
 800e7ea:	4a2d      	ldr	r2, [pc, #180]	; (800e8a0 <ai_platform_network_init+0x2d4>)
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e7f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1fb      	bne.n	800e7f2 <ai_platform_network_init+0x226>
 800e7fa:	4b27      	ldr	r3, [pc, #156]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e7fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e800:	4b26      	ldr	r3, [pc, #152]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e802:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e806:	429a      	cmp	r2, r3
 800e808:	f43f af18 	beq.w	800e63c <ai_platform_network_init+0x70>
 800e80c:	e7fe      	b.n	800e80c <ai_platform_network_init+0x240>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d153      	bne.n	800e8ba <ai_platform_network_init+0x2ee>
 800e812:	4680      	mov	r8, r0
 800e814:	4684      	mov	ip, r0
 800e816:	2e00      	cmp	r6, #0
 800e818:	d063      	beq.n	800e8e2 <ai_platform_network_init+0x316>
 800e81a:	8be6      	ldrh	r6, [r4, #30]
 800e81c:	2e00      	cmp	r6, #0
 800e81e:	d168      	bne.n	800e8f2 <ai_platform_network_init+0x326>
 800e820:	2212      	movs	r2, #18
 800e822:	2116      	movs	r1, #22
 800e824:	f104 0010 	add.w	r0, r4, #16
 800e828:	f000 fc7c 	bl	800f124 <core_set_error>
 800e82c:	e77c      	b.n	800e728 <ai_platform_network_init+0x15c>
 800e82e:	4a19      	ldr	r2, [pc, #100]	; (800e894 <ai_platform_network_init+0x2c8>)
 800e830:	2301      	movs	r3, #1
 800e832:	6093      	str	r3, [r2, #8]
 800e834:	6893      	ldr	r3, [r2, #8]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1fc      	bne.n	800e834 <ai_platform_network_init+0x268>
 800e83a:	4b17      	ldr	r3, [pc, #92]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	4b17      	ldr	r3, [pc, #92]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	f43f aefa 	beq.w	800e63c <ai_platform_network_init+0x70>
 800e848:	e7fe      	b.n	800e848 <ai_platform_network_init+0x27c>
 800e84a:	4a12      	ldr	r2, [pc, #72]	; (800e894 <ai_platform_network_init+0x2c8>)
 800e84c:	2301      	movs	r3, #1
 800e84e:	6093      	str	r3, [r2, #8]
 800e850:	6893      	ldr	r3, [r2, #8]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d1fc      	bne.n	800e850 <ai_platform_network_init+0x284>
 800e856:	4910      	ldr	r1, [pc, #64]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e858:	4b10      	ldr	r3, [pc, #64]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e85a:	6011      	str	r1, [r2, #0]
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	f43f af5f 	beq.w	800e722 <ai_platform_network_init+0x156>
 800e864:	e7fe      	b.n	800e864 <ai_platform_network_init+0x298>
 800e866:	4a0b      	ldr	r2, [pc, #44]	; (800e894 <ai_platform_network_init+0x2c8>)
 800e868:	2301      	movs	r3, #1
 800e86a:	6093      	str	r3, [r2, #8]
 800e86c:	6893      	ldr	r3, [r2, #8]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1fc      	bne.n	800e86c <ai_platform_network_init+0x2a0>
 800e872:	4b09      	ldr	r3, [pc, #36]	; (800e898 <ai_platform_network_init+0x2cc>)
 800e874:	6013      	str	r3, [r2, #0]
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <ai_platform_network_init+0x2d0>)
 800e878:	6812      	ldr	r2, [r2, #0]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	f43f aede 	beq.w	800e63c <ai_platform_network_init+0x70>
 800e880:	e7fe      	b.n	800e880 <ai_platform_network_init+0x2b4>
 800e882:	bf00      	nop
 800e884:	a1c00100 	.word	0xa1c00100
 800e888:	e0042000 	.word	0xe0042000
 800e88c:	5c001000 	.word	0x5c001000
 800e890:	a1facade 	.word	0xa1facade
 800e894:	40023000 	.word	0x40023000
 800e898:	f407a5c2 	.word	0xf407a5c2
 800e89c:	b5e8b5cd 	.word	0xb5e8b5cd
 800e8a0:	58024000 	.word	0x58024000
 800e8a4:	2213      	movs	r2, #19
 800e8a6:	2116      	movs	r1, #22
 800e8a8:	f104 0010 	add.w	r0, r4, #16
 800e8ac:	f000 fc3a 	bl	800f124 <core_set_error>
 800e8b0:	e73a      	b.n	800e728 <ai_platform_network_init+0x15c>
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	4680      	mov	r8, r0
 800e8b6:	4684      	mov	ip, r0
 800e8b8:	e773      	b.n	800e7a2 <ai_platform_network_init+0x1d6>
 800e8ba:	f1b9 0f00 	cmp.w	r9, #0
 800e8be:	d002      	beq.n	800e8c6 <ai_platform_network_init+0x2fa>
 800e8c0:	f04f 0c01 	mov.w	ip, #1
 800e8c4:	e7a7      	b.n	800e816 <ai_platform_network_init+0x24a>
 800e8c6:	2110      	movs	r1, #16
 800e8c8:	2213      	movs	r2, #19
 800e8ca:	2600      	movs	r6, #0
 800e8cc:	1860      	adds	r0, r4, r1
 800e8ce:	f000 fc29 	bl	800f124 <core_set_error>
 800e8d2:	e729      	b.n	800e728 <ai_platform_network_init+0x15c>
 800e8d4:	2110      	movs	r1, #16
 800e8d6:	2211      	movs	r2, #17
 800e8d8:	462e      	mov	r6, r5
 800e8da:	1860      	adds	r0, r4, r1
 800e8dc:	f000 fc22 	bl	800f124 <core_set_error>
 800e8e0:	e722      	b.n	800e728 <ai_platform_network_init+0x15c>
 800e8e2:	2110      	movs	r1, #16
 800e8e4:	2212      	movs	r2, #18
 800e8e6:	1860      	adds	r0, r4, r1
 800e8e8:	f000 fc1c 	bl	800f124 <core_set_error>
 800e8ec:	e71c      	b.n	800e728 <ai_platform_network_init+0x15c>
 800e8ee:	4666      	mov	r6, ip
 800e8f0:	e6b7      	b.n	800e662 <ai_platform_network_init+0x96>
 800e8f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8f4:	6a26      	ldr	r6, [r4, #32]
 800e8f6:	2701      	movs	r7, #1
 800e8f8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e8fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e8fe:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800e902:	e74e      	b.n	800e7a2 <ai_platform_network_init+0x1d6>

0800e904 <ai_platform_network_post_init>:
 800e904:	b538      	push	{r3, r4, r5, lr}
 800e906:	2800      	cmp	r0, #0
 800e908:	d04e      	beq.n	800e9a8 <ai_platform_network_post_init+0xa4>
 800e90a:	4b8c      	ldr	r3, [pc, #560]	; (800eb3c <ai_platform_network_post_init+0x238>)
 800e90c:	4604      	mov	r4, r0
 800e90e:	6802      	ldr	r2, [r0, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	d149      	bne.n	800e9a8 <ai_platform_network_post_init+0xa4>
 800e914:	f7fe ffa6 	bl	800d864 <_ai_platform_acquire_crc>
 800e918:	4b89      	ldr	r3, [pc, #548]	; (800eb40 <ai_platform_network_post_init+0x23c>)
 800e91a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e924:	189a      	adds	r2, r3, r2
 800e926:	2a01      	cmp	r2, #1
 800e928:	f240 8095 	bls.w	800ea56 <ai_platform_network_post_init+0x152>
 800e92c:	f240 4249 	movw	r2, #1097	; 0x449
 800e930:	4293      	cmp	r3, r2
 800e932:	f000 8090 	beq.w	800ea56 <ai_platform_network_post_init+0x152>
 800e936:	4a83      	ldr	r2, [pc, #524]	; (800eb44 <ai_platform_network_post_init+0x240>)
 800e938:	6813      	ldr	r3, [r2, #0]
 800e93a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e93e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e942:	f000 8096 	beq.w	800ea72 <ai_platform_network_post_init+0x16e>
 800e946:	6813      	ldr	r3, [r2, #0]
 800e948:	f240 4183 	movw	r1, #1155	; 0x483
 800e94c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e950:	428b      	cmp	r3, r1
 800e952:	f000 80b8 	beq.w	800eac6 <ai_platform_network_post_init+0x1c2>
 800e956:	6813      	ldr	r3, [r2, #0]
 800e958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e95c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e960:	f000 80de 	beq.w	800eb20 <ai_platform_network_post_init+0x21c>
 800e964:	6813      	ldr	r3, [r2, #0]
 800e966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f000 80bd 	beq.w	800eaea <ai_platform_network_post_init+0x1e6>
 800e970:	f7fe ff7a 	bl	800d868 <_ai_platform_release_crc>
 800e974:	68e3      	ldr	r3, [r4, #12]
 800e976:	f013 0502 	ands.w	r5, r3, #2
 800e97a:	f000 808c 	beq.w	800ea96 <ai_platform_network_post_init+0x192>
 800e97e:	4620      	mov	r0, r4
 800e980:	f002 fa7c 	bl	8010e7c <ai_layers_post_init_all>
 800e984:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e986:	b16b      	cbz	r3, 800e9a4 <ai_platform_network_post_init+0xa0>
 800e988:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800e98a:	e007      	b.n	800e99c <ai_platform_network_post_init+0x98>
 800e98c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800e990:	4798      	blx	r3
 800e992:	692b      	ldr	r3, [r5, #16]
 800e994:	b133      	cbz	r3, 800e9a4 <ai_platform_network_post_init+0xa0>
 800e996:	42ab      	cmp	r3, r5
 800e998:	461d      	mov	r5, r3
 800e99a:	d003      	beq.n	800e9a4 <ai_platform_network_post_init+0xa0>
 800e99c:	4629      	mov	r1, r5
 800e99e:	2000      	movs	r0, #0
 800e9a0:	2d00      	cmp	r5, #0
 800e9a2:	d1f3      	bne.n	800e98c <ai_platform_network_post_init+0x88>
 800e9a4:	2001      	movs	r0, #1
 800e9a6:	bd38      	pop	{r3, r4, r5, pc}
 800e9a8:	f7fe ff5c 	bl	800d864 <_ai_platform_acquire_crc>
 800e9ac:	4b64      	ldr	r3, [pc, #400]	; (800eb40 <ai_platform_network_post_init+0x23c>)
 800e9ae:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9b8:	185a      	adds	r2, r3, r1
 800e9ba:	2a01      	cmp	r2, #1
 800e9bc:	d92a      	bls.n	800ea14 <ai_platform_network_post_init+0x110>
 800e9be:	f240 4249 	movw	r2, #1097	; 0x449
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d026      	beq.n	800ea14 <ai_platform_network_post_init+0x110>
 800e9c6:	4a5f      	ldr	r2, [pc, #380]	; (800eb44 <ai_platform_network_post_init+0x240>)
 800e9c8:	6813      	ldr	r3, [r2, #0]
 800e9ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9ce:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e9d2:	d02c      	beq.n	800ea2e <ai_platform_network_post_init+0x12a>
 800e9d4:	6813      	ldr	r3, [r2, #0]
 800e9d6:	f240 4183 	movw	r1, #1155	; 0x483
 800e9da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9de:	428b      	cmp	r3, r1
 800e9e0:	d060      	beq.n	800eaa4 <ai_platform_network_post_init+0x1a0>
 800e9e2:	6813      	ldr	r3, [r2, #0]
 800e9e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9e8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800e9ec:	f000 808b 	beq.w	800eb06 <ai_platform_network_post_init+0x202>
 800e9f0:	6813      	ldr	r3, [r2, #0]
 800e9f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d129      	bne.n	800ea4e <ai_platform_network_post_init+0x14a>
 800e9fa:	4a53      	ldr	r2, [pc, #332]	; (800eb48 <ai_platform_network_post_init+0x244>)
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	6093      	str	r3, [r2, #8]
 800ea00:	6893      	ldr	r3, [r2, #8]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d1fc      	bne.n	800ea00 <ai_platform_network_post_init+0xfc>
 800ea06:	4951      	ldr	r1, [pc, #324]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800ea08:	4b51      	ldr	r3, [pc, #324]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800ea0a:	6011      	str	r1, [r2, #0]
 800ea0c:	6812      	ldr	r2, [r2, #0]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d01d      	beq.n	800ea4e <ai_platform_network_post_init+0x14a>
 800ea12:	e7fe      	b.n	800ea12 <ai_platform_network_post_init+0x10e>
 800ea14:	4a4c      	ldr	r2, [pc, #304]	; (800eb48 <ai_platform_network_post_init+0x244>)
 800ea16:	2301      	movs	r3, #1
 800ea18:	6093      	str	r3, [r2, #8]
 800ea1a:	6893      	ldr	r3, [r2, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d1fc      	bne.n	800ea1a <ai_platform_network_post_init+0x116>
 800ea20:	494a      	ldr	r1, [pc, #296]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800ea22:	4b4b      	ldr	r3, [pc, #300]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800ea24:	6011      	str	r1, [r2, #0]
 800ea26:	6812      	ldr	r2, [r2, #0]
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d010      	beq.n	800ea4e <ai_platform_network_post_init+0x14a>
 800ea2c:	e7fe      	b.n	800ea2c <ai_platform_network_post_init+0x128>
 800ea2e:	4a49      	ldr	r2, [pc, #292]	; (800eb54 <ai_platform_network_post_init+0x250>)
 800ea30:	2301      	movs	r3, #1
 800ea32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ea36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1fb      	bne.n	800ea36 <ai_platform_network_post_init+0x132>
 800ea3e:	4943      	ldr	r1, [pc, #268]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800ea40:	4b43      	ldr	r3, [pc, #268]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800ea42:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ea46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d110      	bne.n	800ea70 <ai_platform_network_post_init+0x16c>
 800ea4e:	f7fe ff0b 	bl	800d868 <_ai_platform_release_crc>
 800ea52:	2000      	movs	r0, #0
 800ea54:	bd38      	pop	{r3, r4, r5, pc}
 800ea56:	4a3c      	ldr	r2, [pc, #240]	; (800eb48 <ai_platform_network_post_init+0x244>)
 800ea58:	2301      	movs	r3, #1
 800ea5a:	6093      	str	r3, [r2, #8]
 800ea5c:	6893      	ldr	r3, [r2, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1fc      	bne.n	800ea5c <ai_platform_network_post_init+0x158>
 800ea62:	493a      	ldr	r1, [pc, #232]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800ea64:	4b3a      	ldr	r3, [pc, #232]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800ea66:	6011      	str	r1, [r2, #0]
 800ea68:	6812      	ldr	r2, [r2, #0]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d080      	beq.n	800e970 <ai_platform_network_post_init+0x6c>
 800ea6e:	e7fe      	b.n	800ea6e <ai_platform_network_post_init+0x16a>
 800ea70:	e7fe      	b.n	800ea70 <ai_platform_network_post_init+0x16c>
 800ea72:	4a38      	ldr	r2, [pc, #224]	; (800eb54 <ai_platform_network_post_init+0x250>)
 800ea74:	2301      	movs	r3, #1
 800ea76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ea7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1fb      	bne.n	800ea7a <ai_platform_network_post_init+0x176>
 800ea82:	4932      	ldr	r1, [pc, #200]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800ea84:	4b32      	ldr	r3, [pc, #200]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800ea86:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ea8a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	f43f af6e 	beq.w	800e970 <ai_platform_network_post_init+0x6c>
 800ea94:	e7fe      	b.n	800ea94 <ai_platform_network_post_init+0x190>
 800ea96:	2210      	movs	r2, #16
 800ea98:	2111      	movs	r1, #17
 800ea9a:	18a0      	adds	r0, r4, r2
 800ea9c:	f000 fb42 	bl	800f124 <core_set_error>
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	4a2b      	ldr	r2, [pc, #172]	; (800eb54 <ai_platform_network_post_init+0x250>)
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eaac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1fb      	bne.n	800eaac <ai_platform_network_post_init+0x1a8>
 800eab4:	4925      	ldr	r1, [pc, #148]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800eab6:	4b26      	ldr	r3, [pc, #152]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800eab8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800eabc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d0c4      	beq.n	800ea4e <ai_platform_network_post_init+0x14a>
 800eac4:	e7fe      	b.n	800eac4 <ai_platform_network_post_init+0x1c0>
 800eac6:	4a23      	ldr	r2, [pc, #140]	; (800eb54 <ai_platform_network_post_init+0x250>)
 800eac8:	2301      	movs	r3, #1
 800eaca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eace:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1fb      	bne.n	800eace <ai_platform_network_post_init+0x1ca>
 800ead6:	491d      	ldr	r1, [pc, #116]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800ead8:	4b1d      	ldr	r3, [pc, #116]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800eada:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800eade:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800eae2:	429a      	cmp	r2, r3
 800eae4:	f43f af44 	beq.w	800e970 <ai_platform_network_post_init+0x6c>
 800eae8:	e7fe      	b.n	800eae8 <ai_platform_network_post_init+0x1e4>
 800eaea:	4a17      	ldr	r2, [pc, #92]	; (800eb48 <ai_platform_network_post_init+0x244>)
 800eaec:	2301      	movs	r3, #1
 800eaee:	6093      	str	r3, [r2, #8]
 800eaf0:	6893      	ldr	r3, [r2, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1fc      	bne.n	800eaf0 <ai_platform_network_post_init+0x1ec>
 800eaf6:	4915      	ldr	r1, [pc, #84]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800eaf8:	4b15      	ldr	r3, [pc, #84]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800eafa:	6011      	str	r1, [r2, #0]
 800eafc:	6812      	ldr	r2, [r2, #0]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	f43f af36 	beq.w	800e970 <ai_platform_network_post_init+0x6c>
 800eb04:	e7fe      	b.n	800eb04 <ai_platform_network_post_init+0x200>
 800eb06:	4a10      	ldr	r2, [pc, #64]	; (800eb48 <ai_platform_network_post_init+0x244>)
 800eb08:	2301      	movs	r3, #1
 800eb0a:	6093      	str	r3, [r2, #8]
 800eb0c:	6893      	ldr	r3, [r2, #8]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1fc      	bne.n	800eb0c <ai_platform_network_post_init+0x208>
 800eb12:	490e      	ldr	r1, [pc, #56]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800eb14:	4b0e      	ldr	r3, [pc, #56]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800eb16:	6011      	str	r1, [r2, #0]
 800eb18:	6812      	ldr	r2, [r2, #0]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d097      	beq.n	800ea4e <ai_platform_network_post_init+0x14a>
 800eb1e:	e7fe      	b.n	800eb1e <ai_platform_network_post_init+0x21a>
 800eb20:	4a09      	ldr	r2, [pc, #36]	; (800eb48 <ai_platform_network_post_init+0x244>)
 800eb22:	2301      	movs	r3, #1
 800eb24:	6093      	str	r3, [r2, #8]
 800eb26:	6893      	ldr	r3, [r2, #8]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d1fc      	bne.n	800eb26 <ai_platform_network_post_init+0x222>
 800eb2c:	4907      	ldr	r1, [pc, #28]	; (800eb4c <ai_platform_network_post_init+0x248>)
 800eb2e:	4b08      	ldr	r3, [pc, #32]	; (800eb50 <ai_platform_network_post_init+0x24c>)
 800eb30:	6011      	str	r1, [r2, #0]
 800eb32:	6812      	ldr	r2, [r2, #0]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	f43f af1b 	beq.w	800e970 <ai_platform_network_post_init+0x6c>
 800eb3a:	e7fe      	b.n	800eb3a <ai_platform_network_post_init+0x236>
 800eb3c:	a1c00100 	.word	0xa1c00100
 800eb40:	e0042000 	.word	0xe0042000
 800eb44:	5c001000 	.word	0x5c001000
 800eb48:	40023000 	.word	0x40023000
 800eb4c:	f407a5c2 	.word	0xf407a5c2
 800eb50:	b5e8b5cd 	.word	0xb5e8b5cd
 800eb54:	58024000 	.word	0x58024000

0800eb58 <ai_platform_network_process>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	b085      	sub	sp, #20
 800eb5e:	460e      	mov	r6, r1
 800eb60:	4605      	mov	r5, r0
 800eb62:	9201      	str	r2, [sp, #4]
 800eb64:	b120      	cbz	r0, 800eb70 <ai_platform_network_process+0x18>
 800eb66:	4b24      	ldr	r3, [pc, #144]	; (800ebf8 <ai_platform_network_process+0xa0>)
 800eb68:	6802      	ldr	r2, [r0, #0]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	bf18      	it	ne
 800eb6e:	2500      	movne	r5, #0
 800eb70:	f7fe fe78 	bl	800d864 <_ai_platform_acquire_crc>
 800eb74:	4b21      	ldr	r3, [pc, #132]	; (800ebfc <ai_platform_network_process+0xa4>)
 800eb76:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb80:	185a      	adds	r2, r3, r1
 800eb82:	2a01      	cmp	r2, #1
 800eb84:	d92b      	bls.n	800ebde <ai_platform_network_process+0x86>
 800eb86:	f240 4249 	movw	r2, #1097	; 0x449
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d027      	beq.n	800ebde <ai_platform_network_process+0x86>
 800eb8e:	4a1c      	ldr	r2, [pc, #112]	; (800ec00 <ai_platform_network_process+0xa8>)
 800eb90:	6813      	ldr	r3, [r2, #0]
 800eb92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eb96:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800eb9a:	d039      	beq.n	800ec10 <ai_platform_network_process+0xb8>
 800eb9c:	6813      	ldr	r3, [r2, #0]
 800eb9e:	f240 4183 	movw	r1, #1155	; 0x483
 800eba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eba6:	428b      	cmp	r3, r1
 800eba8:	f000 819c 	beq.w	800eee4 <ai_platform_network_process+0x38c>
 800ebac:	6813      	ldr	r3, [r2, #0]
 800ebae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebb2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ebb6:	f000 8179 	beq.w	800eeac <ai_platform_network_process+0x354>
 800ebba:	6813      	ldr	r3, [r2, #0]
 800ebbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d136      	bne.n	800ec32 <ai_platform_network_process+0xda>
 800ebc4:	4a0f      	ldr	r2, [pc, #60]	; (800ec04 <ai_platform_network_process+0xac>)
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	6093      	str	r3, [r2, #8]
 800ebca:	6893      	ldr	r3, [r2, #8]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1fc      	bne.n	800ebca <ai_platform_network_process+0x72>
 800ebd0:	4b0d      	ldr	r3, [pc, #52]	; (800ec08 <ai_platform_network_process+0xb0>)
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	4b0d      	ldr	r3, [pc, #52]	; (800ec0c <ai_platform_network_process+0xb4>)
 800ebd6:	6812      	ldr	r2, [r2, #0]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d02a      	beq.n	800ec32 <ai_platform_network_process+0xda>
 800ebdc:	e7fe      	b.n	800ebdc <ai_platform_network_process+0x84>
 800ebde:	4a09      	ldr	r2, [pc, #36]	; (800ec04 <ai_platform_network_process+0xac>)
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	6093      	str	r3, [r2, #8]
 800ebe4:	6893      	ldr	r3, [r2, #8]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1fc      	bne.n	800ebe4 <ai_platform_network_process+0x8c>
 800ebea:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <ai_platform_network_process+0xb0>)
 800ebec:	6013      	str	r3, [r2, #0]
 800ebee:	4b07      	ldr	r3, [pc, #28]	; (800ec0c <ai_platform_network_process+0xb4>)
 800ebf0:	6812      	ldr	r2, [r2, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d01d      	beq.n	800ec32 <ai_platform_network_process+0xda>
 800ebf6:	e7fe      	b.n	800ebf6 <ai_platform_network_process+0x9e>
 800ebf8:	a1c00100 	.word	0xa1c00100
 800ebfc:	e0042000 	.word	0xe0042000
 800ec00:	5c001000 	.word	0x5c001000
 800ec04:	40023000 	.word	0x40023000
 800ec08:	f407a5c2 	.word	0xf407a5c2
 800ec0c:	b5e8b5cd 	.word	0xb5e8b5cd
 800ec10:	4ab0      	ldr	r2, [pc, #704]	; (800eed4 <ai_platform_network_process+0x37c>)
 800ec12:	2301      	movs	r3, #1
 800ec14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ec18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d1fb      	bne.n	800ec18 <ai_platform_network_process+0xc0>
 800ec20:	4bad      	ldr	r3, [pc, #692]	; (800eed8 <ai_platform_network_process+0x380>)
 800ec22:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ec26:	4bad      	ldr	r3, [pc, #692]	; (800eedc <ai_platform_network_process+0x384>)
 800ec28:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	f040 812b 	bne.w	800ee88 <ai_platform_network_process+0x330>
 800ec32:	f7fe fe19 	bl	800d868 <_ai_platform_release_crc>
 800ec36:	2d00      	cmp	r5, #0
 800ec38:	f000 8172 	beq.w	800ef20 <ai_platform_network_process+0x3c8>
 800ec3c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f000 8123 	beq.w	800ee8a <ai_platform_network_process+0x332>
 800ec44:	68eb      	ldr	r3, [r5, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800ec4c:	f003 0303 	and.w	r3, r3, #3
 800ec50:	616a      	str	r2, [r5, #20]
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	f040 811f 	bne.w	800ee96 <ai_platform_network_process+0x33e>
 800ec58:	2e00      	cmp	r6, #0
 800ec5a:	f000 8156 	beq.w	800ef0a <ai_platform_network_process+0x3b2>
 800ec5e:	fab8 f788 	clz	r7, r8
 800ec62:	097f      	lsrs	r7, r7, #5
 800ec64:	f1b8 0f00 	cmp.w	r8, #0
 800ec68:	f000 814f 	beq.w	800ef0a <ai_platform_network_process+0x3b2>
 800ec6c:	f8b8 3000 	ldrh.w	r3, [r8]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f000 814a 	beq.w	800ef0a <ai_platform_network_process+0x3b2>
 800ec76:	69b3      	ldr	r3, [r6, #24]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800ec7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d072      	beq.n	800ed6c <ai_platform_network_process+0x214>
 800ec86:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800ec8a:	2c00      	cmp	r4, #0
 800ec8c:	d06e      	beq.n	800ed6c <ai_platform_network_process+0x214>
 800ec8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec92:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800ec96:	f8d3 a000 	ldr.w	sl, [r3]
 800ec9a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800ec9e:	f000 8133 	beq.w	800ef08 <ai_platform_network_process+0x3b0>
 800eca2:	69a3      	ldr	r3, [r4, #24]
 800eca4:	2101      	movs	r1, #1
 800eca6:	4630      	mov	r0, r6
 800eca8:	685d      	ldr	r5, [r3, #4]
 800ecaa:	f7fe fd9d 	bl	800d7e8 <ai_buffer_get_size>
 800ecae:	4285      	cmp	r5, r0
 800ecb0:	f0c0 8138 	bcc.w	800ef24 <ai_platform_network_process+0x3cc>
 800ecb4:	68e0      	ldr	r0, [r4, #12]
 800ecb6:	69b1      	ldr	r1, [r6, #24]
 800ecb8:	68c2      	ldr	r2, [r0, #12]
 800ecba:	68cb      	ldr	r3, [r1, #12]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	f040 8131 	bne.w	800ef24 <ai_platform_network_process+0x3cc>
 800ecc2:	6882      	ldr	r2, [r0, #8]
 800ecc4:	688b      	ldr	r3, [r1, #8]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	f040 812c 	bne.w	800ef24 <ai_platform_network_process+0x3cc>
 800eccc:	6842      	ldr	r2, [r0, #4]
 800ecce:	684b      	ldr	r3, [r1, #4]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	f040 8127 	bne.w	800ef24 <ai_platform_network_process+0x3cc>
 800ecd6:	69a3      	ldr	r3, [r4, #24]
 800ecd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ecdc:	f002 fb02 	bl	80112e4 <ai_array_get_data_byte_size>
 800ece0:	4605      	mov	r5, r0
 800ece2:	4620      	mov	r0, r4
 800ece4:	f002 fa54 	bl	8011190 <get_tensor_byte_size>
 800ece8:	4285      	cmp	r5, r0
 800ecea:	f0c0 811b 	bcc.w	800ef24 <ai_platform_network_process+0x3cc>
 800ecee:	69a3      	ldr	r3, [r4, #24]
 800ecf0:	6818      	ldr	r0, [r3, #0]
 800ecf2:	f002 fa63 	bl	80111bc <ai_array_to_buffer_fmt>
 800ecf6:	6833      	ldr	r3, [r6, #0]
 800ecf8:	4058      	eors	r0, r3
 800ecfa:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800ecfe:	f040 81ca 	bne.w	800f096 <ai_platform_network_process+0x53e>
 800ed02:	6873      	ldr	r3, [r6, #4]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f000 81bd 	beq.w	800f084 <ai_platform_network_process+0x52c>
 800ed0a:	69b3      	ldr	r3, [r6, #24]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 81ca 	beq.w	800f0a8 <ai_platform_network_process+0x550>
 800ed14:	9a02      	ldr	r2, [sp, #8]
 800ed16:	4620      	mov	r0, r4
 800ed18:	3701      	adds	r7, #1
 800ed1a:	361c      	adds	r6, #28
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	bf38      	it	cc
 800ed20:	461a      	movcc	r2, r3
 800ed22:	9202      	str	r2, [sp, #8]
 800ed24:	f002 fa34 	bl	8011190 <get_tensor_byte_size>
 800ed28:	f8c9 0008 	str.w	r0, [r9, #8]
 800ed2c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	fb00 f303 	mul.w	r3, r0, r3
 800ed36:	f8c9 300c 	str.w	r3, [r9, #12]
 800ed3a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800ed3e:	440b      	add	r3, r1
 800ed40:	f8c9 1004 	str.w	r1, [r9, #4]
 800ed44:	f84a 300b 	str.w	r3, [sl, fp]
 800ed48:	69a0      	ldr	r0, [r4, #24]
 800ed4a:	6803      	ldr	r3, [r0, #0]
 800ed4c:	009a      	lsls	r2, r3, #2
 800ed4e:	f100 80bb 	bmi.w	800eec8 <ai_platform_network_process+0x370>
 800ed52:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ed56:	1a9b      	subs	r3, r3, r2
 800ed58:	4419      	add	r1, r3
 800ed5a:	6081      	str	r1, [r0, #8]
 800ed5c:	69a3      	ldr	r3, [r4, #24]
 800ed5e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800ed62:	60da      	str	r2, [r3, #12]
 800ed64:	f8b8 3000 	ldrh.w	r3, [r8]
 800ed68:	42bb      	cmp	r3, r7
 800ed6a:	d888      	bhi.n	800ec7e <ai_platform_network_process+0x126>
 800ed6c:	9d03      	ldr	r5, [sp, #12]
 800ed6e:	9b01      	ldr	r3, [sp, #4]
 800ed70:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f000 81a1 	beq.w	800f0ba <ai_platform_network_process+0x562>
 800ed78:	2a01      	cmp	r2, #1
 800ed7a:	f240 817b 	bls.w	800f074 <ai_platform_network_process+0x51c>
 800ed7e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800ed82:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 8174 	beq.w	800f074 <ai_platform_network_process+0x51c>
 800ed8c:	9e01      	ldr	r6, [sp, #4]
 800ed8e:	2700      	movs	r7, #0
 800ed90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 80d3 	beq.w	800ef40 <ai_platform_network_process+0x3e8>
 800ed9a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800ed9e:	2c00      	cmp	r4, #0
 800eda0:	f000 80ce 	beq.w	800ef40 <ai_platform_network_process+0x3e8>
 800eda4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eda8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800edac:	f8d3 8000 	ldr.w	r8, [r3]
 800edb0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800edb4:	f000 819f 	beq.w	800f0f6 <ai_platform_network_process+0x59e>
 800edb8:	69a3      	ldr	r3, [r4, #24]
 800edba:	2101      	movs	r1, #1
 800edbc:	4630      	mov	r0, r6
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	9301      	str	r3, [sp, #4]
 800edc2:	f7fe fd11 	bl	800d7e8 <ai_buffer_get_size>
 800edc6:	9b01      	ldr	r3, [sp, #4]
 800edc8:	4283      	cmp	r3, r0
 800edca:	f0c0 8153 	bcc.w	800f074 <ai_platform_network_process+0x51c>
 800edce:	68e0      	ldr	r0, [r4, #12]
 800edd0:	69b1      	ldr	r1, [r6, #24]
 800edd2:	68c2      	ldr	r2, [r0, #12]
 800edd4:	68cb      	ldr	r3, [r1, #12]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	f040 814c 	bne.w	800f074 <ai_platform_network_process+0x51c>
 800eddc:	6882      	ldr	r2, [r0, #8]
 800edde:	688b      	ldr	r3, [r1, #8]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	f040 8147 	bne.w	800f074 <ai_platform_network_process+0x51c>
 800ede6:	6842      	ldr	r2, [r0, #4]
 800ede8:	684b      	ldr	r3, [r1, #4]
 800edea:	429a      	cmp	r2, r3
 800edec:	f040 8142 	bne.w	800f074 <ai_platform_network_process+0x51c>
 800edf0:	69a3      	ldr	r3, [r4, #24]
 800edf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800edf6:	f002 fa75 	bl	80112e4 <ai_array_get_data_byte_size>
 800edfa:	9001      	str	r0, [sp, #4]
 800edfc:	4620      	mov	r0, r4
 800edfe:	f002 f9c7 	bl	8011190 <get_tensor_byte_size>
 800ee02:	9b01      	ldr	r3, [sp, #4]
 800ee04:	4283      	cmp	r3, r0
 800ee06:	f0c0 8135 	bcc.w	800f074 <ai_platform_network_process+0x51c>
 800ee0a:	69a3      	ldr	r3, [r4, #24]
 800ee0c:	6818      	ldr	r0, [r3, #0]
 800ee0e:	f002 f9d5 	bl	80111bc <ai_array_to_buffer_fmt>
 800ee12:	6833      	ldr	r3, [r6, #0]
 800ee14:	4058      	eors	r0, r3
 800ee16:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800ee1a:	f040 815c 	bne.w	800f0d6 <ai_platform_network_process+0x57e>
 800ee1e:	6873      	ldr	r3, [r6, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	f000 8150 	beq.w	800f0c6 <ai_platform_network_process+0x56e>
 800ee26:	69b3      	ldr	r3, [r6, #24]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f000 815b 	beq.w	800f0e6 <ai_platform_network_process+0x58e>
 800ee30:	9a02      	ldr	r2, [sp, #8]
 800ee32:	4620      	mov	r0, r4
 800ee34:	3701      	adds	r7, #1
 800ee36:	361c      	adds	r6, #28
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	bf38      	it	cc
 800ee3c:	461a      	movcc	r2, r3
 800ee3e:	9202      	str	r2, [sp, #8]
 800ee40:	f002 f9a6 	bl	8011190 <get_tensor_byte_size>
 800ee44:	f8ca 0008 	str.w	r0, [sl, #8]
 800ee48:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	fb00 f303 	mul.w	r3, r0, r3
 800ee52:	f8ca 300c 	str.w	r3, [sl, #12]
 800ee56:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800ee5a:	440b      	add	r3, r1
 800ee5c:	f8ca 1004 	str.w	r1, [sl, #4]
 800ee60:	f848 300b 	str.w	r3, [r8, fp]
 800ee64:	69a0      	ldr	r0, [r4, #24]
 800ee66:	6803      	ldr	r3, [r0, #0]
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	d464      	bmi.n	800ef36 <ai_platform_network_process+0x3de>
 800ee6c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ee70:	1a9b      	subs	r3, r3, r2
 800ee72:	4419      	add	r1, r3
 800ee74:	6081      	str	r1, [r0, #8]
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	f8da 2004 	ldr.w	r2, [sl, #4]
 800ee7c:	60da      	str	r2, [r3, #12]
 800ee7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ee82:	429f      	cmp	r7, r3
 800ee84:	d384      	bcc.n	800ed90 <ai_platform_network_process+0x238>
 800ee86:	e05b      	b.n	800ef40 <ai_platform_network_process+0x3e8>
 800ee88:	e7fe      	b.n	800ee88 <ai_platform_network_process+0x330>
 800ee8a:	68ea      	ldr	r2, [r5, #12]
 800ee8c:	616b      	str	r3, [r5, #20]
 800ee8e:	f002 0203 	and.w	r2, r2, #3
 800ee92:	2a03      	cmp	r2, #3
 800ee94:	d039      	beq.n	800ef0a <ai_platform_network_process+0x3b2>
 800ee96:	2230      	movs	r2, #48	; 0x30
 800ee98:	2111      	movs	r1, #17
 800ee9a:	f105 0010 	add.w	r0, r5, #16
 800ee9e:	2400      	movs	r4, #0
 800eea0:	f000 f940 	bl	800f124 <core_set_error>
 800eea4:	4620      	mov	r0, r4
 800eea6:	b005      	add	sp, #20
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	4a0c      	ldr	r2, [pc, #48]	; (800eee0 <ai_platform_network_process+0x388>)
 800eeae:	2301      	movs	r3, #1
 800eeb0:	6093      	str	r3, [r2, #8]
 800eeb2:	6893      	ldr	r3, [r2, #8]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1fc      	bne.n	800eeb2 <ai_platform_network_process+0x35a>
 800eeb8:	4b07      	ldr	r3, [pc, #28]	; (800eed8 <ai_platform_network_process+0x380>)
 800eeba:	6013      	str	r3, [r2, #0]
 800eebc:	4b07      	ldr	r3, [pc, #28]	; (800eedc <ai_platform_network_process+0x384>)
 800eebe:	6812      	ldr	r2, [r2, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	f43f aeb6 	beq.w	800ec32 <ai_platform_network_process+0xda>
 800eec6:	e7fe      	b.n	800eec6 <ai_platform_network_process+0x36e>
 800eec8:	f8b8 3000 	ldrh.w	r3, [r8]
 800eecc:	429f      	cmp	r7, r3
 800eece:	f4ff aed6 	bcc.w	800ec7e <ai_platform_network_process+0x126>
 800eed2:	e74b      	b.n	800ed6c <ai_platform_network_process+0x214>
 800eed4:	58024000 	.word	0x58024000
 800eed8:	f407a5c2 	.word	0xf407a5c2
 800eedc:	b5e8b5cd 	.word	0xb5e8b5cd
 800eee0:	40023000 	.word	0x40023000
 800eee4:	4a88      	ldr	r2, [pc, #544]	; (800f108 <ai_platform_network_process+0x5b0>)
 800eee6:	2301      	movs	r3, #1
 800eee8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800eeec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1fb      	bne.n	800eeec <ai_platform_network_process+0x394>
 800eef4:	4b85      	ldr	r3, [pc, #532]	; (800f10c <ai_platform_network_process+0x5b4>)
 800eef6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800eefa:	4b85      	ldr	r3, [pc, #532]	; (800f110 <ai_platform_network_process+0x5b8>)
 800eefc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ef00:	429a      	cmp	r2, r3
 800ef02:	f43f ae96 	beq.w	800ec32 <ai_platform_network_process+0xda>
 800ef06:	e7fe      	b.n	800ef06 <ai_platform_network_process+0x3ae>
 800ef08:	9d03      	ldr	r5, [sp, #12]
 800ef0a:	2400      	movs	r4, #0
 800ef0c:	2217      	movs	r2, #23
 800ef0e:	2112      	movs	r1, #18
 800ef10:	f105 0010 	add.w	r0, r5, #16
 800ef14:	f000 f906 	bl	800f124 <core_set_error>
 800ef18:	4620      	mov	r0, r4
 800ef1a:	b005      	add	sp, #20
 800ef1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef20:	462c      	mov	r4, r5
 800ef22:	e7bf      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800ef24:	9d03      	ldr	r5, [sp, #12]
 800ef26:	2218      	movs	r2, #24
 800ef28:	2112      	movs	r1, #18
 800ef2a:	2400      	movs	r4, #0
 800ef2c:	f105 0010 	add.w	r0, r5, #16
 800ef30:	f000 f8f8 	bl	800f124 <core_set_error>
 800ef34:	e7b6      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800ef36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ef3a:	429f      	cmp	r7, r3
 800ef3c:	f4ff af28 	bcc.w	800ed90 <ai_platform_network_process+0x238>
 800ef40:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800ef44:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800ef46:	82ab      	strh	r3, [r5, #20]
 800ef48:	2a00      	cmp	r2, #0
 800ef4a:	f040 808d 	bne.w	800f068 <ai_platform_network_process+0x510>
 800ef4e:	4616      	mov	r6, r2
 800ef50:	4617      	mov	r7, r2
 800ef52:	8aec      	ldrh	r4, [r5, #22]
 800ef54:	429c      	cmp	r4, r3
 800ef56:	d2a5      	bcs.n	800eea4 <ai_platform_network_process+0x34c>
 800ef58:	46ab      	mov	fp, r5
 800ef5a:	2e00      	cmp	r6, #0
 800ef5c:	d030      	beq.n	800efc0 <ai_platform_network_process+0x468>
 800ef5e:	f04f 0800 	mov.w	r8, #0
 800ef62:	e014      	b.n	800ef8e <ai_platform_network_process+0x436>
 800ef64:	6882      	ldr	r2, [r0, #8]
 800ef66:	68c5      	ldr	r5, [r0, #12]
 800ef68:	6863      	ldr	r3, [r4, #4]
 800ef6a:	1b52      	subs	r2, r2, r5
 800ef6c:	4413      	add	r3, r2
 800ef6e:	6083      	str	r3, [r0, #8]
 800ef70:	698b      	ldr	r3, [r1, #24]
 800ef72:	6862      	ldr	r2, [r4, #4]
 800ef74:	60da      	str	r2, [r3, #12]
 800ef76:	f859 200a 	ldr.w	r2, [r9, sl]
 800ef7a:	f108 0801 	add.w	r8, r8, #1
 800ef7e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800ef82:	440b      	add	r3, r1
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d301      	bcc.n	800ef8c <ai_platform_network_process+0x434>
 800ef88:	68e3      	ldr	r3, [r4, #12]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	6063      	str	r3, [r4, #4]
 800ef8e:	8833      	ldrh	r3, [r6, #0]
 800ef90:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800ef94:	4543      	cmp	r3, r8
 800ef96:	d913      	bls.n	800efc0 <ai_platform_network_process+0x468>
 800ef98:	6873      	ldr	r3, [r6, #4]
 800ef9a:	b18b      	cbz	r3, 800efc0 <ai_platform_network_process+0x468>
 800ef9c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800efa0:	b171      	cbz	r1, 800efc0 <ai_platform_network_process+0x468>
 800efa2:	6988      	ldr	r0, [r1, #24]
 800efa4:	68b2      	ldr	r2, [r6, #8]
 800efa6:	6803      	ldr	r3, [r0, #0]
 800efa8:	f8d2 9000 	ldr.w	r9, [r2]
 800efac:	009d      	lsls	r5, r3, #2
 800efae:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800efb2:	d5d7      	bpl.n	800ef64 <ai_platform_network_process+0x40c>
 800efb4:	6880      	ldr	r0, [r0, #8]
 800efb6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800efba:	f003 fa75 	bl	80124a8 <memcpy>
 800efbe:	e7da      	b.n	800ef76 <ai_platform_network_process+0x41e>
 800efc0:	4658      	mov	r0, fp
 800efc2:	f001 ff6f 	bl	8010ea4 <ai_layers_forward_all>
 800efc6:	2f00      	cmp	r7, #0
 800efc8:	d03f      	beq.n	800f04a <ai_platform_network_process+0x4f2>
 800efca:	2400      	movs	r4, #0
 800efcc:	e016      	b.n	800effc <ai_platform_network_process+0x4a4>
 800efce:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800efd2:	f859 100a 	ldr.w	r1, [r9, sl]
 800efd6:	4413      	add	r3, r2
 800efd8:	428b      	cmp	r3, r1
 800efda:	d302      	bcc.n	800efe2 <ai_platform_network_process+0x48a>
 800efdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800efe0:	1acb      	subs	r3, r1, r3
 800efe2:	f8c8 3004 	str.w	r3, [r8, #4]
 800efe6:	6981      	ldr	r1, [r0, #24]
 800efe8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800efec:	1b52      	subs	r2, r2, r5
 800efee:	4413      	add	r3, r2
 800eff0:	608b      	str	r3, [r1, #8]
 800eff2:	6983      	ldr	r3, [r0, #24]
 800eff4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800eff8:	60da      	str	r2, [r3, #12]
 800effa:	3401      	adds	r4, #1
 800effc:	883b      	ldrh	r3, [r7, #0]
 800effe:	42a3      	cmp	r3, r4
 800f000:	d923      	bls.n	800f04a <ai_platform_network_process+0x4f2>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	b30b      	cbz	r3, 800f04a <ai_platform_network_process+0x4f2>
 800f006:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f00a:	b1f0      	cbz	r0, 800f04a <ai_platform_network_process+0x4f2>
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800f012:	6983      	ldr	r3, [r0, #24]
 800f014:	f8d2 9000 	ldr.w	r9, [r2]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800f01e:	0092      	lsls	r2, r2, #2
 800f020:	d5d5      	bpl.n	800efce <ai_platform_network_process+0x476>
 800f022:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800f026:	6899      	ldr	r1, [r3, #8]
 800f028:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f02c:	f003 fa3c 	bl	80124a8 <memcpy>
 800f030:	f859 200a 	ldr.w	r2, [r9, sl]
 800f034:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800f038:	440b      	add	r3, r1
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d302      	bcc.n	800f044 <ai_platform_network_process+0x4ec>
 800f03e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	f8c8 3004 	str.w	r3, [r8, #4]
 800f048:	e7d7      	b.n	800effa <ai_platform_network_process+0x4a2>
 800f04a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800f04e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800f052:	3401      	adds	r4, #1
 800f054:	b2a4      	uxth	r4, r4
 800f056:	42a3      	cmp	r3, r4
 800f058:	f8ab 4016 	strh.w	r4, [fp, #22]
 800f05c:	f63f af7d 	bhi.w	800ef5a <ai_platform_network_process+0x402>
 800f060:	4620      	mov	r0, r4
 800f062:	b005      	add	sp, #20
 800f064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f068:	2a01      	cmp	r2, #1
 800f06a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800f06c:	d029      	beq.n	800f0c2 <ai_platform_network_process+0x56a>
 800f06e:	f106 070c 	add.w	r7, r6, #12
 800f072:	e76e      	b.n	800ef52 <ai_platform_network_process+0x3fa>
 800f074:	2218      	movs	r2, #24
 800f076:	2113      	movs	r1, #19
 800f078:	f105 0010 	add.w	r0, r5, #16
 800f07c:	2400      	movs	r4, #0
 800f07e:	f000 f851 	bl	800f124 <core_set_error>
 800f082:	e70f      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f084:	9d03      	ldr	r5, [sp, #12]
 800f086:	4604      	mov	r4, r0
 800f088:	2217      	movs	r2, #23
 800f08a:	2112      	movs	r1, #18
 800f08c:	f105 0010 	add.w	r0, r5, #16
 800f090:	f000 f848 	bl	800f124 <core_set_error>
 800f094:	e706      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f096:	9d03      	ldr	r5, [sp, #12]
 800f098:	2219      	movs	r2, #25
 800f09a:	2112      	movs	r1, #18
 800f09c:	2400      	movs	r4, #0
 800f09e:	f105 0010 	add.w	r0, r5, #16
 800f0a2:	f000 f83f 	bl	800f124 <core_set_error>
 800f0a6:	e6fd      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f0a8:	9d03      	ldr	r5, [sp, #12]
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	2221      	movs	r2, #33	; 0x21
 800f0ae:	2112      	movs	r1, #18
 800f0b0:	f105 0010 	add.w	r0, r5, #16
 800f0b4:	f000 f836 	bl	800f124 <core_set_error>
 800f0b8:	e6f4      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f0ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800f0be:	82ab      	strh	r3, [r5, #20]
 800f0c0:	e742      	b.n	800ef48 <ai_platform_network_process+0x3f0>
 800f0c2:	2700      	movs	r7, #0
 800f0c4:	e745      	b.n	800ef52 <ai_platform_network_process+0x3fa>
 800f0c6:	4604      	mov	r4, r0
 800f0c8:	2217      	movs	r2, #23
 800f0ca:	2113      	movs	r1, #19
 800f0cc:	f105 0010 	add.w	r0, r5, #16
 800f0d0:	f000 f828 	bl	800f124 <core_set_error>
 800f0d4:	e6e6      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f0d6:	2219      	movs	r2, #25
 800f0d8:	2113      	movs	r1, #19
 800f0da:	f105 0010 	add.w	r0, r5, #16
 800f0de:	2400      	movs	r4, #0
 800f0e0:	f000 f820 	bl	800f124 <core_set_error>
 800f0e4:	e6de      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	2221      	movs	r2, #33	; 0x21
 800f0ea:	2113      	movs	r1, #19
 800f0ec:	f105 0010 	add.w	r0, r5, #16
 800f0f0:	f000 f818 	bl	800f124 <core_set_error>
 800f0f4:	e6d6      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f0f6:	2217      	movs	r2, #23
 800f0f8:	2113      	movs	r1, #19
 800f0fa:	f105 0010 	add.w	r0, r5, #16
 800f0fe:	4654      	mov	r4, sl
 800f100:	f000 f810 	bl	800f124 <core_set_error>
 800f104:	e6ce      	b.n	800eea4 <ai_platform_network_process+0x34c>
 800f106:	bf00      	nop
 800f108:	58024000 	.word	0x58024000
 800f10c:	f407a5c2 	.word	0xf407a5c2
 800f110:	b5e8b5cd 	.word	0xb5e8b5cd

0800f114 <core_init>:
 800f114:	2001      	movs	r0, #1
 800f116:	4770      	bx	lr

0800f118 <core_get_error>:
 800f118:	4603      	mov	r3, r0
 800f11a:	2200      	movs	r2, #0
 800f11c:	6800      	ldr	r0, [r0, #0]
 800f11e:	601a      	str	r2, [r3, #0]
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop

0800f124 <core_set_error>:
 800f124:	4603      	mov	r3, r0
 800f126:	7800      	ldrb	r0, [r0, #0]
 800f128:	b108      	cbz	r0, 800f12e <core_set_error+0xa>
 800f12a:	2000      	movs	r0, #0
 800f12c:	4770      	bx	lr
 800f12e:	7019      	strb	r1, [r3, #0]
 800f130:	2001      	movs	r0, #1
 800f132:	6819      	ldr	r1, [r3, #0]
 800f134:	f362 211f 	bfi	r1, r2, #8, #24
 800f138:	6019      	str	r1, [r3, #0]
 800f13a:	4770      	bx	lr

0800f13c <func_dummy>:
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop

0800f140 <ai_conv2d_stripe_f32.constprop.0>:
 800f140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f144:	ed2d 8b0e 	vpush	{d8-d14}
 800f148:	b09d      	sub	sp, #116	; 0x74
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800f150:	66f8      	str	r0, [r7, #108]	; 0x6c
 800f152:	f1b9 0f01 	cmp.w	r9, #1
 800f156:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800f15a:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800f15e:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800f162:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800f166:	6579      	str	r1, [r7, #84]	; 0x54
 800f168:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800f16c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800f170:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800f174:	663b      	str	r3, [r7, #96]	; 0x60
 800f176:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800f17a:	f000 812f 	beq.w	800f3dc <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800f17e:	45b1      	cmp	r9, r6
 800f180:	f000 8278 	beq.w	800f674 <ai_conv2d_stripe_f32.constprop.0+0x534>
 800f184:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800f188:	2900      	cmp	r1, #0
 800f18a:	f000 8114 	beq.w	800f3b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800f18e:	eba0 0803 	sub.w	r8, r0, r3
 800f192:	1898      	adds	r0, r3, r2
 800f194:	eddf 6a90 	vldr	s13, [pc, #576]	; 800f3d8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800f198:	3801      	subs	r0, #1
 800f19a:	fb93 f1f2 	sdiv	r1, r3, r2
 800f19e:	fb90 f0f2 	sdiv	r0, r0, r2
 800f1a2:	fb02 3111 	mls	r1, r2, r1, r3
 800f1a6:	eba2 0a01 	sub.w	sl, r2, r1
 800f1aa:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800f1ae:	fb01 f100 	mul.w	r1, r1, r0
 800f1b2:	fb9a f0f2 	sdiv	r0, sl, r2
 800f1b6:	fb02 a010 	mls	r0, r2, r0, sl
 800f1ba:	62b9      	str	r1, [r7, #40]	; 0x28
 800f1bc:	4403      	add	r3, r0
 800f1be:	eba8 0100 	sub.w	r1, r8, r0
 800f1c2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f1c6:	4463      	add	r3, ip
 800f1c8:	4411      	add	r1, r2
 800f1ca:	fb00 f303 	mul.w	r3, r0, r3
 800f1ce:	3901      	subs	r1, #1
 800f1d0:	fbb6 f4f9 	udiv	r4, r6, r9
 800f1d4:	623b      	str	r3, [r7, #32]
 800f1d6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800f1da:	fb00 f302 	mul.w	r3, r0, r2
 800f1de:	f8c7 a014 	str.w	sl, [r7, #20]
 800f1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1e4:	fb0e f306 	mul.w	r3, lr, r6
 800f1e8:	1b1b      	subs	r3, r3, r4
 800f1ea:	fb91 fbf2 	sdiv	fp, r1, r2
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	eba5 020b 	sub.w	r2, r5, fp
 800f1f4:	00b1      	lsls	r1, r6, #2
 800f1f6:	46dc      	mov	ip, fp
 800f1f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f1fe:	61f9      	str	r1, [r7, #28]
 800f200:	fb04 f303 	mul.w	r3, r4, r3
 800f204:	fb02 f303 	mul.w	r3, r2, r3
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	627b      	str	r3, [r7, #36]	; 0x24
 800f20c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f210:	fbb3 f3f9 	udiv	r3, r3, r9
 800f214:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	633b      	str	r3, [r7, #48]	; 0x30
 800f21e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f222:	f1c3 0800 	rsb	r8, r3, #0
 800f226:	ebae 0303 	sub.w	r3, lr, r3
 800f22a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f22c:	2300      	movs	r3, #0
 800f22e:	653b      	str	r3, [r7, #80]	; 0x50
 800f230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f234:	2b00      	cmp	r3, #0
 800f236:	f2c0 80c4 	blt.w	800f3c2 <ai_conv2d_stripe_f32.constprop.0+0x282>
 800f23a:	2000      	movs	r0, #0
 800f23c:	4673      	mov	r3, lr
 800f23e:	4672      	mov	r2, lr
 800f240:	4601      	mov	r1, r0
 800f242:	3b01      	subs	r3, #1
 800f244:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f246:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800f24a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f24e:	fb93 f3fe 	sdiv	r3, r3, lr
 800f252:	4423      	add	r3, r4
 800f254:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800f256:	fb0a 4303 	mla	r3, sl, r3, r4
 800f25a:	fb92 f4fe 	sdiv	r4, r2, lr
 800f25e:	fb0e 2214 	mls	r2, lr, r4, r2
 800f262:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800f266:	4444      	add	r4, r8
 800f268:	42ac      	cmp	r4, r5
 800f26a:	bf94      	ite	ls
 800f26c:	ebc1 0104 	rsbls	r1, r1, r4
 800f270:	ebc1 0105 	rsbhi	r1, r1, r5
 800f274:	6a3c      	ldr	r4, [r7, #32]
 800f276:	1a89      	subs	r1, r1, r2
 800f278:	4471      	add	r1, lr
 800f27a:	3901      	subs	r1, #1
 800f27c:	fb91 f6fe 	sdiv	r6, r1, lr
 800f280:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800f284:	4421      	add	r1, r4
 800f286:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800f288:	4401      	add	r1, r0
 800f28a:	69f8      	ldr	r0, [r7, #28]
 800f28c:	4411      	add	r1, r2
 800f28e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f290:	fb00 2201 	mla	r2, r0, r1, r2
 800f294:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f296:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f298:	460a      	mov	r2, r1
 800f29a:	2900      	cmp	r1, #0
 800f29c:	bf08      	it	eq
 800f29e:	4622      	moveq	r2, r4
 800f2a0:	42a2      	cmp	r2, r4
 800f2a2:	637a      	str	r2, [r7, #52]	; 0x34
 800f2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2a6:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800f2aa:	fb0e 2116 	mls	r1, lr, r6, r2
 800f2ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f2b2:	1b92      	subs	r2, r2, r6
 800f2b4:	f1b9 0f00 	cmp.w	r9, #0
 800f2b8:	d066      	beq.n	800f388 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800f2ba:	fb0a f202 	mul.w	r2, sl, r2
 800f2be:	fb00 f101 	mul.w	r1, r0, r1
 800f2c2:	643a      	str	r2, [r7, #64]	; 0x40
 800f2c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800f2c8:	6479      	str	r1, [r7, #68]	; 0x44
 800f2ca:	4591      	cmp	r9, r2
 800f2cc:	d85c      	bhi.n	800f388 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800f2ce:	2500      	movs	r5, #0
 800f2d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f2d2:	46ab      	mov	fp, r5
 800f2d4:	3a01      	subs	r2, #1
 800f2d6:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800f2da:	61ba      	str	r2, [r7, #24]
 800f2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2de:	f04f 0800 	mov.w	r8, #0
 800f2e2:	f8c7 b008 	str.w	fp, [r7, #8]
 800f2e6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f2ea:	63ba      	str	r2, [r7, #56]	; 0x38
 800f2ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f2ee:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f2f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f2f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2f6:	f1bc 0f00 	cmp.w	ip, #0
 800f2fa:	ecf2 7a01 	vldmia	r2!, {s15}
 800f2fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f302:	63ba      	str	r2, [r7, #56]	; 0x38
 800f304:	dd21      	ble.n	800f34a <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800f306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f308:	2100      	movs	r1, #0
 800f30a:	2e00      	cmp	r6, #0
 800f30c:	dd16      	ble.n	800f33c <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800f30e:	2000      	movs	r0, #0
 800f310:	eb02 040a 	add.w	r4, r2, sl
 800f314:	4294      	cmp	r4, r2
 800f316:	d90c      	bls.n	800f332 <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800f318:	4696      	mov	lr, r2
 800f31a:	469b      	mov	fp, r3
 800f31c:	ecbe 6a01 	vldmia	lr!, {s12}
 800f320:	ecfb 5a01 	vldmia	fp!, {s11}
 800f324:	4574      	cmp	r4, lr
 800f326:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f32a:	d8f7      	bhi.n	800f31c <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800f32c:	697c      	ldr	r4, [r7, #20]
 800f32e:	4423      	add	r3, r4
 800f330:	4422      	add	r2, r4
 800f332:	3001      	adds	r0, #1
 800f334:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800f336:	4286      	cmp	r6, r0
 800f338:	4422      	add	r2, r4
 800f33a:	d1e9      	bne.n	800f310 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800f33c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f33e:	3101      	adds	r1, #1
 800f340:	4402      	add	r2, r0
 800f342:	458c      	cmp	ip, r1
 800f344:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f346:	4403      	add	r3, r0
 800f348:	d1df      	bne.n	800f30a <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800f34a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f34c:	f108 0801 	add.w	r8, r8, #1
 800f350:	ece2 7a01 	vstmia	r2!, {s15}
 800f354:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f358:	4413      	add	r3, r2
 800f35a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f35c:	4542      	cmp	r2, r8
 800f35e:	d8c9      	bhi.n	800f2f4 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800f360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f362:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800f366:	4452      	add	r2, sl
 800f368:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800f36c:	f10b 0b01 	add.w	fp, fp, #1
 800f370:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f372:	69ba      	ldr	r2, [r7, #24]
 800f374:	4589      	cmp	r9, r1
 800f376:	bf88      	it	hi
 800f378:	2200      	movhi	r2, #0
 800f37a:	45d9      	cmp	r9, fp
 800f37c:	f102 0201 	add.w	r2, r2, #1
 800f380:	4415      	add	r5, r2
 800f382:	d1ab      	bne.n	800f2dc <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800f384:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800f388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f38a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f38e:	440a      	add	r2, r1
 800f390:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800f394:	3301      	adds	r3, #1
 800f396:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f39a:	653b      	str	r3, [r7, #80]	; 0x50
 800f39c:	4411      	add	r1, r2
 800f39e:	eba8 0802 	sub.w	r8, r8, r2
 800f3a2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800f3a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3a8:	1a8a      	subs	r2, r1, r2
 800f3aa:	65ba      	str	r2, [r7, #88]	; 0x58
 800f3ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	f47f af3d 	bne.w	800f230 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800f3b6:	3774      	adds	r7, #116	; 0x74
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	ecbd 8b0e 	vpop	{d8-d14}
 800f3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3c2:	fb98 f2fe 	sdiv	r2, r8, lr
 800f3c6:	fb0e 8212 	mls	r2, lr, r2, r8
 800f3ca:	4641      	mov	r1, r8
 800f3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	ebae 0202 	sub.w	r2, lr, r2
 800f3d4:	e735      	b.n	800f242 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800f3d6:	bf00      	nop
 800f3d8:	00000000 	.word	0x00000000
 800f3dc:	fb0e f102 	mul.w	r1, lr, r2
 800f3e0:	2901      	cmp	r1, #1
 800f3e2:	f47f aecf 	bne.w	800f184 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800f3e6:	1ac2      	subs	r2, r0, r3
 800f3e8:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800f3ec:	00b0      	lsls	r0, r6, #2
 800f3ee:	eb0c 0103 	add.w	r1, ip, r3
 800f3f2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f3f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f3f6:	63b8      	str	r0, [r7, #56]	; 0x38
 800f3f8:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800f3fc:	fb00 f004 	mul.w	r0, r0, r4
 800f400:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800f402:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f406:	fb00 4101 	mla	r1, r0, r1, r4
 800f40a:	65b9      	str	r1, [r7, #88]	; 0x58
 800f40c:	f080 8263 	bcs.w	800f8d6 <ai_conv2d_stripe_f32.constprop.0+0x796>
 800f410:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800f414:	2a00      	cmp	r2, #0
 800f416:	d0ce      	beq.n	800f3b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800f418:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f41c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800f420:	fb05 f202 	mul.w	r2, r5, r2
 800f424:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800f3d8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800f428:	fb00 f303 	mul.w	r3, r0, r3
 800f42c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f42e:	fb06 f302 	mul.w	r3, r6, r2
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	643b      	str	r3, [r7, #64]	; 0x40
 800f436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f438:	fb03 f306 	mul.w	r3, r3, r6
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24
 800f440:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f444:	fb03 f306 	mul.w	r3, r3, r6
 800f448:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f44c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f44e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f456:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f45a:	2300      	movs	r3, #0
 800f45c:	653b      	str	r3, [r7, #80]	; 0x50
 800f45e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f460:	2b00      	cmp	r3, #0
 800f462:	f000 8104 	beq.w	800f66e <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800f466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f468:	ecf3 6a01 	vldmia	r3!, {s13}
 800f46c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f46e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 80e8 	beq.w	800f648 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800f478:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f47c:	f04f 0b00 	mov.w	fp, #0
 800f480:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800f484:	425d      	negs	r5, r3
 800f486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f488:	657b      	str	r3, [r7, #84]	; 0x54
 800f48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f48c:	647b      	str	r3, [r7, #68]	; 0x44
 800f48e:	f1b9 0f00 	cmp.w	r9, #0
 800f492:	f2c0 8219 	blt.w	800f8c8 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800f496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f498:	2300      	movs	r3, #0
 800f49a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f49c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800f49e:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800f4a0:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800f4a4:	fb02 0c06 	mla	ip, r2, r6, r0
 800f4a8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f4ac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f4b0:	4428      	add	r0, r5
 800f4b2:	42a0      	cmp	r0, r4
 800f4b4:	bf94      	ite	ls
 800f4b6:	ebc3 0300 	rsbls	r3, r3, r0
 800f4ba:	ebc3 0304 	rsbhi	r3, r3, r4
 800f4be:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f4c2:	1ac4      	subs	r4, r0, r3
 800f4c4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800f4c8:	1ac0      	subs	r0, r0, r3
 800f4ca:	fb02 f303 	mul.w	r3, r2, r3
 800f4ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4d0:	2a00      	cmp	r2, #0
 800f4d2:	f340 81f6 	ble.w	800f8c2 <ai_conv2d_stripe_f32.constprop.0+0x782>
 800f4d6:	fb06 f204 	mul.w	r2, r6, r4
 800f4da:	f023 040f 	bic.w	r4, r3, #15
 800f4de:	eeb0 7a66 	vmov.f32	s14, s13
 800f4e2:	637a      	str	r2, [r7, #52]	; 0x34
 800f4e4:	fb06 f200 	mul.w	r2, r6, r0
 800f4e8:	1e60      	subs	r0, r4, #1
 800f4ea:	2600      	movs	r6, #0
 800f4ec:	0900      	lsrs	r0, r0, #4
 800f4ee:	633a      	str	r2, [r7, #48]	; 0x30
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	0102      	lsls	r2, r0, #4
 800f4f4:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800f4f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f4fa:	4662      	mov	r2, ip
 800f4fc:	2c00      	cmp	r4, #0
 800f4fe:	f340 81e8 	ble.w	800f8d2 <ai_conv2d_stripe_f32.constprop.0+0x792>
 800f502:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800f506:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800f50a:	f04f 0800 	mov.w	r8, #0
 800f50e:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800f512:	f108 0810 	add.w	r8, r8, #16
 800f516:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800f51a:	3040      	adds	r0, #64	; 0x40
 800f51c:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800f520:	45a0      	cmp	r8, r4
 800f522:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f526:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800f52a:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800f52e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800f532:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800f536:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f53a:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800f53e:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800f542:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800f546:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800f54a:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800f54e:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800f552:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f556:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800f55a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800f55e:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800f562:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800f566:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800f56a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800f56e:	eeee 7a25 	vfma.f32	s15, s28, s11
 800f572:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800f576:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800f57a:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800f57e:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800f582:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800f586:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800f58a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800f58e:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800f592:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800f596:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800f59a:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800f59e:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800f5a2:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800f5a6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800f5aa:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800f5ae:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800f5b2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800f5b6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800f5ba:	eee9 7a89 	vfma.f32	s15, s19, s18
 800f5be:	eee8 7a88 	vfma.f32	s15, s17, s16
 800f5c2:	eee0 7a20 	vfma.f32	s15, s0, s1
 800f5c6:	eee1 7a21 	vfma.f32	s15, s2, s3
 800f5ca:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f5ce:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f5d2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f5d6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f5da:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5de:	db96      	blt.n	800f50e <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800f5e0:	4471      	add	r1, lr
 800f5e2:	4472      	add	r2, lr
 800f5e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5e6:	4283      	cmp	r3, r0
 800f5e8:	dd11      	ble.n	800f60e <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800f5ea:	4684      	mov	ip, r0
 800f5ec:	468a      	mov	sl, r1
 800f5ee:	4690      	mov	r8, r2
 800f5f0:	f10c 0c01 	add.w	ip, ip, #1
 800f5f4:	ecf8 5a01 	vldmia	r8!, {s11}
 800f5f8:	ecfa 7a01 	vldmia	sl!, {s15}
 800f5fc:	4563      	cmp	r3, ip
 800f5fe:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f602:	d1f5      	bne.n	800f5f0 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800f604:	1a18      	subs	r0, r3, r0
 800f606:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f60a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800f60e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f610:	3601      	adds	r6, #1
 800f612:	4401      	add	r1, r0
 800f614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f616:	4402      	add	r2, r0
 800f618:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f61a:	42b0      	cmp	r0, r6
 800f61c:	f47f af6e 	bne.w	800f4fc <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800f620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f622:	f10b 0b01 	add.w	fp, fp, #1
 800f626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f62a:	ed83 7a00 	vstr	s14, [r3]
 800f62e:	440b      	add	r3, r1
 800f630:	4491      	add	r9, r2
 800f632:	1aad      	subs	r5, r5, r2
 800f634:	647b      	str	r3, [r7, #68]	; 0x44
 800f636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f63a:	4413      	add	r3, r2
 800f63c:	657b      	str	r3, [r7, #84]	; 0x54
 800f63e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f642:	455b      	cmp	r3, fp
 800f644:	f47f af23 	bne.w	800f48e <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800f648:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f64a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64e:	440a      	add	r2, r1
 800f650:	3301      	adds	r3, #1
 800f652:	66ba      	str	r2, [r7, #104]	; 0x68
 800f654:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f656:	653b      	str	r3, [r7, #80]	; 0x50
 800f658:	3204      	adds	r2, #4
 800f65a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f65c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800f660:	429a      	cmp	r2, r3
 800f662:	f43f aea8 	beq.w	800f3b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800f666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f668:	2b00      	cmp	r3, #0
 800f66a:	f47f aefc 	bne.w	800f466 <ai_conv2d_stripe_f32.constprop.0+0x326>
 800f66e:	eef0 6a46 	vmov.f32	s13, s12
 800f672:	e6fc      	b.n	800f46e <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800f674:	fb0e f102 	mul.w	r1, lr, r2
 800f678:	2901      	cmp	r1, #1
 800f67a:	f47f ad83 	bne.w	800f184 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800f67e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f682:	2a00      	cmp	r2, #0
 800f684:	f43f ae97 	beq.w	800f3b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800f688:	eb0c 0203 	add.w	r2, ip, r3
 800f68c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800f690:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800f694:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800f3d8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800f698:	fb01 f202 	mul.w	r2, r1, r2
 800f69c:	1ac1      	subs	r1, r0, r3
 800f69e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800f6a2:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800f6a6:	61fa      	str	r2, [r7, #28]
 800f6a8:	1a1a      	subs	r2, r3, r0
 800f6aa:	64f9      	str	r1, [r7, #76]	; 0x4c
 800f6ac:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800f6b0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800f6b4:	442a      	add	r2, r5
 800f6b6:	fb03 f301 	mul.w	r3, r3, r1
 800f6ba:	fb01 f202 	mul.w	r2, r1, r2
 800f6be:	64bb      	str	r3, [r7, #72]	; 0x48
 800f6c0:	0093      	lsls	r3, r2, #2
 800f6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f6c8:	fbb3 f3f6 	udiv	r3, r3, r6
 800f6cc:	61bb      	str	r3, [r7, #24]
 800f6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f6da:	f1c3 0b00 	rsb	fp, r3, #0
 800f6de:	00f3      	lsls	r3, r6, #3
 800f6e0:	623b      	str	r3, [r7, #32]
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	653b      	str	r3, [r7, #80]	; 0x50
 800f6e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f2c0 80e3 	blt.w	800f8b6 <ai_conv2d_stripe_f32.constprop.0+0x776>
 800f6f0:	2500      	movs	r5, #0
 800f6f2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f6f4:	462b      	mov	r3, r5
 800f6f6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f6fa:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f6fe:	445a      	add	r2, fp
 800f700:	69fc      	ldr	r4, [r7, #28]
 800f702:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800f704:	4282      	cmp	r2, r0
 800f706:	bf28      	it	cs
 800f708:	4602      	movcs	r2, r0
 800f70a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f70e:	1ad2      	subs	r2, r2, r3
 800f710:	1904      	adds	r4, r0, r4
 800f712:	2e00      	cmp	r6, #0
 800f714:	f000 8228 	beq.w	800fb68 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800f718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f71a:	647e      	str	r6, [r7, #68]	; 0x44
 800f71c:	429e      	cmp	r6, r3
 800f71e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f720:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800f724:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f728:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800f72c:	1a98      	subs	r0, r3, r2
 800f72e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f732:	fb03 f000 	mul.w	r0, r3, r0
 800f736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f73a:	1a9b      	subs	r3, r3, r2
 800f73c:	442c      	add	r4, r5
 800f73e:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800f740:	fb08 5e04 	mla	lr, r8, r4, r5
 800f744:	eb0e 0408 	add.w	r4, lr, r8
 800f748:	45a6      	cmp	lr, r4
 800f74a:	62bc      	str	r4, [r7, #40]	; 0x28
 800f74c:	f080 809a 	bcs.w	800f884 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800f750:	0080      	lsls	r0, r0, #2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	6378      	str	r0, [r7, #52]	; 0x34
 800f756:	633b      	str	r3, [r7, #48]	; 0x30
 800f758:	f022 0303 	bic.w	r3, r2, #3
 800f75c:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800f760:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f762:	42a0      	cmp	r0, r4
 800f764:	f200 808e 	bhi.w	800f884 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800f768:	1e58      	subs	r0, r3, #1
 800f76a:	f04f 0900 	mov.w	r9, #0
 800f76e:	0880      	lsrs	r0, r0, #2
 800f770:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800f774:	1c43      	adds	r3, r0, #1
 800f776:	fb00 a00a 	mla	r0, r0, sl, sl
 800f77a:	6138      	str	r0, [r7, #16]
 800f77c:	0118      	lsls	r0, r3, #4
 800f77e:	009b      	lsls	r3, r3, #2
 800f780:	6178      	str	r0, [r7, #20]
 800f782:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f78a:	4499      	add	r9, r3
 800f78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f78e:	181c      	adds	r4, r3, r0
 800f790:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800f794:	65bc      	str	r4, [r7, #88]	; 0x58
 800f796:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800f798:	627b      	str	r3, [r7, #36]	; 0x24
 800f79a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800f79e:	1820      	adds	r0, r4, r0
 800f7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7a2:	6438      	str	r0, [r7, #64]	; 0x40
 800f7a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7a6:	ecb3 7a01 	vldmia	r3!, {s14}
 800f7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800f7ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 800f7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	dd55      	ble.n	800f862 <ai_conv2d_stripe_f32.constprop.0+0x722>
 800f7b6:	4675      	mov	r5, lr
 800f7b8:	f04f 0b00 	mov.w	fp, #0
 800f7bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f340 81d0 	ble.w	800fb64 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800f7c4:	6a38      	ldr	r0, [r7, #32]
 800f7c6:	f101 0310 	add.w	r3, r1, #16
 800f7ca:	2600      	movs	r6, #0
 800f7cc:	607a      	str	r2, [r7, #4]
 800f7ce:	182c      	adds	r4, r5, r0
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	eb00 0c08 	add.w	ip, r0, r8
 800f7d6:	ed13 4a03 	vldr	s8, [r3, #-12]
 800f7da:	ed53 4a04 	vldr	s9, [r3, #-16]
 800f7de:	3604      	adds	r6, #4
 800f7e0:	eddc 7a00 	vldr	s15, [ip]
 800f7e4:	eb04 0c08 	add.w	ip, r4, r8
 800f7e8:	ed90 5a00 	vldr	s10, [r0]
 800f7ec:	3310      	adds	r3, #16
 800f7ee:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f7f2:	edd4 6a00 	vldr	s13, [r4]
 800f7f6:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800f7fa:	4450      	add	r0, sl
 800f7fc:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800f800:	4454      	add	r4, sl
 800f802:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f806:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f808:	4296      	cmp	r6, r2
 800f80a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800f80e:	eddc 6a00 	vldr	s13, [ip]
 800f812:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f81a:	dbda      	blt.n	800f7d2 <ai_conv2d_stripe_f32.constprop.0+0x692>
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	441d      	add	r5, r3
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	68fc      	ldr	r4, [r7, #12]
 800f826:	4419      	add	r1, r3
 800f828:	42a2      	cmp	r2, r4
 800f82a:	dd11      	ble.n	800f850 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800f82c:	4620      	mov	r0, r4
 800f82e:	462b      	mov	r3, r5
 800f830:	460e      	mov	r6, r1
 800f832:	3001      	adds	r0, #1
 800f834:	edd3 7a00 	vldr	s15, [r3]
 800f838:	ecf6 6a01 	vldmia	r6!, {s13}
 800f83c:	4443      	add	r3, r8
 800f83e:	4290      	cmp	r0, r2
 800f840:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f844:	d1f5      	bne.n	800f832 <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800f846:	1b14      	subs	r4, r2, r4
 800f848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f84c:	fb04 5508 	mla	r5, r4, r8, r5
 800f850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f852:	f10b 0b01 	add.w	fp, fp, #1
 800f856:	441d      	add	r5, r3
 800f858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f85a:	4419      	add	r1, r3
 800f85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f85e:	459b      	cmp	fp, r3
 800f860:	d1ac      	bne.n	800f7bc <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800f862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f864:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f866:	eca3 7a01 	vstmia	r3!, {s14}
 800f86a:	643b      	str	r3, [r7, #64]	; 0x40
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	4419      	add	r1, r3
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	4283      	cmp	r3, r0
 800f874:	d196      	bne.n	800f7a4 <ai_conv2d_stripe_f32.constprop.0+0x664>
 800f876:	f10e 0e04 	add.w	lr, lr, #4
 800f87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87c:	459e      	cmp	lr, r3
 800f87e:	d382      	bcc.n	800f786 <ai_conv2d_stripe_f32.constprop.0+0x646>
 800f880:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800f884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f88a:	440a      	add	r2, r1
 800f88c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f88e:	3301      	adds	r3, #1
 800f890:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f892:	ebab 0b01 	sub.w	fp, fp, r1
 800f896:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800f89a:	653b      	str	r3, [r7, #80]	; 0x50
 800f89c:	440a      	add	r2, r1
 800f89e:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800f8a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	f43f ad85 	beq.w	800f3b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800f8ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f6bf af1d 	bge.w	800f6f0 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800f8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8b8:	465b      	mov	r3, fp
 800f8ba:	465d      	mov	r5, fp
 800f8bc:	eb02 010b 	add.w	r1, r2, fp
 800f8c0:	e719      	b.n	800f6f6 <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800f8c2:	eeb0 7a66 	vmov.f32	s14, s13
 800f8c6:	e6ab      	b.n	800f620 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800f8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8ca:	462b      	mov	r3, r5
 800f8cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8ce:	442a      	add	r2, r5
 800f8d0:	e5e4      	b.n	800f49c <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	e687      	b.n	800f5e6 <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800f8d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f8da:	4669      	mov	r1, sp
 800f8dc:	fb05 f202 	mul.w	r2, r5, r2
 800f8e0:	ee0e 1a90 	vmov	s29, r1
 800f8e4:	fb06 f202 	mul.w	r2, r6, r2
 800f8e8:	0095      	lsls	r5, r2, #2
 800f8ea:	637a      	str	r2, [r7, #52]	; 0x34
 800f8ec:	1dea      	adds	r2, r5, #7
 800f8ee:	f022 0207 	bic.w	r2, r2, #7
 800f8f2:	ebad 0d02 	sub.w	sp, sp, r2
 800f8f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800f8fa:	46e9      	mov	r9, sp
 800f8fc:	2a00      	cmp	r2, #0
 800f8fe:	f000 812d 	beq.w	800fb5c <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800f902:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f906:	46ca      	mov	sl, r9
 800f908:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800fba8 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800f90c:	46a9      	mov	r9, r5
 800f90e:	fb02 f303 	mul.w	r3, r2, r3
 800f912:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f914:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800f918:	647b      	str	r3, [r7, #68]	; 0x44
 800f91a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f91c:	fb03 f306 	mul.w	r3, r3, r6
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	623b      	str	r3, [r7, #32]
 800f924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f928:	fb03 f306 	mul.w	r3, r3, r6
 800f92c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f930:	627b      	str	r3, [r7, #36]	; 0x24
 800f932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f936:	009b      	lsls	r3, r3, #2
 800f938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f93a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f93e:	2300      	movs	r3, #0
 800f940:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f944:	b123      	cbz	r3, 800f950 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800f946:	464a      	mov	r2, r9
 800f948:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f94a:	4650      	mov	r0, sl
 800f94c:	f002 fdac 	bl	80124a8 <memcpy>
 800f950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f952:	2b00      	cmp	r3, #0
 800f954:	f000 811c 	beq.w	800fb90 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800f958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f95a:	ecf3 6a01 	vldmia	r3!, {s13}
 800f95e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f964:	2b00      	cmp	r3, #0
 800f966:	f000 80eb 	beq.w	800fb40 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800f96a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f96e:	f8c7 901c 	str.w	r9, [r7, #28]
 800f972:	425d      	negs	r5, r3
 800f974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f976:	653b      	str	r3, [r7, #80]	; 0x50
 800f978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f97a:	643b      	str	r3, [r7, #64]	; 0x40
 800f97c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f980:	657b      	str	r3, [r7, #84]	; 0x54
 800f982:	2300      	movs	r3, #0
 800f984:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f2c0 8107 	blt.w	800fb9c <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800f98e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f990:	2300      	movs	r3, #0
 800f992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f994:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f998:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800f99c:	4428      	add	r0, r5
 800f99e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800f9a0:	42b0      	cmp	r0, r6
 800f9a2:	bf94      	ite	ls
 800f9a4:	ebc3 0300 	rsbls	r3, r3, r0
 800f9a8:	ebc3 0306 	rsbhi	r3, r3, r6
 800f9ac:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800f9b0:	fb02 a204 	mla	r2, r2, r4, sl
 800f9b4:	eba0 0c03 	sub.w	ip, r0, r3
 800f9b8:	1af0      	subs	r0, r6, r3
 800f9ba:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800f9be:	fb06 f303 	mul.w	r3, r6, r3
 800f9c2:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800f9c4:	2e00      	cmp	r6, #0
 800f9c6:	f340 80e6 	ble.w	800fb96 <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800f9ca:	fb04 f000 	mul.w	r0, r4, r0
 800f9ce:	eeb0 7a66 	vmov.f32	s14, s13
 800f9d2:	fb04 fc0c 	mul.w	ip, r4, ip
 800f9d6:	f023 040f 	bic.w	r4, r3, #15
 800f9da:	6338      	str	r0, [r7, #48]	; 0x30
 800f9dc:	2600      	movs	r6, #0
 800f9de:	1e60      	subs	r0, r4, #1
 800f9e0:	0900      	lsrs	r0, r0, #4
 800f9e2:	3001      	adds	r0, #1
 800f9e4:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800f9e8:	0100      	lsls	r0, r0, #4
 800f9ea:	62b8      	str	r0, [r7, #40]	; 0x28
 800f9ec:	2c00      	cmp	r4, #0
 800f9ee:	f340 80cd 	ble.w	800fb8c <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800f9f2:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800f9f6:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800f9fa:	f04f 0900 	mov.w	r9, #0
 800f9fe:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800fa02:	f109 0910 	add.w	r9, r9, #16
 800fa06:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800fa0a:	3040      	adds	r0, #64	; 0x40
 800fa0c:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800fa10:	45a1      	cmp	r9, r4
 800fa12:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fa16:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800fa1a:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800fa1e:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800fa22:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800fa26:	eee4 7a24 	vfma.f32	s15, s8, s9
 800fa2a:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800fa2e:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800fa32:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800fa36:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800fa3a:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800fa3e:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800fa42:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fa46:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800fa4a:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800fa4e:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800fa52:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800fa56:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800fa5a:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800fa5e:	eeee 7a06 	vfma.f32	s15, s28, s12
 800fa62:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800fa66:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800fa6a:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800fa6e:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800fa72:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800fa76:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800fa7a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800fa7e:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800fa82:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800fa86:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800fa8a:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800fa8e:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800fa92:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800fa96:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800fa9a:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800fa9e:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800faa2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800faa6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800faaa:	eee9 7a89 	vfma.f32	s15, s19, s18
 800faae:	eee8 7a80 	vfma.f32	s15, s17, s0
 800fab2:	eee0 7a81 	vfma.f32	s15, s1, s2
 800fab6:	eee1 7a82 	vfma.f32	s15, s3, s4
 800faba:	eee2 7a83 	vfma.f32	s15, s5, s6
 800fabe:	eee3 7a84 	vfma.f32	s15, s7, s8
 800fac2:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fac6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800faca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800face:	db96      	blt.n	800f9fe <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800fad0:	4441      	add	r1, r8
 800fad2:	4442      	add	r2, r8
 800fad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fad6:	4283      	cmp	r3, r0
 800fad8:	dd11      	ble.n	800fafe <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800fada:	4686      	mov	lr, r0
 800fadc:	468b      	mov	fp, r1
 800fade:	4691      	mov	r9, r2
 800fae0:	f10e 0e01 	add.w	lr, lr, #1
 800fae4:	ecb9 6a01 	vldmia	r9!, {s12}
 800fae8:	ecfb 7a01 	vldmia	fp!, {s15}
 800faec:	4573      	cmp	r3, lr
 800faee:	eea6 7a27 	vfma.f32	s14, s12, s15
 800faf2:	d1f5      	bne.n	800fae0 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800faf4:	1a18      	subs	r0, r3, r0
 800faf6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800fafa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800fafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb00:	3601      	adds	r6, #1
 800fb02:	4461      	add	r1, ip
 800fb04:	4402      	add	r2, r0
 800fb06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fb08:	42b0      	cmp	r0, r6
 800fb0a:	f47f af6f 	bne.w	800f9ec <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800fb0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb10:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fb12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb14:	4401      	add	r1, r0
 800fb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb18:	ed82 7a00 	vstr	s14, [r2]
 800fb1c:	1a2d      	subs	r5, r5, r0
 800fb1e:	6579      	str	r1, [r7, #84]	; 0x54
 800fb20:	3301      	adds	r3, #1
 800fb22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb26:	440a      	add	r2, r1
 800fb28:	6a39      	ldr	r1, [r7, #32]
 800fb2a:	643a      	str	r2, [r7, #64]	; 0x40
 800fb2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb2e:	440a      	add	r2, r1
 800fb30:	653a      	str	r2, [r7, #80]	; 0x50
 800fb32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800fb36:	429a      	cmp	r2, r3
 800fb38:	f47f af25 	bne.w	800f986 <ai_conv2d_stripe_f32.constprop.0+0x846>
 800fb3c:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800fb40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb44:	444a      	add	r2, r9
 800fb46:	3301      	adds	r3, #1
 800fb48:	66ba      	str	r2, [r7, #104]	; 0x68
 800fb4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fb4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb4e:	3204      	adds	r2, #4
 800fb50:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fb52:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800fb56:	429a      	cmp	r2, r3
 800fb58:	f47f aef3 	bne.w	800f942 <ai_conv2d_stripe_f32.constprop.0+0x802>
 800fb5c:	ee1e 3a90 	vmov	r3, s29
 800fb60:	469d      	mov	sp, r3
 800fb62:	e428      	b.n	800f3b6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800fb64:	2400      	movs	r4, #0
 800fb66:	e65f      	b.n	800f828 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800fb68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb6a:	eeb0 3a63 	vmov.f32	s6, s7
 800fb6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800fb72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb74:	647b      	str	r3, [r7, #68]	; 0x44
 800fb76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fb7a:	1a98      	subs	r0, r3, r2
 800fb7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fb80:	fb03 f000 	mul.w	r0, r3, r0
 800fb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb88:	1a9b      	subs	r3, r3, r2
 800fb8a:	e5d7      	b.n	800f73c <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800fb8c:	2000      	movs	r0, #0
 800fb8e:	e7a2      	b.n	800fad6 <ai_conv2d_stripe_f32.constprop.0+0x996>
 800fb90:	eef0 6a48 	vmov.f32	s13, s16
 800fb94:	e6e4      	b.n	800f960 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800fb96:	eeb0 7a66 	vmov.f32	s14, s13
 800fb9a:	e7b8      	b.n	800fb0e <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800fb9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb9e:	462b      	mov	r3, r5
 800fba0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fba2:	442a      	add	r2, r5
 800fba4:	e6f6      	b.n	800f994 <ai_conv2d_stripe_f32.constprop.0+0x854>
 800fba6:	bf00      	nop
 800fba8:	00000000 	.word	0x00000000

0800fbac <ai_dict_decompress_f32>:
 800fbac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbb0:	9d08      	ldr	r5, [sp, #32]
 800fbb2:	2b04      	cmp	r3, #4
 800fbb4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800fbb8:	d00e      	beq.n	800fbd8 <ai_dict_decompress_f32+0x2c>
 800fbba:	2b08      	cmp	r3, #8
 800fbbc:	d10a      	bne.n	800fbd4 <ai_dict_decompress_f32+0x28>
 800fbbe:	42a8      	cmp	r0, r5
 800fbc0:	d208      	bcs.n	800fbd4 <ai_dict_decompress_f32+0x28>
 800fbc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f840 3b04 	str.w	r3, [r0], #4
 800fbd0:	4285      	cmp	r5, r0
 800fbd2:	d8f6      	bhi.n	800fbc2 <ai_dict_decompress_f32+0x16>
 800fbd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd8:	9b07      	ldr	r3, [sp, #28]
 800fbda:	085e      	lsrs	r6, r3, #1
 800fbdc:	f003 0701 	and.w	r7, r3, #1
 800fbe0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800fbe4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800fbe8:	42a8      	cmp	r0, r5
 800fbea:	d2f3      	bcs.n	800fbd4 <ai_dict_decompress_f32+0x28>
 800fbec:	b33e      	cbz	r6, 800fc3e <ai_dict_decompress_f32+0x92>
 800fbee:	f100 0e08 	add.w	lr, r0, #8
 800fbf2:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800fbf6:	eb01 0408 	add.w	r4, r1, r8
 800fbfa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800fbfe:	f10e 0e08 	add.w	lr, lr, #8
 800fc02:	091b      	lsrs	r3, r3, #4
 800fc04:	4564      	cmp	r4, ip
 800fc06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	f84e 3c10 	str.w	r3, [lr, #-16]
 800fc10:	f89c 3000 	ldrb.w	r3, [ip]
 800fc14:	f003 030f 	and.w	r3, r3, #15
 800fc18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800fc22:	d1ea      	bne.n	800fbfa <ai_dict_decompress_f32+0x4e>
 800fc24:	4431      	add	r1, r6
 800fc26:	4448      	add	r0, r9
 800fc28:	2f00      	cmp	r7, #0
 800fc2a:	d0dd      	beq.n	800fbe8 <ai_dict_decompress_f32+0x3c>
 800fc2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc30:	091b      	lsrs	r3, r3, #4
 800fc32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	f840 3b04 	str.w	r3, [r0], #4
 800fc3c:	e7d4      	b.n	800fbe8 <ai_dict_decompress_f32+0x3c>
 800fc3e:	2f00      	cmp	r7, #0
 800fc40:	d1f4      	bne.n	800fc2c <ai_dict_decompress_f32+0x80>
 800fc42:	42a8      	cmp	r0, r5
 800fc44:	d3fd      	bcc.n	800fc42 <ai_dict_decompress_f32+0x96>
 800fc46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc4a:	bf00      	nop

0800fc4c <forward_conv2d>:
 800fc4c:	6982      	ldr	r2, [r0, #24]
 800fc4e:	8813      	ldrh	r3, [r2, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f000 810f 	beq.w	800fe74 <forward_conv2d+0x228>
 800fc56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc5a:	ed2d 8b04 	vpush	{d8-d9}
 800fc5e:	6852      	ldr	r2, [r2, #4]
 800fc60:	b0a9      	sub	sp, #164	; 0xa4
 800fc62:	4604      	mov	r4, r0
 800fc64:	6851      	ldr	r1, [r2, #4]
 800fc66:	b101      	cbz	r1, 800fc6a <forward_conv2d+0x1e>
 800fc68:	6809      	ldr	r1, [r1, #0]
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	f000 8152 	beq.w	800ff14 <forward_conv2d+0x2c8>
 800fc70:	6915      	ldr	r5, [r2, #16]
 800fc72:	b105      	cbz	r5, 800fc76 <forward_conv2d+0x2a>
 800fc74:	682d      	ldr	r5, [r5, #0]
 800fc76:	2b02      	cmp	r3, #2
 800fc78:	f000 80fe 	beq.w	800fe78 <forward_conv2d+0x22c>
 800fc7c:	69d3      	ldr	r3, [r2, #28]
 800fc7e:	8b12      	ldrh	r2, [r2, #24]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	f000 8138 	beq.w	800fef6 <forward_conv2d+0x2aa>
 800fc86:	2a01      	cmp	r2, #1
 800fc88:	681e      	ldr	r6, [r3, #0]
 800fc8a:	f240 813a 	bls.w	800ff02 <forward_conv2d+0x2b6>
 800fc8e:	685a      	ldr	r2, [r3, #4]
 800fc90:	ee08 2a10 	vmov	s16, r2
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	68ca      	ldr	r2, [r1, #12]
 800fc98:	6989      	ldr	r1, [r1, #24]
 800fc9a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800fc9e:	6889      	ldr	r1, [r1, #8]
 800fca0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800fca2:	ee09 1a10 	vmov	s18, r1
 800fca6:	6851      	ldr	r1, [r2, #4]
 800fca8:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800fcac:	911b      	str	r1, [sp, #108]	; 0x6c
 800fcae:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800fcb2:	69b7      	ldr	r7, [r6, #24]
 800fcb4:	9118      	str	r1, [sp, #96]	; 0x60
 800fcb6:	68d1      	ldr	r1, [r2, #12]
 800fcb8:	6892      	ldr	r2, [r2, #8]
 800fcba:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800fcbe:	9223      	str	r2, [sp, #140]	; 0x8c
 800fcc0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800fcc2:	f8dc a008 	ldr.w	sl, [ip, #8]
 800fcc6:	9224      	str	r2, [sp, #144]	; 0x90
 800fcc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcca:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800fcce:	9217      	str	r2, [sp, #92]	; 0x5c
 800fcd0:	6802      	ldr	r2, [r0, #0]
 800fcd2:	9122      	str	r1, [sp, #136]	; 0x88
 800fcd4:	9211      	str	r2, [sp, #68]	; 0x44
 800fcd6:	6842      	ldr	r2, [r0, #4]
 800fcd8:	921e      	str	r2, [sp, #120]	; 0x78
 800fcda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fcdc:	9210      	str	r2, [sp, #64]	; 0x40
 800fcde:	f8de 2008 	ldr.w	r2, [lr, #8]
 800fce2:	9219      	str	r2, [sp, #100]	; 0x64
 800fce4:	f8de 2004 	ldr.w	r2, [lr, #4]
 800fce8:	921a      	str	r2, [sp, #104]	; 0x68
 800fcea:	69e2      	ldr	r2, [r4, #28]
 800fcec:	9225      	str	r2, [sp, #148]	; 0x94
 800fcee:	68ba      	ldr	r2, [r7, #8]
 800fcf0:	ee08 2a90 	vmov	s17, r2
 800fcf4:	ee18 2a10 	vmov	r2, s16
 800fcf8:	b11a      	cbz	r2, 800fd02 <forward_conv2d+0xb6>
 800fcfa:	6992      	ldr	r2, [r2, #24]
 800fcfc:	6892      	ldr	r2, [r2, #8]
 800fcfe:	ee08 2a10 	vmov	s16, r2
 800fd02:	69aa      	ldr	r2, [r5, #24]
 800fd04:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800fd08:	6892      	ldr	r2, [r2, #8]
 800fd0a:	9216      	str	r2, [sp, #88]	; 0x58
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f000 80df 	beq.w	800fed0 <forward_conv2d+0x284>
 800fd12:	699a      	ldr	r2, [r3, #24]
 800fd14:	2a00      	cmp	r2, #0
 800fd16:	f000 80e4 	beq.w	800fee2 <forward_conv2d+0x296>
 800fd1a:	695b      	ldr	r3, [r3, #20]
 800fd1c:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	e9d2 0100 	ldrd	r0, r1, [r2]
 800fd26:	9327      	str	r3, [sp, #156]	; 0x9c
 800fd28:	f001 fab4 	bl	8011294 <ai_array_get_byte_size>
 800fd2c:	69b7      	ldr	r7, [r6, #24]
 800fd2e:	9013      	str	r0, [sp, #76]	; 0x4c
 800fd30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd32:	9312      	str	r3, [sp, #72]	; 0x48
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f000 80c8 	beq.w	800feca <forward_conv2d+0x27e>
 800fd3a:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800fd3c:	fa1f f28b 	uxth.w	r2, fp
 800fd40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fd44:	1e71      	subs	r1, r6, #1
 800fd46:	3a01      	subs	r2, #1
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	6838      	ldr	r0, [r7, #0]
 800fd4c:	fb01 6202 	mla	r2, r1, r2, r6
 800fd50:	991a      	ldr	r1, [sp, #104]	; 0x68
 800fd52:	921c      	str	r2, [sp, #112]	; 0x70
 800fd54:	1e4a      	subs	r2, r1, #1
 800fd56:	fb02 1303 	mla	r3, r2, r3, r1
 800fd5a:	931d      	str	r3, [sp, #116]	; 0x74
 800fd5c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800fd60:	2b04      	cmp	r3, #4
 800fd62:	f000 808c 	beq.w	800fe7e <forward_conv2d+0x232>
 800fd66:	2b08      	cmp	r3, #8
 800fd68:	f000 8089 	beq.w	800fe7e <forward_conv2d+0x232>
 800fd6c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800fd70:	9315      	str	r3, [sp, #84]	; 0x54
 800fd72:	425b      	negs	r3, r3
 800fd74:	9314      	str	r3, [sp, #80]	; 0x50
 800fd76:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d076      	beq.n	800fe6a <forward_conv2d+0x21e>
 800fd7c:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800fd80:	4644      	mov	r4, r8
 800fd82:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800fd86:	425b      	negs	r3, r3
 800fd88:	921e      	str	r2, [sp, #120]	; 0x78
 800fd8a:	fa0f f28b 	sxth.w	r2, fp
 800fd8e:	9321      	str	r3, [sp, #132]	; 0x84
 800fd90:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800fd94:	2300      	movs	r3, #0
 800fd96:	921f      	str	r2, [sp, #124]	; 0x7c
 800fd98:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800fd9c:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd9e:	fb0a f30b 	mul.w	r3, sl, fp
 800fda2:	9220      	str	r2, [sp, #128]	; 0x80
 800fda4:	9326      	str	r3, [sp, #152]	; 0x98
 800fda6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800fda8:	ee19 1a10 	vmov	r1, s18
 800fdac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fdae:	920e      	str	r2, [sp, #56]	; 0x38
 800fdb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800fdb6:	920d      	str	r2, [sp, #52]	; 0x34
 800fdb8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fdba:	4638      	mov	r0, r7
 800fdbc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800fdc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdc2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fdc4:	930a      	str	r3, [sp, #40]	; 0x28
 800fdc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fdc8:	9307      	str	r3, [sp, #28]
 800fdca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800fdcc:	9306      	str	r3, [sp, #24]
 800fdce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fdd0:	9305      	str	r3, [sp, #20]
 800fdd2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800fdd4:	e9cd a303 	strd	sl, r3, [sp, #12]
 800fdd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fdda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fdde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fde4:	4413      	add	r3, r2
 800fde6:	bfa8      	it	ge
 800fde8:	2200      	movge	r2, #0
 800fdea:	9208      	str	r2, [sp, #32]
 800fdec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	bf28      	it	cs
 800fdf2:	4613      	movcs	r3, r2
 800fdf4:	ee18 2a90 	vmov	r2, s17
 800fdf8:	9309      	str	r3, [sp, #36]	; 0x24
 800fdfa:	ee18 3a10 	vmov	r3, s16
 800fdfe:	f7ff f99f 	bl	800f140 <ai_conv2d_stripe_f32.constprop.0>
 800fe02:	f1ba 0f00 	cmp.w	sl, #0
 800fe06:	d020      	beq.n	800fe4a <forward_conv2d+0x1fe>
 800fe08:	2600      	movs	r6, #0
 800fe0a:	464a      	mov	r2, r9
 800fe0c:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800fe10:	9610      	str	r6, [sp, #64]	; 0x40
 800fe12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe14:	4629      	mov	r1, r5
 800fe16:	4628      	mov	r0, r5
 800fe18:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	9211      	str	r2, [sp, #68]	; 0x44
 800fe1e:	9310      	str	r3, [sp, #64]	; 0x40
 800fe20:	69ab      	ldr	r3, [r5, #24]
 800fe22:	609f      	str	r7, [r3, #8]
 800fe24:	4623      	mov	r3, r4
 800fe26:	444c      	add	r4, r9
 800fe28:	47b0      	blx	r6
 800fe2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe2c:	445f      	add	r7, fp
 800fe2e:	eba4 0308 	sub.w	r3, r4, r8
 800fe32:	4293      	cmp	r3, r2
 800fe34:	bfa8      	it	ge
 800fe36:	4644      	movge	r4, r8
 800fe38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe3c:	459a      	cmp	sl, r3
 800fe3e:	d1e8      	bne.n	800fe12 <forward_conv2d+0x1c6>
 800fe40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fe42:	4691      	mov	r9, r2
 800fe44:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fe46:	4413      	add	r3, r2
 800fe48:	9316      	str	r3, [sp, #88]	; 0x58
 800fe4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe4e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800fe50:	4413      	add	r3, r2
 800fe52:	3101      	adds	r1, #1
 800fe54:	9314      	str	r3, [sp, #80]	; 0x50
 800fe56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe58:	9117      	str	r1, [sp, #92]	; 0x5c
 800fe5a:	1a9b      	subs	r3, r3, r2
 800fe5c:	9315      	str	r3, [sp, #84]	; 0x54
 800fe5e:	69ab      	ldr	r3, [r5, #24]
 800fe60:	68da      	ldr	r2, [r3, #12]
 800fe62:	609a      	str	r2, [r3, #8]
 800fe64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fe66:	428b      	cmp	r3, r1
 800fe68:	d19d      	bne.n	800fda6 <forward_conv2d+0x15a>
 800fe6a:	b029      	add	sp, #164	; 0xa4
 800fe6c:	ecbd 8b04 	vpop	{d8-d9}
 800fe70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	deff      	udf	#255	; 0xff
 800fe78:	2300      	movs	r3, #0
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	deff      	udf	#255	; 0xff
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	2a00      	cmp	r2, #0
 800fe82:	f43f af73 	beq.w	800fd6c <forward_conv2d+0x120>
 800fe86:	69a3      	ldr	r3, [r4, #24]
 800fe88:	8819      	ldrh	r1, [r3, #0]
 800fe8a:	2903      	cmp	r1, #3
 800fe8c:	d945      	bls.n	800ff1a <forward_conv2d+0x2ce>
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d039      	beq.n	800ff0a <forward_conv2d+0x2be>
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d036      	beq.n	800ff0a <forward_conv2d+0x2be>
 800fe9c:	699c      	ldr	r4, [r3, #24]
 800fe9e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800fea2:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800fea6:	68b9      	ldr	r1, [r7, #8]
 800fea8:	4103      	asrs	r3, r0
 800feaa:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800feae:	b29b      	uxth	r3, r3
 800feb0:	9401      	str	r4, [sp, #4]
 800feb2:	ee18 4a90 	vmov	r4, s17
 800feb6:	2800      	cmp	r0, #0
 800feb8:	bf18      	it	ne
 800feba:	4604      	movne	r4, r0
 800febc:	ee08 4a90 	vmov	s17, r4
 800fec0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800fec2:	9400      	str	r4, [sp, #0]
 800fec4:	f7ff fe72 	bl	800fbac <ai_dict_decompress_f32>
 800fec8:	e750      	b.n	800fd6c <forward_conv2d+0x120>
 800feca:	4b15      	ldr	r3, [pc, #84]	; (800ff20 <forward_conv2d+0x2d4>)
 800fecc:	9312      	str	r3, [sp, #72]	; 0x48
 800fece:	e734      	b.n	800fd3a <forward_conv2d+0xee>
 800fed0:	f1b8 0f00 	cmp.w	r8, #0
 800fed4:	d00b      	beq.n	800feee <forward_conv2d+0x2a2>
 800fed6:	9327      	str	r3, [sp, #156]	; 0x9c
 800fed8:	2301      	movs	r3, #1
 800feda:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800fede:	9313      	str	r3, [sp, #76]	; 0x4c
 800fee0:	e726      	b.n	800fd30 <forward_conv2d+0xe4>
 800fee2:	f1b8 0f00 	cmp.w	r8, #0
 800fee6:	d001      	beq.n	800feec <forward_conv2d+0x2a0>
 800fee8:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800feec:	2300      	movs	r3, #0
 800feee:	9327      	str	r3, [sp, #156]	; 0x9c
 800fef0:	2301      	movs	r3, #1
 800fef2:	9313      	str	r3, [sp, #76]	; 0x4c
 800fef4:	e71c      	b.n	800fd30 <forward_conv2d+0xe4>
 800fef6:	2a01      	cmp	r2, #1
 800fef8:	d90a      	bls.n	800ff10 <forward_conv2d+0x2c4>
 800fefa:	ee08 3a10 	vmov	s16, r3
 800fefe:	461e      	mov	r6, r3
 800ff00:	e6c9      	b.n	800fc96 <forward_conv2d+0x4a>
 800ff02:	2200      	movs	r2, #0
 800ff04:	ee08 2a10 	vmov	s16, r2
 800ff08:	e6c4      	b.n	800fc94 <forward_conv2d+0x48>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	699b      	ldr	r3, [r3, #24]
 800ff0e:	deff      	udf	#255	; 0xff
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	deff      	udf	#255	; 0xff
 800ff14:	2300      	movs	r3, #0
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	deff      	udf	#255	; 0xff
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	deff      	udf	#255	; 0xff
 800ff20:	0800f13d 	.word	0x0800f13d

0800ff24 <forward_dense>:
 800ff24:	6983      	ldr	r3, [r0, #24]
 800ff26:	881a      	ldrh	r2, [r3, #0]
 800ff28:	2a00      	cmp	r2, #0
 800ff2a:	f000 80f0 	beq.w	801010e <forward_dense+0x1ea>
 800ff2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff32:	ed2d 8b02 	vpush	{d8}
 800ff36:	6858      	ldr	r0, [r3, #4]
 800ff38:	b09b      	sub	sp, #108	; 0x6c
 800ff3a:	6845      	ldr	r5, [r0, #4]
 800ff3c:	b105      	cbz	r5, 800ff40 <forward_dense+0x1c>
 800ff3e:	682d      	ldr	r5, [r5, #0]
 800ff40:	2a01      	cmp	r2, #1
 800ff42:	f000 840a 	beq.w	801075a <forward_dense+0x836>
 800ff46:	6906      	ldr	r6, [r0, #16]
 800ff48:	b106      	cbz	r6, 800ff4c <forward_dense+0x28>
 800ff4a:	6836      	ldr	r6, [r6, #0]
 800ff4c:	2a02      	cmp	r2, #2
 800ff4e:	f000 80e0 	beq.w	8010112 <forward_dense+0x1ee>
 800ff52:	69c3      	ldr	r3, [r0, #28]
 800ff54:	930d      	str	r3, [sp, #52]	; 0x34
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f000 83f1 	beq.w	801073e <forward_dense+0x81a>
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	8b03      	ldrh	r3, [r0, #24]
 800ff60:	6809      	ldr	r1, [r1, #0]
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	910f      	str	r1, [sp, #60]	; 0x3c
 800ff66:	f240 83ec 	bls.w	8010742 <forward_dense+0x81e>
 800ff6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	930d      	str	r3, [sp, #52]	; 0x34
 800ff70:	460b      	mov	r3, r1
 800ff72:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800ff76:	2a03      	cmp	r2, #3
 800ff78:	68eb      	ldr	r3, [r5, #12]
 800ff7a:	68f7      	ldr	r7, [r6, #12]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	687c      	ldr	r4, [r7, #4]
 800ff80:	9317      	str	r3, [sp, #92]	; 0x5c
 800ff82:	f8d8 3000 	ldr.w	r3, [r8]
 800ff86:	4621      	mov	r1, r4
 800ff88:	9419      	str	r4, [sp, #100]	; 0x64
 800ff8a:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800ff8e:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800ff92:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800ff96:	fb01 f404 	mul.w	r4, r1, r4
 800ff9a:	fa4e f10c 	asr.w	r1, lr, ip
 800ff9e:	9116      	str	r1, [sp, #88]	; 0x58
 800ffa0:	f000 83d8 	beq.w	8010754 <forward_dense+0x830>
 800ffa4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ffa6:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800ffaa:	2a00      	cmp	r2, #0
 800ffac:	f000 83c2 	beq.w	8010734 <forward_dense+0x810>
 800ffb0:	6812      	ldr	r2, [r2, #0]
 800ffb2:	2a00      	cmp	r2, #0
 800ffb4:	f000 83be 	beq.w	8010734 <forward_dense+0x810>
 800ffb8:	2b04      	cmp	r3, #4
 800ffba:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800ffbe:	f000 83a8 	beq.w	8010712 <forward_dense+0x7ee>
 800ffc2:	2b08      	cmp	r3, #8
 800ffc4:	f000 83a5 	beq.w	8010712 <forward_dense+0x7ee>
 800ffc8:	f04f 0a00 	mov.w	sl, #0
 800ffcc:	69ab      	ldr	r3, [r5, #24]
 800ffce:	fb07 f404 	mul.w	r4, r7, r4
 800ffd2:	69b2      	ldr	r2, [r6, #24]
 800ffd4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800ffd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffda:	6892      	ldr	r2, [r2, #8]
 800ffdc:	695b      	ldr	r3, [r3, #20]
 800ffde:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800ffe2:	9206      	str	r2, [sp, #24]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	428a      	cmp	r2, r1
 800ffe8:	9110      	str	r1, [sp, #64]	; 0x40
 800ffea:	9304      	str	r3, [sp, #16]
 800ffec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ffee:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800fff2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fff6:	900e      	str	r0, [sp, #56]	; 0x38
 800fff8:	9303      	str	r3, [sp, #12]
 800fffa:	f080 8380 	bcs.w	80106fe <forward_dense+0x7da>
 800fffe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010000:	4654      	mov	r4, sl
 8010002:	4bb9      	ldr	r3, [pc, #740]	; (80102e8 <forward_dense+0x3c4>)
 8010004:	46ca      	mov	sl, r9
 8010006:	08d0      	lsrs	r0, r2, #3
 8010008:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80102ec <forward_dense+0x3c8>
 801000c:	4413      	add	r3, r2
 801000e:	9009      	str	r0, [sp, #36]	; 0x24
 8010010:	0099      	lsls	r1, r3, #2
 8010012:	f022 0301 	bic.w	r3, r2, #1
 8010016:	f002 0201 	and.w	r2, r2, #1
 801001a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801001e:	9118      	str	r1, [sp, #96]	; 0x60
 8010020:	920a      	str	r2, [sp, #40]	; 0x28
 8010022:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8010026:	9305      	str	r3, [sp, #20]
 8010028:	f101 0320 	add.w	r3, r1, #32
 801002c:	9207      	str	r2, [sp, #28]
 801002e:	9311      	str	r3, [sp, #68]	; 0x44
 8010030:	444b      	add	r3, r9
 8010032:	469b      	mov	fp, r3
 8010034:	930b      	str	r3, [sp, #44]	; 0x2c
 8010036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	689a      	ldr	r2, [r3, #8]
 801003c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801003e:	b10b      	cbz	r3, 8010044 <forward_dense+0x120>
 8010040:	699b      	ldr	r3, [r3, #24]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	2c00      	cmp	r4, #0
 8010046:	f000 834b 	beq.w	80106e0 <forward_dense+0x7bc>
 801004a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801004c:	2904      	cmp	r1, #4
 801004e:	f000 826a 	beq.w	8010526 <forward_dense+0x602>
 8010052:	9903      	ldr	r1, [sp, #12]
 8010054:	9806      	ldr	r0, [sp, #24]
 8010056:	4281      	cmp	r1, r0
 8010058:	f240 8356 	bls.w	8010708 <forward_dense+0x7e4>
 801005c:	4686      	mov	lr, r0
 801005e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010060:	eb00 090a 	add.w	r9, r0, sl
 8010064:	0941      	lsrs	r1, r0, #5
 8010066:	f10a 0004 	add.w	r0, sl, #4
 801006a:	f8cd 9020 	str.w	r9, [sp, #32]
 801006e:	9012      	str	r0, [sp, #72]	; 0x48
 8010070:	1c48      	adds	r0, r1, #1
 8010072:	00c9      	lsls	r1, r1, #3
 8010074:	3110      	adds	r1, #16
 8010076:	9115      	str	r1, [sp, #84]	; 0x54
 8010078:	00c1      	lsls	r1, r0, #3
 801007a:	9113      	str	r1, [sp, #76]	; 0x4c
 801007c:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8010080:	9114      	str	r1, [sp, #80]	; 0x50
 8010082:	f1a9 0104 	sub.w	r1, r9, #4
 8010086:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 801008a:	910c      	str	r1, [sp, #48]	; 0x30
 801008c:	2b00      	cmp	r3, #0
 801008e:	f000 8128 	beq.w	80102e2 <forward_dense+0x3be>
 8010092:	ecb3 5a01 	vldmia	r3!, {s10}
 8010096:	f1b9 0f07 	cmp.w	r9, #7
 801009a:	d83d      	bhi.n	8010118 <forward_dense+0x1f4>
 801009c:	45da      	cmp	sl, fp
 801009e:	d211      	bcs.n	80100c4 <forward_dense+0x1a0>
 80100a0:	eddf 7a92 	vldr	s15, [pc, #584]	; 80102ec <forward_dense+0x3c8>
 80100a4:	4650      	mov	r0, sl
 80100a6:	4615      	mov	r5, r2
 80100a8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80100ac:	ecb0 7a01 	vldmia	r0!, {s14}
 80100b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80100b4:	4558      	cmp	r0, fp
 80100b6:	edd1 6a00 	vldr	s13, [r1]
 80100ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80100be:	d3f3      	bcc.n	80100a8 <forward_dense+0x184>
 80100c0:	ee35 5a27 	vadd.f32	s10, s10, s15
 80100c4:	9904      	ldr	r1, [sp, #16]
 80100c6:	ecae 5a01 	vstmia	lr!, {s10}
 80100ca:	440a      	add	r2, r1
 80100cc:	9903      	ldr	r1, [sp, #12]
 80100ce:	458e      	cmp	lr, r1
 80100d0:	d3dc      	bcc.n	801008c <forward_dense+0x168>
 80100d2:	9a06      	ldr	r2, [sp, #24]
 80100d4:	1a8b      	subs	r3, r1, r2
 80100d6:	3b01      	subs	r3, #1
 80100d8:	f023 0303 	bic.w	r3, r3, #3
 80100dc:	3304      	adds	r3, #4
 80100de:	18d3      	adds	r3, r2, r3
 80100e0:	4619      	mov	r1, r3
 80100e2:	9306      	str	r3, [sp, #24]
 80100e4:	9b03      	ldr	r3, [sp, #12]
 80100e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80100e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80100ea:	4413      	add	r3, r2
 80100ec:	9a07      	ldr	r2, [sp, #28]
 80100ee:	4281      	cmp	r1, r0
 80100f0:	9303      	str	r3, [sp, #12]
 80100f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100f4:	441a      	add	r2, r3
 80100f6:	449b      	add	fp, r3
 80100f8:	9207      	str	r2, [sp, #28]
 80100fa:	9a05      	ldr	r2, [sp, #20]
 80100fc:	441a      	add	r2, r3
 80100fe:	9205      	str	r2, [sp, #20]
 8010100:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010102:	4692      	mov	sl, r2
 8010104:	f080 82fb 	bcs.w	80106fe <forward_dense+0x7da>
 8010108:	441a      	add	r2, r3
 801010a:	920b      	str	r2, [sp, #44]	; 0x2c
 801010c:	e793      	b.n	8010036 <forward_dense+0x112>
 801010e:	6853      	ldr	r3, [r2, #4]
 8010110:	deff      	udf	#255	; 0xff
 8010112:	2300      	movs	r3, #0
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	deff      	udf	#255	; 0xff
 8010118:	f002 0103 	and.w	r1, r2, #3
 801011c:	2902      	cmp	r1, #2
 801011e:	f000 81e6 	beq.w	80104ee <forward_dense+0x5ca>
 8010122:	2903      	cmp	r1, #3
 8010124:	f000 80e4 	beq.w	80102f0 <forward_dense+0x3cc>
 8010128:	2901      	cmp	r1, #1
 801012a:	f000 81ef 	beq.w	801050c <forward_dense+0x5e8>
 801012e:	9908      	ldr	r1, [sp, #32]
 8010130:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80102ec <forward_dense+0x3c8>
 8010134:	458a      	cmp	sl, r1
 8010136:	f200 82e9 	bhi.w	801070c <forward_dense+0x7e8>
 801013a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801013c:	f102 0108 	add.w	r1, r2, #8
 8010140:	f10a 0020 	add.w	r0, sl, #32
 8010144:	18ae      	adds	r6, r5, r2
 8010146:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 801014a:	3108      	adds	r1, #8
 801014c:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8010150:	3020      	adds	r0, #32
 8010152:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010156:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 801015a:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 801015e:	edd5 7a00 	vldr	s15, [r5]
 8010162:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8010166:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801016a:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 801016e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010172:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8010176:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 801017a:	edd5 2a00 	vldr	s5, [r5]
 801017e:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8010182:	eee2 7a83 	vfma.f32	s15, s5, s6
 8010186:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 801018a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801018e:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8010192:	ed95 3a00 	vldr	s6, [r5]
 8010196:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 801019a:	eee3 7a23 	vfma.f32	s15, s6, s7
 801019e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80101a2:	edd5 3a00 	vldr	s7, [r5]
 80101a6:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80101aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80101ae:	eee3 7a84 	vfma.f32	s15, s7, s8
 80101b2:	ed95 4a00 	vldr	s8, [r5]
 80101b6:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80101ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80101be:	eee4 7a24 	vfma.f32	s15, s8, s9
 80101c2:	edd5 4a00 	vldr	s9, [r5]
 80101c6:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80101ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80101ce:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80101d2:	edd5 5a00 	vldr	s11, [r5]
 80101d6:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80101da:	428e      	cmp	r6, r1
 80101dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80101e0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80101e4:	ed95 6a00 	vldr	s12, [r5]
 80101e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80101ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101f0:	d1a9      	bne.n	8010146 <forward_dense+0x222>
 80101f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80101f4:	1850      	adds	r0, r2, r1
 80101f6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80101f8:	4559      	cmp	r1, fp
 80101fa:	d26f      	bcs.n	80102dc <forward_dense+0x3b8>
 80101fc:	7805      	ldrb	r5, [r0, #0]
 80101fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010202:	edd5 7a00 	vldr	s15, [r5]
 8010206:	460d      	mov	r5, r1
 8010208:	ecf5 6a01 	vldmia	r5!, {s13}
 801020c:	45ab      	cmp	fp, r5
 801020e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010212:	d963      	bls.n	80102dc <forward_dense+0x3b8>
 8010214:	7845      	ldrb	r5, [r0, #1]
 8010216:	edd1 6a01 	vldr	s13, [r1, #4]
 801021a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801021e:	edd5 7a00 	vldr	s15, [r5]
 8010222:	f101 0508 	add.w	r5, r1, #8
 8010226:	45ab      	cmp	fp, r5
 8010228:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801022c:	d956      	bls.n	80102dc <forward_dense+0x3b8>
 801022e:	7885      	ldrb	r5, [r0, #2]
 8010230:	edd1 6a02 	vldr	s13, [r1, #8]
 8010234:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010238:	edd5 7a00 	vldr	s15, [r5]
 801023c:	f101 050c 	add.w	r5, r1, #12
 8010240:	45ab      	cmp	fp, r5
 8010242:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010246:	d949      	bls.n	80102dc <forward_dense+0x3b8>
 8010248:	78c5      	ldrb	r5, [r0, #3]
 801024a:	edd1 6a03 	vldr	s13, [r1, #12]
 801024e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010252:	edd5 7a00 	vldr	s15, [r5]
 8010256:	f101 0510 	add.w	r5, r1, #16
 801025a:	45ab      	cmp	fp, r5
 801025c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010260:	d93c      	bls.n	80102dc <forward_dense+0x3b8>
 8010262:	7905      	ldrb	r5, [r0, #4]
 8010264:	edd1 6a04 	vldr	s13, [r1, #16]
 8010268:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801026c:	edd5 7a00 	vldr	s15, [r5]
 8010270:	f101 0514 	add.w	r5, r1, #20
 8010274:	45ab      	cmp	fp, r5
 8010276:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801027a:	d92f      	bls.n	80102dc <forward_dense+0x3b8>
 801027c:	7945      	ldrb	r5, [r0, #5]
 801027e:	edd1 6a05 	vldr	s13, [r1, #20]
 8010282:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010286:	edd5 7a00 	vldr	s15, [r5]
 801028a:	f101 0518 	add.w	r5, r1, #24
 801028e:	45ab      	cmp	fp, r5
 8010290:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010294:	d922      	bls.n	80102dc <forward_dense+0x3b8>
 8010296:	7985      	ldrb	r5, [r0, #6]
 8010298:	edd1 6a06 	vldr	s13, [r1, #24]
 801029c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80102a0:	edd5 7a00 	vldr	s15, [r5]
 80102a4:	f101 051c 	add.w	r5, r1, #28
 80102a8:	45ab      	cmp	fp, r5
 80102aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102ae:	d915      	bls.n	80102dc <forward_dense+0x3b8>
 80102b0:	79c5      	ldrb	r5, [r0, #7]
 80102b2:	edd1 6a07 	vldr	s13, [r1, #28]
 80102b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80102ba:	edd5 7a00 	vldr	s15, [r5]
 80102be:	f101 0520 	add.w	r5, r1, #32
 80102c2:	45ab      	cmp	fp, r5
 80102c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102c8:	d908      	bls.n	80102dc <forward_dense+0x3b8>
 80102ca:	edd1 7a08 	vldr	s15, [r1, #32]
 80102ce:	7a01      	ldrb	r1, [r0, #8]
 80102d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80102d4:	edd1 6a00 	vldr	s13, [r1]
 80102d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102dc:	ee35 5a07 	vadd.f32	s10, s10, s14
 80102e0:	e6f0      	b.n	80100c4 <forward_dense+0x1a0>
 80102e2:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80102ec <forward_dense+0x3c8>
 80102e6:	e6d6      	b.n	8010096 <forward_dense+0x172>
 80102e8:	3ffffff8 	.word	0x3ffffff8
 80102ec:	00000000 	.word	0x00000000
 80102f0:	eeb0 7a48 	vmov.f32	s14, s16
 80102f4:	4650      	mov	r0, sl
 80102f6:	4611      	mov	r1, r2
 80102f8:	468c      	mov	ip, r1
 80102fa:	4606      	mov	r6, r0
 80102fc:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8010300:	ecf6 7a01 	vldmia	r6!, {s15}
 8010304:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010308:	edd5 6a00 	vldr	s13, [r5]
 801030c:	9d08      	ldr	r5, [sp, #32]
 801030e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010312:	42ae      	cmp	r6, r5
 8010314:	d866      	bhi.n	80103e4 <forward_dense+0x4c0>
 8010316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010318:	f101 0711 	add.w	r7, r1, #17
 801031c:	3109      	adds	r1, #9
 801031e:	eba5 0800 	sub.w	r8, r5, r0
 8010322:	3024      	adds	r0, #36	; 0x24
 8010324:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8010328:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 801032c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8010330:	3108      	adds	r1, #8
 8010332:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8010336:	3020      	adds	r0, #32
 8010338:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801033c:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8010340:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8010344:	edd5 7a00 	vldr	s15, [r5]
 8010348:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 801034c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010350:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8010354:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010358:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 801035c:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8010360:	edd5 2a00 	vldr	s5, [r5]
 8010364:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8010368:	eee2 7a83 	vfma.f32	s15, s5, s6
 801036c:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8010370:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010374:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8010378:	ed95 3a00 	vldr	s6, [r5]
 801037c:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8010380:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010384:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010388:	edd5 3a00 	vldr	s7, [r5]
 801038c:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8010390:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010394:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010398:	ed95 4a00 	vldr	s8, [r5]
 801039c:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80103a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80103a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80103a8:	edd5 4a00 	vldr	s9, [r5]
 80103ac:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80103b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80103b4:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80103b8:	edd5 5a00 	vldr	s11, [r5]
 80103bc:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80103c0:	428f      	cmp	r7, r1
 80103c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80103c6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80103ca:	ed95 6a00 	vldr	s12, [r5]
 80103ce:	eee6 7a26 	vfma.f32	s15, s12, s13
 80103d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103d6:	d1a9      	bne.n	801032c <forward_dense+0x408>
 80103d8:	f108 0801 	add.w	r8, r8, #1
 80103dc:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80103e0:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80103e4:	455e      	cmp	r6, fp
 80103e6:	f4bf af79 	bcs.w	80102dc <forward_dense+0x3b8>
 80103ea:	f89c 1000 	ldrb.w	r1, [ip]
 80103ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80103f2:	edd1 7a00 	vldr	s15, [r1]
 80103f6:	4631      	mov	r1, r6
 80103f8:	ecf1 6a01 	vldmia	r1!, {s13}
 80103fc:	458b      	cmp	fp, r1
 80103fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010402:	f67f af6b 	bls.w	80102dc <forward_dense+0x3b8>
 8010406:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801040a:	edd6 6a01 	vldr	s13, [r6, #4]
 801040e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010412:	edd1 7a00 	vldr	s15, [r1]
 8010416:	f106 0108 	add.w	r1, r6, #8
 801041a:	458b      	cmp	fp, r1
 801041c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010420:	f67f af5c 	bls.w	80102dc <forward_dense+0x3b8>
 8010424:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8010428:	edd6 6a02 	vldr	s13, [r6, #8]
 801042c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8010430:	edd1 7a00 	vldr	s15, [r1]
 8010434:	f106 010c 	add.w	r1, r6, #12
 8010438:	458b      	cmp	fp, r1
 801043a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801043e:	f67f af4d 	bls.w	80102dc <forward_dense+0x3b8>
 8010442:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8010446:	edd6 6a03 	vldr	s13, [r6, #12]
 801044a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801044e:	edd1 7a00 	vldr	s15, [r1]
 8010452:	f106 0110 	add.w	r1, r6, #16
 8010456:	458b      	cmp	fp, r1
 8010458:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801045c:	f67f af3e 	bls.w	80102dc <forward_dense+0x3b8>
 8010460:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8010464:	edd6 6a04 	vldr	s13, [r6, #16]
 8010468:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801046c:	edd1 7a00 	vldr	s15, [r1]
 8010470:	f106 0114 	add.w	r1, r6, #20
 8010474:	458b      	cmp	fp, r1
 8010476:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801047a:	f67f af2f 	bls.w	80102dc <forward_dense+0x3b8>
 801047e:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8010482:	edd6 6a05 	vldr	s13, [r6, #20]
 8010486:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801048a:	edd1 7a00 	vldr	s15, [r1]
 801048e:	f106 0118 	add.w	r1, r6, #24
 8010492:	458b      	cmp	fp, r1
 8010494:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010498:	f67f af20 	bls.w	80102dc <forward_dense+0x3b8>
 801049c:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80104a0:	edd6 6a06 	vldr	s13, [r6, #24]
 80104a4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80104a8:	edd1 7a00 	vldr	s15, [r1]
 80104ac:	f106 011c 	add.w	r1, r6, #28
 80104b0:	458b      	cmp	fp, r1
 80104b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104b6:	f67f af11 	bls.w	80102dc <forward_dense+0x3b8>
 80104ba:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80104be:	edd6 6a07 	vldr	s13, [r6, #28]
 80104c2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80104c6:	edd1 7a00 	vldr	s15, [r1]
 80104ca:	f106 0120 	add.w	r1, r6, #32
 80104ce:	458b      	cmp	fp, r1
 80104d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104d4:	f67f af02 	bls.w	80102dc <forward_dense+0x3b8>
 80104d8:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80104dc:	edd6 7a08 	vldr	s15, [r6, #32]
 80104e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80104e4:	edd1 6a00 	vldr	s13, [r1]
 80104e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104ec:	e6f6      	b.n	80102dc <forward_dense+0x3b8>
 80104ee:	eeb0 7a48 	vmov.f32	s14, s16
 80104f2:	4650      	mov	r0, sl
 80104f4:	4611      	mov	r1, r2
 80104f6:	f811 5b01 	ldrb.w	r5, [r1], #1
 80104fa:	ecf0 7a01 	vldmia	r0!, {s15}
 80104fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010502:	edd5 6a00 	vldr	s13, [r5]
 8010506:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801050a:	e6f5      	b.n	80102f8 <forward_dense+0x3d4>
 801050c:	4611      	mov	r1, r2
 801050e:	edda 7a00 	vldr	s15, [sl]
 8010512:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010514:	f811 5b01 	ldrb.w	r5, [r1], #1
 8010518:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 801051c:	ed95 7a00 	vldr	s14, [r5]
 8010520:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010524:	e7e7      	b.n	80104f6 <forward_dense+0x5d2>
 8010526:	9803      	ldr	r0, [sp, #12]
 8010528:	9906      	ldr	r1, [sp, #24]
 801052a:	4288      	cmp	r0, r1
 801052c:	f67f adda 	bls.w	80100e4 <forward_dense+0x1c0>
 8010530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010532:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8010536:	468b      	mov	fp, r1
 8010538:	f100 0c01 	add.w	ip, r0, #1
 801053c:	9805      	ldr	r0, [sp, #20]
 801053e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8010542:	3801      	subs	r0, #1
 8010544:	9008      	str	r0, [sp, #32]
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 80bf 	beq.w	80106ca <forward_dense+0x7a6>
 801054c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801054e:	ecf3 2a01 	vldmia	r3!, {s5}
 8010552:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80102ec <forward_dense+0x3c8>
 8010556:	2900      	cmp	r1, #0
 8010558:	f000 80bf 	beq.w	80106da <forward_dense+0x7b6>
 801055c:	1d10      	adds	r0, r2, #4
 801055e:	f10a 0120 	add.w	r1, sl, #32
 8010562:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8010566:	3004      	adds	r0, #4
 8010568:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 801056c:	3120      	adds	r1, #32
 801056e:	f007 0e0f 	and.w	lr, r7, #15
 8010572:	093f      	lsrs	r7, r7, #4
 8010574:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8010578:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801057c:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8010580:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8010584:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8010588:	edde 7a00 	vldr	s15, [lr]
 801058c:	ed97 3a00 	vldr	s6, [r7]
 8010590:	0937      	lsrs	r7, r6, #4
 8010592:	ee67 7a82 	vmul.f32	s15, s15, s4
 8010596:	f006 060f 	and.w	r6, r6, #15
 801059a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 801059e:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 80105a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80105a6:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 80105aa:	eee3 7a04 	vfma.f32	s15, s6, s8
 80105ae:	ed97 3a00 	vldr	s6, [r7]
 80105b2:	ed96 4a00 	vldr	s8, [r6]
 80105b6:	092e      	lsrs	r6, r5, #4
 80105b8:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 80105bc:	f005 050f 	and.w	r5, r5, #15
 80105c0:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80105c4:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 80105c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80105cc:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80105d0:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80105d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80105d8:	eee4 7a05 	vfma.f32	s15, s8, s10
 80105dc:	ed96 4a00 	vldr	s8, [r6]
 80105e0:	ed95 5a00 	vldr	s10, [r5]
 80105e4:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80105e8:	4560      	cmp	r0, ip
 80105ea:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80105ee:	f005 050f 	and.w	r5, r5, #15
 80105f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80105f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80105fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80105fe:	eee5 7a06 	vfma.f32	s15, s10, s12
 8010602:	ed96 5a00 	vldr	s10, [r6]
 8010606:	ed95 6a00 	vldr	s12, [r5]
 801060a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801060e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010616:	d1a4      	bne.n	8010562 <forward_dense+0x63e>
 8010618:	f1ac 0804 	sub.w	r8, ip, #4
 801061c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8010620:	9905      	ldr	r1, [sp, #20]
 8010622:	458e      	cmp	lr, r1
 8010624:	d229      	bcs.n	801067a <forward_dense+0x756>
 8010626:	9908      	ldr	r1, [sp, #32]
 8010628:	f10e 0008 	add.w	r0, lr, #8
 801062c:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8010630:	eba1 070e 	sub.w	r7, r1, lr
 8010634:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8010638:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 801063c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010640:	3008      	adds	r0, #8
 8010642:	ed50 5a03 	vldr	s11, [r0, #-12]
 8010646:	f001 050f 	and.w	r5, r1, #15
 801064a:	0909      	lsrs	r1, r1, #4
 801064c:	ed50 6a04 	vldr	s13, [r0, #-16]
 8010650:	42b7      	cmp	r7, r6
 8010652:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8010656:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801065a:	edd5 7a00 	vldr	s15, [r5]
 801065e:	ed91 6a00 	vldr	s12, [r1]
 8010662:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010666:	eee6 7a26 	vfma.f32	s15, s12, s13
 801066a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801066e:	d1e5      	bne.n	801063c <forward_dense+0x718>
 8010670:	f109 0901 	add.w	r9, r9, #1
 8010674:	44c8      	add	r8, r9
 8010676:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 801067a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801067c:	b1c1      	cbz	r1, 80106b0 <forward_dense+0x78c>
 801067e:	f898 1000 	ldrb.w	r1, [r8]
 8010682:	edde 7a00 	vldr	s15, [lr]
 8010686:	0909      	lsrs	r1, r1, #4
 8010688:	9804      	ldr	r0, [sp, #16]
 801068a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801068e:	4402      	add	r2, r0
 8010690:	4484      	add	ip, r0
 8010692:	edd1 6a00 	vldr	s13, [r1]
 8010696:	9903      	ldr	r1, [sp, #12]
 8010698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801069c:	ee72 2a87 	vadd.f32	s5, s5, s14
 80106a0:	eceb 2a01 	vstmia	fp!, {s5}
 80106a4:	4559      	cmp	r1, fp
 80106a6:	f63f af4e 	bhi.w	8010546 <forward_dense+0x622>
 80106aa:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80106ae:	e510      	b.n	80100d2 <forward_dense+0x1ae>
 80106b0:	9904      	ldr	r1, [sp, #16]
 80106b2:	ee32 7a87 	vadd.f32	s14, s5, s14
 80106b6:	440a      	add	r2, r1
 80106b8:	448c      	add	ip, r1
 80106ba:	9903      	ldr	r1, [sp, #12]
 80106bc:	ecab 7a01 	vstmia	fp!, {s14}
 80106c0:	458b      	cmp	fp, r1
 80106c2:	d2f2      	bcs.n	80106aa <forward_dense+0x786>
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f47f af41 	bne.w	801054c <forward_dense+0x628>
 80106ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106cc:	eef0 2a48 	vmov.f32	s5, s16
 80106d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8010760 <forward_dense+0x83c>
 80106d4:	2900      	cmp	r1, #0
 80106d6:	f47f af41 	bne.w	801055c <forward_dense+0x638>
 80106da:	46d6      	mov	lr, sl
 80106dc:	4690      	mov	r8, r2
 80106de:	e79f      	b.n	8010620 <forward_dense+0x6fc>
 80106e0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80106e2:	4651      	mov	r1, sl
 80106e4:	9d06      	ldr	r5, [sp, #24]
 80106e6:	9001      	str	r0, [sp, #4]
 80106e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80106ea:	9000      	str	r0, [sp, #0]
 80106ec:	4628      	mov	r0, r5
 80106ee:	f000 fc21 	bl	8010f34 <lite_dense_if32of32wf32>
 80106f2:	462b      	mov	r3, r5
 80106f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80106f6:	4413      	add	r3, r2
 80106f8:	4619      	mov	r1, r3
 80106fa:	9306      	str	r3, [sp, #24]
 80106fc:	e4f2      	b.n	80100e4 <forward_dense+0x1c0>
 80106fe:	b01b      	add	sp, #108	; 0x6c
 8010700:	ecbd 8b02 	vpop	{d8}
 8010704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010708:	4601      	mov	r1, r0
 801070a:	e4eb      	b.n	80100e4 <forward_dense+0x1c0>
 801070c:	4651      	mov	r1, sl
 801070e:	4610      	mov	r0, r2
 8010710:	e572      	b.n	80101f8 <forward_dense+0x2d4>
 8010712:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8010716:	f1b9 0f00 	cmp.w	r9, #0
 801071a:	d016      	beq.n	801074a <forward_dense+0x826>
 801071c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010720:	f000 fdb8 	bl	8011294 <ai_array_get_byte_size>
 8010724:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8010728:	4602      	mov	r2, r0
 801072a:	4641      	mov	r1, r8
 801072c:	4650      	mov	r0, sl
 801072e:	f001 febb 	bl	80124a8 <memcpy>
 8010732:	e44b      	b.n	800ffcc <forward_dense+0xa8>
 8010734:	2b04      	cmp	r3, #4
 8010736:	d00a      	beq.n	801074e <forward_dense+0x82a>
 8010738:	f04f 0900 	mov.w	r9, #0
 801073c:	e441      	b.n	800ffc2 <forward_dense+0x9e>
 801073e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010740:	e417      	b.n	800ff72 <forward_dense+0x4e>
 8010742:	2300      	movs	r3, #0
 8010744:	930d      	str	r3, [sp, #52]	; 0x34
 8010746:	460b      	mov	r3, r1
 8010748:	e413      	b.n	800ff72 <forward_dense+0x4e>
 801074a:	46c2      	mov	sl, r8
 801074c:	e43e      	b.n	800ffcc <forward_dense+0xa8>
 801074e:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8010752:	e43b      	b.n	800ffcc <forward_dense+0xa8>
 8010754:	2300      	movs	r3, #0
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	deff      	udf	#255	; 0xff
 801075a:	2300      	movs	r3, #0
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	deff      	udf	#255	; 0xff
 8010760:	00000000 	.word	0x00000000

08010764 <forward_mp>:
 8010764:	6983      	ldr	r3, [r0, #24]
 8010766:	881a      	ldrh	r2, [r3, #0]
 8010768:	2a00      	cmp	r2, #0
 801076a:	f000 80bc 	beq.w	80108e6 <forward_mp+0x182>
 801076e:	6859      	ldr	r1, [r3, #4]
 8010770:	684b      	ldr	r3, [r1, #4]
 8010772:	b103      	cbz	r3, 8010776 <forward_mp+0x12>
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	2a01      	cmp	r2, #1
 8010778:	f000 80ba 	beq.w	80108f0 <forward_mp+0x18c>
 801077c:	690a      	ldr	r2, [r1, #16]
 801077e:	2a00      	cmp	r2, #0
 8010780:	f000 80b9 	beq.w	80108f6 <forward_mp+0x192>
 8010784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010788:	6811      	ldr	r1, [r2, #0]
 801078a:	b093      	sub	sp, #76	; 0x4c
 801078c:	68ca      	ldr	r2, [r1, #12]
 801078e:	6989      	ldr	r1, [r1, #24]
 8010790:	68d4      	ldr	r4, [r2, #12]
 8010792:	6895      	ldr	r5, [r2, #8]
 8010794:	688a      	ldr	r2, [r1, #8]
 8010796:	68d9      	ldr	r1, [r3, #12]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	9200      	str	r2, [sp, #0]
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80107a0:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80107a4:	930e      	str	r3, [sp, #56]	; 0x38
 80107a6:	9408      	str	r4, [sp, #32]
 80107a8:	9504      	str	r5, [sp, #16]
 80107aa:	e9d2 3600 	ldrd	r3, r6, [r2]
 80107ae:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 80107b2:	69c1      	ldr	r1, [r0, #28]
 80107b4:	f1c3 0a00 	rsb	sl, r3, #0
 80107b8:	960d      	str	r6, [sp, #52]	; 0x34
 80107ba:	9109      	str	r1, [sp, #36]	; 0x24
 80107bc:	6a01      	ldr	r1, [r0, #32]
 80107be:	9705      	str	r7, [sp, #20]
 80107c0:	910a      	str	r1, [sp, #40]	; 0x28
 80107c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80107c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80107c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80107c8:	910c      	str	r1, [sp, #48]	; 0x30
 80107ca:	2c00      	cmp	r4, #0
 80107cc:	f000 8088 	beq.w	80108e0 <forward_mp+0x17c>
 80107d0:	441a      	add	r2, r3
 80107d2:	9b05      	ldr	r3, [sp, #20]
 80107d4:	ea4f 0789 	mov.w	r7, r9, lsl #2
 80107d8:	f04f 0b00 	mov.w	fp, #0
 80107dc:	fb09 f303 	mul.w	r3, r9, r3
 80107e0:	9201      	str	r2, [sp, #4]
 80107e2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80107e6:	4273      	negs	r3, r6
 80107e8:	9310      	str	r3, [sp, #64]	; 0x40
 80107ea:	fb05 f307 	mul.w	r3, r5, r7
 80107ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80107f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107f2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80107f6:	9901      	ldr	r1, [sp, #4]
 80107f8:	9307      	str	r3, [sp, #28]
 80107fa:	428a      	cmp	r2, r1
 80107fc:	bf94      	ite	ls
 80107fe:	eb0a 0e02 	addls.w	lr, sl, r2
 8010802:	eb0a 0e01 	addhi.w	lr, sl, r1
 8010806:	9a04      	ldr	r2, [sp, #16]
 8010808:	2a00      	cmp	r2, #0
 801080a:	d05f      	beq.n	80108cc <forward_mp+0x168>
 801080c:	9a05      	ldr	r2, [sp, #20]
 801080e:	9d00      	ldr	r5, [sp, #0]
 8010810:	fb02 f303 	mul.w	r3, r2, r3
 8010814:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8010818:	9303      	str	r3, [sp, #12]
 801081a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801081c:	18d3      	adds	r3, r2, r3
 801081e:	2200      	movs	r2, #0
 8010820:	9302      	str	r3, [sp, #8]
 8010822:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010824:	9206      	str	r2, [sp, #24]
 8010826:	2b00      	cmp	r3, #0
 8010828:	469b      	mov	fp, r3
 801082a:	db5e      	blt.n	80108ea <forward_mp+0x186>
 801082c:	9a03      	ldr	r2, [sp, #12]
 801082e:	18d6      	adds	r6, r2, r3
 8010830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010832:	9902      	ldr	r1, [sp, #8]
 8010834:	fb06 2607 	mla	r6, r6, r7, r2
 8010838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801083a:	428a      	cmp	r2, r1
 801083c:	bf94      	ite	ls
 801083e:	eb0b 0402 	addls.w	r4, fp, r2
 8010842:	eb0b 0401 	addhi.w	r4, fp, r1
 8010846:	1ae4      	subs	r4, r4, r3
 8010848:	f1b9 0f00 	cmp.w	r9, #0
 801084c:	d008      	beq.n	8010860 <forward_mp+0xfc>
 801084e:	4633      	mov	r3, r6
 8010850:	462a      	mov	r2, r5
 8010852:	19b9      	adds	r1, r7, r6
 8010854:	f853 0b04 	ldr.w	r0, [r3], #4
 8010858:	4299      	cmp	r1, r3
 801085a:	f842 0b04 	str.w	r0, [r2], #4
 801085e:	d1f9      	bne.n	8010854 <forward_mp+0xf0>
 8010860:	9b07      	ldr	r3, [sp, #28]
 8010862:	459e      	cmp	lr, r3
 8010864:	dd1f      	ble.n	80108a6 <forward_mp+0x142>
 8010866:	469c      	mov	ip, r3
 8010868:	fb07 6404 	mla	r4, r7, r4, r6
 801086c:	42a6      	cmp	r6, r4
 801086e:	d214      	bcs.n	801089a <forward_mp+0x136>
 8010870:	f1b9 0f00 	cmp.w	r9, #0
 8010874:	d011      	beq.n	801089a <forward_mp+0x136>
 8010876:	19f1      	adds	r1, r6, r7
 8010878:	4630      	mov	r0, r6
 801087a:	4602      	mov	r2, r0
 801087c:	462b      	mov	r3, r5
 801087e:	ecf2 7a01 	vldmia	r2!, {s15}
 8010882:	ed93 7a00 	vldr	s14, [r3]
 8010886:	428a      	cmp	r2, r1
 8010888:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801088c:	ece3 7a01 	vstmia	r3!, {s15}
 8010890:	d1f5      	bne.n	801087e <forward_mp+0x11a>
 8010892:	4438      	add	r0, r7
 8010894:	4439      	add	r1, r7
 8010896:	42a0      	cmp	r0, r4
 8010898:	d3ef      	bcc.n	801087a <forward_mp+0x116>
 801089a:	f10c 0c01 	add.w	ip, ip, #1
 801089e:	4446      	add	r6, r8
 80108a0:	4444      	add	r4, r8
 80108a2:	45e6      	cmp	lr, ip
 80108a4:	d1e2      	bne.n	801086c <forward_mp+0x108>
 80108a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80108a8:	443d      	add	r5, r7
 80108aa:	9802      	ldr	r0, [sp, #8]
 80108ac:	9a06      	ldr	r2, [sp, #24]
 80108ae:	eb01 030b 	add.w	r3, r1, fp
 80108b2:	1a41      	subs	r1, r0, r1
 80108b4:	3201      	adds	r2, #1
 80108b6:	9102      	str	r1, [sp, #8]
 80108b8:	9904      	ldr	r1, [sp, #16]
 80108ba:	9206      	str	r2, [sp, #24]
 80108bc:	4291      	cmp	r1, r2
 80108be:	d1b2      	bne.n	8010826 <forward_mp+0xc2>
 80108c0:	9b00      	ldr	r3, [sp, #0]
 80108c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108c4:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80108c8:	4413      	add	r3, r2
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108ce:	f10b 0b01 	add.w	fp, fp, #1
 80108d2:	9a01      	ldr	r2, [sp, #4]
 80108d4:	449a      	add	sl, r3
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	9301      	str	r3, [sp, #4]
 80108da:	9b08      	ldr	r3, [sp, #32]
 80108dc:	455b      	cmp	r3, fp
 80108de:	d187      	bne.n	80107f0 <forward_mp+0x8c>
 80108e0:	b013      	add	sp, #76	; 0x4c
 80108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e6:	6853      	ldr	r3, [r2, #4]
 80108e8:	deff      	udf	#255	; 0xff
 80108ea:	9e03      	ldr	r6, [sp, #12]
 80108ec:	2300      	movs	r3, #0
 80108ee:	e79f      	b.n	8010830 <forward_mp+0xcc>
 80108f0:	2300      	movs	r3, #0
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	deff      	udf	#255	; 0xff
 80108f6:	68d3      	ldr	r3, [r2, #12]
 80108f8:	deff      	udf	#255	; 0xff
 80108fa:	bf00      	nop

080108fc <nl_func_relu_array_f32>:
 80108fc:	b410      	push	{r4}
 80108fe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010902:	698c      	ldr	r4, [r1, #24]
 8010904:	6981      	ldr	r1, [r0, #24]
 8010906:	4413      	add	r3, r2
 8010908:	68a0      	ldr	r0, [r4, #8]
 801090a:	6889      	ldr	r1, [r1, #8]
 801090c:	009a      	lsls	r2, r3, #2
 801090e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010912:	4298      	cmp	r0, r3
 8010914:	d80f      	bhi.n	8010936 <nl_func_relu_array_f32+0x3a>
 8010916:	3204      	adds	r2, #4
 8010918:	3304      	adds	r3, #4
 801091a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801093c <nl_func_relu_array_f32+0x40>
 801091e:	4411      	add	r1, r2
 8010920:	461a      	mov	r2, r3
 8010922:	ed73 7a01 	vldmdb	r3!, {s15}
 8010926:	3a08      	subs	r2, #8
 8010928:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801092c:	ed61 7a01 	vstmdb	r1!, {s15}
 8010930:	68a0      	ldr	r0, [r4, #8]
 8010932:	4290      	cmp	r0, r2
 8010934:	d9f4      	bls.n	8010920 <nl_func_relu_array_f32+0x24>
 8010936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	00000000 	.word	0x00000000

08010940 <forward_relu>:
 8010940:	6982      	ldr	r2, [r0, #24]
 8010942:	8813      	ldrh	r3, [r2, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d05b      	beq.n	8010a00 <forward_relu+0xc0>
 8010948:	6851      	ldr	r1, [r2, #4]
 801094a:	684a      	ldr	r2, [r1, #4]
 801094c:	b102      	cbz	r2, 8010950 <forward_relu+0x10>
 801094e:	6812      	ldr	r2, [r2, #0]
 8010950:	2b01      	cmp	r3, #1
 8010952:	f000 8123 	beq.w	8010b9c <forward_relu+0x25c>
 8010956:	b470      	push	{r4, r5, r6}
 8010958:	690b      	ldr	r3, [r1, #16]
 801095a:	b103      	cbz	r3, 801095e <forward_relu+0x1e>
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	69c6      	ldr	r6, [r0, #28]
 8010960:	2e00      	cmp	r6, #0
 8010962:	f000 809e 	beq.w	8010aa2 <forward_relu+0x162>
 8010966:	6871      	ldr	r1, [r6, #4]
 8010968:	6998      	ldr	r0, [r3, #24]
 801096a:	2901      	cmp	r1, #1
 801096c:	f000 80c3 	beq.w	8010af6 <forward_relu+0x1b6>
 8010970:	6893      	ldr	r3, [r2, #8]
 8010972:	6991      	ldr	r1, [r2, #24]
 8010974:	0a1b      	lsrs	r3, r3, #8
 8010976:	6880      	ldr	r0, [r0, #8]
 8010978:	688d      	ldr	r5, [r1, #8]
 801097a:	f000 80f2 	beq.w	8010b62 <forward_relu+0x222>
 801097e:	68d4      	ldr	r4, [r2, #12]
 8010980:	2201      	movs	r2, #1
 8010982:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010986:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801098a:	42a3      	cmp	r3, r4
 801098c:	fb01 f202 	mul.w	r2, r1, r2
 8010990:	d1f9      	bne.n	8010986 <forward_relu+0x46>
 8010992:	68b3      	ldr	r3, [r6, #8]
 8010994:	ed93 7a02 	vldr	s14, [r3, #8]
 8010998:	edd3 6a00 	vldr	s13, [r3]
 801099c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80109a0:	ed93 6a01 	vldr	s12, [r3, #4]
 80109a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109a8:	d42c      	bmi.n	8010a04 <forward_relu+0xc4>
 80109aa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80109ae:	4413      	add	r3, r2
 80109b0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80109b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80109b8:	4295      	cmp	r5, r2
 80109ba:	d81f      	bhi.n	80109fc <forward_relu+0xbc>
 80109bc:	3204      	adds	r2, #4
 80109be:	1d01      	adds	r1, r0, #4
 80109c0:	e00d      	b.n	80109de <forward_relu+0x9e>
 80109c2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80109c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ca:	db03      	blt.n	80109d4 <forward_relu+0x94>
 80109cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80109d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80109d4:	3b08      	subs	r3, #8
 80109d6:	ed61 7a01 	vstmdb	r1!, {s15}
 80109da:	429d      	cmp	r5, r3
 80109dc:	d80e      	bhi.n	80109fc <forward_relu+0xbc>
 80109de:	4613      	mov	r3, r2
 80109e0:	ed72 7a01 	vldmdb	r2!, {s15}
 80109e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80109e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ec:	d9e9      	bls.n	80109c2 <forward_relu+0x82>
 80109ee:	3b08      	subs	r3, #8
 80109f0:	eef0 7a47 	vmov.f32	s15, s14
 80109f4:	429d      	cmp	r5, r3
 80109f6:	ed61 7a01 	vstmdb	r1!, {s15}
 80109fa:	d9f0      	bls.n	80109de <forward_relu+0x9e>
 80109fc:	bc70      	pop	{r4, r5, r6}
 80109fe:	4770      	bx	lr
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	deff      	udf	#255	; 0xff
 8010a04:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8010a08:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8010a0c:	4411      	add	r1, r2
 8010a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a12:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8010a16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010a1a:	d11f      	bne.n	8010a5c <forward_relu+0x11c>
 8010a1c:	429d      	cmp	r5, r3
 8010a1e:	d8ed      	bhi.n	80109fc <forward_relu+0xbc>
 8010a20:	1b5d      	subs	r5, r3, r5
 8010a22:	1d1a      	adds	r2, r3, #4
 8010a24:	1d01      	adds	r1, r0, #4
 8010a26:	2000      	movs	r0, #0
 8010a28:	f025 0503 	bic.w	r5, r5, #3
 8010a2c:	1b5b      	subs	r3, r3, r5
 8010a2e:	ed72 7a01 	vldmdb	r2!, {s15}
 8010a32:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a3a:	dc0a      	bgt.n	8010a52 <forward_relu+0x112>
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8010a42:	d0db      	beq.n	80109fc <forward_relu+0xbc>
 8010a44:	ed72 7a01 	vldmdb	r2!, {s15}
 8010a48:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a50:	ddf4      	ble.n	8010a3c <forward_relu+0xfc>
 8010a52:	429a      	cmp	r2, r3
 8010a54:	ed61 7a01 	vstmdb	r1!, {s15}
 8010a58:	d1e9      	bne.n	8010a2e <forward_relu+0xee>
 8010a5a:	e7cf      	b.n	80109fc <forward_relu+0xbc>
 8010a5c:	429d      	cmp	r5, r3
 8010a5e:	d8cd      	bhi.n	80109fc <forward_relu+0xbc>
 8010a60:	1b5d      	subs	r5, r3, r5
 8010a62:	1d1a      	adds	r2, r3, #4
 8010a64:	1d01      	adds	r1, r0, #4
 8010a66:	f025 0503 	bic.w	r5, r5, #3
 8010a6a:	1b5b      	subs	r3, r3, r5
 8010a6c:	ed72 7a01 	vldmdb	r2!, {s15}
 8010a70:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a78:	db0e      	blt.n	8010a98 <forward_relu+0x158>
 8010a7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a84:	ed61 7a01 	vstmdb	r1!, {s15}
 8010a88:	d0b8      	beq.n	80109fc <forward_relu+0xbc>
 8010a8a:	ed72 7a01 	vldmdb	r2!, {s15}
 8010a8e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8010a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a96:	daf0      	bge.n	8010a7a <forward_relu+0x13a>
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	ed61 7a01 	vstmdb	r1!, {s15}
 8010a9e:	d1e5      	bne.n	8010a6c <forward_relu+0x12c>
 8010aa0:	e7ac      	b.n	80109fc <forward_relu+0xbc>
 8010aa2:	6999      	ldr	r1, [r3, #24]
 8010aa4:	6893      	ldr	r3, [r2, #8]
 8010aa6:	6990      	ldr	r0, [r2, #24]
 8010aa8:	0a1b      	lsrs	r3, r3, #8
 8010aaa:	6889      	ldr	r1, [r1, #8]
 8010aac:	6884      	ldr	r4, [r0, #8]
 8010aae:	d06e      	beq.n	8010b8e <forward_relu+0x24e>
 8010ab0:	68d5      	ldr	r5, [r2, #12]
 8010ab2:	2201      	movs	r2, #1
 8010ab4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010ab8:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8010abc:	429d      	cmp	r5, r3
 8010abe:	fb00 f202 	mul.w	r2, r0, r2
 8010ac2:	d1f9      	bne.n	8010ab8 <forward_relu+0x178>
 8010ac4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010ac8:	4413      	add	r3, r2
 8010aca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010ace:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010ad2:	4294      	cmp	r4, r2
 8010ad4:	d892      	bhi.n	80109fc <forward_relu+0xbc>
 8010ad6:	3204      	adds	r2, #4
 8010ad8:	3104      	adds	r1, #4
 8010ada:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010ba4 <forward_relu+0x264>
 8010ade:	4613      	mov	r3, r2
 8010ae0:	ed72 7a01 	vldmdb	r2!, {s15}
 8010ae4:	3b08      	subs	r3, #8
 8010ae6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8010aea:	ed61 7a01 	vstmdb	r1!, {s15}
 8010aee:	429c      	cmp	r4, r3
 8010af0:	d9f5      	bls.n	8010ade <forward_relu+0x19e>
 8010af2:	bc70      	pop	{r4, r5, r6}
 8010af4:	4770      	bx	lr
 8010af6:	6993      	ldr	r3, [r2, #24]
 8010af8:	6880      	ldr	r0, [r0, #8]
 8010afa:	689c      	ldr	r4, [r3, #8]
 8010afc:	6893      	ldr	r3, [r2, #8]
 8010afe:	0a1b      	lsrs	r3, r3, #8
 8010b00:	d047      	beq.n	8010b92 <forward_relu+0x252>
 8010b02:	68d5      	ldr	r5, [r2, #12]
 8010b04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010b08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b0c:	42ab      	cmp	r3, r5
 8010b0e:	fb02 f101 	mul.w	r1, r2, r1
 8010b12:	d1f9      	bne.n	8010b08 <forward_relu+0x1c8>
 8010b14:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8010b18:	68b3      	ldr	r3, [r6, #8]
 8010b1a:	440a      	add	r2, r1
 8010b1c:	ed93 7a00 	vldr	s14, [r3]
 8010b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b24:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8010b28:	429c      	cmp	r4, r3
 8010b2a:	f63f af67 	bhi.w	80109fc <forward_relu+0xbc>
 8010b2e:	1d02      	adds	r2, r0, #4
 8010b30:	3304      	adds	r3, #4
 8010b32:	2000      	movs	r0, #0
 8010b34:	ed53 7a01 	vldr	s15, [r3, #-4]
 8010b38:	1f19      	subs	r1, r3, #4
 8010b3a:	3b08      	subs	r3, #8
 8010b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b44:	d406      	bmi.n	8010b54 <forward_relu+0x214>
 8010b46:	429c      	cmp	r4, r3
 8010b48:	f842 0d04 	str.w	r0, [r2, #-4]!
 8010b4c:	f63f af56 	bhi.w	80109fc <forward_relu+0xbc>
 8010b50:	460b      	mov	r3, r1
 8010b52:	e7ef      	b.n	8010b34 <forward_relu+0x1f4>
 8010b54:	429c      	cmp	r4, r3
 8010b56:	ed62 7a01 	vstmdb	r2!, {s15}
 8010b5a:	f63f af4f 	bhi.w	80109fc <forward_relu+0xbc>
 8010b5e:	460b      	mov	r3, r1
 8010b60:	e7e8      	b.n	8010b34 <forward_relu+0x1f4>
 8010b62:	68b3      	ldr	r3, [r6, #8]
 8010b64:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b68:	edd3 6a00 	vldr	s13, [r3]
 8010b6c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010b70:	ed93 6a01 	vldr	s12, [r3, #4]
 8010b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b78:	d401      	bmi.n	8010b7e <forward_relu+0x23e>
 8010b7a:	462a      	mov	r2, r5
 8010b7c:	e71e      	b.n	80109bc <forward_relu+0x7c>
 8010b7e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8010b82:	462b      	mov	r3, r5
 8010b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b88:	f47f af6a 	bne.w	8010a60 <forward_relu+0x120>
 8010b8c:	e748      	b.n	8010a20 <forward_relu+0xe0>
 8010b8e:	4622      	mov	r2, r4
 8010b90:	e7a1      	b.n	8010ad6 <forward_relu+0x196>
 8010b92:	68b2      	ldr	r2, [r6, #8]
 8010b94:	4623      	mov	r3, r4
 8010b96:	ed92 7a00 	vldr	s14, [r2]
 8010b9a:	e7c8      	b.n	8010b2e <forward_relu+0x1ee>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	deff      	udf	#255	; 0xff
 8010ba2:	bf00      	nop
 8010ba4:	00000000 	.word	0x00000000

08010ba8 <forward_sm>:
 8010ba8:	6982      	ldr	r2, [r0, #24]
 8010baa:	8813      	ldrh	r3, [r2, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d078      	beq.n	8010ca2 <forward_sm+0xfa>
 8010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	ed2d 8b04 	vpush	{d8-d9}
 8010bb8:	6852      	ldr	r2, [r2, #4]
 8010bba:	b085      	sub	sp, #20
 8010bbc:	6854      	ldr	r4, [r2, #4]
 8010bbe:	b104      	cbz	r4, 8010bc2 <forward_sm+0x1a>
 8010bc0:	6824      	ldr	r4, [r4, #0]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d072      	beq.n	8010cac <forward_sm+0x104>
 8010bc6:	6913      	ldr	r3, [r2, #16]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d072      	beq.n	8010cb2 <forward_sm+0x10a>
 8010bcc:	681e      	ldr	r6, [r3, #0]
 8010bce:	68a3      	ldr	r3, [r4, #8]
 8010bd0:	68e0      	ldr	r0, [r4, #12]
 8010bd2:	68f2      	ldr	r2, [r6, #12]
 8010bd4:	0a1b      	lsrs	r3, r3, #8
 8010bd6:	6845      	ldr	r5, [r0, #4]
 8010bd8:	6857      	ldr	r7, [r2, #4]
 8010bda:	d064      	beq.n	8010ca6 <forward_sm+0xfe>
 8010bdc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8010be0:	2201      	movs	r2, #1
 8010be2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010be6:	4298      	cmp	r0, r3
 8010be8:	fb01 f202 	mul.w	r2, r1, r2
 8010bec:	d1f9      	bne.n	8010be2 <forward_sm+0x3a>
 8010bee:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8010bf2:	69a2      	ldr	r2, [r4, #24]
 8010bf4:	69b3      	ldr	r3, [r6, #24]
 8010bf6:	6892      	ldr	r2, [r2, #8]
 8010bf8:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8010bfc:	eb02 0309 	add.w	r3, r2, r9
 8010c00:	429a      	cmp	r2, r3
 8010c02:	9301      	str	r3, [sp, #4]
 8010c04:	d248      	bcs.n	8010c98 <forward_sm+0xf0>
 8010c06:	00bb      	lsls	r3, r7, #2
 8010c08:	2d01      	cmp	r5, #1
 8010c0a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8010c0e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8010c12:	9303      	str	r3, [sp, #12]
 8010c14:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8010c18:	463e      	mov	r6, r7
 8010c1a:	ed92 8a00 	vldr	s16, [r2]
 8010c1e:	9302      	str	r3, [sp, #8]
 8010c20:	d937      	bls.n	8010c92 <forward_sm+0xea>
 8010c22:	1d13      	adds	r3, r2, #4
 8010c24:	ecf3 7a01 	vldmia	r3!, {s15}
 8010c28:	429e      	cmp	r6, r3
 8010c2a:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8010c2e:	d1f9      	bne.n	8010c24 <forward_sm+0x7c>
 8010c30:	4692      	mov	sl, r2
 8010c32:	46c3      	mov	fp, r8
 8010c34:	46c1      	mov	r9, r8
 8010c36:	eddf 8a20 	vldr	s17, [pc, #128]	; 8010cb8 <forward_sm+0x110>
 8010c3a:	2400      	movs	r4, #0
 8010c3c:	ecba 0a01 	vldmia	sl!, {s0}
 8010c40:	3401      	adds	r4, #1
 8010c42:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010c46:	f002 f937 	bl	8012eb8 <expf>
 8010c4a:	42a5      	cmp	r5, r4
 8010c4c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8010c50:	eca9 0a01 	vstmia	r9!, {s0}
 8010c54:	d8f2      	bhi.n	8010c3c <forward_sm+0x94>
 8010c56:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c5e:	d00b      	beq.n	8010c78 <forward_sm+0xd0>
 8010c60:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8010c64:	2300      	movs	r3, #0
 8010c66:	eddb 7a00 	vldr	s15, [fp]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	429d      	cmp	r5, r3
 8010c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c72:	eceb 7a01 	vstmia	fp!, {s15}
 8010c76:	d8f6      	bhi.n	8010c66 <forward_sm+0xbe>
 8010c78:	9b03      	ldr	r3, [sp, #12]
 8010c7a:	463a      	mov	r2, r7
 8010c7c:	9901      	ldr	r1, [sp, #4]
 8010c7e:	4498      	add	r8, r3
 8010c80:	9b02      	ldr	r3, [sp, #8]
 8010c82:	42b9      	cmp	r1, r7
 8010c84:	441e      	add	r6, r3
 8010c86:	d907      	bls.n	8010c98 <forward_sm+0xf0>
 8010c88:	2d01      	cmp	r5, #1
 8010c8a:	441f      	add	r7, r3
 8010c8c:	ed92 8a00 	vldr	s16, [r2]
 8010c90:	d8c7      	bhi.n	8010c22 <forward_sm+0x7a>
 8010c92:	2d00      	cmp	r5, #0
 8010c94:	d0f0      	beq.n	8010c78 <forward_sm+0xd0>
 8010c96:	e7cb      	b.n	8010c30 <forward_sm+0x88>
 8010c98:	b005      	add	sp, #20
 8010c9a:	ecbd 8b04 	vpop	{d8-d9}
 8010c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	deff      	udf	#255	; 0xff
 8010ca6:	f04f 0904 	mov.w	r9, #4
 8010caa:	e7a2      	b.n	8010bf2 <forward_sm+0x4a>
 8010cac:	2300      	movs	r3, #0
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	deff      	udf	#255	; 0xff
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	deff      	udf	#255	; 0xff
 8010cb6:	bf00      	nop
 8010cb8:	00000000 	.word	0x00000000

08010cbc <forward_bn>:
 8010cbc:	6982      	ldr	r2, [r0, #24]
 8010cbe:	8813      	ldrh	r3, [r2, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d055      	beq.n	8010d70 <forward_bn+0xb4>
 8010cc4:	6852      	ldr	r2, [r2, #4]
 8010cc6:	6850      	ldr	r0, [r2, #4]
 8010cc8:	b100      	cbz	r0, 8010ccc <forward_bn+0x10>
 8010cca:	6800      	ldr	r0, [r0, #0]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	f000 809c 	beq.w	8010e0a <forward_bn+0x14e>
 8010cd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd6:	6915      	ldr	r5, [r2, #16]
 8010cd8:	b105      	cbz	r5, 8010cdc <forward_bn+0x20>
 8010cda:	682d      	ldr	r5, [r5, #0]
 8010cdc:	2b02      	cmp	r3, #2
 8010cde:	d049      	beq.n	8010d74 <forward_bn+0xb8>
 8010ce0:	69d1      	ldr	r1, [r2, #28]
 8010ce2:	2900      	cmp	r1, #0
 8010ce4:	d049      	beq.n	8010d7a <forward_bn+0xbe>
 8010ce6:	8b13      	ldrh	r3, [r2, #24]
 8010ce8:	f8d1 c000 	ldr.w	ip, [r1]
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	d945      	bls.n	8010d7c <forward_bn+0xc0>
 8010cf0:	6883      	ldr	r3, [r0, #8]
 8010cf2:	684f      	ldr	r7, [r1, #4]
 8010cf4:	0a1b      	lsrs	r3, r3, #8
 8010cf6:	d06c      	beq.n	8010dd2 <forward_bn+0x116>
 8010cf8:	68c1      	ldr	r1, [r0, #12]
 8010cfa:	2401      	movs	r4, #1
 8010cfc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010d00:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010d04:	428b      	cmp	r3, r1
 8010d06:	fb02 f404 	mul.w	r4, r2, r4
 8010d0a:	d1f9      	bne.n	8010d00 <forward_bn+0x44>
 8010d0c:	69aa      	ldr	r2, [r5, #24]
 8010d0e:	6981      	ldr	r1, [r0, #24]
 8010d10:	685d      	ldr	r5, [r3, #4]
 8010d12:	6888      	ldr	r0, [r1, #8]
 8010d14:	6896      	ldr	r6, [r2, #8]
 8010d16:	b3b7      	cbz	r7, 8010d86 <forward_bn+0xca>
 8010d18:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8010d22:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8010d26:	b30c      	cbz	r4, 8010d6c <forward_bn+0xb0>
 8010d28:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 8010d2c:	f04f 0e00 	mov.w	lr, #0
 8010d30:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8010d34:	00bf      	lsls	r7, r7, #2
 8010d36:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 8010d3a:	4672      	mov	r2, lr
 8010d3c:	44ae      	add	lr, r5
 8010d3e:	4596      	cmp	lr, r2
 8010d40:	d911      	bls.n	8010d66 <forward_bn+0xaa>
 8010d42:	eb07 030c 	add.w	r3, r7, ip
 8010d46:	4648      	mov	r0, r9
 8010d48:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8010d4c:	4641      	mov	r1, r8
 8010d4e:	ecf3 6a01 	vldmia	r3!, {s13}
 8010d52:	ecb0 7a01 	vldmia	r0!, {s14}
 8010d56:	ecf1 7a01 	vldmia	r1!, {s15}
 8010d5a:	4563      	cmp	r3, ip
 8010d5c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010d60:	ece2 7a01 	vstmia	r2!, {s15}
 8010d64:	d1f3      	bne.n	8010d4e <forward_bn+0x92>
 8010d66:	4574      	cmp	r4, lr
 8010d68:	44d4      	add	ip, sl
 8010d6a:	d8e6      	bhi.n	8010d3a <forward_bn+0x7e>
 8010d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	deff      	udf	#255	; 0xff
 8010d74:	2300      	movs	r3, #0
 8010d76:	685b      	ldr	r3, [r3, #4]
 8010d78:	deff      	udf	#255	; 0xff
 8010d7a:	468c      	mov	ip, r1
 8010d7c:	6883      	ldr	r3, [r0, #8]
 8010d7e:	0a1b      	lsrs	r3, r3, #8
 8010d80:	d037      	beq.n	8010df2 <forward_bn+0x136>
 8010d82:	2700      	movs	r7, #0
 8010d84:	e7b8      	b.n	8010cf8 <forward_bn+0x3c>
 8010d86:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010d8a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8010d8e:	2c00      	cmp	r4, #0
 8010d90:	d0ec      	beq.n	8010d6c <forward_bn+0xb0>
 8010d92:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 8010d96:	46b6      	mov	lr, r6
 8010d98:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8010d9c:	f04f 0c00 	mov.w	ip, #0
 8010da0:	00bf      	lsls	r7, r7, #2
 8010da2:	00ae      	lsls	r6, r5, #2
 8010da4:	4663      	mov	r3, ip
 8010da6:	44ac      	add	ip, r5
 8010da8:	4563      	cmp	r3, ip
 8010daa:	d20c      	bcs.n	8010dc6 <forward_bn+0x10a>
 8010dac:	19c3      	adds	r3, r0, r7
 8010dae:	4641      	mov	r1, r8
 8010db0:	4672      	mov	r2, lr
 8010db2:	ecf3 7a01 	vldmia	r3!, {s15}
 8010db6:	ecb1 7a01 	vldmia	r1!, {s14}
 8010dba:	4298      	cmp	r0, r3
 8010dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010dc0:	ece2 7a01 	vstmia	r2!, {s15}
 8010dc4:	d1f5      	bne.n	8010db2 <forward_bn+0xf6>
 8010dc6:	4564      	cmp	r4, ip
 8010dc8:	44b6      	add	lr, r6
 8010dca:	4430      	add	r0, r6
 8010dcc:	d8ea      	bhi.n	8010da4 <forward_bn+0xe8>
 8010dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dd2:	68c1      	ldr	r1, [r0, #12]
 8010dd4:	69ab      	ldr	r3, [r5, #24]
 8010dd6:	6982      	ldr	r2, [r0, #24]
 8010dd8:	684d      	ldr	r5, [r1, #4]
 8010dda:	6890      	ldr	r0, [r2, #8]
 8010ddc:	689e      	ldr	r6, [r3, #8]
 8010dde:	b177      	cbz	r7, 8010dfe <forward_bn+0x142>
 8010de0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8010de4:	2401      	movs	r4, #1
 8010de6:	69bb      	ldr	r3, [r7, #24]
 8010de8:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8010dec:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8010df0:	e79a      	b.n	8010d28 <forward_bn+0x6c>
 8010df2:	68c1      	ldr	r1, [r0, #12]
 8010df4:	69ab      	ldr	r3, [r5, #24]
 8010df6:	6982      	ldr	r2, [r0, #24]
 8010df8:	684d      	ldr	r5, [r1, #4]
 8010dfa:	6890      	ldr	r0, [r2, #8]
 8010dfc:	689e      	ldr	r6, [r3, #8]
 8010dfe:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8010e02:	2401      	movs	r4, #1
 8010e04:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8010e08:	e7c3      	b.n	8010d92 <forward_bn+0xd6>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	deff      	udf	#255	; 0xff

08010e10 <ai_check_custom_types>:
 8010e10:	b082      	sub	sp, #8
 8010e12:	4b12      	ldr	r3, [pc, #72]	; (8010e5c <ai_check_custom_types+0x4c>)
 8010e14:	9301      	str	r3, [sp, #4]
 8010e16:	b118      	cbz	r0, 8010e20 <ai_check_custom_types+0x10>
 8010e18:	7803      	ldrb	r3, [r0, #0]
 8010e1a:	2b03      	cmp	r3, #3
 8010e1c:	d002      	beq.n	8010e24 <ai_check_custom_types+0x14>
 8010e1e:	2000      	movs	r0, #0
 8010e20:	b002      	add	sp, #8
 8010e22:	4770      	bx	lr
 8010e24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d004      	beq.n	8010e36 <ai_check_custom_types+0x26>
 8010e2c:	2001      	movs	r0, #1
 8010e2e:	f080 0001 	eor.w	r0, r0, #1
 8010e32:	b002      	add	sp, #8
 8010e34:	4770      	bx	lr
 8010e36:	7842      	ldrb	r2, [r0, #1]
 8010e38:	3001      	adds	r0, #1
 8010e3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d1f4      	bne.n	8010e2c <ai_check_custom_types+0x1c>
 8010e42:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8010e46:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d1ee      	bne.n	8010e2c <ai_check_custom_types+0x1c>
 8010e4e:	7842      	ldrb	r2, [r0, #1]
 8010e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d1e9      	bne.n	8010e2c <ai_check_custom_types+0x1c>
 8010e58:	2000      	movs	r0, #0
 8010e5a:	e7e8      	b.n	8010e2e <ai_check_custom_types+0x1e>
 8010e5c:	84048403 	.word	0x84048403

08010e60 <ai_layers_init_all>:
 8010e60:	2100      	movs	r1, #0
 8010e62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010e64:	b13b      	cbz	r3, 8010e76 <ai_layers_init_all+0x16>
 8010e66:	691a      	ldr	r2, [r3, #16]
 8010e68:	3101      	adds	r1, #1
 8010e6a:	60d8      	str	r0, [r3, #12]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	4613      	mov	r3, r2
 8010e70:	d001      	beq.n	8010e76 <ai_layers_init_all+0x16>
 8010e72:	2a00      	cmp	r2, #0
 8010e74:	d1f6      	bne.n	8010e64 <ai_layers_init_all+0x4>
 8010e76:	4608      	mov	r0, r1
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop

08010e7c <ai_layers_post_init_all>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	2500      	movs	r5, #0
 8010e80:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010e82:	b16c      	cbz	r4, 8010ea0 <ai_layers_post_init_all+0x24>
 8010e84:	6863      	ldr	r3, [r4, #4]
 8010e86:	07db      	lsls	r3, r3, #31
 8010e88:	d504      	bpl.n	8010e94 <ai_layers_post_init_all+0x18>
 8010e8a:	6a23      	ldr	r3, [r4, #32]
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	b10b      	cbz	r3, 8010e94 <ai_layers_post_init_all+0x18>
 8010e90:	3501      	adds	r5, #1
 8010e92:	4798      	blx	r3
 8010e94:	6923      	ldr	r3, [r4, #16]
 8010e96:	42a3      	cmp	r3, r4
 8010e98:	461c      	mov	r4, r3
 8010e9a:	d001      	beq.n	8010ea0 <ai_layers_post_init_all+0x24>
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1f0      	bne.n	8010e82 <ai_layers_post_init_all+0x6>
 8010ea0:	4628      	mov	r0, r5
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}

08010ea4 <ai_layers_forward_all>:
 8010ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8010eac:	4604      	mov	r4, r0
 8010eae:	f1b8 0f00 	cmp.w	r8, #0
 8010eb2:	d02a      	beq.n	8010f0a <ai_layers_forward_all+0x66>
 8010eb4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8010eb6:	6381      	str	r1, [r0, #56]	; 0x38
 8010eb8:	b319      	cbz	r1, 8010f02 <ai_layers_forward_all+0x5e>
 8010eba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010ebc:	2001      	movs	r0, #1
 8010ebe:	47c0      	blx	r8
 8010ec0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010ec2:	b1f6      	cbz	r6, 8010f02 <ai_layers_forward_all+0x5e>
 8010ec4:	2700      	movs	r7, #0
 8010ec6:	4631      	mov	r1, r6
 8010ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010eca:	2002      	movs	r0, #2
 8010ecc:	47c0      	blx	r8
 8010ece:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010ed0:	4628      	mov	r0, r5
 8010ed2:	696b      	ldr	r3, [r5, #20]
 8010ed4:	4798      	blx	r3
 8010ed6:	692e      	ldr	r6, [r5, #16]
 8010ed8:	2003      	movs	r0, #3
 8010eda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010edc:	42b5      	cmp	r5, r6
 8010ede:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010ee0:	d007      	beq.n	8010ef2 <ai_layers_forward_all+0x4e>
 8010ee2:	47c0      	blx	r8
 8010ee4:	3701      	adds	r7, #1
 8010ee6:	63a6      	str	r6, [r4, #56]	; 0x38
 8010ee8:	2e00      	cmp	r6, #0
 8010eea:	d1ec      	bne.n	8010ec6 <ai_layers_forward_all+0x22>
 8010eec:	4638      	mov	r0, r7
 8010eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ef2:	2003      	movs	r0, #3
 8010ef4:	3701      	adds	r7, #1
 8010ef6:	47c0      	blx	r8
 8010ef8:	2300      	movs	r3, #0
 8010efa:	4638      	mov	r0, r7
 8010efc:	63a3      	str	r3, [r4, #56]	; 0x38
 8010efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f02:	2700      	movs	r7, #0
 8010f04:	4638      	mov	r0, r7
 8010f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f0a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010f0c:	6385      	str	r5, [r0, #56]	; 0x38
 8010f0e:	2d00      	cmp	r5, #0
 8010f10:	d0f7      	beq.n	8010f02 <ai_layers_forward_all+0x5e>
 8010f12:	4647      	mov	r7, r8
 8010f14:	696b      	ldr	r3, [r5, #20]
 8010f16:	4628      	mov	r0, r5
 8010f18:	4798      	blx	r3
 8010f1a:	462b      	mov	r3, r5
 8010f1c:	692d      	ldr	r5, [r5, #16]
 8010f1e:	429d      	cmp	r5, r3
 8010f20:	d004      	beq.n	8010f2c <ai_layers_forward_all+0x88>
 8010f22:	3701      	adds	r7, #1
 8010f24:	63a5      	str	r5, [r4, #56]	; 0x38
 8010f26:	2d00      	cmp	r5, #0
 8010f28:	d1f4      	bne.n	8010f14 <ai_layers_forward_all+0x70>
 8010f2a:	e7df      	b.n	8010eec <ai_layers_forward_all+0x48>
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	3701      	adds	r7, #1
 8010f30:	63a3      	str	r3, [r4, #56]	; 0x38
 8010f32:	e7db      	b.n	8010eec <ai_layers_forward_all+0x48>

08010f34 <lite_dense_if32of32wf32>:
 8010f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f38:	ed2d 8b0c 	vpush	{d8-d13}
 8010f3c:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8010f40:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8010f44:	4287      	cmp	r7, r0
 8010f46:	f240 8105 	bls.w	8011154 <lite_dense_if32of32wf32+0x220>
 8010f4a:	f1a6 0810 	sub.w	r8, r6, #16
 8010f4e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8010f52:	4605      	mov	r5, r0
 8010f54:	f006 0b0f 	and.w	fp, r6, #15
 8010f58:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8010f5c:	f108 0801 	add.w	r8, r8, #1
 8010f60:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8010f64:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8010f68:	2e0f      	cmp	r6, #15
 8010f6a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8011180 <lite_dense_if32of32wf32+0x24c>
 8010f6e:	f240 8102 	bls.w	8011176 <lite_dense_if32of32wf32+0x242>
 8010f72:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8010f76:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8010f7a:	46b6      	mov	lr, r6
 8010f7c:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8010f80:	f1ae 0e10 	sub.w	lr, lr, #16
 8010f84:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8010f88:	3440      	adds	r4, #64	; 0x40
 8010f8a:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8010f8e:	f1be 0f0f 	cmp.w	lr, #15
 8010f92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f96:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 8010f9a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8010f9e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8010fa2:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 8010fa6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010faa:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8010fae:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8010fb2:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 8010fb6:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8010fba:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8010fbe:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8010fc2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8010fc6:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8010fca:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8010fce:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8010fd2:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 8010fd6:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 8010fda:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8010fde:	eeed 7a26 	vfma.f32	s15, s26, s13
 8010fe2:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 8010fe6:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 8010fea:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8010fee:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8010ff2:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 8010ff6:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 8010ffa:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010ffe:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8011002:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8011006:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 801100a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 801100e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8011012:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8011016:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801101a:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 801101e:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8011022:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8011026:	eee9 7a89 	vfma.f32	s15, s19, s18
 801102a:	eee8 7a88 	vfma.f32	s15, s17, s16
 801102e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8011032:	eee1 7a21 	vfma.f32	s15, s2, s3
 8011036:	eee2 7a22 	vfma.f32	s15, s4, s5
 801103a:	eee3 7a23 	vfma.f32	s15, s6, s7
 801103e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8011042:	eee5 7a25 	vfma.f32	s15, s10, s11
 8011046:	eee6 7a26 	vfma.f32	s15, s12, s13
 801104a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801104e:	d895      	bhi.n	8010f7c <lite_dense_if32of32wf32+0x48>
 8011050:	eb02 0e0a 	add.w	lr, r2, sl
 8011054:	465c      	mov	r4, fp
 8011056:	46c4      	mov	ip, r8
 8011058:	2c00      	cmp	r4, #0
 801105a:	d075      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801105c:	eddc 6a00 	vldr	s13, [ip]
 8011060:	2c01      	cmp	r4, #1
 8011062:	edde 7a00 	vldr	s15, [lr]
 8011066:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801106a:	d06d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801106c:	eddc 6a01 	vldr	s13, [ip, #4]
 8011070:	2c02      	cmp	r4, #2
 8011072:	edde 7a01 	vldr	s15, [lr, #4]
 8011076:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801107a:	d065      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801107c:	eddc 6a02 	vldr	s13, [ip, #8]
 8011080:	2c03      	cmp	r4, #3
 8011082:	edde 7a02 	vldr	s15, [lr, #8]
 8011086:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801108a:	d05d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801108c:	eddc 6a03 	vldr	s13, [ip, #12]
 8011090:	2c04      	cmp	r4, #4
 8011092:	edde 7a03 	vldr	s15, [lr, #12]
 8011096:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801109a:	d055      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801109c:	eddc 6a04 	vldr	s13, [ip, #16]
 80110a0:	2c05      	cmp	r4, #5
 80110a2:	edde 7a04 	vldr	s15, [lr, #16]
 80110a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110aa:	d04d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 80110ac:	eddc 6a05 	vldr	s13, [ip, #20]
 80110b0:	2c06      	cmp	r4, #6
 80110b2:	edde 7a05 	vldr	s15, [lr, #20]
 80110b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110ba:	d045      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 80110bc:	eddc 6a06 	vldr	s13, [ip, #24]
 80110c0:	2c07      	cmp	r4, #7
 80110c2:	edde 7a06 	vldr	s15, [lr, #24]
 80110c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110ca:	d03d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 80110cc:	eddc 6a07 	vldr	s13, [ip, #28]
 80110d0:	2c08      	cmp	r4, #8
 80110d2:	edde 7a07 	vldr	s15, [lr, #28]
 80110d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110da:	d035      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 80110dc:	eddc 6a08 	vldr	s13, [ip, #32]
 80110e0:	2c09      	cmp	r4, #9
 80110e2:	edde 7a08 	vldr	s15, [lr, #32]
 80110e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110ea:	d02d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 80110ec:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80110f0:	2c0a      	cmp	r4, #10
 80110f2:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80110f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80110fa:	d025      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 80110fc:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8011100:	2c0b      	cmp	r4, #11
 8011102:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8011106:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801110a:	d01d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801110c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8011110:	2c0c      	cmp	r4, #12
 8011112:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8011116:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801111a:	d015      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801111c:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8011120:	3c0d      	subs	r4, #13
 8011122:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8011126:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801112a:	d00d      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801112c:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8011130:	2c01      	cmp	r4, #1
 8011132:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8011136:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801113a:	d005      	beq.n	8011148 <lite_dense_if32of32wf32+0x214>
 801113c:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8011140:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8011144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011148:	eca5 7a01 	vstmia	r5!, {s14}
 801114c:	42af      	cmp	r7, r5
 801114e:	444a      	add	r2, r9
 8011150:	f63f af0a 	bhi.w	8010f68 <lite_dense_if32of32wf32+0x34>
 8011154:	b15b      	cbz	r3, 801116e <lite_dense_if32of32wf32+0x23a>
 8011156:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011158:	b14a      	cbz	r2, 801116e <lite_dense_if32of32wf32+0x23a>
 801115a:	edd0 7a00 	vldr	s15, [r0]
 801115e:	ecb3 7a01 	vldmia	r3!, {s14}
 8011162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011166:	ece0 7a01 	vstmia	r0!, {s15}
 801116a:	4287      	cmp	r7, r0
 801116c:	d1f5      	bne.n	801115a <lite_dense_if32of32wf32+0x226>
 801116e:	ecbd 8b0c 	vpop	{d8-d13}
 8011172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011176:	4634      	mov	r4, r6
 8011178:	4696      	mov	lr, r2
 801117a:	468c      	mov	ip, r1
 801117c:	e76c      	b.n	8011058 <lite_dense_if32of32wf32+0x124>
 801117e:	bf00      	nop
 8011180:	00000000 	.word	0x00000000

08011184 <ai_version_get>:
 8011184:	0212      	lsls	r2, r2, #8
 8011186:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801118a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801118e:	4770      	bx	lr

08011190 <get_tensor_byte_size>:
 8011190:	b430      	push	{r4, r5}
 8011192:	6985      	ldr	r5, [r0, #24]
 8011194:	68c4      	ldr	r4, [r0, #12]
 8011196:	6941      	ldr	r1, [r0, #20]
 8011198:	4b06      	ldr	r3, [pc, #24]	; (80111b4 <get_tensor_byte_size+0x24>)
 801119a:	6828      	ldr	r0, [r5, #0]
 801119c:	4a06      	ldr	r2, [pc, #24]	; (80111b8 <get_tensor_byte_size+0x28>)
 801119e:	4003      	ands	r3, r0
 80111a0:	68c9      	ldr	r1, [r1, #12]
 80111a2:	68e0      	ldr	r0, [r4, #12]
 80111a4:	4293      	cmp	r3, r2
 80111a6:	fb01 f000 	mul.w	r0, r1, r0
 80111aa:	d101      	bne.n	80111b0 <get_tensor_byte_size+0x20>
 80111ac:	3007      	adds	r0, #7
 80111ae:	08c0      	lsrs	r0, r0, #3
 80111b0:	bc30      	pop	{r4, r5}
 80111b2:	4770      	bx	lr
 80111b4:	017fffff 	.word	0x017fffff
 80111b8:	000400c0 	.word	0x000400c0

080111bc <ai_array_to_buffer_fmt>:
 80111bc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80111c0:	2b02      	cmp	r3, #2
 80111c2:	d050      	beq.n	8011266 <ai_array_to_buffer_fmt+0xaa>
 80111c4:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80111c8:	4b29      	ldr	r3, [pc, #164]	; (8011270 <ai_array_to_buffer_fmt+0xb4>)
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d00b      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 80111ce:	dc1c      	bgt.n	801120a <ai_array_to_buffer_fmt+0x4e>
 80111d0:	4b28      	ldr	r3, [pc, #160]	; (8011274 <ai_array_to_buffer_fmt+0xb8>)
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d007      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 80111d6:	dd0b      	ble.n	80111f0 <ai_array_to_buffer_fmt+0x34>
 80111d8:	4b27      	ldr	r3, [pc, #156]	; (8011278 <ai_array_to_buffer_fmt+0xbc>)
 80111da:	429a      	cmp	r2, r3
 80111dc:	d003      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 80111de:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d131      	bne.n	801124a <ai_array_to_buffer_fmt+0x8e>
 80111e6:	4613      	mov	r3, r2
 80111e8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80111ec:	4318      	orrs	r0, r3
 80111ee:	4770      	bx	lr
 80111f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80111f4:	429a      	cmp	r2, r3
 80111f6:	d0f6      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 80111f8:	dd2c      	ble.n	8011254 <ai_array_to_buffer_fmt+0x98>
 80111fa:	4b20      	ldr	r3, [pc, #128]	; (801127c <ai_array_to_buffer_fmt+0xc0>)
 80111fc:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011200:	429a      	cmp	r2, r3
 8011202:	bf18      	it	ne
 8011204:	2340      	movne	r3, #64	; 0x40
 8011206:	4318      	orrs	r0, r3
 8011208:	4770      	bx	lr
 801120a:	4b1d      	ldr	r3, [pc, #116]	; (8011280 <ai_array_to_buffer_fmt+0xc4>)
 801120c:	429a      	cmp	r2, r3
 801120e:	d0ea      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 8011210:	dd0e      	ble.n	8011230 <ai_array_to_buffer_fmt+0x74>
 8011212:	4b1c      	ldr	r3, [pc, #112]	; (8011284 <ai_array_to_buffer_fmt+0xc8>)
 8011214:	429a      	cmp	r2, r3
 8011216:	d0e6      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 8011218:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 801121c:	429a      	cmp	r2, r3
 801121e:	d0e2      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 8011220:	4b19      	ldr	r3, [pc, #100]	; (8011288 <ai_array_to_buffer_fmt+0xcc>)
 8011222:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8011226:	429a      	cmp	r2, r3
 8011228:	bf18      	it	ne
 801122a:	2340      	movne	r3, #64	; 0x40
 801122c:	4318      	orrs	r0, r3
 801122e:	4770      	bx	lr
 8011230:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011234:	429a      	cmp	r2, r3
 8011236:	d0d6      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 8011238:	3307      	adds	r3, #7
 801123a:	429a      	cmp	r2, r3
 801123c:	d0d3      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 801123e:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8011242:	429a      	cmp	r2, r3
 8011244:	bf18      	it	ne
 8011246:	2340      	movne	r3, #64	; 0x40
 8011248:	e7ce      	b.n	80111e8 <ai_array_to_buffer_fmt+0x2c>
 801124a:	4b10      	ldr	r3, [pc, #64]	; (801128c <ai_array_to_buffer_fmt+0xd0>)
 801124c:	429a      	cmp	r2, r3
 801124e:	bf18      	it	ne
 8011250:	2340      	movne	r3, #64	; 0x40
 8011252:	e7c9      	b.n	80111e8 <ai_array_to_buffer_fmt+0x2c>
 8011254:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011258:	429a      	cmp	r2, r3
 801125a:	d0c4      	beq.n	80111e6 <ai_array_to_buffer_fmt+0x2a>
 801125c:	3380      	adds	r3, #128	; 0x80
 801125e:	429a      	cmp	r2, r3
 8011260:	bf18      	it	ne
 8011262:	2340      	movne	r3, #64	; 0x40
 8011264:	e7c0      	b.n	80111e8 <ai_array_to_buffer_fmt+0x2c>
 8011266:	4b0a      	ldr	r3, [pc, #40]	; (8011290 <ai_array_to_buffer_fmt+0xd4>)
 8011268:	4003      	ands	r3, r0
 801126a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801126e:	e7bb      	b.n	80111e8 <ai_array_to_buffer_fmt+0x2c>
 8011270:	00840040 	.word	0x00840040
 8011274:	00040840 	.word	0x00040840
 8011278:	00041040 	.word	0x00041040
 801127c:	00040447 	.word	0x00040447
 8011280:	00840840 	.word	0x00840840
 8011284:	00841040 	.word	0x00841040
 8011288:	0084084f 	.word	0x0084084f
 801128c:	0004084f 	.word	0x0004084f
 8011290:	00803fff 	.word	0x00803fff

08011294 <ai_array_get_byte_size>:
 8011294:	b319      	cbz	r1, 80112de <ai_array_get_byte_size+0x4a>
 8011296:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801129a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 801129e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80112a2:	11c0      	asrs	r0, r0, #7
 80112a4:	fb03 f101 	mul.w	r1, r3, r1
 80112a8:	2a04      	cmp	r2, #4
 80112aa:	f101 0107 	add.w	r1, r1, #7
 80112ae:	f021 0107 	bic.w	r1, r1, #7
 80112b2:	fa21 f10c 	lsr.w	r1, r1, ip
 80112b6:	d00b      	beq.n	80112d0 <ai_array_get_byte_size+0x3c>
 80112b8:	2a08      	cmp	r2, #8
 80112ba:	d002      	beq.n	80112c2 <ai_array_get_byte_size+0x2e>
 80112bc:	3107      	adds	r1, #7
 80112be:	08c8      	lsrs	r0, r1, #3
 80112c0:	4770      	bx	lr
 80112c2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80112c6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80112ca:	3107      	adds	r1, #7
 80112cc:	08c8      	lsrs	r0, r1, #3
 80112ce:	4770      	bx	lr
 80112d0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80112d4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80112d8:	3107      	adds	r1, #7
 80112da:	08c8      	lsrs	r0, r1, #3
 80112dc:	4770      	bx	lr
 80112de:	4608      	mov	r0, r1
 80112e0:	4770      	bx	lr
 80112e2:	bf00      	nop

080112e4 <ai_array_get_data_byte_size>:
 80112e4:	b161      	cbz	r1, 8011300 <ai_array_get_data_byte_size+0x1c>
 80112e6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80112ea:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80112ee:	fb03 f101 	mul.w	r1, r3, r1
 80112f2:	1dc8      	adds	r0, r1, #7
 80112f4:	f020 0007 	bic.w	r0, r0, #7
 80112f8:	40d0      	lsrs	r0, r2
 80112fa:	3007      	adds	r0, #7
 80112fc:	08c0      	lsrs	r0, r0, #3
 80112fe:	4770      	bx	lr
 8011300:	4608      	mov	r0, r1
 8011302:	4770      	bx	lr

08011304 <arm_rfft_fast_init_f32>:
 8011304:	084b      	lsrs	r3, r1, #1
 8011306:	2b80      	cmp	r3, #128	; 0x80
 8011308:	b430      	push	{r4, r5}
 801130a:	8201      	strh	r1, [r0, #16]
 801130c:	8003      	strh	r3, [r0, #0]
 801130e:	d070      	beq.n	80113f2 <arm_rfft_fast_init_f32+0xee>
 8011310:	d916      	bls.n	8011340 <arm_rfft_fast_init_f32+0x3c>
 8011312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011316:	d05f      	beq.n	80113d8 <arm_rfft_fast_init_f32+0xd4>
 8011318:	d936      	bls.n	8011388 <arm_rfft_fast_init_f32+0x84>
 801131a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801131e:	d026      	beq.n	801136e <arm_rfft_fast_init_f32+0x6a>
 8011320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011324:	d112      	bne.n	801134c <arm_rfft_fast_init_f32+0x48>
 8011326:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 801132a:	4c38      	ldr	r4, [pc, #224]	; (801140c <arm_rfft_fast_init_f32+0x108>)
 801132c:	4938      	ldr	r1, [pc, #224]	; (8011410 <arm_rfft_fast_init_f32+0x10c>)
 801132e:	2300      	movs	r3, #0
 8011330:	4a38      	ldr	r2, [pc, #224]	; (8011414 <arm_rfft_fast_init_f32+0x110>)
 8011332:	8185      	strh	r5, [r0, #12]
 8011334:	6084      	str	r4, [r0, #8]
 8011336:	6041      	str	r1, [r0, #4]
 8011338:	6142      	str	r2, [r0, #20]
 801133a:	4618      	mov	r0, r3
 801133c:	bc30      	pop	{r4, r5}
 801133e:	4770      	bx	lr
 8011340:	2b20      	cmp	r3, #32
 8011342:	d031      	beq.n	80113a8 <arm_rfft_fast_init_f32+0xa4>
 8011344:	2b40      	cmp	r3, #64	; 0x40
 8011346:	d006      	beq.n	8011356 <arm_rfft_fast_init_f32+0x52>
 8011348:	2b10      	cmp	r3, #16
 801134a:	d039      	beq.n	80113c0 <arm_rfft_fast_init_f32+0xbc>
 801134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011350:	bc30      	pop	{r4, r5}
 8011352:	4618      	mov	r0, r3
 8011354:	4770      	bx	lr
 8011356:	2538      	movs	r5, #56	; 0x38
 8011358:	4c2f      	ldr	r4, [pc, #188]	; (8011418 <arm_rfft_fast_init_f32+0x114>)
 801135a:	4930      	ldr	r1, [pc, #192]	; (801141c <arm_rfft_fast_init_f32+0x118>)
 801135c:	2300      	movs	r3, #0
 801135e:	4a30      	ldr	r2, [pc, #192]	; (8011420 <arm_rfft_fast_init_f32+0x11c>)
 8011360:	8185      	strh	r5, [r0, #12]
 8011362:	6084      	str	r4, [r0, #8]
 8011364:	6041      	str	r1, [r0, #4]
 8011366:	6142      	str	r2, [r0, #20]
 8011368:	4618      	mov	r0, r3
 801136a:	bc30      	pop	{r4, r5}
 801136c:	4770      	bx	lr
 801136e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8011372:	4c2c      	ldr	r4, [pc, #176]	; (8011424 <arm_rfft_fast_init_f32+0x120>)
 8011374:	492c      	ldr	r1, [pc, #176]	; (8011428 <arm_rfft_fast_init_f32+0x124>)
 8011376:	2300      	movs	r3, #0
 8011378:	4a2c      	ldr	r2, [pc, #176]	; (801142c <arm_rfft_fast_init_f32+0x128>)
 801137a:	8185      	strh	r5, [r0, #12]
 801137c:	6084      	str	r4, [r0, #8]
 801137e:	6041      	str	r1, [r0, #4]
 8011380:	6142      	str	r2, [r0, #20]
 8011382:	4618      	mov	r0, r3
 8011384:	bc30      	pop	{r4, r5}
 8011386:	4770      	bx	lr
 8011388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801138c:	d1de      	bne.n	801134c <arm_rfft_fast_init_f32+0x48>
 801138e:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8011392:	4c27      	ldr	r4, [pc, #156]	; (8011430 <arm_rfft_fast_init_f32+0x12c>)
 8011394:	4927      	ldr	r1, [pc, #156]	; (8011434 <arm_rfft_fast_init_f32+0x130>)
 8011396:	2300      	movs	r3, #0
 8011398:	4a27      	ldr	r2, [pc, #156]	; (8011438 <arm_rfft_fast_init_f32+0x134>)
 801139a:	8185      	strh	r5, [r0, #12]
 801139c:	6084      	str	r4, [r0, #8]
 801139e:	6041      	str	r1, [r0, #4]
 80113a0:	6142      	str	r2, [r0, #20]
 80113a2:	4618      	mov	r0, r3
 80113a4:	bc30      	pop	{r4, r5}
 80113a6:	4770      	bx	lr
 80113a8:	2530      	movs	r5, #48	; 0x30
 80113aa:	4c24      	ldr	r4, [pc, #144]	; (801143c <arm_rfft_fast_init_f32+0x138>)
 80113ac:	4924      	ldr	r1, [pc, #144]	; (8011440 <arm_rfft_fast_init_f32+0x13c>)
 80113ae:	2300      	movs	r3, #0
 80113b0:	4a24      	ldr	r2, [pc, #144]	; (8011444 <arm_rfft_fast_init_f32+0x140>)
 80113b2:	8185      	strh	r5, [r0, #12]
 80113b4:	6084      	str	r4, [r0, #8]
 80113b6:	6041      	str	r1, [r0, #4]
 80113b8:	6142      	str	r2, [r0, #20]
 80113ba:	4618      	mov	r0, r3
 80113bc:	bc30      	pop	{r4, r5}
 80113be:	4770      	bx	lr
 80113c0:	2514      	movs	r5, #20
 80113c2:	4c21      	ldr	r4, [pc, #132]	; (8011448 <arm_rfft_fast_init_f32+0x144>)
 80113c4:	4921      	ldr	r1, [pc, #132]	; (801144c <arm_rfft_fast_init_f32+0x148>)
 80113c6:	2300      	movs	r3, #0
 80113c8:	4a21      	ldr	r2, [pc, #132]	; (8011450 <arm_rfft_fast_init_f32+0x14c>)
 80113ca:	8185      	strh	r5, [r0, #12]
 80113cc:	6084      	str	r4, [r0, #8]
 80113ce:	6041      	str	r1, [r0, #4]
 80113d0:	6142      	str	r2, [r0, #20]
 80113d2:	4618      	mov	r0, r3
 80113d4:	bc30      	pop	{r4, r5}
 80113d6:	4770      	bx	lr
 80113d8:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80113dc:	4c1d      	ldr	r4, [pc, #116]	; (8011454 <arm_rfft_fast_init_f32+0x150>)
 80113de:	491e      	ldr	r1, [pc, #120]	; (8011458 <arm_rfft_fast_init_f32+0x154>)
 80113e0:	2300      	movs	r3, #0
 80113e2:	4a1e      	ldr	r2, [pc, #120]	; (801145c <arm_rfft_fast_init_f32+0x158>)
 80113e4:	8185      	strh	r5, [r0, #12]
 80113e6:	6084      	str	r4, [r0, #8]
 80113e8:	6041      	str	r1, [r0, #4]
 80113ea:	6142      	str	r2, [r0, #20]
 80113ec:	4618      	mov	r0, r3
 80113ee:	bc30      	pop	{r4, r5}
 80113f0:	4770      	bx	lr
 80113f2:	25d0      	movs	r5, #208	; 0xd0
 80113f4:	4c1a      	ldr	r4, [pc, #104]	; (8011460 <arm_rfft_fast_init_f32+0x15c>)
 80113f6:	491b      	ldr	r1, [pc, #108]	; (8011464 <arm_rfft_fast_init_f32+0x160>)
 80113f8:	2300      	movs	r3, #0
 80113fa:	4a1b      	ldr	r2, [pc, #108]	; (8011468 <arm_rfft_fast_init_f32+0x164>)
 80113fc:	8185      	strh	r5, [r0, #12]
 80113fe:	6084      	str	r4, [r0, #8]
 8011400:	6041      	str	r1, [r0, #4]
 8011402:	6142      	str	r2, [r0, #20]
 8011404:	4618      	mov	r0, r3
 8011406:	bc30      	pop	{r4, r5}
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	08181390 	.word	0x08181390
 8011410:	08172588 	.word	0x08172588
 8011414:	081786f8 	.word	0x081786f8
 8011418:	08176688 	.word	0x08176688
 801141c:	08183150 	.word	0x08183150
 8011420:	08185640 	.word	0x08185640
 8011424:	0817f078 	.word	0x0817f078
 8011428:	0817cf78 	.word	0x0817cf78
 801142c:	081766f8 	.word	0x081766f8
 8011430:	081852d0 	.word	0x081852d0
 8011434:	0817c6f8 	.word	0x0817c6f8
 8011438:	08183350 	.word	0x08183350
 801143c:	0817ff30 	.word	0x0817ff30
 8011440:	0817ef78 	.word	0x0817ef78
 8011444:	08176588 	.word	0x08176588
 8011448:	0817fe88 	.word	0x0817fe88
 801144c:	0817cef8 	.word	0x0817cef8
 8011450:	0817feb0 	.word	0x0817feb0
 8011454:	08183b50 	.word	0x08183b50
 8011458:	08180390 	.word	0x08180390
 801145c:	08183ed0 	.word	0x08183ed0
 8011460:	08185840 	.word	0x08185840
 8011464:	0817ff90 	.word	0x0817ff90
 8011468:	08184ed0 	.word	0x08184ed0

0801146c <arm_rfft_fast_f32>:
 801146c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011470:	8a05      	ldrh	r5, [r0, #16]
 8011472:	4606      	mov	r6, r0
 8011474:	4617      	mov	r7, r2
 8011476:	460c      	mov	r4, r1
 8011478:	086d      	lsrs	r5, r5, #1
 801147a:	8005      	strh	r5, [r0, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d15e      	bne.n	801153e <arm_rfft_fast_f32+0xd2>
 8011480:	461a      	mov	r2, r3
 8011482:	2301      	movs	r3, #1
 8011484:	f000 fbde 	bl	8011c44 <arm_cfft_f32>
 8011488:	edd4 7a00 	vldr	s15, [r4]
 801148c:	ed94 7a01 	vldr	s14, [r4, #4]
 8011490:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011494:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011498:	8832      	ldrh	r2, [r6, #0]
 801149a:	ee37 7a07 	vadd.f32	s14, s14, s14
 801149e:	6975      	ldr	r5, [r6, #20]
 80114a0:	3a01      	subs	r2, #1
 80114a2:	eeb0 3a46 	vmov.f32	s6, s12
 80114a6:	3510      	adds	r5, #16
 80114a8:	f107 0610 	add.w	r6, r7, #16
 80114ac:	ee77 6a87 	vadd.f32	s13, s15, s14
 80114b0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80114b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80114b8:	f104 0310 	add.w	r3, r4, #16
 80114bc:	3808      	subs	r0, #8
 80114be:	ee26 7a86 	vmul.f32	s14, s13, s12
 80114c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80114c6:	ed87 7a00 	vstr	s14, [r7]
 80114ca:	edc7 7a01 	vstr	s15, [r7, #4]
 80114ce:	ed90 7a02 	vldr	s14, [r0, #8]
 80114d2:	3a01      	subs	r2, #1
 80114d4:	ed53 6a02 	vldr	s13, [r3, #-8]
 80114d8:	f1a0 0008 	sub.w	r0, r0, #8
 80114dc:	ed15 6a02 	vldr	s12, [r5, #-8]
 80114e0:	f103 0308 	add.w	r3, r3, #8
 80114e4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80114e8:	edd0 3a05 	vldr	s7, [r0, #20]
 80114ec:	ed13 5a03 	vldr	s10, [r3, #-12]
 80114f0:	ee77 4a26 	vadd.f32	s9, s14, s13
 80114f4:	ed55 5a01 	vldr	s11, [r5, #-4]
 80114f8:	f106 0608 	add.w	r6, r6, #8
 80114fc:	ee66 6a27 	vmul.f32	s13, s12, s15
 8011500:	f105 0508 	add.w	r5, r5, #8
 8011504:	ee33 4a85 	vadd.f32	s8, s7, s10
 8011508:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801150c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8011510:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011514:	ee26 6a04 	vmul.f32	s12, s12, s8
 8011518:	ee77 7a05 	vadd.f32	s15, s14, s10
 801151c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011520:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011524:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8011528:	ee67 7a83 	vmul.f32	s15, s15, s6
 801152c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011530:	ed46 7a03 	vstr	s15, [r6, #-12]
 8011534:	ed06 7a04 	vstr	s14, [r6, #-16]
 8011538:	d1c9      	bne.n	80114ce <arm_rfft_fast_f32+0x62>
 801153a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801153e:	edd1 7a00 	vldr	s15, [r1]
 8011542:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8011546:	edd1 6a01 	vldr	s13, [r1, #4]
 801154a:	1e68      	subs	r0, r5, #1
 801154c:	6975      	ldr	r5, [r6, #20]
 801154e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011552:	00c1      	lsls	r1, r0, #3
 8011554:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011558:	ee27 7a23 	vmul.f32	s14, s14, s7
 801155c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011560:	ed82 7a00 	vstr	s14, [r2]
 8011564:	edc2 7a01 	vstr	s15, [r2, #4]
 8011568:	b3e0      	cbz	r0, 80115e4 <arm_rfft_fast_f32+0x178>
 801156a:	3908      	subs	r1, #8
 801156c:	f104 0210 	add.w	r2, r4, #16
 8011570:	3510      	adds	r5, #16
 8011572:	440c      	add	r4, r1
 8011574:	f107 0110 	add.w	r1, r7, #16
 8011578:	ed94 7a02 	vldr	s14, [r4, #8]
 801157c:	3801      	subs	r0, #1
 801157e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8011582:	f1a4 0408 	sub.w	r4, r4, #8
 8011586:	ed15 6a02 	vldr	s12, [r5, #-8]
 801158a:	f102 0208 	add.w	r2, r2, #8
 801158e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011592:	ed94 4a05 	vldr	s8, [r4, #20]
 8011596:	ed12 5a03 	vldr	s10, [r2, #-12]
 801159a:	ee77 6a26 	vadd.f32	s13, s14, s13
 801159e:	ed55 5a01 	vldr	s11, [r5, #-4]
 80115a2:	f101 0108 	add.w	r1, r1, #8
 80115a6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80115aa:	f105 0508 	add.w	r5, r5, #8
 80115ae:	ee74 4a05 	vadd.f32	s9, s8, s10
 80115b2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80115b6:	ee35 5a44 	vsub.f32	s10, s10, s8
 80115ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80115be:	ee26 6a24 	vmul.f32	s12, s12, s9
 80115c2:	ee77 7a05 	vadd.f32	s15, s14, s10
 80115c6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80115ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80115ce:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80115d2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80115d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80115da:	ed41 7a03 	vstr	s15, [r1, #-12]
 80115de:	ed01 7a04 	vstr	s14, [r1, #-16]
 80115e2:	d1c9      	bne.n	8011578 <arm_rfft_fast_f32+0x10c>
 80115e4:	461a      	mov	r2, r3
 80115e6:	4639      	mov	r1, r7
 80115e8:	4630      	mov	r0, r6
 80115ea:	2301      	movs	r3, #1
 80115ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115f0:	f000 bb28 	b.w	8011c44 <arm_cfft_f32>

080115f4 <arm_cfft_radix8by2_f32>:
 80115f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115f8:	4607      	mov	r7, r0
 80115fa:	4608      	mov	r0, r1
 80115fc:	ed2d 8b06 	vpush	{d8-d10}
 8011600:	f8b7 e000 	ldrh.w	lr, [r7]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801160a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 801160e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8011612:	f000 80b0 	beq.w	8011776 <arm_cfft_radix8by2_f32+0x182>
 8011616:	008b      	lsls	r3, r1, #2
 8011618:	3210      	adds	r2, #16
 801161a:	f100 0610 	add.w	r6, r0, #16
 801161e:	f108 0510 	add.w	r5, r8, #16
 8011622:	3310      	adds	r3, #16
 8011624:	18c4      	adds	r4, r0, r3
 8011626:	4443      	add	r3, r8
 8011628:	ed55 6a04 	vldr	s13, [r5, #-16]
 801162c:	f1be 0e01 	subs.w	lr, lr, #1
 8011630:	ed56 4a04 	vldr	s9, [r6, #-16]
 8011634:	f104 0410 	add.w	r4, r4, #16
 8011638:	ed15 7a03 	vldr	s14, [r5, #-12]
 801163c:	f106 0610 	add.w	r6, r6, #16
 8011640:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8011644:	ed55 7a02 	vldr	s15, [r5, #-8]
 8011648:	ed55 2a01 	vldr	s5, [r5, #-4]
 801164c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8011650:	ed53 0a04 	vldr	s1, [r3, #-16]
 8011654:	f102 0210 	add.w	r2, r2, #16
 8011658:	ed13 5a03 	vldr	s10, [r3, #-12]
 801165c:	f105 0510 	add.w	r5, r5, #16
 8011660:	ed13 3a02 	vldr	s6, [r3, #-8]
 8011664:	f103 0310 	add.w	r3, r3, #16
 8011668:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 801166c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8011670:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8011674:	ee33 8a83 	vadd.f32	s16, s7, s6
 8011678:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 801167c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8011680:	ee34 0a06 	vadd.f32	s0, s8, s12
 8011684:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8011688:	ee76 aa87 	vadd.f32	s21, s13, s14
 801168c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8011690:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8011694:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8011698:	ee35 9aa0 	vadd.f32	s18, s11, s1
 801169c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80116a0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80116a4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80116a8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 80116ac:	ee72 9a22 	vadd.f32	s19, s4, s5
 80116b0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80116b4:	ee35 5a41 	vsub.f32	s10, s10, s2
 80116b8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 80116bc:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 80116c0:	ee36 6a44 	vsub.f32	s12, s12, s8
 80116c4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 80116c8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80116cc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 80116d0:	ee72 7a62 	vsub.f32	s15, s4, s5
 80116d4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 80116d8:	ee73 2a63 	vsub.f32	s5, s6, s7
 80116dc:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80116e0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80116e4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80116e8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80116ec:	ee27 2a26 	vmul.f32	s4, s14, s13
 80116f0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80116f4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80116f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80116fc:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011700:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011704:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011708:	ee37 7a64 	vsub.f32	s14, s14, s9
 801170c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011710:	ee33 4a02 	vadd.f32	s8, s6, s4
 8011714:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8011718:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 801171c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8011720:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8011724:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8011728:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 801172c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8011730:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8011734:	ee27 4a87 	vmul.f32	s8, s15, s14
 8011738:	ee61 5a87 	vmul.f32	s11, s3, s14
 801173c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011740:	ee22 5a87 	vmul.f32	s10, s5, s14
 8011744:	ee26 7a07 	vmul.f32	s14, s12, s14
 8011748:	ee26 6a26 	vmul.f32	s12, s12, s13
 801174c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8011750:	ee74 4a84 	vadd.f32	s9, s9, s8
 8011754:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011758:	ee35 6a46 	vsub.f32	s12, s10, s12
 801175c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011760:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8011764:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8011768:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 801176c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8011770:	f47f af5a 	bne.w	8011628 <arm_cfft_radix8by2_f32+0x34>
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	b28c      	uxth	r4, r1
 8011778:	2302      	movs	r3, #2
 801177a:	4621      	mov	r1, r4
 801177c:	f000 fb78 	bl	8011e70 <arm_radix8_butterfly_f32>
 8011780:	4621      	mov	r1, r4
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	4640      	mov	r0, r8
 8011786:	2302      	movs	r3, #2
 8011788:	ecbd 8b06 	vpop	{d8-d10}
 801178c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011790:	f000 bb6e 	b.w	8011e70 <arm_radix8_butterfly_f32>

08011794 <arm_cfft_radix8by4_f32>:
 8011794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011798:	ed2d 8b06 	vpush	{d8-d10}
 801179c:	8804      	ldrh	r4, [r0, #0]
 801179e:	b08f      	sub	sp, #60	; 0x3c
 80117a0:	ed91 6a00 	vldr	s12, [r1]
 80117a4:	460a      	mov	r2, r1
 80117a6:	0864      	lsrs	r4, r4, #1
 80117a8:	ed91 7a01 	vldr	s14, [r1, #4]
 80117ac:	9101      	str	r1, [sp, #4]
 80117ae:	00a3      	lsls	r3, r4, #2
 80117b0:	6841      	ldr	r1, [r0, #4]
 80117b2:	0864      	lsrs	r4, r4, #1
 80117b4:	900c      	str	r0, [sp, #48]	; 0x30
 80117b6:	9205      	str	r2, [sp, #20]
 80117b8:	f101 0610 	add.w	r6, r1, #16
 80117bc:	4625      	mov	r5, r4
 80117be:	940b      	str	r4, [sp, #44]	; 0x2c
 80117c0:	f101 0408 	add.w	r4, r1, #8
 80117c4:	9602      	str	r6, [sp, #8]
 80117c6:	9407      	str	r4, [sp, #28]
 80117c8:	18d4      	adds	r4, r2, r3
 80117ca:	1eaa      	subs	r2, r5, #2
 80117cc:	f101 0518 	add.w	r5, r1, #24
 80117d0:	18e0      	adds	r0, r4, r3
 80117d2:	edd4 4a00 	vldr	s9, [r4]
 80117d6:	ed94 4a01 	vldr	s8, [r4, #4]
 80117da:	46a6      	mov	lr, r4
 80117dc:	edd0 6a00 	vldr	s13, [r0]
 80117e0:	18c7      	adds	r7, r0, r3
 80117e2:	edd0 7a01 	vldr	s15, [r0, #4]
 80117e6:	46a0      	mov	r8, r4
 80117e8:	ee76 5a26 	vadd.f32	s11, s12, s13
 80117ec:	ed97 5a00 	vldr	s10, [r7]
 80117f0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80117f4:	4604      	mov	r4, r0
 80117f6:	9506      	str	r5, [sp, #24]
 80117f8:	4605      	mov	r5, r0
 80117fa:	ee75 2aa4 	vadd.f32	s5, s11, s9
 80117fe:	900a      	str	r0, [sp, #40]	; 0x28
 8011800:	9801      	ldr	r0, [sp, #4]
 8011802:	ee37 6a27 	vadd.f32	s12, s14, s15
 8011806:	ee77 7a67 	vsub.f32	s15, s14, s15
 801180a:	ed97 3a01 	vldr	s6, [r7, #4]
 801180e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8011812:	46bc      	mov	ip, r7
 8011814:	ee76 3a84 	vadd.f32	s7, s13, s8
 8011818:	9704      	str	r7, [sp, #16]
 801181a:	ee36 7a44 	vsub.f32	s14, s12, s8
 801181e:	f8cd e00c 	str.w	lr, [sp, #12]
 8011822:	ee12 9a90 	vmov	r9, s5
 8011826:	ee75 5ae4 	vsub.f32	s11, s11, s9
 801182a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801182e:	1f3e      	subs	r6, r7, #4
 8011830:	f840 9b08 	str.w	r9, [r0], #8
 8011834:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8011838:	edde 2a01 	vldr	s5, [lr, #4]
 801183c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8011840:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8011844:	eddc 4a01 	vldr	s9, [ip, #4]
 8011848:	ee36 6a22 	vadd.f32	s12, s12, s5
 801184c:	9001      	str	r0, [sp, #4]
 801184e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8011852:	9805      	ldr	r0, [sp, #20]
 8011854:	ee13 9a90 	vmov	r9, s7
 8011858:	ee37 7a43 	vsub.f32	s14, s14, s6
 801185c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8011860:	f1ae 0704 	sub.w	r7, lr, #4
 8011864:	ee74 4a05 	vadd.f32	s9, s8, s10
 8011868:	ee76 6a83 	vadd.f32	s13, s13, s6
 801186c:	ed80 6a01 	vstr	s12, [r0, #4]
 8011870:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8011874:	f848 9b08 	str.w	r9, [r8], #8
 8011878:	edce 4a01 	vstr	s9, [lr, #4]
 801187c:	ee15 ea90 	vmov	lr, s11
 8011880:	f844 eb08 	str.w	lr, [r4], #8
 8011884:	ee16 ea90 	vmov	lr, s13
 8011888:	9408      	str	r4, [sp, #32]
 801188a:	462c      	mov	r4, r5
 801188c:	ed85 7a01 	vstr	s14, [r5, #4]
 8011890:	9d04      	ldr	r5, [sp, #16]
 8011892:	f84c eb08 	str.w	lr, [ip], #8
 8011896:	edc5 7a01 	vstr	s15, [r5, #4]
 801189a:	0855      	lsrs	r5, r2, #1
 801189c:	9509      	str	r5, [sp, #36]	; 0x24
 801189e:	f000 8130 	beq.w	8011b02 <arm_cfft_radix8by4_f32+0x36e>
 80118a2:	9805      	ldr	r0, [sp, #20]
 80118a4:	3b08      	subs	r3, #8
 80118a6:	46ab      	mov	fp, r5
 80118a8:	f1a4 020c 	sub.w	r2, r4, #12
 80118ac:	f100 0510 	add.w	r5, r0, #16
 80118b0:	f101 0920 	add.w	r9, r1, #32
 80118b4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80118b8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80118bc:	4433      	add	r3, r6
 80118be:	3410      	adds	r4, #16
 80118c0:	4660      	mov	r0, ip
 80118c2:	4641      	mov	r1, r8
 80118c4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80118c8:	ed54 6a02 	vldr	s13, [r4, #-8]
 80118cc:	f1bb 0b01 	subs.w	fp, fp, #1
 80118d0:	ed55 5a02 	vldr	s11, [r5, #-8]
 80118d4:	f10a 0a08 	add.w	sl, sl, #8
 80118d8:	edd1 7a00 	vldr	s15, [r1]
 80118dc:	f105 0508 	add.w	r5, r5, #8
 80118e0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80118e4:	edd0 2a00 	vldr	s5, [r0]
 80118e8:	ed14 7a01 	vldr	s14, [r4, #-4]
 80118ec:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80118f0:	ed55 6a03 	vldr	s13, [r5, #-12]
 80118f4:	f1a2 0208 	sub.w	r2, r2, #8
 80118f8:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80118fc:	ed90 2a01 	vldr	s4, [r0, #4]
 8011900:	ee36 5a87 	vadd.f32	s10, s13, s14
 8011904:	ed91 6a01 	vldr	s12, [r1, #4]
 8011908:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801190c:	f109 0910 	add.w	r9, r9, #16
 8011910:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8011914:	f104 0408 	add.w	r4, r4, #8
 8011918:	ee73 3ae7 	vsub.f32	s7, s7, s15
 801191c:	f10e 0e18 	add.w	lr, lr, #24
 8011920:	ee37 3a67 	vsub.f32	s6, s14, s15
 8011924:	f1a3 0308 	sub.w	r3, r3, #8
 8011928:	ed45 6a04 	vstr	s13, [r5, #-16]
 801192c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011930:	edd1 6a01 	vldr	s13, [r1, #4]
 8011934:	ee75 1a86 	vadd.f32	s3, s11, s12
 8011938:	edd0 4a01 	vldr	s9, [r0, #4]
 801193c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8011940:	ee75 6a26 	vadd.f32	s13, s10, s13
 8011944:	ee35 5a46 	vsub.f32	s10, s10, s12
 8011948:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801194c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011950:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8011954:	ee35 5a42 	vsub.f32	s10, s10, s4
 8011958:	ed45 6a03 	vstr	s13, [r5, #-12]
 801195c:	ee36 2a02 	vadd.f32	s4, s12, s4
 8011960:	edd6 7a00 	vldr	s15, [r6]
 8011964:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8011968:	ed97 1a00 	vldr	s2, [r7]
 801196c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8011970:	ed92 8a04 	vldr	s16, [r2, #16]
 8011974:	ee71 8a27 	vadd.f32	s17, s2, s15
 8011978:	ed93 aa04 	vldr	s20, [r3, #16]
 801197c:	ed16 7a01 	vldr	s14, [r6, #-4]
 8011980:	ee71 7a67 	vsub.f32	s15, s2, s15
 8011984:	ed57 0a01 	vldr	s1, [r7, #-4]
 8011988:	ee38 1a4a 	vsub.f32	s2, s16, s20
 801198c:	ee38 6a88 	vadd.f32	s12, s17, s16
 8011990:	edd3 9a03 	vldr	s19, [r3, #12]
 8011994:	ee30 0a87 	vadd.f32	s0, s1, s14
 8011998:	ed92 9a03 	vldr	s18, [r2, #12]
 801199c:	ee78 5ac8 	vsub.f32	s11, s17, s16
 80119a0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 80119a4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80119a8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 80119ac:	ee16 ca10 	vmov	ip, s12
 80119b0:	ee30 6a49 	vsub.f32	s12, s0, s18
 80119b4:	ee77 4a01 	vadd.f32	s9, s14, s2
 80119b8:	f847 c908 	str.w	ip, [r7], #-8
 80119bc:	ee34 4a29 	vadd.f32	s8, s8, s19
 80119c0:	edd2 8a03 	vldr	s17, [r2, #12]
 80119c4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 80119c8:	ed93 8a03 	vldr	s16, [r3, #12]
 80119cc:	ee71 0a47 	vsub.f32	s1, s2, s14
 80119d0:	ee30 0a28 	vadd.f32	s0, s0, s17
 80119d4:	ee39 1a67 	vsub.f32	s2, s18, s15
 80119d8:	ee36 6a69 	vsub.f32	s12, s12, s19
 80119dc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80119e0:	ee75 5aca 	vsub.f32	s11, s11, s20
 80119e4:	ed87 0a01 	vstr	s0, [r7, #4]
 80119e8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80119ec:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80119f0:	ee21 8a80 	vmul.f32	s16, s3, s0
 80119f4:	ee23 7a26 	vmul.f32	s14, s6, s13
 80119f8:	ee64 7a26 	vmul.f32	s15, s8, s13
 80119fc:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8011a00:	ee24 4a00 	vmul.f32	s8, s8, s0
 8011a04:	ee23 3a00 	vmul.f32	s6, s6, s0
 8011a08:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8011a0c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8011a10:	ee38 7a07 	vadd.f32	s14, s16, s14
 8011a14:	ee76 6a84 	vadd.f32	s13, s13, s8
 8011a18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011a1c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011a20:	ee17 ca10 	vmov	ip, s14
 8011a24:	f841 cb08 	str.w	ip, [r1], #8
 8011a28:	ed01 3a01 	vstr	s6, [r1, #-4]
 8011a2c:	ed82 0a04 	vstr	s0, [r2, #16]
 8011a30:	edc2 6a03 	vstr	s13, [r2, #12]
 8011a34:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8011a38:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8011a3c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8011a40:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8011a44:	ee65 4a27 	vmul.f32	s9, s10, s15
 8011a48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8011a4c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8011a50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011a54:	ee25 5a26 	vmul.f32	s10, s10, s13
 8011a58:	ee66 6a26 	vmul.f32	s13, s12, s13
 8011a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a60:	ee34 6a24 	vadd.f32	s12, s8, s9
 8011a64:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011a68:	ee35 5a63 	vsub.f32	s10, s10, s7
 8011a6c:	ee17 ca90 	vmov	ip, s15
 8011a70:	ed04 6a04 	vstr	s12, [r4, #-16]
 8011a74:	ed04 5a03 	vstr	s10, [r4, #-12]
 8011a78:	f846 c908 	str.w	ip, [r6], #-8
 8011a7c:	edc6 6a01 	vstr	s13, [r6, #4]
 8011a80:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8011a84:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8011a88:	ee62 5a27 	vmul.f32	s11, s4, s15
 8011a8c:	ee22 6a87 	vmul.f32	s12, s5, s14
 8011a90:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011a94:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8011a98:	ee61 6a07 	vmul.f32	s13, s2, s14
 8011a9c:	ee20 7a87 	vmul.f32	s14, s1, s14
 8011aa0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011aa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8011aa8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8011aac:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8011ab0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8011ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ab8:	ee16 ca10 	vmov	ip, s12
 8011abc:	f840 cb08 	str.w	ip, [r0], #8
 8011ac0:	ed40 2a01 	vstr	s5, [r0, #-4]
 8011ac4:	edc3 0a04 	vstr	s1, [r3, #16]
 8011ac8:	edc3 7a03 	vstr	s15, [r3, #12]
 8011acc:	f47f aefc 	bne.w	80118c8 <arm_cfft_radix8by4_f32+0x134>
 8011ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ad2:	9802      	ldr	r0, [sp, #8]
 8011ad4:	00cb      	lsls	r3, r1, #3
 8011ad6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8011ada:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8011ade:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8011ae2:	4498      	add	r8, r3
 8011ae4:	449c      	add	ip, r3
 8011ae6:	9102      	str	r1, [sp, #8]
 8011ae8:	9901      	ldr	r1, [sp, #4]
 8011aea:	4419      	add	r1, r3
 8011aec:	9101      	str	r1, [sp, #4]
 8011aee:	9907      	ldr	r1, [sp, #28]
 8011af0:	4419      	add	r1, r3
 8011af2:	9107      	str	r1, [sp, #28]
 8011af4:	9908      	ldr	r1, [sp, #32]
 8011af6:	4419      	add	r1, r3
 8011af8:	9b06      	ldr	r3, [sp, #24]
 8011afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011afe:	9108      	str	r1, [sp, #32]
 8011b00:	9306      	str	r3, [sp, #24]
 8011b02:	9a01      	ldr	r2, [sp, #4]
 8011b04:	2304      	movs	r3, #4
 8011b06:	9e08      	ldr	r6, [sp, #32]
 8011b08:	edd2 7a00 	vldr	s15, [r2]
 8011b0c:	ed96 7a00 	vldr	s14, [r6]
 8011b10:	edd8 2a00 	vldr	s5, [r8]
 8011b14:	ee77 5a87 	vadd.f32	s11, s15, s14
 8011b18:	ed9c 3a00 	vldr	s6, [ip]
 8011b1c:	ed92 6a01 	vldr	s12, [r2, #4]
 8011b20:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011b24:	edd6 6a01 	vldr	s13, [r6, #4]
 8011b28:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8011b2c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8011b30:	ee36 5a26 	vadd.f32	s10, s12, s13
 8011b34:	edd8 7a01 	vldr	s15, [r8, #4]
 8011b38:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011b3c:	9d02      	ldr	r5, [sp, #8]
 8011b3e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8011b42:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8011b46:	ee37 4a27 	vadd.f32	s8, s14, s15
 8011b4a:	9805      	ldr	r0, [sp, #20]
 8011b4c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8011b50:	4621      	mov	r1, r4
 8011b52:	ed82 6a00 	vstr	s12, [r2]
 8011b56:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8011b5a:	edd8 3a01 	vldr	s7, [r8, #4]
 8011b5e:	ee75 5a67 	vsub.f32	s11, s10, s15
 8011b62:	eddc 1a01 	vldr	s3, [ip, #4]
 8011b66:	ee34 4a42 	vsub.f32	s8, s8, s4
 8011b6a:	ee75 3a23 	vadd.f32	s7, s10, s7
 8011b6e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011b72:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8011b76:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8011b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b7e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8011b82:	ed82 5a01 	vstr	s10, [r2, #4]
 8011b86:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8011b8a:	9a07      	ldr	r2, [sp, #28]
 8011b8c:	ee77 7a02 	vadd.f32	s15, s14, s4
 8011b90:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8011b94:	edd2 2a00 	vldr	s5, [r2]
 8011b98:	ed92 5a01 	vldr	s10, [r2, #4]
 8011b9c:	ee64 3a22 	vmul.f32	s7, s8, s5
 8011ba0:	ee24 4a05 	vmul.f32	s8, s8, s10
 8011ba4:	ee24 5a85 	vmul.f32	s10, s9, s10
 8011ba8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8011bac:	ee33 5a85 	vadd.f32	s10, s7, s10
 8011bb0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8011bb4:	ed88 5a00 	vstr	s10, [r8]
 8011bb8:	edc8 4a01 	vstr	s9, [r8, #4]
 8011bbc:	edd5 4a01 	vldr	s9, [r5, #4]
 8011bc0:	edd5 6a00 	vldr	s13, [r5]
 8011bc4:	9d06      	ldr	r5, [sp, #24]
 8011bc6:	ee26 5a26 	vmul.f32	s10, s12, s13
 8011bca:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011bce:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8011bd2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8011bd6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8011bda:	ee75 5a25 	vadd.f32	s11, s10, s11
 8011bde:	ed86 6a01 	vstr	s12, [r6, #4]
 8011be2:	edc6 5a00 	vstr	s11, [r6]
 8011be6:	edd5 5a01 	vldr	s11, [r5, #4]
 8011bea:	edd5 6a00 	vldr	s13, [r5]
 8011bee:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011bf0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8011bf4:	ee67 6a26 	vmul.f32	s13, s14, s13
 8011bf8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011bfc:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011c00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011c04:	ee36 7a07 	vadd.f32	s14, s12, s14
 8011c08:	edcc 7a01 	vstr	s15, [ip, #4]
 8011c0c:	ed8c 7a00 	vstr	s14, [ip]
 8011c10:	6872      	ldr	r2, [r6, #4]
 8011c12:	f000 f92d 	bl	8011e70 <arm_radix8_butterfly_f32>
 8011c16:	9803      	ldr	r0, [sp, #12]
 8011c18:	4621      	mov	r1, r4
 8011c1a:	6872      	ldr	r2, [r6, #4]
 8011c1c:	2304      	movs	r3, #4
 8011c1e:	f000 f927 	bl	8011e70 <arm_radix8_butterfly_f32>
 8011c22:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c24:	4621      	mov	r1, r4
 8011c26:	6872      	ldr	r2, [r6, #4]
 8011c28:	2304      	movs	r3, #4
 8011c2a:	f000 f921 	bl	8011e70 <arm_radix8_butterfly_f32>
 8011c2e:	4621      	mov	r1, r4
 8011c30:	6872      	ldr	r2, [r6, #4]
 8011c32:	2304      	movs	r3, #4
 8011c34:	9804      	ldr	r0, [sp, #16]
 8011c36:	b00f      	add	sp, #60	; 0x3c
 8011c38:	ecbd 8b06 	vpop	{d8-d10}
 8011c3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c40:	f000 b916 	b.w	8011e70 <arm_radix8_butterfly_f32>

08011c44 <arm_cfft_f32>:
 8011c44:	2a01      	cmp	r2, #1
 8011c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	4617      	mov	r7, r2
 8011c4e:	460c      	mov	r4, r1
 8011c50:	4698      	mov	r8, r3
 8011c52:	8805      	ldrh	r5, [r0, #0]
 8011c54:	d053      	beq.n	8011cfe <arm_cfft_f32+0xba>
 8011c56:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011c5a:	d04b      	beq.n	8011cf4 <arm_cfft_f32+0xb0>
 8011c5c:	d916      	bls.n	8011c8c <arm_cfft_f32+0x48>
 8011c5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8011c62:	d01a      	beq.n	8011c9a <arm_cfft_f32+0x56>
 8011c64:	d95a      	bls.n	8011d1c <arm_cfft_f32+0xd8>
 8011c66:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8011c6a:	d043      	beq.n	8011cf4 <arm_cfft_f32+0xb0>
 8011c6c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8011c70:	d105      	bne.n	8011c7e <arm_cfft_f32+0x3a>
 8011c72:	2301      	movs	r3, #1
 8011c74:	6872      	ldr	r2, [r6, #4]
 8011c76:	4629      	mov	r1, r5
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f000 f8f9 	bl	8011e70 <arm_radix8_butterfly_f32>
 8011c7e:	f1b8 0f00 	cmp.w	r8, #0
 8011c82:	d111      	bne.n	8011ca8 <arm_cfft_f32+0x64>
 8011c84:	2f01      	cmp	r7, #1
 8011c86:	d016      	beq.n	8011cb6 <arm_cfft_f32+0x72>
 8011c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c8c:	2d20      	cmp	r5, #32
 8011c8e:	d031      	beq.n	8011cf4 <arm_cfft_f32+0xb0>
 8011c90:	d948      	bls.n	8011d24 <arm_cfft_f32+0xe0>
 8011c92:	2d40      	cmp	r5, #64	; 0x40
 8011c94:	d0ed      	beq.n	8011c72 <arm_cfft_f32+0x2e>
 8011c96:	2d80      	cmp	r5, #128	; 0x80
 8011c98:	d1f1      	bne.n	8011c7e <arm_cfft_f32+0x3a>
 8011c9a:	4621      	mov	r1, r4
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f7ff fca9 	bl	80115f4 <arm_cfft_radix8by2_f32>
 8011ca2:	f1b8 0f00 	cmp.w	r8, #0
 8011ca6:	d0ed      	beq.n	8011c84 <arm_cfft_f32+0x40>
 8011ca8:	68b2      	ldr	r2, [r6, #8]
 8011caa:	4620      	mov	r0, r4
 8011cac:	89b1      	ldrh	r1, [r6, #12]
 8011cae:	f7ee fac7 	bl	8000240 <arm_bitreversal_32>
 8011cb2:	2f01      	cmp	r7, #1
 8011cb4:	d1e8      	bne.n	8011c88 <arm_cfft_f32+0x44>
 8011cb6:	ee07 5a90 	vmov	s15, r5
 8011cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011cc6:	2d00      	cmp	r5, #0
 8011cc8:	d0de      	beq.n	8011c88 <arm_cfft_f32+0x44>
 8011cca:	f104 0108 	add.w	r1, r4, #8
 8011cce:	2300      	movs	r3, #0
 8011cd0:	ed11 7a02 	vldr	s14, [r1, #-8]
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	ed51 7a01 	vldr	s15, [r1, #-4]
 8011cda:	3108      	adds	r1, #8
 8011cdc:	429d      	cmp	r5, r3
 8011cde:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011ce2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011ce6:	ed01 7a04 	vstr	s14, [r1, #-16]
 8011cea:	ed41 7a03 	vstr	s15, [r1, #-12]
 8011cee:	d1ef      	bne.n	8011cd0 <arm_cfft_f32+0x8c>
 8011cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f7ff fd4c 	bl	8011794 <arm_cfft_radix8by4_f32>
 8011cfc:	e7bf      	b.n	8011c7e <arm_cfft_f32+0x3a>
 8011cfe:	b1a5      	cbz	r5, 8011d2a <arm_cfft_f32+0xe6>
 8011d00:	f101 030c 	add.w	r3, r1, #12
 8011d04:	2200      	movs	r2, #0
 8011d06:	ed53 7a02 	vldr	s15, [r3, #-8]
 8011d0a:	3201      	adds	r2, #1
 8011d0c:	3308      	adds	r3, #8
 8011d0e:	eef1 7a67 	vneg.f32	s15, s15
 8011d12:	4295      	cmp	r5, r2
 8011d14:	ed43 7a04 	vstr	s15, [r3, #-16]
 8011d18:	d1f5      	bne.n	8011d06 <arm_cfft_f32+0xc2>
 8011d1a:	e79c      	b.n	8011c56 <arm_cfft_f32+0x12>
 8011d1c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8011d20:	d0a7      	beq.n	8011c72 <arm_cfft_f32+0x2e>
 8011d22:	e7ac      	b.n	8011c7e <arm_cfft_f32+0x3a>
 8011d24:	2d10      	cmp	r5, #16
 8011d26:	d0b8      	beq.n	8011c9a <arm_cfft_f32+0x56>
 8011d28:	e7a9      	b.n	8011c7e <arm_cfft_f32+0x3a>
 8011d2a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8011d2e:	d896      	bhi.n	8011c5e <arm_cfft_f32+0x1a>
 8011d30:	e7ac      	b.n	8011c8c <arm_cfft_f32+0x48>
 8011d32:	bf00      	nop

08011d34 <arm_cmplx_mag_squared_f32>:
 8011d34:	b470      	push	{r4, r5, r6}
 8011d36:	0896      	lsrs	r6, r2, #2
 8011d38:	d03e      	beq.n	8011db8 <arm_cmplx_mag_squared_f32+0x84>
 8011d3a:	f100 0320 	add.w	r3, r0, #32
 8011d3e:	f101 0410 	add.w	r4, r1, #16
 8011d42:	4635      	mov	r5, r6
 8011d44:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8011d48:	3d01      	subs	r5, #1
 8011d4a:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8011d4e:	f104 0410 	add.w	r4, r4, #16
 8011d52:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 8011d56:	ee27 5a07 	vmul.f32	s10, s14, s14
 8011d5a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8011d5e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011d62:	ed13 7a04 	vldr	s14, [r3, #-16]
 8011d66:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8011d6a:	ed13 4a03 	vldr	s8, [r3, #-12]
 8011d6e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011d72:	ed53 7a02 	vldr	s15, [r3, #-8]
 8011d76:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011d7a:	ed53 4a01 	vldr	s9, [r3, #-4]
 8011d7e:	ee24 4a04 	vmul.f32	s8, s8, s8
 8011d82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011d86:	f103 0320 	add.w	r3, r3, #32
 8011d8a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8011d8e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8011d92:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011d96:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011d9a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8011d9e:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 8011da2:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8011da6:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8011daa:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011dae:	d1c9      	bne.n	8011d44 <arm_cmplx_mag_squared_f32+0x10>
 8011db0:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8011db4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8011db8:	f012 0203 	ands.w	r2, r2, #3
 8011dbc:	d010      	beq.n	8011de0 <arm_cmplx_mag_squared_f32+0xac>
 8011dbe:	3008      	adds	r0, #8
 8011dc0:	ed50 7a02 	vldr	s15, [r0, #-8]
 8011dc4:	3a01      	subs	r2, #1
 8011dc6:	ed10 7a01 	vldr	s14, [r0, #-4]
 8011dca:	f100 0008 	add.w	r0, r0, #8
 8011dce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011dd2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011dd6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011dda:	ece1 7a01 	vstmia	r1!, {s15}
 8011dde:	d1ef      	bne.n	8011dc0 <arm_cmplx_mag_squared_f32+0x8c>
 8011de0:	bc70      	pop	{r4, r5, r6}
 8011de2:	4770      	bx	lr

08011de4 <arm_mult_f32>:
 8011de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de6:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8011dea:	d033      	beq.n	8011e54 <arm_mult_f32+0x70>
 8011dec:	f100 0610 	add.w	r6, r0, #16
 8011df0:	f101 0510 	add.w	r5, r1, #16
 8011df4:	f102 0410 	add.w	r4, r2, #16
 8011df8:	4677      	mov	r7, lr
 8011dfa:	ed16 7a04 	vldr	s14, [r6, #-16]
 8011dfe:	3f01      	subs	r7, #1
 8011e00:	ed15 6a04 	vldr	s12, [r5, #-16]
 8011e04:	f106 0610 	add.w	r6, r6, #16
 8011e08:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8011e0c:	f105 0510 	add.w	r5, r5, #16
 8011e10:	ee27 6a06 	vmul.f32	s12, s14, s12
 8011e14:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8011e18:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8011e1c:	f104 0410 	add.w	r4, r4, #16
 8011e20:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8011e24:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011e28:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8011e2c:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8011e30:	ee27 7a25 	vmul.f32	s14, s14, s11
 8011e34:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8011e38:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8011e3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011e40:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8011e44:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8011e48:	d1d7      	bne.n	8011dfa <arm_mult_f32+0x16>
 8011e4a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8011e4e:	4420      	add	r0, r4
 8011e50:	4421      	add	r1, r4
 8011e52:	4422      	add	r2, r4
 8011e54:	f013 0303 	ands.w	r3, r3, #3
 8011e58:	d009      	beq.n	8011e6e <arm_mult_f32+0x8a>
 8011e5a:	ecf0 7a01 	vldmia	r0!, {s15}
 8011e5e:	3b01      	subs	r3, #1
 8011e60:	ecb1 7a01 	vldmia	r1!, {s14}
 8011e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011e68:	ece2 7a01 	vstmia	r2!, {s15}
 8011e6c:	d1f5      	bne.n	8011e5a <arm_mult_f32+0x76>
 8011e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e70 <arm_radix8_butterfly_f32>:
 8011e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	469e      	mov	lr, r3
 8011e76:	4603      	mov	r3, r0
 8011e78:	468a      	mov	sl, r1
 8011e7a:	468b      	mov	fp, r1
 8011e7c:	3304      	adds	r3, #4
 8011e7e:	ed2d 8b10 	vpush	{d8-d15}
 8011e82:	469c      	mov	ip, r3
 8011e84:	b09d      	sub	sp, #116	; 0x74
 8011e86:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8012194 <arm_radix8_butterfly_f32+0x324>
 8011e8a:	9019      	str	r0, [sp, #100]	; 0x64
 8011e8c:	921a      	str	r2, [sp, #104]	; 0x68
 8011e8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011e90:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8011e94:	f04f 0800 	mov.w	r8, #0
 8011e98:	461a      	mov	r2, r3
 8011e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8011e9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011ea0:	4611      	mov	r1, r2
 8011ea2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8011ea6:	9300      	str	r3, [sp, #0]
 8011ea8:	0053      	lsls	r3, r2, #1
 8011eaa:	18d5      	adds	r5, r2, r3
 8011eac:	9301      	str	r3, [sp, #4]
 8011eae:	0113      	lsls	r3, r2, #4
 8011eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011eb2:	194c      	adds	r4, r1, r5
 8011eb4:	eb02 0609 	add.w	r6, r2, r9
 8011eb8:	9302      	str	r3, [sp, #8]
 8011eba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011ebe:	4613      	mov	r3, r2
 8011ec0:	190a      	adds	r2, r1, r4
 8011ec2:	eb06 0709 	add.w	r7, r6, r9
 8011ec6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011eca:	1888      	adds	r0, r1, r2
 8011ecc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011ed0:	4401      	add	r1, r0
 8011ed2:	3204      	adds	r2, #4
 8011ed4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011ed8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011edc:	9b00      	ldr	r3, [sp, #0]
 8011ede:	3104      	adds	r1, #4
 8011ee0:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8011ee4:	44d8      	add	r8, fp
 8011ee6:	ed90 7a00 	vldr	s14, [r0]
 8011eea:	ed94 5a00 	vldr	s10, [r4]
 8011eee:	45c2      	cmp	sl, r8
 8011ef0:	edd7 3a00 	vldr	s7, [r7]
 8011ef4:	ed96 6a00 	vldr	s12, [r6]
 8011ef8:	ee37 1a85 	vadd.f32	s2, s15, s10
 8011efc:	ed52 6a01 	vldr	s13, [r2, #-4]
 8011f00:	ee73 4a87 	vadd.f32	s9, s7, s14
 8011f04:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8011f08:	edd5 7a00 	vldr	s15, [r5]
 8011f0c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8011f10:	ed11 7a01 	vldr	s14, [r1, #-4]
 8011f14:	ee36 2a26 	vadd.f32	s4, s12, s13
 8011f18:	ee37 4a87 	vadd.f32	s8, s15, s14
 8011f1c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011f20:	ee71 5a24 	vadd.f32	s11, s2, s9
 8011f24:	ee32 6a04 	vadd.f32	s12, s4, s8
 8011f28:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011f2c:	ee31 1a64 	vsub.f32	s2, s2, s9
 8011f30:	ee75 4a86 	vadd.f32	s9, s11, s12
 8011f34:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011f38:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8011f3c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8011f40:	ee32 2a44 	vsub.f32	s4, s4, s8
 8011f44:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011f48:	ed94 0a01 	vldr	s0, [r4, #4]
 8011f4c:	edc4 5a00 	vstr	s11, [r4]
 8011f50:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011f54:	edd6 5a01 	vldr	s11, [r6, #4]
 8011f58:	edd5 2a01 	vldr	s5, [r5, #4]
 8011f5c:	ee75 1a27 	vadd.f32	s3, s10, s15
 8011f60:	ed92 4a00 	vldr	s8, [r2]
 8011f64:	ee75 7a67 	vsub.f32	s15, s10, s15
 8011f68:	edd1 4a00 	vldr	s9, [r1]
 8011f6c:	ee27 7a09 	vmul.f32	s14, s14, s18
 8011f70:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8011f74:	ed9c 6a00 	vldr	s12, [ip]
 8011f78:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8011f7c:	edd0 0a01 	vldr	s1, [r0, #4]
 8011f80:	ed97 5a01 	vldr	s10, [r7, #4]
 8011f84:	ee35 4a84 	vadd.f32	s8, s11, s8
 8011f88:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8011f8c:	ee73 5a26 	vadd.f32	s11, s6, s13
 8011f90:	ee76 2a00 	vadd.f32	s5, s12, s0
 8011f94:	ee73 6a66 	vsub.f32	s13, s6, s13
 8011f98:	ee36 6a40 	vsub.f32	s12, s12, s0
 8011f9c:	ee35 0a20 	vadd.f32	s0, s10, s1
 8011fa0:	ee65 5a89 	vmul.f32	s11, s11, s18
 8011fa4:	ee35 5a60 	vsub.f32	s10, s10, s1
 8011fa8:	ee32 3a80 	vadd.f32	s6, s5, s0
 8011fac:	ee74 0a24 	vadd.f32	s1, s8, s9
 8011fb0:	ee66 6a89 	vmul.f32	s13, s13, s18
 8011fb4:	ee74 4a64 	vsub.f32	s9, s8, s9
 8011fb8:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8011fbc:	ee75 2a25 	vadd.f32	s5, s10, s11
 8011fc0:	ee33 0a20 	vadd.f32	s0, s6, s1
 8011fc4:	ee75 5a65 	vsub.f32	s11, s10, s11
 8011fc8:	ee33 3a60 	vsub.f32	s6, s6, s1
 8011fcc:	ee36 5a26 	vadd.f32	s10, s12, s13
 8011fd0:	ed8c 0a00 	vstr	s0, [ip]
 8011fd4:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011fd8:	449c      	add	ip, r3
 8011fda:	ee33 6a87 	vadd.f32	s12, s7, s14
 8011fde:	ed84 3a01 	vstr	s6, [r4, #4]
 8011fe2:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8011fe6:	441c      	add	r4, r3
 8011fe8:	ee71 3a24 	vadd.f32	s7, s2, s9
 8011fec:	ee71 4a64 	vsub.f32	s9, s2, s9
 8011ff0:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8011ff4:	edc7 3a00 	vstr	s7, [r7]
 8011ff8:	ee34 1a42 	vsub.f32	s2, s8, s4
 8011ffc:	edc0 4a00 	vstr	s9, [r0]
 8012000:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8012004:	ee75 4a46 	vsub.f32	s9, s10, s12
 8012008:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801200c:	ed87 1a01 	vstr	s2, [r7, #4]
 8012010:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8012014:	441f      	add	r7, r3
 8012016:	ee32 4a04 	vadd.f32	s8, s4, s8
 801201a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 801201e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8012022:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012026:	ed80 4a01 	vstr	s8, [r0, #4]
 801202a:	ed86 3a00 	vstr	s6, [r6]
 801202e:	4418      	add	r0, r3
 8012030:	ed41 1a01 	vstr	s3, [r1, #-4]
 8012034:	ed42 3a01 	vstr	s7, [r2, #-4]
 8012038:	edc5 7a00 	vstr	s15, [r5]
 801203c:	edc6 4a01 	vstr	s9, [r6, #4]
 8012040:	441e      	add	r6, r3
 8012042:	ed81 6a00 	vstr	s12, [r1]
 8012046:	4419      	add	r1, r3
 8012048:	edc2 5a00 	vstr	s11, [r2]
 801204c:	441a      	add	r2, r3
 801204e:	ed85 7a01 	vstr	s14, [r5, #4]
 8012052:	441d      	add	r5, r3
 8012054:	f63f af44 	bhi.w	8011ee0 <arm_radix8_butterfly_f32+0x70>
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801205c:	2b07      	cmp	r3, #7
 801205e:	f240 81f4 	bls.w	801244a <arm_radix8_butterfly_f32+0x5da>
 8012062:	9901      	ldr	r1, [sp, #4]
 8012064:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8012068:	9d02      	ldr	r5, [sp, #8]
 801206a:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 801206e:	3101      	adds	r1, #1
 8012070:	eb04 000e 	add.w	r0, r4, lr
 8012074:	00e4      	lsls	r4, r4, #3
 8012076:	3508      	adds	r5, #8
 8012078:	4419      	add	r1, r3
 801207a:	eb00 0c0e 	add.w	ip, r0, lr
 801207e:	9413      	str	r4, [sp, #76]	; 0x4c
 8012080:	00c0      	lsls	r0, r0, #3
 8012082:	185e      	adds	r6, r3, r1
 8012084:	4617      	mov	r7, r2
 8012086:	9218      	str	r2, [sp, #96]	; 0x60
 8012088:	f109 0908 	add.w	r9, r9, #8
 801208c:	199c      	adds	r4, r3, r6
 801208e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012090:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012092:	9012      	str	r0, [sp, #72]	; 0x48
 8012094:	195d      	adds	r5, r3, r5
 8012096:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012098:	443a      	add	r2, r7
 801209a:	950c      	str	r5, [sp, #48]	; 0x30
 801209c:	4698      	mov	r8, r3
 801209e:	4420      	add	r0, r4
 80120a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80120a2:	19d7      	adds	r7, r2, r7
 80120a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80120a8:	4405      	add	r5, r0
 80120aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80120ae:	9710      	str	r7, [sp, #64]	; 0x40
 80120b0:	eb0c 070e 	add.w	r7, ip, lr
 80120b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80120b8:	3404      	adds	r4, #4
 80120ba:	3004      	adds	r0, #4
 80120bc:	44c8      	add	r8, r9
 80120be:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 80120c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80120c4:	940a      	str	r4, [sp, #40]	; 0x28
 80120c6:	9009      	str	r0, [sp, #36]	; 0x24
 80120c8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80120cc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80120ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80120d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80120d4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80120d8:	eb07 080e 	add.w	r8, r7, lr
 80120dc:	eb04 0900 	add.w	r9, r4, r0
 80120e0:	00f8      	lsls	r0, r7, #3
 80120e2:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80120e6:	3504      	adds	r5, #4
 80120e8:	4607      	mov	r7, r0
 80120ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80120ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80120ee:	4618      	mov	r0, r3
 80120f0:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 80120f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120f6:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 80120fa:	18e3      	adds	r3, r4, r3
 80120fc:	9508      	str	r5, [sp, #32]
 80120fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012100:	910e      	str	r1, [sp, #56]	; 0x38
 8012102:	4621      	mov	r1, r4
 8012104:	eb04 0805 	add.w	r8, r4, r5
 8012108:	9304      	str	r3, [sp, #16]
 801210a:	19e5      	adds	r5, r4, r7
 801210c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8012110:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8012112:	9316      	str	r3, [sp, #88]	; 0x58
 8012114:	190b      	adds	r3, r1, r4
 8012116:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8012118:	9505      	str	r5, [sp, #20]
 801211a:	9303      	str	r3, [sp, #12]
 801211c:	f100 0308 	add.w	r3, r0, #8
 8012120:	9707      	str	r7, [sp, #28]
 8012122:	4638      	mov	r0, r7
 8012124:	930f      	str	r3, [sp, #60]	; 0x3c
 8012126:	2301      	movs	r3, #1
 8012128:	9306      	str	r3, [sp, #24]
 801212a:	9b00      	ldr	r3, [sp, #0]
 801212c:	ed90 fa00 	vldr	s30, [r0]
 8012130:	edd0 ba01 	vldr	s23, [r0, #4]
 8012134:	9803      	ldr	r0, [sp, #12]
 8012136:	9903      	ldr	r1, [sp, #12]
 8012138:	ed90 ba01 	vldr	s22, [r0, #4]
 801213c:	9804      	ldr	r0, [sp, #16]
 801213e:	edd1 ea00 	vldr	s29, [r1]
 8012142:	edd0 aa01 	vldr	s21, [r0, #4]
 8012146:	9805      	ldr	r0, [sp, #20]
 8012148:	9905      	ldr	r1, [sp, #20]
 801214a:	edd0 7a01 	vldr	s15, [r0, #4]
 801214e:	ed91 da00 	vldr	s26, [r1]
 8012152:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012154:	9c04      	ldr	r4, [sp, #16]
 8012156:	edcd 7a01 	vstr	s15, [sp, #4]
 801215a:	edd8 7a01 	vldr	s15, [r8, #4]
 801215e:	9100      	str	r1, [sp, #0]
 8012160:	edd2 fa00 	vldr	s31, [r2]
 8012164:	ed94 ea00 	vldr	s28, [r4]
 8012168:	ed92 ca01 	vldr	s24, [r2, #4]
 801216c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8012170:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012172:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012174:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012176:	edd9 da00 	vldr	s27, [r9]
 801217a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801217c:	edd8 ca00 	vldr	s25, [r8]
 8012180:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012184:	f8dd c018 	ldr.w	ip, [sp, #24]
 8012188:	ed99 aa01 	vldr	s20, [r9, #4]
 801218c:	edcd 7a02 	vstr	s15, [sp, #8]
 8012190:	9800      	ldr	r0, [sp, #0]
 8012192:	e001      	b.n	8012198 <arm_radix8_butterfly_f32+0x328>
 8012194:	3f3504f3 	.word	0x3f3504f3
 8012198:	edd5 3a00 	vldr	s7, [r5]
 801219c:	44dc      	add	ip, fp
 801219e:	ed91 7a00 	vldr	s14, [r1]
 80121a2:	edd4 8a00 	vldr	s17, [r4]
 80121a6:	45e2      	cmp	sl, ip
 80121a8:	ed57 7a01 	vldr	s15, [r7, #-4]
 80121ac:	ed90 5a00 	vldr	s10, [r0]
 80121b0:	ed56 5a01 	vldr	s11, [r6, #-4]
 80121b4:	ee38 6aa7 	vadd.f32	s12, s17, s15
 80121b8:	ed92 1a00 	vldr	s2, [r2]
 80121bc:	ee78 4ae7 	vsub.f32	s9, s17, s15
 80121c0:	ed1e 4a01 	vldr	s8, [lr, #-4]
 80121c4:	ee75 9a25 	vadd.f32	s19, s10, s11
 80121c8:	ee31 3a07 	vadd.f32	s6, s2, s14
 80121cc:	ed92 8a01 	vldr	s16, [r2, #4]
 80121d0:	ee73 6a84 	vadd.f32	s13, s7, s8
 80121d4:	ee75 5a65 	vsub.f32	s11, s10, s11
 80121d8:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80121dc:	ee73 1a06 	vadd.f32	s3, s6, s12
 80121e0:	ee39 5aa6 	vadd.f32	s10, s19, s13
 80121e4:	ee75 7a84 	vadd.f32	s15, s11, s8
 80121e8:	ee31 1a47 	vsub.f32	s2, s2, s14
 80121ec:	ee31 7a85 	vadd.f32	s14, s3, s10
 80121f0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80121f4:	ee33 3a46 	vsub.f32	s6, s6, s12
 80121f8:	ed82 7a00 	vstr	s14, [r2]
 80121fc:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8012200:	ed96 6a00 	vldr	s12, [r6]
 8012204:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8012208:	edd5 3a01 	vldr	s7, [r5, #4]
 801220c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8012210:	ed90 7a01 	vldr	s14, [r0, #4]
 8012214:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8012218:	edde 4a00 	vldr	s9, [lr]
 801221c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8012220:	ee77 2a46 	vsub.f32	s5, s14, s12
 8012224:	edd1 6a01 	vldr	s13, [r1, #4]
 8012228:	ee73 7ae4 	vsub.f32	s15, s7, s9
 801222c:	edd7 0a00 	vldr	s1, [r7]
 8012230:	ee77 5a06 	vadd.f32	s11, s14, s12
 8012234:	ed94 7a01 	vldr	s14, [r4, #4]
 8012238:	ee33 6aa4 	vadd.f32	s12, s7, s9
 801223c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8012240:	ee78 4a66 	vsub.f32	s9, s16, s13
 8012244:	ee78 3a26 	vadd.f32	s7, s16, s13
 8012248:	ee72 2aa7 	vadd.f32	s5, s5, s15
 801224c:	ee77 6a20 	vadd.f32	s13, s14, s1
 8012250:	ee24 4a09 	vmul.f32	s8, s8, s18
 8012254:	ee37 7a60 	vsub.f32	s14, s14, s1
 8012258:	ee20 8a09 	vmul.f32	s16, s0, s18
 801225c:	ee75 0a86 	vadd.f32	s1, s11, s12
 8012260:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8012264:	ee62 2a89 	vmul.f32	s5, s5, s18
 8012268:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801226c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8012270:	ee77 7a62 	vsub.f32	s15, s14, s5
 8012274:	ee74 5a88 	vadd.f32	s11, s9, s16
 8012278:	ee34 8ac8 	vsub.f32	s16, s9, s16
 801227c:	ee77 4a22 	vadd.f32	s9, s14, s5
 8012280:	ee71 2a04 	vadd.f32	s5, s2, s8
 8012284:	ee31 7a44 	vsub.f32	s14, s2, s8
 8012288:	ee30 1a60 	vsub.f32	s2, s0, s1
 801228c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8012290:	ee33 6a46 	vsub.f32	s12, s6, s12
 8012294:	ee33 3ae9 	vsub.f32	s6, s7, s19
 8012298:	ee79 6aa3 	vadd.f32	s13, s19, s7
 801229c:	ee38 4a68 	vsub.f32	s8, s16, s17
 80122a0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80122a4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80122a8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80122ac:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80122b0:	ee77 2a27 	vadd.f32	s5, s14, s15
 80122b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80122b8:	ee78 7a88 	vadd.f32	s15, s17, s16
 80122bc:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80122c0:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80122c4:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80122c8:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80122cc:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80122d0:	ee70 0a20 	vadd.f32	s1, s0, s1
 80122d4:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80122d8:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80122dc:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80122e0:	edc2 0a01 	vstr	s1, [r2, #4]
 80122e4:	ee38 8a88 	vadd.f32	s16, s17, s16
 80122e8:	441a      	add	r2, r3
 80122ea:	ee6c 8a23 	vmul.f32	s17, s24, s7
 80122ee:	ee31 5a45 	vsub.f32	s10, s2, s10
 80122f2:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 80122f6:	ed81 8a00 	vstr	s16, [r1]
 80122fa:	ee39 0a80 	vadd.f32	s0, s19, s0
 80122fe:	ee33 3a61 	vsub.f32	s6, s6, s3
 8012302:	ed81 5a01 	vstr	s10, [r1, #4]
 8012306:	ee6f 0a82 	vmul.f32	s1, s31, s4
 801230a:	edcd 3a00 	vstr	s7, [sp]
 801230e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8012312:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8012316:	eddd 3a01 	vldr	s7, [sp, #4]
 801231a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 801231e:	ed84 0a00 	vstr	s0, [r4]
 8012322:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012326:	ed84 3a01 	vstr	s6, [r4, #4]
 801232a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 801232e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8012332:	eddd 3a00 	vldr	s7, [sp]
 8012336:	ee25 5a25 	vmul.f32	s10, s10, s11
 801233a:	4419      	add	r1, r3
 801233c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8012340:	441c      	add	r4, r3
 8012342:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8012346:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801234a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 801234e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8012352:	ee2c 2a02 	vmul.f32	s4, s24, s4
 8012356:	ee6d 6a26 	vmul.f32	s13, s26, s13
 801235a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 801235e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8012362:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8012366:	ee2b 7a07 	vmul.f32	s14, s22, s14
 801236a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 801236e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8012372:	ee38 8a01 	vadd.f32	s16, s16, s2
 8012376:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801237a:	ee39 5a85 	vadd.f32	s10, s19, s10
 801237e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8012382:	ed07 8a01 	vstr	s16, [r7, #-4]
 8012386:	ee30 0a21 	vadd.f32	s0, s0, s3
 801238a:	ed87 6a00 	vstr	s12, [r7]
 801238e:	ee74 2a62 	vsub.f32	s5, s8, s5
 8012392:	edc0 0a00 	vstr	s1, [r0]
 8012396:	ee33 3a28 	vadd.f32	s6, s6, s17
 801239a:	edc0 3a01 	vstr	s7, [r0, #4]
 801239e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80123a2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 80123a6:	edce 4a00 	vstr	s9, [lr]
 80123aa:	4418      	add	r0, r3
 80123ac:	ed06 0a01 	vstr	s0, [r6, #-4]
 80123b0:	441f      	add	r7, r3
 80123b2:	edc6 2a00 	vstr	s5, [r6]
 80123b6:	449e      	add	lr, r3
 80123b8:	ed85 3a00 	vstr	s6, [r5]
 80123bc:	441e      	add	r6, r3
 80123be:	ed85 7a01 	vstr	s14, [r5, #4]
 80123c2:	441d      	add	r5, r3
 80123c4:	f63f aee8 	bhi.w	8012198 <arm_radix8_butterfly_f32+0x328>
 80123c8:	9a06      	ldr	r2, [sp, #24]
 80123ca:	9816      	ldr	r0, [sp, #88]	; 0x58
 80123cc:	3201      	adds	r2, #1
 80123ce:	4611      	mov	r1, r2
 80123d0:	9206      	str	r2, [sp, #24]
 80123d2:	9a07      	ldr	r2, [sp, #28]
 80123d4:	4402      	add	r2, r0
 80123d6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80123d8:	9207      	str	r2, [sp, #28]
 80123da:	9a03      	ldr	r2, [sp, #12]
 80123dc:	4402      	add	r2, r0
 80123de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80123e0:	9203      	str	r2, [sp, #12]
 80123e2:	9a04      	ldr	r2, [sp, #16]
 80123e4:	4402      	add	r2, r0
 80123e6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80123e8:	9204      	str	r2, [sp, #16]
 80123ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80123ec:	4491      	add	r9, r2
 80123ee:	9a05      	ldr	r2, [sp, #20]
 80123f0:	4402      	add	r2, r0
 80123f2:	9205      	str	r2, [sp, #20]
 80123f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80123f6:	4490      	add	r8, r2
 80123f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123fa:	3208      	adds	r2, #8
 80123fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80123fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012400:	3208      	adds	r2, #8
 8012402:	920e      	str	r2, [sp, #56]	; 0x38
 8012404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012406:	3208      	adds	r2, #8
 8012408:	920d      	str	r2, [sp, #52]	; 0x34
 801240a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801240c:	3208      	adds	r2, #8
 801240e:	920c      	str	r2, [sp, #48]	; 0x30
 8012410:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012412:	3208      	adds	r2, #8
 8012414:	920b      	str	r2, [sp, #44]	; 0x2c
 8012416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012418:	3208      	adds	r2, #8
 801241a:	920a      	str	r2, [sp, #40]	; 0x28
 801241c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801241e:	3208      	adds	r2, #8
 8012420:	9209      	str	r2, [sp, #36]	; 0x24
 8012422:	9a08      	ldr	r2, [sp, #32]
 8012424:	3208      	adds	r2, #8
 8012426:	9208      	str	r2, [sp, #32]
 8012428:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801242a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801242c:	4622      	mov	r2, r4
 801242e:	4288      	cmp	r0, r1
 8012430:	d005      	beq.n	801243e <arm_radix8_butterfly_f32+0x5ce>
 8012432:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012434:	4621      	mov	r1, r4
 8012436:	4401      	add	r1, r0
 8012438:	9807      	ldr	r0, [sp, #28]
 801243a:	9110      	str	r1, [sp, #64]	; 0x40
 801243c:	e676      	b.n	801212c <arm_radix8_butterfly_f32+0x2bc>
 801243e:	4683      	mov	fp, r0
 8012440:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 8012444:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8012448:	e522      	b.n	8011e90 <arm_radix8_butterfly_f32+0x20>
 801244a:	b01d      	add	sp, #116	; 0x74
 801244c:	ecbd 8b10 	vpop	{d8-d15}
 8012450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012454 <__errno>:
 8012454:	4b01      	ldr	r3, [pc, #4]	; (801245c <__errno+0x8>)
 8012456:	6818      	ldr	r0, [r3, #0]
 8012458:	4770      	bx	lr
 801245a:	bf00      	nop
 801245c:	200013b8 	.word	0x200013b8

08012460 <__libc_init_array>:
 8012460:	b570      	push	{r4, r5, r6, lr}
 8012462:	4d0d      	ldr	r5, [pc, #52]	; (8012498 <__libc_init_array+0x38>)
 8012464:	4c0d      	ldr	r4, [pc, #52]	; (801249c <__libc_init_array+0x3c>)
 8012466:	1b64      	subs	r4, r4, r5
 8012468:	10a4      	asrs	r4, r4, #2
 801246a:	2600      	movs	r6, #0
 801246c:	42a6      	cmp	r6, r4
 801246e:	d109      	bne.n	8012484 <__libc_init_array+0x24>
 8012470:	4d0b      	ldr	r5, [pc, #44]	; (80124a0 <__libc_init_array+0x40>)
 8012472:	4c0c      	ldr	r4, [pc, #48]	; (80124a4 <__libc_init_array+0x44>)
 8012474:	f001 fc54 	bl	8013d20 <_init>
 8012478:	1b64      	subs	r4, r4, r5
 801247a:	10a4      	asrs	r4, r4, #2
 801247c:	2600      	movs	r6, #0
 801247e:	42a6      	cmp	r6, r4
 8012480:	d105      	bne.n	801248e <__libc_init_array+0x2e>
 8012482:	bd70      	pop	{r4, r5, r6, pc}
 8012484:	f855 3b04 	ldr.w	r3, [r5], #4
 8012488:	4798      	blx	r3
 801248a:	3601      	adds	r6, #1
 801248c:	e7ee      	b.n	801246c <__libc_init_array+0xc>
 801248e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012492:	4798      	blx	r3
 8012494:	3601      	adds	r6, #1
 8012496:	e7f2      	b.n	801247e <__libc_init_array+0x1e>
 8012498:	08185e60 	.word	0x08185e60
 801249c:	08185e60 	.word	0x08185e60
 80124a0:	08185e60 	.word	0x08185e60
 80124a4:	08185e64 	.word	0x08185e64

080124a8 <memcpy>:
 80124a8:	440a      	add	r2, r1
 80124aa:	4291      	cmp	r1, r2
 80124ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80124b0:	d100      	bne.n	80124b4 <memcpy+0xc>
 80124b2:	4770      	bx	lr
 80124b4:	b510      	push	{r4, lr}
 80124b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80124be:	4291      	cmp	r1, r2
 80124c0:	d1f9      	bne.n	80124b6 <memcpy+0xe>
 80124c2:	bd10      	pop	{r4, pc}

080124c4 <memset>:
 80124c4:	4402      	add	r2, r0
 80124c6:	4603      	mov	r3, r0
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d100      	bne.n	80124ce <memset+0xa>
 80124cc:	4770      	bx	lr
 80124ce:	f803 1b01 	strb.w	r1, [r3], #1
 80124d2:	e7f9      	b.n	80124c8 <memset+0x4>

080124d4 <_free_r>:
 80124d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80124d6:	2900      	cmp	r1, #0
 80124d8:	d044      	beq.n	8012564 <_free_r+0x90>
 80124da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124de:	9001      	str	r0, [sp, #4]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	f1a1 0404 	sub.w	r4, r1, #4
 80124e6:	bfb8      	it	lt
 80124e8:	18e4      	addlt	r4, r4, r3
 80124ea:	f000 f903 	bl	80126f4 <__malloc_lock>
 80124ee:	4a1e      	ldr	r2, [pc, #120]	; (8012568 <_free_r+0x94>)
 80124f0:	9801      	ldr	r0, [sp, #4]
 80124f2:	6813      	ldr	r3, [r2, #0]
 80124f4:	b933      	cbnz	r3, 8012504 <_free_r+0x30>
 80124f6:	6063      	str	r3, [r4, #4]
 80124f8:	6014      	str	r4, [r2, #0]
 80124fa:	b003      	add	sp, #12
 80124fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012500:	f000 b8fe 	b.w	8012700 <__malloc_unlock>
 8012504:	42a3      	cmp	r3, r4
 8012506:	d908      	bls.n	801251a <_free_r+0x46>
 8012508:	6825      	ldr	r5, [r4, #0]
 801250a:	1961      	adds	r1, r4, r5
 801250c:	428b      	cmp	r3, r1
 801250e:	bf01      	itttt	eq
 8012510:	6819      	ldreq	r1, [r3, #0]
 8012512:	685b      	ldreq	r3, [r3, #4]
 8012514:	1949      	addeq	r1, r1, r5
 8012516:	6021      	streq	r1, [r4, #0]
 8012518:	e7ed      	b.n	80124f6 <_free_r+0x22>
 801251a:	461a      	mov	r2, r3
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	b10b      	cbz	r3, 8012524 <_free_r+0x50>
 8012520:	42a3      	cmp	r3, r4
 8012522:	d9fa      	bls.n	801251a <_free_r+0x46>
 8012524:	6811      	ldr	r1, [r2, #0]
 8012526:	1855      	adds	r5, r2, r1
 8012528:	42a5      	cmp	r5, r4
 801252a:	d10b      	bne.n	8012544 <_free_r+0x70>
 801252c:	6824      	ldr	r4, [r4, #0]
 801252e:	4421      	add	r1, r4
 8012530:	1854      	adds	r4, r2, r1
 8012532:	42a3      	cmp	r3, r4
 8012534:	6011      	str	r1, [r2, #0]
 8012536:	d1e0      	bne.n	80124fa <_free_r+0x26>
 8012538:	681c      	ldr	r4, [r3, #0]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	6053      	str	r3, [r2, #4]
 801253e:	4421      	add	r1, r4
 8012540:	6011      	str	r1, [r2, #0]
 8012542:	e7da      	b.n	80124fa <_free_r+0x26>
 8012544:	d902      	bls.n	801254c <_free_r+0x78>
 8012546:	230c      	movs	r3, #12
 8012548:	6003      	str	r3, [r0, #0]
 801254a:	e7d6      	b.n	80124fa <_free_r+0x26>
 801254c:	6825      	ldr	r5, [r4, #0]
 801254e:	1961      	adds	r1, r4, r5
 8012550:	428b      	cmp	r3, r1
 8012552:	bf04      	itt	eq
 8012554:	6819      	ldreq	r1, [r3, #0]
 8012556:	685b      	ldreq	r3, [r3, #4]
 8012558:	6063      	str	r3, [r4, #4]
 801255a:	bf04      	itt	eq
 801255c:	1949      	addeq	r1, r1, r5
 801255e:	6021      	streq	r1, [r4, #0]
 8012560:	6054      	str	r4, [r2, #4]
 8012562:	e7ca      	b.n	80124fa <_free_r+0x26>
 8012564:	b003      	add	sp, #12
 8012566:	bd30      	pop	{r4, r5, pc}
 8012568:	2001a964 	.word	0x2001a964

0801256c <sbrk_aligned>:
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4e0e      	ldr	r6, [pc, #56]	; (80125a8 <sbrk_aligned+0x3c>)
 8012570:	460c      	mov	r4, r1
 8012572:	6831      	ldr	r1, [r6, #0]
 8012574:	4605      	mov	r5, r0
 8012576:	b911      	cbnz	r1, 801257e <sbrk_aligned+0x12>
 8012578:	f000 f88c 	bl	8012694 <_sbrk_r>
 801257c:	6030      	str	r0, [r6, #0]
 801257e:	4621      	mov	r1, r4
 8012580:	4628      	mov	r0, r5
 8012582:	f000 f887 	bl	8012694 <_sbrk_r>
 8012586:	1c43      	adds	r3, r0, #1
 8012588:	d00a      	beq.n	80125a0 <sbrk_aligned+0x34>
 801258a:	1cc4      	adds	r4, r0, #3
 801258c:	f024 0403 	bic.w	r4, r4, #3
 8012590:	42a0      	cmp	r0, r4
 8012592:	d007      	beq.n	80125a4 <sbrk_aligned+0x38>
 8012594:	1a21      	subs	r1, r4, r0
 8012596:	4628      	mov	r0, r5
 8012598:	f000 f87c 	bl	8012694 <_sbrk_r>
 801259c:	3001      	adds	r0, #1
 801259e:	d101      	bne.n	80125a4 <sbrk_aligned+0x38>
 80125a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80125a4:	4620      	mov	r0, r4
 80125a6:	bd70      	pop	{r4, r5, r6, pc}
 80125a8:	2001a968 	.word	0x2001a968

080125ac <_malloc_r>:
 80125ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125b0:	1ccd      	adds	r5, r1, #3
 80125b2:	f025 0503 	bic.w	r5, r5, #3
 80125b6:	3508      	adds	r5, #8
 80125b8:	2d0c      	cmp	r5, #12
 80125ba:	bf38      	it	cc
 80125bc:	250c      	movcc	r5, #12
 80125be:	2d00      	cmp	r5, #0
 80125c0:	4607      	mov	r7, r0
 80125c2:	db01      	blt.n	80125c8 <_malloc_r+0x1c>
 80125c4:	42a9      	cmp	r1, r5
 80125c6:	d905      	bls.n	80125d4 <_malloc_r+0x28>
 80125c8:	230c      	movs	r3, #12
 80125ca:	603b      	str	r3, [r7, #0]
 80125cc:	2600      	movs	r6, #0
 80125ce:	4630      	mov	r0, r6
 80125d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125d4:	4e2e      	ldr	r6, [pc, #184]	; (8012690 <_malloc_r+0xe4>)
 80125d6:	f000 f88d 	bl	80126f4 <__malloc_lock>
 80125da:	6833      	ldr	r3, [r6, #0]
 80125dc:	461c      	mov	r4, r3
 80125de:	bb34      	cbnz	r4, 801262e <_malloc_r+0x82>
 80125e0:	4629      	mov	r1, r5
 80125e2:	4638      	mov	r0, r7
 80125e4:	f7ff ffc2 	bl	801256c <sbrk_aligned>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	4604      	mov	r4, r0
 80125ec:	d14d      	bne.n	801268a <_malloc_r+0xde>
 80125ee:	6834      	ldr	r4, [r6, #0]
 80125f0:	4626      	mov	r6, r4
 80125f2:	2e00      	cmp	r6, #0
 80125f4:	d140      	bne.n	8012678 <_malloc_r+0xcc>
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	4631      	mov	r1, r6
 80125fa:	4638      	mov	r0, r7
 80125fc:	eb04 0803 	add.w	r8, r4, r3
 8012600:	f000 f848 	bl	8012694 <_sbrk_r>
 8012604:	4580      	cmp	r8, r0
 8012606:	d13a      	bne.n	801267e <_malloc_r+0xd2>
 8012608:	6821      	ldr	r1, [r4, #0]
 801260a:	3503      	adds	r5, #3
 801260c:	1a6d      	subs	r5, r5, r1
 801260e:	f025 0503 	bic.w	r5, r5, #3
 8012612:	3508      	adds	r5, #8
 8012614:	2d0c      	cmp	r5, #12
 8012616:	bf38      	it	cc
 8012618:	250c      	movcc	r5, #12
 801261a:	4629      	mov	r1, r5
 801261c:	4638      	mov	r0, r7
 801261e:	f7ff ffa5 	bl	801256c <sbrk_aligned>
 8012622:	3001      	adds	r0, #1
 8012624:	d02b      	beq.n	801267e <_malloc_r+0xd2>
 8012626:	6823      	ldr	r3, [r4, #0]
 8012628:	442b      	add	r3, r5
 801262a:	6023      	str	r3, [r4, #0]
 801262c:	e00e      	b.n	801264c <_malloc_r+0xa0>
 801262e:	6822      	ldr	r2, [r4, #0]
 8012630:	1b52      	subs	r2, r2, r5
 8012632:	d41e      	bmi.n	8012672 <_malloc_r+0xc6>
 8012634:	2a0b      	cmp	r2, #11
 8012636:	d916      	bls.n	8012666 <_malloc_r+0xba>
 8012638:	1961      	adds	r1, r4, r5
 801263a:	42a3      	cmp	r3, r4
 801263c:	6025      	str	r5, [r4, #0]
 801263e:	bf18      	it	ne
 8012640:	6059      	strne	r1, [r3, #4]
 8012642:	6863      	ldr	r3, [r4, #4]
 8012644:	bf08      	it	eq
 8012646:	6031      	streq	r1, [r6, #0]
 8012648:	5162      	str	r2, [r4, r5]
 801264a:	604b      	str	r3, [r1, #4]
 801264c:	4638      	mov	r0, r7
 801264e:	f104 060b 	add.w	r6, r4, #11
 8012652:	f000 f855 	bl	8012700 <__malloc_unlock>
 8012656:	f026 0607 	bic.w	r6, r6, #7
 801265a:	1d23      	adds	r3, r4, #4
 801265c:	1af2      	subs	r2, r6, r3
 801265e:	d0b6      	beq.n	80125ce <_malloc_r+0x22>
 8012660:	1b9b      	subs	r3, r3, r6
 8012662:	50a3      	str	r3, [r4, r2]
 8012664:	e7b3      	b.n	80125ce <_malloc_r+0x22>
 8012666:	6862      	ldr	r2, [r4, #4]
 8012668:	42a3      	cmp	r3, r4
 801266a:	bf0c      	ite	eq
 801266c:	6032      	streq	r2, [r6, #0]
 801266e:	605a      	strne	r2, [r3, #4]
 8012670:	e7ec      	b.n	801264c <_malloc_r+0xa0>
 8012672:	4623      	mov	r3, r4
 8012674:	6864      	ldr	r4, [r4, #4]
 8012676:	e7b2      	b.n	80125de <_malloc_r+0x32>
 8012678:	4634      	mov	r4, r6
 801267a:	6876      	ldr	r6, [r6, #4]
 801267c:	e7b9      	b.n	80125f2 <_malloc_r+0x46>
 801267e:	230c      	movs	r3, #12
 8012680:	603b      	str	r3, [r7, #0]
 8012682:	4638      	mov	r0, r7
 8012684:	f000 f83c 	bl	8012700 <__malloc_unlock>
 8012688:	e7a1      	b.n	80125ce <_malloc_r+0x22>
 801268a:	6025      	str	r5, [r4, #0]
 801268c:	e7de      	b.n	801264c <_malloc_r+0xa0>
 801268e:	bf00      	nop
 8012690:	2001a964 	.word	0x2001a964

08012694 <_sbrk_r>:
 8012694:	b538      	push	{r3, r4, r5, lr}
 8012696:	4d06      	ldr	r5, [pc, #24]	; (80126b0 <_sbrk_r+0x1c>)
 8012698:	2300      	movs	r3, #0
 801269a:	4604      	mov	r4, r0
 801269c:	4608      	mov	r0, r1
 801269e:	602b      	str	r3, [r5, #0]
 80126a0:	f7ef f9ce 	bl	8001a40 <_sbrk>
 80126a4:	1c43      	adds	r3, r0, #1
 80126a6:	d102      	bne.n	80126ae <_sbrk_r+0x1a>
 80126a8:	682b      	ldr	r3, [r5, #0]
 80126aa:	b103      	cbz	r3, 80126ae <_sbrk_r+0x1a>
 80126ac:	6023      	str	r3, [r4, #0]
 80126ae:	bd38      	pop	{r3, r4, r5, pc}
 80126b0:	2001a96c 	.word	0x2001a96c

080126b4 <siprintf>:
 80126b4:	b40e      	push	{r1, r2, r3}
 80126b6:	b500      	push	{lr}
 80126b8:	b09c      	sub	sp, #112	; 0x70
 80126ba:	ab1d      	add	r3, sp, #116	; 0x74
 80126bc:	9002      	str	r0, [sp, #8]
 80126be:	9006      	str	r0, [sp, #24]
 80126c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80126c4:	4809      	ldr	r0, [pc, #36]	; (80126ec <siprintf+0x38>)
 80126c6:	9107      	str	r1, [sp, #28]
 80126c8:	9104      	str	r1, [sp, #16]
 80126ca:	4909      	ldr	r1, [pc, #36]	; (80126f0 <siprintf+0x3c>)
 80126cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80126d0:	9105      	str	r1, [sp, #20]
 80126d2:	6800      	ldr	r0, [r0, #0]
 80126d4:	9301      	str	r3, [sp, #4]
 80126d6:	a902      	add	r1, sp, #8
 80126d8:	f000 f8a2 	bl	8012820 <_svfiprintf_r>
 80126dc:	9b02      	ldr	r3, [sp, #8]
 80126de:	2200      	movs	r2, #0
 80126e0:	701a      	strb	r2, [r3, #0]
 80126e2:	b01c      	add	sp, #112	; 0x70
 80126e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80126e8:	b003      	add	sp, #12
 80126ea:	4770      	bx	lr
 80126ec:	200013b8 	.word	0x200013b8
 80126f0:	ffff0208 	.word	0xffff0208

080126f4 <__malloc_lock>:
 80126f4:	4801      	ldr	r0, [pc, #4]	; (80126fc <__malloc_lock+0x8>)
 80126f6:	f000 bb27 	b.w	8012d48 <__retarget_lock_acquire_recursive>
 80126fa:	bf00      	nop
 80126fc:	2001a970 	.word	0x2001a970

08012700 <__malloc_unlock>:
 8012700:	4801      	ldr	r0, [pc, #4]	; (8012708 <__malloc_unlock+0x8>)
 8012702:	f000 bb22 	b.w	8012d4a <__retarget_lock_release_recursive>
 8012706:	bf00      	nop
 8012708:	2001a970 	.word	0x2001a970

0801270c <_realloc_r>:
 801270c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012710:	4680      	mov	r8, r0
 8012712:	4614      	mov	r4, r2
 8012714:	460e      	mov	r6, r1
 8012716:	b921      	cbnz	r1, 8012722 <_realloc_r+0x16>
 8012718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801271c:	4611      	mov	r1, r2
 801271e:	f7ff bf45 	b.w	80125ac <_malloc_r>
 8012722:	b92a      	cbnz	r2, 8012730 <_realloc_r+0x24>
 8012724:	f7ff fed6 	bl	80124d4 <_free_r>
 8012728:	4625      	mov	r5, r4
 801272a:	4628      	mov	r0, r5
 801272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012730:	f000 fb26 	bl	8012d80 <_malloc_usable_size_r>
 8012734:	4284      	cmp	r4, r0
 8012736:	4607      	mov	r7, r0
 8012738:	d802      	bhi.n	8012740 <_realloc_r+0x34>
 801273a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801273e:	d812      	bhi.n	8012766 <_realloc_r+0x5a>
 8012740:	4621      	mov	r1, r4
 8012742:	4640      	mov	r0, r8
 8012744:	f7ff ff32 	bl	80125ac <_malloc_r>
 8012748:	4605      	mov	r5, r0
 801274a:	2800      	cmp	r0, #0
 801274c:	d0ed      	beq.n	801272a <_realloc_r+0x1e>
 801274e:	42bc      	cmp	r4, r7
 8012750:	4622      	mov	r2, r4
 8012752:	4631      	mov	r1, r6
 8012754:	bf28      	it	cs
 8012756:	463a      	movcs	r2, r7
 8012758:	f7ff fea6 	bl	80124a8 <memcpy>
 801275c:	4631      	mov	r1, r6
 801275e:	4640      	mov	r0, r8
 8012760:	f7ff feb8 	bl	80124d4 <_free_r>
 8012764:	e7e1      	b.n	801272a <_realloc_r+0x1e>
 8012766:	4635      	mov	r5, r6
 8012768:	e7df      	b.n	801272a <_realloc_r+0x1e>

0801276a <__ssputs_r>:
 801276a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801276e:	688e      	ldr	r6, [r1, #8]
 8012770:	429e      	cmp	r6, r3
 8012772:	4682      	mov	sl, r0
 8012774:	460c      	mov	r4, r1
 8012776:	4690      	mov	r8, r2
 8012778:	461f      	mov	r7, r3
 801277a:	d838      	bhi.n	80127ee <__ssputs_r+0x84>
 801277c:	898a      	ldrh	r2, [r1, #12]
 801277e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012782:	d032      	beq.n	80127ea <__ssputs_r+0x80>
 8012784:	6825      	ldr	r5, [r4, #0]
 8012786:	6909      	ldr	r1, [r1, #16]
 8012788:	eba5 0901 	sub.w	r9, r5, r1
 801278c:	6965      	ldr	r5, [r4, #20]
 801278e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012792:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012796:	3301      	adds	r3, #1
 8012798:	444b      	add	r3, r9
 801279a:	106d      	asrs	r5, r5, #1
 801279c:	429d      	cmp	r5, r3
 801279e:	bf38      	it	cc
 80127a0:	461d      	movcc	r5, r3
 80127a2:	0553      	lsls	r3, r2, #21
 80127a4:	d531      	bpl.n	801280a <__ssputs_r+0xa0>
 80127a6:	4629      	mov	r1, r5
 80127a8:	f7ff ff00 	bl	80125ac <_malloc_r>
 80127ac:	4606      	mov	r6, r0
 80127ae:	b950      	cbnz	r0, 80127c6 <__ssputs_r+0x5c>
 80127b0:	230c      	movs	r3, #12
 80127b2:	f8ca 3000 	str.w	r3, [sl]
 80127b6:	89a3      	ldrh	r3, [r4, #12]
 80127b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127bc:	81a3      	strh	r3, [r4, #12]
 80127be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80127c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127c6:	6921      	ldr	r1, [r4, #16]
 80127c8:	464a      	mov	r2, r9
 80127ca:	f7ff fe6d 	bl	80124a8 <memcpy>
 80127ce:	89a3      	ldrh	r3, [r4, #12]
 80127d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127d8:	81a3      	strh	r3, [r4, #12]
 80127da:	6126      	str	r6, [r4, #16]
 80127dc:	6165      	str	r5, [r4, #20]
 80127de:	444e      	add	r6, r9
 80127e0:	eba5 0509 	sub.w	r5, r5, r9
 80127e4:	6026      	str	r6, [r4, #0]
 80127e6:	60a5      	str	r5, [r4, #8]
 80127e8:	463e      	mov	r6, r7
 80127ea:	42be      	cmp	r6, r7
 80127ec:	d900      	bls.n	80127f0 <__ssputs_r+0x86>
 80127ee:	463e      	mov	r6, r7
 80127f0:	6820      	ldr	r0, [r4, #0]
 80127f2:	4632      	mov	r2, r6
 80127f4:	4641      	mov	r1, r8
 80127f6:	f000 faa9 	bl	8012d4c <memmove>
 80127fa:	68a3      	ldr	r3, [r4, #8]
 80127fc:	1b9b      	subs	r3, r3, r6
 80127fe:	60a3      	str	r3, [r4, #8]
 8012800:	6823      	ldr	r3, [r4, #0]
 8012802:	4433      	add	r3, r6
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	2000      	movs	r0, #0
 8012808:	e7db      	b.n	80127c2 <__ssputs_r+0x58>
 801280a:	462a      	mov	r2, r5
 801280c:	f7ff ff7e 	bl	801270c <_realloc_r>
 8012810:	4606      	mov	r6, r0
 8012812:	2800      	cmp	r0, #0
 8012814:	d1e1      	bne.n	80127da <__ssputs_r+0x70>
 8012816:	6921      	ldr	r1, [r4, #16]
 8012818:	4650      	mov	r0, sl
 801281a:	f7ff fe5b 	bl	80124d4 <_free_r>
 801281e:	e7c7      	b.n	80127b0 <__ssputs_r+0x46>

08012820 <_svfiprintf_r>:
 8012820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012824:	4698      	mov	r8, r3
 8012826:	898b      	ldrh	r3, [r1, #12]
 8012828:	061b      	lsls	r3, r3, #24
 801282a:	b09d      	sub	sp, #116	; 0x74
 801282c:	4607      	mov	r7, r0
 801282e:	460d      	mov	r5, r1
 8012830:	4614      	mov	r4, r2
 8012832:	d50e      	bpl.n	8012852 <_svfiprintf_r+0x32>
 8012834:	690b      	ldr	r3, [r1, #16]
 8012836:	b963      	cbnz	r3, 8012852 <_svfiprintf_r+0x32>
 8012838:	2140      	movs	r1, #64	; 0x40
 801283a:	f7ff feb7 	bl	80125ac <_malloc_r>
 801283e:	6028      	str	r0, [r5, #0]
 8012840:	6128      	str	r0, [r5, #16]
 8012842:	b920      	cbnz	r0, 801284e <_svfiprintf_r+0x2e>
 8012844:	230c      	movs	r3, #12
 8012846:	603b      	str	r3, [r7, #0]
 8012848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801284c:	e0d1      	b.n	80129f2 <_svfiprintf_r+0x1d2>
 801284e:	2340      	movs	r3, #64	; 0x40
 8012850:	616b      	str	r3, [r5, #20]
 8012852:	2300      	movs	r3, #0
 8012854:	9309      	str	r3, [sp, #36]	; 0x24
 8012856:	2320      	movs	r3, #32
 8012858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801285c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012860:	2330      	movs	r3, #48	; 0x30
 8012862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012a0c <_svfiprintf_r+0x1ec>
 8012866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801286a:	f04f 0901 	mov.w	r9, #1
 801286e:	4623      	mov	r3, r4
 8012870:	469a      	mov	sl, r3
 8012872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012876:	b10a      	cbz	r2, 801287c <_svfiprintf_r+0x5c>
 8012878:	2a25      	cmp	r2, #37	; 0x25
 801287a:	d1f9      	bne.n	8012870 <_svfiprintf_r+0x50>
 801287c:	ebba 0b04 	subs.w	fp, sl, r4
 8012880:	d00b      	beq.n	801289a <_svfiprintf_r+0x7a>
 8012882:	465b      	mov	r3, fp
 8012884:	4622      	mov	r2, r4
 8012886:	4629      	mov	r1, r5
 8012888:	4638      	mov	r0, r7
 801288a:	f7ff ff6e 	bl	801276a <__ssputs_r>
 801288e:	3001      	adds	r0, #1
 8012890:	f000 80aa 	beq.w	80129e8 <_svfiprintf_r+0x1c8>
 8012894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012896:	445a      	add	r2, fp
 8012898:	9209      	str	r2, [sp, #36]	; 0x24
 801289a:	f89a 3000 	ldrb.w	r3, [sl]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	f000 80a2 	beq.w	80129e8 <_svfiprintf_r+0x1c8>
 80128a4:	2300      	movs	r3, #0
 80128a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128ae:	f10a 0a01 	add.w	sl, sl, #1
 80128b2:	9304      	str	r3, [sp, #16]
 80128b4:	9307      	str	r3, [sp, #28]
 80128b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128ba:	931a      	str	r3, [sp, #104]	; 0x68
 80128bc:	4654      	mov	r4, sl
 80128be:	2205      	movs	r2, #5
 80128c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128c4:	4851      	ldr	r0, [pc, #324]	; (8012a0c <_svfiprintf_r+0x1ec>)
 80128c6:	f7ed fd23 	bl	8000310 <memchr>
 80128ca:	9a04      	ldr	r2, [sp, #16]
 80128cc:	b9d8      	cbnz	r0, 8012906 <_svfiprintf_r+0xe6>
 80128ce:	06d0      	lsls	r0, r2, #27
 80128d0:	bf44      	itt	mi
 80128d2:	2320      	movmi	r3, #32
 80128d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128d8:	0711      	lsls	r1, r2, #28
 80128da:	bf44      	itt	mi
 80128dc:	232b      	movmi	r3, #43	; 0x2b
 80128de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80128e2:	f89a 3000 	ldrb.w	r3, [sl]
 80128e6:	2b2a      	cmp	r3, #42	; 0x2a
 80128e8:	d015      	beq.n	8012916 <_svfiprintf_r+0xf6>
 80128ea:	9a07      	ldr	r2, [sp, #28]
 80128ec:	4654      	mov	r4, sl
 80128ee:	2000      	movs	r0, #0
 80128f0:	f04f 0c0a 	mov.w	ip, #10
 80128f4:	4621      	mov	r1, r4
 80128f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128fa:	3b30      	subs	r3, #48	; 0x30
 80128fc:	2b09      	cmp	r3, #9
 80128fe:	d94e      	bls.n	801299e <_svfiprintf_r+0x17e>
 8012900:	b1b0      	cbz	r0, 8012930 <_svfiprintf_r+0x110>
 8012902:	9207      	str	r2, [sp, #28]
 8012904:	e014      	b.n	8012930 <_svfiprintf_r+0x110>
 8012906:	eba0 0308 	sub.w	r3, r0, r8
 801290a:	fa09 f303 	lsl.w	r3, r9, r3
 801290e:	4313      	orrs	r3, r2
 8012910:	9304      	str	r3, [sp, #16]
 8012912:	46a2      	mov	sl, r4
 8012914:	e7d2      	b.n	80128bc <_svfiprintf_r+0x9c>
 8012916:	9b03      	ldr	r3, [sp, #12]
 8012918:	1d19      	adds	r1, r3, #4
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	9103      	str	r1, [sp, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	bfbb      	ittet	lt
 8012922:	425b      	neglt	r3, r3
 8012924:	f042 0202 	orrlt.w	r2, r2, #2
 8012928:	9307      	strge	r3, [sp, #28]
 801292a:	9307      	strlt	r3, [sp, #28]
 801292c:	bfb8      	it	lt
 801292e:	9204      	strlt	r2, [sp, #16]
 8012930:	7823      	ldrb	r3, [r4, #0]
 8012932:	2b2e      	cmp	r3, #46	; 0x2e
 8012934:	d10c      	bne.n	8012950 <_svfiprintf_r+0x130>
 8012936:	7863      	ldrb	r3, [r4, #1]
 8012938:	2b2a      	cmp	r3, #42	; 0x2a
 801293a:	d135      	bne.n	80129a8 <_svfiprintf_r+0x188>
 801293c:	9b03      	ldr	r3, [sp, #12]
 801293e:	1d1a      	adds	r2, r3, #4
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	9203      	str	r2, [sp, #12]
 8012944:	2b00      	cmp	r3, #0
 8012946:	bfb8      	it	lt
 8012948:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801294c:	3402      	adds	r4, #2
 801294e:	9305      	str	r3, [sp, #20]
 8012950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012a1c <_svfiprintf_r+0x1fc>
 8012954:	7821      	ldrb	r1, [r4, #0]
 8012956:	2203      	movs	r2, #3
 8012958:	4650      	mov	r0, sl
 801295a:	f7ed fcd9 	bl	8000310 <memchr>
 801295e:	b140      	cbz	r0, 8012972 <_svfiprintf_r+0x152>
 8012960:	2340      	movs	r3, #64	; 0x40
 8012962:	eba0 000a 	sub.w	r0, r0, sl
 8012966:	fa03 f000 	lsl.w	r0, r3, r0
 801296a:	9b04      	ldr	r3, [sp, #16]
 801296c:	4303      	orrs	r3, r0
 801296e:	3401      	adds	r4, #1
 8012970:	9304      	str	r3, [sp, #16]
 8012972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012976:	4826      	ldr	r0, [pc, #152]	; (8012a10 <_svfiprintf_r+0x1f0>)
 8012978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801297c:	2206      	movs	r2, #6
 801297e:	f7ed fcc7 	bl	8000310 <memchr>
 8012982:	2800      	cmp	r0, #0
 8012984:	d038      	beq.n	80129f8 <_svfiprintf_r+0x1d8>
 8012986:	4b23      	ldr	r3, [pc, #140]	; (8012a14 <_svfiprintf_r+0x1f4>)
 8012988:	bb1b      	cbnz	r3, 80129d2 <_svfiprintf_r+0x1b2>
 801298a:	9b03      	ldr	r3, [sp, #12]
 801298c:	3307      	adds	r3, #7
 801298e:	f023 0307 	bic.w	r3, r3, #7
 8012992:	3308      	adds	r3, #8
 8012994:	9303      	str	r3, [sp, #12]
 8012996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012998:	4433      	add	r3, r6
 801299a:	9309      	str	r3, [sp, #36]	; 0x24
 801299c:	e767      	b.n	801286e <_svfiprintf_r+0x4e>
 801299e:	fb0c 3202 	mla	r2, ip, r2, r3
 80129a2:	460c      	mov	r4, r1
 80129a4:	2001      	movs	r0, #1
 80129a6:	e7a5      	b.n	80128f4 <_svfiprintf_r+0xd4>
 80129a8:	2300      	movs	r3, #0
 80129aa:	3401      	adds	r4, #1
 80129ac:	9305      	str	r3, [sp, #20]
 80129ae:	4619      	mov	r1, r3
 80129b0:	f04f 0c0a 	mov.w	ip, #10
 80129b4:	4620      	mov	r0, r4
 80129b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129ba:	3a30      	subs	r2, #48	; 0x30
 80129bc:	2a09      	cmp	r2, #9
 80129be:	d903      	bls.n	80129c8 <_svfiprintf_r+0x1a8>
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d0c5      	beq.n	8012950 <_svfiprintf_r+0x130>
 80129c4:	9105      	str	r1, [sp, #20]
 80129c6:	e7c3      	b.n	8012950 <_svfiprintf_r+0x130>
 80129c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80129cc:	4604      	mov	r4, r0
 80129ce:	2301      	movs	r3, #1
 80129d0:	e7f0      	b.n	80129b4 <_svfiprintf_r+0x194>
 80129d2:	ab03      	add	r3, sp, #12
 80129d4:	9300      	str	r3, [sp, #0]
 80129d6:	462a      	mov	r2, r5
 80129d8:	4b0f      	ldr	r3, [pc, #60]	; (8012a18 <_svfiprintf_r+0x1f8>)
 80129da:	a904      	add	r1, sp, #16
 80129dc:	4638      	mov	r0, r7
 80129de:	f3af 8000 	nop.w
 80129e2:	1c42      	adds	r2, r0, #1
 80129e4:	4606      	mov	r6, r0
 80129e6:	d1d6      	bne.n	8012996 <_svfiprintf_r+0x176>
 80129e8:	89ab      	ldrh	r3, [r5, #12]
 80129ea:	065b      	lsls	r3, r3, #25
 80129ec:	f53f af2c 	bmi.w	8012848 <_svfiprintf_r+0x28>
 80129f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129f2:	b01d      	add	sp, #116	; 0x74
 80129f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f8:	ab03      	add	r3, sp, #12
 80129fa:	9300      	str	r3, [sp, #0]
 80129fc:	462a      	mov	r2, r5
 80129fe:	4b06      	ldr	r3, [pc, #24]	; (8012a18 <_svfiprintf_r+0x1f8>)
 8012a00:	a904      	add	r1, sp, #16
 8012a02:	4638      	mov	r0, r7
 8012a04:	f000 f87a 	bl	8012afc <_printf_i>
 8012a08:	e7eb      	b.n	80129e2 <_svfiprintf_r+0x1c2>
 8012a0a:	bf00      	nop
 8012a0c:	081859e0 	.word	0x081859e0
 8012a10:	081859ea 	.word	0x081859ea
 8012a14:	00000000 	.word	0x00000000
 8012a18:	0801276b 	.word	0x0801276b
 8012a1c:	081859e6 	.word	0x081859e6

08012a20 <_printf_common>:
 8012a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a24:	4616      	mov	r6, r2
 8012a26:	4699      	mov	r9, r3
 8012a28:	688a      	ldr	r2, [r1, #8]
 8012a2a:	690b      	ldr	r3, [r1, #16]
 8012a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a30:	4293      	cmp	r3, r2
 8012a32:	bfb8      	it	lt
 8012a34:	4613      	movlt	r3, r2
 8012a36:	6033      	str	r3, [r6, #0]
 8012a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a3c:	4607      	mov	r7, r0
 8012a3e:	460c      	mov	r4, r1
 8012a40:	b10a      	cbz	r2, 8012a46 <_printf_common+0x26>
 8012a42:	3301      	adds	r3, #1
 8012a44:	6033      	str	r3, [r6, #0]
 8012a46:	6823      	ldr	r3, [r4, #0]
 8012a48:	0699      	lsls	r1, r3, #26
 8012a4a:	bf42      	ittt	mi
 8012a4c:	6833      	ldrmi	r3, [r6, #0]
 8012a4e:	3302      	addmi	r3, #2
 8012a50:	6033      	strmi	r3, [r6, #0]
 8012a52:	6825      	ldr	r5, [r4, #0]
 8012a54:	f015 0506 	ands.w	r5, r5, #6
 8012a58:	d106      	bne.n	8012a68 <_printf_common+0x48>
 8012a5a:	f104 0a19 	add.w	sl, r4, #25
 8012a5e:	68e3      	ldr	r3, [r4, #12]
 8012a60:	6832      	ldr	r2, [r6, #0]
 8012a62:	1a9b      	subs	r3, r3, r2
 8012a64:	42ab      	cmp	r3, r5
 8012a66:	dc26      	bgt.n	8012ab6 <_printf_common+0x96>
 8012a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a6c:	1e13      	subs	r3, r2, #0
 8012a6e:	6822      	ldr	r2, [r4, #0]
 8012a70:	bf18      	it	ne
 8012a72:	2301      	movne	r3, #1
 8012a74:	0692      	lsls	r2, r2, #26
 8012a76:	d42b      	bmi.n	8012ad0 <_printf_common+0xb0>
 8012a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	4638      	mov	r0, r7
 8012a80:	47c0      	blx	r8
 8012a82:	3001      	adds	r0, #1
 8012a84:	d01e      	beq.n	8012ac4 <_printf_common+0xa4>
 8012a86:	6823      	ldr	r3, [r4, #0]
 8012a88:	68e5      	ldr	r5, [r4, #12]
 8012a8a:	6832      	ldr	r2, [r6, #0]
 8012a8c:	f003 0306 	and.w	r3, r3, #6
 8012a90:	2b04      	cmp	r3, #4
 8012a92:	bf08      	it	eq
 8012a94:	1aad      	subeq	r5, r5, r2
 8012a96:	68a3      	ldr	r3, [r4, #8]
 8012a98:	6922      	ldr	r2, [r4, #16]
 8012a9a:	bf0c      	ite	eq
 8012a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012aa0:	2500      	movne	r5, #0
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	bfc4      	itt	gt
 8012aa6:	1a9b      	subgt	r3, r3, r2
 8012aa8:	18ed      	addgt	r5, r5, r3
 8012aaa:	2600      	movs	r6, #0
 8012aac:	341a      	adds	r4, #26
 8012aae:	42b5      	cmp	r5, r6
 8012ab0:	d11a      	bne.n	8012ae8 <_printf_common+0xc8>
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	e008      	b.n	8012ac8 <_printf_common+0xa8>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	4652      	mov	r2, sl
 8012aba:	4649      	mov	r1, r9
 8012abc:	4638      	mov	r0, r7
 8012abe:	47c0      	blx	r8
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	d103      	bne.n	8012acc <_printf_common+0xac>
 8012ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012acc:	3501      	adds	r5, #1
 8012ace:	e7c6      	b.n	8012a5e <_printf_common+0x3e>
 8012ad0:	18e1      	adds	r1, r4, r3
 8012ad2:	1c5a      	adds	r2, r3, #1
 8012ad4:	2030      	movs	r0, #48	; 0x30
 8012ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ada:	4422      	add	r2, r4
 8012adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012ae4:	3302      	adds	r3, #2
 8012ae6:	e7c7      	b.n	8012a78 <_printf_common+0x58>
 8012ae8:	2301      	movs	r3, #1
 8012aea:	4622      	mov	r2, r4
 8012aec:	4649      	mov	r1, r9
 8012aee:	4638      	mov	r0, r7
 8012af0:	47c0      	blx	r8
 8012af2:	3001      	adds	r0, #1
 8012af4:	d0e6      	beq.n	8012ac4 <_printf_common+0xa4>
 8012af6:	3601      	adds	r6, #1
 8012af8:	e7d9      	b.n	8012aae <_printf_common+0x8e>
	...

08012afc <_printf_i>:
 8012afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b00:	7e0f      	ldrb	r7, [r1, #24]
 8012b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b04:	2f78      	cmp	r7, #120	; 0x78
 8012b06:	4691      	mov	r9, r2
 8012b08:	4680      	mov	r8, r0
 8012b0a:	460c      	mov	r4, r1
 8012b0c:	469a      	mov	sl, r3
 8012b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012b12:	d807      	bhi.n	8012b24 <_printf_i+0x28>
 8012b14:	2f62      	cmp	r7, #98	; 0x62
 8012b16:	d80a      	bhi.n	8012b2e <_printf_i+0x32>
 8012b18:	2f00      	cmp	r7, #0
 8012b1a:	f000 80d8 	beq.w	8012cce <_printf_i+0x1d2>
 8012b1e:	2f58      	cmp	r7, #88	; 0x58
 8012b20:	f000 80a3 	beq.w	8012c6a <_printf_i+0x16e>
 8012b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012b2c:	e03a      	b.n	8012ba4 <_printf_i+0xa8>
 8012b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012b32:	2b15      	cmp	r3, #21
 8012b34:	d8f6      	bhi.n	8012b24 <_printf_i+0x28>
 8012b36:	a101      	add	r1, pc, #4	; (adr r1, 8012b3c <_printf_i+0x40>)
 8012b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012b3c:	08012b95 	.word	0x08012b95
 8012b40:	08012ba9 	.word	0x08012ba9
 8012b44:	08012b25 	.word	0x08012b25
 8012b48:	08012b25 	.word	0x08012b25
 8012b4c:	08012b25 	.word	0x08012b25
 8012b50:	08012b25 	.word	0x08012b25
 8012b54:	08012ba9 	.word	0x08012ba9
 8012b58:	08012b25 	.word	0x08012b25
 8012b5c:	08012b25 	.word	0x08012b25
 8012b60:	08012b25 	.word	0x08012b25
 8012b64:	08012b25 	.word	0x08012b25
 8012b68:	08012cb5 	.word	0x08012cb5
 8012b6c:	08012bd9 	.word	0x08012bd9
 8012b70:	08012c97 	.word	0x08012c97
 8012b74:	08012b25 	.word	0x08012b25
 8012b78:	08012b25 	.word	0x08012b25
 8012b7c:	08012cd7 	.word	0x08012cd7
 8012b80:	08012b25 	.word	0x08012b25
 8012b84:	08012bd9 	.word	0x08012bd9
 8012b88:	08012b25 	.word	0x08012b25
 8012b8c:	08012b25 	.word	0x08012b25
 8012b90:	08012c9f 	.word	0x08012c9f
 8012b94:	682b      	ldr	r3, [r5, #0]
 8012b96:	1d1a      	adds	r2, r3, #4
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	602a      	str	r2, [r5, #0]
 8012b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	e0a3      	b.n	8012cf0 <_printf_i+0x1f4>
 8012ba8:	6820      	ldr	r0, [r4, #0]
 8012baa:	6829      	ldr	r1, [r5, #0]
 8012bac:	0606      	lsls	r6, r0, #24
 8012bae:	f101 0304 	add.w	r3, r1, #4
 8012bb2:	d50a      	bpl.n	8012bca <_printf_i+0xce>
 8012bb4:	680e      	ldr	r6, [r1, #0]
 8012bb6:	602b      	str	r3, [r5, #0]
 8012bb8:	2e00      	cmp	r6, #0
 8012bba:	da03      	bge.n	8012bc4 <_printf_i+0xc8>
 8012bbc:	232d      	movs	r3, #45	; 0x2d
 8012bbe:	4276      	negs	r6, r6
 8012bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bc4:	485e      	ldr	r0, [pc, #376]	; (8012d40 <_printf_i+0x244>)
 8012bc6:	230a      	movs	r3, #10
 8012bc8:	e019      	b.n	8012bfe <_printf_i+0x102>
 8012bca:	680e      	ldr	r6, [r1, #0]
 8012bcc:	602b      	str	r3, [r5, #0]
 8012bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012bd2:	bf18      	it	ne
 8012bd4:	b236      	sxthne	r6, r6
 8012bd6:	e7ef      	b.n	8012bb8 <_printf_i+0xbc>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	6820      	ldr	r0, [r4, #0]
 8012bdc:	1d19      	adds	r1, r3, #4
 8012bde:	6029      	str	r1, [r5, #0]
 8012be0:	0601      	lsls	r1, r0, #24
 8012be2:	d501      	bpl.n	8012be8 <_printf_i+0xec>
 8012be4:	681e      	ldr	r6, [r3, #0]
 8012be6:	e002      	b.n	8012bee <_printf_i+0xf2>
 8012be8:	0646      	lsls	r6, r0, #25
 8012bea:	d5fb      	bpl.n	8012be4 <_printf_i+0xe8>
 8012bec:	881e      	ldrh	r6, [r3, #0]
 8012bee:	4854      	ldr	r0, [pc, #336]	; (8012d40 <_printf_i+0x244>)
 8012bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8012bf2:	bf0c      	ite	eq
 8012bf4:	2308      	moveq	r3, #8
 8012bf6:	230a      	movne	r3, #10
 8012bf8:	2100      	movs	r1, #0
 8012bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012bfe:	6865      	ldr	r5, [r4, #4]
 8012c00:	60a5      	str	r5, [r4, #8]
 8012c02:	2d00      	cmp	r5, #0
 8012c04:	bfa2      	ittt	ge
 8012c06:	6821      	ldrge	r1, [r4, #0]
 8012c08:	f021 0104 	bicge.w	r1, r1, #4
 8012c0c:	6021      	strge	r1, [r4, #0]
 8012c0e:	b90e      	cbnz	r6, 8012c14 <_printf_i+0x118>
 8012c10:	2d00      	cmp	r5, #0
 8012c12:	d04d      	beq.n	8012cb0 <_printf_i+0x1b4>
 8012c14:	4615      	mov	r5, r2
 8012c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8012c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8012c1e:	5dc7      	ldrb	r7, [r0, r7]
 8012c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012c24:	4637      	mov	r7, r6
 8012c26:	42bb      	cmp	r3, r7
 8012c28:	460e      	mov	r6, r1
 8012c2a:	d9f4      	bls.n	8012c16 <_printf_i+0x11a>
 8012c2c:	2b08      	cmp	r3, #8
 8012c2e:	d10b      	bne.n	8012c48 <_printf_i+0x14c>
 8012c30:	6823      	ldr	r3, [r4, #0]
 8012c32:	07de      	lsls	r6, r3, #31
 8012c34:	d508      	bpl.n	8012c48 <_printf_i+0x14c>
 8012c36:	6923      	ldr	r3, [r4, #16]
 8012c38:	6861      	ldr	r1, [r4, #4]
 8012c3a:	4299      	cmp	r1, r3
 8012c3c:	bfde      	ittt	le
 8012c3e:	2330      	movle	r3, #48	; 0x30
 8012c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c44:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012c48:	1b52      	subs	r2, r2, r5
 8012c4a:	6122      	str	r2, [r4, #16]
 8012c4c:	f8cd a000 	str.w	sl, [sp]
 8012c50:	464b      	mov	r3, r9
 8012c52:	aa03      	add	r2, sp, #12
 8012c54:	4621      	mov	r1, r4
 8012c56:	4640      	mov	r0, r8
 8012c58:	f7ff fee2 	bl	8012a20 <_printf_common>
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d14c      	bne.n	8012cfa <_printf_i+0x1fe>
 8012c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c64:	b004      	add	sp, #16
 8012c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c6a:	4835      	ldr	r0, [pc, #212]	; (8012d40 <_printf_i+0x244>)
 8012c6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012c70:	6829      	ldr	r1, [r5, #0]
 8012c72:	6823      	ldr	r3, [r4, #0]
 8012c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8012c78:	6029      	str	r1, [r5, #0]
 8012c7a:	061d      	lsls	r5, r3, #24
 8012c7c:	d514      	bpl.n	8012ca8 <_printf_i+0x1ac>
 8012c7e:	07df      	lsls	r7, r3, #31
 8012c80:	bf44      	itt	mi
 8012c82:	f043 0320 	orrmi.w	r3, r3, #32
 8012c86:	6023      	strmi	r3, [r4, #0]
 8012c88:	b91e      	cbnz	r6, 8012c92 <_printf_i+0x196>
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	f023 0320 	bic.w	r3, r3, #32
 8012c90:	6023      	str	r3, [r4, #0]
 8012c92:	2310      	movs	r3, #16
 8012c94:	e7b0      	b.n	8012bf8 <_printf_i+0xfc>
 8012c96:	6823      	ldr	r3, [r4, #0]
 8012c98:	f043 0320 	orr.w	r3, r3, #32
 8012c9c:	6023      	str	r3, [r4, #0]
 8012c9e:	2378      	movs	r3, #120	; 0x78
 8012ca0:	4828      	ldr	r0, [pc, #160]	; (8012d44 <_printf_i+0x248>)
 8012ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012ca6:	e7e3      	b.n	8012c70 <_printf_i+0x174>
 8012ca8:	0659      	lsls	r1, r3, #25
 8012caa:	bf48      	it	mi
 8012cac:	b2b6      	uxthmi	r6, r6
 8012cae:	e7e6      	b.n	8012c7e <_printf_i+0x182>
 8012cb0:	4615      	mov	r5, r2
 8012cb2:	e7bb      	b.n	8012c2c <_printf_i+0x130>
 8012cb4:	682b      	ldr	r3, [r5, #0]
 8012cb6:	6826      	ldr	r6, [r4, #0]
 8012cb8:	6961      	ldr	r1, [r4, #20]
 8012cba:	1d18      	adds	r0, r3, #4
 8012cbc:	6028      	str	r0, [r5, #0]
 8012cbe:	0635      	lsls	r5, r6, #24
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	d501      	bpl.n	8012cc8 <_printf_i+0x1cc>
 8012cc4:	6019      	str	r1, [r3, #0]
 8012cc6:	e002      	b.n	8012cce <_printf_i+0x1d2>
 8012cc8:	0670      	lsls	r0, r6, #25
 8012cca:	d5fb      	bpl.n	8012cc4 <_printf_i+0x1c8>
 8012ccc:	8019      	strh	r1, [r3, #0]
 8012cce:	2300      	movs	r3, #0
 8012cd0:	6123      	str	r3, [r4, #16]
 8012cd2:	4615      	mov	r5, r2
 8012cd4:	e7ba      	b.n	8012c4c <_printf_i+0x150>
 8012cd6:	682b      	ldr	r3, [r5, #0]
 8012cd8:	1d1a      	adds	r2, r3, #4
 8012cda:	602a      	str	r2, [r5, #0]
 8012cdc:	681d      	ldr	r5, [r3, #0]
 8012cde:	6862      	ldr	r2, [r4, #4]
 8012ce0:	2100      	movs	r1, #0
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f7ed fb14 	bl	8000310 <memchr>
 8012ce8:	b108      	cbz	r0, 8012cee <_printf_i+0x1f2>
 8012cea:	1b40      	subs	r0, r0, r5
 8012cec:	6060      	str	r0, [r4, #4]
 8012cee:	6863      	ldr	r3, [r4, #4]
 8012cf0:	6123      	str	r3, [r4, #16]
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cf8:	e7a8      	b.n	8012c4c <_printf_i+0x150>
 8012cfa:	6923      	ldr	r3, [r4, #16]
 8012cfc:	462a      	mov	r2, r5
 8012cfe:	4649      	mov	r1, r9
 8012d00:	4640      	mov	r0, r8
 8012d02:	47d0      	blx	sl
 8012d04:	3001      	adds	r0, #1
 8012d06:	d0ab      	beq.n	8012c60 <_printf_i+0x164>
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	079b      	lsls	r3, r3, #30
 8012d0c:	d413      	bmi.n	8012d36 <_printf_i+0x23a>
 8012d0e:	68e0      	ldr	r0, [r4, #12]
 8012d10:	9b03      	ldr	r3, [sp, #12]
 8012d12:	4298      	cmp	r0, r3
 8012d14:	bfb8      	it	lt
 8012d16:	4618      	movlt	r0, r3
 8012d18:	e7a4      	b.n	8012c64 <_printf_i+0x168>
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	4632      	mov	r2, r6
 8012d1e:	4649      	mov	r1, r9
 8012d20:	4640      	mov	r0, r8
 8012d22:	47d0      	blx	sl
 8012d24:	3001      	adds	r0, #1
 8012d26:	d09b      	beq.n	8012c60 <_printf_i+0x164>
 8012d28:	3501      	adds	r5, #1
 8012d2a:	68e3      	ldr	r3, [r4, #12]
 8012d2c:	9903      	ldr	r1, [sp, #12]
 8012d2e:	1a5b      	subs	r3, r3, r1
 8012d30:	42ab      	cmp	r3, r5
 8012d32:	dcf2      	bgt.n	8012d1a <_printf_i+0x21e>
 8012d34:	e7eb      	b.n	8012d0e <_printf_i+0x212>
 8012d36:	2500      	movs	r5, #0
 8012d38:	f104 0619 	add.w	r6, r4, #25
 8012d3c:	e7f5      	b.n	8012d2a <_printf_i+0x22e>
 8012d3e:	bf00      	nop
 8012d40:	081859f1 	.word	0x081859f1
 8012d44:	08185a02 	.word	0x08185a02

08012d48 <__retarget_lock_acquire_recursive>:
 8012d48:	4770      	bx	lr

08012d4a <__retarget_lock_release_recursive>:
 8012d4a:	4770      	bx	lr

08012d4c <memmove>:
 8012d4c:	4288      	cmp	r0, r1
 8012d4e:	b510      	push	{r4, lr}
 8012d50:	eb01 0402 	add.w	r4, r1, r2
 8012d54:	d902      	bls.n	8012d5c <memmove+0x10>
 8012d56:	4284      	cmp	r4, r0
 8012d58:	4623      	mov	r3, r4
 8012d5a:	d807      	bhi.n	8012d6c <memmove+0x20>
 8012d5c:	1e43      	subs	r3, r0, #1
 8012d5e:	42a1      	cmp	r1, r4
 8012d60:	d008      	beq.n	8012d74 <memmove+0x28>
 8012d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d6a:	e7f8      	b.n	8012d5e <memmove+0x12>
 8012d6c:	4402      	add	r2, r0
 8012d6e:	4601      	mov	r1, r0
 8012d70:	428a      	cmp	r2, r1
 8012d72:	d100      	bne.n	8012d76 <memmove+0x2a>
 8012d74:	bd10      	pop	{r4, pc}
 8012d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d7e:	e7f7      	b.n	8012d70 <memmove+0x24>

08012d80 <_malloc_usable_size_r>:
 8012d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d84:	1f18      	subs	r0, r3, #4
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	bfbc      	itt	lt
 8012d8a:	580b      	ldrlt	r3, [r1, r0]
 8012d8c:	18c0      	addlt	r0, r0, r3
 8012d8e:	4770      	bx	lr

08012d90 <with_errnof>:
 8012d90:	b513      	push	{r0, r1, r4, lr}
 8012d92:	4604      	mov	r4, r0
 8012d94:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012d98:	f7ff fb5c 	bl	8012454 <__errno>
 8012d9c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8012da0:	6004      	str	r4, [r0, #0]
 8012da2:	b002      	add	sp, #8
 8012da4:	bd10      	pop	{r4, pc}

08012da6 <xflowf>:
 8012da6:	b130      	cbz	r0, 8012db6 <xflowf+0x10>
 8012da8:	eef1 7a40 	vneg.f32	s15, s0
 8012dac:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012db0:	2022      	movs	r0, #34	; 0x22
 8012db2:	f7ff bfed 	b.w	8012d90 <with_errnof>
 8012db6:	eef0 7a40 	vmov.f32	s15, s0
 8012dba:	e7f7      	b.n	8012dac <xflowf+0x6>

08012dbc <__math_uflowf>:
 8012dbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012dc4 <__math_uflowf+0x8>
 8012dc0:	f7ff bff1 	b.w	8012da6 <xflowf>
 8012dc4:	10000000 	.word	0x10000000

08012dc8 <__math_may_uflowf>:
 8012dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012dd0 <__math_may_uflowf+0x8>
 8012dcc:	f7ff bfeb 	b.w	8012da6 <xflowf>
 8012dd0:	1a200000 	.word	0x1a200000

08012dd4 <__math_oflowf>:
 8012dd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012ddc <__math_oflowf+0x8>
 8012dd8:	f7ff bfe5 	b.w	8012da6 <xflowf>
 8012ddc:	70000000 	.word	0x70000000

08012de0 <__math_divzerof>:
 8012de0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012de4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012de8:	2800      	cmp	r0, #0
 8012dea:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8012dee:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8012dfc <__math_divzerof+0x1c>
 8012df2:	2022      	movs	r0, #34	; 0x22
 8012df4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012df8:	f7ff bfca 	b.w	8012d90 <with_errnof>
 8012dfc:	00000000 	.word	0x00000000

08012e00 <__math_invalidf>:
 8012e00:	eef0 7a40 	vmov.f32	s15, s0
 8012e04:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012e08:	eef4 7a67 	vcmp.f32	s15, s15
 8012e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e10:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8012e14:	d602      	bvs.n	8012e1c <__math_invalidf+0x1c>
 8012e16:	2021      	movs	r0, #33	; 0x21
 8012e18:	f7ff bfba 	b.w	8012d90 <with_errnof>
 8012e1c:	4770      	bx	lr
	...

08012e20 <cos>:
 8012e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e22:	eeb0 7b40 	vmov.f64	d7, d0
 8012e26:	ee17 3a90 	vmov	r3, s15
 8012e2a:	4a21      	ldr	r2, [pc, #132]	; (8012eb0 <cos+0x90>)
 8012e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e30:	4293      	cmp	r3, r2
 8012e32:	dc06      	bgt.n	8012e42 <cos+0x22>
 8012e34:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8012ea8 <cos+0x88>
 8012e38:	b005      	add	sp, #20
 8012e3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e3e:	f000 bb03 	b.w	8013448 <__kernel_cos>
 8012e42:	4a1c      	ldr	r2, [pc, #112]	; (8012eb4 <cos+0x94>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	dd04      	ble.n	8012e52 <cos+0x32>
 8012e48:	ee30 0b40 	vsub.f64	d0, d0, d0
 8012e4c:	b005      	add	sp, #20
 8012e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e52:	4668      	mov	r0, sp
 8012e54:	f000 f958 	bl	8013108 <__ieee754_rem_pio2>
 8012e58:	f000 0003 	and.w	r0, r0, #3
 8012e5c:	2801      	cmp	r0, #1
 8012e5e:	d009      	beq.n	8012e74 <cos+0x54>
 8012e60:	2802      	cmp	r0, #2
 8012e62:	d010      	beq.n	8012e86 <cos+0x66>
 8012e64:	b9b0      	cbnz	r0, 8012e94 <cos+0x74>
 8012e66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e6a:	ed9d 0b00 	vldr	d0, [sp]
 8012e6e:	f000 faeb 	bl	8013448 <__kernel_cos>
 8012e72:	e7eb      	b.n	8012e4c <cos+0x2c>
 8012e74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e78:	ed9d 0b00 	vldr	d0, [sp]
 8012e7c:	f000 fde8 	bl	8013a50 <__kernel_sin>
 8012e80:	eeb1 0b40 	vneg.f64	d0, d0
 8012e84:	e7e2      	b.n	8012e4c <cos+0x2c>
 8012e86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e8a:	ed9d 0b00 	vldr	d0, [sp]
 8012e8e:	f000 fadb 	bl	8013448 <__kernel_cos>
 8012e92:	e7f5      	b.n	8012e80 <cos+0x60>
 8012e94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e98:	ed9d 0b00 	vldr	d0, [sp]
 8012e9c:	2001      	movs	r0, #1
 8012e9e:	f000 fdd7 	bl	8013a50 <__kernel_sin>
 8012ea2:	e7d3      	b.n	8012e4c <cos+0x2c>
 8012ea4:	f3af 8000 	nop.w
	...
 8012eb0:	3fe921fb 	.word	0x3fe921fb
 8012eb4:	7fefffff 	.word	0x7fefffff

08012eb8 <expf>:
 8012eb8:	ee10 2a10 	vmov	r2, s0
 8012ebc:	f240 412a 	movw	r1, #1066	; 0x42a
 8012ec0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8012ec4:	428b      	cmp	r3, r1
 8012ec6:	b430      	push	{r4, r5}
 8012ec8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8012ecc:	d92a      	bls.n	8012f24 <expf+0x6c>
 8012ece:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8012ed2:	d058      	beq.n	8012f86 <expf+0xce>
 8012ed4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8012ed8:	d303      	bcc.n	8012ee2 <expf+0x2a>
 8012eda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012ede:	bc30      	pop	{r4, r5}
 8012ee0:	4770      	bx	lr
 8012ee2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012f8c <expf+0xd4>
 8012ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eee:	dd03      	ble.n	8012ef8 <expf+0x40>
 8012ef0:	bc30      	pop	{r4, r5}
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	f7ff bf6e 	b.w	8012dd4 <__math_oflowf>
 8012ef8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012f90 <expf+0xd8>
 8012efc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f04:	d503      	bpl.n	8012f0e <expf+0x56>
 8012f06:	bc30      	pop	{r4, r5}
 8012f08:	2000      	movs	r0, #0
 8012f0a:	f7ff bf57 	b.w	8012dbc <__math_uflowf>
 8012f0e:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012f94 <expf+0xdc>
 8012f12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1a:	d503      	bpl.n	8012f24 <expf+0x6c>
 8012f1c:	bc30      	pop	{r4, r5}
 8012f1e:	2000      	movs	r0, #0
 8012f20:	f7ff bf52 	b.w	8012dc8 <__math_may_uflowf>
 8012f24:	4b1c      	ldr	r3, [pc, #112]	; (8012f98 <expf+0xe0>)
 8012f26:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012f2a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8012f2e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8012f32:	eeb0 7b44 	vmov.f64	d7, d4
 8012f36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012f3a:	ee17 0a10 	vmov	r0, s14
 8012f3e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8012f42:	f000 021f 	and.w	r2, r0, #31
 8012f46:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8012f4a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8012f4e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012f52:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8012f56:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8012f5a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012f5e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8012f62:	684d      	ldr	r5, [r1, #4]
 8012f64:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8012f68:	2100      	movs	r1, #0
 8012f6a:	190a      	adds	r2, r1, r4
 8012f6c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8012f70:	eea5 0b07 	vfma.f64	d0, d5, d7
 8012f74:	ec43 2b17 	vmov	d7, r2, r3
 8012f78:	eea6 0b04 	vfma.f64	d0, d6, d4
 8012f7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012f80:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012f84:	e7ab      	b.n	8012ede <expf+0x26>
 8012f86:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8012f9c <expf+0xe4>
 8012f8a:	e7a8      	b.n	8012ede <expf+0x26>
 8012f8c:	42b17217 	.word	0x42b17217
 8012f90:	c2cff1b4 	.word	0xc2cff1b4
 8012f94:	c2ce8ecf 	.word	0xc2ce8ecf
 8012f98:	08185a18 	.word	0x08185a18
 8012f9c:	00000000 	.word	0x00000000

08012fa0 <logf>:
 8012fa0:	ee10 3a10 	vmov	r3, s0
 8012fa4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012fa8:	b410      	push	{r4}
 8012faa:	d055      	beq.n	8013058 <logf+0xb8>
 8012fac:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8012fb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8012fb4:	d31a      	bcc.n	8012fec <logf+0x4c>
 8012fb6:	005a      	lsls	r2, r3, #1
 8012fb8:	d104      	bne.n	8012fc4 <logf+0x24>
 8012fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fbe:	2001      	movs	r0, #1
 8012fc0:	f7ff bf0e 	b.w	8012de0 <__math_divzerof>
 8012fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012fc8:	d043      	beq.n	8013052 <logf+0xb2>
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	db02      	blt.n	8012fd4 <logf+0x34>
 8012fce:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8012fd2:	d303      	bcc.n	8012fdc <logf+0x3c>
 8012fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fd8:	f7ff bf12 	b.w	8012e00 <__math_invalidf>
 8012fdc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8013060 <logf+0xc0>
 8012fe0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012fe4:	ee10 3a10 	vmov	r3, s0
 8012fe8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8012fec:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8012ff0:	491c      	ldr	r1, [pc, #112]	; (8013064 <logf+0xc4>)
 8012ff2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8012ff6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8012ffa:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8012ffe:	0dd4      	lsrs	r4, r2, #23
 8013000:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8013004:	05e4      	lsls	r4, r4, #23
 8013006:	ed90 6b00 	vldr	d6, [r0]
 801300a:	1b1b      	subs	r3, r3, r4
 801300c:	ee07 3a90 	vmov	s15, r3
 8013010:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8013014:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013018:	15d2      	asrs	r2, r2, #23
 801301a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801301e:	ed90 6b02 	vldr	d6, [r0, #8]
 8013022:	ee20 4b00 	vmul.f64	d4, d0, d0
 8013026:	ee07 2a90 	vmov	s15, r2
 801302a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801302e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013032:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8013036:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801303a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801303e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8013042:	ee30 0b06 	vadd.f64	d0, d0, d6
 8013046:	eea5 7b04 	vfma.f64	d7, d5, d4
 801304a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801304e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013056:	4770      	bx	lr
 8013058:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013068 <logf+0xc8>
 801305c:	e7f9      	b.n	8013052 <logf+0xb2>
 801305e:	bf00      	nop
 8013060:	4b000000 	.word	0x4b000000
 8013064:	08185b60 	.word	0x08185b60
 8013068:	00000000 	.word	0x00000000

0801306c <log10f>:
 801306c:	b508      	push	{r3, lr}
 801306e:	ed2d 8b02 	vpush	{d8}
 8013072:	eeb0 8a40 	vmov.f32	s16, s0
 8013076:	f000 f98b 	bl	8013390 <__ieee754_log10f>
 801307a:	eeb4 8a48 	vcmp.f32	s16, s16
 801307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013082:	d60f      	bvs.n	80130a4 <log10f+0x38>
 8013084:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308c:	d80a      	bhi.n	80130a4 <log10f+0x38>
 801308e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013096:	d108      	bne.n	80130aa <log10f+0x3e>
 8013098:	f7ff f9dc 	bl	8012454 <__errno>
 801309c:	2322      	movs	r3, #34	; 0x22
 801309e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80130c0 <log10f+0x54>
 80130a2:	6003      	str	r3, [r0, #0]
 80130a4:	ecbd 8b02 	vpop	{d8}
 80130a8:	bd08      	pop	{r3, pc}
 80130aa:	f7ff f9d3 	bl	8012454 <__errno>
 80130ae:	ecbd 8b02 	vpop	{d8}
 80130b2:	2321      	movs	r3, #33	; 0x21
 80130b4:	6003      	str	r3, [r0, #0]
 80130b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130ba:	4802      	ldr	r0, [pc, #8]	; (80130c4 <log10f+0x58>)
 80130bc:	f000 be2a 	b.w	8013d14 <nanf>
 80130c0:	ff800000 	.word	0xff800000
 80130c4:	081859e5 	.word	0x081859e5

080130c8 <sqrtf>:
 80130c8:	b508      	push	{r3, lr}
 80130ca:	ed2d 8b02 	vpush	{d8}
 80130ce:	eeb0 8a40 	vmov.f32	s16, s0
 80130d2:	f000 f9b5 	bl	8013440 <__ieee754_sqrtf>
 80130d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80130da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130de:	d60c      	bvs.n	80130fa <sqrtf+0x32>
 80130e0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8013100 <sqrtf+0x38>
 80130e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80130e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ec:	d505      	bpl.n	80130fa <sqrtf+0x32>
 80130ee:	f7ff f9b1 	bl	8012454 <__errno>
 80130f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80130f6:	2321      	movs	r3, #33	; 0x21
 80130f8:	6003      	str	r3, [r0, #0]
 80130fa:	ecbd 8b02 	vpop	{d8}
 80130fe:	bd08      	pop	{r3, pc}
	...

08013108 <__ieee754_rem_pio2>:
 8013108:	b570      	push	{r4, r5, r6, lr}
 801310a:	eeb0 7b40 	vmov.f64	d7, d0
 801310e:	ee17 5a90 	vmov	r5, s15
 8013112:	4b99      	ldr	r3, [pc, #612]	; (8013378 <__ieee754_rem_pio2+0x270>)
 8013114:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013118:	429e      	cmp	r6, r3
 801311a:	b088      	sub	sp, #32
 801311c:	4604      	mov	r4, r0
 801311e:	dc07      	bgt.n	8013130 <__ieee754_rem_pio2+0x28>
 8013120:	2200      	movs	r2, #0
 8013122:	2300      	movs	r3, #0
 8013124:	ed84 0b00 	vstr	d0, [r4]
 8013128:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801312c:	2000      	movs	r0, #0
 801312e:	e01b      	b.n	8013168 <__ieee754_rem_pio2+0x60>
 8013130:	4b92      	ldr	r3, [pc, #584]	; (801337c <__ieee754_rem_pio2+0x274>)
 8013132:	429e      	cmp	r6, r3
 8013134:	dc3b      	bgt.n	80131ae <__ieee754_rem_pio2+0xa6>
 8013136:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801313a:	2d00      	cmp	r5, #0
 801313c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8013338 <__ieee754_rem_pio2+0x230>
 8013140:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8013144:	dd19      	ble.n	801317a <__ieee754_rem_pio2+0x72>
 8013146:	ee30 7b46 	vsub.f64	d7, d0, d6
 801314a:	429e      	cmp	r6, r3
 801314c:	d00e      	beq.n	801316c <__ieee754_rem_pio2+0x64>
 801314e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8013340 <__ieee754_rem_pio2+0x238>
 8013152:	ee37 5b46 	vsub.f64	d5, d7, d6
 8013156:	ee37 7b45 	vsub.f64	d7, d7, d5
 801315a:	ed84 5b00 	vstr	d5, [r4]
 801315e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013162:	ed84 7b02 	vstr	d7, [r4, #8]
 8013166:	2001      	movs	r0, #1
 8013168:	b008      	add	sp, #32
 801316a:	bd70      	pop	{r4, r5, r6, pc}
 801316c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8013348 <__ieee754_rem_pio2+0x240>
 8013170:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013174:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8013350 <__ieee754_rem_pio2+0x248>
 8013178:	e7eb      	b.n	8013152 <__ieee754_rem_pio2+0x4a>
 801317a:	429e      	cmp	r6, r3
 801317c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8013180:	d00e      	beq.n	80131a0 <__ieee754_rem_pio2+0x98>
 8013182:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8013340 <__ieee754_rem_pio2+0x238>
 8013186:	ee37 5b06 	vadd.f64	d5, d7, d6
 801318a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801318e:	ed84 5b00 	vstr	d5, [r4]
 8013192:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801319a:	ed84 7b02 	vstr	d7, [r4, #8]
 801319e:	e7e3      	b.n	8013168 <__ieee754_rem_pio2+0x60>
 80131a0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013348 <__ieee754_rem_pio2+0x240>
 80131a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80131a8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8013350 <__ieee754_rem_pio2+0x248>
 80131ac:	e7eb      	b.n	8013186 <__ieee754_rem_pio2+0x7e>
 80131ae:	4b74      	ldr	r3, [pc, #464]	; (8013380 <__ieee754_rem_pio2+0x278>)
 80131b0:	429e      	cmp	r6, r3
 80131b2:	dc70      	bgt.n	8013296 <__ieee754_rem_pio2+0x18e>
 80131b4:	f000 fca4 	bl	8013b00 <fabs>
 80131b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80131bc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8013358 <__ieee754_rem_pio2+0x250>
 80131c0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80131c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80131c8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80131cc:	ee17 0a90 	vmov	r0, s15
 80131d0:	eeb1 4b45 	vneg.f64	d4, d5
 80131d4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013338 <__ieee754_rem_pio2+0x230>
 80131d8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80131dc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8013340 <__ieee754_rem_pio2+0x238>
 80131e0:	281f      	cmp	r0, #31
 80131e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80131e6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80131ea:	dc08      	bgt.n	80131fe <__ieee754_rem_pio2+0xf6>
 80131ec:	4b65      	ldr	r3, [pc, #404]	; (8013384 <__ieee754_rem_pio2+0x27c>)
 80131ee:	1e42      	subs	r2, r0, #1
 80131f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131f4:	42b3      	cmp	r3, r6
 80131f6:	d002      	beq.n	80131fe <__ieee754_rem_pio2+0xf6>
 80131f8:	ed84 6b00 	vstr	d6, [r4]
 80131fc:	e026      	b.n	801324c <__ieee754_rem_pio2+0x144>
 80131fe:	ee16 3a90 	vmov	r3, s13
 8013202:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8013206:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801320a:	2b10      	cmp	r3, #16
 801320c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8013210:	ddf2      	ble.n	80131f8 <__ieee754_rem_pio2+0xf0>
 8013212:	eeb0 6b40 	vmov.f64	d6, d0
 8013216:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8013348 <__ieee754_rem_pio2+0x240>
 801321a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8013350 <__ieee754_rem_pio2+0x248>
 801321e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8013222:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013226:	eea4 0b07 	vfma.f64	d0, d4, d7
 801322a:	eeb0 7b40 	vmov.f64	d7, d0
 801322e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8013232:	ee36 3b47 	vsub.f64	d3, d6, d7
 8013236:	ee13 3a90 	vmov	r3, s7
 801323a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801323e:	1ad3      	subs	r3, r2, r3
 8013240:	2b31      	cmp	r3, #49	; 0x31
 8013242:	dc17      	bgt.n	8013274 <__ieee754_rem_pio2+0x16c>
 8013244:	eeb0 0b46 	vmov.f64	d0, d6
 8013248:	ed84 3b00 	vstr	d3, [r4]
 801324c:	ed94 6b00 	vldr	d6, [r4]
 8013250:	2d00      	cmp	r5, #0
 8013252:	ee30 0b46 	vsub.f64	d0, d0, d6
 8013256:	ee30 0b47 	vsub.f64	d0, d0, d7
 801325a:	ed84 0b02 	vstr	d0, [r4, #8]
 801325e:	da83      	bge.n	8013168 <__ieee754_rem_pio2+0x60>
 8013260:	eeb1 6b46 	vneg.f64	d6, d6
 8013264:	eeb1 0b40 	vneg.f64	d0, d0
 8013268:	ed84 6b00 	vstr	d6, [r4]
 801326c:	ed84 0b02 	vstr	d0, [r4, #8]
 8013270:	4240      	negs	r0, r0
 8013272:	e779      	b.n	8013168 <__ieee754_rem_pio2+0x60>
 8013274:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8013360 <__ieee754_rem_pio2+0x258>
 8013278:	eeb0 0b46 	vmov.f64	d0, d6
 801327c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8013280:	ee36 7b40 	vsub.f64	d7, d6, d0
 8013284:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8013368 <__ieee754_rem_pio2+0x260>
 8013288:	eea4 7b03 	vfma.f64	d7, d4, d3
 801328c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8013290:	ee30 6b47 	vsub.f64	d6, d0, d7
 8013294:	e7b0      	b.n	80131f8 <__ieee754_rem_pio2+0xf0>
 8013296:	4b3c      	ldr	r3, [pc, #240]	; (8013388 <__ieee754_rem_pio2+0x280>)
 8013298:	429e      	cmp	r6, r3
 801329a:	dd06      	ble.n	80132aa <__ieee754_rem_pio2+0x1a2>
 801329c:	ee30 7b40 	vsub.f64	d7, d0, d0
 80132a0:	ed80 7b02 	vstr	d7, [r0, #8]
 80132a4:	ed80 7b00 	vstr	d7, [r0]
 80132a8:	e740      	b.n	801312c <__ieee754_rem_pio2+0x24>
 80132aa:	1532      	asrs	r2, r6, #20
 80132ac:	ee10 0a10 	vmov	r0, s0
 80132b0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80132b4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80132b8:	ec41 0b17 	vmov	d7, r0, r1
 80132bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80132c0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8013370 <__ieee754_rem_pio2+0x268>
 80132c4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80132c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80132d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80132d4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80132d8:	a902      	add	r1, sp, #8
 80132da:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80132de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80132e2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80132e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80132ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132ee:	2603      	movs	r6, #3
 80132f0:	4608      	mov	r0, r1
 80132f2:	ed91 7b04 	vldr	d7, [r1, #16]
 80132f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80132fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fe:	4633      	mov	r3, r6
 8013300:	f1a1 0108 	sub.w	r1, r1, #8
 8013304:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8013308:	d0f3      	beq.n	80132f2 <__ieee754_rem_pio2+0x1ea>
 801330a:	4920      	ldr	r1, [pc, #128]	; (801338c <__ieee754_rem_pio2+0x284>)
 801330c:	9101      	str	r1, [sp, #4]
 801330e:	2102      	movs	r1, #2
 8013310:	9100      	str	r1, [sp, #0]
 8013312:	4621      	mov	r1, r4
 8013314:	f000 f904 	bl	8013520 <__kernel_rem_pio2>
 8013318:	2d00      	cmp	r5, #0
 801331a:	f6bf af25 	bge.w	8013168 <__ieee754_rem_pio2+0x60>
 801331e:	ed94 7b00 	vldr	d7, [r4]
 8013322:	eeb1 7b47 	vneg.f64	d7, d7
 8013326:	ed84 7b00 	vstr	d7, [r4]
 801332a:	ed94 7b02 	vldr	d7, [r4, #8]
 801332e:	eeb1 7b47 	vneg.f64	d7, d7
 8013332:	ed84 7b02 	vstr	d7, [r4, #8]
 8013336:	e79b      	b.n	8013270 <__ieee754_rem_pio2+0x168>
 8013338:	54400000 	.word	0x54400000
 801333c:	3ff921fb 	.word	0x3ff921fb
 8013340:	1a626331 	.word	0x1a626331
 8013344:	3dd0b461 	.word	0x3dd0b461
 8013348:	1a600000 	.word	0x1a600000
 801334c:	3dd0b461 	.word	0x3dd0b461
 8013350:	2e037073 	.word	0x2e037073
 8013354:	3ba3198a 	.word	0x3ba3198a
 8013358:	6dc9c883 	.word	0x6dc9c883
 801335c:	3fe45f30 	.word	0x3fe45f30
 8013360:	2e000000 	.word	0x2e000000
 8013364:	3ba3198a 	.word	0x3ba3198a
 8013368:	252049c1 	.word	0x252049c1
 801336c:	397b839a 	.word	0x397b839a
 8013370:	00000000 	.word	0x00000000
 8013374:	41700000 	.word	0x41700000
 8013378:	3fe921fb 	.word	0x3fe921fb
 801337c:	4002d97b 	.word	0x4002d97b
 8013380:	413921fb 	.word	0x413921fb
 8013384:	08185c80 	.word	0x08185c80
 8013388:	7fefffff 	.word	0x7fefffff
 801338c:	08185d00 	.word	0x08185d00

08013390 <__ieee754_log10f>:
 8013390:	b508      	push	{r3, lr}
 8013392:	ee10 2a10 	vmov	r2, s0
 8013396:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801339a:	ed2d 8b02 	vpush	{d8}
 801339e:	d108      	bne.n	80133b2 <__ieee754_log10f+0x22>
 80133a0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8013428 <__ieee754_log10f+0x98>
 80133a4:	eddf 7a21 	vldr	s15, [pc, #132]	; 801342c <__ieee754_log10f+0x9c>
 80133a8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80133ac:	ecbd 8b02 	vpop	{d8}
 80133b0:	bd08      	pop	{r3, pc}
 80133b2:	2a00      	cmp	r2, #0
 80133b4:	da02      	bge.n	80133bc <__ieee754_log10f+0x2c>
 80133b6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80133ba:	e7f3      	b.n	80133a4 <__ieee754_log10f+0x14>
 80133bc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80133c0:	db02      	blt.n	80133c8 <__ieee754_log10f+0x38>
 80133c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80133c6:	e7f1      	b.n	80133ac <__ieee754_log10f+0x1c>
 80133c8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80133cc:	bfbf      	itttt	lt
 80133ce:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8013430 <__ieee754_log10f+0xa0>
 80133d2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80133d6:	f06f 0118 	mvnlt.w	r1, #24
 80133da:	ee17 2a90 	vmovlt	r2, s15
 80133de:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80133e2:	bfa8      	it	ge
 80133e4:	2100      	movge	r1, #0
 80133e6:	3b7f      	subs	r3, #127	; 0x7f
 80133e8:	440b      	add	r3, r1
 80133ea:	0fd9      	lsrs	r1, r3, #31
 80133ec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80133f0:	ee07 3a90 	vmov	s15, r3
 80133f4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80133f8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80133fc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8013400:	ee00 3a10 	vmov	s0, r3
 8013404:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013408:	f7ff fdca 	bl	8012fa0 <logf>
 801340c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013434 <__ieee754_log10f+0xa4>
 8013410:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013414:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013438 <__ieee754_log10f+0xa8>
 8013418:	eea8 0a27 	vfma.f32	s0, s16, s15
 801341c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801343c <__ieee754_log10f+0xac>
 8013420:	eea8 0a27 	vfma.f32	s0, s16, s15
 8013424:	e7c2      	b.n	80133ac <__ieee754_log10f+0x1c>
 8013426:	bf00      	nop
 8013428:	cc000000 	.word	0xcc000000
 801342c:	00000000 	.word	0x00000000
 8013430:	4c000000 	.word	0x4c000000
 8013434:	3ede5bd9 	.word	0x3ede5bd9
 8013438:	355427db 	.word	0x355427db
 801343c:	3e9a2080 	.word	0x3e9a2080

08013440 <__ieee754_sqrtf>:
 8013440:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013444:	4770      	bx	lr
	...

08013448 <__kernel_cos>:
 8013448:	ee10 1a90 	vmov	r1, s1
 801344c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013454:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8013458:	da05      	bge.n	8013466 <__kernel_cos+0x1e>
 801345a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801345e:	ee17 3a90 	vmov	r3, s15
 8013462:	2b00      	cmp	r3, #0
 8013464:	d03d      	beq.n	80134e2 <__kernel_cos+0x9a>
 8013466:	ee20 3b00 	vmul.f64	d3, d0, d0
 801346a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80134e8 <__kernel_cos+0xa0>
 801346e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80134f0 <__kernel_cos+0xa8>
 8013472:	eea3 6b07 	vfma.f64	d6, d3, d7
 8013476:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80134f8 <__kernel_cos+0xb0>
 801347a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801347e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8013500 <__kernel_cos+0xb8>
 8013482:	eea7 6b03 	vfma.f64	d6, d7, d3
 8013486:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013508 <__kernel_cos+0xc0>
 801348a:	4b23      	ldr	r3, [pc, #140]	; (8013518 <__kernel_cos+0xd0>)
 801348c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8013490:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8013510 <__kernel_cos+0xc8>
 8013494:	4299      	cmp	r1, r3
 8013496:	eea7 6b03 	vfma.f64	d6, d7, d3
 801349a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801349e:	ee26 5b03 	vmul.f64	d5, d6, d3
 80134a2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80134a6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80134aa:	eea3 6b05 	vfma.f64	d6, d3, d5
 80134ae:	dc04      	bgt.n	80134ba <__kernel_cos+0x72>
 80134b0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80134b4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80134b8:	4770      	bx	lr
 80134ba:	4b18      	ldr	r3, [pc, #96]	; (801351c <__kernel_cos+0xd4>)
 80134bc:	4299      	cmp	r1, r3
 80134be:	dc0d      	bgt.n	80134dc <__kernel_cos+0x94>
 80134c0:	2200      	movs	r2, #0
 80134c2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80134c6:	ec43 2b15 	vmov	d5, r2, r3
 80134ca:	ee34 0b45 	vsub.f64	d0, d4, d5
 80134ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80134d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80134d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80134da:	4770      	bx	lr
 80134dc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80134e0:	e7f3      	b.n	80134ca <__kernel_cos+0x82>
 80134e2:	eeb0 0b44 	vmov.f64	d0, d4
 80134e6:	4770      	bx	lr
 80134e8:	be8838d4 	.word	0xbe8838d4
 80134ec:	bda8fae9 	.word	0xbda8fae9
 80134f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80134f4:	3e21ee9e 	.word	0x3e21ee9e
 80134f8:	809c52ad 	.word	0x809c52ad
 80134fc:	be927e4f 	.word	0xbe927e4f
 8013500:	19cb1590 	.word	0x19cb1590
 8013504:	3efa01a0 	.word	0x3efa01a0
 8013508:	16c15177 	.word	0x16c15177
 801350c:	bf56c16c 	.word	0xbf56c16c
 8013510:	5555554c 	.word	0x5555554c
 8013514:	3fa55555 	.word	0x3fa55555
 8013518:	3fd33332 	.word	0x3fd33332
 801351c:	3fe90000 	.word	0x3fe90000

08013520 <__kernel_rem_pio2>:
 8013520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013524:	ed2d 8b06 	vpush	{d8-d10}
 8013528:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801352c:	460f      	mov	r7, r1
 801352e:	9002      	str	r0, [sp, #8]
 8013530:	49c5      	ldr	r1, [pc, #788]	; (8013848 <__kernel_rem_pio2+0x328>)
 8013532:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8013534:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8013538:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801353c:	9301      	str	r3, [sp, #4]
 801353e:	f112 0f14 	cmn.w	r2, #20
 8013542:	bfa8      	it	ge
 8013544:	2018      	movge	r0, #24
 8013546:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801354a:	bfb8      	it	lt
 801354c:	2000      	movlt	r0, #0
 801354e:	f06f 0417 	mvn.w	r4, #23
 8013552:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8013830 <__kernel_rem_pio2+0x310>
 8013556:	bfa4      	itt	ge
 8013558:	f1a2 0a03 	subge.w	sl, r2, #3
 801355c:	fb9a f0f0 	sdivge	r0, sl, r0
 8013560:	fb00 4404 	mla	r4, r0, r4, r4
 8013564:	1a46      	subs	r6, r0, r1
 8013566:	4414      	add	r4, r2
 8013568:	eb09 0c01 	add.w	ip, r9, r1
 801356c:	ad1a      	add	r5, sp, #104	; 0x68
 801356e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8013572:	2200      	movs	r2, #0
 8013574:	4562      	cmp	r2, ip
 8013576:	dd10      	ble.n	801359a <__kernel_rem_pio2+0x7a>
 8013578:	9a01      	ldr	r2, [sp, #4]
 801357a:	ab1a      	add	r3, sp, #104	; 0x68
 801357c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8013580:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8013584:	f04f 0c00 	mov.w	ip, #0
 8013588:	45cc      	cmp	ip, r9
 801358a:	dc26      	bgt.n	80135da <__kernel_rem_pio2+0xba>
 801358c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8013830 <__kernel_rem_pio2+0x310>
 8013590:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8013594:	4616      	mov	r6, r2
 8013596:	2500      	movs	r5, #0
 8013598:	e015      	b.n	80135c6 <__kernel_rem_pio2+0xa6>
 801359a:	42d6      	cmn	r6, r2
 801359c:	d409      	bmi.n	80135b2 <__kernel_rem_pio2+0x92>
 801359e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80135a2:	ee07 3a90 	vmov	s15, r3
 80135a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80135aa:	eca5 7b02 	vstmia	r5!, {d7}
 80135ae:	3201      	adds	r2, #1
 80135b0:	e7e0      	b.n	8013574 <__kernel_rem_pio2+0x54>
 80135b2:	eeb0 7b46 	vmov.f64	d7, d6
 80135b6:	e7f8      	b.n	80135aa <__kernel_rem_pio2+0x8a>
 80135b8:	ecb8 5b02 	vldmia	r8!, {d5}
 80135bc:	ed96 6b00 	vldr	d6, [r6]
 80135c0:	3501      	adds	r5, #1
 80135c2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80135c6:	428d      	cmp	r5, r1
 80135c8:	f1a6 0608 	sub.w	r6, r6, #8
 80135cc:	ddf4      	ble.n	80135b8 <__kernel_rem_pio2+0x98>
 80135ce:	ecaa 7b02 	vstmia	sl!, {d7}
 80135d2:	f10c 0c01 	add.w	ip, ip, #1
 80135d6:	3208      	adds	r2, #8
 80135d8:	e7d6      	b.n	8013588 <__kernel_rem_pio2+0x68>
 80135da:	ab06      	add	r3, sp, #24
 80135dc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8013838 <__kernel_rem_pio2+0x318>
 80135e0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8013840 <__kernel_rem_pio2+0x320>
 80135e4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80135e8:	9303      	str	r3, [sp, #12]
 80135ea:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80135ee:	464d      	mov	r5, r9
 80135f0:	00eb      	lsls	r3, r5, #3
 80135f2:	9304      	str	r3, [sp, #16]
 80135f4:	ab92      	add	r3, sp, #584	; 0x248
 80135f6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80135fa:	f10d 0b18 	add.w	fp, sp, #24
 80135fe:	ab6a      	add	r3, sp, #424	; 0x1a8
 8013600:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8013604:	465e      	mov	r6, fp
 8013606:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801360a:	4628      	mov	r0, r5
 801360c:	2800      	cmp	r0, #0
 801360e:	f1a2 0208 	sub.w	r2, r2, #8
 8013612:	dc4c      	bgt.n	80136ae <__kernel_rem_pio2+0x18e>
 8013614:	4620      	mov	r0, r4
 8013616:	9105      	str	r1, [sp, #20]
 8013618:	f000 faf2 	bl	8013c00 <scalbn>
 801361c:	eeb0 8b40 	vmov.f64	d8, d0
 8013620:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8013624:	ee28 0b00 	vmul.f64	d0, d8, d0
 8013628:	f000 fa76 	bl	8013b18 <floor>
 801362c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8013630:	eea0 8b47 	vfms.f64	d8, d0, d7
 8013634:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8013638:	2c00      	cmp	r4, #0
 801363a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801363e:	ee17 8a90 	vmov	r8, s15
 8013642:	ee38 8b40 	vsub.f64	d8, d8, d0
 8013646:	9905      	ldr	r1, [sp, #20]
 8013648:	dd43      	ble.n	80136d2 <__kernel_rem_pio2+0x1b2>
 801364a:	1e68      	subs	r0, r5, #1
 801364c:	ab06      	add	r3, sp, #24
 801364e:	f1c4 0c18 	rsb	ip, r4, #24
 8013652:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8013656:	fa46 f20c 	asr.w	r2, r6, ip
 801365a:	4490      	add	r8, r2
 801365c:	fa02 f20c 	lsl.w	r2, r2, ip
 8013660:	1ab6      	subs	r6, r6, r2
 8013662:	f1c4 0217 	rsb	r2, r4, #23
 8013666:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801366a:	4116      	asrs	r6, r2
 801366c:	2e00      	cmp	r6, #0
 801366e:	dd3f      	ble.n	80136f0 <__kernel_rem_pio2+0x1d0>
 8013670:	f04f 0c00 	mov.w	ip, #0
 8013674:	f108 0801 	add.w	r8, r8, #1
 8013678:	4660      	mov	r0, ip
 801367a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801367e:	4565      	cmp	r5, ip
 8013680:	dc6e      	bgt.n	8013760 <__kernel_rem_pio2+0x240>
 8013682:	2c00      	cmp	r4, #0
 8013684:	dd04      	ble.n	8013690 <__kernel_rem_pio2+0x170>
 8013686:	2c01      	cmp	r4, #1
 8013688:	d07f      	beq.n	801378a <__kernel_rem_pio2+0x26a>
 801368a:	2c02      	cmp	r4, #2
 801368c:	f000 8087 	beq.w	801379e <__kernel_rem_pio2+0x27e>
 8013690:	2e02      	cmp	r6, #2
 8013692:	d12d      	bne.n	80136f0 <__kernel_rem_pio2+0x1d0>
 8013694:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013698:	ee30 8b48 	vsub.f64	d8, d0, d8
 801369c:	b340      	cbz	r0, 80136f0 <__kernel_rem_pio2+0x1d0>
 801369e:	4620      	mov	r0, r4
 80136a0:	9105      	str	r1, [sp, #20]
 80136a2:	f000 faad 	bl	8013c00 <scalbn>
 80136a6:	9905      	ldr	r1, [sp, #20]
 80136a8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80136ac:	e020      	b.n	80136f0 <__kernel_rem_pio2+0x1d0>
 80136ae:	ee20 7b09 	vmul.f64	d7, d0, d9
 80136b2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80136b6:	3801      	subs	r0, #1
 80136b8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80136bc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 80136c0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80136c4:	eca6 0a01 	vstmia	r6!, {s0}
 80136c8:	ed92 0b00 	vldr	d0, [r2]
 80136cc:	ee37 0b00 	vadd.f64	d0, d7, d0
 80136d0:	e79c      	b.n	801360c <__kernel_rem_pio2+0xec>
 80136d2:	d105      	bne.n	80136e0 <__kernel_rem_pio2+0x1c0>
 80136d4:	1e6a      	subs	r2, r5, #1
 80136d6:	ab06      	add	r3, sp, #24
 80136d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80136dc:	15f6      	asrs	r6, r6, #23
 80136de:	e7c5      	b.n	801366c <__kernel_rem_pio2+0x14c>
 80136e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80136e4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80136e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ec:	da36      	bge.n	801375c <__kernel_rem_pio2+0x23c>
 80136ee:	2600      	movs	r6, #0
 80136f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80136f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f8:	f040 80aa 	bne.w	8013850 <__kernel_rem_pio2+0x330>
 80136fc:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8013700:	4658      	mov	r0, fp
 8013702:	2200      	movs	r2, #0
 8013704:	4548      	cmp	r0, r9
 8013706:	da52      	bge.n	80137ae <__kernel_rem_pio2+0x28e>
 8013708:	2a00      	cmp	r2, #0
 801370a:	f000 8081 	beq.w	8013810 <__kernel_rem_pio2+0x2f0>
 801370e:	ab06      	add	r3, sp, #24
 8013710:	3c18      	subs	r4, #24
 8013712:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8013716:	2b00      	cmp	r3, #0
 8013718:	f000 8087 	beq.w	801382a <__kernel_rem_pio2+0x30a>
 801371c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8013720:	4620      	mov	r0, r4
 8013722:	f000 fa6d 	bl	8013c00 <scalbn>
 8013726:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801372a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8013838 <__kernel_rem_pio2+0x318>
 801372e:	a96a      	add	r1, sp, #424	; 0x1a8
 8013730:	f103 0208 	add.w	r2, r3, #8
 8013734:	1888      	adds	r0, r1, r2
 8013736:	4659      	mov	r1, fp
 8013738:	2900      	cmp	r1, #0
 801373a:	f280 80b7 	bge.w	80138ac <__kernel_rem_pio2+0x38c>
 801373e:	4659      	mov	r1, fp
 8013740:	2900      	cmp	r1, #0
 8013742:	f2c0 80d5 	blt.w	80138f0 <__kernel_rem_pio2+0x3d0>
 8013746:	a86a      	add	r0, sp, #424	; 0x1a8
 8013748:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801374c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8013830 <__kernel_rem_pio2+0x310>
 8013750:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801384c <__kernel_rem_pio2+0x32c>
 8013754:	2400      	movs	r4, #0
 8013756:	ebab 0001 	sub.w	r0, fp, r1
 801375a:	e0be      	b.n	80138da <__kernel_rem_pio2+0x3ba>
 801375c:	2602      	movs	r6, #2
 801375e:	e787      	b.n	8013670 <__kernel_rem_pio2+0x150>
 8013760:	f8db 2000 	ldr.w	r2, [fp]
 8013764:	b958      	cbnz	r0, 801377e <__kernel_rem_pio2+0x25e>
 8013766:	b122      	cbz	r2, 8013772 <__kernel_rem_pio2+0x252>
 8013768:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801376c:	f8cb 2000 	str.w	r2, [fp]
 8013770:	2201      	movs	r2, #1
 8013772:	f10c 0c01 	add.w	ip, ip, #1
 8013776:	f10b 0b04 	add.w	fp, fp, #4
 801377a:	4610      	mov	r0, r2
 801377c:	e77f      	b.n	801367e <__kernel_rem_pio2+0x15e>
 801377e:	ebae 0202 	sub.w	r2, lr, r2
 8013782:	f8cb 2000 	str.w	r2, [fp]
 8013786:	4602      	mov	r2, r0
 8013788:	e7f3      	b.n	8013772 <__kernel_rem_pio2+0x252>
 801378a:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801378e:	ab06      	add	r3, sp, #24
 8013790:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8013794:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8013798:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801379c:	e778      	b.n	8013690 <__kernel_rem_pio2+0x170>
 801379e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80137a2:	ab06      	add	r3, sp, #24
 80137a4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80137a8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80137ac:	e7f4      	b.n	8013798 <__kernel_rem_pio2+0x278>
 80137ae:	ab06      	add	r3, sp, #24
 80137b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80137b4:	3801      	subs	r0, #1
 80137b6:	431a      	orrs	r2, r3
 80137b8:	e7a4      	b.n	8013704 <__kernel_rem_pio2+0x1e4>
 80137ba:	f10c 0c01 	add.w	ip, ip, #1
 80137be:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 80137c2:	2800      	cmp	r0, #0
 80137c4:	d0f9      	beq.n	80137ba <__kernel_rem_pio2+0x29a>
 80137c6:	9b04      	ldr	r3, [sp, #16]
 80137c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80137cc:	eb0d 0203 	add.w	r2, sp, r3
 80137d0:	9b01      	ldr	r3, [sp, #4]
 80137d2:	18e8      	adds	r0, r5, r3
 80137d4:	ab1a      	add	r3, sp, #104	; 0x68
 80137d6:	1c6e      	adds	r6, r5, #1
 80137d8:	3a98      	subs	r2, #152	; 0x98
 80137da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80137de:	4465      	add	r5, ip
 80137e0:	42b5      	cmp	r5, r6
 80137e2:	f6ff af05 	blt.w	80135f0 <__kernel_rem_pio2+0xd0>
 80137e6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80137ea:	f8dd e008 	ldr.w	lr, [sp, #8]
 80137ee:	ee07 3a90 	vmov	s15, r3
 80137f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80137f6:	f04f 0c00 	mov.w	ip, #0
 80137fa:	eca0 7b02 	vstmia	r0!, {d7}
 80137fe:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8013830 <__kernel_rem_pio2+0x310>
 8013802:	4680      	mov	r8, r0
 8013804:	458c      	cmp	ip, r1
 8013806:	dd07      	ble.n	8013818 <__kernel_rem_pio2+0x2f8>
 8013808:	eca2 7b02 	vstmia	r2!, {d7}
 801380c:	3601      	adds	r6, #1
 801380e:	e7e7      	b.n	80137e0 <__kernel_rem_pio2+0x2c0>
 8013810:	9a03      	ldr	r2, [sp, #12]
 8013812:	f04f 0c01 	mov.w	ip, #1
 8013816:	e7d2      	b.n	80137be <__kernel_rem_pio2+0x29e>
 8013818:	ecbe 5b02 	vldmia	lr!, {d5}
 801381c:	ed38 6b02 	vldmdb	r8!, {d6}
 8013820:	f10c 0c01 	add.w	ip, ip, #1
 8013824:	eea5 7b06 	vfma.f64	d7, d5, d6
 8013828:	e7ec      	b.n	8013804 <__kernel_rem_pio2+0x2e4>
 801382a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801382e:	e76e      	b.n	801370e <__kernel_rem_pio2+0x1ee>
	...
 801383c:	3e700000 	.word	0x3e700000
 8013840:	00000000 	.word	0x00000000
 8013844:	41700000 	.word	0x41700000
 8013848:	08185e48 	.word	0x08185e48
 801384c:	08185e08 	.word	0x08185e08
 8013850:	4260      	negs	r0, r4
 8013852:	eeb0 0b48 	vmov.f64	d0, d8
 8013856:	f000 f9d3 	bl	8013c00 <scalbn>
 801385a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8013a38 <__kernel_rem_pio2+0x518>
 801385e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8013862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013866:	db18      	blt.n	801389a <__kernel_rem_pio2+0x37a>
 8013868:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8013a40 <__kernel_rem_pio2+0x520>
 801386c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8013870:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8013874:	aa06      	add	r2, sp, #24
 8013876:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801387a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801387e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8013882:	f105 0b01 	add.w	fp, r5, #1
 8013886:	ee10 3a10 	vmov	r3, s0
 801388a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801388e:	ee17 3a10 	vmov	r3, s14
 8013892:	3418      	adds	r4, #24
 8013894:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8013898:	e740      	b.n	801371c <__kernel_rem_pio2+0x1fc>
 801389a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801389e:	aa06      	add	r2, sp, #24
 80138a0:	ee10 3a10 	vmov	r3, s0
 80138a4:	46ab      	mov	fp, r5
 80138a6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80138aa:	e737      	b.n	801371c <__kernel_rem_pio2+0x1fc>
 80138ac:	ac06      	add	r4, sp, #24
 80138ae:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80138b2:	9401      	str	r4, [sp, #4]
 80138b4:	ee07 4a90 	vmov	s15, r4
 80138b8:	3901      	subs	r1, #1
 80138ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80138be:	ee27 7b00 	vmul.f64	d7, d7, d0
 80138c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80138c6:	ed20 7b02 	vstmdb	r0!, {d7}
 80138ca:	e735      	b.n	8013738 <__kernel_rem_pio2+0x218>
 80138cc:	ecbc 5b02 	vldmia	ip!, {d5}
 80138d0:	ecb5 6b02 	vldmia	r5!, {d6}
 80138d4:	3401      	adds	r4, #1
 80138d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80138da:	454c      	cmp	r4, r9
 80138dc:	dc01      	bgt.n	80138e2 <__kernel_rem_pio2+0x3c2>
 80138de:	4284      	cmp	r4, r0
 80138e0:	ddf4      	ble.n	80138cc <__kernel_rem_pio2+0x3ac>
 80138e2:	ac42      	add	r4, sp, #264	; 0x108
 80138e4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80138e8:	ed80 7b00 	vstr	d7, [r0]
 80138ec:	3901      	subs	r1, #1
 80138ee:	e727      	b.n	8013740 <__kernel_rem_pio2+0x220>
 80138f0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80138f2:	2902      	cmp	r1, #2
 80138f4:	dc0a      	bgt.n	801390c <__kernel_rem_pio2+0x3ec>
 80138f6:	2900      	cmp	r1, #0
 80138f8:	dc2c      	bgt.n	8013954 <__kernel_rem_pio2+0x434>
 80138fa:	d045      	beq.n	8013988 <__kernel_rem_pio2+0x468>
 80138fc:	f008 0007 	and.w	r0, r8, #7
 8013900:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8013904:	ecbd 8b06 	vpop	{d8-d10}
 8013908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801390e:	2a03      	cmp	r2, #3
 8013910:	d1f4      	bne.n	80138fc <__kernel_rem_pio2+0x3dc>
 8013912:	aa42      	add	r2, sp, #264	; 0x108
 8013914:	4413      	add	r3, r2
 8013916:	461a      	mov	r2, r3
 8013918:	4619      	mov	r1, r3
 801391a:	4658      	mov	r0, fp
 801391c:	2800      	cmp	r0, #0
 801391e:	f1a1 0108 	sub.w	r1, r1, #8
 8013922:	dc54      	bgt.n	80139ce <__kernel_rem_pio2+0x4ae>
 8013924:	4659      	mov	r1, fp
 8013926:	2901      	cmp	r1, #1
 8013928:	f1a2 0208 	sub.w	r2, r2, #8
 801392c:	dc5f      	bgt.n	80139ee <__kernel_rem_pio2+0x4ce>
 801392e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8013a48 <__kernel_rem_pio2+0x528>
 8013932:	3308      	adds	r3, #8
 8013934:	f1bb 0f01 	cmp.w	fp, #1
 8013938:	dc69      	bgt.n	8013a0e <__kernel_rem_pio2+0x4ee>
 801393a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801393e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8013942:	2e00      	cmp	r6, #0
 8013944:	d16a      	bne.n	8013a1c <__kernel_rem_pio2+0x4fc>
 8013946:	ed87 5b00 	vstr	d5, [r7]
 801394a:	ed87 6b02 	vstr	d6, [r7, #8]
 801394e:	ed87 7b04 	vstr	d7, [r7, #16]
 8013952:	e7d3      	b.n	80138fc <__kernel_rem_pio2+0x3dc>
 8013954:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013a48 <__kernel_rem_pio2+0x528>
 8013958:	ab42      	add	r3, sp, #264	; 0x108
 801395a:	441a      	add	r2, r3
 801395c:	465b      	mov	r3, fp
 801395e:	2b00      	cmp	r3, #0
 8013960:	da26      	bge.n	80139b0 <__kernel_rem_pio2+0x490>
 8013962:	b35e      	cbz	r6, 80139bc <__kernel_rem_pio2+0x49c>
 8013964:	eeb1 7b46 	vneg.f64	d7, d6
 8013968:	ed87 7b00 	vstr	d7, [r7]
 801396c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8013970:	aa44      	add	r2, sp, #272	; 0x110
 8013972:	2301      	movs	r3, #1
 8013974:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013978:	459b      	cmp	fp, r3
 801397a:	da22      	bge.n	80139c2 <__kernel_rem_pio2+0x4a2>
 801397c:	b10e      	cbz	r6, 8013982 <__kernel_rem_pio2+0x462>
 801397e:	eeb1 7b47 	vneg.f64	d7, d7
 8013982:	ed87 7b02 	vstr	d7, [r7, #8]
 8013986:	e7b9      	b.n	80138fc <__kernel_rem_pio2+0x3dc>
 8013988:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013a48 <__kernel_rem_pio2+0x528>
 801398c:	ab42      	add	r3, sp, #264	; 0x108
 801398e:	441a      	add	r2, r3
 8013990:	f1bb 0f00 	cmp.w	fp, #0
 8013994:	da05      	bge.n	80139a2 <__kernel_rem_pio2+0x482>
 8013996:	b10e      	cbz	r6, 801399c <__kernel_rem_pio2+0x47c>
 8013998:	eeb1 7b47 	vneg.f64	d7, d7
 801399c:	ed87 7b00 	vstr	d7, [r7]
 80139a0:	e7ac      	b.n	80138fc <__kernel_rem_pio2+0x3dc>
 80139a2:	ed32 6b02 	vldmdb	r2!, {d6}
 80139a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80139aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80139ae:	e7ef      	b.n	8013990 <__kernel_rem_pio2+0x470>
 80139b0:	ed32 7b02 	vldmdb	r2!, {d7}
 80139b4:	3b01      	subs	r3, #1
 80139b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80139ba:	e7d0      	b.n	801395e <__kernel_rem_pio2+0x43e>
 80139bc:	eeb0 7b46 	vmov.f64	d7, d6
 80139c0:	e7d2      	b.n	8013968 <__kernel_rem_pio2+0x448>
 80139c2:	ecb2 6b02 	vldmia	r2!, {d6}
 80139c6:	3301      	adds	r3, #1
 80139c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80139cc:	e7d4      	b.n	8013978 <__kernel_rem_pio2+0x458>
 80139ce:	ed91 7b00 	vldr	d7, [r1]
 80139d2:	ed91 5b02 	vldr	d5, [r1, #8]
 80139d6:	3801      	subs	r0, #1
 80139d8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80139dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80139e0:	ed81 6b00 	vstr	d6, [r1]
 80139e4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80139e8:	ed81 7b02 	vstr	d7, [r1, #8]
 80139ec:	e796      	b.n	801391c <__kernel_rem_pio2+0x3fc>
 80139ee:	ed92 7b00 	vldr	d7, [r2]
 80139f2:	ed92 5b02 	vldr	d5, [r2, #8]
 80139f6:	3901      	subs	r1, #1
 80139f8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80139fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013a00:	ed82 6b00 	vstr	d6, [r2]
 8013a04:	ee37 7b05 	vadd.f64	d7, d7, d5
 8013a08:	ed82 7b02 	vstr	d7, [r2, #8]
 8013a0c:	e78b      	b.n	8013926 <__kernel_rem_pio2+0x406>
 8013a0e:	ed33 6b02 	vldmdb	r3!, {d6}
 8013a12:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013a16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8013a1a:	e78b      	b.n	8013934 <__kernel_rem_pio2+0x414>
 8013a1c:	eeb1 5b45 	vneg.f64	d5, d5
 8013a20:	eeb1 6b46 	vneg.f64	d6, d6
 8013a24:	ed87 5b00 	vstr	d5, [r7]
 8013a28:	eeb1 7b47 	vneg.f64	d7, d7
 8013a2c:	ed87 6b02 	vstr	d6, [r7, #8]
 8013a30:	e78d      	b.n	801394e <__kernel_rem_pio2+0x42e>
 8013a32:	bf00      	nop
 8013a34:	f3af 8000 	nop.w
 8013a38:	00000000 	.word	0x00000000
 8013a3c:	41700000 	.word	0x41700000
 8013a40:	00000000 	.word	0x00000000
 8013a44:	3e700000 	.word	0x3e700000
	...

08013a50 <__kernel_sin>:
 8013a50:	ee10 3a90 	vmov	r3, s1
 8013a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a58:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013a5c:	da04      	bge.n	8013a68 <__kernel_sin+0x18>
 8013a5e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8013a62:	ee17 3a90 	vmov	r3, s15
 8013a66:	b35b      	cbz	r3, 8013ac0 <__kernel_sin+0x70>
 8013a68:	ee20 6b00 	vmul.f64	d6, d0, d0
 8013a6c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8013a70:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8013ac8 <__kernel_sin+0x78>
 8013a74:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013ad0 <__kernel_sin+0x80>
 8013a78:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013a7c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013ad8 <__kernel_sin+0x88>
 8013a80:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013a84:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013ae0 <__kernel_sin+0x90>
 8013a88:	eea7 4b06 	vfma.f64	d4, d7, d6
 8013a8c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013ae8 <__kernel_sin+0x98>
 8013a90:	eea4 7b06 	vfma.f64	d7, d4, d6
 8013a94:	b930      	cbnz	r0, 8013aa4 <__kernel_sin+0x54>
 8013a96:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8013af0 <__kernel_sin+0xa0>
 8013a9a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8013a9e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8013aa2:	4770      	bx	lr
 8013aa4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8013aa8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8013aac:	eea1 7b04 	vfma.f64	d7, d1, d4
 8013ab0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8013ab4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8013af8 <__kernel_sin+0xa8>
 8013ab8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8013abc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop
 8013ac4:	f3af 8000 	nop.w
 8013ac8:	5acfd57c 	.word	0x5acfd57c
 8013acc:	3de5d93a 	.word	0x3de5d93a
 8013ad0:	8a2b9ceb 	.word	0x8a2b9ceb
 8013ad4:	be5ae5e6 	.word	0xbe5ae5e6
 8013ad8:	57b1fe7d 	.word	0x57b1fe7d
 8013adc:	3ec71de3 	.word	0x3ec71de3
 8013ae0:	19c161d5 	.word	0x19c161d5
 8013ae4:	bf2a01a0 	.word	0xbf2a01a0
 8013ae8:	1110f8a6 	.word	0x1110f8a6
 8013aec:	3f811111 	.word	0x3f811111
 8013af0:	55555549 	.word	0x55555549
 8013af4:	bfc55555 	.word	0xbfc55555
 8013af8:	55555549 	.word	0x55555549
 8013afc:	3fc55555 	.word	0x3fc55555

08013b00 <fabs>:
 8013b00:	ec51 0b10 	vmov	r0, r1, d0
 8013b04:	ee10 2a10 	vmov	r2, s0
 8013b08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b0c:	ec43 2b10 	vmov	d0, r2, r3
 8013b10:	4770      	bx	lr
 8013b12:	0000      	movs	r0, r0
 8013b14:	0000      	movs	r0, r0
	...

08013b18 <floor>:
 8013b18:	ee10 1a90 	vmov	r1, s1
 8013b1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013b20:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8013b24:	2b13      	cmp	r3, #19
 8013b26:	b530      	push	{r4, r5, lr}
 8013b28:	ee10 0a10 	vmov	r0, s0
 8013b2c:	ee10 5a10 	vmov	r5, s0
 8013b30:	dc31      	bgt.n	8013b96 <floor+0x7e>
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	da15      	bge.n	8013b62 <floor+0x4a>
 8013b36:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013bf0 <floor+0xd8>
 8013b3a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b3e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b46:	dd07      	ble.n	8013b58 <floor+0x40>
 8013b48:	2900      	cmp	r1, #0
 8013b4a:	da4e      	bge.n	8013bea <floor+0xd2>
 8013b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013b50:	4318      	orrs	r0, r3
 8013b52:	d001      	beq.n	8013b58 <floor+0x40>
 8013b54:	4928      	ldr	r1, [pc, #160]	; (8013bf8 <floor+0xe0>)
 8013b56:	2000      	movs	r0, #0
 8013b58:	460b      	mov	r3, r1
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	ec43 2b10 	vmov	d0, r2, r3
 8013b60:	e020      	b.n	8013ba4 <floor+0x8c>
 8013b62:	4a26      	ldr	r2, [pc, #152]	; (8013bfc <floor+0xe4>)
 8013b64:	411a      	asrs	r2, r3
 8013b66:	ea01 0402 	and.w	r4, r1, r2
 8013b6a:	4304      	orrs	r4, r0
 8013b6c:	d01a      	beq.n	8013ba4 <floor+0x8c>
 8013b6e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8013bf0 <floor+0xd8>
 8013b72:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013b76:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b7e:	ddeb      	ble.n	8013b58 <floor+0x40>
 8013b80:	2900      	cmp	r1, #0
 8013b82:	bfbe      	ittt	lt
 8013b84:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8013b88:	fa40 f303 	asrlt.w	r3, r0, r3
 8013b8c:	18c9      	addlt	r1, r1, r3
 8013b8e:	ea21 0102 	bic.w	r1, r1, r2
 8013b92:	2000      	movs	r0, #0
 8013b94:	e7e0      	b.n	8013b58 <floor+0x40>
 8013b96:	2b33      	cmp	r3, #51	; 0x33
 8013b98:	dd05      	ble.n	8013ba6 <floor+0x8e>
 8013b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b9e:	d101      	bne.n	8013ba4 <floor+0x8c>
 8013ba0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013ba4:	bd30      	pop	{r4, r5, pc}
 8013ba6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8013baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bae:	40e2      	lsrs	r2, r4
 8013bb0:	4202      	tst	r2, r0
 8013bb2:	d0f7      	beq.n	8013ba4 <floor+0x8c>
 8013bb4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013bf0 <floor+0xd8>
 8013bb8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013bbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc4:	ddc8      	ble.n	8013b58 <floor+0x40>
 8013bc6:	2900      	cmp	r1, #0
 8013bc8:	da02      	bge.n	8013bd0 <floor+0xb8>
 8013bca:	2b14      	cmp	r3, #20
 8013bcc:	d103      	bne.n	8013bd6 <floor+0xbe>
 8013bce:	3101      	adds	r1, #1
 8013bd0:	ea20 0002 	bic.w	r0, r0, r2
 8013bd4:	e7c0      	b.n	8013b58 <floor+0x40>
 8013bd6:	2401      	movs	r4, #1
 8013bd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013bdc:	fa04 f303 	lsl.w	r3, r4, r3
 8013be0:	4418      	add	r0, r3
 8013be2:	42a8      	cmp	r0, r5
 8013be4:	bf38      	it	cc
 8013be6:	1909      	addcc	r1, r1, r4
 8013be8:	e7f2      	b.n	8013bd0 <floor+0xb8>
 8013bea:	2000      	movs	r0, #0
 8013bec:	4601      	mov	r1, r0
 8013bee:	e7b3      	b.n	8013b58 <floor+0x40>
 8013bf0:	8800759c 	.word	0x8800759c
 8013bf4:	7e37e43c 	.word	0x7e37e43c
 8013bf8:	bff00000 	.word	0xbff00000
 8013bfc:	000fffff 	.word	0x000fffff

08013c00 <scalbn>:
 8013c00:	ee10 1a90 	vmov	r1, s1
 8013c04:	b510      	push	{r4, lr}
 8013c06:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013c0a:	b98c      	cbnz	r4, 8013c30 <scalbn+0x30>
 8013c0c:	ee10 3a10 	vmov	r3, s0
 8013c10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013c14:	430b      	orrs	r3, r1
 8013c16:	d011      	beq.n	8013c3c <scalbn+0x3c>
 8013c18:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8013ce0 <scalbn+0xe0>
 8013c1c:	4b3c      	ldr	r3, [pc, #240]	; (8013d10 <scalbn+0x110>)
 8013c1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013c22:	4298      	cmp	r0, r3
 8013c24:	da0b      	bge.n	8013c3e <scalbn+0x3e>
 8013c26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8013ce8 <scalbn+0xe8>
 8013c2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013c2e:	e005      	b.n	8013c3c <scalbn+0x3c>
 8013c30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8013c34:	429c      	cmp	r4, r3
 8013c36:	d107      	bne.n	8013c48 <scalbn+0x48>
 8013c38:	ee30 0b00 	vadd.f64	d0, d0, d0
 8013c3c:	bd10      	pop	{r4, pc}
 8013c3e:	ee10 1a90 	vmov	r1, s1
 8013c42:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8013c46:	3c36      	subs	r4, #54	; 0x36
 8013c48:	4404      	add	r4, r0
 8013c4a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8013c4e:	429c      	cmp	r4, r3
 8013c50:	dd0d      	ble.n	8013c6e <scalbn+0x6e>
 8013c52:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8013cf0 <scalbn+0xf0>
 8013c56:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8013cf8 <scalbn+0xf8>
 8013c5a:	eeb0 6b47 	vmov.f64	d6, d7
 8013c5e:	ee10 3a90 	vmov	r3, s1
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	fe27 7b05 	vselge.f64	d7, d7, d5
 8013c68:	ee27 0b06 	vmul.f64	d0, d7, d6
 8013c6c:	e7e6      	b.n	8013c3c <scalbn+0x3c>
 8013c6e:	2c00      	cmp	r4, #0
 8013c70:	dd0a      	ble.n	8013c88 <scalbn+0x88>
 8013c72:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8013c76:	ec53 2b10 	vmov	r2, r3, d0
 8013c7a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013c7e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8013c82:	ec43 2b10 	vmov	d0, r2, r3
 8013c86:	e7d9      	b.n	8013c3c <scalbn+0x3c>
 8013c88:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8013c8c:	da19      	bge.n	8013cc2 <scalbn+0xc2>
 8013c8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013c92:	4298      	cmp	r0, r3
 8013c94:	ee10 3a90 	vmov	r3, s1
 8013c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c9c:	dd09      	ble.n	8013cb2 <scalbn+0xb2>
 8013c9e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8013cf0 <scalbn+0xf0>
 8013ca2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8013cf8 <scalbn+0xf8>
 8013ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8013cb0:	e7bb      	b.n	8013c2a <scalbn+0x2a>
 8013cb2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8013ce8 <scalbn+0xe8>
 8013cb6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8013d00 <scalbn+0x100>
 8013cba:	eeb0 7b40 	vmov.f64	d7, d0
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	e7f4      	b.n	8013cac <scalbn+0xac>
 8013cc2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8013cc6:	ec53 2b10 	vmov	r2, r3, d0
 8013cca:	3436      	adds	r4, #54	; 0x36
 8013ccc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8013cd0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8013cd4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8013d08 <scalbn+0x108>
 8013cd8:	ec43 2b10 	vmov	d0, r2, r3
 8013cdc:	e7a5      	b.n	8013c2a <scalbn+0x2a>
 8013cde:	bf00      	nop
 8013ce0:	00000000 	.word	0x00000000
 8013ce4:	43500000 	.word	0x43500000
 8013ce8:	c2f8f359 	.word	0xc2f8f359
 8013cec:	01a56e1f 	.word	0x01a56e1f
 8013cf0:	8800759c 	.word	0x8800759c
 8013cf4:	7e37e43c 	.word	0x7e37e43c
 8013cf8:	8800759c 	.word	0x8800759c
 8013cfc:	fe37e43c 	.word	0xfe37e43c
 8013d00:	c2f8f359 	.word	0xc2f8f359
 8013d04:	81a56e1f 	.word	0x81a56e1f
 8013d08:	00000000 	.word	0x00000000
 8013d0c:	3c900000 	.word	0x3c900000
 8013d10:	ffff3cb0 	.word	0xffff3cb0

08013d14 <nanf>:
 8013d14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013d1c <nanf+0x8>
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop
 8013d1c:	7fc00000 	.word	0x7fc00000

08013d20 <_init>:
 8013d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d22:	bf00      	nop
 8013d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d26:	bc08      	pop	{r3}
 8013d28:	469e      	mov	lr, r3
 8013d2a:	4770      	bx	lr

08013d2c <_fini>:
 8013d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2e:	bf00      	nop
 8013d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d32:	bc08      	pop	{r3}
 8013d34:	469e      	mov	lr, r3
 8013d36:	4770      	bx	lr
