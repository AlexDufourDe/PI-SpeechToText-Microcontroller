
Speech_to_text_phase1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00172118  08012ea0  08012ea0  00022ea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08184fb8  08184fb8  001a141c  2**0
                  CONTENTS
  4 .ARM          00000008  08184fb8  08184fb8  00194fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08184fc0  08184fc0  001a141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08184fc0  08184fc0  00194fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08184fc4  08184fc4  00194fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  08184fc8  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001950c  2000141c  081863e4  001a141c  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  2001a928  081863e4  001aa928  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001a141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027209  00000000  00000000  001a144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065d3  00000000  00000000  001c8653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  001cec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001830  00000000  00000000  001d0800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038291  00000000  00000000  001d2030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c178  00000000  00000000  0020a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013658e  00000000  00000000  00236439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0036c9c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072b8  00000000  00000000  0036ca88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  00373d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000141c 	.word	0x2000141c
 800021c:	00000000 	.word	0x00000000
 8000220:	08012e78 	.word	0x08012e78

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001420 	.word	0x20001420
 800023c:	08012e78 	.word	0x08012e78

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x98>)
 8000716:	f001 fff5 	bl	8002704 <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fdd0 	bl	80012c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_ADC1_Init+0xa4>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x98>)
 8000736:	f002 f829 	bl	800278c <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 fdc0 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001438 	.word	0x20001438
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001
 8000758:	10000012 	.word	0x10000012

0800075c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_ADC_MspInit+0x38>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000
 8000798:	40023800 	.word	0x40023800

0800079c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MX_CRC_Init+0x40>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c6:	f002 fb43 	bl	8002e50 <HAL_CRC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d0:	f000 fd78 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20001480 	.word	0x20001480
 80007dc:	40023000 	.word	0x40023000

080007e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_CRC_MspInit+0x38>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_CRC_MspInit+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023000 	.word	0x40023000
 800081c:	40023800 	.word	0x40023800

08000820 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000824:	4b63      	ldr	r3, [pc, #396]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <MX_DFSDM1_Init+0x198>)
 8000828:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000830:	4b60      	ldr	r3, [pc, #384]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000832:	2201      	movs	r2, #1
 8000834:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000838:	2201      	movs	r2, #1
 800083a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000842:	4b5c      	ldr	r3, [pc, #368]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000844:	2200      	movs	r2, #0
 8000846:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000848:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800084a:	2200      	movs	r2, #0
 800084c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800084e:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800085c:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800085e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000862:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000864:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000866:	22b0      	movs	r2, #176	; 0xb0
 8000868:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800086c:	2201      	movs	r2, #1
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000872:	f002 fc97 	bl	80031a4 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000878:	4a51      	ldr	r2, [pc, #324]	; (80009c0 <MX_DFSDM1_Init+0x1a0>)
 800087a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800087c:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000884:	2201      	movs	r2, #1
 8000886:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800088a:	2201      	movs	r2, #1
 800088c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000894:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000896:	2201      	movs	r2, #1
 8000898:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800089c:	2200      	movs	r2, #0
 800089e:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008b0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008b8:	22b0      	movs	r2, #176	; 0xb0
 80008ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008bc:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008c2:	483e      	ldr	r0, [pc, #248]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008c4:	f002 fc6e 	bl	80031a4 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008c8:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MX_DFSDM1_Init+0x1a8>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 80008dc:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008de:	2204      	movs	r2, #4
 80008e0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008fe:	2204      	movs	r2, #4
 8000900:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000908:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 800090a:	2201      	movs	r2, #1
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 800091c:	f002 fb82 	bl	8003024 <HAL_DFSDM_ChannelInit>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000926:	f000 fccd 	bl	80012c4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MX_DFSDM1_Init+0x1b0>)
 800092e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000932:	2201      	movs	r2, #1
 8000934:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000940:	2204      	movs	r2, #4
 8000942:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800095e:	2204      	movs	r2, #4
 8000960:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800096a:	220a      	movs	r2, #10
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000976:	2202      	movs	r2, #2
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800097c:	f002 fb52 	bl	8003024 <HAL_DFSDM_ChannelInit>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000986:	f000 fc9d 	bl	80012c4 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800098a:	2201      	movs	r2, #1
 800098c:	4911      	ldr	r1, [pc, #68]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000990:	f002 fce2 	bl	8003358 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000994:	490f      	ldr	r1, [pc, #60]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000998:	f002 fd24 	bl	80033e4 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800099c:	2201      	movs	r2, #1
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80009a2:	f002 fcd9 	bl	8003358 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80009a6:	2101      	movs	r1, #1
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80009aa:	f002 fd1b 	bl	80033e4 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200014a4 	.word	0x200014a4
 80009b8:	40017500 	.word	0x40017500
 80009bc:	200014f8 	.word	0x200014f8
 80009c0:	40017580 	.word	0x40017580
 80009c4:	2000154c 	.word	0x2000154c
 80009c8:	40017400 	.word	0x40017400
 80009cc:	20001584 	.word	0x20001584
 80009d0:	40017420 	.word	0x40017420
 80009d4:	00010002 	.word	0x00010002

080009d8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80009f0:	4b63      	ldr	r3, [pc, #396]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d145      	bne.n	8000a84 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009f8:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a61      	ldr	r2, [pc, #388]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000a00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a02:	4b60      	ldr	r3, [pc, #384]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10b      	bne.n	8000a22 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a0a:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a5e      	ldr	r2, [pc, #376]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b59      	ldr	r3, [pc, #356]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a58      	ldr	r2, [pc, #352]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	484d      	ldr	r0, [pc, #308]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a56:	f003 fa17 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4845      	ldr	r0, [pc, #276]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a76:	f003 fa07 	bl	8003e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a82:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d137      	bne.n	8000afe <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000a92:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ace:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ad8:	f002 fe30 	bl	800373c <HAL_DMA_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000ae2:	f000 fbef 	bl	80012c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aec:	4a29      	ldr	r2, [pc, #164]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d137      	bne.n	8000b78 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b0a:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000b0c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b14:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b48:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b52:	f002 fdf3 	bl	800373c <HAL_DMA_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000b5c:	f000 fbb2 	bl	80012c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20001680 	.word	0x20001680
 8000b84:	2000167c 	.word	0x2000167c
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40017500 	.word	0x40017500
 8000b94:	200015bc 	.word	0x200015bc
 8000b98:	40026410 	.word	0x40026410
 8000b9c:	40017580 	.word	0x40017580
 8000ba0:	2000161c 	.word	0x2000161c
 8000ba4:	40026488 	.word	0x40026488

08000ba8 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d145      	bne.n	8000c54 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c26:	f003 f92f 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c46:	f003 f91f 	bl	8003e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a02      	ldr	r2, [pc, #8]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c52:	6013      	str	r3, [r2, #0]
  }
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20001680 	.word	0x20001680
 8000c60:	2000167c 	.word	0x2000167c
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f002 f8a7 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f002 f8c0 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2039      	movs	r0, #57	; 0x39
 8000ca0:	f002 f89f 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ca4:	2039      	movs	r0, #57	; 0x39
 8000ca6:	f002 f8b8 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	203b      	movs	r0, #59	; 0x3b
 8000cb0:	f002 f897 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cb4:	203b      	movs	r0, #59	; 0x3b
 8000cb6:	f002 f8b0 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2044      	movs	r0, #68	; 0x44
 8000cc0:	f002 f88f 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cc4:	2044      	movs	r0, #68	; 0x44
 8000cc6:	f002 f8a8 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2045      	movs	r0, #69	; 0x45
 8000cd0:	f002 f887 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cd4:	2045      	movs	r0, #69	; 0x45
 8000cd6:	f002 f8a0 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a56      	ldr	r2, [pc, #344]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a50      	ldr	r2, [pc, #320]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4826      	ldr	r0, [pc, #152]	; (8000e78 <MX_GPIO_Init+0x190>)
 8000dde:	f003 fa17 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	210b      	movs	r1, #11
 8000de6:	4825      	ldr	r0, [pc, #148]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000de8:	f003 fa12 	bl	8004210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_GPIO_Init+0x198>)
 8000e04:	f003 f840 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4815      	ldr	r0, [pc, #84]	; (8000e78 <MX_GPIO_Init+0x190>)
 8000e22:	f003 f831 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000e26:	230b      	movs	r3, #11
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480f      	ldr	r0, [pc, #60]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000e3e:	f003 f823 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000e58:	f003 f816 	bl	8003e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f001 ffbe 	bl	8002de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f001 ffd7 	bl	8002e1a <HAL_NVIC_EnableIRQ>

}
 8000e6c:	bf00      	nop
 8000e6e:	3738      	adds	r7, #56	; 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	40022400 	.word	0x40022400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400

08000e88 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e8c:	f3bf 8f4f 	dsb	sy
}
 8000e90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e92:	f3bf 8f6f 	isb	sy
}
 8000e96:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea0:	f3bf 8f4f 	dsb	sy
}
 8000ea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea6:	f3bf 8f6f 	isb	sy
}
 8000eaa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb8:	f3bf 8f4f 	dsb	sy
}
 8000ebc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ebe:	f3bf 8f6f 	isb	sy
}
 8000ec2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee2:	f3bf 8f4f 	dsb	sy
}
 8000ee6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eee:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0b5b      	lsrs	r3, r3, #13
 8000ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ef8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f02:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f0c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f12:	4911      	ldr	r1, [pc, #68]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ef      	bne.n	8000f04 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	60fa      	str	r2, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1e5      	bne.n	8000efa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2e:	f3bf 8f4f 	dsb	sy
}
 8000f32:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f40:	f3bf 8f4f 	dsb	sy
}
 8000f44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f46:	f3bf 8f6f 	isb	sy
}
 8000f4a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b09e      	sub	sp, #120	; 0x78
 8000f60:	af00      	add	r7, sp, #0

	ModelOutput output;
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f62:	f7ff ff91 	bl	8000e88 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f66:	f7ff ffb5 	bl	8000ed4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 fb49 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f907 	bl	8001180 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f72:	f000 f977 	bl	8001264 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff feb7 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fe77 	bl	8000c6c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f7e:	f7ff fc4f 	bl	8000820 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000f82:	f000 fa3f 	bl	8001404 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000f86:	f7ff fb95 	bl	80006b4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000f8a:	f000 fd4d 	bl	8001a28 <MX_UART4_Init>
  MX_CRC_Init();
 8000f8e:	f7ff fc05 	bl	800079c <MX_CRC_Init>
  MX_RTC_Init();
 8000f92:	f000 f99d 	bl	80012d0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f96:	f000 fb3f 	bl	8001618 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f9a:	f007 fdeb 	bl	8008b74 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa2:	496b      	ldr	r1, [pc, #428]	; (8001150 <main+0x1f4>)
 8000fa4:	486b      	ldr	r0, [pc, #428]	; (8001154 <main+0x1f8>)
 8000fa6:	f002 fa4d 	bl	8003444 <HAL_DFSDM_FilterRegularStart_DMA>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <main+0x58>
    {
      Error_Handler();
 8000fb0:	f000 f988 	bl	80012c4 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb8:	4967      	ldr	r1, [pc, #412]	; (8001158 <main+0x1fc>)
 8000fba:	4868      	ldr	r0, [pc, #416]	; (800115c <main+0x200>)
 8000fbc:	f002 fa42 	bl	8003444 <HAL_DFSDM_FilterRegularStart_DMA>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <main+0x6e>
    {
      Error_Handler();
 8000fc6:	f000 f97d 	bl	80012c4 <Error_Handler>
    }


	SDInit();
 8000fca:	f00b faad 	bl	800c528 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd4:	4862      	ldr	r0, [pc, #392]	; (8001160 <main+0x204>)
 8000fd6:	f003 f91b 	bl	8004210 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4861      	ldr	r0, [pc, #388]	; (8001164 <main+0x208>)
 8000fe0:	f003 f916 	bl	8004210 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	485e      	ldr	r0, [pc, #376]	; (8001164 <main+0x208>)
 8000fea:	f003 f911 	bl	8004210 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	485c      	ldr	r0, [pc, #368]	; (8001164 <main+0x208>)
 8000ff4:	f003 f90c 	bl	8004210 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000ff8:	f00b f86c 	bl	800c0d4 <Preprocessing_Init>
	 if (modelSetup()!= AI_OK)
 8000ffc:	f00a fed6 	bl	800bdac <modelSetup>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0xae>
	{
		Error_Handler();
 8001006:	f000 f95d 	bl	80012c4 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for the temper button to be pressed
	  while (!recording);
 800100a:	bf00      	nop
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <main+0x20c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0fb      	beq.n	800100c <main+0xb0>
	  // debouncing
	  HAL_Delay(250);
 8001014:	20fa      	movs	r0, #250	; 0xfa
 8001016:	f001 fb51 	bl	80026bc <HAL_Delay>
	  recording = 1;
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <main+0x20c>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 8001020:	4b52      	ldr	r3, [pc, #328]	; (800116c <main+0x210>)
 8001022:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001026:	461a      	mov	r2, r3
 8001028:	2300      	movs	r3, #0
 800102a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <main+0x210>)
 8001030:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
	  //LEDs on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4847      	ldr	r0, [pc, #284]	; (8001160 <main+0x204>)
 8001042:	f003 f8e5 	bl	8004210 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2101      	movs	r1, #1
 800104a:	4846      	ldr	r0, [pc, #280]	; (8001164 <main+0x208>)
 800104c:	f003 f8e0 	bl	8004210 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4843      	ldr	r0, [pc, #268]	; (8001164 <main+0x208>)
 8001056:	f003 f8db 	bl	8004210 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2108      	movs	r1, #8
 800105e:	4841      	ldr	r0, [pc, #260]	; (8001164 <main+0x208>)
 8001060:	f003 f8d6 	bl	8004210 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8001064:	e001      	b.n	800106a <main+0x10e>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 8001066:	f00b f943 	bl	800c2f0 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 800106a:	4b3f      	ldr	r3, [pc, #252]	; (8001168 <main+0x20c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <main+0x124>
 8001072:	4b3e      	ldr	r3, [pc, #248]	; (800116c <main+0x210>)
 8001074:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001078:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f2      	beq.n	8001066 <main+0x10a>
	  }
	  HAL_Delay(250);
 8001080:	20fa      	movs	r0, #250	; 0xfa
 8001082:	f001 fb1b 	bl	80026bc <HAL_Delay>
	  recording = 0;
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <main+0x20c>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
	  //read date to folder name
	  get_date((char*)directory_name);
 800108c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001090:	4618      	mov	r0, r3
 8001092:	f00b f9ef 	bl	800c474 <get_date>
	  //creates a folder with the date
	  f_mkdir ((char*)(directory_name));
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	4618      	mov	r0, r3
 800109c:	f00a f92b 	bl	800b2f6 <f_mkdir>
	  //read time and date
	  get_time_filename((char*)file_name);
 80010a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00b fa07 	bl	800c4b8 <get_time_filename>


//////////////////////////////////////
	  //getting the mel spectrogram
	  AudioPreprocessing_RunMethod4(BufferCtl.pcm_buff, (float32_t*)spectrogram_output, BufferCtl.fptr);
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <main+0x210>)
 80010ac:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010b0:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80010b4:	461a      	mov	r2, r3
 80010b6:	492e      	ldr	r1, [pc, #184]	; (8001170 <main+0x214>)
 80010b8:	482c      	ldr	r0, [pc, #176]	; (800116c <main+0x210>)
 80010ba:	f00b f893 	bl	800c1e4 <AudioPreprocessing_RunMethod4>
		  	  SDclose();
	  	  }
//////////////////////////////////////
	  if (EXPORT_WAV)
	  {
		  sprintf((char*)file_path,"%s/%s.wav",directory_name, file_name);
 80010be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010c6:	1d38      	adds	r0, r7, #4
 80010c8:	492a      	ldr	r1, [pc, #168]	; (8001174 <main+0x218>)
 80010ca:	f010 fb9f 	bl	801180c <siprintf>
		  //write to the sd card
		  createFile((char*)file_path);
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00b fa3d 	bl	800c550 <createFile>
		  //creates the header and saves audio file
		  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 80010d6:	4928      	ldr	r1, [pc, #160]	; (8001178 <main+0x21c>)
 80010d8:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010dc:	f00b face 	bl	800c67c <WavProcess_EncInit>
		  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 80010e0:	212c      	movs	r1, #44	; 0x2c
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <main+0x21c>)
 80010e4:	f00b fa4c 	bl	800c580 <writeToFile>
		  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 80010e8:	4b20      	ldr	r3, [pc, #128]	; (800116c <main+0x210>)
 80010ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010ee:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 80010f2:	4619      	mov	r1, r3
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <main+0x210>)
 80010f6:	f00b fa43 	bl	800c580 <writeToFile>
		  SDclose();
 80010fa:	f00b fa55 	bl	800c5a8 <SDclose>

////////////////////////////////////// AI
	  if (EXPORT_WAV)
	  {
		  //getting the mel spectrogram
		  output = modelRun((float32_t*)spectrogram_output);
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <main+0x214>)
 8001100:	f00a feae 	bl	800be60 <modelRun>
 8001104:	4603      	mov	r3, r0
 8001106:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		  sprintf((char*)file_path,"%s/%s.txt",directory_name, file_name);
 800110a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800110e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001112:	1d38      	adds	r0, r7, #4
 8001114:	4919      	ldr	r1, [pc, #100]	; (800117c <main+0x220>)
 8001116:	f010 fb79 	bl	801180c <siprintf>
		  //write to the sd card
		  createFile((char*)file_path);
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4618      	mov	r0, r3
 800111e:	f00b fa17 	bl	800c550 <createFile>
		  char * answer = getText(output);
 8001122:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001126:	4618      	mov	r0, r3
 8001128:	f00a fe48 	bl	800bdbc <getText>
 800112c:	6738      	str	r0, [r7, #112]	; 0x70
		  writeToFile(answer, strlen(answer));
 800112e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001130:	f7ff f8e6 	bl	8000300 <strlen>
 8001134:	4603      	mov	r3, r0
 8001136:	4619      	mov	r1, r3
 8001138:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800113a:	f00b fa21 	bl	800c580 <writeToFile>
		  SDclose();
 800113e:	f00b fa33 	bl	800c5a8 <SDclose>
	  }
	  ledsShowValue(output);
 8001142:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001146:	4618      	mov	r0, r3
 8001148:	f00b fa56 	bl	800c5f8 <ledsShowValue>
  {
 800114c:	e75d      	b.n	800100a <main+0xae>
 800114e:	bf00      	nop
 8001150:	20003688 	.word	0x20003688
 8001154:	200014f8 	.word	0x200014f8
 8001158:	20001688 	.word	0x20001688
 800115c:	200014a4 	.word	0x200014a4
 8001160:	40022000 	.word	0x40022000
 8001164:	40022400 	.word	0x40022400
 8001168:	20001684 	.word	0x20001684
 800116c:	2000a5ac 	.word	0x2000a5ac
 8001170:	20012ac0 	.word	0x20012ac0
 8001174:	08012ea0 	.word	0x08012ea0
 8001178:	2001a8ec 	.word	0x2001a8ec
 800117c:	08012eac 	.word	0x08012eac

08001180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b094      	sub	sp, #80	; 0x50
 8001184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2234      	movs	r2, #52	; 0x34
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f010 fa44 	bl	801161c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	4b2d      	ldr	r3, [pc, #180]	; (800125c <SystemClock_Config+0xdc>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <SystemClock_Config+0xdc>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	; 0x40
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <SystemClock_Config+0xdc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <SystemClock_Config+0xe0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <SystemClock_Config+0xe0>)
 80011c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SystemClock_Config+0xe0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011d4:	2309      	movs	r3, #9
 80011d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011ec:	2319      	movs	r3, #25
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011f0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f6:	2302      	movs	r3, #2
 80011f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011fa:	2309      	movs	r3, #9
 80011fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011fe:	2302      	movs	r3, #2
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4618      	mov	r0, r3
 8001208:	f003 f884 	bl	8004314 <HAL_RCC_OscConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001212:	f000 f857 	bl	80012c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001216:	f003 f82d 	bl	8004274 <HAL_PWREx_EnableOverDrive>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001220:	f000 f850 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2302      	movs	r3, #2
 800122a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001230:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	2107      	movs	r1, #7
 8001242:	4618      	mov	r0, r3
 8001244:	f003 fb14 	bl	8004870 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800124e:	f000 f839 	bl	80012c4 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3750      	adds	r7, #80	; 0x50
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0a4      	sub	sp, #144	; 0x90
 8001268:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2290      	movs	r2, #144	; 0x90
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f010 f9d3 	bl	801161c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <PeriphCommonClock_Config+0x5c>)
 8001278:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 800127a:	f240 13ad 	movw	r3, #429	; 0x1ad
 800127e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001284:	2306      	movs	r3, #6
 8001286:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 800128c:	2306      	movs	r3, #6
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001294:	2300      	movs	r3, #0
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001298:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800129c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a6:	463b      	mov	r3, r7
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fcc7 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80012b4:	f000 f806 	bl	80012c4 <Error_Handler>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3790      	adds	r7, #144	; 0x90
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	18300000 	.word	0x18300000

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <MX_RTC_Init+0xd0>)
 80012ea:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <MX_RTC_Init+0xd4>)
 80012ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <MX_RTC_Init+0xd0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_RTC_Init+0xd0>)
 80012f6:	227f      	movs	r2, #127	; 0x7f
 80012f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <MX_RTC_Init+0xd0>)
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_RTC_Init+0xd0>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_RTC_Init+0xd0>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_RTC_Init+0xd0>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001312:	4823      	ldr	r0, [pc, #140]	; (80013a0 <MX_RTC_Init+0xd0>)
 8001314:	f004 fa2c 	bl	8005770 <HAL_RTC_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800131e:	f7ff ffd1 	bl	80012c4 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 8001322:	2100      	movs	r1, #0
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <MX_RTC_Init+0xd0>)
 8001326:	f004 fd4d 	bl	8005dc4 <HAL_RTCEx_BKUPRead>
 800132a:	4603      	mov	r3, r0
 800132c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001330:	4293      	cmp	r3, r2
 8001332:	d02e      	beq.n	8001392 <MX_RTC_Init+0xc2>

		return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001334:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001338:	2100      	movs	r1, #0
 800133a:	4819      	ldr	r0, [pc, #100]	; (80013a0 <MX_RTC_Init+0xd0>)
 800133c:	f004 fd28 	bl	8005d90 <HAL_RTCEx_BKUPWrite>
	}
  sTime.Hours = HOUR;
 8001340:	2316      	movs	r3, #22
 8001342:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 8001344:	2351      	movs	r3, #81	; 0x51
 8001346:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 8001348:	2300      	movs	r3, #0
 800134a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_RTC_Init+0xd0>)
 800135c:	f004 fa8c 	bl	8005878 <HAL_RTC_SetTime>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001366:	f7ff ffad 	bl	80012c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800136a:	2301      	movs	r3, #1
 800136c:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 800136e:	2301      	movs	r3, #1
 8001370:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 8001372:	2327      	movs	r3, #39	; 0x27
 8001374:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8001376:	2323      	movs	r3, #35	; 0x23
 8001378:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800137a:	463b      	mov	r3, r7
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_RTC_Init+0xd0>)
 8001382:	f004 fb71 	bl	8005a68 <HAL_RTC_SetDate>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800138c:	f7ff ff9a 	bl	80012c4 <Error_Handler>
  }
  return;
 8001390:	e001      	b.n	8001396 <MX_RTC_Init+0xc6>
		return;
 8001392:	bf00      	nop
 8001394:	e000      	b.n	8001398 <MX_RTC_Init+0xc8>
  return;
 8001396:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20005698 	.word	0x20005698
 80013a4:	40002800 	.word	0x40002800

080013a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b0a6      	sub	sp, #152	; 0x98
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	2290      	movs	r2, #144	; 0x90
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f010 f92f 	bl	801161c <memset>
  if(rtcHandle->Instance==RTC)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_RTC_MspInit+0x54>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d114      	bne.n	80013f2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013c8:	2320      	movs	r3, #32
 80013ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fc30 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013e2:	f7ff ff6f 	bl	80012c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_RTC_MspInit+0x58>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_RTC_MspInit+0x58>)
 80013ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3798      	adds	r7, #152	; 0x98
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40002800 	.word	0x40002800
 8001400:	40023800 	.word	0x40023800

08001404 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800140a:	4a2b      	ldr	r2, [pc, #172]	; (80014b8 <MX_SAI2_Init+0xb4>)
 800140c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800140e:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001410:	2200      	movs	r2, #0
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 800141a:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001438:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001442:	2201      	movs	r2, #1
 8001444:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001448:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <MX_SAI2_Init+0xb8>)
 800144a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001460:	2200      	movs	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001466:	2220      	movs	r2, #32
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 800146a:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800146c:	2210      	movs	r2, #16
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001476:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800147a:	2200      	movs	r2, #0
 800147c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001480:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001484:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001488:	2200      	movs	r2, #0
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800148e:	2200      	movs	r2, #0
 8001490:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <MX_SAI2_Init+0xb0>)
 8001494:	2202      	movs	r2, #2
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_SAI2_Init+0xb0>)
 800149a:	2203      	movs	r2, #3
 800149c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_SAI2_Init+0xb0>)
 80014a0:	f004 fca8 	bl	8005df4 <HAL_SAI_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80014aa:	f7ff ff0b 	bl	80012c4 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200056b8 	.word	0x200056b8
 80014b8:	40015c24 	.word	0x40015c24
 80014bc:	0002ee00 	.word	0x0002ee00

080014c0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a4a      	ldr	r2, [pc, #296]	; (80015f8 <HAL_SAI_MspInit+0x138>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f040 808e 	bne.w	80015f0 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_SAI_MspInit+0x13c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80014dc:	4b48      	ldr	r3, [pc, #288]	; (8001600 <HAL_SAI_MspInit+0x140>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	4a47      	ldr	r2, [pc, #284]	; (8001600 <HAL_SAI_MspInit+0x140>)
 80014e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44
 80014e8:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_SAI_MspInit+0x140>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80014f4:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_SAI_MspInit+0x13c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a40      	ldr	r2, [pc, #256]	; (80015fc <HAL_SAI_MspInit+0x13c>)
 80014fc:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014fe:	2340      	movs	r3, #64	; 0x40
 8001500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800150e:	230a      	movs	r3, #10
 8001510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4619      	mov	r1, r3
 8001518:	483a      	ldr	r0, [pc, #232]	; (8001604 <HAL_SAI_MspInit+0x144>)
 800151a:	f002 fcb5 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800151e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001522:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001530:	230a      	movs	r3, #10
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4833      	ldr	r0, [pc, #204]	; (8001608 <HAL_SAI_MspInit+0x148>)
 800153c:	f002 fca4 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001540:	2301      	movs	r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001550:	230a      	movs	r3, #10
 8001552:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	4619      	mov	r1, r3
 800155a:	482c      	ldr	r0, [pc, #176]	; (800160c <HAL_SAI_MspInit+0x14c>)
 800155c:	f002 fc94 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001560:	2304      	movs	r3, #4
 8001562:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001570:	2308      	movs	r3, #8
 8001572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	4619      	mov	r1, r3
 800157a:	4824      	ldr	r0, [pc, #144]	; (800160c <HAL_SAI_MspInit+0x14c>)
 800157c:	f002 fc84 	bl	8003e88 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_SAI_MspInit+0x150>)
 8001582:	4a24      	ldr	r2, [pc, #144]	; (8001614 <HAL_SAI_MspInit+0x154>)
 8001584:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_SAI_MspInit+0x150>)
 8001588:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 800158c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_SAI_MspInit+0x150>)
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <HAL_SAI_MspInit+0x150>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_SAI_MspInit+0x150>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a8:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b0:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015c0:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015ca:	f002 f8b7 	bl	800373c <HAL_DMA_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80015d4:	f7ff fe76 	bl	80012c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015dc:	671a      	str	r2, [r3, #112]	; 0x70
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80015ea:	4a09      	ldr	r2, [pc, #36]	; (8001610 <HAL_SAI_MspInit+0x150>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40015c24 	.word	0x40015c24
 80015fc:	2000579c 	.word	0x2000579c
 8001600:	40023800 	.word	0x40023800
 8001604:	40021000 	.word	0x40021000
 8001608:	40021800 	.word	0x40021800
 800160c:	40020000 	.word	0x40020000
 8001610:	2000573c 	.word	0x2000573c
 8001614:	40026428 	.word	0x40026428

08001618 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 800161e:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <MX_SDMMC1_SD_Init+0x3c>)
 8001620:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001630:	2200      	movs	r2, #0
 8001632:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <MX_SDMMC1_SD_Init+0x38>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	200057a0 	.word	0x200057a0
 8001654:	40012c00 	.word	0x40012c00

08001658 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b0ae      	sub	sp, #184	; 0xb8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2290      	movs	r2, #144	; 0x90
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00f ffcf 	bl	801161c <memset>
  if(sdHandle->Instance==SDMMC1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a74      	ldr	r2, [pc, #464]	; (8001854 <HAL_SD_MspInit+0x1fc>)
 8001684:	4293      	cmp	r3, r2
 8001686:	f040 80e0 	bne.w	800184a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800168a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800168e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 facb 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80016ac:	f7ff fe0a 	bl	80012c4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016b0:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	4a68      	ldr	r2, [pc, #416]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ba:	6453      	str	r3, [r2, #68]	; 0x44
 80016bc:	4b66      	ldr	r3, [pc, #408]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	4b63      	ldr	r3, [pc, #396]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4a62      	ldr	r2, [pc, #392]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6313      	str	r3, [r2, #48]	; 0x30
 80016d4:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e0:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	4a5c      	ldr	r2, [pc, #368]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6313      	str	r3, [r2, #48]	; 0x30
 80016ec:	4b5a      	ldr	r3, [pc, #360]	; (8001858 <HAL_SD_MspInit+0x200>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80016f8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001712:	230c      	movs	r3, #12
 8001714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800171c:	4619      	mov	r1, r3
 800171e:	484f      	ldr	r0, [pc, #316]	; (800185c <HAL_SD_MspInit+0x204>)
 8001720:	f002 fbb2 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001724:	2304      	movs	r3, #4
 8001726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800173c:	230c      	movs	r3, #12
 800173e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001742:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001746:	4619      	mov	r1, r3
 8001748:	4845      	ldr	r0, [pc, #276]	; (8001860 <HAL_SD_MspInit+0x208>)
 800174a:	f002 fb9d 	bl	8003e88 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800174e:	4b45      	ldr	r3, [pc, #276]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001750:	4a45      	ldr	r2, [pc, #276]	; (8001868 <HAL_SD_MspInit+0x210>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_SD_MspInit+0x20c>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001762:	4b40      	ldr	r3, [pc, #256]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_SD_MspInit+0x20c>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001772:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001776:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001778:	4b3a      	ldr	r3, [pc, #232]	; (8001864 <HAL_SD_MspInit+0x20c>)
 800177a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_SD_MspInit+0x20c>)
 800178e:	2204      	movs	r2, #4
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_SD_MspInit+0x20c>)
 8001794:	2203      	movs	r2, #3
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001798:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_SD_MspInit+0x20c>)
 800179a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <HAL_SD_MspInit+0x20c>)
 80017a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80017a8:	482e      	ldr	r0, [pc, #184]	; (8001864 <HAL_SD_MspInit+0x20c>)
 80017aa:	f001 ffc7 	bl	800373c <HAL_DMA_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80017b4:	f7ff fd86 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <HAL_SD_MspInit+0x20c>)
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
 80017be:	4a29      	ldr	r2, [pc, #164]	; (8001864 <HAL_SD_MspInit+0x20c>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <HAL_SD_MspInit+0x214>)
 80017c6:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <HAL_SD_MspInit+0x218>)
 80017c8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_SD_MspInit+0x214>)
 80017cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_SD_MspInit+0x214>)
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_SD_MspInit+0x214>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_SD_MspInit+0x214>)
 80017e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_SD_MspInit+0x214>)
 80017e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017ec:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_SD_MspInit+0x214>)
 80017f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_SD_MspInit+0x214>)
 80017f8:	2220      	movs	r2, #32
 80017fa:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_SD_MspInit+0x214>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_SD_MspInit+0x214>)
 8001804:	2204      	movs	r2, #4
 8001806:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_SD_MspInit+0x214>)
 800180a:	2203      	movs	r2, #3
 800180c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_SD_MspInit+0x214>)
 8001810:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_SD_MspInit+0x214>)
 8001818:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800181c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800181e:	4813      	ldr	r0, [pc, #76]	; (800186c <HAL_SD_MspInit+0x214>)
 8001820:	f001 ff8c 	bl	800373c <HAL_DMA_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 800182a:	f7ff fd4b 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_SD_MspInit+0x214>)
 8001832:	63da      	str	r2, [r3, #60]	; 0x3c
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_SD_MspInit+0x214>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	2031      	movs	r0, #49	; 0x31
 8001840:	f001 facf 	bl	8002de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001844:	2031      	movs	r0, #49	; 0x31
 8001846:	f001 fae8 	bl	8002e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	37b8      	adds	r7, #184	; 0xb8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00
 8001858:	40023800 	.word	0x40023800
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	20005824 	.word	0x20005824
 8001868:	400264a0 	.word	0x400264a0
 800186c:	20005884 	.word	0x20005884
 8001870:	40026458 	.word	0x40026458

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x44>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x44>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x44>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x44>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x44>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x44>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <NMI_Handler+0x4>

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <MemManage_Handler+0x4>

080018ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler+0x4>

080018da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 feb8 	bl	800267c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 8001914:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001918:	f002 fc94 	bl	8004244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <SDMMC1_IRQHandler+0x10>)
 8001926:	f004 fe9b 	bl	8006660 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200057a0 	.word	0x200057a0

08001934 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA2_Stream0_IRQHandler+0x10>)
 800193a:	f002 f82f 	bl	800399c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200015bc 	.word	0x200015bc

08001948 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA2_Stream1_IRQHandler+0x10>)
 800194e:	f002 f825 	bl	800399c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000573c 	.word	0x2000573c

0800195c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <DMA2_Stream3_IRQHandler+0x10>)
 8001962:	f002 f81b 	bl	800399c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20005884 	.word	0x20005884

08001970 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <DMA2_Stream5_IRQHandler+0x10>)
 8001976:	f002 f811 	bl	800399c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000161c 	.word	0x2000161c

08001984 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <DMA2_Stream6_IRQHandler+0x10>)
 800198a:	f002 f807 	bl	800399c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20005824 	.word	0x20005824

08001998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a0:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <_sbrk+0x5c>)
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <_sbrk+0x60>)
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d102      	bne.n	80019ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <_sbrk+0x64>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <_sbrk+0x68>)
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d207      	bcs.n	80019d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c8:	f00f fdf0 	bl	80115ac <__errno>
 80019cc:	4603      	mov	r3, r0
 80019ce:	220c      	movs	r2, #12
 80019d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d6:	e009      	b.n	80019ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <_sbrk+0x64>)
 80019e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ea:	68fb      	ldr	r3, [r7, #12]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20080000 	.word	0x20080000
 80019f8:	00000800 	.word	0x00000800
 80019fc:	200058e4 	.word	0x200058e4
 8001a00:	2001a928 	.word	0x2001a928

08001a04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <SystemInit+0x20>)
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	4a05      	ldr	r2, [pc, #20]	; (8001a24 <SystemInit+0x20>)
 8001a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a2e:	4a15      	ldr	r2, [pc, #84]	; (8001a84 <MX_UART4_Init+0x5c>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a32:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_UART4_Init+0x58>)
 8001a6c:	f005 fea3 	bl	80077b6 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a76:	f7ff fc25 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200058e8 	.word	0x200058e8
 8001a84:	40004c00 	.word	0x40004c00

08001a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0ae      	sub	sp, #184	; 0xb8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2290      	movs	r2, #144	; 0x90
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00f fdb7 	bl	801161c <memset>
  if(uartHandle->Instance==UART4)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a32      	ldr	r2, [pc, #200]	; (8001b7c <HAL_UART_MspInit+0xf4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d15d      	bne.n	8001b74 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001abc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 f8b8 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ad2:	f7ff fbf7 	bl	80012c4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001af4:	f043 0308 	orr.w	r3, r3, #8
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b1e      	ldr	r3, [pc, #120]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_UART_MspInit+0xf8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b36:	2308      	movs	r3, #8
 8001b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4810      	ldr	r0, [pc, #64]	; (8001b84 <HAL_UART_MspInit+0xfc>)
 8001b44:	f002 f9a0 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001b62:	2306      	movs	r3, #6
 8001b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <HAL_UART_MspInit+0x100>)
 8001b70:	f002 f98a 	bl	8003e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b74:	bf00      	nop
 8001b76:	37b8      	adds	r7, #184	; 0xb8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40004c00 	.word	0x40004c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40020000 	.word	0x40020000

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b92:	490e      	ldr	r1, [pc, #56]	; (8001bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba8:	4c0b      	ldr	r4, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bb6:	f7ff ff25 	bl	8001a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f00f fcfd 	bl	80115b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff f9cd 	bl	8000f5c <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	2000141c 	.word	0x2000141c
  ldr r2, =_sidata
 8001bd0:	08184fc8 	.word	0x08184fc8
  ldr r2, =_sbss
 8001bd4:	2000141c 	.word	0x2000141c
  ldr r4, =_ebss
 8001bd8:	2001a928 	.word	0x2001a928

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>

08001bde <buf_to_float>:
 * @param      *pInSignal  points to input signal buffer
 * @param      *pOutSignal points to output signal buffer
 * @param      len         signal length
 */
void buf_to_float(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b087      	sub	sp, #28
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e012      	b.n	8001c16 <buf_to_float+0x38>
  {
    pOutSignal[i] = (float32_t) pInSignal[i];
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	ee07 1a90 	vmov	s15, r1
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3e8      	bcc.n	8001bf0 <buf_to_float+0x12>
  }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6899      	ldr	r1, [r3, #8]
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	68b8      	ldr	r0, [r7, #8]
 8001c54:	f00f f972 	bl	8010f3c <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	18d0      	adds	r0, r2, r3
 8001c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f00f fcd7 	bl	801161c <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	f00e fca4 	bl	80105c4 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8c:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	3304      	adds	r3, #4
 8001c94:	ed93 7a00 	vldr	s14, [r3]
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca4:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f103 0008 	add.w	r0, r3, #8
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	1d19      	adds	r1, r3, #4
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f00f f8e4 	bl	8010e8c <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d12c      	bne.n	8001d34 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cde:	e023      	b.n	8001d28 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	440b      	add	r3, r1
 8001cf2:	617a      	str	r2, [r7, #20]
 8001cf4:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	db09      	blt.n	8001d18 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001d04:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d08:	f010 fa8a 	bl	8012220 <sqrtf>
 8001d0c:	eef0 7a40 	vmov.f32	s15, s0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001d16:	e004      	b.n	8001d22 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d20:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	3301      	adds	r3, #1
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d3d5      	bcc.n	8001ce0 <SpectrogramColumn+0xb4>
    }
  }
}
 8001d34:	bf00      	nop
 8001d36:	3730      	adds	r7, #48	; 0x30
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08f      	sub	sp, #60	; 0x3c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff5a 	bl	8001c2c <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6979      	ldr	r1, [r7, #20]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fa49 	bl	800221a <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8c:	e012      	b.n	8001db4 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	edd3 6a00 	vldr	s13, [r3]
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001daa:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db0:	3301      	adds	r3, #1
 8001db2:	637b      	str	r3, [r7, #52]	; 0x34
 8001db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001db6:	6a3b      	ldr	r3, [r7, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3e8      	bcc.n	8001d8e <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8001dc0:	e014      	b.n	8001dec <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	d806      	bhi.n	8001de6 <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001de4:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de8:	3301      	adds	r3, #1
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
 8001dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d3e6      	bcc.n	8001dc2 <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d14a      	bne.n	8001e92 <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e00:	e018      	b.n	8001e34 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8001e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e12:	f010 f9d7 	bl	80121c4 <log10f>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	3301      	adds	r3, #1
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e36:	6a3b      	ldr	r3, [r7, #32]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3e2      	bcc.n	8001e02 <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e40:	e022      	b.n	8001e88 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8001e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	ed93 7a00 	vldr	s14, [r3]
 8001e4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e52:	eef1 7a67 	vneg.f32	s15, s15
 8001e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	d504      	bpl.n	8001e6a <LogMelSpectrogramColumn+0x12e>
 8001e60:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e64:	eef1 7a67 	vneg.f32	s15, s15
 8001e68:	e005      	b.n	8001e76 <LogMelSpectrogramColumn+0x13a>
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e84:	3301      	adds	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d3d8      	bcc.n	8001e42 <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8001e90:	e01b      	b.n	8001eca <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
 8001e96:	e014      	b.n	8001ec2 <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	18d4      	adds	r4, r2, r3
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	f010 f922 	bl	80120f8 <logf>
 8001eb4:	eef0 7a40 	vmov.f32	s15, s0
 8001eb8:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3e6      	bcc.n	8001e98 <LogMelSpectrogramColumn+0x15c>
}
 8001eca:	bf00      	nop
 8001ecc:	373c      	adds	r7, #60	; 0x3c
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}

08001ed2 <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b0a4      	sub	sp, #144	; 0x90
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	330c      	adds	r3, #12
 8001f08:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001f28:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f32:	f000 f9c7 	bl	80022c4 <MelScale>
 8001f36:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001f3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f3e:	4618      	mov	r0, r3
 8001f40:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001f44:	f000 f9be 	bl	80022c4 <MelScale>
 8001f48:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001f4c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f50:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f54:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	ee07 3a90 	vmov	s15, r3
 8001f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f68:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f76:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f9c:	e133      	b.n	8002206 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d044      	beq.n	800202e <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc8:	f000 f9ec 	bl	80023a4 <InverseMelScale>
 8001fcc:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8001fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fdc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	f000 f9d5 	bl	80023a4 <InverseMelScale>
 8001ffa:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8001ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002000:	3302      	adds	r3, #2
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800200a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800200e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002012:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800201e:	4618      	mov	r0, r3
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	f000 f9be 	bl	80023a4 <InverseMelScale>
 8002028:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 800202c:	e02e      	b.n	800208c <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 800202e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002038:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800203c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002040:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002048:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 800204c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204e:	3301      	adds	r3, #1
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002058:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800205c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002060:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 800206c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800206e:	3302      	adds	r3, #2
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002078:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 800208c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002090:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 800209c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020a0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80020a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a8:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 80020bc:	2300      	movs	r3, #0
 80020be:	667b      	str	r3, [r7, #100]	; 0x64
 80020c0:	e098      	b.n	80021f4 <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 80020c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00b      	beq.n	80020e0 <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 80020c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 80020de:	e011      	b.n	8002104 <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 80020e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020e2:	ee07 3a90 	vmov	s15, r3
 80020e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80020f6:	4618      	mov	r0, r3
 80020f8:	eeb0 0a67 	vmov.f32	s0, s15
 80020fc:	f000 f8e2 	bl	80022c4 <MelScale>
 8002100:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8002104:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002108:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8002114:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002118:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800211c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002120:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8002124:	edd7 7a07 	vldr	s15, [r7, #28]
 8002128:	eef1 6a67 	vneg.f32	s13, s15
 800212c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002134:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8002138:	edd7 6a06 	vldr	s13, [r7, #24]
 800213c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002144:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8002148:	ed97 7a05 	vldr	s14, [r7, #20]
 800214c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	d502      	bpl.n	8002160 <MelFilterbank_Init+0x28e>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	673b      	str	r3, [r7, #112]	; 0x70
 800215e:	e001      	b.n	8002164 <MelFilterbank_Init+0x292>
      else min = upper;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 8002164:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002168:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	dd2f      	ble.n	80021d2 <MelFilterbank_Init+0x300>
      {
        weight = min;
 8002172:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002174:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 8002176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 800217c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002180:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002184:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002188:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800218c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002190:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 8002194:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002198:	edd7 7a03 	vldr	s15, [r7, #12]
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 80021a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a8:	1d1a      	adds	r2, r3, #4
 80021aa:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021b0:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 80021b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ba:	d102      	bne.n	80021c2 <MelFilterbank_Init+0x2f0>
          start_index = j;
 80021bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 80021c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 80021c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d0:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 80021d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021d8:	4413      	add	r3, r2
 80021da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80021de:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 80021e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80021e6:	4413      	add	r3, r2
 80021e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80021ec:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 80021ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021f0:	3301      	adds	r3, #1
 80021f2:	667b      	str	r3, [r7, #100]	; 0x64
 80021f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f4ff af61 	bcc.w	80020c2 <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8002200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002202:	3301      	adds	r3, #1
 8002204:	66bb      	str	r3, [r7, #104]	; 0x68
 8002206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220a:	429a      	cmp	r2, r3
 800220c:	f4ff aec7 	bcc.w	8001f9e <MelFilterbank_Init+0xcc>
    }
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3790      	adds	r7, #144	; 0x90
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 800221a:	b480      	push	{r7}
 800221c:	b08d      	sub	sp, #52	; 0x34
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	e034      	b.n	80022ae <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4413      	add	r3, r2
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8002262:	8a7b      	ldrh	r3, [r7, #18]
 8002264:	623b      	str	r3, [r7, #32]
 8002266:	e015      	b.n	8002294 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	4413      	add	r3, r2
 8002270:	ed93 7a00 	vldr	s14, [r3]
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	1d1a      	adds	r2, r3, #4
 8002278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002282:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	3301      	adds	r3, #1
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	8a3b      	ldrh	r3, [r7, #16]
 8002296:	6a3a      	ldr	r2, [r7, #32]
 8002298:	429a      	cmp	r2, r3
 800229a:	d9e5      	bls.n	8002268 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4413      	add	r3, r2
 80022a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a6:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	3301      	adds	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d3c6      	bcc.n	8002244 <MelFilterbank+0x2a>
  }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	3734      	adds	r7, #52	; 0x34
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80022ce:	4603      	mov	r3, r0
 80022d0:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 80022d2:	78fb      	ldrb	r3, [r7, #3]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d042      	beq.n	800235e <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <MelScale+0xcc>)
 80022e0:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 80022e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80022f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 80022fa:	4b26      	ldr	r3, [pc, #152]	; (8002394 <MelScale+0xd0>)
 80022fc:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 80022fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002302:	edd7 7a06 	vldr	s15, [r7, #24]
 8002306:	ee77 6a67 	vsub.f32	s13, s14, s15
 800230a:	ed97 7a05 	vldr	s14, [r7, #20]
 800230e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002312:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <MelScale+0xd4>)
 8002318:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 800231a:	ed97 7a01 	vldr	s14, [r7, #4]
 800231e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002322:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	db15      	blt.n	8002358 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800232c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002330:	edd7 7a04 	vldr	s15, [r7, #16]
 8002334:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002338:	eeb0 0a66 	vmov.f32	s0, s13
 800233c:	f00f fedc 	bl	80120f8 <logf>
 8002340:	eef0 6a40 	vmov.f32	s13, s0
 8002344:	ed97 7a02 	vldr	s14, [r7, #8]
 8002348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002354:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 8002358:	edd7 7a07 	vldr	s15, [r7, #28]
 800235c:	e013      	b.n	8002386 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 800235e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002362:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800239c <MelScale+0xd8>
 8002366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800236e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002372:	eeb0 0a67 	vmov.f32	s0, s15
 8002376:	f00f febf 	bl	80120f8 <logf>
 800237a:	eef0 7a40 	vmov.f32	s15, s0
 800237e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023a0 <MelScale+0xdc>
 8002382:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	42855555 	.word	0x42855555
 8002394:	447a0000 	.word	0x447a0000
 8002398:	3d8ccdbb 	.word	0x3d8ccdbb
 800239c:	442f0000 	.word	0x442f0000
 80023a0:	448ce000 	.word	0x448ce000

080023a4 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80023ae:	4603      	mov	r3, r0
 80023b0:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d042      	beq.n	800243e <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <InverseMelScale+0xcc>)
 80023c0:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 80023c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80023c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	ed97 7a06 	vldr	s14, [r7, #24]
 80023d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d6:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <InverseMelScale+0xd0>)
 80023dc:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 80023de:	ed97 7a04 	vldr	s14, [r7, #16]
 80023e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80023ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f2:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <InverseMelScale+0xd4>)
 80023f8:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 80023fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80023fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	db15      	blt.n	8002438 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800240c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002410:	edd7 7a03 	vldr	s15, [r7, #12]
 8002414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002418:	edd7 7a02 	vldr	s15, [r7, #8]
 800241c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002420:	eeb0 0a67 	vmov.f32	s0, s15
 8002424:	f00f fdf4 	bl	8012010 <expf>
 8002428:	eeb0 7a40 	vmov.f32	s14, s0
 800242c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002434:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8002438:	edd7 7a07 	vldr	s15, [r7, #28]
 800243c:	e013      	b.n	8002466 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800243e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002442:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800247c <InverseMelScale+0xd8>
 8002446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800244a:	eeb0 0a47 	vmov.f32	s0, s14
 800244e:	f00f fddf 	bl	8012010 <expf>
 8002452:	eef0 7a40 	vmov.f32	s15, s0
 8002456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800245a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800245e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002480 <InverseMelScale+0xdc>
 8002462:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 8002466:	eeb0 0a67 	vmov.f32	s0, s15
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	42855555 	.word	0x42855555
 8002474:	447a0000 	.word	0x447a0000
 8002478:	3d8ccdbb 	.word	0x3d8ccdbb
 800247c:	448ce000 	.word	0x448ce000
 8002480:	442f0000 	.word	0x442f0000
 8002484:	00000000 	.word	0x00000000

08002488 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]

  switch (type)
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d01c      	beq.n	80024da <Window_Init+0x52>
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	dc25      	bgt.n	80024f0 <Window_Init+0x68>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <Window_Init+0x26>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d00b      	beq.n	80024c4 <Window_Init+0x3c>
 80024ac:	e020      	b.n	80024f0 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 80024ae:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8002508 <Window_Init+0x80>
 80024b2:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80024b6:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f837 	bl	8002530 <cosine_sum_window_create>
      break;
 80024c2:	e019      	b.n	80024f8 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 80024c4:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8002508 <Window_Init+0x80>
 80024c8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002510 <Window_Init+0x88>
 80024cc:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002518 <Window_Init+0x90>
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f82c 	bl	8002530 <cosine_sum_window_create>
      break;
 80024d8:	e00e      	b.n	80024f8 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 80024da:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002520 <Window_Init+0x98>
 80024de:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80024e2:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002528 <Window_Init+0xa0>
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f821 	bl	8002530 <cosine_sum_window_create>
      break;
 80024ee:	e003      	b.n	80024f8 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024f4:	617b      	str	r3, [r7, #20]
      break;
 80024f6:	bf00      	nop
  }

  return status;
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	f3af 8000 	nop.w
	...
 8002510:	d70a3d71 	.word	0xd70a3d71
 8002514:	3fdd70a3 	.word	0x3fdd70a3
 8002518:	147ae148 	.word	0x147ae148
 800251c:	3fe147ae 	.word	0x3fe147ae
 8002520:	47ae147b 	.word	0x47ae147b
 8002524:	3fb47ae1 	.word	0x3fb47ae1
 8002528:	ae147ae1 	.word	0xae147ae1
 800252c:	3fdae147 	.word	0x3fdae147

08002530 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	ed2d 8b02 	vpush	{d8}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	61f8      	str	r0, [r7, #28]
 800253c:	61b9      	str	r1, [r7, #24]
 800253e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002542:	ed87 1b02 	vstr	d1, [r7, #8]
 8002546:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e043      	b.n	80025d8 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800255a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80025f0 <cosine_sum_window_create+0xc0>
 800255e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800256c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002570:	eeb0 0b45 	vmov.f64	d0, d5
 8002574:	f00f fd00 	bl	8011f78 <cos>
 8002578:	eeb0 6b40 	vmov.f64	d6, d0
 800257c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002580:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002584:	ed97 6b04 	vldr	d6, [r7, #16]
 8002588:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002596:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80025f8 <cosine_sum_window_create+0xc8>
 800259a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025a8:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80025ac:	eeb0 0b45 	vmov.f64	d0, d5
 80025b0:	f00f fce2 	bl	8011f78 <cos>
 80025b4:	eeb0 6b40 	vmov.f64	d6, d0
 80025b8:	ed97 7b00 	vldr	d7, [r7]
 80025bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025c0:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	1d1a      	adds	r2, r3, #4
 80025c8:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80025ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 80025ce:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3b7      	bcc.n	8002550 <cosine_sum_window_create+0x20>
  }
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	ecbd 8b02 	vpop	{d8}
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	54442d18 	.word	0x54442d18
 80025f4:	401921fb 	.word	0x401921fb
 80025f8:	54442d18 	.word	0x54442d18
 80025fc:	402921fb 	.word	0x402921fb

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 fbe1 	bl	8002dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800260a:	200f      	movs	r0, #15
 800260c:	f000 f806 	bl	800261c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002610:	f7ff f930 	bl	8001874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_InitTick+0x54>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <HAL_InitTick+0x58>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	4619      	mov	r1, r3
 800262e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002632:	fbb3 f3f1 	udiv	r3, r3, r1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fbfb 	bl	8002e36 <HAL_SYSTICK_Config>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e00e      	b.n	8002668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b0f      	cmp	r3, #15
 800264e:	d80a      	bhi.n	8002666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	2200      	movs	r2, #0
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002658:	f000 fbc3 	bl	8002de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_InitTick+0x5c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	20000000 	.word	0x20000000
 8002674:	20000008 	.word	0x20000008
 8002678:	20000004 	.word	0x20000004

0800267c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_IncTick+0x20>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x24>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4413      	add	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_IncTick+0x24>)
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000008 	.word	0x20000008
 80026a0:	20005970 	.word	0x20005970

080026a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTick;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetTick+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20005970 	.word	0x20005970

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff ffee 	bl	80026a4 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_Delay+0x44>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffde 	bl	80026a4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000008 	.word	0x20000008

08002704 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e031      	b.n	800277e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe f81a 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_ADC_Init+0x84>)
 8002748:	4013      	ands	r3, r2
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f970 	bl	8002a38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
 800276e:	e001      	b.n	8002774 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	ffffeefd 	.word	0xffffeefd

0800278c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x1c>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e136      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x28a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d93a      	bls.n	800282e <HAL_ADC_ConfigChannel+0xa2>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027c0:	d035      	beq.n	800282e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68d9      	ldr	r1, [r3, #12]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	3b1e      	subs	r3, #30
 80027d8:	2207      	movs	r2, #7
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	400a      	ands	r2, r1
 80027e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a8d      	ldr	r2, [pc, #564]	; (8002a24 <HAL_ADC_ConfigChannel+0x298>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10a      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68d9      	ldr	r1, [r3, #12]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	061a      	lsls	r2, r3, #24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002806:	e035      	b.n	8002874 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	4618      	mov	r0, r3
 800281a:	4603      	mov	r3, r0
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4403      	add	r3, r0
 8002820:	3b1e      	subs	r3, #30
 8002822:	409a      	lsls	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800282c:	e022      	b.n	8002874 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6919      	ldr	r1, [r3, #16]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	4413      	add	r3, r2
 8002842:	2207      	movs	r2, #7
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43da      	mvns	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	400a      	ands	r2, r1
 8002850:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6919      	ldr	r1, [r3, #16]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	4618      	mov	r0, r3
 8002864:	4603      	mov	r3, r0
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4403      	add	r3, r0
 800286a:	409a      	lsls	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d824      	bhi.n	80028c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b05      	subs	r3, #5
 800288e:	221f      	movs	r2, #31
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43da      	mvns	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	400a      	ands	r2, r1
 800289c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b05      	subs	r3, #5
 80028b8:	fa00 f203 	lsl.w	r2, r0, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34
 80028c4:	e04c      	b.n	8002960 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d824      	bhi.n	8002918 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b23      	subs	r3, #35	; 0x23
 80028e0:	221f      	movs	r2, #31
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	400a      	ands	r2, r1
 80028ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b23      	subs	r3, #35	; 0x23
 800290a:	fa00 f203 	lsl.w	r2, r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
 8002916:	e023      	b.n	8002960 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b41      	subs	r3, #65	; 0x41
 800292a:	221f      	movs	r2, #31
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43da      	mvns	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	400a      	ands	r2, r1
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	3b41      	subs	r3, #65	; 0x41
 8002954:	fa00 f203 	lsl.w	r2, r0, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a30      	ldr	r2, [pc, #192]	; (8002a28 <HAL_ADC_ConfigChannel+0x29c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d10a      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1f4>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002972:	d105      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 800297a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800297e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a28      	ldr	r2, [pc, #160]	; (8002a28 <HAL_ADC_ConfigChannel+0x29c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d10f      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b12      	cmp	r3, #18
 8002990:	d10b      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002998:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800299c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 80029a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_ADC_ConfigChannel+0x29c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d12b      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x280>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_ADC_ConfigChannel+0x298>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <HAL_ADC_ConfigChannel+0x23a>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b11      	cmp	r3, #17
 80029c4:	d122      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 80029cc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80029d0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_ADC_ConfigChannel+0x2a0>)
 80029d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_ADC_ConfigChannel+0x298>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d111      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80029e8:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_ADC_ConfigChannel+0x2a4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <HAL_ADC_ConfigChannel+0x2a8>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9a      	lsrs	r2, r3, #18
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029fe:	e002      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	10000012 	.word	0x10000012
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	40012300 	.word	0x40012300
 8002a30:	20000000 	.word	0x20000000
 8002a34:	431bde83 	.word	0x431bde83

08002a38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a40:	4b78      	ldr	r3, [pc, #480]	; (8002c24 <ADC_Init+0x1ec>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4a77      	ldr	r2, [pc, #476]	; (8002c24 <ADC_Init+0x1ec>)
 8002a46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a4c:	4b75      	ldr	r3, [pc, #468]	; (8002c24 <ADC_Init+0x1ec>)
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4973      	ldr	r1, [pc, #460]	; (8002c24 <ADC_Init+0x1ec>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	021a      	lsls	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6899      	ldr	r1, [r3, #8]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <ADC_Init+0x1f0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d022      	beq.n	8002b12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ada:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002afc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e00f      	b.n	8002b32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0202 	bic.w	r2, r2, #2
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	005a      	lsls	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d01b      	beq.n	8002b98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6859      	ldr	r1, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	035a      	lsls	r2, r3, #13
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	e007      	b.n	8002ba8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	051a      	lsls	r2, r3, #20
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6899      	ldr	r1, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bea:	025a      	lsls	r2, r3, #9
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6899      	ldr	r1, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	029a      	lsls	r2, r3, #10
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40012300 	.word	0x40012300
 8002c28:	0f000001 	.word	0x0f000001

08002c2c <__NVIC_SetPriorityGrouping>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <__NVIC_SetPriorityGrouping+0x44>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c5a:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <__NVIC_SetPriorityGrouping+0x40>)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	60d3      	str	r3, [r2, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000ed00 	.word	0xe000ed00
 8002c70:	05fa0000 	.word	0x05fa0000

08002c74 <__NVIC_GetPriorityGrouping>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <__NVIC_GetPriorityGrouping+0x18>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	f003 0307 	and.w	r3, r3, #7
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_EnableIRQ>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db0b      	blt.n	8002cba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <__NVIC_EnableIRQ+0x38>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	e000e100 	.word	0xe000e100

08002ccc <__NVIC_SetPriority>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	6039      	str	r1, [r7, #0]
 8002cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db0a      	blt.n	8002cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	490c      	ldr	r1, [pc, #48]	; (8002d18 <__NVIC_SetPriority+0x4c>)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	0112      	lsls	r2, r2, #4
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	440b      	add	r3, r1
 8002cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cf4:	e00a      	b.n	8002d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4908      	ldr	r1, [pc, #32]	; (8002d1c <__NVIC_SetPriority+0x50>)
 8002cfc:	79fb      	ldrb	r3, [r7, #7]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3b04      	subs	r3, #4
 8002d04:	0112      	lsls	r2, r2, #4
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	440b      	add	r3, r1
 8002d0a:	761a      	strb	r2, [r3, #24]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000e100 	.word	0xe000e100
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <NVIC_EncodePriority>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b089      	sub	sp, #36	; 0x24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f1c3 0307 	rsb	r3, r3, #7
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	bf28      	it	cs
 8002d3e:	2304      	movcs	r3, #4
 8002d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d902      	bls.n	8002d50 <NVIC_EncodePriority+0x30>
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3b03      	subs	r3, #3
 8002d4e:	e000      	b.n	8002d52 <NVIC_EncodePriority+0x32>
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	401a      	ands	r2, r3
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	43d9      	mvns	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	4313      	orrs	r3, r2
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3724      	adds	r7, #36	; 0x24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d98:	d301      	bcc.n	8002d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e00f      	b.n	8002dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <SysTick_Config+0x40>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002da6:	210f      	movs	r1, #15
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dac:	f7ff ff8e 	bl	8002ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SysTick_Config+0x40>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002db6:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <SysTick_Config+0x40>)
 8002db8:	2207      	movs	r2, #7
 8002dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	e000e010 	.word	0xe000e010

08002dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff29 	bl	8002c2c <__NVIC_SetPriorityGrouping>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b086      	sub	sp, #24
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002df0:	2300      	movs	r3, #0
 8002df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002df4:	f7ff ff3e 	bl	8002c74 <__NVIC_GetPriorityGrouping>
 8002df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff ff8e 	bl	8002d20 <NVIC_EncodePriority>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff5d 	bl	8002ccc <__NVIC_SetPriority>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff ff31 	bl	8002c90 <__NVIC_EnableIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ffa2 	bl	8002d88 <SysTick_Config>
 8002e44:	4603      	mov	r3, r0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e054      	b.n	8002f0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7f5b      	ldrb	r3, [r3, #29]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fcb4 	bl	80007e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	791b      	ldrb	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10c      	bne.n	8002ea0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a22      	ldr	r2, [pc, #136]	; (8002f14 <HAL_CRC_Init+0xc4>)
 8002e8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0218 	bic.w	r2, r2, #24
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	e00c      	b.n	8002eba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f834 	bl	8002f18 <HAL_CRCEx_Polynomial_Set>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e028      	b.n	8002f0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	795b      	ldrb	r3, [r3, #5]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eca:	611a      	str	r2, [r3, #16]
 8002ecc:	e004      	b.n	8002ed8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6912      	ldr	r2, [r2, #16]
 8002ed6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	04c11db7 	.word	0x04c11db7

08002f18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f28:	231f      	movs	r3, #31
 8002f2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f2c:	bf00      	nop
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1e5a      	subs	r2, r3, #1
 8002f32:	613a      	str	r2, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d009      	beq.n	8002f4c <HAL_CRCEx_Polynomial_Set+0x34>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	d846      	bhi.n	8002fe0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f52:	a201      	add	r2, pc, #4	; (adr r2, 8002f58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002fe7 	.word	0x08002fe7
 8002f5c:	08002fe1 	.word	0x08002fe1
 8002f60:	08002fe1 	.word	0x08002fe1
 8002f64:	08002fe1 	.word	0x08002fe1
 8002f68:	08002fe1 	.word	0x08002fe1
 8002f6c:	08002fe1 	.word	0x08002fe1
 8002f70:	08002fe1 	.word	0x08002fe1
 8002f74:	08002fe1 	.word	0x08002fe1
 8002f78:	08002fd5 	.word	0x08002fd5
 8002f7c:	08002fe1 	.word	0x08002fe1
 8002f80:	08002fe1 	.word	0x08002fe1
 8002f84:	08002fe1 	.word	0x08002fe1
 8002f88:	08002fe1 	.word	0x08002fe1
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002fe1 	.word	0x08002fe1
 8002f94:	08002fe1 	.word	0x08002fe1
 8002f98:	08002fc9 	.word	0x08002fc9
 8002f9c:	08002fe1 	.word	0x08002fe1
 8002fa0:	08002fe1 	.word	0x08002fe1
 8002fa4:	08002fe1 	.word	0x08002fe1
 8002fa8:	08002fe1 	.word	0x08002fe1
 8002fac:	08002fe1 	.word	0x08002fe1
 8002fb0:	08002fe1 	.word	0x08002fe1
 8002fb4:	08002fe1 	.word	0x08002fe1
 8002fb8:	08002fbd 	.word	0x08002fbd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d913      	bls.n	8002fea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fc6:	e010      	b.n	8002fea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b07      	cmp	r3, #7
 8002fcc:	d90f      	bls.n	8002fee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fd2:	e00c      	b.n	8002fee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d90b      	bls.n	8002ff2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002fde:	e008      	b.n	8002ff2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe4:	e006      	b.n	8002ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e004      	b.n	8002ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002ff2:	bf00      	nop
  }
  if (status == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f023 0118 	bic.w	r1, r3, #24
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0ac      	b.n	8003190 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fadc 	bl	80035f8 <DFSDM_GetChannelFromInstance>
 8003040:	4603      	mov	r3, r0
 8003042:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_DFSDM_ChannelInit+0x174>)
 8003044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e09f      	b.n	8003190 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7fd fda9 	bl	8000ba8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003056:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_DFSDM_ChannelInit+0x178>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a4f      	ldr	r2, [pc, #316]	; (800319c <HAL_DFSDM_ChannelInit+0x178>)
 800305e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8003060:	4b4e      	ldr	r3, [pc, #312]	; (800319c <HAL_DFSDM_ChannelInit+0x178>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d125      	bne.n	80030b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003068:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a4c      	ldr	r2, [pc, #304]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800306e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003072:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003074:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4948      	ldr	r1, [pc, #288]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800307e:	4313      	orrs	r3, r2
 8003080:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a46      	ldr	r2, [pc, #280]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003088:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800308c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	791b      	ldrb	r3, [r3, #4]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d108      	bne.n	80030a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8003096:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	493f      	ldr	r1, [pc, #252]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80030a8:	4b3d      	ldr	r3, [pc, #244]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3c      	ldr	r2, [pc, #240]	; (80031a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80030ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80030c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80030d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80030d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 020f 	bic.w	r2, r2, #15
 80030f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6819      	ldr	r1, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003118:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6899      	ldr	r1, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f002 0207 	and.w	r2, r2, #7
 8003144:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003170:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fa3a 	bl	80035f8 <DFSDM_GetChannelFromInstance>
 8003184:	4602      	mov	r2, r0
 8003186:	4904      	ldr	r1, [pc, #16]	; (8003198 <HAL_DFSDM_ChannelInit+0x174>)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20005978 	.word	0x20005978
 800319c:	20005974 	.word	0x20005974
 80031a0:	40017400 	.word	0x40017400

080031a4 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e0c6      	b.n	8003344 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a64      	ldr	r2, [pc, #400]	; (800334c <HAL_DFSDM_FilterInit+0x1a8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d109      	bne.n	80031d4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d003      	beq.n	80031d0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b7      	b.n	8003344 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7fd fbf3 	bl	80009d8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003200:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7a1b      	ldrb	r3, [r3, #8]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e007      	b.n	800322c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800322a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7a5b      	ldrb	r3, [r3, #9]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_DFSDM_FilterInit+0x1ac>)
 8003262:	400b      	ands	r3, r1
 8003264:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d108      	bne.n	8003280 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7c1b      	ldrb	r3, [r3, #16]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0210 	orr.w	r2, r2, #16
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0210 	bic.w	r2, r2, #16
 80032a8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7c5b      	ldrb	r3, [r3, #17]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0220 	orr.w	r2, r2, #32
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0220 	bic.w	r2, r2, #32
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6959      	ldr	r1, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <HAL_DFSDM_FilterInit+0x1b0>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6959      	ldr	r1, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80032f6:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80032fe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7c1a      	ldrb	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40017500 	.word	0x40017500
 8003350:	ffff80f7 	.word	0xffff80f7
 8003354:	1c00ff00 	.word	0x1c00ff00

08003358 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d02c      	beq.n	80033cc <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003378:	2bff      	cmp	r3, #255	; 0xff
 800337a:	d027      	beq.n	80033cc <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8003388:	400b      	ands	r3, r1
 800338a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10d      	bne.n	80033ae <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e00a      	b.n	80033c4 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ca:	e001      	b.n	80033d0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	f8fbffff 	.word	0xf8fbffff

080033e4 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003402:	2bff      	cmp	r3, #255	; 0xff
 8003404:	d016      	beq.n	8003434 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	b292      	uxth	r2, r2
 800340e:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8003410:	6838      	ldr	r0, [r7, #0]
 8003412:	f000 f8d2 	bl	80035ba <DFSDM_GetInjChannelsNbr>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 8003422:	2b01      	cmp	r3, #1
 8003424:	d102      	bne.n	800342c <HAL_DFSDM_FilterConfigInjChannel+0x48>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	e000      	b.n	800342e <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 800342c:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6493      	str	r3, [r2, #72]	; 0x48
 8003432:	e001      	b.n	8003438 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
 8003464:	e066      	b.n	8003534 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003474:	d002      	beq.n	800347c <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
 800347a:	e05b      	b.n	8003534 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10e      	bne.n	80034a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10a      	bne.n	80034a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003492:	2b00      	cmp	r3, #0
 8003494:	d105      	bne.n	80034a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d002      	beq.n	80034a2 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
 80034a0:	e048      	b.n	8003534 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d108      	bne.n	80034c4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b6:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034bc:	d102      	bne.n	80034c4 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
 80034c2:	e037      	b.n	8003534 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d004      	beq.n	80034d8 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d12b      	bne.n	8003530 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80034de:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80034e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d101      	bne.n	80034f8 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 80034f6:	e000      	b.n	80034fa <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 80034f8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	331c      	adds	r3, #28
 800350a:	4619      	mov	r1, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f000 f9c2 	bl	8003898 <HAL_DMA_Start_IT>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003526:	e005      	b.n	8003534 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f8b1 	bl	8003690 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800352e:	e001      	b.n	8003534 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003534:	7dfb      	ldrb	r3, [r7, #23]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	0800357d 	.word	0x0800357d
 8003544:	08003599 	.word	0x08003599
 8003548:	08003561 	.word	0x08003561

0800354c <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f008 fe86 	bl	800c280 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f008 fe94 	bl	800c2b8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2203      	movs	r2, #3
 80035aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff ffcd 	bl	800354c <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80035cc:	e00a      	b.n	80035e4 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3301      	adds	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f1      	bne.n	80035ce <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <DFSDM_GetChannelFromInstance+0x7c>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d102      	bne.n	800360e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e02b      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <DFSDM_GetChannelFromInstance+0x80>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d102      	bne.n	800361c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e024      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <DFSDM_GetChannelFromInstance+0x84>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d102      	bne.n	800362a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003624:	2302      	movs	r3, #2
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e01d      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <DFSDM_GetChannelFromInstance+0x88>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d102      	bne.n	8003638 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8003632:	2303      	movs	r3, #3
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e016      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a12      	ldr	r2, [pc, #72]	; (8003684 <DFSDM_GetChannelFromInstance+0x8c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d102      	bne.n	8003646 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003640:	2304      	movs	r3, #4
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e00f      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <DFSDM_GetChannelFromInstance+0x90>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 800364e:	2305      	movs	r3, #5
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	e008      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <DFSDM_GetChannelFromInstance+0x94>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d102      	bne.n	8003662 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 800365c:	2306      	movs	r3, #6
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e001      	b.n	8003666 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8003662:	2307      	movs	r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40017400 	.word	0x40017400
 8003678:	40017420 	.word	0x40017420
 800367c:	40017440 	.word	0x40017440
 8003680:	40017460 	.word	0x40017460
 8003684:	40017480 	.word	0x40017480
 8003688:	400174a0 	.word	0x400174a0
 800368c:	400174c0 	.word	0x400174c0

08003690 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	2b00      	cmp	r3, #0
 800369e:	d108      	bne.n	80036b2 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e033      	b.n	800371a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80036d0:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d116      	bne.n	800371a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0202 	orr.w	r2, r2, #2
 8003702:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <DFSDM_RegConvStart+0x84>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	e000      	b.n	8003716 <DFSDM_RegConvStart+0x86>
 8003714:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <DFSDM_RegConvStart+0x98>
 8003724:	2202      	movs	r2, #2
 8003726:	e000      	b.n	800372a <DFSDM_RegConvStart+0x9a>
 8003728:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003748:	f7fe ffac 	bl	80026a4 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e099      	b.n	800388c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003778:	e00f      	b.n	800379a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800377a:	f7fe ff93 	bl	80026a4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b05      	cmp	r3, #5
 8003786:	d908      	bls.n	800379a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2203      	movs	r2, #3
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e078      	b.n	800388c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e8      	bne.n	800377a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_DMA_Init+0x158>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4313      	orrs	r3, r2
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	2b04      	cmp	r3, #4
 800382c:	d117      	bne.n	800385e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 faa5 	bl	8003d90 <DMA_CheckFifoParam>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800385a:	2301      	movs	r3, #1
 800385c:	e016      	b.n	800388c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa5c 	bl	8003d24 <DMA_CalcBaseAndBitshift>
 800386c:	4603      	mov	r3, r0
 800386e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	223f      	movs	r2, #63	; 0x3f
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	e010803f 	.word	0xe010803f

08003898 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_DMA_Start_IT+0x26>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e048      	b.n	8003950 <HAL_DMA_Start_IT+0xb8>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d137      	bne.n	8003942 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 f9ee 	bl	8003cc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	223f      	movs	r2, #63	; 0x3f
 80038f2:	409a      	lsls	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0216 	orr.w	r2, r2, #22
 8003906:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003916:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0208 	orr.w	r2, r2, #8
 800392e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e005      	b.n	800394e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800394a:	2302      	movs	r3, #2
 800394c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d004      	beq.n	8003976 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e00c      	b.n	8003990 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2205      	movs	r2, #5
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80039a8:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <HAL_DMA_IRQHandler+0x248>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a8e      	ldr	r2, [pc, #568]	; (8003be8 <HAL_DMA_IRQHandler+0x24c>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	2208      	movs	r2, #8
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01a      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0204 	bic.w	r2, r2, #4
 80039ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	2208      	movs	r2, #8
 80039f6:	409a      	lsls	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	2204      	movs	r2, #4
 8003a44:	409a      	lsls	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d012      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a60:	2204      	movs	r2, #4
 8003a62:	409a      	lsls	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	f043 0204 	orr.w	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a78:	2210      	movs	r2, #16
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d043      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d03c      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a96:	2210      	movs	r2, #16
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d018      	beq.n	8003ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d024      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
 8003aca:	e01f      	b.n	8003b0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01b      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	e016      	b.n	8003b0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d107      	bne.n	8003afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0208 	bic.w	r2, r2, #8
 8003afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	2220      	movs	r2, #32
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 808f 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0310 	and.w	r3, r3, #16
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8087 	beq.w	8003c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b32:	2220      	movs	r2, #32
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b05      	cmp	r3, #5
 8003b44:	d136      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0216 	bic.w	r2, r2, #22
 8003b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d103      	bne.n	8003b76 <HAL_DMA_IRQHandler+0x1da>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0208 	bic.w	r2, r2, #8
 8003b84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8a:	223f      	movs	r2, #63	; 0x3f
 8003b8c:	409a      	lsls	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d07e      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
        }
        return;
 8003bb2:	e079      	b.n	8003ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01d      	beq.n	8003bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10d      	bne.n	8003bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d031      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
 8003be0:	e02c      	b.n	8003c3c <HAL_DMA_IRQHandler+0x2a0>
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000
 8003be8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d023      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
 8003bfc:	e01e      	b.n	8003c3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10f      	bne.n	8003c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0210 	bic.w	r2, r2, #16
 8003c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d032      	beq.n	8003caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d022      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2205      	movs	r2, #5
 8003c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d307      	bcc.n	8003c84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f2      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x2cc>
 8003c82:	e000      	b.n	8003c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	4798      	blx	r3
 8003ca6:	e000      	b.n	8003caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ca8:	bf00      	nop
    }
  }
}
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ce4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	d108      	bne.n	8003d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d06:	e007      	b.n	8003d18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	3b10      	subs	r3, #16
 8003d34:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <DMA_CalcBaseAndBitshift+0x60>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <DMA_CalcBaseAndBitshift+0x64>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d908      	bls.n	8003d64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <DMA_CalcBaseAndBitshift+0x68>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	; 0x58
 8003d62:	e006      	b.n	8003d72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <DMA_CalcBaseAndBitshift+0x68>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	aaaaaaab 	.word	0xaaaaaaab
 8003d88:	08012fa4 	.word	0x08012fa4
 8003d8c:	fffffc00 	.word	0xfffffc00

08003d90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11f      	bne.n	8003dea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d856      	bhi.n	8003e5e <DMA_CheckFifoParam+0xce>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <DMA_CheckFifoParam+0x28>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003dc9 	.word	0x08003dc9
 8003dbc:	08003ddb 	.word	0x08003ddb
 8003dc0:	08003dc9 	.word	0x08003dc9
 8003dc4:	08003e5f 	.word	0x08003e5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d046      	beq.n	8003e62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd8:	e043      	b.n	8003e62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003de2:	d140      	bne.n	8003e66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de8:	e03d      	b.n	8003e66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	d121      	bne.n	8003e38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d837      	bhi.n	8003e6a <DMA_CheckFifoParam+0xda>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <DMA_CheckFifoParam+0x70>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e17 	.word	0x08003e17
 8003e08:	08003e11 	.word	0x08003e11
 8003e0c:	08003e29 	.word	0x08003e29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      break;
 8003e14:	e030      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d025      	beq.n	8003e6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e26:	e022      	b.n	8003e6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e30:	d11f      	bne.n	8003e72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e36:	e01c      	b.n	8003e72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d903      	bls.n	8003e46 <DMA_CheckFifoParam+0xb6>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d003      	beq.n	8003e4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e44:	e018      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4a:	e015      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5c:	e00b      	b.n	8003e76 <DMA_CheckFifoParam+0xe6>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e00a      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
 8003e64:	e008      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e006      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e004      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6e:	bf00      	nop
 8003e70:	e002      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e72:	bf00      	nop
 8003e74:	e000      	b.n	8003e78 <DMA_CheckFifoParam+0xe8>
      break;
 8003e76:	bf00      	nop
    }
  } 
  
  return status; 
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	; 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e175      	b.n	8004194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8164 	bne.w	800418e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_GPIO_Init+0x56>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d130      	bne.n	8003f40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80be 	beq.w	800418e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	4b66      	ldr	r3, [pc, #408]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401c:	6453      	str	r3, [r2, #68]	; 0x44
 800401e:	4b63      	ldr	r3, [pc, #396]	; (80041ac <HAL_GPIO_Init+0x324>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800402a:	4a61      	ldr	r2, [pc, #388]	; (80041b0 <HAL_GPIO_Init+0x328>)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	089b      	lsrs	r3, r3, #2
 8004030:	3302      	adds	r3, #2
 8004032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004036:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a58      	ldr	r2, [pc, #352]	; (80041b4 <HAL_GPIO_Init+0x32c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d037      	beq.n	80040c6 <HAL_GPIO_Init+0x23e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a57      	ldr	r2, [pc, #348]	; (80041b8 <HAL_GPIO_Init+0x330>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <HAL_GPIO_Init+0x23a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a56      	ldr	r2, [pc, #344]	; (80041bc <HAL_GPIO_Init+0x334>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d02b      	beq.n	80040be <HAL_GPIO_Init+0x236>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a55      	ldr	r2, [pc, #340]	; (80041c0 <HAL_GPIO_Init+0x338>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d025      	beq.n	80040ba <HAL_GPIO_Init+0x232>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a54      	ldr	r2, [pc, #336]	; (80041c4 <HAL_GPIO_Init+0x33c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01f      	beq.n	80040b6 <HAL_GPIO_Init+0x22e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a53      	ldr	r2, [pc, #332]	; (80041c8 <HAL_GPIO_Init+0x340>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d019      	beq.n	80040b2 <HAL_GPIO_Init+0x22a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_GPIO_Init+0x344>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_GPIO_Init+0x226>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a51      	ldr	r2, [pc, #324]	; (80041d0 <HAL_GPIO_Init+0x348>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00d      	beq.n	80040aa <HAL_GPIO_Init+0x222>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a50      	ldr	r2, [pc, #320]	; (80041d4 <HAL_GPIO_Init+0x34c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <HAL_GPIO_Init+0x21e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4f      	ldr	r2, [pc, #316]	; (80041d8 <HAL_GPIO_Init+0x350>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d101      	bne.n	80040a2 <HAL_GPIO_Init+0x21a>
 800409e:	2309      	movs	r3, #9
 80040a0:	e012      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040a2:	230a      	movs	r3, #10
 80040a4:	e010      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040a6:	2308      	movs	r3, #8
 80040a8:	e00e      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040aa:	2307      	movs	r3, #7
 80040ac:	e00c      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040ae:	2306      	movs	r3, #6
 80040b0:	e00a      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040b2:	2305      	movs	r3, #5
 80040b4:	e008      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040b6:	2304      	movs	r3, #4
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040ba:	2303      	movs	r3, #3
 80040bc:	e004      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040be:	2302      	movs	r3, #2
 80040c0:	e002      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_GPIO_Init+0x240>
 80040c6:	2300      	movs	r3, #0
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	f002 0203 	and.w	r2, r2, #3
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	4093      	lsls	r3, r2
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80040d8:	4935      	ldr	r1, [pc, #212]	; (80041b0 <HAL_GPIO_Init+0x328>)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	3302      	adds	r3, #2
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040e6:	4b3d      	ldr	r3, [pc, #244]	; (80041dc <HAL_GPIO_Init+0x354>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	43db      	mvns	r3, r3
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	4013      	ands	r3, r2
 80040f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4313      	orrs	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800410a:	4a34      	ldr	r2, [pc, #208]	; (80041dc <HAL_GPIO_Init+0x354>)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <HAL_GPIO_Init+0x354>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_GPIO_Init+0x354>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800413a:	4b28      	ldr	r3, [pc, #160]	; (80041dc <HAL_GPIO_Init+0x354>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_GPIO_Init+0x354>)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_GPIO_Init+0x354>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	43db      	mvns	r3, r3
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4013      	ands	r3, r2
 8004172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <HAL_GPIO_Init+0x354>)
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	3301      	adds	r3, #1
 8004192:	61fb      	str	r3, [r7, #28]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b0f      	cmp	r3, #15
 8004198:	f67f ae86 	bls.w	8003ea8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3724      	adds	r7, #36	; 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40013800 	.word	0x40013800
 80041b4:	40020000 	.word	0x40020000
 80041b8:	40020400 	.word	0x40020400
 80041bc:	40020800 	.word	0x40020800
 80041c0:	40020c00 	.word	0x40020c00
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40021400 	.word	0x40021400
 80041cc:	40021800 	.word	0x40021800
 80041d0:	40021c00 	.word	0x40021c00
 80041d4:	40022000 	.word	0x40022000
 80041d8:	40022400 	.word	0x40022400
 80041dc:	40013c00 	.word	0x40013c00

080041e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	e001      	b.n	8004202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 800421c:	4613      	mov	r3, r2
 800421e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004220:	787b      	ldrb	r3, [r7, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800422c:	e003      	b.n	8004236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800422e:	887b      	ldrh	r3, [r7, #2]
 8004230:	041a      	lsls	r2, r3, #16
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	619a      	str	r2, [r3, #24]
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	88fb      	ldrh	r3, [r7, #6]
 8004254:	4013      	ands	r3, r2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	4618      	mov	r0, r3
 8004264:	f008 f9aa 	bl	800c5bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40013c00 	.word	0x40013c00

08004274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <HAL_PWREx_EnableOverDrive+0x98>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a22      	ldr	r2, [pc, #136]	; (800430c <HAL_PWREx_EnableOverDrive+0x98>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b20      	ldr	r3, [pc, #128]	; (800430c <HAL_PWREx_EnableOverDrive+0x98>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004296:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a2:	f7fe f9ff 	bl	80026a4 <HAL_GetTick>
 80042a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042a8:	e009      	b.n	80042be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042aa:	f7fe f9fb 	bl	80026a4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042b8:	d901      	bls.n	80042be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e022      	b.n	8004304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d1ee      	bne.n	80042aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042d8:	f7fe f9e4 	bl	80026a4 <HAL_GetTick>
 80042dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042de:	e009      	b.n	80042f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042e0:	f7fe f9e0 	bl	80026a4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ee:	d901      	bls.n	80042f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e007      	b.n	8004304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004300:	d1ee      	bne.n	80042e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	40007000 	.word	0x40007000

08004314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e29b      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 8087 	beq.w	8004446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004338:	4b96      	ldr	r3, [pc, #600]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b04      	cmp	r3, #4
 8004342:	d00c      	beq.n	800435e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004344:	4b93      	ldr	r3, [pc, #588]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	2b08      	cmp	r3, #8
 800434e:	d112      	bne.n	8004376 <HAL_RCC_OscConfig+0x62>
 8004350:	4b90      	ldr	r3, [pc, #576]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435c:	d10b      	bne.n	8004376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435e:	4b8d      	ldr	r3, [pc, #564]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d06c      	beq.n	8004444 <HAL_RCC_OscConfig+0x130>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d168      	bne.n	8004444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e275      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x7a>
 8004380:	4b84      	ldr	r3, [pc, #528]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a83      	ldr	r2, [pc, #524]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	e02e      	b.n	80043ec <HAL_RCC_OscConfig+0xd8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x9c>
 8004396:	4b7f      	ldr	r3, [pc, #508]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7e      	ldr	r2, [pc, #504]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800439c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b7c      	ldr	r3, [pc, #496]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7b      	ldr	r2, [pc, #492]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e01d      	b.n	80043ec <HAL_RCC_OscConfig+0xd8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0xc0>
 80043ba:	4b76      	ldr	r3, [pc, #472]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b73      	ldr	r3, [pc, #460]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a72      	ldr	r2, [pc, #456]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e00b      	b.n	80043ec <HAL_RCC_OscConfig+0xd8>
 80043d4:	4b6f      	ldr	r3, [pc, #444]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a6e      	ldr	r2, [pc, #440]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043de:	6013      	str	r3, [r2, #0]
 80043e0:	4b6c      	ldr	r3, [pc, #432]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a6b      	ldr	r2, [pc, #428]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe f956 	bl	80026a4 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe f952 	bl	80026a4 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e229      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440e:	4b61      	ldr	r3, [pc, #388]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0xe8>
 800441a:	e014      	b.n	8004446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe f942 	bl	80026a4 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fe f93e 	bl	80026a4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	; 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e215      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004436:	4b57      	ldr	r3, [pc, #348]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x110>
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d069      	beq.n	8004526 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004452:	4b50      	ldr	r3, [pc, #320]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b4d      	ldr	r3, [pc, #308]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b08      	cmp	r3, #8
 8004468:	d11c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x190>
 800446a:	4b4a      	ldr	r3, [pc, #296]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d116      	bne.n	80044a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	4b47      	ldr	r3, [pc, #284]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x17a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e1e9      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800448e:	4b41      	ldr	r3, [pc, #260]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	493d      	ldr	r1, [pc, #244]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a2:	e040      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ac:	4b39      	ldr	r3, [pc, #228]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a38      	ldr	r2, [pc, #224]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fe f8f4 	bl	80026a4 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c0:	f7fe f8f0 	bl	80026a4 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1c7      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d2:	4b30      	ldr	r3, [pc, #192]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4929      	ldr	r1, [pc, #164]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
 80044f2:	e018      	b.n	8004526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a26      	ldr	r2, [pc, #152]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe f8d0 	bl	80026a4 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004508:	f7fe f8cc 	bl	80026a4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1a3      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451a:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d038      	beq.n	80045a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d019      	beq.n	800456e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 800453c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453e:	4a15      	ldr	r2, [pc, #84]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fe f8ad 	bl	80026a4 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe f8a9 	bl	80026a4 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e180      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x23a>
 800456c:	e01a      	b.n	80045a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	4a08      	ldr	r2, [pc, #32]	; (8004594 <HAL_RCC_OscConfig+0x280>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457a:	f7fe f893 	bl	80026a4 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004582:	f7fe f88f 	bl	80026a4 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d903      	bls.n	8004598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e166      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
 8004594:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	4b92      	ldr	r3, [pc, #584]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800459a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1ee      	bne.n	8004582 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80a4 	beq.w	80046fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b2:	4b8c      	ldr	r3, [pc, #560]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	4b89      	ldr	r3, [pc, #548]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a88      	ldr	r2, [pc, #544]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b86      	ldr	r3, [pc, #536]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045da:	4b83      	ldr	r3, [pc, #524]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d118      	bne.n	8004618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045e6:	4b80      	ldr	r3, [pc, #512]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7f      	ldr	r2, [pc, #508]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f2:	f7fe f857 	bl	80026a4 <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fa:	f7fe f853 	bl	80026a4 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b64      	cmp	r3, #100	; 0x64
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e12a      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460c:	4b76      	ldr	r3, [pc, #472]	; (80047e8 <HAL_RCC_OscConfig+0x4d4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d106      	bne.n	800462e <HAL_RCC_OscConfig+0x31a>
 8004620:	4b70      	ldr	r3, [pc, #448]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a6f      	ldr	r2, [pc, #444]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	e02d      	b.n	800468a <HAL_RCC_OscConfig+0x376>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10c      	bne.n	8004650 <HAL_RCC_OscConfig+0x33c>
 8004636:	4b6b      	ldr	r3, [pc, #428]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	4a6a      	ldr	r2, [pc, #424]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	f023 0301 	bic.w	r3, r3, #1
 8004640:	6713      	str	r3, [r2, #112]	; 0x70
 8004642:	4b68      	ldr	r3, [pc, #416]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	4a67      	ldr	r2, [pc, #412]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	6713      	str	r3, [r2, #112]	; 0x70
 800464e:	e01c      	b.n	800468a <HAL_RCC_OscConfig+0x376>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b05      	cmp	r3, #5
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_OscConfig+0x35e>
 8004658:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a61      	ldr	r2, [pc, #388]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800465e:	f043 0304 	orr.w	r3, r3, #4
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
 8004664:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a5e      	ldr	r2, [pc, #376]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	e00b      	b.n	800468a <HAL_RCC_OscConfig+0x376>
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a5b      	ldr	r2, [pc, #364]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6713      	str	r3, [r2, #112]	; 0x70
 800467e:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a58      	ldr	r2, [pc, #352]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004684:	f023 0304 	bic.w	r3, r3, #4
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fe f807 	bl	80026a4 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fe f803 	bl	80026a4 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e0d8      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ee      	beq.n	800469a <HAL_RCC_OscConfig+0x386>
 80046bc:	e014      	b.n	80046e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046be:	f7fd fff1 	bl	80026a4 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fd ffed 	bl	80026a4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0c2      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046dc:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ee      	bne.n	80046c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d105      	bne.n	80046fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a3c      	ldr	r2, [pc, #240]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 80ae 	beq.w	8004860 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004704:	4b37      	ldr	r3, [pc, #220]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 030c 	and.w	r3, r3, #12
 800470c:	2b08      	cmp	r3, #8
 800470e:	d06d      	beq.n	80047ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2b02      	cmp	r3, #2
 8004716:	d14b      	bne.n	80047b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd ffbe 	bl	80026a4 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800472c:	f7fd ffba 	bl	80026a4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e091      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473e:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69da      	ldr	r2, [r3, #28]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	3b01      	subs	r3, #1
 8004764:	041b      	lsls	r3, r3, #16
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	061b      	lsls	r3, r3, #24
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	491b      	ldr	r1, [pc, #108]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd ff8c 	bl	80026a4 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004790:	f7fd ff88 	bl	80026a4 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e05f      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x47c>
 80047ae:	e057      	b.n	8004860 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd ff72 	bl	80026a4 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fd ff6e 	bl	80026a4 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e045      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4b0>
 80047e2:	e03d      	b.n	8004860 <HAL_RCC_OscConfig+0x54c>
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047ec:	4b1f      	ldr	r3, [pc, #124]	; (800486c <HAL_RCC_OscConfig+0x558>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d030      	beq.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d129      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d122      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800481c:	4013      	ands	r3, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004822:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004824:	4293      	cmp	r3, r2
 8004826:	d119      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	3b01      	subs	r3, #1
 8004836:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d10f      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0d0      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b6a      	ldr	r3, [pc, #424]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d910      	bls.n	80048b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 020f 	bic.w	r2, r3, #15
 800489e:	4965      	ldr	r1, [pc, #404]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b63      	ldr	r3, [pc, #396]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e0b8      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d020      	beq.n	8004906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e8:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	4a52      	ldr	r2, [pc, #328]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f4:	4b50      	ldr	r3, [pc, #320]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	494d      	ldr	r1, [pc, #308]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d040      	beq.n	8004994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d115      	bne.n	8004952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e07f      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e073      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3d      	ldr	r3, [pc, #244]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e06b      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b39      	ldr	r3, [pc, #228]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4936      	ldr	r1, [pc, #216]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd fe9e 	bl	80026a4 <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fd fe9a 	bl	80026a4 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e053      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d210      	bcs.n	80049c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f023 020f 	bic.w	r2, r3, #15
 80049aa:	4922      	ldr	r1, [pc, #136]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e032      	b.n	8004a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4916      	ldr	r1, [pc, #88]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d009      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	490e      	ldr	r1, [pc, #56]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a02:	f000 f821 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8004a06:	4602      	mov	r2, r0
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	490a      	ldr	r1, [pc, #40]	; (8004a3c <HAL_RCC_ClockConfig+0x1cc>)
 8004a14:	5ccb      	ldrb	r3, [r1, r3]
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_RCC_ClockConfig+0x1d0>)
 8004a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a1e:	4b09      	ldr	r3, [pc, #36]	; (8004a44 <HAL_RCC_ClockConfig+0x1d4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fd fdfa 	bl	800261c <HAL_InitTick>

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023c00 	.word	0x40023c00
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	08012f8c 	.word	0x08012f8c
 8004a40:	20000000 	.word	0x20000000
 8004a44:	20000004 	.word	0x20000004

08004a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a4c:	b090      	sub	sp, #64	; 0x40
 8004a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	637b      	str	r3, [r7, #52]	; 0x34
 8004a54:	2300      	movs	r3, #0
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a58:	2300      	movs	r3, #0
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d00d      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x40>
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	f200 80a1 	bhi.w	8004bb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x34>
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7a:	e09b      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a7c:	4b53      	ldr	r3, [pc, #332]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8004a7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a80:	e09b      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a82:	4b53      	ldr	r3, [pc, #332]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a86:	e098      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a88:	4b4f      	ldr	r3, [pc, #316]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a92:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	627a      	str	r2, [r7, #36]	; 0x24
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ab4:	fb03 f201 	mul.w	r2, r3, r1
 8004ab8:	2300      	movs	r3, #0
 8004aba:	fb00 f303 	mul.w	r3, r0, r3
 8004abe:	4413      	add	r3, r2
 8004ac0:	4a43      	ldr	r2, [pc, #268]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ac2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ac8:	460a      	mov	r2, r1
 8004aca:	62ba      	str	r2, [r7, #40]	; 0x28
 8004acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ace:	4413      	add	r3, r2
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	61fa      	str	r2, [r7, #28]
 8004ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ae2:	f7fb fc65 	bl	80003b0 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4613      	mov	r3, r2
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aee:	e053      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004af0:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	099b      	lsrs	r3, r3, #6
 8004af6:	2200      	movs	r2, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	617a      	str	r2, [r7, #20]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b02:	f04f 0b00 	mov.w	fp, #0
 8004b06:	4652      	mov	r2, sl
 8004b08:	465b      	mov	r3, fp
 8004b0a:	f04f 0000 	mov.w	r0, #0
 8004b0e:	f04f 0100 	mov.w	r1, #0
 8004b12:	0159      	lsls	r1, r3, #5
 8004b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b18:	0150      	lsls	r0, r2, #5
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	ebb2 080a 	subs.w	r8, r2, sl
 8004b22:	eb63 090b 	sbc.w	r9, r3, fp
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	f04f 0300 	mov.w	r3, #0
 8004b2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b3a:	ebb2 0408 	subs.w	r4, r2, r8
 8004b3e:	eb63 0509 	sbc.w	r5, r3, r9
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	00eb      	lsls	r3, r5, #3
 8004b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b50:	00e2      	lsls	r2, r4, #3
 8004b52:	4614      	mov	r4, r2
 8004b54:	461d      	mov	r5, r3
 8004b56:	eb14 030a 	adds.w	r3, r4, sl
 8004b5a:	603b      	str	r3, [r7, #0]
 8004b5c:	eb45 030b 	adc.w	r3, r5, fp
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b6e:	4629      	mov	r1, r5
 8004b70:	028b      	lsls	r3, r1, #10
 8004b72:	4621      	mov	r1, r4
 8004b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b78:	4621      	mov	r1, r4
 8004b7a:	028a      	lsls	r2, r1, #10
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	2200      	movs	r2, #0
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	60fa      	str	r2, [r7, #12]
 8004b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b8c:	f7fb fc10 	bl	80003b0 <__aeabi_uldivmod>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4613      	mov	r3, r2
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bb2:	e002      	b.n	8004bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8004bb6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3740      	adds	r7, #64	; 0x40
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	017d7840 	.word	0x017d7840

08004bd4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000000 	.word	0x20000000

08004bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf0:	f7ff fff0 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	0a9b      	lsrs	r3, r3, #10
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4903      	ldr	r1, [pc, #12]	; (8004c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	08012f9c 	.word	0x08012f9c

08004c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c18:	f7ff ffdc 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	0b5b      	lsrs	r3, r3, #13
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40023800 	.word	0x40023800
 8004c38:	08012f9c 	.word	0x08012f9c

08004c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d012      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c64:	4b69      	ldr	r3, [pc, #420]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a68      	ldr	r2, [pc, #416]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	4b66      	ldr	r3, [pc, #408]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	4964      	ldr	r1, [pc, #400]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d017      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c96:	4b5d      	ldr	r3, [pc, #372]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	4959      	ldr	r1, [pc, #356]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb4:	d101      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d017      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cd2:	4b4e      	ldr	r3, [pc, #312]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	494a      	ldr	r1, [pc, #296]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 808b 	beq.w	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d20:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d2c:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d34:	60bb      	str	r3, [r7, #8]
 8004d36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d38:	4b35      	ldr	r3, [pc, #212]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a34      	ldr	r2, [pc, #208]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fd fcae 	bl	80026a4 <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4c:	f7fd fcaa 	bl	80026a4 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	; 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e38f      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d5e:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d6a:	4b28      	ldr	r3, [pc, #160]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d035      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d02e      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d88:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d92:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a1a      	ldr	r2, [pc, #104]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004db0:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d114      	bne.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbc:	f7fd fc72 	bl	80026a4 <HAL_GetTick>
 8004dc0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc2:	e00a      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc4:	f7fd fc6e 	bl	80026a4 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e351      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0ee      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df2:	d111      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e00:	4b04      	ldr	r3, [pc, #16]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e02:	400b      	ands	r3, r1
 8004e04:	4901      	ldr	r1, [pc, #4]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40007000 	.word	0x40007000
 8004e14:	0ffffcff 	.word	0x0ffffcff
 8004e18:	4bac      	ldr	r3, [pc, #688]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4aab      	ldr	r2, [pc, #684]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e22:	6093      	str	r3, [r2, #8]
 8004e24:	4ba9      	ldr	r3, [pc, #676]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	49a6      	ldr	r1, [pc, #664]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e42:	4ba2      	ldr	r3, [pc, #648]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	4aa0      	ldr	r2, [pc, #640]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e52:	4b9e      	ldr	r3, [pc, #632]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	499b      	ldr	r1, [pc, #620]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e70:	4b96      	ldr	r3, [pc, #600]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7e:	4993      	ldr	r1, [pc, #588]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e92:	4b8e      	ldr	r3, [pc, #568]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea0:	498a      	ldr	r1, [pc, #552]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eb4:	4b85      	ldr	r3, [pc, #532]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec2:	4982      	ldr	r1, [pc, #520]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00a      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ed6:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004edc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4979      	ldr	r1, [pc, #484]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d00a      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ef8:	4b74      	ldr	r3, [pc, #464]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	4971      	ldr	r1, [pc, #452]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00a      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f1a:	4b6c      	ldr	r3, [pc, #432]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f20:	f023 020c 	bic.w	r2, r3, #12
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	4968      	ldr	r1, [pc, #416]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f3c:	4b63      	ldr	r3, [pc, #396]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4a:	4960      	ldr	r1, [pc, #384]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00a      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f5e:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	4957      	ldr	r1, [pc, #348]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f80:	4b52      	ldr	r3, [pc, #328]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	494f      	ldr	r1, [pc, #316]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	4946      	ldr	r1, [pc, #280]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fc4:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	493e      	ldr	r1, [pc, #248]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004fe6:	4b39      	ldr	r3, [pc, #228]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff4:	4935      	ldr	r1, [pc, #212]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005008:	4b30      	ldr	r3, [pc, #192]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005016:	492d      	ldr	r1, [pc, #180]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d011      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005038:	4924      	ldr	r1, [pc, #144]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005048:	d101      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800504a:	2301      	movs	r3, #1
 800504c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005078:	4914      	ldr	r1, [pc, #80]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800509c:	490b      	ldr	r1, [pc, #44]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00f      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c0:	4902      	ldr	r1, [pc, #8]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050c8:	e002      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00b      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050dc:	4b8a      	ldr	r3, [pc, #552]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	4986      	ldr	r1, [pc, #536]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00b      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005100:	4b81      	ldr	r3, [pc, #516]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005106:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005110:	497d      	ldr	r1, [pc, #500]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d006      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80d6 	beq.w	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800512c:	4b76      	ldr	r3, [pc, #472]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a75      	ldr	r2, [pc, #468]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fd fab4 	bl	80026a4 <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005140:	f7fd fab0 	bl	80026a4 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e195      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005152:	4b6d      	ldr	r3, [pc, #436]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11d      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005178:	0c1b      	lsrs	r3, r3, #16
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005180:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005186:	0e1b      	lsrs	r3, r3, #24
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	019a      	lsls	r2, r3, #6
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	431a      	orrs	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	4958      	ldr	r1, [pc, #352]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d02e      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d8:	d129      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051da:	4b4b      	ldr	r3, [pc, #300]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051e8:	4b47      	ldr	r3, [pc, #284]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ee:	0f1b      	lsrs	r3, r3, #28
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	019a      	lsls	r2, r3, #6
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	071b      	lsls	r3, r3, #28
 800520e:	493e      	ldr	r1, [pc, #248]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005216:	4b3c      	ldr	r3, [pc, #240]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800521c:	f023 021f 	bic.w	r2, r3, #31
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005224:	3b01      	subs	r3, #1
 8005226:	4938      	ldr	r1, [pc, #224]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d01d      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800523a:	4b33      	ldr	r3, [pc, #204]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800523c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005240:	0e1b      	lsrs	r3, r3, #24
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005248:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	0f1b      	lsrs	r3, r3, #28
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	019a      	lsls	r2, r3, #6
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	431a      	orrs	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	061b      	lsls	r3, r3, #24
 8005268:	431a      	orrs	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	071b      	lsls	r3, r3, #28
 800526e:	4926      	ldr	r1, [pc, #152]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d011      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	061b      	lsls	r3, r3, #24
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	071b      	lsls	r3, r3, #28
 800529e:	491a      	ldr	r1, [pc, #104]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052a6:	4b18      	ldr	r3, [pc, #96]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a17      	ldr	r2, [pc, #92]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fd f9f7 	bl	80026a4 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052ba:	f7fd f9f3 	bl	80026a4 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b64      	cmp	r3, #100	; 0x64
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e0d8      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	f040 80ce 	bne.w	800547c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a08      	ldr	r2, [pc, #32]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ec:	f7fd f9da 	bl	80026a4 <HAL_GetTick>
 80052f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052f2:	e00b      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052f4:	f7fd f9d6 	bl	80026a4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b64      	cmp	r3, #100	; 0x64
 8005300:	d904      	bls.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0bb      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005306:	bf00      	nop
 8005308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800530c:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005318:	d0ec      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02e      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	2b00      	cmp	r3, #0
 8005340:	d12a      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005342:	4b51      	ldr	r3, [pc, #324]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005350:	4b4d      	ldr	r3, [pc, #308]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	0f1b      	lsrs	r3, r3, #28
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	019a      	lsls	r2, r3, #6
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	041b      	lsls	r3, r3, #16
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	071b      	lsls	r3, r3, #28
 8005376:	4944      	ldr	r1, [pc, #272]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800537e:	4b42      	ldr	r3, [pc, #264]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005384:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	3b01      	subs	r3, #1
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	493d      	ldr	r1, [pc, #244]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d022      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ac:	d11d      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ae:	4b36      	ldr	r3, [pc, #216]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	0e1b      	lsrs	r3, r3, #24
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053bc:	4b32      	ldr	r3, [pc, #200]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	0f1b      	lsrs	r3, r3, #28
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	019a      	lsls	r2, r3, #6
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	431a      	orrs	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	071b      	lsls	r3, r3, #28
 80053e2:	4929      	ldr	r1, [pc, #164]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d028      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053f6:	4b24      	ldr	r3, [pc, #144]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005404:	4b20      	ldr	r3, [pc, #128]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	019a      	lsls	r2, r3, #6
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	041b      	lsls	r3, r3, #16
 800541c:	431a      	orrs	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	4917      	ldr	r1, [pc, #92]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	4911      	ldr	r1, [pc, #68]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005448:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0e      	ldr	r2, [pc, #56]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fd f926 	bl	80026a4 <HAL_GetTick>
 8005458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800545c:	f7fd f922 	bl	80026a4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e007      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800547a:	d1ef      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800

0800548c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054aa:	f040 80a3 	bne.w	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80054ae:	4ba8      	ldr	r3, [pc, #672]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80054bc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054c4:	f000 808a 	beq.w	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054ce:	f200 8093 	bhi.w	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054d8:	d07d      	beq.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054e0:	f200 808a 	bhi.w	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054f0:	d039      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80054f2:	e081      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054f4:	4b96      	ldr	r3, [pc, #600]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d108      	bne.n	8005512 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005500:	4b93      	ldr	r3, [pc, #588]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005508:	4a92      	ldr	r2, [pc, #584]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e007      	b.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005512:	4b8f      	ldr	r3, [pc, #572]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800551a:	4a8f      	ldr	r2, [pc, #572]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005522:	4b8b      	ldr	r3, [pc, #556]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005528:	0e1b      	lsrs	r3, r3, #24
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005530:	4b87      	ldr	r3, [pc, #540]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	fb03 f202 	mul.w	r2, r3, r2
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800554a:	4b81      	ldr	r3, [pc, #516]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800554c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	3301      	adds	r3, #1
 8005558:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	617b      	str	r3, [r7, #20]
        break;
 8005564:	e049      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005566:	4b7a      	ldr	r3, [pc, #488]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005572:	4b77      	ldr	r3, [pc, #476]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800557a:	4a76      	ldr	r2, [pc, #472]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e007      	b.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005584:	4b72      	ldr	r3, [pc, #456]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	4a72      	ldr	r2, [pc, #456]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005594:	4b6e      	ldr	r3, [pc, #440]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80055a2:	4b6b      	ldr	r3, [pc, #428]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a8:	099b      	lsrs	r3, r3, #6
 80055aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	fb03 f202 	mul.w	r2, r3, r2
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ba:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80055bc:	4b64      	ldr	r3, [pc, #400]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	617b      	str	r3, [r7, #20]
        break;
 80055d4:	e011      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 80055d6:	4b61      	ldr	r3, [pc, #388]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80055d8:	617b      	str	r3, [r7, #20]
        break;
 80055da:	e00e      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055dc:	4b5c      	ldr	r3, [pc, #368]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80055e8:	4b5a      	ldr	r3, [pc, #360]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055ea:	617b      	str	r3, [r7, #20]
        break;
 80055ec:	e005      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 80055ee:	4b5a      	ldr	r3, [pc, #360]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055f0:	617b      	str	r3, [r7, #20]
        break;
 80055f2:	e002      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80055f4:	bf00      	nop
 80055f6:	e000      	b.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80055f8:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005600:	f040 80a3 	bne.w	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005604:	4b52      	ldr	r3, [pc, #328]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005612:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800561a:	f000 808a 	beq.w	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005624:	f200 809c 	bhi.w	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800562e:	d07d      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005636:	f200 8093 	bhi.w	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005646:	d039      	beq.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005648:	e08a      	b.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800564a:	4b41      	ldr	r3, [pc, #260]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d108      	bne.n	8005668 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005656:	4b3e      	ldr	r3, [pc, #248]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800565e:	4a3d      	ldr	r2, [pc, #244]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005660:	fbb2 f3f3 	udiv	r3, r2, r3
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	e007      	b.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005668:	4b39      	ldr	r3, [pc, #228]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005670:	4a39      	ldr	r2, [pc, #228]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005678:	4b35      	ldr	r3, [pc, #212]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005686:	4b32      	ldr	r3, [pc, #200]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	099b      	lsrs	r3, r3, #6
 800568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	fb03 f202 	mul.w	r2, r3, r2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80056a0:	4b2b      	ldr	r3, [pc, #172]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a6:	0a1b      	lsrs	r3, r3, #8
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	3301      	adds	r3, #1
 80056ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
        break;
 80056ba:	e052      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80056bc:	4b24      	ldr	r3, [pc, #144]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d108      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d0:	4a20      	ldr	r2, [pc, #128]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	e007      	b.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80056ea:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f0:	0e1b      	lsrs	r3, r3, #24
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fe:	099b      	lsrs	r3, r3, #6
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	fb03 f202 	mul.w	r2, r3, r2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
        break;
 800572a:	e01a      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800572e:	617b      	str	r3, [r7, #20]
        break;
 8005730:	e017      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005732:	4b07      	ldr	r3, [pc, #28]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d102      	bne.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005740:	617b      	str	r3, [r7, #20]
        break;
 8005742:	e00e      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005746:	617b      	str	r3, [r7, #20]
        break;
 8005748:	e00b      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800574a:	bf00      	nop
 800574c:	e009      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800574e:	bf00      	nop
 8005750:	40023800 	.word	0x40023800
 8005754:	00f42400 	.word	0x00f42400
 8005758:	017d7840 	.word	0x017d7840
 800575c:	00bb8000 	.word	0x00bb8000
        break;
 8005760:	bf00      	nop

  return frequency;
 8005762:	697b      	ldr	r3, [r7, #20]
}
 8005764:	4618      	mov	r0, r3
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e071      	b.n	800586a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	7f5b      	ldrb	r3, [r3, #29]
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb fe06 	bl	80013a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d053      	beq.n	8005858 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	22ca      	movs	r2, #202	; 0xca
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2253      	movs	r2, #83	; 0x53
 80057be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 fa4d 	bl	8005c60 <RTC_EnterInitMode>
 80057c6:	4603      	mov	r3, r0
 80057c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d12a      	bne.n	8005826 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6899      	ldr	r1, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b26      	ldr	r3, [pc, #152]	; (8005874 <HAL_RTC_Init+0x104>)
 80057dc:	400b      	ands	r3, r1
 80057de:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6899      	ldr	r1, [r3, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	68d2      	ldr	r2, [r2, #12]
 8005806:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6919      	ldr	r1, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	041a      	lsls	r2, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa56 	bl	8005cce <RTC_ExitInitMode>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d110      	bne.n	800584e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0208 	bic.w	r2, r2, #8
 800583a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	22ff      	movs	r2, #255	; 0xff
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
 8005856:	e001      	b.n	800585c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005868:	7bfb      	ldrb	r3, [r7, #15]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	ff8fffbf 	.word	0xff8fffbf

08005878 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	7f1b      	ldrb	r3, [r3, #28]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_RTC_SetTime+0x1c>
 8005890:	2302      	movs	r3, #2
 8005892:	e085      	b.n	80059a0 <HAL_RTC_SetTime+0x128>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2201      	movs	r2, #1
 8005898:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2202      	movs	r2, #2
 800589e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d126      	bne.n	80058f4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fa2a 	bl	8005d18 <RTC_ByteToBcd2>
 80058c4:	4603      	mov	r3, r0
 80058c6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fa23 	bl	8005d18 <RTC_ByteToBcd2>
 80058d2:	4603      	mov	r3, r0
 80058d4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058d6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	789b      	ldrb	r3, [r3, #2]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fa1b 	bl	8005d18 <RTC_ByteToBcd2>
 80058e2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058e4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	e018      	b.n	8005926 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005914:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800591a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	22ca      	movs	r2, #202	; 0xca
 800592c:	625a      	str	r2, [r3, #36]	; 0x24
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2253      	movs	r2, #83	; 0x53
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f992 	bl	8005c60 <RTC_EnterInitMode>
 800593c:	4603      	mov	r3, r0
 800593e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005940:	7cfb      	ldrb	r3, [r7, #19]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d11e      	bne.n	8005984 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	6979      	ldr	r1, [r7, #20]
 800594c:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <HAL_RTC_SetTime+0x130>)
 800594e:	400b      	ands	r3, r1
 8005950:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005960:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	6899      	ldr	r1, [r3, #8]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	431a      	orrs	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f9a7 	bl	8005cce <RTC_ExitInitMode>
 8005980:	4603      	mov	r3, r0
 8005982:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	771a      	strb	r2, [r3, #28]

  return status;
 800599e:	7cfb      	ldrb	r3, [r7, #19]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd90      	pop	{r4, r7, pc}
 80059a8:	007f7f7f 	.word	0x007f7f7f

080059ac <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_RTC_GetTime+0xb8>)
 80059dc:	4013      	ands	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	0c1b      	lsrs	r3, r3, #16
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	0d9b      	lsrs	r3, r3, #22
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11a      	bne.n	8005a5a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f993 	bl	8005d54 <RTC_Bcd2ToByte>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461a      	mov	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	785b      	ldrb	r3, [r3, #1]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f98a 	bl	8005d54 <RTC_Bcd2ToByte>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	789b      	ldrb	r3, [r3, #2]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f981 	bl	8005d54 <RTC_Bcd2ToByte>
 8005a52:	4603      	mov	r3, r0
 8005a54:	461a      	mov	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	007f7f7f 	.word	0x007f7f7f

08005a68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	7f1b      	ldrb	r3, [r3, #28]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_RTC_SetDate+0x1c>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e06f      	b.n	8005b64 <HAL_RTC_SetDate+0xfc>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2202      	movs	r2, #2
 8005a8e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10e      	bne.n	8005ab4 <HAL_RTC_SetDate+0x4c>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	f023 0310 	bic.w	r3, r3, #16
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	330a      	adds	r3, #10
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11c      	bne.n	8005af4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	78db      	ldrb	r3, [r3, #3]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f92a 	bl	8005d18 <RTC_ByteToBcd2>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f923 	bl	8005d18 <RTC_ByteToBcd2>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ad6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	789b      	ldrb	r3, [r3, #2]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f91b 	bl	8005d18 <RTC_ByteToBcd2>
 8005ae2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ae4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e00e      	b.n	8005b12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	78db      	ldrb	r3, [r3, #3]
 8005af8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b00:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	22ca      	movs	r2, #202	; 0xca
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2253      	movs	r2, #83	; 0x53
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 f89c 	bl	8005c60 <RTC_EnterInitMode>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b2c:	7cfb      	ldrb	r3, [r7, #19]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10a      	bne.n	8005b48 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_RTC_SetDate+0x104>)
 8005b3a:	400b      	ands	r3, r1
 8005b3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f8c5 	bl	8005cce <RTC_ExitInitMode>
 8005b44:	4603      	mov	r3, r0
 8005b46:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	22ff      	movs	r2, #255	; 0xff
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	771a      	strb	r2, [r3, #28]

  return status;
 8005b62:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	371c      	adds	r7, #28
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd90      	pop	{r4, r7, pc}
 8005b6c:	00ffff3f 	.word	0x00ffff3f

08005b70 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4b21      	ldr	r3, [pc, #132]	; (8005c0c <HAL_RTC_GetDate+0x9c>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	0c1b      	lsrs	r3, r3, #16
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 031f 	and.w	r3, r3, #31
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	0b5b      	lsrs	r3, r3, #13
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11a      	bne.n	8005c00 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	78db      	ldrb	r3, [r3, #3]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f8c0 	bl	8005d54 <RTC_Bcd2ToByte>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 f8b7 	bl	8005d54 <RTC_Bcd2ToByte>
 8005be6:	4603      	mov	r3, r0
 8005be8:	461a      	mov	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	789b      	ldrb	r3, [r3, #2]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f8ae 	bl	8005d54 <RTC_Bcd2ToByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	00ffff3f 	.word	0x00ffff3f

08005c10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c2c:	f7fc fd3a 	bl	80026a4 <HAL_GetTick>
 8005c30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c32:	e009      	b.n	8005c48 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c34:	f7fc fd36 	bl	80026a4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c42:	d901      	bls.n	8005c48 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e007      	b.n	8005c58 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ee      	beq.n	8005c34 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d122      	bne.n	8005cc4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c8e:	f7fc fd09 	bl	80026a4 <HAL_GetTick>
 8005c92:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c94:	e00c      	b.n	8005cb0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c96:	f7fc fd05 	bl	80026a4 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca4:	d904      	bls.n	8005cb0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <RTC_EnterInitMode+0x64>
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d1e8      	bne.n	8005c96 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ce8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ff89 	bl	8005c10 <HAL_RTC_WaitForSynchro>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2204      	movs	r2, #4
 8005d08:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d26:	e005      	b.n	8005d34 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	3b0a      	subs	r3, #10
 8005d32:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d8f6      	bhi.n	8005d28 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b2db      	uxtb	r3, r3
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	005b      	lsls	r3, r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	b2db      	uxtb	r3, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3350      	adds	r3, #80	; 0x50
 8005da6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4413      	add	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
}
 8005db8:	bf00      	nop
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3350      	adds	r3, #80	; 0x50
 8005dd8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e156      	b.n	80060c0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb fb4a 	bl	80014c0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f95b 	bl	80060f0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d00c      	beq.n	8005e5c <HAL_SAI_Init+0x68>
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d80d      	bhi.n	8005e62 <HAL_SAI_Init+0x6e>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SAI_Init+0x5c>
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d003      	beq.n	8005e56 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005e4e:	e008      	b.n	8005e62 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
      break;
 8005e54:	e006      	b.n	8005e64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005e56:	2310      	movs	r3, #16
 8005e58:	61fb      	str	r3, [r7, #28]
      break;
 8005e5a:	e003      	b.n	8005e64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	61fb      	str	r3, [r7, #28]
      break;
 8005e60:	e000      	b.n	8005e64 <HAL_SAI_Init+0x70>
      break;
 8005e62:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d81e      	bhi.n	8005eaa <HAL_SAI_Init+0xb6>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_SAI_Init+0x80>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005e8b 	.word	0x08005e8b
 8005e7c:	08005e93 	.word	0x08005e93
 8005e80:	08005e9b 	.word	0x08005e9b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
    }
    break;
 8005e88:	e010      	b.n	8005eac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005e90:	e00c      	b.n	8005eac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e96:	617b      	str	r3, [r7, #20]
    }
    break;
 8005e98:	e008      	b.n	8005eac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005e9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e9e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005ea8:	e000      	b.n	8005eac <HAL_SAI_Init+0xb8>
    default:
      break;
 8005eaa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a85      	ldr	r2, [pc, #532]	; (80060c8 <HAL_SAI_Init+0x2d4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_SAI_Init+0xcc>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a84      	ldr	r2, [pc, #528]	; (80060cc <HAL_SAI_Init+0x2d8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d103      	bne.n	8005ec8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005ec0:	4a83      	ldr	r2, [pc, #524]	; (80060d0 <HAL_SAI_Init+0x2dc>)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e002      	b.n	8005ece <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005ec8:	4a82      	ldr	r2, [pc, #520]	; (80060d4 <HAL_SAI_Init+0x2e0>)
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d04c      	beq.n	8005f70 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7a      	ldr	r2, [pc, #488]	; (80060c8 <HAL_SAI_Init+0x2d4>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_SAI_Init+0xfa>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a78      	ldr	r2, [pc, #480]	; (80060cc <HAL_SAI_Init+0x2d8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d104      	bne.n	8005ef8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005eee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005ef2:	f7ff facb 	bl	800548c <HAL_RCCEx_GetPeriphCLKFreq>
 8005ef6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a76      	ldr	r2, [pc, #472]	; (80060d8 <HAL_SAI_Init+0x2e4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_SAI_Init+0x118>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a75      	ldr	r2, [pc, #468]	; (80060dc <HAL_SAI_Init+0x2e8>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d104      	bne.n	8005f16 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005f0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f10:	f7ff fabc 	bl	800548c <HAL_RCCEx_GetPeriphCLKFreq>
 8005f14:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	025b      	lsls	r3, r3, #9
 8005f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f2c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a6b      	ldr	r2, [pc, #428]	; (80060e0 <HAL_SAI_Init+0x2ec>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	08da      	lsrs	r2, r3, #3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	4b68      	ldr	r3, [pc, #416]	; (80060e0 <HAL_SAI_Init+0x2ec>)
 8005f40:	fba3 2301 	umull	r2, r3, r3, r1
 8005f44:	08da      	lsrs	r2, r3, #3
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	1aca      	subs	r2, r1, r3
 8005f50:	2a08      	cmp	r2, #8
 8005f52:	d904      	bls.n	8005f5e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d104      	bne.n	8005f70 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	085a      	lsrs	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <HAL_SAI_Init+0x18c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d109      	bne.n	8005f94 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_SAI_Init+0x198>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	e001      	b.n	8005f90 <HAL_SAI_Init+0x19c>
 8005f8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	e008      	b.n	8005fa6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d102      	bne.n	8005fa2 <HAL_SAI_Init+0x1ae>
 8005f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa0:	e000      	b.n	8005fa4 <HAL_SAI_Init+0x1b0>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6819      	ldr	r1, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	4b4c      	ldr	r3, [pc, #304]	; (80060e4 <HAL_SAI_Init+0x2f0>)
 8005fb2:	400b      	ands	r3, r1
 8005fb4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6819      	ldr	r1, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005fca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005fde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005fea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	051b      	lsls	r3, r3, #20
 8005ff2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b38      	ldr	r3, [pc, #224]	; (80060e8 <HAL_SAI_Init+0x2f4>)
 8006008:	400b      	ands	r3, r1
 800600a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6859      	ldr	r1, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6899      	ldr	r1, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <HAL_SAI_Init+0x2f8>)
 8006036:	400b      	ands	r3, r1
 8006038:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6899      	ldr	r1, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800604a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006050:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8006056:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	3b01      	subs	r3, #1
 800605e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8006060:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68d9      	ldr	r1, [r3, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006078:	400b      	ands	r3, r1
 800607a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68d9      	ldr	r1, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006098:	3b01      	subs	r3, #1
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3720      	adds	r7, #32
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40015804 	.word	0x40015804
 80060cc:	40015824 	.word	0x40015824
 80060d0:	40015800 	.word	0x40015800
 80060d4:	40015c00 	.word	0x40015c00
 80060d8:	40015c04 	.word	0x40015c04
 80060dc:	40015c24 	.word	0x40015c24
 80060e0:	cccccccd 	.word	0xcccccccd
 80060e4:	ff05c010 	.word	0xff05c010
 80060e8:	ffff1ff0 	.word	0xffff1ff0
 80060ec:	fff88000 	.word	0xfff88000

080060f0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <SAI_Disable+0x68>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a17      	ldr	r2, [pc, #92]	; (800615c <SAI_Disable+0x6c>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0b1b      	lsrs	r3, r3, #12
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800611a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	1e5a      	subs	r2, r3, #1
 8006120:	60fa      	str	r2, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	72fb      	strb	r3, [r7, #11]
      break;
 800613a:	e006      	b.n	800614a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e8      	bne.n	800611c <SAI_Disable+0x2c>

  return status;
 800614a:	7afb      	ldrb	r3, [r7, #11]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	20000000 	.word	0x20000000
 800615c:	95cbec1b 	.word	0x95cbec1b

08006160 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e022      	b.n	80061b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7fb fa67 	bl	8001658 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2203      	movs	r2, #3
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f814 	bl	80061c0 <HAL_SD_InitCard>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e00a      	b.n	80061b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061c0:	b5b0      	push	{r4, r5, r7, lr}
 80061c2:	b08e      	sub	sp, #56	; 0x38
 80061c4:	af04      	add	r7, sp, #16
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80061d4:	2300      	movs	r3, #0
 80061d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80061dc:	2376      	movs	r3, #118	; 0x76
 80061de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681d      	ldr	r5, [r3, #0]
 80061e4:	466c      	mov	r4, sp
 80061e6:	f107 0314 	add.w	r3, r7, #20
 80061ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061f2:	f107 0308 	add.w	r3, r7, #8
 80061f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061f8:	4628      	mov	r0, r5
 80061fa:	f001 ff45 	bl	8008088 <SDMMC_Init>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e059      	b.n	80062c4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800621e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f001 ff79 	bl	800811c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006238:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800623a:	2002      	movs	r0, #2
 800623c:	f7fc fa3e 	bl	80026bc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fff3 	bl	800722c <SD_PowerON>
 8006246:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e02e      	b.n	80062c4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 ff12 	bl	8007090 <SD_InitCard>
 800626c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00b      	beq.n	800628c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e01b      	b.n	80062c4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006294:	4618      	mov	r0, r3
 8006296:	f001 ffd3 	bl	8008240 <SDMMC_CmdBlockLength>
 800629a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00f      	beq.n	80062c2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a09      	ldr	r2, [pc, #36]	; (80062cc <HAL_SD_InitCard+0x10c>)
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3728      	adds	r7, #40	; 0x28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bdb0      	pop	{r4, r5, r7, pc}
 80062cc:	004005ff 	.word	0x004005ff

080062d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d107      	bne.n	80062f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0c3      	b.n	8006480 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	f040 80bc 	bne.w	800647e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800630c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006316:	429a      	cmp	r2, r3
 8006318:	d907      	bls.n	800632a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0aa      	b.n	8006480 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2203      	movs	r2, #3
 800632e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2200      	movs	r2, #0
 8006338:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a4e      	ldr	r2, [pc, #312]	; (8006488 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	4a4d      	ldr	r2, [pc, #308]	; (800648c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006358:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2200      	movs	r2, #0
 8006360:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3380      	adds	r3, #128	; 0x80
 8006390:	4619      	mov	r1, r3
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	025b      	lsls	r3, r3, #9
 8006398:	089b      	lsrs	r3, r3, #2
 800639a:	f7fd fa7d 	bl	8003898 <HAL_DMA_Start_IT>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d017      	beq.n	80063d4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80063b2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a35      	ldr	r2, [pc, #212]	; (8006490 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e055      	b.n	8006480 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0208 	orr.w	r2, r2, #8
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d002      	beq.n	80063f2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	025b      	lsls	r3, r3, #9
 80063f0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	025b      	lsls	r3, r3, #9
 80063fc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80063fe:	2390      	movs	r3, #144	; 0x90
 8006400:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006402:	2302      	movs	r3, #2
 8006404:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006406:	2300      	movs	r3, #0
 8006408:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800640a:	2301      	movs	r3, #1
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f107 0210 	add.w	r2, r7, #16
 8006416:	4611      	mov	r1, r2
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fee5 	bl	80081e8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d90a      	bls.n	800643a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2282      	movs	r2, #130	; 0x82
 8006428:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006430:	4618      	mov	r0, r3
 8006432:	f001 ff49 	bl	80082c8 <SDMMC_CmdReadMultiBlock>
 8006436:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006438:	e009      	b.n	800644e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2281      	movs	r2, #129	; 0x81
 800643e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006446:	4618      	mov	r0, r3
 8006448:	f001 ff1c 	bl	8008284 <SDMMC_CmdReadSingleBlock>
 800644c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a0d      	ldr	r2, [pc, #52]	; (8006490 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800645a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	431a      	orrs	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e002      	b.n	8006480 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3730      	adds	r7, #48	; 0x30
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	08006e9f 	.word	0x08006e9f
 800648c:	08006f11 	.word	0x08006f11
 8006490:	004005ff 	.word	0x004005ff

08006494 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08c      	sub	sp, #48	; 0x30
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d107      	bne.n	80064bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0c6      	b.n	800664a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f040 80bf 	bne.w	8006648 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064da:	429a      	cmp	r2, r3
 80064dc:	d907      	bls.n	80064ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e0ad      	b.n	800664a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2203      	movs	r2, #3
 80064f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2200      	movs	r2, #0
 80064fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 021a 	orr.w	r2, r2, #26
 800650c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	4a50      	ldr	r2, [pc, #320]	; (8006654 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	4a4f      	ldr	r2, [pc, #316]	; (8006658 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800651c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006522:	2200      	movs	r2, #0
 8006524:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800652a:	2b01      	cmp	r3, #1
 800652c:	d002      	beq.n	8006534 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	025b      	lsls	r3, r3, #9
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d90a      	bls.n	8006550 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	22a0      	movs	r2, #160	; 0xa0
 800653e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006546:	4618      	mov	r0, r3
 8006548:	f001 ff02 	bl	8008350 <SDMMC_CmdWriteMultiBlock>
 800654c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800654e:	e009      	b.n	8006564 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2290      	movs	r2, #144	; 0x90
 8006554:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fed5 	bl	800830c <SDMMC_CmdWriteSingleBlock>
 8006562:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3b      	ldr	r2, [pc, #236]	; (800665c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	431a      	orrs	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e05c      	b.n	800664a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0208 	orr.w	r2, r2, #8
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a4:	2240      	movs	r2, #64	; 0x40
 80065a6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80065c8:	68b9      	ldr	r1, [r7, #8]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3380      	adds	r3, #128	; 0x80
 80065d0:	461a      	mov	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	025b      	lsls	r3, r3, #9
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	f7fd f95e 	bl	8003898 <HAL_DMA_Start_IT>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d01a      	beq.n	8006618 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 021a 	bic.w	r2, r2, #26
 80065f0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a19      	ldr	r2, [pc, #100]	; (800665c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e018      	b.n	800664a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800661c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	025b      	lsls	r3, r3, #9
 8006622:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006624:	2390      	movs	r3, #144	; 0x90
 8006626:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800662c:	2300      	movs	r3, #0
 800662e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006630:	2301      	movs	r3, #1
 8006632:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f107 0210 	add.w	r2, r7, #16
 800663c:	4611      	mov	r1, r2
 800663e:	4618      	mov	r0, r3
 8006640:	f001 fdd2 	bl	80081e8 <SDMMC_ConfigData>

      return HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	e000      	b.n	800664a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	3730      	adds	r7, #48	; 0x30
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	08006e75 	.word	0x08006e75
 8006658:	08006f11 	.word	0x08006f11
 800665c:	004005ff 	.word	0x004005ff

08006660 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_SD_IRQHandler+0x2e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 ffef 	bl	800766a <SD_Read_IT>
 800668c:	e15a      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 808d 	beq.w	80067b8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b9a      	ldr	r3, [pc, #616]	; (800691c <HAL_SD_IRQHandler+0x2bc>)
 80066b4:	400b      	ands	r3, r1
 80066b6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d039      	beq.n	8006746 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_SD_IRQHandler+0x86>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d011      	beq.n	800670a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fe52 	bl	8008394 <SDMMC_CmdStopTransfer>
 80066f0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d008      	beq.n	800670a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f921 	bl	800694c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006712:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d104      	bne.n	8006736 <HAL_SD_IRQHandler+0xd6>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f002 fac2 	bl	8008cc0 <HAL_SD_RxCpltCallback>
 800673c:	e102      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f002 fab4 	bl	8008cac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006744:	e0fe      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80f9 	beq.w	8006944 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f001 fe17 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006766:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d008      	beq.n	8006780 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f8e6 	bl	800694c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	f040 80dc 	bne.w	8006944 <HAL_SD_IRQHandler+0x2e4>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 80d6 	bne.w	8006944 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0208 	bic.w	r2, r2, #8
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f002 fa7b 	bl	8008cac <HAL_SD_TxCpltCallback>
}
 80067b6:	e0c5      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <HAL_SD_IRQHandler+0x178>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 ff9b 	bl	800770c <SD_Write_IT>
 80067d6:	e0b5      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067de:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80ae 	beq.w	8006944 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	f043 0202 	orr.w	r2, r3, #2
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	f043 0208 	orr.w	r2, r3, #8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	f043 0210 	orr.w	r2, r3, #16
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f240 523a 	movw	r2, #1338	; 0x53a
 8006858:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006868:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4618      	mov	r0, r3
 8006870:	f001 fd90 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006874:	4602      	mov	r2, r0
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	431a      	orrs	r2, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f857 	bl	800694c <HAL_SD_ErrorCallback>
}
 800689e:	e051      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d04c      	beq.n	8006944 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_SD_IRQHandler+0x25e>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d011      	beq.n	80068e2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	4a17      	ldr	r2, [pc, #92]	; (8006920 <HAL_SD_IRQHandler+0x2c0>)
 80068c4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fd f844 	bl	8003958 <HAL_DMA_Abort_IT>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d036      	beq.n	8006944 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fb6a 	bl	8006fb4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80068e0:	e030      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_SD_IRQHandler+0x296>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d018      	beq.n	8006928 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	4a0a      	ldr	r2, [pc, #40]	; (8006924 <HAL_SD_IRQHandler+0x2c4>)
 80068fc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd f828 	bl	8003958 <HAL_DMA_Abort_IT>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d01a      	beq.n	8006944 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fb85 	bl	8007022 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006918:	e014      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
 800691a:	bf00      	nop
 800691c:	ffff3ec5 	.word	0xffff3ec5
 8006920:	08006fb5 	.word	0x08006fb5
 8006924:	08007023 	.word	0x08007023
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 f9ab 	bl	8008c98 <HAL_SD_AbortCallback>
}
 8006942:	e7ff      	b.n	8006944 <HAL_SD_IRQHandler+0x2e4>
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800696e:	0f9b      	lsrs	r3, r3, #30
 8006970:	b2da      	uxtb	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800697a:	0e9b      	lsrs	r3, r3, #26
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	b2db      	uxtb	r3, r3
 8006990:	f003 0303 	and.w	r3, r3, #3
 8006994:	b2da      	uxtb	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699e:	0c1b      	lsrs	r3, r3, #16
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069aa:	0a1b      	lsrs	r3, r3, #8
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c0:	0d1b      	lsrs	r3, r3, #20
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069cc:	0c1b      	lsrs	r3, r3, #16
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069de:	0bdb      	lsrs	r3, r3, #15
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f0:	0b9b      	lsrs	r3, r3, #14
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a02:	0b5b      	lsrs	r3, r3, #13
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a14:	0b1b      	lsrs	r3, r3, #12
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2200      	movs	r2, #0
 8006a26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d163      	bne.n	8006af8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a34:	009a      	lsls	r2, r3, #2
 8006a36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a40:	0f92      	lsrs	r2, r2, #30
 8006a42:	431a      	orrs	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4c:	0edb      	lsrs	r3, r3, #27
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	f003 0307 	and.w	r3, r3, #7
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a5e:	0e1b      	lsrs	r3, r3, #24
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a70:	0d5b      	lsrs	r3, r3, #21
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a82:	0c9b      	lsrs	r3, r3, #18
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a94:	0bdb      	lsrs	r3, r3, #15
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	7e1b      	ldrb	r3, [r3, #24]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	2201      	movs	r2, #1
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006ac2:	fb03 f202 	mul.w	r2, r3, r2
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	7a1b      	ldrb	r3, [r3, #8]
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006ae4:	0a52      	lsrs	r2, r2, #9
 8006ae6:	fb03 f202 	mul.w	r2, r3, r2
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af4:	661a      	str	r2, [r3, #96]	; 0x60
 8006af6:	e031      	b.n	8006b5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d11d      	bne.n	8006b3c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	431a      	orrs	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	029a      	lsls	r2, r3, #10
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60
 8006b3a:	e00f      	b.n	8006b5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a58      	ldr	r2, [pc, #352]	; (8006ca4 <HAL_SD_GetCardCSD+0x344>)
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e09d      	b.n	8006c98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b60:	0b9b      	lsrs	r3, r3, #14
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b72:	09db      	lsrs	r3, r3, #7
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	0fdb      	lsrs	r3, r3, #31
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	0f5b      	lsrs	r3, r3, #29
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 0303 	and.w	r3, r3, #3
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	0e9b      	lsrs	r3, r3, #26
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	f003 0307 	and.w	r3, r3, #7
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	0d9b      	lsrs	r3, r3, #22
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	0d5b      	lsrs	r3, r3, #21
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	0c1b      	lsrs	r3, r3, #16
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	0bdb      	lsrs	r3, r3, #15
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1a:	0b9b      	lsrs	r3, r3, #14
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	0b5b      	lsrs	r3, r3, #13
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	0b1b      	lsrs	r3, r3, #12
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	0a9b      	lsrs	r3, r3, #10
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	0a1b      	lsrs	r3, r3, #8
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	004005ff 	.word	0x004005ff

08006ca8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006d00:	b5b0      	push	{r4, r5, r7, lr}
 8006d02:	b08e      	sub	sp, #56	; 0x38
 8006d04:	af04      	add	r7, sp, #16
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2203      	movs	r2, #3
 8006d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	2b03      	cmp	r3, #3
 8006d1e:	d02e      	beq.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	d106      	bne.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
 8006d34:	e029      	b.n	8006d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3c:	d10a      	bne.n	8006d54 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb2a 	bl	8007398 <SD_WideBus_Enable>
 8006d44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
 8006d52:	e01a      	b.n	8006d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fb67 	bl	800742e <SD_WideBus_Disable>
 8006d60:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d6e:	e00c      	b.n	8006d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d7c:	e005      	b.n	8006d8a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a26      	ldr	r2, [pc, #152]	; (8006e30 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006da8:	e01f      	b.n	8006dea <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681d      	ldr	r5, [r3, #0]
 8006dd0:	466c      	mov	r4, sp
 8006dd2:	f107 0314 	add.w	r3, r7, #20
 8006dd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006dde:	f107 0308 	add.w	r3, r7, #8
 8006de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006de4:	4628      	mov	r0, r5
 8006de6:	f001 f94f 	bl	8008088 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fa24 	bl	8008240 <SDMMC_CmdBlockLength>
 8006df8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00c      	beq.n	8006e1a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006e22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3728      	adds	r7, #40	; 0x28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	004005ff 	.word	0x004005ff

08006e34 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e40:	f107 030c 	add.w	r3, r7, #12
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa7e 	bl	8007348 <SD_SendStatus>
 8006e4c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	0a5b      	lsrs	r3, r3, #9
 8006e64:	f003 030f 	and.w	r3, r3, #15
 8006e68:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e6a:	693b      	ldr	r3, [r7, #16]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e90:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006e92:	bf00      	nop
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	2b82      	cmp	r3, #130	; 0x82
 8006eb2:	d111      	bne.n	8006ed8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 fa6b 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006ebe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d008      	beq.n	8006ed8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f7ff fd3a 	bl	800694c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0208 	bic.w	r2, r2, #8
 8006ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f001 fedd 	bl	8008cc0 <HAL_SD_RxCpltCallback>
#endif
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fc fec6 	bl	8003cb0 <HAL_DMA_GetError>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d03e      	beq.n	8006fa8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f30:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f38:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d002      	beq.n	8006f46 <SD_DMAError+0x36>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d12d      	bne.n	8006fa2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a19      	ldr	r2, [pc, #100]	; (8006fb0 <SD_DMAError+0xa0>)
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006f6a:	6978      	ldr	r0, [r7, #20]
 8006f6c:	f7ff ff62 	bl	8006e34 <HAL_SD_GetCardState>
 8006f70:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b06      	cmp	r3, #6
 8006f76:	d002      	beq.n	8006f7e <SD_DMAError+0x6e>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d10a      	bne.n	8006f94 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fa06 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f7ff fcd2 	bl	800694c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	004005ff 	.word	0x004005ff

08006fb4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff ff31 	bl	8006e34 <HAL_SD_GetCardState>
 8006fd2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b06      	cmp	r3, #6
 8006fe6:	d002      	beq.n	8006fee <SD_DMATxAbort+0x3a>
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d10a      	bne.n	8007004 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f9ce 	bl	8008394 <SDMMC_CmdStopTransfer>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	431a      	orrs	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f001 fe43 	bl	8008c98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007012:	e002      	b.n	800701a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff fc99 	bl	800694c <HAL_SD_ErrorCallback>
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f240 523a 	movw	r2, #1338	; 0x53a
 8007038:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fefa 	bl	8006e34 <HAL_SD_GetCardState>
 8007040:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b06      	cmp	r3, #6
 8007054:	d002      	beq.n	800705c <SD_DMARxAbort+0x3a>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b05      	cmp	r3, #5
 800705a:	d10a      	bne.n	8007072 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f997 	bl	8008394 <SDMMC_CmdStopTransfer>
 8007066:	4602      	mov	r2, r0
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	431a      	orrs	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f001 fe0c 	bl	8008c98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007080:	e002      	b.n	8007088 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fc62 	bl	800694c <HAL_SD_ErrorCallback>
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007090:	b5b0      	push	{r4, r5, r7, lr}
 8007092:	b094      	sub	sp, #80	; 0x50
 8007094:	af04      	add	r7, sp, #16
 8007096:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007098:	2301      	movs	r3, #1
 800709a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f849 	bl	8008138 <SDMMC_GetPowerState>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070b0:	e0b8      	b.n	8007224 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d02f      	beq.n	800711a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f001 fa73 	bl	80085aa <SDMMC_CmdSendCID>
 80070c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80070c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80070cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ce:	e0a9      	b.n	8007224 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f001 f873 	bl	80081c2 <SDMMC_GetResponse>
 80070dc:	4602      	mov	r2, r0
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2104      	movs	r1, #4
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f86a 	bl	80081c2 <SDMMC_GetResponse>
 80070ee:	4602      	mov	r2, r0
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2108      	movs	r1, #8
 80070fa:	4618      	mov	r0, r3
 80070fc:	f001 f861 	bl	80081c2 <SDMMC_GetResponse>
 8007100:	4602      	mov	r2, r0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	210c      	movs	r1, #12
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f858 	bl	80081c2 <SDMMC_GetResponse>
 8007112:	4602      	mov	r2, r0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711e:	2b03      	cmp	r3, #3
 8007120:	d00d      	beq.n	800713e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f107 020e 	add.w	r2, r7, #14
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f001 fa79 	bl	8008624 <SDMMC_CmdSetRelAdd>
 8007132:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <SD_InitCard+0xae>
    {
      return errorstate;
 800713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800713c:	e072      	b.n	8007224 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007142:	2b03      	cmp	r3, #3
 8007144:	d036      	beq.n	80071b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007146:	89fb      	ldrh	r3, [r7, #14]
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f001 fa43 	bl	80085e6 <SDMMC_CmdSendCSD>
 8007160:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716a:	e05b      	b.n	8007224 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f001 f825 	bl	80081c2 <SDMMC_GetResponse>
 8007178:	4602      	mov	r2, r0
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2104      	movs	r1, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f81c 	bl	80081c2 <SDMMC_GetResponse>
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2108      	movs	r1, #8
 8007196:	4618      	mov	r0, r3
 8007198:	f001 f813 	bl	80081c2 <SDMMC_GetResponse>
 800719c:	4602      	mov	r2, r0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	210c      	movs	r1, #12
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 f80a 	bl	80081c2 <SDMMC_GetResponse>
 80071ae:	4602      	mov	r2, r0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2104      	movs	r1, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 f801 	bl	80081c2 <SDMMC_GetResponse>
 80071c0:	4603      	mov	r3, r0
 80071c2:	0d1a      	lsrs	r2, r3, #20
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80071c8:	f107 0310 	add.w	r3, r7, #16
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fbc6 	bl	8006960 <HAL_SD_GetCardCSD>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071de:	e021      	b.n	8007224 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6819      	ldr	r1, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	041b      	lsls	r3, r3, #16
 80071ea:	2200      	movs	r2, #0
 80071ec:	461c      	mov	r4, r3
 80071ee:	4615      	mov	r5, r2
 80071f0:	4622      	mov	r2, r4
 80071f2:	462b      	mov	r3, r5
 80071f4:	4608      	mov	r0, r1
 80071f6:	f001 f8ef 	bl	80083d8 <SDMMC_CmdSelDesel>
 80071fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80071fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <SD_InitCard+0x176>
  {
    return errorstate;
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007204:	e00e      	b.n	8007224 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681d      	ldr	r5, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	466c      	mov	r4, sp
 800720e:	f103 0210 	add.w	r2, r3, #16
 8007212:	ca07      	ldmia	r2, {r0, r1, r2}
 8007214:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007218:	3304      	adds	r3, #4
 800721a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800721c:	4628      	mov	r0, r5
 800721e:	f000 ff33 	bl	8008088 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3740      	adds	r7, #64	; 0x40
 8007228:	46bd      	mov	sp, r7
 800722a:	bdb0      	pop	{r4, r5, r7, pc}

0800722c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	2300      	movs	r3, #0
 800723e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f001 f8ea 	bl	800841e <SDMMC_CmdGoIdleState>
 800724a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	e072      	b.n	800733c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f001 f8fd 	bl	800845a <SDMMC_CmdOperCond>
 8007260:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00d      	beq.n	8007284 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f8d3 	bl	800841e <SDMMC_CmdGoIdleState>
 8007278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	e05b      	b.n	800733c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728e:	2b01      	cmp	r3, #1
 8007290:	d137      	bne.n	8007302 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2100      	movs	r1, #0
 8007298:	4618      	mov	r0, r3
 800729a:	f001 f8fd 	bl	8008498 <SDMMC_CmdAppCommand>
 800729e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d02d      	beq.n	8007302 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072aa:	e047      	b.n	800733c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 f8f0 	bl	8008498 <SDMMC_CmdAppCommand>
 80072b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	e03b      	b.n	800733c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	491e      	ldr	r1, [pc, #120]	; (8007344 <SD_PowerON+0x118>)
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 f906 	bl	80084dc <SDMMC_CmdAppOperCommand>
 80072d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072dc:	e02e      	b.n	800733c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2100      	movs	r1, #0
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 ff6c 	bl	80081c2 <SDMMC_GetResponse>
 80072ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	0fdb      	lsrs	r3, r3, #31
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <SD_PowerON+0xcc>
 80072f4:	2301      	movs	r3, #1
 80072f6:	e000      	b.n	80072fa <SD_PowerON+0xce>
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]

    count++;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	3301      	adds	r3, #1
 8007300:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007308:	4293      	cmp	r3, r2
 800730a:	d802      	bhi.n	8007312 <SD_PowerON+0xe6>
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0cc      	beq.n	80072ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007318:	4293      	cmp	r3, r2
 800731a:	d902      	bls.n	8007322 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800731c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007320:	e00c      	b.n	800733c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	645a      	str	r2, [r3, #68]	; 0x44
 8007332:	e002      	b.n	800733a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	c1100000 	.word	0xc1100000

08007348 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800735c:	e018      	b.n	8007390 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f001 f97b 	bl	8008666 <SDMMC_CmdSendStatus>
 8007370:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	e009      	b.n	8007390 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2100      	movs	r1, #0
 8007382:	4618      	mov	r0, r3
 8007384:	f000 ff1d 	bl	80081c2 <SDMMC_GetResponse>
 8007388:	4602      	mov	r2, r0
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2100      	movs	r1, #0
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ff07 	bl	80081c2 <SDMMC_GetResponse>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073be:	d102      	bne.n	80073c6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073c4:	e02f      	b.n	8007426 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f879 	bl	80074c4 <SD_FindSCR>
 80073d2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	e023      	b.n	8007426 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01c      	beq.n	8007422 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f0:	041b      	lsls	r3, r3, #16
 80073f2:	4619      	mov	r1, r3
 80073f4:	4610      	mov	r0, r2
 80073f6:	f001 f84f 	bl	8008498 <SDMMC_CmdAppCommand>
 80073fa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	e00f      	b.n	8007426 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2102      	movs	r1, #2
 800740c:	4618      	mov	r0, r3
 800740e:	f001 f889 	bl	8008524 <SDMMC_CmdBusWidth>
 8007412:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	e003      	b.n	8007426 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800741e:	2300      	movs	r3, #0
 8007420:	e001      	b.n	8007426 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007422:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2100      	movs	r1, #0
 8007444:	4618      	mov	r0, r3
 8007446:	f000 febc 	bl	80081c2 <SDMMC_GetResponse>
 800744a:	4603      	mov	r3, r0
 800744c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007450:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007454:	d102      	bne.n	800745c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800745a:	e02f      	b.n	80074bc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800745c:	f107 030c 	add.w	r3, r7, #12
 8007460:	4619      	mov	r1, r3
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f82e 	bl	80074c4 <SD_FindSCR>
 8007468:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d001      	beq.n	8007474 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	e023      	b.n	80074bc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d01c      	beq.n	80074b8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	4619      	mov	r1, r3
 800748a:	4610      	mov	r0, r2
 800748c:	f001 f804 	bl	8008498 <SDMMC_CmdAppCommand>
 8007490:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e00f      	b.n	80074bc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 f83e 	bl	8008524 <SDMMC_CmdBusWidth>
 80074a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	e003      	b.n	80074bc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e001      	b.n	80074bc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b08f      	sub	sp, #60	; 0x3c
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80074ce:	f7fb f8e9 	bl	80026a4 <HAL_GetTick>
 80074d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80074d8:	2300      	movs	r3, #0
 80074da:	60bb      	str	r3, [r7, #8]
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2108      	movs	r1, #8
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fea8 	bl	8008240 <SDMMC_CmdBlockLength>
 80074f0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80074f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <SD_FindSCR+0x38>
  {
    return errorstate;
 80074f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fa:	e0b2      	b.n	8007662 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	4619      	mov	r1, r3
 8007508:	4610      	mov	r0, r2
 800750a:	f000 ffc5 	bl	8008498 <SDMMC_CmdAppCommand>
 800750e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	e0a3      	b.n	8007662 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800751e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007520:	2308      	movs	r3, #8
 8007522:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007524:	2330      	movs	r3, #48	; 0x30
 8007526:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007528:	2302      	movs	r3, #2
 800752a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800752c:	2300      	movs	r3, #0
 800752e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007530:	2301      	movs	r3, #1
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f107 0210 	add.w	r2, r7, #16
 800753c:	4611      	mov	r1, r2
 800753e:	4618      	mov	r0, r3
 8007540:	f000 fe52 	bl	80081e8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f001 f80d 	bl	8008568 <SDMMC_CmdSendSCR>
 800754e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d02a      	beq.n	80075ac <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	e083      	b.n	8007662 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00f      	beq.n	8007588 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6819      	ldr	r1, [r3, #0]
 800756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	f107 0208 	add.w	r2, r7, #8
 8007574:	18d4      	adds	r4, r2, r3
 8007576:	4608      	mov	r0, r1
 8007578:	f000 fdb2 	bl	80080e0 <SDMMC_ReadFIFO>
 800757c:	4603      	mov	r3, r0
 800757e:	6023      	str	r3, [r4, #0]
      index++;
 8007580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007582:	3301      	adds	r3, #1
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	e006      	b.n	8007596 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d012      	beq.n	80075bc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007596:	f7fb f885 	bl	80026a4 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075a4:	d102      	bne.n	80075ac <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075aa:	e05a      	b.n	8007662 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0cf      	beq.n	800755a <SD_FindSCR+0x96>
 80075ba:	e000      	b.n	80075be <SD_FindSCR+0xfa>
      break;
 80075bc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2208      	movs	r2, #8
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075d4:	2308      	movs	r3, #8
 80075d6:	e044      	b.n	8007662 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d005      	beq.n	80075f2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2202      	movs	r2, #2
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80075ee:	2302      	movs	r3, #2
 80075f0:	e037      	b.n	8007662 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2220      	movs	r2, #32
 8007606:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007608:	2320      	movs	r3, #32
 800760a:	e02a      	b.n	8007662 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f240 523a 	movw	r2, #1338	; 0x53a
 8007614:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	061a      	lsls	r2, r3, #24
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	021b      	lsls	r3, r3, #8
 800761e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007622:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	0a1b      	lsrs	r3, r3, #8
 8007628:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800762c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	0e1b      	lsrs	r3, r3, #24
 8007632:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	601a      	str	r2, [r3, #0]
    scr++;
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763a:	3304      	adds	r3, #4
 800763c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	061a      	lsls	r2, r3, #24
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800764a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007654:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	0e1b      	lsrs	r3, r3, #24
 800765a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	373c      	adds	r7, #60	; 0x3c
 8007666:	46bd      	mov	sp, r7
 8007668:	bd90      	pop	{r4, r7, pc}

0800766a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d03f      	beq.n	8007704 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007684:	2300      	movs	r3, #0
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e033      	b.n	80076f2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fd26 	bl	80080e0 <SDMMC_ReadFIFO>
 8007694:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	b2da      	uxtb	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	3b01      	subs	r3, #1
 80076be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	0c1b      	lsrs	r3, r3, #16
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3301      	adds	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	0e1b      	lsrs	r3, r3, #24
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3301      	adds	r3, #1
 80076e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	3301      	adds	r3, #1
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b07      	cmp	r3, #7
 80076f6:	d9c8      	bls.n	800768a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007704:	bf00      	nop
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d043      	beq.n	80077ae <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	e037      	b.n	800779c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	3b01      	subs	r3, #1
 800773c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	021a      	lsls	r2, r3, #8
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4313      	orrs	r3, r2
 8007748:	60bb      	str	r3, [r7, #8]
      tmp++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3b01      	subs	r3, #1
 8007754:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	041a      	lsls	r2, r3, #16
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4313      	orrs	r3, r2
 8007760:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3301      	adds	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3b01      	subs	r3, #1
 800776c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	061a      	lsls	r2, r3, #24
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	4313      	orrs	r3, r2
 8007778:	60bb      	str	r3, [r7, #8]
      tmp++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3b01      	subs	r3, #1
 8007784:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f107 0208 	add.w	r2, r7, #8
 800778e:	4611      	mov	r1, r2
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fcb2 	bl	80080fa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	3301      	adds	r3, #1
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2b07      	cmp	r3, #7
 80077a0:	d9c4      	bls.n	800772c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80077ae:	bf00      	nop
 80077b0:	3718      	adds	r7, #24
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b082      	sub	sp, #8
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d101      	bne.n	80077c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e040      	b.n	800784a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d106      	bne.n	80077de <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fa f955 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2224      	movs	r2, #36	; 0x24
 80077e2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f82d 	bl	8007854 <UART_SetConfig>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e022      	b.n	800784a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fa85 	bl	8007d1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007820:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689a      	ldr	r2, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007830:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fb0c 	bl	8007e60 <UART_CheckIdleState>
 8007848:	4603      	mov	r3, r0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	4ba6      	ldr	r3, [pc, #664]	; (8007b18 <UART_SetConfig+0x2c4>)
 8007880:	4013      	ands	r3, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	6979      	ldr	r1, [r7, #20]
 8007888:	430b      	orrs	r3, r1
 800788a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68da      	ldr	r2, [r3, #12]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a94      	ldr	r2, [pc, #592]	; (8007b1c <UART_SetConfig+0x2c8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d120      	bne.n	8007912 <UART_SetConfig+0xbe>
 80078d0:	4b93      	ldr	r3, [pc, #588]	; (8007b20 <UART_SetConfig+0x2cc>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d816      	bhi.n	800790c <UART_SetConfig+0xb8>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0x90>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	08007901 	.word	0x08007901
 80078ec:	080078fb 	.word	0x080078fb
 80078f0:	08007907 	.word	0x08007907
 80078f4:	2301      	movs	r3, #1
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e150      	b.n	8007b9c <UART_SetConfig+0x348>
 80078fa:	2302      	movs	r3, #2
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e14d      	b.n	8007b9c <UART_SetConfig+0x348>
 8007900:	2304      	movs	r3, #4
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e14a      	b.n	8007b9c <UART_SetConfig+0x348>
 8007906:	2308      	movs	r3, #8
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e147      	b.n	8007b9c <UART_SetConfig+0x348>
 800790c:	2310      	movs	r3, #16
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e144      	b.n	8007b9c <UART_SetConfig+0x348>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a83      	ldr	r2, [pc, #524]	; (8007b24 <UART_SetConfig+0x2d0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d132      	bne.n	8007982 <UART_SetConfig+0x12e>
 800791c:	4b80      	ldr	r3, [pc, #512]	; (8007b20 <UART_SetConfig+0x2cc>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b0c      	cmp	r3, #12
 8007928:	d828      	bhi.n	800797c <UART_SetConfig+0x128>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <UART_SetConfig+0xdc>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	08007965 	.word	0x08007965
 8007934:	0800797d 	.word	0x0800797d
 8007938:	0800797d 	.word	0x0800797d
 800793c:	0800797d 	.word	0x0800797d
 8007940:	08007971 	.word	0x08007971
 8007944:	0800797d 	.word	0x0800797d
 8007948:	0800797d 	.word	0x0800797d
 800794c:	0800797d 	.word	0x0800797d
 8007950:	0800796b 	.word	0x0800796b
 8007954:	0800797d 	.word	0x0800797d
 8007958:	0800797d 	.word	0x0800797d
 800795c:	0800797d 	.word	0x0800797d
 8007960:	08007977 	.word	0x08007977
 8007964:	2300      	movs	r3, #0
 8007966:	77fb      	strb	r3, [r7, #31]
 8007968:	e118      	b.n	8007b9c <UART_SetConfig+0x348>
 800796a:	2302      	movs	r3, #2
 800796c:	77fb      	strb	r3, [r7, #31]
 800796e:	e115      	b.n	8007b9c <UART_SetConfig+0x348>
 8007970:	2304      	movs	r3, #4
 8007972:	77fb      	strb	r3, [r7, #31]
 8007974:	e112      	b.n	8007b9c <UART_SetConfig+0x348>
 8007976:	2308      	movs	r3, #8
 8007978:	77fb      	strb	r3, [r7, #31]
 800797a:	e10f      	b.n	8007b9c <UART_SetConfig+0x348>
 800797c:	2310      	movs	r3, #16
 800797e:	77fb      	strb	r3, [r7, #31]
 8007980:	e10c      	b.n	8007b9c <UART_SetConfig+0x348>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a68      	ldr	r2, [pc, #416]	; (8007b28 <UART_SetConfig+0x2d4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d120      	bne.n	80079ce <UART_SetConfig+0x17a>
 800798c:	4b64      	ldr	r3, [pc, #400]	; (8007b20 <UART_SetConfig+0x2cc>)
 800798e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007992:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007996:	2b30      	cmp	r3, #48	; 0x30
 8007998:	d013      	beq.n	80079c2 <UART_SetConfig+0x16e>
 800799a:	2b30      	cmp	r3, #48	; 0x30
 800799c:	d814      	bhi.n	80079c8 <UART_SetConfig+0x174>
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d009      	beq.n	80079b6 <UART_SetConfig+0x162>
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d810      	bhi.n	80079c8 <UART_SetConfig+0x174>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <UART_SetConfig+0x15c>
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d006      	beq.n	80079bc <UART_SetConfig+0x168>
 80079ae:	e00b      	b.n	80079c8 <UART_SetConfig+0x174>
 80079b0:	2300      	movs	r3, #0
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e0f2      	b.n	8007b9c <UART_SetConfig+0x348>
 80079b6:	2302      	movs	r3, #2
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e0ef      	b.n	8007b9c <UART_SetConfig+0x348>
 80079bc:	2304      	movs	r3, #4
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e0ec      	b.n	8007b9c <UART_SetConfig+0x348>
 80079c2:	2308      	movs	r3, #8
 80079c4:	77fb      	strb	r3, [r7, #31]
 80079c6:	e0e9      	b.n	8007b9c <UART_SetConfig+0x348>
 80079c8:	2310      	movs	r3, #16
 80079ca:	77fb      	strb	r3, [r7, #31]
 80079cc:	e0e6      	b.n	8007b9c <UART_SetConfig+0x348>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a56      	ldr	r2, [pc, #344]	; (8007b2c <UART_SetConfig+0x2d8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d120      	bne.n	8007a1a <UART_SetConfig+0x1c6>
 80079d8:	4b51      	ldr	r3, [pc, #324]	; (8007b20 <UART_SetConfig+0x2cc>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079e2:	2bc0      	cmp	r3, #192	; 0xc0
 80079e4:	d013      	beq.n	8007a0e <UART_SetConfig+0x1ba>
 80079e6:	2bc0      	cmp	r3, #192	; 0xc0
 80079e8:	d814      	bhi.n	8007a14 <UART_SetConfig+0x1c0>
 80079ea:	2b80      	cmp	r3, #128	; 0x80
 80079ec:	d009      	beq.n	8007a02 <UART_SetConfig+0x1ae>
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d810      	bhi.n	8007a14 <UART_SetConfig+0x1c0>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <UART_SetConfig+0x1a8>
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d006      	beq.n	8007a08 <UART_SetConfig+0x1b4>
 80079fa:	e00b      	b.n	8007a14 <UART_SetConfig+0x1c0>
 80079fc:	2300      	movs	r3, #0
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e0cc      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a02:	2302      	movs	r3, #2
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e0c9      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a08:	2304      	movs	r3, #4
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e0c6      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a0e:	2308      	movs	r3, #8
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e0c3      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a14:	2310      	movs	r3, #16
 8007a16:	77fb      	strb	r3, [r7, #31]
 8007a18:	e0c0      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a44      	ldr	r2, [pc, #272]	; (8007b30 <UART_SetConfig+0x2dc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d125      	bne.n	8007a70 <UART_SetConfig+0x21c>
 8007a24:	4b3e      	ldr	r3, [pc, #248]	; (8007b20 <UART_SetConfig+0x2cc>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a32:	d017      	beq.n	8007a64 <UART_SetConfig+0x210>
 8007a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a38:	d817      	bhi.n	8007a6a <UART_SetConfig+0x216>
 8007a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3e:	d00b      	beq.n	8007a58 <UART_SetConfig+0x204>
 8007a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a44:	d811      	bhi.n	8007a6a <UART_SetConfig+0x216>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <UART_SetConfig+0x1fe>
 8007a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4e:	d006      	beq.n	8007a5e <UART_SetConfig+0x20a>
 8007a50:	e00b      	b.n	8007a6a <UART_SetConfig+0x216>
 8007a52:	2300      	movs	r3, #0
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e0a1      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	e09e      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a5e:	2304      	movs	r3, #4
 8007a60:	77fb      	strb	r3, [r7, #31]
 8007a62:	e09b      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a64:	2308      	movs	r3, #8
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e098      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a6a:	2310      	movs	r3, #16
 8007a6c:	77fb      	strb	r3, [r7, #31]
 8007a6e:	e095      	b.n	8007b9c <UART_SetConfig+0x348>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a2f      	ldr	r2, [pc, #188]	; (8007b34 <UART_SetConfig+0x2e0>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d125      	bne.n	8007ac6 <UART_SetConfig+0x272>
 8007a7a:	4b29      	ldr	r3, [pc, #164]	; (8007b20 <UART_SetConfig+0x2cc>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a88:	d017      	beq.n	8007aba <UART_SetConfig+0x266>
 8007a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a8e:	d817      	bhi.n	8007ac0 <UART_SetConfig+0x26c>
 8007a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a94:	d00b      	beq.n	8007aae <UART_SetConfig+0x25a>
 8007a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a9a:	d811      	bhi.n	8007ac0 <UART_SetConfig+0x26c>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <UART_SetConfig+0x254>
 8007aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa4:	d006      	beq.n	8007ab4 <UART_SetConfig+0x260>
 8007aa6:	e00b      	b.n	8007ac0 <UART_SetConfig+0x26c>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e076      	b.n	8007b9c <UART_SetConfig+0x348>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e073      	b.n	8007b9c <UART_SetConfig+0x348>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e070      	b.n	8007b9c <UART_SetConfig+0x348>
 8007aba:	2308      	movs	r3, #8
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e06d      	b.n	8007b9c <UART_SetConfig+0x348>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	77fb      	strb	r3, [r7, #31]
 8007ac4:	e06a      	b.n	8007b9c <UART_SetConfig+0x348>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <UART_SetConfig+0x2e4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d138      	bne.n	8007b42 <UART_SetConfig+0x2ee>
 8007ad0:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <UART_SetConfig+0x2cc>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ada:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ade:	d017      	beq.n	8007b10 <UART_SetConfig+0x2bc>
 8007ae0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ae4:	d82a      	bhi.n	8007b3c <UART_SetConfig+0x2e8>
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aea:	d00b      	beq.n	8007b04 <UART_SetConfig+0x2b0>
 8007aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af0:	d824      	bhi.n	8007b3c <UART_SetConfig+0x2e8>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <UART_SetConfig+0x2aa>
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	d006      	beq.n	8007b0a <UART_SetConfig+0x2b6>
 8007afc:	e01e      	b.n	8007b3c <UART_SetConfig+0x2e8>
 8007afe:	2300      	movs	r3, #0
 8007b00:	77fb      	strb	r3, [r7, #31]
 8007b02:	e04b      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b04:	2302      	movs	r3, #2
 8007b06:	77fb      	strb	r3, [r7, #31]
 8007b08:	e048      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b0a:	2304      	movs	r3, #4
 8007b0c:	77fb      	strb	r3, [r7, #31]
 8007b0e:	e045      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b10:	2308      	movs	r3, #8
 8007b12:	77fb      	strb	r3, [r7, #31]
 8007b14:	e042      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b16:	bf00      	nop
 8007b18:	efff69f3 	.word	0xefff69f3
 8007b1c:	40011000 	.word	0x40011000
 8007b20:	40023800 	.word	0x40023800
 8007b24:	40004400 	.word	0x40004400
 8007b28:	40004800 	.word	0x40004800
 8007b2c:	40004c00 	.word	0x40004c00
 8007b30:	40005000 	.word	0x40005000
 8007b34:	40011400 	.word	0x40011400
 8007b38:	40007800 	.word	0x40007800
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e02c      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a72      	ldr	r2, [pc, #456]	; (8007d10 <UART_SetConfig+0x4bc>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d125      	bne.n	8007b98 <UART_SetConfig+0x344>
 8007b4c:	4b71      	ldr	r3, [pc, #452]	; (8007d14 <UART_SetConfig+0x4c0>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b5a:	d017      	beq.n	8007b8c <UART_SetConfig+0x338>
 8007b5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b60:	d817      	bhi.n	8007b92 <UART_SetConfig+0x33e>
 8007b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b66:	d00b      	beq.n	8007b80 <UART_SetConfig+0x32c>
 8007b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6c:	d811      	bhi.n	8007b92 <UART_SetConfig+0x33e>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <UART_SetConfig+0x326>
 8007b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b76:	d006      	beq.n	8007b86 <UART_SetConfig+0x332>
 8007b78:	e00b      	b.n	8007b92 <UART_SetConfig+0x33e>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e00d      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b80:	2302      	movs	r3, #2
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e00a      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b86:	2304      	movs	r3, #4
 8007b88:	77fb      	strb	r3, [r7, #31]
 8007b8a:	e007      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	77fb      	strb	r3, [r7, #31]
 8007b90:	e004      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b92:	2310      	movs	r3, #16
 8007b94:	77fb      	strb	r3, [r7, #31]
 8007b96:	e001      	b.n	8007b9c <UART_SetConfig+0x348>
 8007b98:	2310      	movs	r3, #16
 8007b9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba4:	d15b      	bne.n	8007c5e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007ba6:	7ffb      	ldrb	r3, [r7, #31]
 8007ba8:	2b08      	cmp	r3, #8
 8007baa:	d828      	bhi.n	8007bfe <UART_SetConfig+0x3aa>
 8007bac:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <UART_SetConfig+0x360>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007be1 	.word	0x08007be1
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007bff 	.word	0x08007bff
 8007bc4:	08007bef 	.word	0x08007bef
 8007bc8:	08007bff 	.word	0x08007bff
 8007bcc:	08007bff 	.word	0x08007bff
 8007bd0:	08007bff 	.word	0x08007bff
 8007bd4:	08007bf7 	.word	0x08007bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd8:	f7fd f808 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8007bdc:	61b8      	str	r0, [r7, #24]
        break;
 8007bde:	e013      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fd f818 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8007be4:	61b8      	str	r0, [r7, #24]
        break;
 8007be6:	e00f      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007be8:	4b4b      	ldr	r3, [pc, #300]	; (8007d18 <UART_SetConfig+0x4c4>)
 8007bea:	61bb      	str	r3, [r7, #24]
        break;
 8007bec:	e00c      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bee:	f7fc ff2b 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8007bf2:	61b8      	str	r0, [r7, #24]
        break;
 8007bf4:	e008      	b.n	8007c08 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bfa:	61bb      	str	r3, [r7, #24]
        break;
 8007bfc:	e004      	b.n	8007c08 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	77bb      	strb	r3, [r7, #30]
        break;
 8007c06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d074      	beq.n	8007cf8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	005a      	lsls	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	441a      	add	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d916      	bls.n	8007c58 <UART_SetConfig+0x404>
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c30:	d212      	bcs.n	8007c58 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f023 030f 	bic.w	r3, r3, #15
 8007c3a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	085b      	lsrs	r3, r3, #1
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	89fa      	ldrh	r2, [r7, #14]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	e04f      	b.n	8007cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	77bb      	strb	r3, [r7, #30]
 8007c5c:	e04c      	b.n	8007cf8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c5e:	7ffb      	ldrb	r3, [r7, #31]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d828      	bhi.n	8007cb6 <UART_SetConfig+0x462>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <UART_SetConfig+0x418>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007c99 	.word	0x08007c99
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	08007cb7 	.word	0x08007cb7
 8007c7c:	08007ca7 	.word	0x08007ca7
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007cb7 	.word	0x08007cb7
 8007c88:	08007cb7 	.word	0x08007cb7
 8007c8c:	08007caf 	.word	0x08007caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fc ffac 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8007c94:	61b8      	str	r0, [r7, #24]
        break;
 8007c96:	e013      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c98:	f7fc ffbc 	bl	8004c14 <HAL_RCC_GetPCLK2Freq>
 8007c9c:	61b8      	str	r0, [r7, #24]
        break;
 8007c9e:	e00f      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <UART_SetConfig+0x4c4>)
 8007ca2:	61bb      	str	r3, [r7, #24]
        break;
 8007ca4:	e00c      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca6:	f7fc fecf 	bl	8004a48 <HAL_RCC_GetSysClockFreq>
 8007caa:	61b8      	str	r0, [r7, #24]
        break;
 8007cac:	e008      	b.n	8007cc0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb2:	61bb      	str	r3, [r7, #24]
        break;
 8007cb4:	e004      	b.n	8007cc0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	77bb      	strb	r3, [r7, #30]
        break;
 8007cbe:	bf00      	nop
    }

    if (pclk != 0U)
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d018      	beq.n	8007cf8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	085a      	lsrs	r2, r3, #1
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	441a      	add	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d909      	bls.n	8007cf4 <UART_SetConfig+0x4a0>
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce6:	d205      	bcs.n	8007cf4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60da      	str	r2, [r3, #12]
 8007cf2:	e001      	b.n	8007cf8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d04:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	40007c00 	.word	0x40007c00
 8007d14:	40023800 	.word	0x40023800
 8007d18:	00f42400 	.word	0x00f42400

08007d1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00a      	beq.n	8007d68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00a      	beq.n	8007d8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00a      	beq.n	8007dce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01a      	beq.n	8007e32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e1a:	d10a      	bne.n	8007e32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	605a      	str	r2, [r3, #4]
  }
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e70:	f7fa fc18 	bl	80026a4 <HAL_GetTick>
 8007e74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10e      	bne.n	8007ea2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f831 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e027      	b.n	8007ef2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d10e      	bne.n	8007ece <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f81b 	bl	8007efa <UART_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e011      	b.n	8007ef2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b09c      	sub	sp, #112	; 0x70
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0a:	e0a7      	b.n	800805c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f12:	f000 80a3 	beq.w	800805c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f16:	f7fa fbc5 	bl	80026a4 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d302      	bcc.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x32>
 8007f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d13f      	bne.n	8007fac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f40:	667b      	str	r3, [r7, #100]	; 0x64
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	461a      	mov	r2, r3
 8007f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e6      	bne.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	663b      	str	r3, [r7, #96]	; 0x60
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e5      	bne.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2220      	movs	r2, #32
 8007f96:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e068      	b.n	800807e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d050      	beq.n	800805c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc8:	d148      	bne.n	800805c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fd2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffa:	e841 2300 	strex	r3, r2, [r1]
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e6      	bne.n	8007fd4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3308      	adds	r3, #8
 800800c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	613b      	str	r3, [r7, #16]
   return(result);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	66bb      	str	r3, [r7, #104]	; 0x68
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3308      	adds	r3, #8
 8008024:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008026:	623a      	str	r2, [r7, #32]
 8008028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	69f9      	ldr	r1, [r7, #28]
 800802c:	6a3a      	ldr	r2, [r7, #32]
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	61bb      	str	r3, [r7, #24]
   return(result);
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e5      	bne.n	8008006 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2220      	movs	r2, #32
 800803e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e010      	b.n	800807e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69da      	ldr	r2, [r3, #28]
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4013      	ands	r3, r2
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	429a      	cmp	r2, r3
 800806a:	bf0c      	ite	eq
 800806c:	2301      	moveq	r3, #1
 800806e:	2300      	movne	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	79fb      	ldrb	r3, [r7, #7]
 8008076:	429a      	cmp	r2, r3
 8008078:	f43f af48 	beq.w	8007f0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3770      	adds	r7, #112	; 0x70
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008088:	b084      	sub	sp, #16
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	f107 001c 	add.w	r0, r7, #28
 8008096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800809e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80080a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80080a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80080a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80080aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80080ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80080b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	4b07      	ldr	r3, [pc, #28]	; (80080dc <SDMMC_Init+0x54>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	b004      	add	sp, #16
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	ffff8100 	.word	0xffff8100

080080e0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2203      	movs	r2, #3
 8008128:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0303 	and.w	r3, r3, #3
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008172:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008178:	431a      	orrs	r2, r3
                       Command->CPSM);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800817e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <SDMMC_SendCommand+0x50>)
 800818c:	4013      	ands	r3, r2
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	fffff000 	.word	0xfffff000

080081a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	b2db      	uxtb	r3, r3
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3314      	adds	r3, #20
 80081d0:	461a      	mov	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
}  
 80081dc:	4618      	mov	r0, r3
 80081de:	3714      	adds	r7, #20
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800820e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008214:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800821a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008226:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	431a      	orrs	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008232:	2300      	movs	r3, #0

}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800824e:	2310      	movs	r3, #16
 8008250:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800825a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7ff ff74 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800826c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008270:	2110      	movs	r1, #16
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa1a 	bl	80086ac <SDMMC_GetCmdResp1>
 8008278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800827a:	69fb      	ldr	r3, [r7, #28]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008292:	2311      	movs	r3, #17
 8008294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008296:	2340      	movs	r3, #64	; 0x40
 8008298:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a4:	f107 0308 	add.w	r3, r7, #8
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff ff52 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80082b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b4:	2111      	movs	r1, #17
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f9f8 	bl	80086ac <SDMMC_GetCmdResp1>
 80082bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082be:	69fb      	ldr	r3, [r7, #28]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80082d6:	2312      	movs	r3, #18
 80082d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082da:	2340      	movs	r3, #64	; 0x40
 80082dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff ff30 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80082f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f8:	2112      	movs	r1, #18
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9d6 	bl	80086ac <SDMMC_GetCmdResp1>
 8008300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008302:	69fb      	ldr	r3, [r7, #28]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3720      	adds	r7, #32
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800831a:	2318      	movs	r3, #24
 800831c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800831e:	2340      	movs	r3, #64	; 0x40
 8008320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800832c:	f107 0308 	add.w	r3, r7, #8
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff ff0e 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008338:	f241 3288 	movw	r2, #5000	; 0x1388
 800833c:	2118      	movs	r1, #24
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f9b4 	bl	80086ac <SDMMC_GetCmdResp1>
 8008344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008346:	69fb      	ldr	r3, [r7, #28]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3720      	adds	r7, #32
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800835e:	2319      	movs	r3, #25
 8008360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008362:	2340      	movs	r3, #64	; 0x40
 8008364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800836a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008370:	f107 0308 	add.w	r3, r7, #8
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff feec 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800837c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008380:	2119      	movs	r1, #25
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f992 	bl	80086ac <SDMMC_GetCmdResp1>
 8008388:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800838a:	69fb      	ldr	r3, [r7, #28]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800839c:	2300      	movs	r3, #0
 800839e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083a0:	230c      	movs	r3, #12
 80083a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083a4:	2340      	movs	r3, #64	; 0x40
 80083a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083b2:	f107 0308 	add.w	r3, r7, #8
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fecb 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80083be:	4a05      	ldr	r2, [pc, #20]	; (80083d4 <SDMMC_CmdStopTransfer+0x40>)
 80083c0:	210c      	movs	r1, #12
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f972 	bl	80086ac <SDMMC_GetCmdResp1>
 80083c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ca:	69fb      	ldr	r3, [r7, #28]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3720      	adds	r7, #32
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	05f5e100 	.word	0x05f5e100

080083d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80083e8:	2307      	movs	r3, #7
 80083ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083ec:	2340      	movs	r3, #64	; 0x40
 80083ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083f0:	2300      	movs	r3, #0
 80083f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083fa:	f107 0310 	add.w	r3, r7, #16
 80083fe:	4619      	mov	r1, r3
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f7ff fea7 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008406:	f241 3288 	movw	r2, #5000	; 0x1388
 800840a:	2107      	movs	r1, #7
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f94d 	bl	80086ac <SDMMC_GetCmdResp1>
 8008412:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008416:	4618      	mov	r0, r3
 8008418:	3728      	adds	r7, #40	; 0x28
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b088      	sub	sp, #32
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008432:	2300      	movs	r3, #0
 8008434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800843a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800843c:	f107 0308 	add.w	r3, r7, #8
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fe86 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fb67 	bl	8008b1c <SDMMC_GetCmdError>
 800844e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008450:	69fb      	ldr	r3, [r7, #28]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b088      	sub	sp, #32
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008462:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008468:	2308      	movs	r3, #8
 800846a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008470:	2300      	movs	r3, #0
 8008472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff fe67 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fafa 	bl	8008a80 <SDMMC_GetCmdResp7>
 800848c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800848e:	69fb      	ldr	r3, [r7, #28]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084a6:	2337      	movs	r3, #55	; 0x37
 80084a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084aa:	2340      	movs	r3, #64	; 0x40
 80084ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084ae:	2300      	movs	r3, #0
 80084b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084b8:	f107 0308 	add.w	r3, r7, #8
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fe48 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80084c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c8:	2137      	movs	r1, #55	; 0x37
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f8ee 	bl	80086ac <SDMMC_GetCmdResp1>
 80084d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084d2:	69fb      	ldr	r3, [r7, #28]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <SDMMC_CmdAppOperCommand+0x44>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80084ee:	2329      	movs	r3, #41	; 0x29
 80084f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008500:	f107 0308 	add.w	r3, r7, #8
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fe24 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa03 	bl	8008918 <SDMMC_GetCmdResp3>
 8008512:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008514:	69fb      	ldr	r3, [r7, #28]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	80100000 	.word	0x80100000

08008524 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008532:	2306      	movs	r3, #6
 8008534:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008536:	2340      	movs	r3, #64	; 0x40
 8008538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800853e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fe02 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008550:	f241 3288 	movw	r2, #5000	; 0x1388
 8008554:	2106      	movs	r1, #6
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 f8a8 	bl	80086ac <SDMMC_GetCmdResp1>
 800855c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855e:	69fb      	ldr	r3, [r7, #28]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3720      	adds	r7, #32
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b088      	sub	sp, #32
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008574:	2333      	movs	r3, #51	; 0x33
 8008576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008584:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008586:	f107 0308 	add.w	r3, r7, #8
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff fde1 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008592:	f241 3288 	movw	r2, #5000	; 0x1388
 8008596:	2133      	movs	r1, #51	; 0x33
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f887 	bl	80086ac <SDMMC_GetCmdResp1>
 800859e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a0:	69fb      	ldr	r3, [r7, #28]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3720      	adds	r7, #32
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b088      	sub	sp, #32
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80085b6:	2302      	movs	r3, #2
 80085b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085ba:	23c0      	movs	r3, #192	; 0xc0
 80085bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085c8:	f107 0308 	add.w	r3, r7, #8
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fdc0 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f957 	bl	8008888 <SDMMC_GetCmdResp2>
 80085da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085dc:	69fb      	ldr	r3, [r7, #28]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3720      	adds	r7, #32
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b088      	sub	sp, #32
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80085f4:	2309      	movs	r3, #9
 80085f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80085f8:	23c0      	movs	r3, #192	; 0xc0
 80085fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008604:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7ff fda1 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f938 	bl	8008888 <SDMMC_GetCmdResp2>
 8008618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800861a:	69fb      	ldr	r3, [r7, #28]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3720      	adds	r7, #32
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008632:	2303      	movs	r3, #3
 8008634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008636:	2340      	movs	r3, #64	; 0x40
 8008638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800863e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008642:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fd82 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	2103      	movs	r1, #3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f99d 	bl	8008994 <SDMMC_GetCmdResp6>
 800865a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800865c:	69fb      	ldr	r3, [r7, #28]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3720      	adds	r7, #32
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b088      	sub	sp, #32
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008674:	230d      	movs	r3, #13
 8008676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008678:	2340      	movs	r3, #64	; 0x40
 800867a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800867c:	2300      	movs	r3, #0
 800867e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008684:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008686:	f107 0308 	add.w	r3, r7, #8
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f7ff fd61 	bl	8008154 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008692:	f241 3288 	movw	r2, #5000	; 0x1388
 8008696:	210d      	movs	r1, #13
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f807 	bl	80086ac <SDMMC_GetCmdResp1>
 800869e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a0:	69fb      	ldr	r3, [r7, #28]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3720      	adds	r7, #32
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	460b      	mov	r3, r1
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80086ba:	4b70      	ldr	r3, [pc, #448]	; (800887c <SDMMC_GetCmdResp1+0x1d0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a70      	ldr	r2, [pc, #448]	; (8008880 <SDMMC_GetCmdResp1+0x1d4>)
 80086c0:	fba2 2303 	umull	r2, r3, r2, r3
 80086c4:	0a5a      	lsrs	r2, r3, #9
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	fb02 f303 	mul.w	r3, r2, r3
 80086cc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	1e5a      	subs	r2, r3, #1
 80086d2:	61fa      	str	r2, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086dc:	e0c9      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0ef      	beq.n	80086ce <SDMMC_GetCmdResp1+0x22>
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1ea      	bne.n	80086ce <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fc:	f003 0304 	and.w	r3, r3, #4
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2204      	movs	r2, #4
 8008708:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800870a:	2304      	movs	r3, #4
 800870c:	e0b1      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d004      	beq.n	8008724 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008720:	2301      	movs	r3, #1
 8008722:	e0a6      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	22c5      	movs	r2, #197	; 0xc5
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fd3c 	bl	80081a8 <SDMMC_GetCommandResponse>
 8008730:	4603      	mov	r3, r0
 8008732:	461a      	mov	r2, r3
 8008734:	7afb      	ldrb	r3, [r7, #11]
 8008736:	4293      	cmp	r3, r2
 8008738:	d001      	beq.n	800873e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800873a:	2301      	movs	r3, #1
 800873c:	e099      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800873e:	2100      	movs	r1, #0
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff fd3e 	bl	80081c2 <SDMMC_GetResponse>
 8008746:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4b4e      	ldr	r3, [pc, #312]	; (8008884 <SDMMC_GetCmdResp1+0x1d8>)
 800874c:	4013      	ands	r3, r2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008752:	2300      	movs	r3, #0
 8008754:	e08d      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	da02      	bge.n	8008762 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800875c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008760:	e087      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800876c:	2340      	movs	r3, #64	; 0x40
 800876e:	e080      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800877a:	2380      	movs	r3, #128	; 0x80
 800877c:	e079      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800878c:	e071      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008798:	f44f 7300 	mov.w	r3, #512	; 0x200
 800879c:	e069      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80087a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ac:	e061      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80087b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087bc:	e059      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d002      	beq.n	80087ce <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80087c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087cc:	e051      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80087d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087dc:	e049      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80087e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087ec:	e041      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80087f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087fc:	e039      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800880c:	e031      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008818:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800881c:	e029      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800882c:	e021      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008838:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800883c:	e019      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d002      	beq.n	800884e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008848:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800884c:	e011      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008858:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800885c:	e009      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f003 0308 	and.w	r3, r3, #8
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008868:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800886c:	e001      	b.n	8008872 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800886e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000000 	.word	0x20000000
 8008880:	10624dd3 	.word	0x10624dd3
 8008884:	fdffe008 	.word	0xfdffe008

08008888 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008890:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <SDMMC_GetCmdResp2+0x88>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <SDMMC_GetCmdResp2+0x8c>)
 8008896:	fba2 2303 	umull	r2, r3, r2, r3
 800889a:	0a5b      	lsrs	r3, r3, #9
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	fb02 f303 	mul.w	r3, r2, r3
 80088a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	1e5a      	subs	r2, r3, #1
 80088aa:	60fa      	str	r2, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d102      	bne.n	80088b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088b4:	e026      	b.n	8008904 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0ef      	beq.n	80088a6 <SDMMC_GetCmdResp2+0x1e>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1ea      	bne.n	80088a6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2204      	movs	r2, #4
 80088e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088e2:	2304      	movs	r3, #4
 80088e4:	e00e      	b.n	8008904 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e003      	b.n	8008904 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	22c5      	movs	r2, #197	; 0xc5
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20000000 	.word	0x20000000
 8008914:	10624dd3 	.word	0x10624dd3

08008918 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008920:	4b1a      	ldr	r3, [pc, #104]	; (800898c <SDMMC_GetCmdResp3+0x74>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a1a      	ldr	r2, [pc, #104]	; (8008990 <SDMMC_GetCmdResp3+0x78>)
 8008926:	fba2 2303 	umull	r2, r3, r2, r3
 800892a:	0a5b      	lsrs	r3, r3, #9
 800892c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008930:	fb02 f303 	mul.w	r3, r2, r3
 8008934:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1e5a      	subs	r2, r3, #1
 800893a:	60fa      	str	r2, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008944:	e01b      	b.n	800897e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800894a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0ef      	beq.n	8008936 <SDMMC_GetCmdResp3+0x1e>
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1ea      	bne.n	8008936 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d004      	beq.n	8008976 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2204      	movs	r2, #4
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008972:	2304      	movs	r3, #4
 8008974:	e003      	b.n	800897e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	22c5      	movs	r2, #197	; 0xc5
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3714      	adds	r7, #20
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	20000000 	.word	0x20000000
 8008990:	10624dd3 	.word	0x10624dd3

08008994 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	460b      	mov	r3, r1
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089a2:	4b35      	ldr	r3, [pc, #212]	; (8008a78 <SDMMC_GetCmdResp6+0xe4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a35      	ldr	r2, [pc, #212]	; (8008a7c <SDMMC_GetCmdResp6+0xe8>)
 80089a8:	fba2 2303 	umull	r2, r3, r2, r3
 80089ac:	0a5b      	lsrs	r3, r3, #9
 80089ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
 80089b6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	1e5a      	subs	r2, r3, #1
 80089bc:	61fa      	str	r2, [r7, #28]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d102      	bne.n	80089c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80089c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089c6:	e052      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089cc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0ef      	beq.n	80089b8 <SDMMC_GetCmdResp6+0x24>
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1ea      	bne.n	80089b8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2204      	movs	r2, #4
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089f4:	2304      	movs	r3, #4
 80089f6:	e03a      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d004      	beq.n	8008a0e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e02f      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7ff fbca 	bl	80081a8 <SDMMC_GetCommandResponse>
 8008a14:	4603      	mov	r3, r0
 8008a16:	461a      	mov	r2, r3
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d001      	beq.n	8008a22 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e025      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	22c5      	movs	r2, #197	; 0xc5
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a28:	2100      	movs	r1, #0
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f7ff fbc9 	bl	80081c2 <SDMMC_GetResponse>
 8008a30:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d106      	bne.n	8008a4a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	0c1b      	lsrs	r3, r3, #16
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a46:	2300      	movs	r3, #0
 8008a48:	e011      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a58:	e009      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a68:	e001      	b.n	8008a6e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3720      	adds	r7, #32
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000000 	.word	0x20000000
 8008a7c:	10624dd3 	.word	0x10624dd3

08008a80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a88:	4b22      	ldr	r3, [pc, #136]	; (8008b14 <SDMMC_GetCmdResp7+0x94>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a22      	ldr	r2, [pc, #136]	; (8008b18 <SDMMC_GetCmdResp7+0x98>)
 8008a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a92:	0a5b      	lsrs	r3, r3, #9
 8008a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a98:	fb02 f303 	mul.w	r3, r2, r3
 8008a9c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	1e5a      	subs	r2, r3, #1
 8008aa2:	60fa      	str	r2, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d102      	bne.n	8008aae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aac:	e02c      	b.n	8008b08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d0ef      	beq.n	8008a9e <SDMMC_GetCmdResp7+0x1e>
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1ea      	bne.n	8008a9e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d004      	beq.n	8008ade <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ada:	2304      	movs	r3, #4
 8008adc:	e014      	b.n	8008b08 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d004      	beq.n	8008af4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e009      	b.n	8008b08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2240      	movs	r2, #64	; 0x40
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b06:	2300      	movs	r3, #0
  
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000000 	.word	0x20000000
 8008b18:	10624dd3 	.word	0x10624dd3

08008b1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <SDMMC_GetCmdError+0x50>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a11      	ldr	r2, [pc, #68]	; (8008b70 <SDMMC_GetCmdError+0x54>)
 8008b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2e:	0a5b      	lsrs	r3, r3, #9
 8008b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b34:	fb02 f303 	mul.w	r3, r2, r3
 8008b38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1e5a      	subs	r2, r3, #1
 8008b3e:	60fa      	str	r2, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d102      	bne.n	8008b4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b48:	e009      	b.n	8008b5e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f1      	beq.n	8008b3a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	22c5      	movs	r2, #197	; 0xc5
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	20000000 	.word	0x20000000
 8008b70:	10624dd3 	.word	0x10624dd3

08008b74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008b78:	4904      	ldr	r1, [pc, #16]	; (8008b8c <MX_FATFS_Init+0x18>)
 8008b7a:	4805      	ldr	r0, [pc, #20]	; (8008b90 <MX_FATFS_Init+0x1c>)
 8008b7c:	f002 fd0e 	bl	800b59c <FATFS_LinkDriver>
 8008b80:	4603      	mov	r3, r0
 8008b82:	461a      	mov	r2, r3
 8008b84:	4b03      	ldr	r3, [pc, #12]	; (8008b94 <MX_FATFS_Init+0x20>)
 8008b86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b88:	bf00      	nop
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	2000599c 	.word	0x2000599c
 8008b90:	08012fac 	.word	0x08012fac
 8008b94:	20005998 	.word	0x20005998

08008b98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008b9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008bb2:	f000 f896 	bl	8008ce2 <BSP_SD_IsDetected>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d001      	beq.n	8008bc0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e012      	b.n	8008be6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008bc0:	480b      	ldr	r0, [pc, #44]	; (8008bf0 <BSP_SD_Init+0x48>)
 8008bc2:	f7fd facd 	bl	8006160 <HAL_SD_Init>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008bca:	79fb      	ldrb	r3, [r7, #7]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d109      	bne.n	8008be4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008bd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008bd4:	4806      	ldr	r0, [pc, #24]	; (8008bf0 <BSP_SD_Init+0x48>)
 8008bd6:	f7fe f893 	bl	8006d00 <HAL_SD_ConfigWideBusOperation>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008be4:	79fb      	ldrb	r3, [r7, #7]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200057a0 	.word	0x200057a0

08008bf4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	68f9      	ldr	r1, [r7, #12]
 8008c0a:	4806      	ldr	r0, [pc, #24]	; (8008c24 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008c0c:	f7fd fb60 	bl	80062d0 <HAL_SD_ReadBlocks_DMA>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3718      	adds	r7, #24
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	200057a0 	.word	0x200057a0

08008c28 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	68f9      	ldr	r1, [r7, #12]
 8008c3e:	4806      	ldr	r0, [pc, #24]	; (8008c58 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008c40:	f7fd fc28 	bl	8006494 <HAL_SD_WriteBlocks_DMA>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	200057a0 	.word	0x200057a0

08008c5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008c60:	4805      	ldr	r0, [pc, #20]	; (8008c78 <BSP_SD_GetCardState+0x1c>)
 8008c62:	f7fe f8e7 	bl	8006e34 <HAL_SD_GetCardState>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b04      	cmp	r3, #4
 8008c6a:	bf14      	ite	ne
 8008c6c:	2301      	movne	r3, #1
 8008c6e:	2300      	moveq	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	200057a0 	.word	0x200057a0

08008c7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	4803      	ldr	r0, [pc, #12]	; (8008c94 <BSP_SD_GetCardInfo+0x18>)
 8008c88:	f7fe f80e 	bl	8006ca8 <HAL_SD_GetCardInfo>
}
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	200057a0 	.word	0x200057a0

08008c98 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008ca0:	f000 f818 	bl	8008cd4 <BSP_SD_AbortCallback>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008cb4:	f000 f9a8 	bl	8009008 <BSP_SD_WriteCpltCallback>
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008cc8:	f000 f9aa 	bl	8009020 <BSP_SD_ReadCpltCallback>
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0

}
 8008cd8:	bf00      	nop
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008cec:	f000 f80c 	bl	8008d08 <BSP_PlatformIsDetected>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	b2db      	uxtb	r3, r3
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3708      	adds	r7, #8
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d16:	4806      	ldr	r0, [pc, #24]	; (8008d30 <BSP_PlatformIsDetected+0x28>)
 8008d18:	f7fb fa62 	bl	80041e0 <HAL_GPIO_ReadPin>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008d22:	2300      	movs	r3, #0
 8008d24:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008d26:	79fb      	ldrb	r3, [r7, #7]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	40020400 	.word	0x40020400

08008d34 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008d3c:	f7f9 fcb2 	bl	80026a4 <HAL_GetTick>
 8008d40:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008d42:	e006      	b.n	8008d52 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008d44:	f7ff ff8a 	bl	8008c5c <BSP_SD_GetCardState>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e009      	b.n	8008d66 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008d52:	f7f9 fca7 	bl	80026a4 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d8f0      	bhi.n	8008d44 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <SD_CheckStatus+0x38>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008d80:	f7ff ff6c 	bl	8008c5c <BSP_SD_GetCardState>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d107      	bne.n	8008d9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008d8a:	4b07      	ldr	r3, [pc, #28]	; (8008da8 <SD_CheckStatus+0x38>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f023 0301 	bic.w	r3, r3, #1
 8008d94:	b2da      	uxtb	r2, r3
 8008d96:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <SD_CheckStatus+0x38>)
 8008d98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008d9a:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <SD_CheckStatus+0x38>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	b2db      	uxtb	r3, r3
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	20000009 	.word	0x20000009

08008dac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008db6:	f7ff fef7 	bl	8008ba8 <BSP_SD_Init>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d107      	bne.n	8008dd0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff ffd4 	bl	8008d70 <SD_CheckStatus>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <SD_initialize+0x34>)
 8008dce:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	; (8008de0 <SD_initialize+0x34>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b2db      	uxtb	r3, r3
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000009 	.word	0x20000009

08008de4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff ffbd 	bl	8008d70 <SD_CheckStatus>
 8008df6:	4603      	mov	r3, r0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008e14:	f247 5030 	movw	r0, #30000	; 0x7530
 8008e18:	f7ff ff8c 	bl	8008d34 <SD_CheckStatusWithTimeout>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	da01      	bge.n	8008e26 <SD_read+0x26>
  {
    return res;
 8008e22:	7dfb      	ldrb	r3, [r7, #23]
 8008e24:	e03b      	b.n	8008e9e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	68b8      	ldr	r0, [r7, #8]
 8008e2c:	f7ff fee2 	bl	8008bf4 <BSP_SD_ReadBlocks_DMA>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d132      	bne.n	8008e9c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008e36:	4b1c      	ldr	r3, [pc, #112]	; (8008ea8 <SD_read+0xa8>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008e3c:	f7f9 fc32 	bl	80026a4 <HAL_GetTick>
 8008e40:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008e42:	bf00      	nop
 8008e44:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <SD_read+0xa8>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d108      	bne.n	8008e5e <SD_read+0x5e>
 8008e4c:	f7f9 fc2a 	bl	80026a4 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	f247 522f 	movw	r2, #29999	; 0x752f
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d9f2      	bls.n	8008e44 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008e5e:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <SD_read+0xa8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d102      	bne.n	8008e6c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e017      	b.n	8008e9c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008e6c:	4b0e      	ldr	r3, [pc, #56]	; (8008ea8 <SD_read+0xa8>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008e72:	f7f9 fc17 	bl	80026a4 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008e78:	e007      	b.n	8008e8a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008e7a:	f7ff feef 	bl	8008c5c <BSP_SD_GetCardState>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <SD_read+0x8a>
          {
            res = RES_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008e88:	e008      	b.n	8008e9c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008e8a:	f7f9 fc0b 	bl	80026a4 <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	f247 522f 	movw	r2, #29999	; 0x752f
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d9ee      	bls.n	8008e7a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20005e04 	.word	0x20005e04

08008eac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008ec0:	4b24      	ldr	r3, [pc, #144]	; (8008f54 <SD_write+0xa8>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008ec6:	f247 5030 	movw	r0, #30000	; 0x7530
 8008eca:	f7ff ff33 	bl	8008d34 <SD_CheckStatusWithTimeout>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	da01      	bge.n	8008ed8 <SD_write+0x2c>
  {
    return res;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	e038      	b.n	8008f4a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	68b8      	ldr	r0, [r7, #8]
 8008ede:	f7ff fea3 	bl	8008c28 <BSP_SD_WriteBlocks_DMA>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d12f      	bne.n	8008f48 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008ee8:	f7f9 fbdc 	bl	80026a4 <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008eee:	bf00      	nop
 8008ef0:	4b18      	ldr	r3, [pc, #96]	; (8008f54 <SD_write+0xa8>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d108      	bne.n	8008f0a <SD_write+0x5e>
 8008ef8:	f7f9 fbd4 	bl	80026a4 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d9f2      	bls.n	8008ef0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008f0a:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <SD_write+0xa8>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d102      	bne.n	8008f18 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	75fb      	strb	r3, [r7, #23]
 8008f16:	e017      	b.n	8008f48 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008f18:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <SD_write+0xa8>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008f1e:	f7f9 fbc1 	bl	80026a4 <HAL_GetTick>
 8008f22:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008f24:	e007      	b.n	8008f36 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f26:	f7ff fe99 	bl	8008c5c <BSP_SD_GetCardState>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <SD_write+0x8a>
          {
            res = RES_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	75fb      	strb	r3, [r7, #23]
            break;
 8008f34:	e008      	b.n	8008f48 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008f36:	f7f9 fbb5 	bl	80026a4 <HAL_GetTick>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d9ee      	bls.n	8008f26 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20005e00 	.word	0x20005e00

08008f58 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b08c      	sub	sp, #48	; 0x30
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	603a      	str	r2, [r7, #0]
 8008f62:	71fb      	strb	r3, [r7, #7]
 8008f64:	460b      	mov	r3, r1
 8008f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f6e:	4b25      	ldr	r3, [pc, #148]	; (8009004 <SD_ioctl+0xac>)
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <SD_ioctl+0x28>
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e03c      	b.n	8008ffa <SD_ioctl+0xa2>

  switch (cmd)
 8008f80:	79bb      	ldrb	r3, [r7, #6]
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d834      	bhi.n	8008ff0 <SD_ioctl+0x98>
 8008f86:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <SD_ioctl+0x34>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008f9d 	.word	0x08008f9d
 8008f90:	08008fa5 	.word	0x08008fa5
 8008f94:	08008fbd 	.word	0x08008fbd
 8008f98:	08008fd7 	.word	0x08008fd7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fa2:	e028      	b.n	8008ff6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fa4:	f107 030c 	add.w	r3, r7, #12
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fe67 	bl	8008c7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fba:	e01c      	b.n	8008ff6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff fe5b 	bl	8008c7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fd4:	e00f      	b.n	8008ff6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fd6:	f107 030c 	add.w	r3, r7, #12
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff fe4e 	bl	8008c7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	0a5a      	lsrs	r2, r3, #9
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fee:	e002      	b.n	8008ff6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3730      	adds	r7, #48	; 0x30
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000009 	.word	0x20000009

08009008 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009008:	b480      	push	{r7}
 800900a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800900c:	4b03      	ldr	r3, [pc, #12]	; (800901c <BSP_SD_WriteCpltCallback+0x14>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	20005e00 	.word	0x20005e00

08009020 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009020:	b480      	push	{r7}
 8009022:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009024:	4b03      	ldr	r3, [pc, #12]	; (8009034 <BSP_SD_ReadCpltCallback+0x14>)
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
}
 800902a:	bf00      	nop
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20005e04 	.word	0x20005e04

08009038 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	4a08      	ldr	r2, [pc, #32]	; (8009068 <disk_status+0x30>)
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	4413      	add	r3, r2
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	79fa      	ldrb	r2, [r7, #7]
 8009050:	4905      	ldr	r1, [pc, #20]	; (8009068 <disk_status+0x30>)
 8009052:	440a      	add	r2, r1
 8009054:	7a12      	ldrb	r2, [r2, #8]
 8009056:	4610      	mov	r0, r2
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	20005e30 	.word	0x20005e30

0800906c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	4a0d      	ldr	r2, [pc, #52]	; (80090b4 <disk_initialize+0x48>)
 800907e:	5cd3      	ldrb	r3, [r2, r3]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d111      	bne.n	80090a8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	4a0b      	ldr	r2, [pc, #44]	; (80090b4 <disk_initialize+0x48>)
 8009088:	2101      	movs	r1, #1
 800908a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	4a09      	ldr	r2, [pc, #36]	; (80090b4 <disk_initialize+0x48>)
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	79fa      	ldrb	r2, [r7, #7]
 800909a:	4906      	ldr	r1, [pc, #24]	; (80090b4 <disk_initialize+0x48>)
 800909c:	440a      	add	r2, r1
 800909e:	7a12      	ldrb	r2, [r2, #8]
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20005e30 	.word	0x20005e30

080090b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80090b8:	b590      	push	{r4, r7, lr}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
 80090c2:	603b      	str	r3, [r7, #0]
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4a0a      	ldr	r2, [pc, #40]	; (80090f4 <disk_read+0x3c>)
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	689c      	ldr	r4, [r3, #8]
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4a07      	ldr	r2, [pc, #28]	; (80090f4 <disk_read+0x3c>)
 80090d8:	4413      	add	r3, r2
 80090da:	7a18      	ldrb	r0, [r3, #8]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	47a0      	blx	r4
 80090e4:	4603      	mov	r3, r0
 80090e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80090e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd90      	pop	{r4, r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20005e30 	.word	0x20005e30

080090f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80090f8:	b590      	push	{r4, r7, lr}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4a0a      	ldr	r2, [pc, #40]	; (8009134 <disk_write+0x3c>)
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	68dc      	ldr	r4, [r3, #12]
 8009114:	7bfb      	ldrb	r3, [r7, #15]
 8009116:	4a07      	ldr	r2, [pc, #28]	; (8009134 <disk_write+0x3c>)
 8009118:	4413      	add	r3, r2
 800911a:	7a18      	ldrb	r0, [r3, #8]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	47a0      	blx	r4
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
  return res;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
}
 800912a:	4618      	mov	r0, r3
 800912c:	371c      	adds	r7, #28
 800912e:	46bd      	mov	sp, r7
 8009130:	bd90      	pop	{r4, r7, pc}
 8009132:	bf00      	nop
 8009134:	20005e30 	.word	0x20005e30

08009138 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	603a      	str	r2, [r7, #0]
 8009142:	71fb      	strb	r3, [r7, #7]
 8009144:	460b      	mov	r3, r1
 8009146:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009148:	79fb      	ldrb	r3, [r7, #7]
 800914a:	4a09      	ldr	r2, [pc, #36]	; (8009170 <disk_ioctl+0x38>)
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	79fa      	ldrb	r2, [r7, #7]
 8009156:	4906      	ldr	r1, [pc, #24]	; (8009170 <disk_ioctl+0x38>)
 8009158:	440a      	add	r2, r1
 800915a:	7a10      	ldrb	r0, [r2, #8]
 800915c:	79b9      	ldrb	r1, [r7, #6]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4798      	blx	r3
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]
  return res;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20005e30 	.word	0x20005e30

08009174 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3301      	adds	r3, #1
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009184:	89fb      	ldrh	r3, [r7, #14]
 8009186:	021b      	lsls	r3, r3, #8
 8009188:	b21a      	sxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b21b      	sxth	r3, r3
 8009190:	4313      	orrs	r3, r2
 8009192:	b21b      	sxth	r3, r3
 8009194:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009196:	89fb      	ldrh	r3, [r7, #14]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3303      	adds	r3, #3
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	021b      	lsls	r3, r3, #8
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	3202      	adds	r2, #2
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	021b      	lsls	r3, r3, #8
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	3201      	adds	r2, #1
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	021b      	lsls	r3, r3, #8
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	7812      	ldrb	r2, [r2, #0]
 80091d8:	4313      	orrs	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]
	return rv;
 80091dc:	68fb      	ldr	r3, [r7, #12]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	607a      	str	r2, [r7, #4]
 80091fc:	887a      	ldrh	r2, [r7, #2]
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	887b      	ldrh	r3, [r7, #2]
 8009204:	0a1b      	lsrs	r3, r3, #8
 8009206:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	887a      	ldrh	r2, [r7, #2]
 8009210:	b2d2      	uxtb	r2, r2
 8009212:	701a      	strb	r2, [r3, #0]
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	0a1b      	lsrs	r3, r3, #8
 800923a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	607a      	str	r2, [r7, #4]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	701a      	strb	r2, [r3, #0]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	0a1b      	lsrs	r3, r3, #8
 800924c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	b2d2      	uxtb	r2, r2
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	0a1b      	lsrs	r3, r3, #8
 800925e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	701a      	strb	r2, [r3, #0]
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	1c53      	adds	r3, r2, #1
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	1c59      	adds	r1, r3, #1
 800929c:	6179      	str	r1, [r7, #20]
 800929e:	7812      	ldrb	r2, [r2, #0]
 80092a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	607b      	str	r3, [r7, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1f1      	bne.n	8009292 <mem_cpy+0x1a>
	}
}
 80092ae:	bf00      	nop
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092ba:	b480      	push	{r7}
 80092bc:	b087      	sub	sp, #28
 80092be:	af00      	add	r7, sp, #0
 80092c0:	60f8      	str	r0, [r7, #12]
 80092c2:	60b9      	str	r1, [r7, #8]
 80092c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	1c5a      	adds	r2, r3, #1
 80092ce:	617a      	str	r2, [r7, #20]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3b01      	subs	r3, #1
 80092da:	607b      	str	r3, [r7, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1f3      	bne.n	80092ca <mem_set+0x10>
}
 80092e2:	bf00      	nop
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80092f0:	b480      	push	{r7}
 80092f2:	b089      	sub	sp, #36	; 0x24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	61fb      	str	r3, [r7, #28]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	61fa      	str	r2, [r7, #28]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	4619      	mov	r1, r3
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	61ba      	str	r2, [r7, #24]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	1acb      	subs	r3, r1, r3
 800931c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3b01      	subs	r3, #1
 8009322:	607b      	str	r3, [r7, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <mem_cmp+0x40>
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0eb      	beq.n	8009308 <mem_cmp+0x18>

	return r;
 8009330:	697b      	ldr	r3, [r7, #20]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3724      	adds	r7, #36	; 0x24
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009348:	e002      	b.n	8009350 <chk_chr+0x12>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3301      	adds	r3, #1
 800934e:	607b      	str	r3, [r7, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d005      	beq.n	8009364 <chk_chr+0x26>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	4293      	cmp	r3, r2
 8009362:	d1f2      	bne.n	800934a <chk_chr+0xc>
	return *str;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	781b      	ldrb	r3, [r3, #0]
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800937e:	2300      	movs	r3, #0
 8009380:	60bb      	str	r3, [r7, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	e029      	b.n	80093dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009388:	4a27      	ldr	r2, [pc, #156]	; (8009428 <chk_lock+0xb4>)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	4413      	add	r3, r2
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01d      	beq.n	80093d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009396:	4a24      	ldr	r2, [pc, #144]	; (8009428 <chk_lock+0xb4>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	4413      	add	r3, r2
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d116      	bne.n	80093d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80093a8:	4a1f      	ldr	r2, [pc, #124]	; (8009428 <chk_lock+0xb4>)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	011b      	lsls	r3, r3, #4
 80093ae:	4413      	add	r3, r2
 80093b0:	3304      	adds	r3, #4
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d10c      	bne.n	80093d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80093bc:	4a1a      	ldr	r2, [pc, #104]	; (8009428 <chk_lock+0xb4>)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	011b      	lsls	r3, r3, #4
 80093c2:	4413      	add	r3, r2
 80093c4:	3308      	adds	r3, #8
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d102      	bne.n	80093d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80093d0:	e007      	b.n	80093e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80093d2:	2301      	movs	r3, #1
 80093d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d9d2      	bls.n	8009388 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d109      	bne.n	80093fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d102      	bne.n	80093f4 <chk_lock+0x80>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d101      	bne.n	80093f8 <chk_lock+0x84>
 80093f4:	2300      	movs	r3, #0
 80093f6:	e010      	b.n	800941a <chk_lock+0xa6>
 80093f8:	2312      	movs	r3, #18
 80093fa:	e00e      	b.n	800941a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d108      	bne.n	8009414 <chk_lock+0xa0>
 8009402:	4a09      	ldr	r2, [pc, #36]	; (8009428 <chk_lock+0xb4>)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	4413      	add	r3, r2
 800940a:	330c      	adds	r3, #12
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009412:	d101      	bne.n	8009418 <chk_lock+0xa4>
 8009414:	2310      	movs	r3, #16
 8009416:	e000      	b.n	800941a <chk_lock+0xa6>
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	20005e10 	.word	0x20005e10

0800942c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009432:	2300      	movs	r3, #0
 8009434:	607b      	str	r3, [r7, #4]
 8009436:	e002      	b.n	800943e <enq_lock+0x12>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3301      	adds	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d806      	bhi.n	8009452 <enq_lock+0x26>
 8009444:	4a09      	ldr	r2, [pc, #36]	; (800946c <enq_lock+0x40>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	4413      	add	r3, r2
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f2      	bne.n	8009438 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b02      	cmp	r3, #2
 8009456:	bf14      	ite	ne
 8009458:	2301      	movne	r3, #1
 800945a:	2300      	moveq	r3, #0
 800945c:	b2db      	uxtb	r3, r3
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20005e10 	.word	0x20005e10

08009470 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e01f      	b.n	80094c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009480:	4a41      	ldr	r2, [pc, #260]	; (8009588 <inc_lock+0x118>)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	4413      	add	r3, r2
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d113      	bne.n	80094ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009492:	4a3d      	ldr	r2, [pc, #244]	; (8009588 <inc_lock+0x118>)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	011b      	lsls	r3, r3, #4
 8009498:	4413      	add	r3, r2
 800949a:	3304      	adds	r3, #4
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d109      	bne.n	80094ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80094a6:	4a38      	ldr	r2, [pc, #224]	; (8009588 <inc_lock+0x118>)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	011b      	lsls	r3, r3, #4
 80094ac:	4413      	add	r3, r2
 80094ae:	3308      	adds	r3, #8
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d006      	beq.n	80094c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3301      	adds	r3, #1
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d9dc      	bls.n	8009480 <inc_lock+0x10>
 80094c6:	e000      	b.n	80094ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80094c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d132      	bne.n	8009536 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	e002      	b.n	80094dc <inc_lock+0x6c>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	3301      	adds	r3, #1
 80094da:	60fb      	str	r3, [r7, #12]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d806      	bhi.n	80094f0 <inc_lock+0x80>
 80094e2:	4a29      	ldr	r2, [pc, #164]	; (8009588 <inc_lock+0x118>)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	011b      	lsls	r3, r3, #4
 80094e8:	4413      	add	r3, r2
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1f2      	bne.n	80094d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d101      	bne.n	80094fa <inc_lock+0x8a>
 80094f6:	2300      	movs	r3, #0
 80094f8:	e040      	b.n	800957c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4922      	ldr	r1, [pc, #136]	; (8009588 <inc_lock+0x118>)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	440b      	add	r3, r1
 8009506:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	491e      	ldr	r1, [pc, #120]	; (8009588 <inc_lock+0x118>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	011b      	lsls	r3, r3, #4
 8009512:	440b      	add	r3, r1
 8009514:	3304      	adds	r3, #4
 8009516:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	695a      	ldr	r2, [r3, #20]
 800951c:	491a      	ldr	r1, [pc, #104]	; (8009588 <inc_lock+0x118>)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	440b      	add	r3, r1
 8009524:	3308      	adds	r3, #8
 8009526:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009528:	4a17      	ldr	r2, [pc, #92]	; (8009588 <inc_lock+0x118>)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	4413      	add	r3, r2
 8009530:	330c      	adds	r3, #12
 8009532:	2200      	movs	r2, #0
 8009534:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <inc_lock+0xe0>
 800953c:	4a12      	ldr	r2, [pc, #72]	; (8009588 <inc_lock+0x118>)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	011b      	lsls	r3, r3, #4
 8009542:	4413      	add	r3, r2
 8009544:	330c      	adds	r3, #12
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <inc_lock+0xe0>
 800954c:	2300      	movs	r3, #0
 800954e:	e015      	b.n	800957c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d108      	bne.n	8009568 <inc_lock+0xf8>
 8009556:	4a0c      	ldr	r2, [pc, #48]	; (8009588 <inc_lock+0x118>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	4413      	add	r3, r2
 800955e:	330c      	adds	r3, #12
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	3301      	adds	r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	e001      	b.n	800956c <inc_lock+0xfc>
 8009568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800956c:	4906      	ldr	r1, [pc, #24]	; (8009588 <inc_lock+0x118>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	440b      	add	r3, r1
 8009574:	330c      	adds	r3, #12
 8009576:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
}
 800957c:	4618      	mov	r0, r3
 800957e:	3714      	adds	r7, #20
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	20005e10 	.word	0x20005e10

0800958c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3b01      	subs	r3, #1
 8009598:	607b      	str	r3, [r7, #4]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d825      	bhi.n	80095ec <dec_lock+0x60>
		n = Files[i].ctr;
 80095a0:	4a17      	ldr	r2, [pc, #92]	; (8009600 <dec_lock+0x74>)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	4413      	add	r3, r2
 80095a8:	330c      	adds	r3, #12
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80095ae:	89fb      	ldrh	r3, [r7, #14]
 80095b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095b4:	d101      	bne.n	80095ba <dec_lock+0x2e>
 80095b6:	2300      	movs	r3, #0
 80095b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80095ba:	89fb      	ldrh	r3, [r7, #14]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <dec_lock+0x3a>
 80095c0:	89fb      	ldrh	r3, [r7, #14]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80095c6:	4a0e      	ldr	r2, [pc, #56]	; (8009600 <dec_lock+0x74>)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	4413      	add	r3, r2
 80095ce:	330c      	adds	r3, #12
 80095d0:	89fa      	ldrh	r2, [r7, #14]
 80095d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80095d4:	89fb      	ldrh	r3, [r7, #14]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d105      	bne.n	80095e6 <dec_lock+0x5a>
 80095da:	4a09      	ldr	r2, [pc, #36]	; (8009600 <dec_lock+0x74>)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	4413      	add	r3, r2
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	737b      	strb	r3, [r7, #13]
 80095ea:	e001      	b.n	80095f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80095ec:	2302      	movs	r3, #2
 80095ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80095f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20005e10 	.word	0x20005e10

08009604 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e010      	b.n	8009634 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009612:	4a0d      	ldr	r2, [pc, #52]	; (8009648 <clear_lock+0x44>)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	4413      	add	r3, r2
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	429a      	cmp	r2, r3
 8009620:	d105      	bne.n	800962e <clear_lock+0x2a>
 8009622:	4a09      	ldr	r2, [pc, #36]	; (8009648 <clear_lock+0x44>)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	4413      	add	r3, r2
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b01      	cmp	r3, #1
 8009638:	d9eb      	bls.n	8009612 <clear_lock+0xe>
	}
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	20005e10 	.word	0x20005e10

0800964c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	78db      	ldrb	r3, [r3, #3]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d034      	beq.n	80096ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009664:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	7858      	ldrb	r0, [r3, #1]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009670:	2301      	movs	r3, #1
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	f7ff fd40 	bl	80090f8 <disk_write>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <sync_window+0x38>
			res = FR_DISK_ERR;
 800967e:	2301      	movs	r3, #1
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e022      	b.n	80096ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a1b      	ldr	r3, [r3, #32]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	1ad2      	subs	r2, r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	429a      	cmp	r2, r3
 8009698:	d217      	bcs.n	80096ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	789b      	ldrb	r3, [r3, #2]
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	e010      	b.n	80096c4 <sync_window+0x78>
					wsect += fs->fsize;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	4413      	add	r3, r2
 80096aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7858      	ldrb	r0, [r3, #1]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096b6:	2301      	movs	r3, #1
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	f7ff fd1d 	bl	80090f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	613b      	str	r3, [r7, #16]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d8eb      	bhi.n	80096a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d01b      	beq.n	8009724 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff ffad 	bl	800964c <sync_window>
 80096f2:	4603      	mov	r3, r0
 80096f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d113      	bne.n	8009724 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7858      	ldrb	r0, [r3, #1]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009706:	2301      	movs	r3, #1
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	f7ff fcd5 	bl	80090b8 <disk_read>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009718:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800971a:	2301      	movs	r3, #1
 800971c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
	...

08009730 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff87 	bl	800964c <sync_window>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d158      	bne.n	80097fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b03      	cmp	r3, #3
 800974e:	d148      	bne.n	80097e2 <sync_fs+0xb2>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	791b      	ldrb	r3, [r3, #4]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d144      	bne.n	80097e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	3330      	adds	r3, #48	; 0x30
 800975c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fda9 	bl	80092ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3330      	adds	r3, #48	; 0x30
 800976c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009770:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff fd38 	bl	80091ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3330      	adds	r3, #48	; 0x30
 800977e:	4921      	ldr	r1, [pc, #132]	; (8009804 <sync_fs+0xd4>)
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff fd4d 	bl	8009220 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	3330      	adds	r3, #48	; 0x30
 800978a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800978e:	491e      	ldr	r1, [pc, #120]	; (8009808 <sync_fs+0xd8>)
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fd45 	bl	8009220 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3330      	adds	r3, #48	; 0x30
 800979a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	4619      	mov	r1, r3
 80097a4:	4610      	mov	r0, r2
 80097a6:	f7ff fd3b 	bl	8009220 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3330      	adds	r3, #48	; 0x30
 80097ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4610      	mov	r0, r2
 80097ba:	f7ff fd31 	bl	8009220 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	69db      	ldr	r3, [r3, #28]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	7858      	ldrb	r0, [r3, #1]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d6:	2301      	movs	r3, #1
 80097d8:	f7ff fc8e 	bl	80090f8 <disk_write>
			fs->fsi_flag = 0;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	785b      	ldrb	r3, [r3, #1]
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fca4 	bl	8009138 <disk_ioctl>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <sync_fs+0xca>
 80097f6:	2301      	movs	r3, #1
 80097f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	41615252 	.word	0x41615252
 8009808:	61417272 	.word	0x61417272

0800980c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	3b02      	subs	r3, #2
 800981a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	3b02      	subs	r3, #2
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	429a      	cmp	r2, r3
 8009826:	d301      	bcc.n	800982c <clust2sect+0x20>
 8009828:	2300      	movs	r3, #0
 800982a:	e008      	b.n	800983e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	895b      	ldrh	r3, [r3, #10]
 8009830:	461a      	mov	r2, r3
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	fb03 f202 	mul.w	r2, r3, r2
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	4413      	add	r3, r2
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b086      	sub	sp, #24
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d904      	bls.n	800986a <get_fat+0x20>
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d302      	bcc.n	8009870 <get_fat+0x26>
		val = 1;	/* Internal error */
 800986a:	2301      	movs	r3, #1
 800986c:	617b      	str	r3, [r7, #20]
 800986e:	e08f      	b.n	8009990 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009874:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	2b03      	cmp	r3, #3
 800987c:	d062      	beq.n	8009944 <get_fat+0xfa>
 800987e:	2b03      	cmp	r3, #3
 8009880:	dc7c      	bgt.n	800997c <get_fat+0x132>
 8009882:	2b01      	cmp	r3, #1
 8009884:	d002      	beq.n	800988c <get_fat+0x42>
 8009886:	2b02      	cmp	r3, #2
 8009888:	d042      	beq.n	8009910 <get_fat+0xc6>
 800988a:	e077      	b.n	800997c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	085b      	lsrs	r3, r3, #1
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6a1a      	ldr	r2, [r3, #32]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	0a5b      	lsrs	r3, r3, #9
 80098a2:	4413      	add	r3, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	6938      	ldr	r0, [r7, #16]
 80098a8:	f7ff ff14 	bl	80096d4 <move_window>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d167      	bne.n	8009982 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	60fa      	str	r2, [r7, #12]
 80098b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4413      	add	r3, r2
 80098c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6a1a      	ldr	r2, [r3, #32]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	0a5b      	lsrs	r3, r3, #9
 80098ce:	4413      	add	r3, r2
 80098d0:	4619      	mov	r1, r3
 80098d2:	6938      	ldr	r0, [r7, #16]
 80098d4:	f7ff fefe 	bl	80096d4 <move_window>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d153      	bne.n	8009986 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4413      	add	r3, r2
 80098e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80098ec:	021b      	lsls	r3, r3, #8
 80098ee:	461a      	mov	r2, r3
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <get_fat+0xbc>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	091b      	lsrs	r3, r3, #4
 8009904:	e002      	b.n	800990c <get_fat+0xc2>
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800990c:	617b      	str	r3, [r7, #20]
			break;
 800990e:	e03f      	b.n	8009990 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6a1a      	ldr	r2, [r3, #32]
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	0a1b      	lsrs	r3, r3, #8
 8009918:	4413      	add	r3, r2
 800991a:	4619      	mov	r1, r3
 800991c:	6938      	ldr	r0, [r7, #16]
 800991e:	f7ff fed9 	bl	80096d4 <move_window>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d130      	bne.n	800998a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009936:	4413      	add	r3, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fc1b 	bl	8009174 <ld_word>
 800993e:	4603      	mov	r3, r0
 8009940:	617b      	str	r3, [r7, #20]
			break;
 8009942:	e025      	b.n	8009990 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	6a1a      	ldr	r2, [r3, #32]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	09db      	lsrs	r3, r3, #7
 800994c:	4413      	add	r3, r2
 800994e:	4619      	mov	r1, r3
 8009950:	6938      	ldr	r0, [r7, #16]
 8009952:	f7ff febf 	bl	80096d4 <move_window>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d118      	bne.n	800998e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800996a:	4413      	add	r3, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff fc19 	bl	80091a4 <ld_dword>
 8009972:	4603      	mov	r3, r0
 8009974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009978:	617b      	str	r3, [r7, #20]
			break;
 800997a:	e009      	b.n	8009990 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800997c:	2301      	movs	r3, #1
 800997e:	617b      	str	r3, [r7, #20]
 8009980:	e006      	b.n	8009990 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800998e:	bf00      	nop
		}
	}

	return val;
 8009990:	697b      	ldr	r3, [r7, #20]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800999a:	b590      	push	{r4, r7, lr}
 800999c:	b089      	sub	sp, #36	; 0x24
 800999e:	af00      	add	r7, sp, #0
 80099a0:	60f8      	str	r0, [r7, #12]
 80099a2:	60b9      	str	r1, [r7, #8]
 80099a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80099a6:	2302      	movs	r3, #2
 80099a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	f240 80d2 	bls.w	8009b56 <put_fat+0x1bc>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	68ba      	ldr	r2, [r7, #8]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	f080 80cc 	bcs.w	8009b56 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	f000 8096 	beq.w	8009af4 <put_fat+0x15a>
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	f300 80cd 	bgt.w	8009b68 <put_fat+0x1ce>
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d002      	beq.n	80099d8 <put_fat+0x3e>
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d06e      	beq.n	8009ab4 <put_fat+0x11a>
 80099d6:	e0c7      	b.n	8009b68 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	085b      	lsrs	r3, r3, #1
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	4413      	add	r3, r2
 80099e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a1a      	ldr	r2, [r3, #32]
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	0a5b      	lsrs	r3, r3, #9
 80099ee:	4413      	add	r3, r2
 80099f0:	4619      	mov	r1, r3
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fe6e 	bl	80096d4 <move_window>
 80099f8:	4603      	mov	r3, r0
 80099fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099fc:	7ffb      	ldrb	r3, [r7, #31]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f040 80ab 	bne.w	8009b5a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	1c59      	adds	r1, r3, #1
 8009a0e:	61b9      	str	r1, [r7, #24]
 8009a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a14:	4413      	add	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00d      	beq.n	8009a3e <put_fat+0xa4>
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	b25b      	sxtb	r3, r3
 8009a28:	f003 030f 	and.w	r3, r3, #15
 8009a2c:	b25a      	sxtb	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	b25b      	sxtb	r3, r3
 8009a36:	4313      	orrs	r3, r2
 8009a38:	b25b      	sxtb	r3, r3
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	e001      	b.n	8009a42 <put_fat+0xa8>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	0a5b      	lsrs	r3, r3, #9
 8009a54:	4413      	add	r3, r2
 8009a56:	4619      	mov	r1, r3
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f7ff fe3b 	bl	80096d4 <move_window>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a62:	7ffb      	ldrb	r3, [r7, #31]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d17a      	bne.n	8009b5e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a74:	4413      	add	r3, r2
 8009a76:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <put_fat+0xf0>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	091b      	lsrs	r3, r3, #4
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	e00e      	b.n	8009aa8 <put_fat+0x10e>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	b25b      	sxtb	r3, r3
 8009a90:	f023 030f 	bic.w	r3, r3, #15
 8009a94:	b25a      	sxtb	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	0a1b      	lsrs	r3, r3, #8
 8009a9a:	b25b      	sxtb	r3, r3
 8009a9c:	f003 030f 	and.w	r3, r3, #15
 8009aa0:	b25b      	sxtb	r3, r3
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	70da      	strb	r2, [r3, #3]
			break;
 8009ab2:	e059      	b.n	8009b68 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6a1a      	ldr	r2, [r3, #32]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	4413      	add	r3, r2
 8009abe:	4619      	mov	r1, r3
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff fe07 	bl	80096d4 <move_window>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009aca:	7ffb      	ldrb	r3, [r7, #31]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d148      	bne.n	8009b62 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009ade:	4413      	add	r3, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	b292      	uxth	r2, r2
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fb7f 	bl	80091ea <st_word>
			fs->wflag = 1;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	70da      	strb	r2, [r3, #3]
			break;
 8009af2:	e039      	b.n	8009b68 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6a1a      	ldr	r2, [r3, #32]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	09db      	lsrs	r3, r3, #7
 8009afc:	4413      	add	r3, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fde7 	bl	80096d4 <move_window>
 8009b06:	4603      	mov	r3, r0
 8009b08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b0a:	7ffb      	ldrb	r3, [r7, #31]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d12a      	bne.n	8009b66 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b24:	4413      	add	r3, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fb3c 	bl	80091a4 <ld_dword>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b32:	4323      	orrs	r3, r4
 8009b34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b44:	4413      	add	r3, r2
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff fb69 	bl	8009220 <st_dword>
			fs->wflag = 1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	70da      	strb	r2, [r3, #3]
			break;
 8009b54:	e008      	b.n	8009b68 <put_fat+0x1ce>
		}
	}
 8009b56:	bf00      	nop
 8009b58:	e006      	b.n	8009b68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b5a:	bf00      	nop
 8009b5c:	e004      	b.n	8009b68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b5e:	bf00      	nop
 8009b60:	e002      	b.n	8009b68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b62:	bf00      	nop
 8009b64:	e000      	b.n	8009b68 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009b66:	bf00      	nop
	return res;
 8009b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3724      	adds	r7, #36	; 0x24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd90      	pop	{r4, r7, pc}

08009b72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b088      	sub	sp, #32
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d904      	bls.n	8009b98 <remove_chain+0x26>
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	695b      	ldr	r3, [r3, #20]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d301      	bcc.n	8009b9c <remove_chain+0x2a>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e04b      	b.n	8009c34 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00c      	beq.n	8009bbc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	69b8      	ldr	r0, [r7, #24]
 8009baa:	f7ff fef6 	bl	800999a <put_fat>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009bb2:	7ffb      	ldrb	r3, [r7, #31]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <remove_chain+0x4a>
 8009bb8:	7ffb      	ldrb	r3, [r7, #31]
 8009bba:	e03b      	b.n	8009c34 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff fe43 	bl	800984a <get_fat>
 8009bc4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d031      	beq.n	8009c30 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d101      	bne.n	8009bd6 <remove_chain+0x64>
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	e02e      	b.n	8009c34 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bdc:	d101      	bne.n	8009be2 <remove_chain+0x70>
 8009bde:	2301      	movs	r3, #1
 8009be0:	e028      	b.n	8009c34 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009be2:	2200      	movs	r2, #0
 8009be4:	68b9      	ldr	r1, [r7, #8]
 8009be6:	69b8      	ldr	r0, [r7, #24]
 8009be8:	f7ff fed7 	bl	800999a <put_fat>
 8009bec:	4603      	mov	r3, r0
 8009bee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009bf0:	7ffb      	ldrb	r3, [r7, #31]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <remove_chain+0x88>
 8009bf6:	7ffb      	ldrb	r3, [r7, #31]
 8009bf8:	e01c      	b.n	8009c34 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	3b02      	subs	r3, #2
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d20b      	bcs.n	8009c20 <remove_chain+0xae>
			fs->free_clst++;
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d3c6      	bcc.n	8009bbc <remove_chain+0x4a>
 8009c2e:	e000      	b.n	8009c32 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c30:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3720      	adds	r7, #32
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b088      	sub	sp, #32
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10d      	bne.n	8009c6e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d004      	beq.n	8009c68 <create_chain+0x2c>
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	69ba      	ldr	r2, [r7, #24]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d31b      	bcc.n	8009ca0 <create_chain+0x64>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	e018      	b.n	8009ca0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fdea 	bl	800984a <get_fat>
 8009c76:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d801      	bhi.n	8009c82 <create_chain+0x46>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e070      	b.n	8009d64 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c88:	d101      	bne.n	8009c8e <create_chain+0x52>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	e06a      	b.n	8009d64 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d201      	bcs.n	8009c9c <create_chain+0x60>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	e063      	b.n	8009d64 <create_chain+0x128>
		scl = clst;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	69fa      	ldr	r2, [r7, #28]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d307      	bcc.n	8009cc4 <create_chain+0x88>
				ncl = 2;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d901      	bls.n	8009cc4 <create_chain+0x88>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e04f      	b.n	8009d64 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009cc4:	69f9      	ldr	r1, [r7, #28]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff fdbf 	bl	800984a <get_fat>
 8009ccc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00e      	beq.n	8009cf2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d003      	beq.n	8009ce2 <create_chain+0xa6>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ce0:	d101      	bne.n	8009ce6 <create_chain+0xaa>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	e03e      	b.n	8009d64 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009ce6:	69fa      	ldr	r2, [r7, #28]
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d1da      	bne.n	8009ca4 <create_chain+0x68>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e038      	b.n	8009d64 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009cf2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cf8:	69f9      	ldr	r1, [r7, #28]
 8009cfa:	6938      	ldr	r0, [r7, #16]
 8009cfc:	f7ff fe4d 	bl	800999a <put_fat>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d109      	bne.n	8009d1e <create_chain+0xe2>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d006      	beq.n	8009d1e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d10:	69fa      	ldr	r2, [r7, #28]
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6938      	ldr	r0, [r7, #16]
 8009d16:	f7ff fe40 	bl	800999a <put_fat>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d116      	bne.n	8009d52 <create_chain+0x116>
		fs->last_clst = ncl;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	691a      	ldr	r2, [r3, #16]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	3b02      	subs	r3, #2
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d804      	bhi.n	8009d42 <create_chain+0x106>
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	691b      	ldr	r3, [r3, #16]
 8009d3c:	1e5a      	subs	r2, r3, #1
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	791b      	ldrb	r3, [r3, #4]
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	711a      	strb	r2, [r3, #4]
 8009d50:	e007      	b.n	8009d62 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d102      	bne.n	8009d5e <create_chain+0x122>
 8009d58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d5c:	e000      	b.n	8009d60 <create_chain+0x124>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009d62:	69fb      	ldr	r3, [r7, #28]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3720      	adds	r7, #32
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	3304      	adds	r3, #4
 8009d82:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	0a5b      	lsrs	r3, r3, #9
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	8952      	ldrh	r2, [r2, #10]
 8009d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d90:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	613a      	str	r2, [r7, #16]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <clmt_clust+0x3a>
 8009da2:	2300      	movs	r3, #0
 8009da4:	e010      	b.n	8009dc8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d307      	bcc.n	8009dbe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	617b      	str	r3, [r7, #20]
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	3304      	adds	r3, #4
 8009dba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dbc:	e7e9      	b.n	8009d92 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009dbe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	4413      	add	r3, r2
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dea:	d204      	bcs.n	8009df6 <dir_sdi+0x22>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	f003 031f 	and.w	r3, r3, #31
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <dir_sdi+0x26>
		return FR_INT_ERR;
 8009df6:	2302      	movs	r3, #2
 8009df8:	e063      	b.n	8009ec2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	683a      	ldr	r2, [r7, #0]
 8009dfe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <dir_sdi+0x46>
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d902      	bls.n	8009e1a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10c      	bne.n	8009e3a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	095b      	lsrs	r3, r3, #5
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	8912      	ldrh	r2, [r2, #8]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d301      	bcc.n	8009e30 <dir_sdi+0x5c>
 8009e2c:	2302      	movs	r3, #2
 8009e2e:	e048      	b.n	8009ec2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	61da      	str	r2, [r3, #28]
 8009e38:	e029      	b.n	8009e8e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	895b      	ldrh	r3, [r3, #10]
 8009e3e:	025b      	lsls	r3, r3, #9
 8009e40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e42:	e019      	b.n	8009e78 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6979      	ldr	r1, [r7, #20]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff fcfe 	bl	800984a <get_fat>
 8009e4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e56:	d101      	bne.n	8009e5c <dir_sdi+0x88>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e032      	b.n	8009ec2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d904      	bls.n	8009e6c <dir_sdi+0x98>
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d301      	bcc.n	8009e70 <dir_sdi+0x9c>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e028      	b.n	8009ec2 <dir_sdi+0xee>
			ofs -= csz;
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d2e1      	bcs.n	8009e44 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009e80:	6979      	ldr	r1, [r7, #20]
 8009e82:	6938      	ldr	r0, [r7, #16]
 8009e84:	f7ff fcc2 	bl	800980c <clust2sect>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <dir_sdi+0xcc>
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e010      	b.n	8009ec2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	0a5b      	lsrs	r3, r3, #9
 8009ea8:	441a      	add	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eba:	441a      	add	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	3320      	adds	r3, #32
 8009ee0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <dir_next+0x28>
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef0:	d301      	bcc.n	8009ef6 <dir_next+0x2c>
 8009ef2:	2304      	movs	r3, #4
 8009ef4:	e0aa      	b.n	800a04c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f040 8098 	bne.w	800a032 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	69db      	ldr	r3, [r3, #28]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10b      	bne.n	8009f2c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	095b      	lsrs	r3, r3, #5
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	8912      	ldrh	r2, [r2, #8]
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f0c0 8088 	bcc.w	800a032 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	61da      	str	r2, [r3, #28]
 8009f28:	2304      	movs	r3, #4
 8009f2a:	e08f      	b.n	800a04c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	0a5b      	lsrs	r3, r3, #9
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	8952      	ldrh	r2, [r2, #10]
 8009f34:	3a01      	subs	r2, #1
 8009f36:	4013      	ands	r3, r2
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d17a      	bne.n	800a032 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	699b      	ldr	r3, [r3, #24]
 8009f42:	4619      	mov	r1, r3
 8009f44:	4610      	mov	r0, r2
 8009f46:	f7ff fc80 	bl	800984a <get_fat>
 8009f4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d801      	bhi.n	8009f56 <dir_next+0x8c>
 8009f52:	2302      	movs	r3, #2
 8009f54:	e07a      	b.n	800a04c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f5c:	d101      	bne.n	8009f62 <dir_next+0x98>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e074      	b.n	800a04c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d358      	bcc.n	800a01e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	61da      	str	r2, [r3, #28]
 8009f78:	2304      	movs	r3, #4
 8009f7a:	e067      	b.n	800a04c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	4619      	mov	r1, r3
 8009f84:	4610      	mov	r0, r2
 8009f86:	f7ff fe59 	bl	8009c3c <create_chain>
 8009f8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d101      	bne.n	8009f96 <dir_next+0xcc>
 8009f92:	2307      	movs	r3, #7
 8009f94:	e05a      	b.n	800a04c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d101      	bne.n	8009fa0 <dir_next+0xd6>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e055      	b.n	800a04c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa6:	d101      	bne.n	8009fac <dir_next+0xe2>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e04f      	b.n	800a04c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f7ff fb4d 	bl	800964c <sync_window>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <dir_next+0xf2>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e047      	b.n	800a04c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3330      	adds	r3, #48	; 0x30
 8009fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff f977 	bl	80092ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	6979      	ldr	r1, [r7, #20]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f7ff fc1a 	bl	800980c <clust2sect>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8009fde:	e012      	b.n	800a006 <dir_next+0x13c>
						fs->wflag = 1;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f7ff fb30 	bl	800964c <sync_window>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <dir_next+0x12c>
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e02a      	b.n	800a04c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	613b      	str	r3, [r7, #16]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	62da      	str	r2, [r3, #44]	; 0x2c
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	895b      	ldrh	r3, [r3, #10]
 800a00a:	461a      	mov	r2, r3
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	4293      	cmp	r3, r2
 800a010:	d3e6      	bcc.n	8009fe0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	1ad2      	subs	r2, r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a024:	6979      	ldr	r1, [r7, #20]
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fbf0 	bl	800980c <clust2sect>
 800a02c:	4602      	mov	r2, r0
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a044:	441a      	add	r2, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a064:	2100      	movs	r1, #0
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff feb4 	bl	8009dd4 <dir_sdi>
 800a06c:	4603      	mov	r3, r0
 800a06e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d12b      	bne.n	800a0ce <dir_alloc+0x7a>
		n = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	4619      	mov	r1, r3
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f7ff fb27 	bl	80096d4 <move_window>
 800a086:	4603      	mov	r3, r0
 800a088:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d11d      	bne.n	800a0cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a1b      	ldr	r3, [r3, #32]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2be5      	cmp	r3, #229	; 0xe5
 800a098:	d004      	beq.n	800a0a4 <dir_alloc+0x50>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d107      	bne.n	800a0b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	613b      	str	r3, [r7, #16]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d102      	bne.n	800a0b8 <dir_alloc+0x64>
 800a0b2:	e00c      	b.n	800a0ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff ff05 	bl	8009eca <dir_next>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a0c4:	7dfb      	ldrb	r3, [r7, #23]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0d7      	beq.n	800a07a <dir_alloc+0x26>
 800a0ca:	e000      	b.n	800a0ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a0cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d101      	bne.n	800a0d8 <dir_alloc+0x84>
 800a0d4:	2307      	movs	r3, #7
 800a0d6:	75fb      	strb	r3, [r7, #23]
	return res;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	331a      	adds	r3, #26
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff f83f 	bl	8009174 <ld_word>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d109      	bne.n	800a116 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	3314      	adds	r3, #20
 800a106:	4618      	mov	r0, r3
 800a108:	f7ff f834 	bl	8009174 <ld_word>
 800a10c:	4603      	mov	r3, r0
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	68fa      	ldr	r2, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a116:	68fb      	ldr	r3, [r7, #12]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	331a      	adds	r3, #26
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	b292      	uxth	r2, r2
 800a134:	4611      	mov	r1, r2
 800a136:	4618      	mov	r0, r3
 800a138:	f7ff f857 	bl	80091ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b03      	cmp	r3, #3
 800a142:	d109      	bne.n	800a158 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f103 0214 	add.w	r2, r3, #20
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	0c1b      	lsrs	r3, r3, #16
 800a14e:	b29b      	uxth	r3, r3
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f7ff f849 	bl	80091ea <st_word>
	}
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a16e:	2100      	movs	r1, #0
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff fe2f 	bl	8009dd4 <dir_sdi>
 800a176:	4603      	mov	r3, r0
 800a178:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a17a:	7dfb      	ldrb	r3, [r7, #23]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <dir_find+0x24>
 800a180:	7dfb      	ldrb	r3, [r7, #23]
 800a182:	e03e      	b.n	800a202 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	69db      	ldr	r3, [r3, #28]
 800a188:	4619      	mov	r1, r3
 800a18a:	6938      	ldr	r0, [r7, #16]
 800a18c:	f7ff faa2 	bl	80096d4 <move_window>
 800a190:	4603      	mov	r3, r0
 800a192:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a194:	7dfb      	ldrb	r3, [r7, #23]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d12f      	bne.n	800a1fa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d102      	bne.n	800a1ae <dir_find+0x4e>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	75fb      	strb	r3, [r7, #23]
 800a1ac:	e028      	b.n	800a200 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	330b      	adds	r3, #11
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a1b      	ldr	r3, [r3, #32]
 800a1c4:	330b      	adds	r3, #11
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	f003 0308 	and.w	r3, r3, #8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10a      	bne.n	800a1e6 <dir_find+0x86>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a18      	ldr	r0, [r3, #32]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3324      	adds	r3, #36	; 0x24
 800a1d8:	220b      	movs	r2, #11
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f7ff f888 	bl	80092f0 <mem_cmp>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00b      	beq.n	800a1fe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff fe6e 	bl	8009eca <dir_next>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d0c5      	beq.n	800a184 <dir_find+0x24>
 800a1f8:	e002      	b.n	800a200 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a1fa:	bf00      	nop
 800a1fc:	e000      	b.n	800a200 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1fe:	bf00      	nop

	return res;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a218:	2101      	movs	r1, #1
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff ff1a 	bl	800a054 <dir_alloc>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d11c      	bne.n	800a264 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	4619      	mov	r1, r3
 800a230:	68b8      	ldr	r0, [r7, #8]
 800a232:	f7ff fa4f 	bl	80096d4 <move_window>
 800a236:	4603      	mov	r3, r0
 800a238:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d111      	bne.n	800a264 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	2220      	movs	r2, #32
 800a246:	2100      	movs	r1, #0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7ff f836 	bl	80092ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a18      	ldr	r0, [r3, #32]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3324      	adds	r3, #36	; 0x24
 800a256:	220b      	movs	r2, #11
 800a258:	4619      	mov	r1, r3
 800a25a:	f7ff f80d 	bl	8009278 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	2201      	movs	r2, #1
 800a262:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a264:	7bfb      	ldrb	r3, [r7, #15]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3710      	adds	r7, #16
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
	...

0800a270 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	3324      	adds	r3, #36	; 0x24
 800a284:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a286:	220b      	movs	r2, #11
 800a288:	2120      	movs	r1, #32
 800a28a:	68b8      	ldr	r0, [r7, #8]
 800a28c:	f7ff f815 	bl	80092ba <mem_set>
	si = i = 0; ni = 8;
 800a290:	2300      	movs	r3, #0
 800a292:	613b      	str	r3, [r7, #16]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	61fb      	str	r3, [r7, #28]
 800a298:	2308      	movs	r3, #8
 800a29a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	61fa      	str	r2, [r7, #28]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2aa:	7efb      	ldrb	r3, [r7, #27]
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d94e      	bls.n	800a34e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a2b0:	7efb      	ldrb	r3, [r7, #27]
 800a2b2:	2b2f      	cmp	r3, #47	; 0x2f
 800a2b4:	d006      	beq.n	800a2c4 <create_name+0x54>
 800a2b6:	7efb      	ldrb	r3, [r7, #27]
 800a2b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a2ba:	d110      	bne.n	800a2de <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a2bc:	e002      	b.n	800a2c4 <create_name+0x54>
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	61fb      	str	r3, [r7, #28]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b2f      	cmp	r3, #47	; 0x2f
 800a2ce:	d0f6      	beq.n	800a2be <create_name+0x4e>
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a2da:	d0f0      	beq.n	800a2be <create_name+0x4e>
			break;
 800a2dc:	e038      	b.n	800a350 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a2de:	7efb      	ldrb	r3, [r7, #27]
 800a2e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2e2:	d003      	beq.n	800a2ec <create_name+0x7c>
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d30c      	bcc.n	800a306 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b0b      	cmp	r3, #11
 800a2f0:	d002      	beq.n	800a2f8 <create_name+0x88>
 800a2f2:	7efb      	ldrb	r3, [r7, #27]
 800a2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f6:	d001      	beq.n	800a2fc <create_name+0x8c>
 800a2f8:	2306      	movs	r3, #6
 800a2fa:	e044      	b.n	800a386 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a2fc:	2308      	movs	r3, #8
 800a2fe:	613b      	str	r3, [r7, #16]
 800a300:	230b      	movs	r3, #11
 800a302:	617b      	str	r3, [r7, #20]
			continue;
 800a304:	e022      	b.n	800a34c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a306:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da04      	bge.n	800a318 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a30e:	7efb      	ldrb	r3, [r7, #27]
 800a310:	3b80      	subs	r3, #128	; 0x80
 800a312:	4a1f      	ldr	r2, [pc, #124]	; (800a390 <create_name+0x120>)
 800a314:	5cd3      	ldrb	r3, [r2, r3]
 800a316:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a318:	7efb      	ldrb	r3, [r7, #27]
 800a31a:	4619      	mov	r1, r3
 800a31c:	481d      	ldr	r0, [pc, #116]	; (800a394 <create_name+0x124>)
 800a31e:	f7ff f80e 	bl	800933e <chk_chr>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <create_name+0xbc>
 800a328:	2306      	movs	r3, #6
 800a32a:	e02c      	b.n	800a386 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a32c:	7efb      	ldrb	r3, [r7, #27]
 800a32e:	2b60      	cmp	r3, #96	; 0x60
 800a330:	d905      	bls.n	800a33e <create_name+0xce>
 800a332:	7efb      	ldrb	r3, [r7, #27]
 800a334:	2b7a      	cmp	r3, #122	; 0x7a
 800a336:	d802      	bhi.n	800a33e <create_name+0xce>
 800a338:	7efb      	ldrb	r3, [r7, #27]
 800a33a:	3b20      	subs	r3, #32
 800a33c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	613a      	str	r2, [r7, #16]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	4413      	add	r3, r2
 800a348:	7efa      	ldrb	r2, [r7, #27]
 800a34a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a34c:	e7a6      	b.n	800a29c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a34e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	441a      	add	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <create_name+0xf4>
 800a360:	2306      	movs	r3, #6
 800a362:	e010      	b.n	800a386 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2be5      	cmp	r3, #229	; 0xe5
 800a36a:	d102      	bne.n	800a372 <create_name+0x102>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2205      	movs	r2, #5
 800a370:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a372:	7efb      	ldrb	r3, [r7, #27]
 800a374:	2b20      	cmp	r3, #32
 800a376:	d801      	bhi.n	800a37c <create_name+0x10c>
 800a378:	2204      	movs	r2, #4
 800a37a:	e000      	b.n	800a37e <create_name+0x10e>
 800a37c:	2200      	movs	r2, #0
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	330b      	adds	r3, #11
 800a382:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a384:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a386:	4618      	mov	r0, r3
 800a388:	3720      	adds	r7, #32
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	08012fc0 	.word	0x08012fc0
 800a394:	08012eb8 	.word	0x08012eb8

0800a398 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3ac:	e002      	b.n	800a3b4 <follow_path+0x1c>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	603b      	str	r3, [r7, #0]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b2f      	cmp	r3, #47	; 0x2f
 800a3ba:	d0f8      	beq.n	800a3ae <follow_path+0x16>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	2b5c      	cmp	r3, #92	; 0x5c
 800a3c2:	d0f4      	beq.n	800a3ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b1f      	cmp	r3, #31
 800a3d0:	d80a      	bhi.n	800a3e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2280      	movs	r2, #128	; 0x80
 800a3d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a3da:	2100      	movs	r1, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fcf9 	bl	8009dd4 <dir_sdi>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]
 800a3e6:	e043      	b.n	800a470 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3e8:	463b      	mov	r3, r7
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff ff3f 	bl	800a270 <create_name>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3f6:	7dfb      	ldrb	r3, [r7, #23]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d134      	bne.n	800a466 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff feaf 	bl	800a160 <dir_find>
 800a402:	4603      	mov	r3, r0
 800a404:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a40c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a414:	7dfb      	ldrb	r3, [r7, #23]
 800a416:	2b04      	cmp	r3, #4
 800a418:	d127      	bne.n	800a46a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	f003 0304 	and.w	r3, r3, #4
 800a420:	2b00      	cmp	r3, #0
 800a422:	d122      	bne.n	800a46a <follow_path+0xd2>
 800a424:	2305      	movs	r3, #5
 800a426:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a428:	e01f      	b.n	800a46a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a42a:	7afb      	ldrb	r3, [r7, #11]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d11c      	bne.n	800a46e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	799b      	ldrb	r3, [r3, #6]
 800a438:	f003 0310 	and.w	r3, r3, #16
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a440:	2305      	movs	r3, #5
 800a442:	75fb      	strb	r3, [r7, #23]
 800a444:	e014      	b.n	800a470 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a454:	4413      	add	r3, r2
 800a456:	4619      	mov	r1, r3
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f7ff fe42 	bl	800a0e2 <ld_clust>
 800a45e:	4602      	mov	r2, r0
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a464:	e7c0      	b.n	800a3e8 <follow_path+0x50>
			if (res != FR_OK) break;
 800a466:	bf00      	nop
 800a468:	e002      	b.n	800a470 <follow_path+0xd8>
				break;
 800a46a:	bf00      	nop
 800a46c:	e000      	b.n	800a470 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a46e:	bf00      	nop
			}
		}
	}

	return res;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3718      	adds	r7, #24
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b087      	sub	sp, #28
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a486:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d031      	beq.n	800a4f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	e002      	b.n	800a49e <get_ldnumber+0x24>
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	3301      	adds	r3, #1
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d903      	bls.n	800a4ae <get_ldnumber+0x34>
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b3a      	cmp	r3, #58	; 0x3a
 800a4ac:	d1f4      	bne.n	800a498 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	2b3a      	cmp	r3, #58	; 0x3a
 800a4b4:	d11c      	bne.n	800a4f0 <get_ldnumber+0x76>
			tp = *path;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	60fa      	str	r2, [r7, #12]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	3b30      	subs	r3, #48	; 0x30
 800a4c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b09      	cmp	r3, #9
 800a4cc:	d80e      	bhi.n	800a4ec <get_ldnumber+0x72>
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d10a      	bne.n	800a4ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d107      	bne.n	800a4ec <get_ldnumber+0x72>
					vol = (int)i;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	e002      	b.n	800a4f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4f4:	693b      	ldr	r3, [r7, #16]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
	...

0800a504 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	70da      	strb	r2, [r3, #3]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a51a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a51c:	6839      	ldr	r1, [r7, #0]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f7ff f8d8 	bl	80096d4 <move_window>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <check_fs+0x2a>
 800a52a:	2304      	movs	r3, #4
 800a52c:	e038      	b.n	800a5a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	3330      	adds	r3, #48	; 0x30
 800a532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fe1c 	bl	8009174 <ld_word>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a544:	429a      	cmp	r2, r3
 800a546:	d001      	beq.n	800a54c <check_fs+0x48>
 800a548:	2303      	movs	r3, #3
 800a54a:	e029      	b.n	800a5a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a552:	2be9      	cmp	r3, #233	; 0xe9
 800a554:	d009      	beq.n	800a56a <check_fs+0x66>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a55c:	2beb      	cmp	r3, #235	; 0xeb
 800a55e:	d11e      	bne.n	800a59e <check_fs+0x9a>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a566:	2b90      	cmp	r3, #144	; 0x90
 800a568:	d119      	bne.n	800a59e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3330      	adds	r3, #48	; 0x30
 800a56e:	3336      	adds	r3, #54	; 0x36
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fe17 	bl	80091a4 <ld_dword>
 800a576:	4603      	mov	r3, r0
 800a578:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a57c:	4a0a      	ldr	r2, [pc, #40]	; (800a5a8 <check_fs+0xa4>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d101      	bne.n	800a586 <check_fs+0x82>
 800a582:	2300      	movs	r3, #0
 800a584:	e00c      	b.n	800a5a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	3330      	adds	r3, #48	; 0x30
 800a58a:	3352      	adds	r3, #82	; 0x52
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fe09 	bl	80091a4 <ld_dword>
 800a592:	4603      	mov	r3, r0
 800a594:	4a05      	ldr	r2, [pc, #20]	; (800a5ac <check_fs+0xa8>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d101      	bne.n	800a59e <check_fs+0x9a>
 800a59a:	2300      	movs	r3, #0
 800a59c:	e000      	b.n	800a5a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a59e:	2302      	movs	r3, #2
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	00544146 	.word	0x00544146
 800a5ac:	33544146 	.word	0x33544146

0800a5b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b096      	sub	sp, #88	; 0x58
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff ff58 	bl	800a47a <get_ldnumber>
 800a5ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	da01      	bge.n	800a5d6 <find_volume+0x26>
 800a5d2:	230b      	movs	r3, #11
 800a5d4:	e22d      	b.n	800aa32 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a5d6:	4aa1      	ldr	r2, [pc, #644]	; (800a85c <find_volume+0x2ac>)
 800a5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d101      	bne.n	800a5ea <find_volume+0x3a>
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	e223      	b.n	800aa32 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	f023 0301 	bic.w	r3, r3, #1
 800a5f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d01a      	beq.n	800a636 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	785b      	ldrb	r3, [r3, #1]
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fd17 	bl	8009038 <disk_status>
 800a60a:	4603      	mov	r3, r0
 800a60c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a610:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a61c:	79fb      	ldrb	r3, [r7, #7]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <find_volume+0x82>
 800a622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a626:	f003 0304 	and.w	r3, r3, #4
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a62e:	230a      	movs	r3, #10
 800a630:	e1ff      	b.n	800aa32 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a632:	2300      	movs	r3, #0
 800a634:	e1fd      	b.n	800aa32 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fd0f 	bl	800906c <disk_initialize>
 800a64e:	4603      	mov	r3, r0
 800a650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a660:	2303      	movs	r3, #3
 800a662:	e1e6      	b.n	800aa32 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d007      	beq.n	800a67a <find_volume+0xca>
 800a66a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a66e:	f003 0304 	and.w	r3, r3, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a676:	230a      	movs	r3, #10
 800a678:	e1db      	b.n	800aa32 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a67e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a680:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a682:	f7ff ff3f 	bl	800a504 <check_fs>
 800a686:	4603      	mov	r3, r0
 800a688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a68c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a690:	2b02      	cmp	r3, #2
 800a692:	d149      	bne.n	800a728 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a694:	2300      	movs	r3, #0
 800a696:	643b      	str	r3, [r7, #64]	; 0x40
 800a698:	e01e      	b.n	800a6d8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a2:	011b      	lsls	r3, r3, #4
 800a6a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a6a8:	4413      	add	r3, r2
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d006      	beq.n	800a6c4 <find_volume+0x114>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	3308      	adds	r3, #8
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fd72 	bl	80091a4 <ld_dword>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	e000      	b.n	800a6c6 <find_volume+0x116>
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	3358      	adds	r3, #88	; 0x58
 800a6cc:	443b      	add	r3, r7
 800a6ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d9dd      	bls.n	800a69a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a6de:	2300      	movs	r3, #0
 800a6e0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <find_volume+0x13e>
 800a6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ea:	3b01      	subs	r3, #1
 800a6ec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a6ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	3358      	adds	r3, #88	; 0x58
 800a6f4:	443b      	add	r3, r7
 800a6f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a6fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a6fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <find_volume+0x15e>
 800a702:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a706:	f7ff fefd 	bl	800a504 <check_fs>
 800a70a:	4603      	mov	r3, r0
 800a70c:	e000      	b.n	800a710 <find_volume+0x160>
 800a70e:	2303      	movs	r3, #3
 800a710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d905      	bls.n	800a728 <find_volume+0x178>
 800a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71e:	3301      	adds	r3, #1
 800a720:	643b      	str	r3, [r7, #64]	; 0x40
 800a722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a724:	2b03      	cmp	r3, #3
 800a726:	d9e2      	bls.n	800a6ee <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d101      	bne.n	800a734 <find_volume+0x184>
 800a730:	2301      	movs	r3, #1
 800a732:	e17e      	b.n	800aa32 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a734:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d901      	bls.n	800a740 <find_volume+0x190>
 800a73c:	230d      	movs	r3, #13
 800a73e:	e178      	b.n	800aa32 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	3330      	adds	r3, #48	; 0x30
 800a744:	330b      	adds	r3, #11
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fd14 	bl	8009174 <ld_word>
 800a74c:	4603      	mov	r3, r0
 800a74e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a752:	d001      	beq.n	800a758 <find_volume+0x1a8>
 800a754:	230d      	movs	r3, #13
 800a756:	e16c      	b.n	800aa32 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75a:	3330      	adds	r3, #48	; 0x30
 800a75c:	3316      	adds	r3, #22
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fd08 	bl	8009174 <ld_word>
 800a764:	4603      	mov	r3, r0
 800a766:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <find_volume+0x1cc>
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	3330      	adds	r3, #48	; 0x30
 800a772:	3324      	adds	r3, #36	; 0x24
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fd15 	bl	80091a4 <ld_dword>
 800a77a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a780:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a784:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	789b      	ldrb	r3, [r3, #2]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d005      	beq.n	800a7a0 <find_volume+0x1f0>
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	789b      	ldrb	r3, [r3, #2]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d001      	beq.n	800a7a0 <find_volume+0x1f0>
 800a79c:	230d      	movs	r3, #13
 800a79e:	e148      	b.n	800aa32 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	789b      	ldrb	r3, [r3, #2]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7a8:	fb02 f303 	mul.w	r3, r2, r3
 800a7ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7bc:	895b      	ldrh	r3, [r3, #10]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d008      	beq.n	800a7d4 <find_volume+0x224>
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	895b      	ldrh	r3, [r3, #10]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	895b      	ldrh	r3, [r3, #10]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <find_volume+0x228>
 800a7d4:	230d      	movs	r3, #13
 800a7d6:	e12c      	b.n	800aa32 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	3330      	adds	r3, #48	; 0x30
 800a7dc:	3311      	adds	r3, #17
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fcc8 	bl	8009174 <ld_word>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	891b      	ldrh	r3, [r3, #8]
 800a7f0:	f003 030f 	and.w	r3, r3, #15
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <find_volume+0x24e>
 800a7fa:	230d      	movs	r3, #13
 800a7fc:	e119      	b.n	800aa32 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	3330      	adds	r3, #48	; 0x30
 800a802:	3313      	adds	r3, #19
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fcb5 	bl	8009174 <ld_word>
 800a80a:	4603      	mov	r3, r0
 800a80c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a810:	2b00      	cmp	r3, #0
 800a812:	d106      	bne.n	800a822 <find_volume+0x272>
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	3330      	adds	r3, #48	; 0x30
 800a818:	3320      	adds	r3, #32
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe fcc2 	bl	80091a4 <ld_dword>
 800a820:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a824:	3330      	adds	r3, #48	; 0x30
 800a826:	330e      	adds	r3, #14
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fe fca3 	bl	8009174 <ld_word>
 800a82e:	4603      	mov	r3, r0
 800a830:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a832:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <find_volume+0x28c>
 800a838:	230d      	movs	r3, #13
 800a83a:	e0fa      	b.n	800aa32 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a83c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	4413      	add	r3, r2
 800a842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a844:	8912      	ldrh	r2, [r2, #8]
 800a846:	0912      	lsrs	r2, r2, #4
 800a848:	b292      	uxth	r2, r2
 800a84a:	4413      	add	r3, r2
 800a84c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a84e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a852:	429a      	cmp	r2, r3
 800a854:	d204      	bcs.n	800a860 <find_volume+0x2b0>
 800a856:	230d      	movs	r3, #13
 800a858:	e0eb      	b.n	800aa32 <find_volume+0x482>
 800a85a:	bf00      	nop
 800a85c:	20005e08 	.word	0x20005e08
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a868:	8952      	ldrh	r2, [r2, #10]
 800a86a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <find_volume+0x2ca>
 800a876:	230d      	movs	r3, #13
 800a878:	e0db      	b.n	800aa32 <find_volume+0x482>
		fmt = FS_FAT32;
 800a87a:	2303      	movs	r3, #3
 800a87c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a886:	4293      	cmp	r3, r2
 800a888:	d802      	bhi.n	800a890 <find_volume+0x2e0>
 800a88a:	2302      	movs	r3, #2
 800a88c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a896:	4293      	cmp	r3, r2
 800a898:	d802      	bhi.n	800a8a0 <find_volume+0x2f0>
 800a89a:	2301      	movs	r3, #1
 800a89c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	1c9a      	adds	r2, r3, #2
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ac:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b2:	441a      	add	r2, r3
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a8b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	441a      	add	r2, r3
 800a8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a8c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d11e      	bne.n	800a908 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	3330      	adds	r3, #48	; 0x30
 800a8ce:	332a      	adds	r3, #42	; 0x2a
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fe fc4f 	bl	8009174 <ld_word>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <find_volume+0x330>
 800a8dc:	230d      	movs	r3, #13
 800a8de:	e0a8      	b.n	800aa32 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e2:	891b      	ldrh	r3, [r3, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <find_volume+0x33c>
 800a8e8:	230d      	movs	r3, #13
 800a8ea:	e0a2      	b.n	800aa32 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	3330      	adds	r3, #48	; 0x30
 800a8f0:	332c      	adds	r3, #44	; 0x2c
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fc56 	bl	80091a4 <ld_dword>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	647b      	str	r3, [r7, #68]	; 0x44
 800a906:	e01f      	b.n	800a948 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90a:	891b      	ldrh	r3, [r3, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <find_volume+0x364>
 800a910:	230d      	movs	r3, #13
 800a912:	e08e      	b.n	800aa32 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	6a1a      	ldr	r2, [r3, #32]
 800a918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91a:	441a      	add	r2, r3
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a920:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a924:	2b02      	cmp	r3, #2
 800a926:	d103      	bne.n	800a930 <find_volume+0x380>
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	e00a      	b.n	800a946 <find_volume+0x396>
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	695a      	ldr	r2, [r3, #20]
 800a934:	4613      	mov	r3, r2
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	4413      	add	r3, r2
 800a93a:	085a      	lsrs	r2, r3, #1
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a946:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	699a      	ldr	r2, [r3, #24]
 800a94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a952:	0a5b      	lsrs	r3, r3, #9
 800a954:	429a      	cmp	r2, r3
 800a956:	d201      	bcs.n	800a95c <find_volume+0x3ac>
 800a958:	230d      	movs	r3, #13
 800a95a:	e06a      	b.n	800aa32 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a962:	611a      	str	r2, [r3, #16]
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	691a      	ldr	r2, [r3, #16]
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	2280      	movs	r2, #128	; 0x80
 800a970:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a972:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a976:	2b03      	cmp	r3, #3
 800a978:	d149      	bne.n	800aa0e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97c:	3330      	adds	r3, #48	; 0x30
 800a97e:	3330      	adds	r3, #48	; 0x30
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe fbf7 	bl	8009174 <ld_word>
 800a986:	4603      	mov	r3, r0
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d140      	bne.n	800aa0e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a98c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a98e:	3301      	adds	r3, #1
 800a990:	4619      	mov	r1, r3
 800a992:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a994:	f7fe fe9e 	bl	80096d4 <move_window>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d137      	bne.n	800aa0e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	3330      	adds	r3, #48	; 0x30
 800a9a8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fe fbe1 	bl	8009174 <ld_word>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d127      	bne.n	800aa0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	3330      	adds	r3, #48	; 0x30
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fe fbee 	bl	80091a4 <ld_dword>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	4a1c      	ldr	r2, [pc, #112]	; (800aa3c <find_volume+0x48c>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d11e      	bne.n	800aa0e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	3330      	adds	r3, #48	; 0x30
 800a9d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe fbe3 	bl	80091a4 <ld_dword>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	4a17      	ldr	r2, [pc, #92]	; (800aa40 <find_volume+0x490>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d113      	bne.n	800aa0e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	3330      	adds	r3, #48	; 0x30
 800a9ea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fe fbd8 	bl	80091a4 <ld_dword>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	3330      	adds	r3, #48	; 0x30
 800a9fe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe fbce 	bl	80091a4 <ld_dword>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa14:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <find_volume+0x494>)
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <find_volume+0x494>)
 800aa20:	801a      	strh	r2, [r3, #0]
 800aa22:	4b08      	ldr	r3, [pc, #32]	; (800aa44 <find_volume+0x494>)
 800aa24:	881a      	ldrh	r2, [r3, #0]
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa2c:	f7fe fdea 	bl	8009604 <clear_lock>
#endif
	return FR_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3758      	adds	r7, #88	; 0x58
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	41615252 	.word	0x41615252
 800aa40:	61417272 	.word	0x61417272
 800aa44:	20005e0c 	.word	0x20005e0c

0800aa48 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa52:	2309      	movs	r3, #9
 800aa54:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01c      	beq.n	800aa96 <validate+0x4e>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d018      	beq.n	800aa96 <validate+0x4e>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d013      	beq.n	800aa96 <validate+0x4e>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	889a      	ldrh	r2, [r3, #4]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	88db      	ldrh	r3, [r3, #6]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d10c      	bne.n	800aa96 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	785b      	ldrb	r3, [r3, #1]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe fad8 	bl	8009038 <disk_status>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <validate+0x4e>
			res = FR_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <validate+0x5a>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	e000      	b.n	800aaa4 <validate+0x5c>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	6013      	str	r3, [r2, #0]
	return res;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aac6:	f107 0310 	add.w	r3, r7, #16
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fcd5 	bl	800a47a <get_ldnumber>
 800aad0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da01      	bge.n	800aadc <f_mount+0x28>
 800aad8:	230b      	movs	r3, #11
 800aada:	e02b      	b.n	800ab34 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aadc:	4a17      	ldr	r2, [pc, #92]	; (800ab3c <f_mount+0x88>)
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aae4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d005      	beq.n	800aaf8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aaec:	69b8      	ldr	r0, [r7, #24]
 800aaee:	f7fe fd89 	bl	8009604 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	490d      	ldr	r1, [pc, #52]	; (800ab3c <f_mount+0x88>)
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <f_mount+0x66>
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d001      	beq.n	800ab1e <f_mount+0x6a>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	e00a      	b.n	800ab34 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab1e:	f107 010c 	add.w	r1, r7, #12
 800ab22:	f107 0308 	add.w	r3, r7, #8
 800ab26:	2200      	movs	r2, #0
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff fd41 	bl	800a5b0 <find_volume>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20005e08 	.word	0x20005e08

0800ab40 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b098      	sub	sp, #96	; 0x60
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <f_open+0x18>
 800ab54:	2309      	movs	r3, #9
 800ab56:	e1ad      	b.n	800aeb4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab5e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ab60:	79fa      	ldrb	r2, [r7, #7]
 800ab62:	f107 0110 	add.w	r1, r7, #16
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff fd20 	bl	800a5b0 <find_volume>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ab76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f040 8191 	bne.w	800aea2 <f_open+0x362>
		dj.obj.fs = fs;
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	f107 0314 	add.w	r3, r7, #20
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff fc03 	bl	800a398 <follow_path>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ab98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d11a      	bne.n	800abd6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aba0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aba4:	b25b      	sxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da03      	bge.n	800abb2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800abaa:	2306      	movs	r3, #6
 800abac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abb0:	e011      	b.n	800abd6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abb2:	79fb      	ldrb	r3, [r7, #7]
 800abb4:	f023 0301 	bic.w	r3, r3, #1
 800abb8:	2b00      	cmp	r3, #0
 800abba:	bf14      	ite	ne
 800abbc:	2301      	movne	r3, #1
 800abbe:	2300      	moveq	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	461a      	mov	r2, r3
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	4611      	mov	r1, r2
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fbd2 	bl	8009374 <chk_lock>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	f003 031c 	and.w	r3, r3, #28
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d07f      	beq.n	800ace0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800abe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d017      	beq.n	800ac18 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800abe8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abec:	2b04      	cmp	r3, #4
 800abee:	d10e      	bne.n	800ac0e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800abf0:	f7fe fc1c 	bl	800942c <enq_lock>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d006      	beq.n	800ac08 <f_open+0xc8>
 800abfa:	f107 0314 	add.w	r3, r7, #20
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fb03 	bl	800a20a <dir_register>
 800ac04:	4603      	mov	r3, r0
 800ac06:	e000      	b.n	800ac0a <f_open+0xca>
 800ac08:	2312      	movs	r3, #18
 800ac0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac0e:	79fb      	ldrb	r3, [r7, #7]
 800ac10:	f043 0308 	orr.w	r3, r3, #8
 800ac14:	71fb      	strb	r3, [r7, #7]
 800ac16:	e010      	b.n	800ac3a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac18:	7ebb      	ldrb	r3, [r7, #26]
 800ac1a:	f003 0311 	and.w	r3, r3, #17
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d003      	beq.n	800ac2a <f_open+0xea>
					res = FR_DENIED;
 800ac22:	2307      	movs	r3, #7
 800ac24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac28:	e007      	b.n	800ac3a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac2a:	79fb      	ldrb	r3, [r7, #7]
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <f_open+0xfa>
 800ac34:	2308      	movs	r3, #8
 800ac36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d168      	bne.n	800ad14 <f_open+0x1d4>
 800ac42:	79fb      	ldrb	r3, [r7, #7]
 800ac44:	f003 0308 	and.w	r3, r3, #8
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d063      	beq.n	800ad14 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ac4c:	f7fd ffa4 	bl	8008b98 <get_fattime>
 800ac50:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac54:	330e      	adds	r3, #14
 800ac56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7fe fae1 	bl	8009220 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac60:	3316      	adds	r3, #22
 800ac62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe fadb 	bl	8009220 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ac6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6c:	330b      	adds	r3, #11
 800ac6e:	2220      	movs	r2, #32
 800ac70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac76:	4611      	mov	r1, r2
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7ff fa32 	bl	800a0e2 <ld_clust>
 800ac7e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac84:	2200      	movs	r2, #0
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7ff fa4a 	bl	800a120 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	331c      	adds	r3, #28
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fe fac4 	bl	8009220 <st_dword>
					fs->wflag = 1;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ac9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d037      	beq.n	800ad14 <f_open+0x1d4>
						dw = fs->winsect;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800acaa:	f107 0314 	add.w	r3, r7, #20
 800acae:	2200      	movs	r2, #0
 800acb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe ff5d 	bl	8009b72 <remove_chain>
 800acb8:	4603      	mov	r3, r0
 800acba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800acbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d126      	bne.n	800ad14 <f_open+0x1d4>
							res = move_window(fs, dw);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acca:	4618      	mov	r0, r3
 800accc:	f7fe fd02 	bl	80096d4 <move_window>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acda:	3a01      	subs	r2, #1
 800acdc:	60da      	str	r2, [r3, #12]
 800acde:	e019      	b.n	800ad14 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ace0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d115      	bne.n	800ad14 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ace8:	7ebb      	ldrb	r3, [r7, #26]
 800acea:	f003 0310 	and.w	r3, r3, #16
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <f_open+0x1ba>
					res = FR_NO_FILE;
 800acf2:	2304      	movs	r3, #4
 800acf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800acf8:	e00c      	b.n	800ad14 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d007      	beq.n	800ad14 <f_open+0x1d4>
 800ad04:	7ebb      	ldrb	r3, [r7, #26]
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <f_open+0x1d4>
						res = FR_DENIED;
 800ad0e:	2307      	movs	r3, #7
 800ad10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d128      	bne.n	800ad6e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	f003 0308 	and.w	r3, r3, #8
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ad26:	79fb      	ldrb	r3, [r7, #7]
 800ad28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad3c:	79fb      	ldrb	r3, [r7, #7]
 800ad3e:	f023 0301 	bic.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bf14      	ite	ne
 800ad46:	2301      	movne	r3, #1
 800ad48:	2300      	moveq	r3, #0
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	f107 0314 	add.w	r3, r7, #20
 800ad52:	4611      	mov	r1, r2
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7fe fb8b 	bl	8009470 <inc_lock>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <f_open+0x22e>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f040 8095 	bne.w	800aea2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff f9af 	bl	800a0e2 <ld_clust>
 800ad84:	4602      	mov	r2, r0
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ad8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad8c:	331c      	adds	r3, #28
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fa08 	bl	80091a4 <ld_dword>
 800ad94:	4602      	mov	r2, r0
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	88da      	ldrh	r2, [r3, #6]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	79fa      	ldrb	r2, [r7, #7]
 800adb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3330      	adds	r3, #48	; 0x30
 800adca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f7fe fa72 	bl	80092ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	f003 0320 	and.w	r3, r3, #32
 800addc:	2b00      	cmp	r3, #0
 800adde:	d060      	beq.n	800aea2 <f_open+0x362>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d05c      	beq.n	800aea2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	895b      	ldrh	r3, [r3, #10]
 800adf4:	025b      	lsls	r3, r3, #9
 800adf6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	657b      	str	r3, [r7, #84]	; 0x54
 800ae04:	e016      	b.n	800ae34 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fd1d 	bl	800984a <get_fat>
 800ae10:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ae12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d802      	bhi.n	800ae1e <f_open+0x2de>
 800ae18:	2302      	movs	r3, #2
 800ae1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae24:	d102      	bne.n	800ae2c <f_open+0x2ec>
 800ae26:	2301      	movs	r3, #1
 800ae28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	657b      	str	r3, [r7, #84]	; 0x54
 800ae34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d103      	bne.n	800ae44 <f_open+0x304>
 800ae3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d8e0      	bhi.n	800ae06 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae48:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d127      	bne.n	800aea2 <f_open+0x362>
 800ae52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d022      	beq.n	800aea2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fe fcd3 	bl	800980c <clust2sect>
 800ae66:	6478      	str	r0, [r7, #68]	; 0x44
 800ae68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d103      	bne.n	800ae76 <f_open+0x336>
						res = FR_INT_ERR;
 800ae6e:	2302      	movs	r3, #2
 800ae70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae74:	e015      	b.n	800aea2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ae76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae78:	0a5a      	lsrs	r2, r3, #9
 800ae7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae7c:	441a      	add	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	7858      	ldrb	r0, [r3, #1]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6a1a      	ldr	r2, [r3, #32]
 800ae90:	2301      	movs	r3, #1
 800ae92:	f7fe f911 	bl	80090b8 <disk_read>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <f_open+0x362>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aea2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <f_open+0x370>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aeb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3760      	adds	r7, #96	; 0x60
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b08c      	sub	sp, #48	; 0x30
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f107 0210 	add.w	r2, r7, #16
 800aeda:	4611      	mov	r1, r2
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fdb3 	bl	800aa48 <validate>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d107      	bne.n	800af00 <f_write+0x44>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	7d5b      	ldrb	r3, [r3, #21]
 800aef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <f_write+0x4a>
 800af00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af04:	e14b      	b.n	800b19e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	7d1b      	ldrb	r3, [r3, #20]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <f_write+0x5a>
 800af12:	2307      	movs	r3, #7
 800af14:	e143      	b.n	800b19e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	441a      	add	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	429a      	cmp	r2, r3
 800af24:	f080 812d 	bcs.w	800b182 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	43db      	mvns	r3, r3
 800af2e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af30:	e127      	b.n	800b182 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	f040 80e3 	bne.w	800b106 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	0a5b      	lsrs	r3, r3, #9
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	8952      	ldrh	r2, [r2, #10]
 800af4a:	3a01      	subs	r2, #1
 800af4c:	4013      	ands	r3, r2
 800af4e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d143      	bne.n	800afde <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10c      	bne.n	800af78 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	2b00      	cmp	r3, #0
 800af68:	d11a      	bne.n	800afa0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2100      	movs	r1, #0
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe fe64 	bl	8009c3c <create_chain>
 800af74:	62b8      	str	r0, [r7, #40]	; 0x28
 800af76:	e013      	b.n	800afa0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d007      	beq.n	800af90 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	4619      	mov	r1, r3
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f7fe fef0 	bl	8009d6c <clmt_clust>
 800af8c:	62b8      	str	r0, [r7, #40]	; 0x28
 800af8e:	e007      	b.n	800afa0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	69db      	ldr	r3, [r3, #28]
 800af96:	4619      	mov	r1, r3
 800af98:	4610      	mov	r0, r2
 800af9a:	f7fe fe4f 	bl	8009c3c <create_chain>
 800af9e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 80f2 	beq.w	800b18c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d104      	bne.n	800afb8 <f_write+0xfc>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2202      	movs	r2, #2
 800afb2:	755a      	strb	r2, [r3, #21]
 800afb4:	2302      	movs	r3, #2
 800afb6:	e0f2      	b.n	800b19e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afbe:	d104      	bne.n	800afca <f_write+0x10e>
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2201      	movs	r2, #1
 800afc4:	755a      	strb	r2, [r3, #21]
 800afc6:	2301      	movs	r3, #1
 800afc8:	e0e9      	b.n	800b19e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afce:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d102      	bne.n	800afde <f_write+0x122>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	7d1b      	ldrb	r3, [r3, #20]
 800afe2:	b25b      	sxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	da18      	bge.n	800b01a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	7858      	ldrb	r0, [r3, #1]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6a1a      	ldr	r2, [r3, #32]
 800aff6:	2301      	movs	r3, #1
 800aff8:	f7fe f87e 	bl	80090f8 <disk_write>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d004      	beq.n	800b00c <f_write+0x150>
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2201      	movs	r2, #1
 800b006:	755a      	strb	r2, [r3, #21]
 800b008:	2301      	movs	r3, #1
 800b00a:	e0c8      	b.n	800b19e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	7d1b      	ldrb	r3, [r3, #20]
 800b010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b014:	b2da      	uxtb	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b01a:	693a      	ldr	r2, [r7, #16]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	69db      	ldr	r3, [r3, #28]
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f7fe fbf2 	bl	800980c <clust2sect>
 800b028:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d104      	bne.n	800b03a <f_write+0x17e>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2202      	movs	r2, #2
 800b034:	755a      	strb	r2, [r3, #21]
 800b036:	2302      	movs	r3, #2
 800b038:	e0b1      	b.n	800b19e <f_write+0x2e2>
			sect += csect;
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	4413      	add	r3, r2
 800b040:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	0a5b      	lsrs	r3, r3, #9
 800b046:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d03c      	beq.n	800b0c8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	4413      	add	r3, r2
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	8952      	ldrh	r2, [r2, #10]
 800b058:	4293      	cmp	r3, r2
 800b05a:	d905      	bls.n	800b068 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	895b      	ldrh	r3, [r3, #10]
 800b060:	461a      	mov	r2, r3
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	7858      	ldrb	r0, [r3, #1]
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	69f9      	ldr	r1, [r7, #28]
 800b072:	f7fe f841 	bl	80090f8 <disk_write>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <f_write+0x1ca>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2201      	movs	r2, #1
 800b080:	755a      	strb	r2, [r3, #21]
 800b082:	2301      	movs	r3, #1
 800b084:	e08b      	b.n	800b19e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a1a      	ldr	r2, [r3, #32]
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	1ad3      	subs	r3, r2, r3
 800b08e:	6a3a      	ldr	r2, [r7, #32]
 800b090:	429a      	cmp	r2, r3
 800b092:	d915      	bls.n	800b0c0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a1a      	ldr	r2, [r3, #32]
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	025b      	lsls	r3, r3, #9
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	f7fe f8e3 	bl	8009278 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	7d1b      	ldrb	r3, [r3, #20]
 800b0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	025b      	lsls	r3, r3, #9
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b0c6:	e03f      	b.n	800b148 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d016      	beq.n	800b100 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	699a      	ldr	r2, [r3, #24]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d210      	bcs.n	800b100 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	7858      	ldrb	r0, [r3, #1]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	f7fd ffe4 	bl	80090b8 <disk_read>
 800b0f0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d004      	beq.n	800b100 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	755a      	strb	r2, [r3, #21]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e04e      	b.n	800b19e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b112:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	429a      	cmp	r2, r3
 800b11a:	d901      	bls.n	800b120 <f_write+0x264>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12e:	4413      	add	r3, r2
 800b130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b132:	69f9      	ldr	r1, [r7, #28]
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe f89f 	bl	8009278 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	7d1b      	ldrb	r3, [r3, #20]
 800b13e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b142:	b2da      	uxtb	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b148:	69fa      	ldr	r2, [r7, #28]
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	4413      	add	r3, r2
 800b14e:	61fb      	str	r3, [r7, #28]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	699a      	ldr	r2, [r3, #24]
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	441a      	add	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	619a      	str	r2, [r3, #24]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68da      	ldr	r2, [r3, #12]
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	429a      	cmp	r2, r3
 800b166:	bf38      	it	cc
 800b168:	461a      	movcc	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	60da      	str	r2, [r3, #12]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b174:	441a      	add	r2, r3
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f47f aed4 	bne.w	800af32 <f_write+0x76>
 800b18a:	e000      	b.n	800b18e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b18c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	7d1b      	ldrb	r3, [r3, #20]
 800b192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b196:	b2da      	uxtb	r2, r3
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3730      	adds	r7, #48	; 0x30
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b086      	sub	sp, #24
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f107 0208 	add.w	r2, r7, #8
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff fc46 	bl	800aa48 <validate>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d168      	bne.n	800b298 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d062      	beq.n	800b298 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	7d1b      	ldrb	r3, [r3, #20]
 800b1d6:	b25b      	sxtb	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da15      	bge.n	800b208 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	7858      	ldrb	r0, [r3, #1]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a1a      	ldr	r2, [r3, #32]
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	f7fd ff84 	bl	80090f8 <disk_write>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <f_sync+0x54>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e04f      	b.n	800b29a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	7d1b      	ldrb	r3, [r3, #20]
 800b1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b202:	b2da      	uxtb	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b208:	f7fd fcc6 	bl	8008b98 <get_fattime>
 800b20c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b214:	4619      	mov	r1, r3
 800b216:	4610      	mov	r0, r2
 800b218:	f7fe fa5c 	bl	80096d4 <move_window>
 800b21c:	4603      	mov	r3, r0
 800b21e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d138      	bne.n	800b298 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	330b      	adds	r3, #11
 800b230:	781a      	ldrb	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	330b      	adds	r3, #11
 800b236:	f042 0220 	orr.w	r2, r2, #32
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	461a      	mov	r2, r3
 800b248:	68f9      	ldr	r1, [r7, #12]
 800b24a:	f7fe ff69 	bl	800a120 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f103 021c 	add.w	r2, r3, #28
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fd ffe0 	bl	8009220 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3316      	adds	r3, #22
 800b264:	6939      	ldr	r1, [r7, #16]
 800b266:	4618      	mov	r0, r3
 800b268:	f7fd ffda 	bl	8009220 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3312      	adds	r3, #18
 800b270:	2100      	movs	r1, #0
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd ffb9 	bl	80091ea <st_word>
					fs->wflag = 1;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	2201      	movs	r2, #1
 800b27c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fa55 	bl	8009730 <sync_fs>
 800b286:	4603      	mov	r3, r0
 800b288:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7d1b      	ldrb	r3, [r3, #20]
 800b28e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b292:	b2da      	uxtb	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b298:	7dfb      	ldrb	r3, [r7, #23]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3718      	adds	r7, #24
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff ff7b 	bl	800b1a6 <f_sync>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d118      	bne.n	800b2ec <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f107 0208 	add.w	r2, r7, #8
 800b2c0:	4611      	mov	r1, r2
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7ff fbc0 	bl	800aa48 <validate>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d10c      	bne.n	800b2ec <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691b      	ldr	r3, [r3, #16]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe f958 	bl	800958c <dec_lock>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d102      	bne.n	800b2ec <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b096      	sub	sp, #88	; 0x58
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b2fe:	f107 0108 	add.w	r1, r7, #8
 800b302:	1d3b      	adds	r3, r7, #4
 800b304:	2202      	movs	r2, #2
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff f952 	bl	800a5b0 <find_volume>
 800b30c:	4603      	mov	r3, r0
 800b30e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b316:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f040 80ec 	bne.w	800b4f8 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	f107 030c 	add.w	r3, r7, #12
 800b326:	4611      	mov	r1, r2
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff f835 	bl	800a398 <follow_path>
 800b32e:	4603      	mov	r3, r0
 800b330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <f_mkdir+0x4c>
 800b33c:	2308      	movs	r3, #8
 800b33e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b346:	2b04      	cmp	r3, #4
 800b348:	f040 80d6 	bne.w	800b4f8 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b34c:	f107 030c 	add.w	r3, r7, #12
 800b350:	2100      	movs	r1, #0
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fc72 	bl	8009c3c <create_chain>
 800b358:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	895b      	ldrh	r3, [r3, #10]
 800b35e:	025b      	lsls	r3, r3, #9
 800b360:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d102      	bne.n	800b374 <f_mkdir+0x7e>
 800b36e:	2307      	movs	r3, #7
 800b370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b376:	2b01      	cmp	r3, #1
 800b378:	d102      	bne.n	800b380 <f_mkdir+0x8a>
 800b37a:	2302      	movs	r3, #2
 800b37c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b386:	d102      	bne.n	800b38e <f_mkdir+0x98>
 800b388:	2301      	movs	r3, #1
 800b38a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b38e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <f_mkdir+0xae>
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fe f957 	bl	800964c <sync_window>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b3a4:	f7fd fbf8 	bl	8008b98 <get_fattime>
 800b3a8:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b3aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d16a      	bne.n	800b488 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fe fa28 	bl	800980c <clust2sect>
 800b3bc:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	3330      	adds	r3, #48	; 0x30
 800b3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3cc:	f7fd ff75 	bl	80092ba <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b3d0:	220b      	movs	r2, #11
 800b3d2:	2120      	movs	r1, #32
 800b3d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3d6:	f7fd ff70 	bl	80092ba <mem_set>
					dir[DIR_Name] = '.';
 800b3da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3dc:	222e      	movs	r2, #46	; 0x2e
 800b3de:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e2:	330b      	adds	r3, #11
 800b3e4:	2210      	movs	r2, #16
 800b3e6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ea:	3316      	adds	r3, #22
 800b3ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fd ff16 	bl	8009220 <st_dword>
					st_clust(fs, dir, dcl);
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe fe90 	bl	800a120 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b402:	3320      	adds	r3, #32
 800b404:	2220      	movs	r2, #32
 800b406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b408:	4618      	mov	r0, r3
 800b40a:	f7fd ff35 	bl	8009278 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b40e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b410:	3321      	adds	r3, #33	; 0x21
 800b412:	222e      	movs	r2, #46	; 0x2e
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	2b03      	cmp	r3, #3
 800b420:	d106      	bne.n	800b430 <f_mkdir+0x13a>
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b428:	429a      	cmp	r2, r3
 800b42a:	d101      	bne.n	800b430 <f_mkdir+0x13a>
 800b42c:	2300      	movs	r3, #0
 800b42e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b430:	68b8      	ldr	r0, [r7, #8]
 800b432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b434:	3320      	adds	r3, #32
 800b436:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b438:	4619      	mov	r1, r3
 800b43a:	f7fe fe71 	bl	800a120 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	895b      	ldrh	r3, [r3, #10]
 800b442:	653b      	str	r3, [r7, #80]	; 0x50
 800b444:	e01b      	b.n	800b47e <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2201      	movs	r2, #1
 800b454:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe f8f7 	bl	800964c <sync_window>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10c      	bne.n	800b486 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b46c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b470:	2100      	movs	r1, #0
 800b472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b474:	f7fd ff21 	bl	80092ba <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47a:	3b01      	subs	r3, #1
 800b47c:	653b      	str	r3, [r7, #80]	; 0x50
 800b47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e0      	bne.n	800b446 <f_mkdir+0x150>
 800b484:	e000      	b.n	800b488 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b486:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d107      	bne.n	800b4a0 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b490:	f107 030c 	add.w	r3, r7, #12
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe feb8 	bl	800a20a <dir_register>
 800b49a:	4603      	mov	r3, r0
 800b49c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b4a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d120      	bne.n	800b4ea <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ae:	3316      	adds	r3, #22
 800b4b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fd feb4 	bl	8009220 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe fe2e 	bl	800a120 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c6:	330b      	adds	r3, #11
 800b4c8:	2210      	movs	r2, #16
 800b4ca:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b4d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10e      	bne.n	800b4f8 <f_mkdir+0x202>
					res = sync_fs(fs);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe f927 	bl	8009730 <sync_fs>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b4e8:	e006      	b.n	800b4f8 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b4ea:	f107 030c 	add.w	r3, r7, #12
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe fb3d 	bl	8009b72 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3758      	adds	r7, #88	; 0x58
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	4613      	mov	r3, r2
 800b510:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b512:	2301      	movs	r3, #1
 800b514:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b51a:	4b1f      	ldr	r3, [pc, #124]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b51c:	7a5b      	ldrb	r3, [r3, #9]
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	d131      	bne.n	800b588 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b524:	4b1c      	ldr	r3, [pc, #112]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b526:	7a5b      	ldrb	r3, [r3, #9]
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	461a      	mov	r2, r3
 800b52c:	4b1a      	ldr	r3, [pc, #104]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b52e:	2100      	movs	r1, #0
 800b530:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b532:	4b19      	ldr	r3, [pc, #100]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b534:	7a5b      	ldrb	r3, [r3, #9]
 800b536:	b2db      	uxtb	r3, r3
 800b538:	4a17      	ldr	r2, [pc, #92]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b542:	4b15      	ldr	r3, [pc, #84]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b544:	7a5b      	ldrb	r3, [r3, #9]
 800b546:	b2db      	uxtb	r3, r3
 800b548:	461a      	mov	r2, r3
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b54c:	4413      	add	r3, r2
 800b54e:	79fa      	ldrb	r2, [r7, #7]
 800b550:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b552:	4b11      	ldr	r3, [pc, #68]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b554:	7a5b      	ldrb	r3, [r3, #9]
 800b556:	b2db      	uxtb	r3, r3
 800b558:	1c5a      	adds	r2, r3, #1
 800b55a:	b2d1      	uxtb	r1, r2
 800b55c:	4a0e      	ldr	r2, [pc, #56]	; (800b598 <FATFS_LinkDriverEx+0x94>)
 800b55e:	7251      	strb	r1, [r2, #9]
 800b560:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b562:	7dbb      	ldrb	r3, [r7, #22]
 800b564:	3330      	adds	r3, #48	; 0x30
 800b566:	b2da      	uxtb	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	3301      	adds	r3, #1
 800b570:	223a      	movs	r2, #58	; 0x3a
 800b572:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	3302      	adds	r3, #2
 800b578:	222f      	movs	r2, #47	; 0x2f
 800b57a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	3303      	adds	r3, #3
 800b580:	2200      	movs	r2, #0
 800b582:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	371c      	adds	r7, #28
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	20005e30 	.word	0x20005e30

0800b59c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff ffaa 	bl	800b504 <FATFS_LinkDriverEx>
 800b5b0:	4603      	mov	r3, r0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <phase_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_phase_1_activations_map, 1, params)) {
 800b5c6:	683a      	ldr	r2, [r7, #0]
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	485e      	ldr	r0, [pc, #376]	; (800b744 <phase_1_configure_activations+0x188>)
 800b5cc:	f001 fa52 	bl	800ca74 <ai_platform_get_activations_map>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80ac 	beq.w	800b730 <phase_1_configure_activations+0x174>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_3_input0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800b5d8:	4b5a      	ldr	r3, [pc, #360]	; (800b744 <phase_1_configure_activations+0x188>)
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	4b5a      	ldr	r3, [pc, #360]	; (800b748 <phase_1_configure_activations+0x18c>)
 800b5de:	4413      	add	r3, r2
 800b5e0:	4a5a      	ldr	r2, [pc, #360]	; (800b74c <phase_1_configure_activations+0x190>)
 800b5e2:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_3_input0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800b5e4:	4b57      	ldr	r3, [pc, #348]	; (800b744 <phase_1_configure_activations+0x188>)
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	4b57      	ldr	r3, [pc, #348]	; (800b748 <phase_1_configure_activations+0x18c>)
 800b5ea:	4413      	add	r3, r2
 800b5ec:	4a57      	ldr	r2, [pc, #348]	; (800b74c <phase_1_configure_activations+0x190>)
 800b5ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b5f0:	4b54      	ldr	r3, [pc, #336]	; (800b744 <phase_1_configure_activations+0x188>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a56      	ldr	r2, [pc, #344]	; (800b750 <phase_1_configure_activations+0x194>)
 800b5f6:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b5f8:	4b52      	ldr	r3, [pc, #328]	; (800b744 <phase_1_configure_activations+0x188>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a54      	ldr	r2, [pc, #336]	; (800b750 <phase_1_configure_activations+0x194>)
 800b5fe:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b600:	4b50      	ldr	r3, [pc, #320]	; (800b744 <phase_1_configure_activations+0x188>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a53      	ldr	r2, [pc, #332]	; (800b754 <phase_1_configure_activations+0x198>)
 800b606:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b608:	4b4e      	ldr	r3, [pc, #312]	; (800b744 <phase_1_configure_activations+0x188>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a51      	ldr	r2, [pc, #324]	; (800b754 <phase_1_configure_activations+0x198>)
 800b60e:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b610:	4b4c      	ldr	r3, [pc, #304]	; (800b744 <phase_1_configure_activations+0x188>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a50      	ldr	r2, [pc, #320]	; (800b758 <phase_1_configure_activations+0x19c>)
 800b616:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b618:	4b4a      	ldr	r3, [pc, #296]	; (800b744 <phase_1_configure_activations+0x188>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a4e      	ldr	r2, [pc, #312]	; (800b758 <phase_1_configure_activations+0x19c>)
 800b61e:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800b620:	4b48      	ldr	r3, [pc, #288]	; (800b744 <phase_1_configure_activations+0x188>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b628:	4a4c      	ldr	r2, [pc, #304]	; (800b75c <phase_1_configure_activations+0x1a0>)
 800b62a:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800b62c:	4b45      	ldr	r3, [pc, #276]	; (800b744 <phase_1_configure_activations+0x188>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b634:	4a49      	ldr	r2, [pc, #292]	; (800b75c <phase_1_configure_activations+0x1a0>)
 800b636:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b638:	4b42      	ldr	r3, [pc, #264]	; (800b744 <phase_1_configure_activations+0x188>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b640:	4a47      	ldr	r2, [pc, #284]	; (800b760 <phase_1_configure_activations+0x1a4>)
 800b642:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b644:	4b3f      	ldr	r3, [pc, #252]	; (800b744 <phase_1_configure_activations+0x188>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b64c:	4a44      	ldr	r2, [pc, #272]	; (800b760 <phase_1_configure_activations+0x1a4>)
 800b64e:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b650:	4b3c      	ldr	r3, [pc, #240]	; (800b744 <phase_1_configure_activations+0x188>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a43      	ldr	r2, [pc, #268]	; (800b764 <phase_1_configure_activations+0x1a8>)
 800b656:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b658:	4b3a      	ldr	r3, [pc, #232]	; (800b744 <phase_1_configure_activations+0x188>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a41      	ldr	r2, [pc, #260]	; (800b764 <phase_1_configure_activations+0x1a8>)
 800b65e:	60d3      	str	r3, [r2, #12]
    
    pool_9_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b660:	4b38      	ldr	r3, [pc, #224]	; (800b744 <phase_1_configure_activations+0x188>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b668:	4a3f      	ldr	r2, [pc, #252]	; (800b768 <phase_1_configure_activations+0x1ac>)
 800b66a:	6093      	str	r3, [r2, #8]
    pool_9_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b66c:	4b35      	ldr	r3, [pc, #212]	; (800b744 <phase_1_configure_activations+0x188>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b674:	4a3c      	ldr	r2, [pc, #240]	; (800b768 <phase_1_configure_activations+0x1ac>)
 800b676:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b678:	4b32      	ldr	r3, [pc, #200]	; (800b744 <phase_1_configure_activations+0x188>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a3b      	ldr	r2, [pc, #236]	; (800b76c <phase_1_configure_activations+0x1b0>)
 800b67e:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b680:	4b30      	ldr	r3, [pc, #192]	; (800b744 <phase_1_configure_activations+0x188>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a39      	ldr	r2, [pc, #228]	; (800b76c <phase_1_configure_activations+0x1b0>)
 800b686:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800b688:	4b2e      	ldr	r3, [pc, #184]	; (800b744 <phase_1_configure_activations+0x188>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b690:	4a37      	ldr	r2, [pc, #220]	; (800b770 <phase_1_configure_activations+0x1b4>)
 800b692:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800b694:	4b2b      	ldr	r3, [pc, #172]	; (800b744 <phase_1_configure_activations+0x188>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b69c:	4a34      	ldr	r2, [pc, #208]	; (800b770 <phase_1_configure_activations+0x1b4>)
 800b69e:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800b6a0:	4b28      	ldr	r3, [pc, #160]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800b6a8:	4a32      	ldr	r2, [pc, #200]	; (800b774 <phase_1_configure_activations+0x1b8>)
 800b6aa:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800b6ac:	4b25      	ldr	r3, [pc, #148]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800b6b4:	4a2f      	ldr	r2, [pc, #188]	; (800b774 <phase_1_configure_activations+0x1b8>)
 800b6b6:	60d3      	str	r3, [r2, #12]
    
    pool_15_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6b8:	4b22      	ldr	r3, [pc, #136]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a2e      	ldr	r2, [pc, #184]	; (800b778 <phase_1_configure_activations+0x1bc>)
 800b6be:	6093      	str	r3, [r2, #8]
    pool_15_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6c0:	4b20      	ldr	r3, [pc, #128]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a2c      	ldr	r2, [pc, #176]	; (800b778 <phase_1_configure_activations+0x1bc>)
 800b6c6:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800b6c8:	4b1e      	ldr	r3, [pc, #120]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800b6d0:	4a2a      	ldr	r2, [pc, #168]	; (800b77c <phase_1_configure_activations+0x1c0>)
 800b6d2:	6093      	str	r3, [r2, #8]
    eltwise_17_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800b6d4:	4b1b      	ldr	r3, [pc, #108]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800b6dc:	4a27      	ldr	r2, [pc, #156]	; (800b77c <phase_1_configure_activations+0x1c0>)
 800b6de:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6e0:	4b18      	ldr	r3, [pc, #96]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a26      	ldr	r2, [pc, #152]	; (800b780 <phase_1_configure_activations+0x1c4>)
 800b6e6:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6e8:	4b16      	ldr	r3, [pc, #88]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a24      	ldr	r2, [pc, #144]	; (800b780 <phase_1_configure_activations+0x1c4>)
 800b6ee:	60d3      	str	r3, [r2, #12]
    
    nl_19_nl_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800b6f0:	4b14      	ldr	r3, [pc, #80]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6f8:	4a22      	ldr	r2, [pc, #136]	; (800b784 <phase_1_configure_activations+0x1c8>)
 800b6fa:	6093      	str	r3, [r2, #8]
    nl_19_nl_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800b6fc:	4b11      	ldr	r3, [pc, #68]	; (800b744 <phase_1_configure_activations+0x188>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b704:	4a1f      	ldr	r2, [pc, #124]	; (800b784 <phase_1_configure_activations+0x1c8>)
 800b706:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b708:	4b0e      	ldr	r3, [pc, #56]	; (800b744 <phase_1_configure_activations+0x188>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <phase_1_configure_activations+0x1cc>)
 800b70e:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b710:	4b0c      	ldr	r3, [pc, #48]	; (800b744 <phase_1_configure_activations+0x188>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a1c      	ldr	r2, [pc, #112]	; (800b788 <phase_1_configure_activations+0x1cc>)
 800b716:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 40);
 800b718:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <phase_1_configure_activations+0x188>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3328      	adds	r3, #40	; 0x28
 800b71e:	4a1b      	ldr	r2, [pc, #108]	; (800b78c <phase_1_configure_activations+0x1d0>)
 800b720:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 40);
 800b722:	4b08      	ldr	r3, [pc, #32]	; (800b744 <phase_1_configure_activations+0x188>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3328      	adds	r3, #40	; 0x28
 800b728:	4a18      	ldr	r2, [pc, #96]	; (800b78c <phase_1_configure_activations+0x1d0>)
 800b72a:	60d3      	str	r3, [r2, #12]
    
    return true;
 800b72c:	2301      	movs	r3, #1
 800b72e:	e005      	b.n	800b73c <phase_1_configure_activations+0x180>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800b730:	2213      	movs	r2, #19
 800b732:	2130      	movs	r1, #48	; 0x30
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 fb01 	bl	800cd3c <ai_platform_network_set_error>
  return false;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20005e3c 	.word	0x20005e3c
 800b748:	0003c080 	.word	0x0003c080
 800b74c:	200000dc 	.word	0x200000dc
 800b750:	200000ec 	.word	0x200000ec
 800b754:	2000010c 	.word	0x2000010c
 800b758:	2000011c 	.word	0x2000011c
 800b75c:	2000012c 	.word	0x2000012c
 800b760:	2000013c 	.word	0x2000013c
 800b764:	2000014c 	.word	0x2000014c
 800b768:	2000015c 	.word	0x2000015c
 800b76c:	2000016c 	.word	0x2000016c
 800b770:	2000017c 	.word	0x2000017c
 800b774:	2000018c 	.word	0x2000018c
 800b778:	2000019c 	.word	0x2000019c
 800b77c:	200001ac 	.word	0x200001ac
 800b780:	200001bc 	.word	0x200001bc
 800b784:	200001cc 	.word	0x200001cc
 800b788:	200001dc 	.word	0x200001dc
 800b78c:	200001ec 	.word	0x200001ec

0800b790 <phase_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_phase_1_weights_map, 1, params)) {
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	2101      	movs	r1, #1
 800b79e:	4892      	ldr	r0, [pc, #584]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b7a0:	f001 f910 	bl	800c9c4 <ai_platform_get_weights_map>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 81c4 	beq.w	800bb34 <phase_1_configure_weights+0x3a4>
    /* Updating weights (byte) offsets */
    
    eltwise_8_scale_array.format |= AI_FMT_FLAG_CONST;
 800b7ac:	4b8f      	ldr	r3, [pc, #572]	; (800b9ec <phase_1_configure_weights+0x25c>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7b4:	4a8d      	ldr	r2, [pc, #564]	; (800b9ec <phase_1_configure_weights+0x25c>)
 800b7b6:	6013      	str	r3, [r2, #0]
    eltwise_8_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 0);
 800b7b8:	4b8b      	ldr	r3, [pc, #556]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a8b      	ldr	r2, [pc, #556]	; (800b9ec <phase_1_configure_weights+0x25c>)
 800b7be:	6093      	str	r3, [r2, #8]
    eltwise_8_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 0);
 800b7c0:	4b89      	ldr	r3, [pc, #548]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a89      	ldr	r2, [pc, #548]	; (800b9ec <phase_1_configure_weights+0x25c>)
 800b7c6:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800b7c8:	4b89      	ldr	r3, [pc, #548]	; (800b9f0 <phase_1_configure_weights+0x260>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7d0:	4a87      	ldr	r2, [pc, #540]	; (800b9f0 <phase_1_configure_weights+0x260>)
 800b7d2:	6013      	str	r3, [r2, #0]
    eltwise_8_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 256);
 800b7d4:	4b84      	ldr	r3, [pc, #528]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b7dc:	4a84      	ldr	r2, [pc, #528]	; (800b9f0 <phase_1_configure_weights+0x260>)
 800b7de:	6093      	str	r3, [r2, #8]
    eltwise_8_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 256);
 800b7e0:	4b81      	ldr	r3, [pc, #516]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b7e8:	4a81      	ldr	r2, [pc, #516]	; (800b9f0 <phase_1_configure_weights+0x260>)
 800b7ea:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_scale_array.format |= AI_FMT_FLAG_CONST;
 800b7ec:	4b81      	ldr	r3, [pc, #516]	; (800b9f4 <phase_1_configure_weights+0x264>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7f4:	4a7f      	ldr	r2, [pc, #508]	; (800b9f4 <phase_1_configure_weights+0x264>)
 800b7f6:	6013      	str	r3, [r2, #0]
    eltwise_11_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 512);
 800b7f8:	4b7b      	ldr	r3, [pc, #492]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b800:	4a7c      	ldr	r2, [pc, #496]	; (800b9f4 <phase_1_configure_weights+0x264>)
 800b802:	6093      	str	r3, [r2, #8]
    eltwise_11_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 512);
 800b804:	4b78      	ldr	r3, [pc, #480]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b80c:	4a79      	ldr	r2, [pc, #484]	; (800b9f4 <phase_1_configure_weights+0x264>)
 800b80e:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800b810:	4b79      	ldr	r3, [pc, #484]	; (800b9f8 <phase_1_configure_weights+0x268>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b818:	4a77      	ldr	r2, [pc, #476]	; (800b9f8 <phase_1_configure_weights+0x268>)
 800b81a:	6013      	str	r3, [r2, #0]
    eltwise_11_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 768);
 800b81c:	4b72      	ldr	r3, [pc, #456]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b824:	4a74      	ldr	r2, [pc, #464]	; (800b9f8 <phase_1_configure_weights+0x268>)
 800b826:	6093      	str	r3, [r2, #8]
    eltwise_11_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 768);
 800b828:	4b6f      	ldr	r3, [pc, #444]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b830:	4a71      	ldr	r2, [pc, #452]	; (800b9f8 <phase_1_configure_weights+0x268>)
 800b832:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800b834:	4b71      	ldr	r3, [pc, #452]	; (800b9fc <phase_1_configure_weights+0x26c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b83c:	4a6f      	ldr	r2, [pc, #444]	; (800b9fc <phase_1_configure_weights+0x26c>)
 800b83e:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800b840:	4b69      	ldr	r3, [pc, #420]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b848:	4a6c      	ldr	r2, [pc, #432]	; (800b9fc <phase_1_configure_weights+0x26c>)
 800b84a:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800b84c:	4b66      	ldr	r3, [pc, #408]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b854:	4a69      	ldr	r2, [pc, #420]	; (800b9fc <phase_1_configure_weights+0x26c>)
 800b856:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800b858:	4b69      	ldr	r3, [pc, #420]	; (800ba00 <phase_1_configure_weights+0x270>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b860:	4a67      	ldr	r2, [pc, #412]	; (800ba00 <phase_1_configure_weights+0x270>)
 800b862:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800b864:	4b60      	ldr	r3, [pc, #384]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	4b66      	ldr	r3, [pc, #408]	; (800ba04 <phase_1_configure_weights+0x274>)
 800b86a:	4413      	add	r3, r2
 800b86c:	4a64      	ldr	r2, [pc, #400]	; (800ba00 <phase_1_configure_weights+0x270>)
 800b86e:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800b870:	4b5d      	ldr	r3, [pc, #372]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	4b63      	ldr	r3, [pc, #396]	; (800ba04 <phase_1_configure_weights+0x274>)
 800b876:	4413      	add	r3, r2
 800b878:	4a61      	ldr	r2, [pc, #388]	; (800ba00 <phase_1_configure_weights+0x270>)
 800b87a:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 800b87c:	4b62      	ldr	r3, [pc, #392]	; (800ba08 <phase_1_configure_weights+0x278>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b884:	4a60      	ldr	r2, [pc, #384]	; (800ba08 <phase_1_configure_weights+0x278>)
 800b886:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800b888:	4b57      	ldr	r3, [pc, #348]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	4b5f      	ldr	r3, [pc, #380]	; (800ba0c <phase_1_configure_weights+0x27c>)
 800b88e:	4413      	add	r3, r2
 800b890:	4a5d      	ldr	r2, [pc, #372]	; (800ba08 <phase_1_configure_weights+0x278>)
 800b892:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800b894:	4b54      	ldr	r3, [pc, #336]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	4b5c      	ldr	r3, [pc, #368]	; (800ba0c <phase_1_configure_weights+0x27c>)
 800b89a:	4413      	add	r3, r2
 800b89c:	4a5a      	ldr	r2, [pc, #360]	; (800ba08 <phase_1_configure_weights+0x278>)
 800b89e:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800b8a0:	4b5b      	ldr	r3, [pc, #364]	; (800ba10 <phase_1_configure_weights+0x280>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8a8:	4a59      	ldr	r2, [pc, #356]	; (800ba10 <phase_1_configure_weights+0x280>)
 800b8aa:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800b8ac:	4b4e      	ldr	r3, [pc, #312]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800b8b4:	4a56      	ldr	r2, [pc, #344]	; (800ba10 <phase_1_configure_weights+0x280>)
 800b8b6:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800b8b8:	4b4b      	ldr	r3, [pc, #300]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800b8c0:	4a53      	ldr	r2, [pc, #332]	; (800ba10 <phase_1_configure_weights+0x280>)
 800b8c2:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_scale_array.format |= AI_FMT_FLAG_CONST;
 800b8c4:	4b53      	ldr	r3, [pc, #332]	; (800ba14 <phase_1_configure_weights+0x284>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8cc:	4a51      	ldr	r2, [pc, #324]	; (800ba14 <phase_1_configure_weights+0x284>)
 800b8ce:	6013      	str	r3, [r2, #0]
    eltwise_17_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800b8d0:	4b45      	ldr	r3, [pc, #276]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	4b50      	ldr	r3, [pc, #320]	; (800ba18 <phase_1_configure_weights+0x288>)
 800b8d6:	4413      	add	r3, r2
 800b8d8:	4a4e      	ldr	r2, [pc, #312]	; (800ba14 <phase_1_configure_weights+0x284>)
 800b8da:	6093      	str	r3, [r2, #8]
    eltwise_17_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800b8dc:	4b42      	ldr	r3, [pc, #264]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	4b4d      	ldr	r3, [pc, #308]	; (800ba18 <phase_1_configure_weights+0x288>)
 800b8e2:	4413      	add	r3, r2
 800b8e4:	4a4b      	ldr	r2, [pc, #300]	; (800ba14 <phase_1_configure_weights+0x284>)
 800b8e6:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800b8e8:	4b4c      	ldr	r3, [pc, #304]	; (800ba1c <phase_1_configure_weights+0x28c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8f0:	4a4a      	ldr	r2, [pc, #296]	; (800ba1c <phase_1_configure_weights+0x28c>)
 800b8f2:	6013      	str	r3, [r2, #0]
    eltwise_17_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800b8f4:	4b3c      	ldr	r3, [pc, #240]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	4b49      	ldr	r3, [pc, #292]	; (800ba20 <phase_1_configure_weights+0x290>)
 800b8fa:	4413      	add	r3, r2
 800b8fc:	4a47      	ldr	r2, [pc, #284]	; (800ba1c <phase_1_configure_weights+0x28c>)
 800b8fe:	6093      	str	r3, [r2, #8]
    eltwise_17_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800b900:	4b39      	ldr	r3, [pc, #228]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	4b46      	ldr	r3, [pc, #280]	; (800ba20 <phase_1_configure_weights+0x290>)
 800b906:	4413      	add	r3, r2
 800b908:	4a44      	ldr	r2, [pc, #272]	; (800ba1c <phase_1_configure_weights+0x28c>)
 800b90a:	60d3      	str	r3, [r2, #12]
    
    dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800b90c:	4b45      	ldr	r3, [pc, #276]	; (800ba24 <phase_1_configure_weights+0x294>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b914:	4a43      	ldr	r2, [pc, #268]	; (800ba24 <phase_1_configure_weights+0x294>)
 800b916:	6013      	str	r3, [r2, #0]
    dense_19_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 299520);
 800b918:	4b33      	ldr	r3, [pc, #204]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	4b42      	ldr	r3, [pc, #264]	; (800ba28 <phase_1_configure_weights+0x298>)
 800b91e:	4413      	add	r3, r2
 800b920:	4a40      	ldr	r2, [pc, #256]	; (800ba24 <phase_1_configure_weights+0x294>)
 800b922:	6093      	str	r3, [r2, #8]
    dense_19_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 298496);
 800b924:	4b30      	ldr	r3, [pc, #192]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	4b40      	ldr	r3, [pc, #256]	; (800ba2c <phase_1_configure_weights+0x29c>)
 800b92a:	4413      	add	r3, r2
 800b92c:	4a3d      	ldr	r2, [pc, #244]	; (800ba24 <phase_1_configure_weights+0x294>)
 800b92e:	60d3      	str	r3, [r2, #12]
    
    dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800b930:	4b3f      	ldr	r3, [pc, #252]	; (800ba30 <phase_1_configure_weights+0x2a0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b938:	4a3d      	ldr	r2, [pc, #244]	; (800ba30 <phase_1_configure_weights+0x2a0>)
 800b93a:	6013      	str	r3, [r2, #0]
    dense_19_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800b93c:	4b2a      	ldr	r3, [pc, #168]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	4b3c      	ldr	r3, [pc, #240]	; (800ba34 <phase_1_configure_weights+0x2a4>)
 800b942:	4413      	add	r3, r2
 800b944:	4a3a      	ldr	r2, [pc, #232]	; (800ba30 <phase_1_configure_weights+0x2a0>)
 800b946:	6093      	str	r3, [r2, #8]
    dense_19_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800b948:	4b27      	ldr	r3, [pc, #156]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	4b39      	ldr	r3, [pc, #228]	; (800ba34 <phase_1_configure_weights+0x2a4>)
 800b94e:	4413      	add	r3, r2
 800b950:	4a37      	ldr	r2, [pc, #220]	; (800ba30 <phase_1_configure_weights+0x2a0>)
 800b952:	60d3      	str	r3, [r2, #12]
    
    dense_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800b954:	4b38      	ldr	r3, [pc, #224]	; (800ba38 <phase_1_configure_weights+0x2a8>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b95c:	4a36      	ldr	r2, [pc, #216]	; (800ba38 <phase_1_configure_weights+0x2a8>)
 800b95e:	6013      	str	r3, [r2, #0]
    dense_20_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800b960:	4b21      	ldr	r3, [pc, #132]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	4b35      	ldr	r3, [pc, #212]	; (800ba3c <phase_1_configure_weights+0x2ac>)
 800b966:	4413      	add	r3, r2
 800b968:	4a33      	ldr	r2, [pc, #204]	; (800ba38 <phase_1_configure_weights+0x2a8>)
 800b96a:	6093      	str	r3, [r2, #8]
    dense_20_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800b96c:	4b1e      	ldr	r3, [pc, #120]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	4b32      	ldr	r3, [pc, #200]	; (800ba3c <phase_1_configure_weights+0x2ac>)
 800b972:	4413      	add	r3, r2
 800b974:	4a30      	ldr	r2, [pc, #192]	; (800ba38 <phase_1_configure_weights+0x2a8>)
 800b976:	60d3      	str	r3, [r2, #12]
    
    dense_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800b978:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <phase_1_configure_weights+0x2b0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b980:	4a2f      	ldr	r2, [pc, #188]	; (800ba40 <phase_1_configure_weights+0x2b0>)
 800b982:	6013      	str	r3, [r2, #0]
    dense_20_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800b984:	4b18      	ldr	r3, [pc, #96]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	4b2e      	ldr	r3, [pc, #184]	; (800ba44 <phase_1_configure_weights+0x2b4>)
 800b98a:	4413      	add	r3, r2
 800b98c:	4a2c      	ldr	r2, [pc, #176]	; (800ba40 <phase_1_configure_weights+0x2b0>)
 800b98e:	6093      	str	r3, [r2, #8]
    dense_20_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800b990:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	4b2b      	ldr	r3, [pc, #172]	; (800ba44 <phase_1_configure_weights+0x2b4>)
 800b996:	4413      	add	r3, r2
 800b998:	4a29      	ldr	r2, [pc, #164]	; (800ba40 <phase_1_configure_weights+0x2b0>)
 800b99a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800b99c:	4b2a      	ldr	r3, [pc, #168]	; (800ba48 <phase_1_configure_weights+0x2b8>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9a4:	4a28      	ldr	r2, [pc, #160]	; (800ba48 <phase_1_configure_weights+0x2b8>)
 800b9a6:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800b9a8:	4b0f      	ldr	r3, [pc, #60]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	4b27      	ldr	r3, [pc, #156]	; (800ba4c <phase_1_configure_weights+0x2bc>)
 800b9ae:	4413      	add	r3, r2
 800b9b0:	4a25      	ldr	r2, [pc, #148]	; (800ba48 <phase_1_configure_weights+0x2b8>)
 800b9b2:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800b9b4:	4b0c      	ldr	r3, [pc, #48]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	4b24      	ldr	r3, [pc, #144]	; (800ba4c <phase_1_configure_weights+0x2bc>)
 800b9ba:	4413      	add	r3, r2
 800b9bc:	4a22      	ldr	r2, [pc, #136]	; (800ba48 <phase_1_configure_weights+0x2b8>)
 800b9be:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800b9c0:	4b23      	ldr	r3, [pc, #140]	; (800ba50 <phase_1_configure_weights+0x2c0>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9c8:	4a21      	ldr	r2, [pc, #132]	; (800ba50 <phase_1_configure_weights+0x2c0>)
 800b9ca:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800b9cc:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	4b20      	ldr	r3, [pc, #128]	; (800ba54 <phase_1_configure_weights+0x2c4>)
 800b9d2:	4413      	add	r3, r2
 800b9d4:	4a1e      	ldr	r2, [pc, #120]	; (800ba50 <phase_1_configure_weights+0x2c0>)
 800b9d6:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800b9d8:	4b03      	ldr	r3, [pc, #12]	; (800b9e8 <phase_1_configure_weights+0x258>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	4b1d      	ldr	r3, [pc, #116]	; (800ba54 <phase_1_configure_weights+0x2c4>)
 800b9de:	4413      	add	r3, r2
 800b9e0:	4a1b      	ldr	r2, [pc, #108]	; (800ba50 <phase_1_configure_weights+0x2c0>)
 800b9e2:	60d3      	str	r3, [r2, #12]
 800b9e4:	e038      	b.n	800ba58 <phase_1_configure_weights+0x2c8>
 800b9e6:	bf00      	nop
 800b9e8:	20005e40 	.word	0x20005e40
 800b9ec:	2000000c 	.word	0x2000000c
 800b9f0:	2000001c 	.word	0x2000001c
 800b9f4:	2000002c 	.word	0x2000002c
 800b9f8:	2000003c 	.word	0x2000003c
 800b9fc:	2000004c 	.word	0x2000004c
 800ba00:	2000005c 	.word	0x2000005c
 800ba04:	00048400 	.word	0x00048400
 800ba08:	2000006c 	.word	0x2000006c
 800ba0c:	00048600 	.word	0x00048600
 800ba10:	2000007c 	.word	0x2000007c
 800ba14:	2000008c 	.word	0x2000008c
 800ba18:	00048a00 	.word	0x00048a00
 800ba1c:	2000009c 	.word	0x2000009c
 800ba20:	00048c00 	.word	0x00048c00
 800ba24:	200000ac 	.word	0x200000ac
 800ba28:	00049200 	.word	0x00049200
 800ba2c:	00048e00 	.word	0x00048e00
 800ba30:	200000bc 	.word	0x200000bc
 800ba34:	00149200 	.word	0x00149200
 800ba38:	200000cc 	.word	0x200000cc
 800ba3c:	00149600 	.word	0x00149600
 800ba40:	200000fc 	.word	0x200000fc
 800ba44:	0014be00 	.word	0x0014be00
 800ba48:	200001fc 	.word	0x200001fc
 800ba4c:	0014be28 	.word	0x0014be28
 800ba50:	2000020c 	.word	0x2000020c
 800ba54:	0014c2a8 	.word	0x0014c2a8
    
    eltwise_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800ba58:	4b3b      	ldr	r3, [pc, #236]	; (800bb48 <phase_1_configure_weights+0x3b8>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba60:	4a39      	ldr	r2, [pc, #228]	; (800bb48 <phase_1_configure_weights+0x3b8>)
 800ba62:	6013      	str	r3, [r2, #0]
    eltwise_2_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800ba64:	4b39      	ldr	r3, [pc, #228]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	4b39      	ldr	r3, [pc, #228]	; (800bb50 <phase_1_configure_weights+0x3c0>)
 800ba6a:	4413      	add	r3, r2
 800ba6c:	4a36      	ldr	r2, [pc, #216]	; (800bb48 <phase_1_configure_weights+0x3b8>)
 800ba6e:	6093      	str	r3, [r2, #8]
    eltwise_2_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800ba70:	4b36      	ldr	r3, [pc, #216]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	4b36      	ldr	r3, [pc, #216]	; (800bb50 <phase_1_configure_weights+0x3c0>)
 800ba76:	4413      	add	r3, r2
 800ba78:	4a33      	ldr	r2, [pc, #204]	; (800bb48 <phase_1_configure_weights+0x3b8>)
 800ba7a:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800ba7c:	4b35      	ldr	r3, [pc, #212]	; (800bb54 <phase_1_configure_weights+0x3c4>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba84:	4a33      	ldr	r2, [pc, #204]	; (800bb54 <phase_1_configure_weights+0x3c4>)
 800ba86:	6013      	str	r3, [r2, #0]
    eltwise_2_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800ba88:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	4b32      	ldr	r3, [pc, #200]	; (800bb58 <phase_1_configure_weights+0x3c8>)
 800ba8e:	4413      	add	r3, r2
 800ba90:	4a30      	ldr	r2, [pc, #192]	; (800bb54 <phase_1_configure_weights+0x3c4>)
 800ba92:	6093      	str	r3, [r2, #8]
    eltwise_2_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800ba94:	4b2d      	ldr	r3, [pc, #180]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <phase_1_configure_weights+0x3c8>)
 800ba9a:	4413      	add	r3, r2
 800ba9c:	4a2d      	ldr	r2, [pc, #180]	; (800bb54 <phase_1_configure_weights+0x3c4>)
 800ba9e:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_scale_array.format |= AI_FMT_FLAG_CONST;
 800baa0:	4b2e      	ldr	r3, [pc, #184]	; (800bb5c <phase_1_configure_weights+0x3cc>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baa8:	4a2c      	ldr	r2, [pc, #176]	; (800bb5c <phase_1_configure_weights+0x3cc>)
 800baaa:	6013      	str	r3, [r2, #0]
    eltwise_5_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800baac:	4b27      	ldr	r3, [pc, #156]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	4b2b      	ldr	r3, [pc, #172]	; (800bb60 <phase_1_configure_weights+0x3d0>)
 800bab2:	4413      	add	r3, r2
 800bab4:	4a29      	ldr	r2, [pc, #164]	; (800bb5c <phase_1_configure_weights+0x3cc>)
 800bab6:	6093      	str	r3, [r2, #8]
    eltwise_5_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800bab8:	4b24      	ldr	r3, [pc, #144]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	4b28      	ldr	r3, [pc, #160]	; (800bb60 <phase_1_configure_weights+0x3d0>)
 800babe:	4413      	add	r3, r2
 800bac0:	4a26      	ldr	r2, [pc, #152]	; (800bb5c <phase_1_configure_weights+0x3cc>)
 800bac2:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800bac4:	4b27      	ldr	r3, [pc, #156]	; (800bb64 <phase_1_configure_weights+0x3d4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bacc:	4a25      	ldr	r2, [pc, #148]	; (800bb64 <phase_1_configure_weights+0x3d4>)
 800bace:	6013      	str	r3, [r2, #0]
    eltwise_5_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800bad0:	4b1e      	ldr	r3, [pc, #120]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b24      	ldr	r3, [pc, #144]	; (800bb68 <phase_1_configure_weights+0x3d8>)
 800bad6:	4413      	add	r3, r2
 800bad8:	4a22      	ldr	r2, [pc, #136]	; (800bb64 <phase_1_configure_weights+0x3d4>)
 800bada:	6093      	str	r3, [r2, #8]
    eltwise_5_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800badc:	4b1b      	ldr	r3, [pc, #108]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	4b21      	ldr	r3, [pc, #132]	; (800bb68 <phase_1_configure_weights+0x3d8>)
 800bae2:	4413      	add	r3, r2
 800bae4:	4a1f      	ldr	r2, [pc, #124]	; (800bb64 <phase_1_configure_weights+0x3d4>)
 800bae6:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800bae8:	4b20      	ldr	r3, [pc, #128]	; (800bb6c <phase_1_configure_weights+0x3dc>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baf0:	4a1e      	ldr	r2, [pc, #120]	; (800bb6c <phase_1_configure_weights+0x3dc>)
 800baf2:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800baf4:	4b15      	ldr	r3, [pc, #84]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <phase_1_configure_weights+0x3e0>)
 800bafa:	4413      	add	r3, r2
 800bafc:	4a1b      	ldr	r2, [pc, #108]	; (800bb6c <phase_1_configure_weights+0x3dc>)
 800bafe:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800bb00:	4b12      	ldr	r3, [pc, #72]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	4b1a      	ldr	r3, [pc, #104]	; (800bb70 <phase_1_configure_weights+0x3e0>)
 800bb06:	4413      	add	r3, r2
 800bb08:	4a18      	ldr	r2, [pc, #96]	; (800bb6c <phase_1_configure_weights+0x3dc>)
 800bb0a:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800bb0c:	4b19      	ldr	r3, [pc, #100]	; (800bb74 <phase_1_configure_weights+0x3e4>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb14:	4a17      	ldr	r2, [pc, #92]	; (800bb74 <phase_1_configure_weights+0x3e4>)
 800bb16:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800bb18:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	4b16      	ldr	r3, [pc, #88]	; (800bb78 <phase_1_configure_weights+0x3e8>)
 800bb1e:	4413      	add	r3, r2
 800bb20:	4a14      	ldr	r2, [pc, #80]	; (800bb74 <phase_1_configure_weights+0x3e4>)
 800bb22:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800bb24:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <phase_1_configure_weights+0x3bc>)
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	4b13      	ldr	r3, [pc, #76]	; (800bb78 <phase_1_configure_weights+0x3e8>)
 800bb2a:	4413      	add	r3, r2
 800bb2c:	4a11      	ldr	r2, [pc, #68]	; (800bb74 <phase_1_configure_weights+0x3e4>)
 800bb2e:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e005      	b.n	800bb40 <phase_1_configure_weights+0x3b0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800bb34:	2212      	movs	r2, #18
 800bb36:	2130      	movs	r1, #48	; 0x30
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f001 f8ff 	bl	800cd3c <ai_platform_network_set_error>
  return false;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3708      	adds	r7, #8
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	2000021c 	.word	0x2000021c
 800bb4c:	20005e40 	.word	0x20005e40
 800bb50:	0014c328 	.word	0x0014c328
 800bb54:	2000022c 	.word	0x2000022c
 800bb58:	0014c3a8 	.word	0x0014c3a8
 800bb5c:	2000023c 	.word	0x2000023c
 800bb60:	0014c428 	.word	0x0014c428
 800bb64:	2000024c 	.word	0x2000024c
 800bb68:	0014c4a8 	.word	0x0014c4a8
 800bb6c:	2000025c 	.word	0x2000025c
 800bb70:	0014c528 	.word	0x0014c528
 800bb74:	2000026c 	.word	0x2000026c
 800bb78:	0015e528 	.word	0x0015e528

0800bb7c <ai_phase_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_phase_1_get_error(ai_handle network)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 ffcd 	bl	800cb24 <ai_platform_network_get_error>
 800bb8a:	4603      	mov	r3, r0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <ai_phase_1_create>:

AI_API_ENTRY
ai_error ai_phase_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af02      	add	r7, sp, #8
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800bb9e:	2300      	movs	r3, #0
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	2305      	movs	r3, #5
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	2301      	movs	r3, #1
 800bba8:	4a04      	ldr	r2, [pc, #16]	; (800bbbc <ai_phase_1_create+0x28>)
 800bbaa:	6839      	ldr	r1, [r7, #0]
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f001 fbdf 	bl	800d370 <ai_platform_network_create>
 800bbb2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	20001308 	.word	0x20001308

0800bbc0 <ai_phase_1_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_phase_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d104      	bne.n	800bbda <ai_phase_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bbd0:	4b06      	ldr	r3, [pc, #24]	; (800bbec <ai_phase_1_inputs_get+0x2c>)
 800bbd2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a06      	ldr	r2, [pc, #24]	; (800bbf0 <ai_phase_1_inputs_get+0x30>)
 800bbd8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800bbda:	6839      	ldr	r1, [r7, #0]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f001 f8b3 	bl	800cd48 <ai_platform_inputs_get>
 800bbe2:	4603      	mov	r3, r0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	20001308 	.word	0x20001308
 800bbf0:	a1c00100 	.word	0xa1c00100

0800bbf4 <ai_phase_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_phase_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d104      	bne.n	800bc0e <ai_phase_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bc04:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <ai_phase_1_outputs_get+0x2c>)
 800bc06:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	4a06      	ldr	r2, [pc, #24]	; (800bc24 <ai_phase_1_outputs_get+0x30>)
 800bc0c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 fa25 	bl	800d060 <ai_platform_outputs_get>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	20001308 	.word	0x20001308
 800bc24:	a1c00100 	.word	0xa1c00100

0800bc28 <ai_phase_1_init>:
}

AI_API_ENTRY
ai_bool ai_phase_1_init(
  ai_handle network, const ai_network_params* params)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f001 fd75 	bl	800d724 <ai_platform_network_init>
 800bc3a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <ai_phase_1_init+0x1e>
 800bc42:	2300      	movs	r3, #0
 800bc44:	e028      	b.n	800bc98 <ai_phase_1_init+0x70>

  ai_bool ok = true;
 800bc46:	2301      	movs	r3, #1
 800bc48:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_weights(net_ctx, params);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f7ff fd9f 	bl	800b790 <phase_1_configure_weights>
 800bc52:	4603      	mov	r3, r0
 800bc54:	461a      	mov	r2, r3
 800bc56:	7afb      	ldrb	r3, [r7, #11]
 800bc58:	4013      	ands	r3, r2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	bf14      	ite	ne
 800bc5e:	2301      	movne	r3, #1
 800bc60:	2300      	moveq	r3, #0
 800bc62:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_activations(net_ctx, params);
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f7ff fca8 	bl	800b5bc <phase_1_configure_activations>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	461a      	mov	r2, r3
 800bc70:	7afb      	ldrb	r3, [r7, #11]
 800bc72:	4013      	ands	r3, r2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bf14      	ite	ne
 800bc78:	2301      	movne	r3, #1
 800bc7a:	2300      	moveq	r3, #0
 800bc7c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 feec 	bl	800da5c <ai_platform_network_post_init>
 800bc84:	4603      	mov	r3, r0
 800bc86:	461a      	mov	r2, r3
 800bc88:	7afb      	ldrb	r3, [r7, #11]
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bf14      	ite	ne
 800bc90:	2301      	movne	r3, #1
 800bc92:	2300      	moveq	r3, #0
 800bc94:	72fb      	strb	r3, [r7, #11]

  return ok;
 800bc96:	7afb      	ldrb	r3, [r7, #11]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <ai_phase_1_run>:


AI_API_ENTRY
ai_i32 ai_phase_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f001 fffd 	bl	800dcb0 <ai_platform_network_process>
 800bcb6:	4603      	mov	r3, r0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <ai_phase_1_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_activations_buffer_get(const ai_handle ptr)
{
 800bcc0:	b4b0      	push	{r4, r5, r7}
 800bcc2:	b08f      	sub	sp, #60	; 0x3c
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800bcca:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <ai_phase_1_data_activations_buffer_get+0x60>)
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	623b      	str	r3, [r7, #32]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcda:	4b12      	ldr	r3, [pc, #72]	; (800bd24 <ai_phase_1_data_activations_buffer_get+0x64>)
 800bcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcde:	2301      	movs	r3, #1
 800bce0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	2204      	movs	r2, #4
 800bce8:	f362 231f 	bfi	r3, r2, #8, #24
 800bcec:	633b      	str	r3, [r7, #48]	; 0x30
 800bcee:	4b0e      	ldr	r3, [pc, #56]	; (800bd28 <ai_phase_1_data_activations_buffer_get+0x68>)
 800bcf0:	f107 040c 	add.w	r4, r7, #12
 800bcf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bcf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bcfa:	f107 030c 	add.w	r3, r7, #12
 800bcfe:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_ACTIVATIONS_SIZE, 1, AI_PHASE_1_DATA_ACTIVATIONS_COUNT),
    AI_PHASE_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	461d      	mov	r5, r3
 800bd04:	f107 041c 	add.w	r4, r7, #28
 800bd08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd0c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bd10:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	373c      	adds	r7, #60	; 0x3c
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bcb0      	pop	{r4, r5, r7}
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	00040440 	.word	0x00040440
 800bd24:	00043e80 	.word	0x00043e80
 800bd28:	08012efc 	.word	0x08012efc

0800bd2c <ai_phase_1_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_weights_buffer_get(const ai_handle ptr)
{
 800bd2c:	b4b0      	push	{r4, r5, r7}
 800bd2e:	b08f      	sub	sp, #60	; 0x3c
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800bd36:	4b15      	ldr	r3, [pc, #84]	; (800bd8c <ai_phase_1_data_weights_buffer_get+0x60>)
 800bd38:	61fb      	str	r3, [r7, #28]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	623b      	str	r3, [r7, #32]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
 800bd42:	2300      	movs	r3, #0
 800bd44:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd46:	4b12      	ldr	r3, [pc, #72]	; (800bd90 <ai_phase_1_data_weights_buffer_get+0x64>)
 800bd48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800bd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd52:	2204      	movs	r2, #4
 800bd54:	f362 231f 	bfi	r3, r2, #8, #24
 800bd58:	633b      	str	r3, [r7, #48]	; 0x30
 800bd5a:	4b0e      	ldr	r3, [pc, #56]	; (800bd94 <ai_phase_1_data_weights_buffer_get+0x68>)
 800bd5c:	f107 040c 	add.w	r4, r7, #12
 800bd60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_WEIGHTS_SIZE, 1, AI_PHASE_1_DATA_WEIGHTS_COUNT),
    AI_PHASE_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	461d      	mov	r5, r3
 800bd70:	f107 041c 	add.w	r4, r7, #28
 800bd74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bd7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	373c      	adds	r7, #60	; 0x3c
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bcb0      	pop	{r4, r5, r7}
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	40040440 	.word	0x40040440
 800bd90:	0015e628 	.word	0x0015e628
 800bd94:	08012f0c 	.word	0x08012f0c

0800bd98 <ai_phase_1_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_phase_1_data_weights_get(void)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_phase_1_weights_table);
 800bd9c:	4b02      	ldr	r3, [pc, #8]	; (800bda8 <ai_phase_1_data_weights_get+0x10>)

}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	200013ac 	.word	0x200013ac

0800bdac <modelSetup>:
#include "stdio.h"



int modelSetup()
{
 800bdac:	b480      	push	{r7}
 800bdae:	af00      	add	r7, sp, #0

	  return AI_OK;
 800bdb0:	2300      	movs	r3, #0


}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <getText>:

char* getText(ModelOutput answer)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	71fb      	strb	r3, [r7, #7]
	switch(answer)
 800bdc6:	79fb      	ldrb	r3, [r7, #7]
 800bdc8:	2b09      	cmp	r3, #9
 800bdca:	d82b      	bhi.n	800be24 <getText+0x68>
 800bdcc:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <getText+0x18>)
 800bdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd2:	bf00      	nop
 800bdd4:	0800bdfd 	.word	0x0800bdfd
 800bdd8:	0800be01 	.word	0x0800be01
 800bddc:	0800be05 	.word	0x0800be05
 800bde0:	0800be09 	.word	0x0800be09
 800bde4:	0800be0d 	.word	0x0800be0d
 800bde8:	0800be11 	.word	0x0800be11
 800bdec:	0800be15 	.word	0x0800be15
 800bdf0:	0800be19 	.word	0x0800be19
 800bdf4:	0800be1d 	.word	0x0800be1d
 800bdf8:	0800be21 	.word	0x0800be21
	{
	case YES : return "yes";
 800bdfc:	4b0d      	ldr	r3, [pc, #52]	; (800be34 <getText+0x78>)
 800bdfe:	e012      	b.n	800be26 <getText+0x6a>
	case NO : return "no";
 800be00:	4b0d      	ldr	r3, [pc, #52]	; (800be38 <getText+0x7c>)
 800be02:	e010      	b.n	800be26 <getText+0x6a>
	case UP : return "up";
 800be04:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <getText+0x80>)
 800be06:	e00e      	b.n	800be26 <getText+0x6a>
	case DOWN : return "down";
 800be08:	4b0d      	ldr	r3, [pc, #52]	; (800be40 <getText+0x84>)
 800be0a:	e00c      	b.n	800be26 <getText+0x6a>
	case RIGHT : return "right";
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <getText+0x88>)
 800be0e:	e00a      	b.n	800be26 <getText+0x6a>
	case LEFT : return "left";
 800be10:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <getText+0x8c>)
 800be12:	e008      	b.n	800be26 <getText+0x6a>
	case STOP : return "stop";
 800be14:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <getText+0x90>)
 800be16:	e006      	b.n	800be26 <getText+0x6a>
	case GO : return "go";
 800be18:	4b0d      	ldr	r3, [pc, #52]	; (800be50 <getText+0x94>)
 800be1a:	e004      	b.n	800be26 <getText+0x6a>
	case ON : return "on";
 800be1c:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <getText+0x98>)
 800be1e:	e002      	b.n	800be26 <getText+0x6a>
	case OFF : return "off";
 800be20:	4b0d      	ldr	r3, [pc, #52]	; (800be58 <getText+0x9c>)
 800be22:	e000      	b.n	800be26 <getText+0x6a>
	}
	return "";
 800be24:	4b0d      	ldr	r3, [pc, #52]	; (800be5c <getText+0xa0>)

}
 800be26:	4618      	mov	r0, r3
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	08012f2c 	.word	0x08012f2c
 800be38:	08012f30 	.word	0x08012f30
 800be3c:	08012f34 	.word	0x08012f34
 800be40:	08012f38 	.word	0x08012f38
 800be44:	08012f40 	.word	0x08012f40
 800be48:	08012f48 	.word	0x08012f48
 800be4c:	08012f50 	.word	0x08012f50
 800be50:	08012f58 	.word	0x08012f58
 800be54:	08012f5c 	.word	0x08012f5c
 800be58:	08012f60 	.word	0x08012f60
 800be5c:	08012f64 	.word	0x08012f64

0800be60 <modelRun>:

ModelOutput modelRun(float* input)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	f5ad 2d97 	sub.w	sp, sp, #309248	; 0x4b800
 800be66:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800be70:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 800be74:	6018      	str	r0, [r3, #0]

		ai_error ai_err;
		  AI_ALIGNED(4) ai_u8 activations[AI_PHASE_1_DATA_ACTIVATIONS_SIZE];
		  // Set working memory and get weights/biases from model
		  ai_network_params ai_params = {
			AI_PHASE_1_DATA_WEIGHTS(ai_phase_1_data_weights_get()),
 800be76:	f7ff ff8f 	bl	800bd98 <ai_phase_1_data_weights_get>
 800be7a:	4602      	mov	r2, r0
 800be7c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800be80:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff ff50 	bl	800bd2c <ai_phase_1_data_weights_buffer_get>
			AI_PHASE_1_DATA_ACTIVATIONS(activations)
 800be8c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800be90:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800be94:	f103 021c 	add.w	r2, r3, #28
 800be98:	4b81      	ldr	r3, [pc, #516]	; (800c0a0 <modelRun+0x240>)
 800be9a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800be9e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bea2:	443b      	add	r3, r7
 800bea4:	4619      	mov	r1, r3
 800bea6:	4610      	mov	r0, r2
 800bea8:	f7ff ff0a 	bl	800bcc0 <ai_phase_1_data_activations_buffer_get>
		  };

		  // Create instance of neural network
		  ai_err = ai_phase_1_create(&phase_1, AI_PHASE_1_DATA_CONFIG);
 800beac:	4b7d      	ldr	r3, [pc, #500]	; (800c0a4 <modelRun+0x244>)
 800beae:	443b      	add	r3, r7
 800beb0:	2100      	movs	r1, #0
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff fe6e 	bl	800bb94 <ai_phase_1_create>
 800beb8:	4602      	mov	r2, r0
 800beba:	4b7b      	ldr	r3, [pc, #492]	; (800c0a8 <modelRun+0x248>)
 800bebc:	443b      	add	r3, r7
 800bebe:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800bec2:	601a      	str	r2, [r3, #0]
		  if (ai_err.type != AI_ERROR_NONE)
 800bec4:	4b78      	ldr	r3, [pc, #480]	; (800c0a8 <modelRun+0x248>)
 800bec6:	443b      	add	r3, r7
 800bec8:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <modelRun+0x76>
		  {
			return 2;
 800bed2:	2302      	movs	r3, #2
 800bed4:	e0dd      	b.n	800c092 <modelRun+0x232>
		  }

			// Initialize neural network
			if (!ai_phase_1_init(phase_1, &ai_params))
 800bed6:	4b73      	ldr	r3, [pc, #460]	; (800c0a4 <modelRun+0x244>)
 800bed8:	443b      	add	r3, r7
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	4b73      	ldr	r3, [pc, #460]	; (800c0ac <modelRun+0x24c>)
 800bede:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bee2:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bee6:	443b      	add	r3, r7
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f7ff fe9c 	bl	800bc28 <ai_phase_1_init>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f083 0301 	eor.w	r3, r3, #1
 800bef6:	b2db      	uxtb	r3, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d001      	beq.n	800bf00 <modelRun+0xa0>
			{
			  return 1;
 800befc:	2301      	movs	r3, #1
 800befe:	e0c8      	b.n	800c092 <modelRun+0x232>
			}
			// Initialize wrapper structs that hold pointers to data and info about the
			  // data (tensor height, width, channels)
			  ai_input  = ai_phase_1_inputs_get(phase_1, 0);
 800bf00:	4b68      	ldr	r3, [pc, #416]	; (800c0a4 <modelRun+0x244>)
 800bf02:	443b      	add	r3, r7
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2100      	movs	r1, #0
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff fe59 	bl	800bbc0 <ai_phase_1_inputs_get>
 800bf0e:	4b68      	ldr	r3, [pc, #416]	; (800c0b0 <modelRun+0x250>)
 800bf10:	443b      	add	r3, r7
 800bf12:	6018      	str	r0, [r3, #0]

			  ai_output = AI_PHASE_1_OUT;
 800bf14:	2100      	movs	r1, #0
 800bf16:	2000      	movs	r0, #0
 800bf18:	f7ff fe6c 	bl	800bbf4 <ai_phase_1_outputs_get>
 800bf1c:	4b65      	ldr	r3, [pc, #404]	; (800c0b4 <modelRun+0x254>)
 800bf1e:	443b      	add	r3, r7
 800bf20:	6018      	str	r0, [r3, #0]


			  // Set pointers wrapper structs to our data buffers
			  //ai_input[0].n_batches = 1;
			  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800bf22:	4b63      	ldr	r3, [pc, #396]	; (800c0b0 <modelRun+0x250>)
 800bf24:	443b      	add	r3, r7
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	4b63      	ldr	r3, [pc, #396]	; (800c0b8 <modelRun+0x258>)
 800bf2a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bf2e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bf32:	443b      	add	r3, r7
 800bf34:	6053      	str	r3, [r2, #4]
			  //ai_output[0].n_batches = 1;
			  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800bf36:	4b5f      	ldr	r3, [pc, #380]	; (800c0b4 <modelRun+0x254>)
 800bf38:	443b      	add	r3, r7
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	4b5f      	ldr	r3, [pc, #380]	; (800c0bc <modelRun+0x25c>)
 800bf3e:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bf42:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bf46:	443b      	add	r3, r7
 800bf48:	6053      	str	r3, [r2, #4]
		float y_val[10];
		// Fill input buffer (use test value)
		for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	4a5c      	ldr	r2, [pc, #368]	; (800c0c0 <modelRun+0x260>)
 800bf4e:	443a      	add	r2, r7
 800bf50:	6013      	str	r3, [r2, #0]
 800bf52:	e01d      	b.n	800bf90 <modelRun+0x130>
		{
			((ai_float *)in_data)[i] = (ai_float)input[i];
 800bf54:	4b5a      	ldr	r3, [pc, #360]	; (800c0c0 <modelRun+0x260>)
 800bf56:	443b      	add	r3, r7
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 800bf60:	f6a2 5234 	subw	r2, r2, #3380	; 0xd34
 800bf64:	6812      	ldr	r2, [r2, #0]
 800bf66:	441a      	add	r2, r3
 800bf68:	4b55      	ldr	r3, [pc, #340]	; (800c0c0 <modelRun+0x260>)
 800bf6a:	443b      	add	r3, r7
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	0099      	lsls	r1, r3, #2
 800bf70:	4b51      	ldr	r3, [pc, #324]	; (800c0b8 <modelRun+0x258>)
 800bf72:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bf76:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bf7a:	443b      	add	r3, r7
 800bf7c:	440b      	add	r3, r1
 800bf7e:	6812      	ldr	r2, [r2, #0]
 800bf80:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800bf82:	4b4f      	ldr	r3, [pc, #316]	; (800c0c0 <modelRun+0x260>)
 800bf84:	443b      	add	r3, r7
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	4a4d      	ldr	r2, [pc, #308]	; (800c0c0 <modelRun+0x260>)
 800bf8c:	443a      	add	r2, r7
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	4b4b      	ldr	r3, [pc, #300]	; (800c0c0 <modelRun+0x260>)
 800bf92:	443b      	add	r3, r7
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 800bf9a:	d3db      	bcc.n	800bf54 <modelRun+0xf4>
		}


		// Perform inference
		nbatch = ai_phase_1_run(phase_1, &ai_input[0], &ai_output[0]);
 800bf9c:	4b41      	ldr	r3, [pc, #260]	; (800c0a4 <modelRun+0x244>)
 800bf9e:	443b      	add	r3, r7
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a44      	ldr	r2, [pc, #272]	; (800c0b4 <modelRun+0x254>)
 800bfa4:	443a      	add	r2, r7
 800bfa6:	6812      	ldr	r2, [r2, #0]
 800bfa8:	4941      	ldr	r1, [pc, #260]	; (800c0b0 <modelRun+0x250>)
 800bfaa:	4439      	add	r1, r7
 800bfac:	6809      	ldr	r1, [r1, #0]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7ff fe76 	bl	800bca0 <ai_phase_1_run>
 800bfb4:	4b43      	ldr	r3, [pc, #268]	; (800c0c4 <modelRun+0x264>)
 800bfb6:	443b      	add	r3, r7
 800bfb8:	6018      	str	r0, [r3, #0]
		if (nbatch != 1) {
 800bfba:	4b42      	ldr	r3, [pc, #264]	; (800c0c4 <modelRun+0x264>)
 800bfbc:	443b      	add	r3, r7
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d00b      	beq.n	800bfdc <modelRun+0x17c>
			ai_err =  ai_phase_1_get_error(phase_1);
 800bfc4:	4b37      	ldr	r3, [pc, #220]	; (800c0a4 <modelRun+0x244>)
 800bfc6:	443b      	add	r3, r7
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7ff fdd6 	bl	800bb7c <ai_phase_1_get_error>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	4b35      	ldr	r3, [pc, #212]	; (800c0a8 <modelRun+0x248>)
 800bfd4:	443b      	add	r3, r7
 800bfd6:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800bfda:	601a      	str	r2, [r3, #0]
		}
		float max = 0;
 800bfdc:	f04f 0300 	mov.w	r3, #0
 800bfe0:	4a39      	ldr	r2, [pc, #228]	; (800c0c8 <modelRun+0x268>)
 800bfe2:	443a      	add	r2, r7
 800bfe4:	6013      	str	r3, [r2, #0]
		int max_ind = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	4a38      	ldr	r2, [pc, #224]	; (800c0cc <modelRun+0x26c>)
 800bfea:	443a      	add	r2, r7
 800bfec:	6013      	str	r3, [r2, #0]
		for (int i =0; i<10; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	4a37      	ldr	r2, [pc, #220]	; (800c0d0 <modelRun+0x270>)
 800bff2:	443a      	add	r2, r7
 800bff4:	6013      	str	r3, [r2, #0]
 800bff6:	e043      	b.n	800c080 <modelRun+0x220>
		{
			// Read output (predicted y) of neural network
			y_val[i] = ((float *)out_data)[i];
 800bff8:	4b35      	ldr	r3, [pc, #212]	; (800c0d0 <modelRun+0x270>)
 800bffa:	443b      	add	r3, r7
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	009a      	lsls	r2, r3, #2
 800c000:	4b2e      	ldr	r3, [pc, #184]	; (800c0bc <modelRun+0x25c>)
 800c002:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800c006:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800c00a:	443b      	add	r3, r7
 800c00c:	4413      	add	r3, r2
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800c014:	f6a3 512c 	subw	r1, r3, #3372	; 0xd2c
 800c018:	4b2d      	ldr	r3, [pc, #180]	; (800c0d0 <modelRun+0x270>)
 800c01a:	443b      	add	r3, r7
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	440b      	add	r3, r1
 800c022:	601a      	str	r2, [r3, #0]
			if (y_val[i]>max)
 800c024:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800c028:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800c02c:	4b28      	ldr	r3, [pc, #160]	; (800c0d0 <modelRun+0x270>)
 800c02e:	443b      	add	r3, r7
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	edd3 7a00 	vldr	s15, [r3]
 800c03a:	4b23      	ldr	r3, [pc, #140]	; (800c0c8 <modelRun+0x268>)
 800c03c:	443b      	add	r3, r7
 800c03e:	ed93 7a00 	vldr	s14, [r3]
 800c042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04a:	d512      	bpl.n	800c072 <modelRun+0x212>
			{
				max_ind = i;
 800c04c:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <modelRun+0x270>)
 800c04e:	443b      	add	r3, r7
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a1e      	ldr	r2, [pc, #120]	; (800c0cc <modelRun+0x26c>)
 800c054:	443a      	add	r2, r7
 800c056:	6013      	str	r3, [r2, #0]
				max  = y_val[i];
 800c058:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800c05c:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800c060:	4b1b      	ldr	r3, [pc, #108]	; (800c0d0 <modelRun+0x270>)
 800c062:	443b      	add	r3, r7
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a16      	ldr	r2, [pc, #88]	; (800c0c8 <modelRun+0x268>)
 800c06e:	443a      	add	r2, r7
 800c070:	6013      	str	r3, [r2, #0]
		for (int i =0; i<10; i++)
 800c072:	4b17      	ldr	r3, [pc, #92]	; (800c0d0 <modelRun+0x270>)
 800c074:	443b      	add	r3, r7
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	4a15      	ldr	r2, [pc, #84]	; (800c0d0 <modelRun+0x270>)
 800c07c:	443a      	add	r2, r7
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	4b13      	ldr	r3, [pc, #76]	; (800c0d0 <modelRun+0x270>)
 800c082:	443b      	add	r3, r7
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2b09      	cmp	r3, #9
 800c088:	ddb6      	ble.n	800bff8 <modelRun+0x198>
			}
		}

		return max_ind;
 800c08a:	4b10      	ldr	r3, [pc, #64]	; (800c0cc <modelRun+0x26c>)
 800c08c:	443b      	add	r3, r7
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	b2db      	uxtb	r3, r3

}
 800c092:	4618      	mov	r0, r3
 800c094:	f507 2797 	add.w	r7, r7, #309248	; 0x4b800
 800c098:	f507 67a7 	add.w	r7, r7, #1336	; 0x538
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	fffb4334 	.word	0xfffb4334
 800c0a4:	0004bd18 	.word	0x0004bd18
 800c0a8:	00044d38 	.word	0x00044d38
 800c0ac:	fffb42fc 	.word	0xfffb42fc
 800c0b0:	0004bd24 	.word	0x0004bd24
 800c0b4:	0004bd20 	.word	0x0004bd20
 800c0b8:	ffff81e0 	.word	0xffff81e0
 800c0bc:	ffff81b8 	.word	0xffff81b8
 800c0c0:	0004bd34 	.word	0x0004bd34
 800c0c4:	0004bd1c 	.word	0x0004bd1c
 800c0c8:	0004bd30 	.word	0x0004bd30
 800c0cc:	0004bd2c 	.word	0x0004bd2c
 800c0d0:	0004bd28 	.word	0x0004bd28

0800c0d4 <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0de:	4836      	ldr	r0, [pc, #216]	; (800c1b8 <Preprocessing_Init+0xe4>)
 800c0e0:	f7f6 f9d2 	bl	8002488 <Window_Init>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d000      	beq.n	800c0ec <Preprocessing_Init+0x18>
  {
    while(1);
 800c0ea:	e7fe      	b.n	800c0ea <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800c0ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0f0:	4832      	ldr	r0, [pc, #200]	; (800c1bc <Preprocessing_Init+0xe8>)
 800c0f2:	f004 f9b3 	bl	801045c <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800c0f6:	4b32      	ldr	r3, [pc, #200]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c0f8:	4a30      	ldr	r2, [pc, #192]	; (800c1bc <Preprocessing_Init+0xe8>)
 800c0fa:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800c0fc:	4b30      	ldr	r3, [pc, #192]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800c102:	4b2f      	ldr	r3, [pc, #188]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c104:	4a2c      	ldr	r2, [pc, #176]	; (800c1b8 <Preprocessing_Init+0xe4>)
 800c106:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800c108:	4b2d      	ldr	r3, [pc, #180]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c10a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c10e:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800c110:	4b2b      	ldr	r3, [pc, #172]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c116:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800c118:	4b29      	ldr	r3, [pc, #164]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c11a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c11e:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800c120:	4b27      	ldr	r3, [pc, #156]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c122:	4a28      	ldr	r2, [pc, #160]	; (800c1c4 <Preprocessing_Init+0xf0>)
 800c124:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800c126:	4b28      	ldr	r3, [pc, #160]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c128:	4a28      	ldr	r2, [pc, #160]	; (800c1cc <Preprocessing_Init+0xf8>)
 800c12a:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800c12c:	4b26      	ldr	r3, [pc, #152]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c12e:	4a28      	ldr	r2, [pc, #160]	; (800c1d0 <Preprocessing_Init+0xfc>)
 800c130:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800c132:	4b25      	ldr	r3, [pc, #148]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c134:	4a27      	ldr	r2, [pc, #156]	; (800c1d4 <Preprocessing_Init+0x100>)
 800c136:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800c138:	4b23      	ldr	r3, [pc, #140]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c13a:	2280      	movs	r2, #128	; 0x80
 800c13c:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800c13e:	4b22      	ldr	r3, [pc, #136]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c144:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800c146:	4b20      	ldr	r3, [pc, #128]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c148:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c14c:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800c14e:	4b1e      	ldr	r3, [pc, #120]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c150:	f04f 0200 	mov.w	r2, #0
 800c154:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800c156:	4b1c      	ldr	r3, [pc, #112]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	ee07 3a90 	vmov	s15, r3
 800c15e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800c162:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c16a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c16e:	4b16      	ldr	r3, [pc, #88]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c170:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800c174:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800c17c:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c17e:	2201      	movs	r2, #1
 800c180:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800c182:	4b11      	ldr	r3, [pc, #68]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c184:	2201      	movs	r2, #1
 800c186:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800c188:	480f      	ldr	r0, [pc, #60]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c18a:	f7f5 fea2 	bl	8001ed2 <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800c18e:	4b12      	ldr	r3, [pc, #72]	; (800c1d8 <Preprocessing_Init+0x104>)
 800c190:	4a0b      	ldr	r2, [pc, #44]	; (800c1c0 <Preprocessing_Init+0xec>)
 800c192:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800c194:	4b10      	ldr	r3, [pc, #64]	; (800c1d8 <Preprocessing_Init+0x104>)
 800c196:	4a0c      	ldr	r2, [pc, #48]	; (800c1c8 <Preprocessing_Init+0xf4>)
 800c198:	605a      	str	r2, [r3, #4]

  S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 800c19a:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <Preprocessing_Init+0x108>)
 800c19c:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <Preprocessing_Init+0x104>)
 800c19e:	601a      	str	r2, [r3, #0]
  S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800c1a0:	4b0e      	ldr	r3, [pc, #56]	; (800c1dc <Preprocessing_Init+0x108>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	711a      	strb	r2, [r3, #4]
  S_LogMelSpectr.Ref = 1;
 800c1a6:	4b0d      	ldr	r3, [pc, #52]	; (800c1dc <Preprocessing_Init+0x108>)
 800c1a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c1ac:	609a      	str	r2, [r3, #8]
  S_LogMelSpectr.TopdB = 80;
 800c1ae:	4b0b      	ldr	r3, [pc, #44]	; (800c1dc <Preprocessing_Init+0x108>)
 800c1b0:	4a0b      	ldr	r2, [pc, #44]	; (800c1e0 <Preprocessing_Init+0x10c>)
 800c1b2:	60da      	str	r2, [r3, #12]

}
 800c1b4:	bf00      	nop
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	200071ac 	.word	0x200071ac
 800c1bc:	20005f30 	.word	0x20005f30
 800c1c0:	20005f78 	.word	0x20005f78
 800c1c4:	200081ac 	.word	0x200081ac
 800c1c8:	20005f48 	.word	0x20005f48
 800c1cc:	2000a1ac 	.word	0x2000a1ac
 800c1d0:	2000a3ac 	.word	0x2000a3ac
 800c1d4:	200091ac 	.word	0x200091ac
 800c1d8:	20005f94 	.word	0x20005f94
 800c1dc:	20005f9c 	.word	0x20005f9c
 800c1e0:	42a00000 	.word	0x42a00000

0800c1e4 <AudioPreprocessing_RunMethod4>:
  }
}

//Method 4: Mel scale spectrogram without normalized input and with db scale output
void AudioPreprocessing_RunMethod4(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b088      	sub	sp, #32
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
  uint32_t num_frames;
  //zero pads at the end of the audio buffer
  if (END_ZERO_PADDING)
  {
	  memset(&pInSignal[signal_len], 0, FRAME_LEN);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	4618      	mov	r0, r3
 800c200:	f005 fa0c 	bl	801161c <memset>
	  num_frames = 1 + (signal_len) / HOP_LEN;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	3301      	adds	r3, #1
 800c20a:	617b      	str	r3, [r7, #20]
  else
  {
	  num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
  }

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800c20c:	2300      	movs	r3, #0
 800c20e:	61fb      	str	r3, [r7, #28]
 800c210:	e027      	b.n	800c262 <AudioPreprocessing_RunMethod4+0x7e>
  {
    buf_to_float(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	025b      	lsls	r3, r3, #9
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	4413      	add	r3, r2
 800c21a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c21e:	4915      	ldr	r1, [pc, #84]	; (800c274 <AudioPreprocessing_RunMethod4+0x90>)
 800c220:	4618      	mov	r0, r3
 800c222:	f7f5 fcdc 	bl	8001bde <buf_to_float>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800c226:	4a14      	ldr	r2, [pc, #80]	; (800c278 <AudioPreprocessing_RunMethod4+0x94>)
 800c228:	4912      	ldr	r1, [pc, #72]	; (800c274 <AudioPreprocessing_RunMethod4+0x90>)
 800c22a:	4814      	ldr	r0, [pc, #80]	; (800c27c <AudioPreprocessing_RunMethod4+0x98>)
 800c22c:	f7f5 fd86 	bl	8001d3c <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800c230:	2300      	movs	r3, #0
 800c232:	61bb      	str	r3, [r7, #24]
 800c234:	e00f      	b.n	800c256 <AudioPreprocessing_RunMethod4+0x72>
    {
    	pOut[frame_index * NUM_MELS + i] = pOutColBuffer[i];
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	01da      	lsls	r2, r3, #7
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	68ba      	ldr	r2, [r7, #8]
 800c242:	4413      	add	r3, r2
 800c244:	490c      	ldr	r1, [pc, #48]	; (800c278 <AudioPreprocessing_RunMethod4+0x94>)
 800c246:	69ba      	ldr	r2, [r7, #24]
 800c248:	0092      	lsls	r2, r2, #2
 800c24a:	440a      	add	r2, r1
 800c24c:	6812      	ldr	r2, [r2, #0]
 800c24e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	3301      	adds	r3, #1
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b7f      	cmp	r3, #127	; 0x7f
 800c25a:	d9ec      	bls.n	800c236 <AudioPreprocessing_RunMethod4+0x52>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	3301      	adds	r3, #1
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	69fa      	ldr	r2, [r7, #28]
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	429a      	cmp	r2, r3
 800c268:	d3d3      	bcc.n	800c212 <AudioPreprocessing_RunMethod4+0x2e>
    }
  }
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	3720      	adds	r7, #32
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	20005fac 	.word	0x20005fac
 800c278:	20006fac 	.word	0x20006fac
 800c27c:	20005f9c 	.word	0x20005f9c

0800c280 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a08      	ldr	r2, [pc, #32]	; (800c2ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d103      	bne.n	800c298 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800c290:	4b07      	ldr	r3, [pc, #28]	; (800c2b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800c292:	2201      	movs	r2, #1
 800c294:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800c296:	e002      	b.n	800c29e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800c298:	4b06      	ldr	r3, [pc, #24]	; (800c2b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800c29a:	2201      	movs	r2, #1
 800c29c:	601a      	str	r2, [r3, #0]
}
 800c29e:	bf00      	nop
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	200014a4 	.word	0x200014a4
 800c2b0:	20005688 	.word	0x20005688
 800c2b4:	20005690 	.word	0x20005690

0800c2b8 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a08      	ldr	r2, [pc, #32]	; (800c2e4 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d103      	bne.n	800c2d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800c2c8:	4b07      	ldr	r3, [pc, #28]	; (800c2e8 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800c2ce:	e002      	b.n	800c2d6 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800c2d0:	4b06      	ldr	r3, [pc, #24]	; (800c2ec <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	601a      	str	r2, [r3, #0]
}
 800c2d6:	bf00      	nop
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	200014a4 	.word	0x200014a4
 800c2e8:	2000568c 	.word	0x2000568c
 800c2ec:	20005694 	.word	0x20005694

0800c2f0 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800c2f6:	4b59      	ldr	r3, [pc, #356]	; (800c45c <checkMicrophone+0x16c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d151      	bne.n	800c3a2 <checkMicrophone+0xb2>
 800c2fe:	4b58      	ldr	r3, [pc, #352]	; (800c460 <checkMicrophone+0x170>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d14d      	bne.n	800c3a2 <checkMicrophone+0xb2>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800c306:	2300      	movs	r3, #0
 800c308:	607b      	str	r3, [r7, #4]
 800c30a:	e040      	b.n	800c38e <checkMicrophone+0x9e>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800c30c:	4b55      	ldr	r3, [pc, #340]	; (800c464 <checkMicrophone+0x174>)
 800c30e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c312:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800c316:	2b01      	cmp	r3, #1
 800c318:	d028      	beq.n	800c36c <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800c31a:	4a53      	ldr	r2, [pc, #332]	; (800c468 <checkMicrophone+0x178>)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c322:	121b      	asrs	r3, r3, #8
 800c324:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800c328:	db0b      	blt.n	800c342 <checkMicrophone+0x52>
 800c32a:	4a4f      	ldr	r2, [pc, #316]	; (800c468 <checkMicrophone+0x178>)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c332:	121b      	asrs	r3, r3, #8
 800c334:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c338:	4293      	cmp	r3, r2
 800c33a:	bfa8      	it	ge
 800c33c:	4613      	movge	r3, r2
 800c33e:	b29a      	uxth	r2, r3
 800c340:	e001      	b.n	800c346 <checkMicrophone+0x56>
 800c342:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c346:	4b47      	ldr	r3, [pc, #284]	; (800c464 <checkMicrophone+0x174>)
 800c348:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c34c:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c350:	4944      	ldr	r1, [pc, #272]	; (800c464 <checkMicrophone+0x174>)
 800c352:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800c356:	4b43      	ldr	r3, [pc, #268]	; (800c464 <checkMicrophone+0x174>)
 800c358:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c35c:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c360:	3301      	adds	r3, #1
 800c362:	4a40      	ldr	r2, [pc, #256]	; (800c464 <checkMicrophone+0x174>)
 800c364:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c368:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800c36c:	4b3d      	ldr	r3, [pc, #244]	; (800c464 <checkMicrophone+0x174>)
 800c36e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c372:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c376:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c37a:	d305      	bcc.n	800c388 <checkMicrophone+0x98>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800c37c:	4b39      	ldr	r3, [pc, #228]	; (800c464 <checkMicrophone+0x174>)
 800c37e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(int i = 0; i < 1024; i++)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3301      	adds	r3, #1
 800c38c:	607b      	str	r3, [r7, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c394:	dbba      	blt.n	800c30c <checkMicrophone+0x1c>
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800c396:	4b31      	ldr	r3, [pc, #196]	; (800c45c <checkMicrophone+0x16c>)
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800c39c:	4b30      	ldr	r3, [pc, #192]	; (800c460 <checkMicrophone+0x170>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800c3a2:	4b32      	ldr	r3, [pc, #200]	; (800c46c <checkMicrophone+0x17c>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d152      	bne.n	800c450 <checkMicrophone+0x160>
 800c3aa:	4b31      	ldr	r3, [pc, #196]	; (800c470 <checkMicrophone+0x180>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d14e      	bne.n	800c450 <checkMicrophone+0x160>
	{
		for(int i = 1024; i < 2048; i++)
 800c3b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	e040      	b.n	800c43c <checkMicrophone+0x14c>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800c3ba:	4b2a      	ldr	r3, [pc, #168]	; (800c464 <checkMicrophone+0x174>)
 800c3bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c3c0:	f893 3504 	ldrb.w	r3, [r3, #1284]	; 0x504
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d028      	beq.n	800c41a <checkMicrophone+0x12a>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800c3c8:	4a27      	ldr	r2, [pc, #156]	; (800c468 <checkMicrophone+0x178>)
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d0:	121b      	asrs	r3, r3, #8
 800c3d2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800c3d6:	db0b      	blt.n	800c3f0 <checkMicrophone+0x100>
 800c3d8:	4a23      	ldr	r2, [pc, #140]	; (800c468 <checkMicrophone+0x178>)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e0:	121b      	asrs	r3, r3, #8
 800c3e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	bfa8      	it	ge
 800c3ea:	4613      	movge	r3, r2
 800c3ec:	b29a      	uxth	r2, r3
 800c3ee:	e001      	b.n	800c3f4 <checkMicrophone+0x104>
 800c3f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c3f4:	4b1b      	ldr	r3, [pc, #108]	; (800c464 <checkMicrophone+0x174>)
 800c3f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c3fa:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c3fe:	4919      	ldr	r1, [pc, #100]	; (800c464 <checkMicrophone+0x174>)
 800c400:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800c404:	4b17      	ldr	r3, [pc, #92]	; (800c464 <checkMicrophone+0x174>)
 800c406:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c40a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c40e:	3301      	adds	r3, #1
 800c410:	4a14      	ldr	r2, [pc, #80]	; (800c464 <checkMicrophone+0x174>)
 800c412:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c416:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800c41a:	4b12      	ldr	r3, [pc, #72]	; (800c464 <checkMicrophone+0x174>)
 800c41c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c420:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c424:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c428:	d305      	bcc.n	800c436 <checkMicrophone+0x146>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800c42a:	4b0e      	ldr	r3, [pc, #56]	; (800c464 <checkMicrophone+0x174>)
 800c42c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
		for(int i = 1024; i < 2048; i++)
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	3301      	adds	r3, #1
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c442:	dbba      	blt.n	800c3ba <checkMicrophone+0xca>
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800c444:	4b09      	ldr	r3, [pc, #36]	; (800c46c <checkMicrophone+0x17c>)
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <checkMicrophone+0x180>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	601a      	str	r2, [r3, #0]
	}
}
 800c450:	bf00      	nop
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	20005688 	.word	0x20005688
 800c460:	20005690 	.word	0x20005690
 800c464:	2000a5ac 	.word	0x2000a5ac
 800c468:	20001688 	.word	0x20001688
 800c46c:	2000568c 	.word	0x2000568c
 800c470:	20005694 	.word	0x20005694

0800c474 <get_date>:
extern RTC_HandleTypeDef hrtc;


//returns a string containing current date
char* get_date( char* date)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af02      	add	r7, sp, #8
 800c47a:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800c47c:	f107 030c 	add.w	r3, r7, #12
 800c480:	2200      	movs	r2, #0
 800c482:	4619      	mov	r1, r3
 800c484:	480a      	ldr	r0, [pc, #40]	; (800c4b0 <get_date+0x3c>)
 800c486:	f7f9 fb73 	bl	8005b70 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	461a      	mov	r2, r3
 800c48e:	7b7b      	ldrb	r3, [r7, #13]
 800c490:	4619      	mov	r1, r3
 800c492:	7bfb      	ldrb	r3, [r7, #15]
 800c494:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	460b      	mov	r3, r1
 800c49c:	4905      	ldr	r1, [pc, #20]	; (800c4b4 <get_date+0x40>)
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f005 f9b4 	bl	801180c <siprintf>

	 return date;
 800c4a4:	687b      	ldr	r3, [r7, #4]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20005698 	.word	0x20005698
 800c4b4:	08012f68 	.word	0x08012f68

0800c4b8 <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08c      	sub	sp, #48	; 0x30
 800c4bc:	af02      	add	r7, sp, #8
 800c4be:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800c4c0:	2364      	movs	r3, #100	; 0x64
 800c4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4c6:	236d      	movs	r3, #109	; 0x6d
 800c4c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4cc:	2379      	movs	r3, #121	; 0x79
 800c4ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c4d2:	2368      	movs	r3, #104	; 0x68
 800c4d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800c4d8:	236d      	movs	r3, #109	; 0x6d
 800c4da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c4de:	2373      	movs	r3, #115	; 0x73
 800c4e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800c4e4:	f107 030c 	add.w	r3, r7, #12
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	480c      	ldr	r0, [pc, #48]	; (800c520 <get_time_filename+0x68>)
 800c4ee:	f7f9 fa5d 	bl	80059ac <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800c4f2:	f107 0308 	add.w	r3, r7, #8
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4809      	ldr	r0, [pc, #36]	; (800c520 <get_time_filename+0x68>)
 800c4fc:	f7f9 fb38 	bl	8005b70 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800c500:	7b3b      	ldrb	r3, [r7, #12]
 800c502:	461a      	mov	r2, r3
 800c504:	7b7b      	ldrb	r3, [r7, #13]
 800c506:	4619      	mov	r1, r3
 800c508:	7bbb      	ldrb	r3, [r7, #14]
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	460b      	mov	r3, r1
 800c50e:	4905      	ldr	r1, [pc, #20]	; (800c524 <get_time_filename+0x6c>)
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f005 f97b 	bl	801180c <siprintf>
	 return name;
 800c516:	687b      	ldr	r3, [r7, #4]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3728      	adds	r7, #40	; 0x28
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	20005698 	.word	0x20005698
 800c524:	08012f68 	.word	0x08012f68

0800c528 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800c52c:	2200      	movs	r2, #0
 800c52e:	4906      	ldr	r1, [pc, #24]	; (800c548 <SDInit+0x20>)
 800c530:	4806      	ldr	r0, [pc, #24]	; (800c54c <SDInit+0x24>)
 800c532:	f7fe fabf 	bl	800aab4 <f_mount>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d001      	beq.n	800c540 <SDInit+0x18>
	      {
	          Error_Handler();
 800c53c:	f7f4 fec2 	bl	80012c4 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	2000599c 	.word	0x2000599c
 800c54c:	200059a0 	.word	0x200059a0

0800c550 <createFile>:

int createFile(char* file_name)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800c558:	220a      	movs	r2, #10
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	4807      	ldr	r0, [pc, #28]	; (800c57c <createFile+0x2c>)
 800c55e:	f7fe faef 	bl	800ab40 <f_open>
 800c562:	4603      	mov	r3, r0
 800c564:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <createFile+0x22>
	  {
		  return -1;
 800c56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c570:	e000      	b.n	800c574 <createFile+0x24>
	  }
	  return 0;
 800c572:	2300      	movs	r3, #0

}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	20005bd0 	.word	0x20005bd0

0800c580 <writeToFile>:
int writeToFile(char* text, int size)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	f107 030c 	add.w	r3, r7, #12
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	4804      	ldr	r0, [pc, #16]	; (800c5a4 <writeToFile+0x24>)
 800c594:	f7fe fc92 	bl	800aebc <f_write>
	return byteswritten;
 800c598:	68fb      	ldr	r3, [r7, #12]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3710      	adds	r7, #16
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20005bd0 	.word	0x20005bd0

0800c5a8 <SDclose>:
int SDclose()
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800c5ac:	4802      	ldr	r0, [pc, #8]	; (800c5b8 <SDclose+0x10>)
 800c5ae:	f7fe fe78 	bl	800b2a2 <f_close>
	return 0;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	20005bd0 	.word	0x20005bd0

0800c5bc <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800c5c6:	88fb      	ldrh	r3, [r7, #6]
 800c5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5cc:	d10a      	bne.n	800c5e4 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800c5ce:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	bf0c      	ite	eq
 800c5d6:	2301      	moveq	r3, #1
 800c5d8:	2300      	movne	r3, #0
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	461a      	mov	r2, r3
 800c5de:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <HAL_GPIO_EXTI_Callback+0x38>)
 800c5e0:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800c5e2:	e000      	b.n	800c5e6 <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800c5e4:	bf00      	nop
}
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	20001684 	.word	0x20001684

0800c5f8 <ledsShowValue>:

void ledsShowValue(int value)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !((value)&0x1));
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	bf0c      	ite	eq
 800c60a:	2301      	moveq	r3, #1
 800c60c:	2300      	movne	r3, #0
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	461a      	mov	r2, r3
 800c612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c616:	4817      	ldr	r0, [pc, #92]	; (800c674 <ledsShowValue+0x7c>)
 800c618:	f7f7 fdfa 	bl	8004210 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !((value>>1)&0x1));
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f003 0302 	and.w	r3, r3, #2
 800c622:	2b00      	cmp	r3, #0
 800c624:	bf0c      	ite	eq
 800c626:	2301      	moveq	r3, #1
 800c628:	2300      	movne	r3, #0
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	461a      	mov	r2, r3
 800c62e:	2101      	movs	r1, #1
 800c630:	4811      	ldr	r0, [pc, #68]	; (800c678 <ledsShowValue+0x80>)
 800c632:	f7f7 fded 	bl	8004210 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !((value>>2)&0x1));
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f003 0304 	and.w	r3, r3, #4
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	bf0c      	ite	eq
 800c640:	2301      	moveq	r3, #1
 800c642:	2300      	movne	r3, #0
 800c644:	b2db      	uxtb	r3, r3
 800c646:	461a      	mov	r2, r3
 800c648:	2102      	movs	r1, #2
 800c64a:	480b      	ldr	r0, [pc, #44]	; (800c678 <ledsShowValue+0x80>)
 800c64c:	f7f7 fde0 	bl	8004210 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !((value>>3)&0x1));
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f003 0308 	and.w	r3, r3, #8
 800c656:	2b00      	cmp	r3, #0
 800c658:	bf0c      	ite	eq
 800c65a:	2301      	moveq	r3, #1
 800c65c:	2300      	movne	r3, #0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	461a      	mov	r2, r3
 800c662:	2108      	movs	r1, #8
 800c664:	4804      	ldr	r0, [pc, #16]	; (800c678 <ledsShowValue+0x80>)
 800c666:	f7f7 fdd3 	bl	8004210 <HAL_GPIO_WritePin>
}
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	40022000 	.word	0x40022000
 800c678:	40022400 	.word	0x40022400

0800c67c <WavProcess_EncInit>:
extern AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800c686:	4b22      	ldr	r3, [pc, #136]	; (800c710 <WavProcess_EncInit+0x94>)
 800c688:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c68c:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800c68e:	4b20      	ldr	r3, [pc, #128]	; (800c710 <WavProcess_EncInit+0x94>)
 800c690:	2201      	movs	r2, #1
 800c692:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800c694:	4b1e      	ldr	r3, [pc, #120]	; (800c710 <WavProcess_EncInit+0x94>)
 800c696:	2210      	movs	r2, #16
 800c698:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800c69a:	4b1d      	ldr	r3, [pc, #116]	; (800c710 <WavProcess_EncInit+0x94>)
 800c69c:	4a1d      	ldr	r2, [pc, #116]	; (800c714 <WavProcess_EncInit+0x98>)
 800c69e:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800c6a0:	4b1b      	ldr	r3, [pc, #108]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6a2:	222c      	movs	r2, #44	; 0x2c
 800c6a4:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c6a6:	4b1a      	ldr	r3, [pc, #104]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6a8:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800c6aa:	4a19      	ldr	r2, [pc, #100]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6ac:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800c6ae:	08d2      	lsrs	r2, r2, #3
 800c6b0:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c6b2:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800c6b6:	4a16      	ldr	r2, [pc, #88]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6b8:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800c6ba:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c6be:	4a14      	ldr	r2, [pc, #80]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6c0:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800c6c2:	4b13      	ldr	r3, [pc, #76]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6c4:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800c6c6:	4b12      	ldr	r3, [pc, #72]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6c8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800c6ca:	08db      	lsrs	r3, r3, #3
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	fb12 f303 	smulbb	r3, r2, r3
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	4b0e      	ldr	r3, [pc, #56]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6d6:	841a      	strh	r2, [r3, #32]
  BufferCtl.size = BufferCtl.fptr * 2+44;
 800c6d8:	4b0f      	ldr	r3, [pc, #60]	; (800c718 <WavProcess_EncInit+0x9c>)
 800c6da:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c6de:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800c6e2:	3316      	adds	r3, #22
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	4a0c      	ldr	r2, [pc, #48]	; (800c718 <WavProcess_EncInit+0x9c>)
 800c6e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c6ec:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800c6f0:	4a09      	ldr	r2, [pc, #36]	; (800c718 <WavProcess_EncInit+0x9c>)
 800c6f2:	4907      	ldr	r1, [pc, #28]	; (800c710 <WavProcess_EncInit+0x94>)
 800c6f4:	6838      	ldr	r0, [r7, #0]
 800c6f6:	f000 f811 	bl	800c71c <WavProcess_HeaderInit>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <WavProcess_EncInit+0x88>
  {
    return 1;
 800c700:	2301      	movs	r3, #1
 800c702:	e000      	b.n	800c706 <WavProcess_EncInit+0x8a>
  }
  return 0;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3708      	adds	r7, #8
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	2001a8c0 	.word	0x2001a8c0
 800c714:	001d4c00 	.word	0x001d4c00
 800c718:	2000a5ac 	.word	0x2000a5ac

0800c71c <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2252      	movs	r2, #82	; 0x52
 800c72c:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	3301      	adds	r3, #1
 800c732:	2249      	movs	r2, #73	; 0x49
 800c734:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3302      	adds	r3, #2
 800c73a:	2246      	movs	r2, #70	; 0x46
 800c73c:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3303      	adds	r3, #3
 800c742:	2246      	movs	r2, #70	; 0x46
 800c744:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->size);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c74c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3304      	adds	r3, #4
 800c754:	b2d2      	uxtb	r2, r2
 800c756:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->size >> 8);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c75e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c762:	0a1a      	lsrs	r2, r3, #8
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	3305      	adds	r3, #5
 800c768:	b2d2      	uxtb	r2, r2
 800c76a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->size >> 16);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c772:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c776:	0c1a      	lsrs	r2, r3, #16
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3306      	adds	r3, #6
 800c77c:	b2d2      	uxtb	r2, r2
 800c77e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->size >> 24);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c786:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c78a:	0e1a      	lsrs	r2, r3, #24
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	3307      	adds	r3, #7
 800c790:	b2d2      	uxtb	r2, r2
 800c792:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	3308      	adds	r3, #8
 800c798:	2257      	movs	r2, #87	; 0x57
 800c79a:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3309      	adds	r3, #9
 800c7a0:	2241      	movs	r2, #65	; 0x41
 800c7a2:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	330a      	adds	r3, #10
 800c7a8:	2256      	movs	r2, #86	; 0x56
 800c7aa:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	330b      	adds	r3, #11
 800c7b0:	2245      	movs	r2, #69	; 0x45
 800c7b2:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	330c      	adds	r3, #12
 800c7b8:	2266      	movs	r2, #102	; 0x66
 800c7ba:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	330d      	adds	r3, #13
 800c7c0:	226d      	movs	r2, #109	; 0x6d
 800c7c2:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	330e      	adds	r3, #14
 800c7c8:	2274      	movs	r2, #116	; 0x74
 800c7ca:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	330f      	adds	r3, #15
 800c7d0:	2220      	movs	r2, #32
 800c7d2:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	3310      	adds	r3, #16
 800c7d8:	2210      	movs	r2, #16
 800c7da:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	3311      	adds	r3, #17
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3312      	adds	r3, #18
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	3313      	adds	r3, #19
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	3314      	adds	r3, #20
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3315      	adds	r3, #21
 800c800:	2200      	movs	r2, #0
 800c802:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	8ada      	ldrh	r2, [r3, #22]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3316      	adds	r3, #22
 800c80c:	b2d2      	uxtb	r2, r2
 800c80e:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3317      	adds	r3, #23
 800c814:	2200      	movs	r2, #0
 800c816:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	699a      	ldr	r2, [r3, #24]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3318      	adds	r3, #24
 800c820:	b2d2      	uxtb	r2, r2
 800c822:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	699b      	ldr	r3, [r3, #24]
 800c828:	0a1a      	lsrs	r2, r3, #8
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3319      	adds	r3, #25
 800c82e:	b2d2      	uxtb	r2, r2
 800c830:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	0c1a      	lsrs	r2, r3, #16
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	331a      	adds	r3, #26
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	0e1a      	lsrs	r2, r3, #24
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	331b      	adds	r3, #27
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	69da      	ldr	r2, [r3, #28]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	331c      	adds	r3, #28
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	0a1a      	lsrs	r2, r3, #8
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	331d      	adds	r3, #29
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	69db      	ldr	r3, [r3, #28]
 800c86c:	0c1a      	lsrs	r2, r3, #16
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	331e      	adds	r3, #30
 800c872:	b2d2      	uxtb	r2, r2
 800c874:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	0e1a      	lsrs	r2, r3, #24
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	331f      	adds	r3, #31
 800c880:	b2d2      	uxtb	r2, r2
 800c882:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	8c1a      	ldrh	r2, [r3, #32]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3320      	adds	r3, #32
 800c88c:	b2d2      	uxtb	r2, r2
 800c88e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	3321      	adds	r3, #33	; 0x21
 800c894:	2200      	movs	r2, #0
 800c896:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3322      	adds	r3, #34	; 0x22
 800c8a0:	b2d2      	uxtb	r2, r2
 800c8a2:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3323      	adds	r3, #35	; 0x23
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3324      	adds	r3, #36	; 0x24
 800c8b0:	2264      	movs	r2, #100	; 0x64
 800c8b2:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3325      	adds	r3, #37	; 0x25
 800c8b8:	2261      	movs	r2, #97	; 0x61
 800c8ba:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3326      	adds	r3, #38	; 0x26
 800c8c0:	2274      	movs	r2, #116	; 0x74
 800c8c2:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3327      	adds	r3, #39	; 0x27
 800c8c8:	2261      	movs	r2, #97	; 0x61
 800c8ca:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->size -=44;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c8d2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c8d6:	3b2c      	subs	r3, #44	; 0x2c
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800c8de:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  pHeader[40] = (uint8_t)(BufferCtl->size);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c8e8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3328      	adds	r3, #40	; 0x28
 800c8f0:	b2d2      	uxtb	r2, r2
 800c8f2:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->size >> 8);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c8fa:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c8fe:	0a1a      	lsrs	r2, r3, #8
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3329      	adds	r3, #41	; 0x29
 800c904:	b2d2      	uxtb	r2, r2
 800c906:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->size >> 16);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c90e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c912:	0c1a      	lsrs	r2, r3, #16
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	332a      	adds	r3, #42	; 0x2a
 800c918:	b2d2      	uxtb	r2, r2
 800c91a:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->size >> 24);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c922:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
 800c926:	0e1a      	lsrs	r2, r3, #24
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	332b      	adds	r3, #43	; 0x2b
 800c92c:	b2d2      	uxtb	r2, r2
 800c92e:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
	...

0800c940 <ai_buffer_get_size>:
 800c940:	b368      	cbz	r0, 800c99e <ai_buffer_get_size+0x5e>
 800c942:	4b17      	ldr	r3, [pc, #92]	; (800c9a0 <ai_buffer_get_size+0x60>)
 800c944:	4a17      	ldr	r2, [pc, #92]	; (800c9a4 <ai_buffer_get_size+0x64>)
 800c946:	b410      	push	{r4}
 800c948:	6804      	ldr	r4, [r0, #0]
 800c94a:	4023      	ands	r3, r4
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d123      	bne.n	800c998 <ai_buffer_get_size+0x58>
 800c950:	b311      	cbz	r1, 800c998 <ai_buffer_get_size+0x58>
 800c952:	6984      	ldr	r4, [r0, #24]
 800c954:	6862      	ldr	r2, [r4, #4]
 800c956:	321f      	adds	r2, #31
 800c958:	f022 021f 	bic.w	r2, r2, #31
 800c95c:	7d03      	ldrb	r3, [r0, #20]
 800c95e:	6941      	ldr	r1, [r0, #20]
 800c960:	f1a3 0301 	sub.w	r3, r3, #1
 800c964:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800c968:	fab3 f383 	clz	r3, r3
 800c96c:	095b      	lsrs	r3, r3, #5
 800c96e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800c972:	da0c      	bge.n	800c98e <ai_buffer_get_size+0x4e>
 800c974:	2b01      	cmp	r3, #1
 800c976:	d103      	bne.n	800c980 <ai_buffer_get_size+0x40>
 800c978:	2802      	cmp	r0, #2
 800c97a:	f04f 0302 	mov.w	r3, #2
 800c97e:	d006      	beq.n	800c98e <ai_buffer_get_size+0x4e>
 800c980:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c984:	3301      	adds	r3, #1
 800c986:	4298      	cmp	r0, r3
 800c988:	fb01 f202 	mul.w	r2, r1, r2
 800c98c:	d1f2      	bne.n	800c974 <ai_buffer_get_size+0x34>
 800c98e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800c992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	6984      	ldr	r4, [r0, #24]
 800c99a:	6862      	ldr	r2, [r4, #4]
 800c99c:	e7de      	b.n	800c95c <ai_buffer_get_size+0x1c>
 800c99e:	4770      	bx	lr
 800c9a0:	017fffff 	.word	0x017fffff
 800c9a4:	000400c0 	.word	0x000400c0

0800c9a8 <ai_buffer_array_sane>:
 800c9a8:	b138      	cbz	r0, 800c9ba <ai_buffer_array_sane+0x12>
 800c9aa:	6843      	ldr	r3, [r0, #4]
 800c9ac:	b123      	cbz	r3, 800c9b8 <ai_buffer_array_sane+0x10>
 800c9ae:	8840      	ldrh	r0, [r0, #2]
 800c9b0:	3800      	subs	r0, #0
 800c9b2:	bf18      	it	ne
 800c9b4:	2001      	movne	r0, #1
 800c9b6:	4770      	bx	lr
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	4770      	bx	lr

0800c9bc <_ai_platform_acquire_crc>:
 800c9bc:	2001      	movs	r0, #1
 800c9be:	4770      	bx	lr

0800c9c0 <_ai_platform_release_crc>:
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop

0800c9c4 <ai_platform_get_weights_map>:
 800c9c4:	2900      	cmp	r1, #0
 800c9c6:	bf18      	it	ne
 800c9c8:	2800      	cmpne	r0, #0
 800c9ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9cc:	bf0c      	ite	eq
 800c9ce:	2401      	moveq	r4, #1
 800c9d0:	2400      	movne	r4, #0
 800c9d2:	2a00      	cmp	r2, #0
 800c9d4:	bf08      	it	eq
 800c9d6:	f044 0401 	orreq.w	r4, r4, #1
 800c9da:	b114      	cbz	r4, 800c9e2 <ai_platform_get_weights_map+0x1e>
 800c9dc:	2400      	movs	r4, #0
 800c9de:	4620      	mov	r0, r4
 800c9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e2:	4616      	mov	r6, r2
 800c9e4:	4b22      	ldr	r3, [pc, #136]	; (800ca70 <ai_platform_get_weights_map+0xac>)
 800c9e6:	6812      	ldr	r2, [r2, #0]
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	460f      	mov	r7, r1
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d022      	beq.n	800ca36 <ai_platform_get_weights_map+0x72>
 800c9f0:	6870      	ldr	r0, [r6, #4]
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d0f2      	beq.n	800c9dc <ai_platform_get_weights_map+0x18>
 800c9f6:	6806      	ldr	r6, [r0, #0]
 800c9f8:	429e      	cmp	r6, r3
 800c9fa:	d006      	beq.n	800ca0a <ai_platform_get_weights_map+0x46>
 800c9fc:	f1a1 0401 	sub.w	r4, r1, #1
 800ca00:	6028      	str	r0, [r5, #0]
 800ca02:	fab4 f484 	clz	r4, r4
 800ca06:	0964      	lsrs	r4, r4, #5
 800ca08:	e7e9      	b.n	800c9de <ai_platform_get_weights_map+0x1a>
 800ca0a:	3d04      	subs	r5, #4
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	4621      	mov	r1, r4
 800ca10:	e000      	b.n	800ca14 <ai_platform_get_weights_map+0x50>
 800ca12:	4619      	mov	r1, r3
 800ca14:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ca18:	42b3      	cmp	r3, r6
 800ca1a:	d025      	beq.n	800ca68 <ai_platform_get_weights_map+0xa4>
 800ca1c:	f845 3f04 	str.w	r3, [r5, #4]!
 800ca20:	1c4b      	adds	r3, r1, #1
 800ca22:	429f      	cmp	r7, r3
 800ca24:	d8f5      	bhi.n	800ca12 <ai_platform_get_weights_map+0x4e>
 800ca26:	d1da      	bne.n	800c9de <ai_platform_get_weights_map+0x1a>
 800ca28:	3102      	adds	r1, #2
 800ca2a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ca2e:	42b3      	cmp	r3, r6
 800ca30:	d1d5      	bne.n	800c9de <ai_platform_get_weights_map+0x1a>
 800ca32:	2401      	movs	r4, #1
 800ca34:	e7d3      	b.n	800c9de <ai_platform_get_weights_map+0x1a>
 800ca36:	1d30      	adds	r0, r6, #4
 800ca38:	f7ff ffb6 	bl	800c9a8 <ai_buffer_array_sane>
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d0cd      	beq.n	800c9dc <ai_platform_get_weights_map+0x18>
 800ca40:	88f3      	ldrh	r3, [r6, #6]
 800ca42:	429f      	cmp	r7, r3
 800ca44:	d1ca      	bne.n	800c9dc <ai_platform_get_weights_map+0x18>
 800ca46:	3d04      	subs	r5, #4
 800ca48:	4622      	mov	r2, r4
 800ca4a:	68b3      	ldr	r3, [r6, #8]
 800ca4c:	4423      	add	r3, r4
 800ca4e:	341c      	adds	r4, #28
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	b123      	cbz	r3, 800ca5e <ai_platform_get_weights_map+0x9a>
 800ca54:	3201      	adds	r2, #1
 800ca56:	f845 3f04 	str.w	r3, [r5, #4]!
 800ca5a:	4297      	cmp	r7, r2
 800ca5c:	d8f5      	bhi.n	800ca4a <ai_platform_get_weights_map+0x86>
 800ca5e:	1abc      	subs	r4, r7, r2
 800ca60:	fab4 f484 	clz	r4, r4
 800ca64:	0964      	lsrs	r4, r4, #5
 800ca66:	e7ba      	b.n	800c9de <ai_platform_get_weights_map+0x1a>
 800ca68:	428f      	cmp	r7, r1
 800ca6a:	d1b8      	bne.n	800c9de <ai_platform_get_weights_map+0x1a>
 800ca6c:	e7e1      	b.n	800ca32 <ai_platform_get_weights_map+0x6e>
 800ca6e:	bf00      	nop
 800ca70:	a1facade 	.word	0xa1facade

0800ca74 <ai_platform_get_activations_map>:
 800ca74:	2900      	cmp	r1, #0
 800ca76:	bf18      	it	ne
 800ca78:	2800      	cmpne	r0, #0
 800ca7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca7c:	bf0c      	ite	eq
 800ca7e:	2401      	moveq	r4, #1
 800ca80:	2400      	movne	r4, #0
 800ca82:	2a00      	cmp	r2, #0
 800ca84:	bf08      	it	eq
 800ca86:	f044 0401 	orreq.w	r4, r4, #1
 800ca8a:	b114      	cbz	r4, 800ca92 <ai_platform_get_activations_map+0x1e>
 800ca8c:	2400      	movs	r4, #0
 800ca8e:	4620      	mov	r0, r4
 800ca90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca92:	4616      	mov	r6, r2
 800ca94:	4b22      	ldr	r3, [pc, #136]	; (800cb20 <ai_platform_get_activations_map+0xac>)
 800ca96:	6812      	ldr	r2, [r2, #0]
 800ca98:	4605      	mov	r5, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d022      	beq.n	800cae6 <ai_platform_get_activations_map+0x72>
 800caa0:	6a30      	ldr	r0, [r6, #32]
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d0f2      	beq.n	800ca8c <ai_platform_get_activations_map+0x18>
 800caa6:	6806      	ldr	r6, [r0, #0]
 800caa8:	429e      	cmp	r6, r3
 800caaa:	d006      	beq.n	800caba <ai_platform_get_activations_map+0x46>
 800caac:	f1a1 0401 	sub.w	r4, r1, #1
 800cab0:	6028      	str	r0, [r5, #0]
 800cab2:	fab4 f484 	clz	r4, r4
 800cab6:	0964      	lsrs	r4, r4, #5
 800cab8:	e7e9      	b.n	800ca8e <ai_platform_get_activations_map+0x1a>
 800caba:	3d04      	subs	r5, #4
 800cabc:	4602      	mov	r2, r0
 800cabe:	4621      	mov	r1, r4
 800cac0:	e000      	b.n	800cac4 <ai_platform_get_activations_map+0x50>
 800cac2:	4619      	mov	r1, r3
 800cac4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800cac8:	42b3      	cmp	r3, r6
 800caca:	d026      	beq.n	800cb1a <ai_platform_get_activations_map+0xa6>
 800cacc:	f845 3f04 	str.w	r3, [r5, #4]!
 800cad0:	1c4b      	adds	r3, r1, #1
 800cad2:	429f      	cmp	r7, r3
 800cad4:	d8f5      	bhi.n	800cac2 <ai_platform_get_activations_map+0x4e>
 800cad6:	d1da      	bne.n	800ca8e <ai_platform_get_activations_map+0x1a>
 800cad8:	3102      	adds	r1, #2
 800cada:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800cade:	42b3      	cmp	r3, r6
 800cae0:	d1d5      	bne.n	800ca8e <ai_platform_get_activations_map+0x1a>
 800cae2:	2401      	movs	r4, #1
 800cae4:	e7d3      	b.n	800ca8e <ai_platform_get_activations_map+0x1a>
 800cae6:	f106 000c 	add.w	r0, r6, #12
 800caea:	f7ff ff5d 	bl	800c9a8 <ai_buffer_array_sane>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d0cc      	beq.n	800ca8c <ai_platform_get_activations_map+0x18>
 800caf2:	89f3      	ldrh	r3, [r6, #14]
 800caf4:	429f      	cmp	r7, r3
 800caf6:	d1c9      	bne.n	800ca8c <ai_platform_get_activations_map+0x18>
 800caf8:	3d04      	subs	r5, #4
 800cafa:	4622      	mov	r2, r4
 800cafc:	6933      	ldr	r3, [r6, #16]
 800cafe:	4423      	add	r3, r4
 800cb00:	341c      	adds	r4, #28
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	b123      	cbz	r3, 800cb10 <ai_platform_get_activations_map+0x9c>
 800cb06:	3201      	adds	r2, #1
 800cb08:	f845 3f04 	str.w	r3, [r5, #4]!
 800cb0c:	4297      	cmp	r7, r2
 800cb0e:	d8f5      	bhi.n	800cafc <ai_platform_get_activations_map+0x88>
 800cb10:	1abc      	subs	r4, r7, r2
 800cb12:	fab4 f484 	clz	r4, r4
 800cb16:	0964      	lsrs	r4, r4, #5
 800cb18:	e7b9      	b.n	800ca8e <ai_platform_get_activations_map+0x1a>
 800cb1a:	428f      	cmp	r7, r1
 800cb1c:	d1b7      	bne.n	800ca8e <ai_platform_get_activations_map+0x1a>
 800cb1e:	e7e0      	b.n	800cae2 <ai_platform_get_activations_map+0x6e>
 800cb20:	a1facade 	.word	0xa1facade

0800cb24 <ai_platform_network_get_error>:
 800cb24:	b510      	push	{r4, lr}
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d03f      	beq.n	800cbaa <ai_platform_network_get_error+0x86>
 800cb2a:	4b7d      	ldr	r3, [pc, #500]	; (800cd20 <ai_platform_network_get_error+0x1fc>)
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	6802      	ldr	r2, [r0, #0]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d13a      	bne.n	800cbaa <ai_platform_network_get_error+0x86>
 800cb34:	f7ff ff42 	bl	800c9bc <_ai_platform_acquire_crc>
 800cb38:	4b7a      	ldr	r3, [pc, #488]	; (800cd24 <ai_platform_network_get_error+0x200>)
 800cb3a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb44:	189a      	adds	r2, r3, r2
 800cb46:	2a01      	cmp	r2, #1
 800cb48:	f240 8086 	bls.w	800cc58 <ai_platform_network_get_error+0x134>
 800cb4c:	f240 4249 	movw	r2, #1097	; 0x449
 800cb50:	4293      	cmp	r3, r2
 800cb52:	f000 8081 	beq.w	800cc58 <ai_platform_network_get_error+0x134>
 800cb56:	4a74      	ldr	r2, [pc, #464]	; (800cd28 <ai_platform_network_get_error+0x204>)
 800cb58:	6813      	ldr	r3, [r2, #0]
 800cb5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb5e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cb62:	f000 8087 	beq.w	800cc74 <ai_platform_network_get_error+0x150>
 800cb66:	6813      	ldr	r3, [r2, #0]
 800cb68:	f240 4183 	movw	r1, #1155	; 0x483
 800cb6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb70:	428b      	cmp	r3, r1
 800cb72:	f000 80a9 	beq.w	800ccc8 <ai_platform_network_get_error+0x1a4>
 800cb76:	6813      	ldr	r3, [r2, #0]
 800cb78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb7c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cb80:	f000 80c0 	beq.w	800cd04 <ai_platform_network_get_error+0x1e0>
 800cb84:	6813      	ldr	r3, [r2, #0]
 800cb86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f040 8082 	bne.w	800cc94 <ai_platform_network_get_error+0x170>
 800cb90:	4a66      	ldr	r2, [pc, #408]	; (800cd2c <ai_platform_network_get_error+0x208>)
 800cb92:	2301      	movs	r3, #1
 800cb94:	6093      	str	r3, [r2, #8]
 800cb96:	6893      	ldr	r3, [r2, #8]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1fc      	bne.n	800cb96 <ai_platform_network_get_error+0x72>
 800cb9c:	4964      	ldr	r1, [pc, #400]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cb9e:	4b65      	ldr	r3, [pc, #404]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cba0:	6011      	str	r1, [r2, #0]
 800cba2:	6812      	ldr	r2, [r2, #0]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d075      	beq.n	800cc94 <ai_platform_network_get_error+0x170>
 800cba8:	e7fe      	b.n	800cba8 <ai_platform_network_get_error+0x84>
 800cbaa:	f7ff ff07 	bl	800c9bc <_ai_platform_acquire_crc>
 800cbae:	4b5d      	ldr	r3, [pc, #372]	; (800cd24 <ai_platform_network_get_error+0x200>)
 800cbb0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbba:	185a      	adds	r2, r3, r1
 800cbbc:	2a01      	cmp	r2, #1
 800cbbe:	d929      	bls.n	800cc14 <ai_platform_network_get_error+0xf0>
 800cbc0:	f240 4249 	movw	r2, #1097	; 0x449
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d025      	beq.n	800cc14 <ai_platform_network_get_error+0xf0>
 800cbc8:	4a57      	ldr	r2, [pc, #348]	; (800cd28 <ai_platform_network_get_error+0x204>)
 800cbca:	6813      	ldr	r3, [r2, #0]
 800cbcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbd0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cbd4:	d02b      	beq.n	800cc2e <ai_platform_network_get_error+0x10a>
 800cbd6:	6813      	ldr	r3, [r2, #0]
 800cbd8:	f240 4183 	movw	r1, #1155	; 0x483
 800cbdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbe0:	428b      	cmp	r3, r1
 800cbe2:	d060      	beq.n	800cca6 <ai_platform_network_get_error+0x182>
 800cbe4:	6813      	ldr	r3, [r2, #0]
 800cbe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbea:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cbee:	d07c      	beq.n	800ccea <ai_platform_network_get_error+0x1c6>
 800cbf0:	6813      	ldr	r3, [r2, #0]
 800cbf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d129      	bne.n	800cc4e <ai_platform_network_get_error+0x12a>
 800cbfa:	4a4c      	ldr	r2, [pc, #304]	; (800cd2c <ai_platform_network_get_error+0x208>)
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	6093      	str	r3, [r2, #8]
 800cc00:	6893      	ldr	r3, [r2, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d1fc      	bne.n	800cc00 <ai_platform_network_get_error+0xdc>
 800cc06:	494a      	ldr	r1, [pc, #296]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cc08:	4b4a      	ldr	r3, [pc, #296]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cc0a:	6011      	str	r1, [r2, #0]
 800cc0c:	6812      	ldr	r2, [r2, #0]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d01d      	beq.n	800cc4e <ai_platform_network_get_error+0x12a>
 800cc12:	e7fe      	b.n	800cc12 <ai_platform_network_get_error+0xee>
 800cc14:	4a45      	ldr	r2, [pc, #276]	; (800cd2c <ai_platform_network_get_error+0x208>)
 800cc16:	2301      	movs	r3, #1
 800cc18:	6093      	str	r3, [r2, #8]
 800cc1a:	6893      	ldr	r3, [r2, #8]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1fc      	bne.n	800cc1a <ai_platform_network_get_error+0xf6>
 800cc20:	4943      	ldr	r1, [pc, #268]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cc22:	4b44      	ldr	r3, [pc, #272]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cc24:	6011      	str	r1, [r2, #0]
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d010      	beq.n	800cc4e <ai_platform_network_get_error+0x12a>
 800cc2c:	e7fe      	b.n	800cc2c <ai_platform_network_get_error+0x108>
 800cc2e:	4a42      	ldr	r2, [pc, #264]	; (800cd38 <ai_platform_network_get_error+0x214>)
 800cc30:	2301      	movs	r3, #1
 800cc32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1fb      	bne.n	800cc36 <ai_platform_network_get_error+0x112>
 800cc3e:	493c      	ldr	r1, [pc, #240]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cc40:	4b3c      	ldr	r3, [pc, #240]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cc42:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cc46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d111      	bne.n	800cc72 <ai_platform_network_get_error+0x14e>
 800cc4e:	f7ff feb7 	bl	800c9c0 <_ai_platform_release_crc>
 800cc52:	f241 0010 	movw	r0, #4112	; 0x1010
 800cc56:	bd10      	pop	{r4, pc}
 800cc58:	4a34      	ldr	r2, [pc, #208]	; (800cd2c <ai_platform_network_get_error+0x208>)
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	6093      	str	r3, [r2, #8]
 800cc5e:	6893      	ldr	r3, [r2, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1fc      	bne.n	800cc5e <ai_platform_network_get_error+0x13a>
 800cc64:	4932      	ldr	r1, [pc, #200]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cc66:	4b33      	ldr	r3, [pc, #204]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cc68:	6011      	str	r1, [r2, #0]
 800cc6a:	6812      	ldr	r2, [r2, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d011      	beq.n	800cc94 <ai_platform_network_get_error+0x170>
 800cc70:	e7fe      	b.n	800cc70 <ai_platform_network_get_error+0x14c>
 800cc72:	e7fe      	b.n	800cc72 <ai_platform_network_get_error+0x14e>
 800cc74:	4a30      	ldr	r2, [pc, #192]	; (800cd38 <ai_platform_network_get_error+0x214>)
 800cc76:	2301      	movs	r3, #1
 800cc78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1fb      	bne.n	800cc7c <ai_platform_network_get_error+0x158>
 800cc84:	492a      	ldr	r1, [pc, #168]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cc86:	4b2b      	ldr	r3, [pc, #172]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cc88:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cc8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d107      	bne.n	800cca4 <ai_platform_network_get_error+0x180>
 800cc94:	f7ff fe94 	bl	800c9c0 <_ai_platform_release_crc>
 800cc98:	f104 0010 	add.w	r0, r4, #16
 800cc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cca0:	f001 bae6 	b.w	800e270 <core_get_error>
 800cca4:	e7fe      	b.n	800cca4 <ai_platform_network_get_error+0x180>
 800cca6:	4a24      	ldr	r2, [pc, #144]	; (800cd38 <ai_platform_network_get_error+0x214>)
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ccae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1fb      	bne.n	800ccae <ai_platform_network_get_error+0x18a>
 800ccb6:	491e      	ldr	r1, [pc, #120]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800ccba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ccbe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d0c3      	beq.n	800cc4e <ai_platform_network_get_error+0x12a>
 800ccc6:	e7fe      	b.n	800ccc6 <ai_platform_network_get_error+0x1a2>
 800ccc8:	4a1b      	ldr	r2, [pc, #108]	; (800cd38 <ai_platform_network_get_error+0x214>)
 800ccca:	2301      	movs	r3, #1
 800cccc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ccd0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1fb      	bne.n	800ccd0 <ai_platform_network_get_error+0x1ac>
 800ccd8:	4915      	ldr	r1, [pc, #84]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800ccda:	4b16      	ldr	r3, [pc, #88]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800ccdc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cce0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d0d5      	beq.n	800cc94 <ai_platform_network_get_error+0x170>
 800cce8:	e7fe      	b.n	800cce8 <ai_platform_network_get_error+0x1c4>
 800ccea:	4a10      	ldr	r2, [pc, #64]	; (800cd2c <ai_platform_network_get_error+0x208>)
 800ccec:	2301      	movs	r3, #1
 800ccee:	6093      	str	r3, [r2, #8]
 800ccf0:	6893      	ldr	r3, [r2, #8]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1fc      	bne.n	800ccf0 <ai_platform_network_get_error+0x1cc>
 800ccf6:	490e      	ldr	r1, [pc, #56]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800ccf8:	4b0e      	ldr	r3, [pc, #56]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800ccfa:	6011      	str	r1, [r2, #0]
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d0a5      	beq.n	800cc4e <ai_platform_network_get_error+0x12a>
 800cd02:	e7fe      	b.n	800cd02 <ai_platform_network_get_error+0x1de>
 800cd04:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <ai_platform_network_get_error+0x208>)
 800cd06:	2301      	movs	r3, #1
 800cd08:	6093      	str	r3, [r2, #8]
 800cd0a:	6893      	ldr	r3, [r2, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1fc      	bne.n	800cd0a <ai_platform_network_get_error+0x1e6>
 800cd10:	4907      	ldr	r1, [pc, #28]	; (800cd30 <ai_platform_network_get_error+0x20c>)
 800cd12:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <ai_platform_network_get_error+0x210>)
 800cd14:	6011      	str	r1, [r2, #0]
 800cd16:	6812      	ldr	r2, [r2, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d0bb      	beq.n	800cc94 <ai_platform_network_get_error+0x170>
 800cd1c:	e7fe      	b.n	800cd1c <ai_platform_network_get_error+0x1f8>
 800cd1e:	bf00      	nop
 800cd20:	a1c00100 	.word	0xa1c00100
 800cd24:	e0042000 	.word	0xe0042000
 800cd28:	5c001000 	.word	0x5c001000
 800cd2c:	40023000 	.word	0x40023000
 800cd30:	f407a5c2 	.word	0xf407a5c2
 800cd34:	b5e8b5cd 	.word	0xb5e8b5cd
 800cd38:	58024000 	.word	0x58024000

0800cd3c <ai_platform_network_set_error>:
 800cd3c:	b110      	cbz	r0, 800cd44 <ai_platform_network_set_error+0x8>
 800cd3e:	3010      	adds	r0, #16
 800cd40:	f001 ba9c 	b.w	800e27c <core_set_error>
 800cd44:	4770      	bx	lr
 800cd46:	bf00      	nop

0800cd48 <ai_platform_inputs_get>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	9102      	str	r1, [sp, #8]
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f000 8093 	beq.w	800ce7c <ai_platform_inputs_get+0x134>
 800cd56:	4baa      	ldr	r3, [pc, #680]	; (800d000 <ai_platform_inputs_get+0x2b8>)
 800cd58:	4681      	mov	r9, r0
 800cd5a:	6802      	ldr	r2, [r0, #0]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	f040 808d 	bne.w	800ce7c <ai_platform_inputs_get+0x134>
 800cd62:	f7ff fe2b 	bl	800c9bc <_ai_platform_acquire_crc>
 800cd66:	4ba7      	ldr	r3, [pc, #668]	; (800d004 <ai_platform_inputs_get+0x2bc>)
 800cd68:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd72:	189a      	adds	r2, r3, r2
 800cd74:	2a01      	cmp	r2, #1
 800cd76:	f240 80da 	bls.w	800cf2e <ai_platform_inputs_get+0x1e6>
 800cd7a:	f240 4249 	movw	r2, #1097	; 0x449
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	f000 80d5 	beq.w	800cf2e <ai_platform_inputs_get+0x1e6>
 800cd84:	4aa0      	ldr	r2, [pc, #640]	; (800d008 <ai_platform_inputs_get+0x2c0>)
 800cd86:	6813      	ldr	r3, [r2, #0]
 800cd88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cd90:	f000 80dc 	beq.w	800cf4c <ai_platform_inputs_get+0x204>
 800cd94:	6813      	ldr	r3, [r2, #0]
 800cd96:	f240 4183 	movw	r1, #1155	; 0x483
 800cd9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd9e:	428b      	cmp	r3, r1
 800cda0:	f000 810e 	beq.w	800cfc0 <ai_platform_inputs_get+0x278>
 800cda4:	6813      	ldr	r3, [r2, #0]
 800cda6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdaa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cdae:	f000 8143 	beq.w	800d038 <ai_platform_inputs_get+0x2f0>
 800cdb2:	6813      	ldr	r3, [r2, #0]
 800cdb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	f000 8113 	beq.w	800cfe4 <ai_platform_inputs_get+0x29c>
 800cdbe:	f7ff fdff 	bl	800c9c0 <_ai_platform_release_crc>
 800cdc2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 80d2 	beq.w	800cf70 <ai_platform_inputs_get+0x228>
 800cdcc:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800cdd0:	f1ba 0f00 	cmp.w	sl, #0
 800cdd4:	f000 80cc 	beq.w	800cf70 <ai_platform_inputs_get+0x228>
 800cdd8:	2100      	movs	r1, #0
 800cdda:	f8cd 900c 	str.w	r9, [sp, #12]
 800cdde:	460d      	mov	r5, r1
 800cde0:	4689      	mov	r9, r1
 800cde2:	e016      	b.n	800ce12 <ai_platform_inputs_get+0xca>
 800cde4:	9a01      	ldr	r2, [sp, #4]
 800cde6:	2301      	movs	r3, #1
 800cde8:	f848 3002 	str.w	r3, [r8, r2]
 800cdec:	69b2      	ldr	r2, [r6, #24]
 800cdee:	f04f 0301 	mov.w	r3, #1
 800cdf2:	6856      	ldr	r6, [r2, #4]
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	f109 091c 	add.w	r9, r9, #28
 800cdfa:	7523      	strb	r3, [r4, #20]
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	6962      	ldr	r2, [r4, #20]
 800ce00:	60a7      	str	r7, [r4, #8]
 800ce02:	f36b 221f 	bfi	r2, fp, #8, #24
 800ce06:	6126      	str	r6, [r4, #16]
 800ce08:	61a1      	str	r1, [r4, #24]
 800ce0a:	60e3      	str	r3, [r4, #12]
 800ce0c:	6162      	str	r2, [r4, #20]
 800ce0e:	e9c4 0c00 	strd	r0, ip, [r4]
 800ce12:	f8ba 3000 	ldrh.w	r3, [sl]
 800ce16:	b2ac      	uxth	r4, r5
 800ce18:	42ab      	cmp	r3, r5
 800ce1a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ce1e:	9301      	str	r3, [sp, #4]
 800ce20:	f240 80b5 	bls.w	800cf8e <ai_platform_inputs_get+0x246>
 800ce24:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 80b0 	beq.w	800cf8e <ai_platform_inputs_get+0x246>
 800ce2e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ce32:	2e00      	cmp	r6, #0
 800ce34:	f000 80ab 	beq.w	800cf8e <ai_platform_inputs_get+0x246>
 800ce38:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ce3c:	69b2      	ldr	r2, [r6, #24]
 800ce3e:	68f1      	ldr	r1, [r6, #12]
 800ce40:	6810      	ldr	r0, [r2, #0]
 800ce42:	9100      	str	r1, [sp, #0]
 800ce44:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ce48:	68b3      	ldr	r3, [r6, #8]
 800ce4a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ce4e:	444c      	add	r4, r9
 800ce50:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ce54:	f003 fa5e 	bl	8010314 <ai_array_to_buffer_fmt>
 800ce58:	69b2      	ldr	r2, [r6, #24]
 800ce5a:	9900      	ldr	r1, [sp, #0]
 800ce5c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ce60:	2f00      	cmp	r7, #0
 800ce62:	d0c4      	beq.n	800cdee <ai_platform_inputs_get+0xa6>
 800ce64:	2200      	movs	r2, #0
 800ce66:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800ce6a:	6832      	ldr	r2, [r6, #0]
 800ce6c:	607a      	str	r2, [r7, #4]
 800ce6e:	b112      	cbz	r2, 800ce76 <ai_platform_inputs_get+0x12e>
 800ce70:	8852      	ldrh	r2, [r2, #2]
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	d1b6      	bne.n	800cde4 <ai_platform_inputs_get+0x9c>
 800ce76:	69b2      	ldr	r2, [r6, #24]
 800ce78:	2700      	movs	r7, #0
 800ce7a:	e7b8      	b.n	800cdee <ai_platform_inputs_get+0xa6>
 800ce7c:	f7ff fd9e 	bl	800c9bc <_ai_platform_acquire_crc>
 800ce80:	4b60      	ldr	r3, [pc, #384]	; (800d004 <ai_platform_inputs_get+0x2bc>)
 800ce82:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce8c:	185a      	adds	r2, r3, r1
 800ce8e:	2a01      	cmp	r2, #1
 800ce90:	d92a      	bls.n	800cee8 <ai_platform_inputs_get+0x1a0>
 800ce92:	f240 4249 	movw	r2, #1097	; 0x449
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d026      	beq.n	800cee8 <ai_platform_inputs_get+0x1a0>
 800ce9a:	4a5b      	ldr	r2, [pc, #364]	; (800d008 <ai_platform_inputs_get+0x2c0>)
 800ce9c:	6813      	ldr	r3, [r2, #0]
 800ce9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cea2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cea6:	d02c      	beq.n	800cf02 <ai_platform_inputs_get+0x1ba>
 800cea8:	6813      	ldr	r3, [r2, #0]
 800ceaa:	f240 4183 	movw	r1, #1155	; 0x483
 800ceae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ceb2:	428b      	cmp	r3, r1
 800ceb4:	d073      	beq.n	800cf9e <ai_platform_inputs_get+0x256>
 800ceb6:	6813      	ldr	r3, [r2, #0]
 800ceb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cebc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cec0:	f000 80ac 	beq.w	800d01c <ai_platform_inputs_get+0x2d4>
 800cec4:	6813      	ldr	r3, [r2, #0]
 800cec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d129      	bne.n	800cf22 <ai_platform_inputs_get+0x1da>
 800cece:	4a4f      	ldr	r2, [pc, #316]	; (800d00c <ai_platform_inputs_get+0x2c4>)
 800ced0:	2301      	movs	r3, #1
 800ced2:	6093      	str	r3, [r2, #8]
 800ced4:	6893      	ldr	r3, [r2, #8]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d1fc      	bne.n	800ced4 <ai_platform_inputs_get+0x18c>
 800ceda:	494d      	ldr	r1, [pc, #308]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cedc:	4b4d      	ldr	r3, [pc, #308]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cede:	6011      	str	r1, [r2, #0]
 800cee0:	6812      	ldr	r2, [r2, #0]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d01d      	beq.n	800cf22 <ai_platform_inputs_get+0x1da>
 800cee6:	e7fe      	b.n	800cee6 <ai_platform_inputs_get+0x19e>
 800cee8:	4a48      	ldr	r2, [pc, #288]	; (800d00c <ai_platform_inputs_get+0x2c4>)
 800ceea:	2301      	movs	r3, #1
 800ceec:	6093      	str	r3, [r2, #8]
 800ceee:	6893      	ldr	r3, [r2, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1fc      	bne.n	800ceee <ai_platform_inputs_get+0x1a6>
 800cef4:	4946      	ldr	r1, [pc, #280]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cef6:	4b47      	ldr	r3, [pc, #284]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cef8:	6011      	str	r1, [r2, #0]
 800cefa:	6812      	ldr	r2, [r2, #0]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d010      	beq.n	800cf22 <ai_platform_inputs_get+0x1da>
 800cf00:	e7fe      	b.n	800cf00 <ai_platform_inputs_get+0x1b8>
 800cf02:	4a45      	ldr	r2, [pc, #276]	; (800d018 <ai_platform_inputs_get+0x2d0>)
 800cf04:	2301      	movs	r3, #1
 800cf06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1fb      	bne.n	800cf0a <ai_platform_inputs_get+0x1c2>
 800cf12:	493f      	ldr	r1, [pc, #252]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cf14:	4b3f      	ldr	r3, [pc, #252]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cf16:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cf1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d113      	bne.n	800cf4a <ai_platform_inputs_get+0x202>
 800cf22:	f7ff fd4d 	bl	800c9c0 <_ai_platform_release_crc>
 800cf26:	2000      	movs	r0, #0
 800cf28:	b005      	add	sp, #20
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	4a37      	ldr	r2, [pc, #220]	; (800d00c <ai_platform_inputs_get+0x2c4>)
 800cf30:	2301      	movs	r3, #1
 800cf32:	6093      	str	r3, [r2, #8]
 800cf34:	6893      	ldr	r3, [r2, #8]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d1fc      	bne.n	800cf34 <ai_platform_inputs_get+0x1ec>
 800cf3a:	4b35      	ldr	r3, [pc, #212]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	4b35      	ldr	r3, [pc, #212]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cf40:	6812      	ldr	r2, [r2, #0]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	f43f af3b 	beq.w	800cdbe <ai_platform_inputs_get+0x76>
 800cf48:	e7fe      	b.n	800cf48 <ai_platform_inputs_get+0x200>
 800cf4a:	e7fe      	b.n	800cf4a <ai_platform_inputs_get+0x202>
 800cf4c:	4a32      	ldr	r2, [pc, #200]	; (800d018 <ai_platform_inputs_get+0x2d0>)
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d1fb      	bne.n	800cf54 <ai_platform_inputs_get+0x20c>
 800cf5c:	4b2c      	ldr	r3, [pc, #176]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cf5e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cf62:	4b2c      	ldr	r3, [pc, #176]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cf64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	f43f af28 	beq.w	800cdbe <ai_platform_inputs_get+0x76>
 800cf6e:	e7fe      	b.n	800cf6e <ai_platform_inputs_get+0x226>
 800cf70:	2400      	movs	r4, #0
 800cf72:	2218      	movs	r2, #24
 800cf74:	2111      	movs	r1, #17
 800cf76:	f109 0010 	add.w	r0, r9, #16
 800cf7a:	f001 f97f 	bl	800e27c <core_set_error>
 800cf7e:	4620      	mov	r0, r4
 800cf80:	9b02      	ldr	r3, [sp, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0d0      	beq.n	800cf28 <ai_platform_inputs_get+0x1e0>
 800cf86:	801c      	strh	r4, [r3, #0]
 800cf88:	b005      	add	sp, #20
 800cf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cf92:	2c00      	cmp	r4, #0
 800cf94:	d0ec      	beq.n	800cf70 <ai_platform_inputs_get+0x228>
 800cf96:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cf9a:	6858      	ldr	r0, [r3, #4]
 800cf9c:	e7f0      	b.n	800cf80 <ai_platform_inputs_get+0x238>
 800cf9e:	4a1e      	ldr	r2, [pc, #120]	; (800d018 <ai_platform_inputs_get+0x2d0>)
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfa6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1fb      	bne.n	800cfa6 <ai_platform_inputs_get+0x25e>
 800cfae:	4918      	ldr	r1, [pc, #96]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cfb0:	4b18      	ldr	r3, [pc, #96]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cfb2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cfb6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d0b1      	beq.n	800cf22 <ai_platform_inputs_get+0x1da>
 800cfbe:	e7fe      	b.n	800cfbe <ai_platform_inputs_get+0x276>
 800cfc0:	4a15      	ldr	r2, [pc, #84]	; (800d018 <ai_platform_inputs_get+0x2d0>)
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfc8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1fb      	bne.n	800cfc8 <ai_platform_inputs_get+0x280>
 800cfd0:	4b0f      	ldr	r3, [pc, #60]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cfd2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cfd6:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cfd8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	f43f aeee 	beq.w	800cdbe <ai_platform_inputs_get+0x76>
 800cfe2:	e7fe      	b.n	800cfe2 <ai_platform_inputs_get+0x29a>
 800cfe4:	4a09      	ldr	r2, [pc, #36]	; (800d00c <ai_platform_inputs_get+0x2c4>)
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	6093      	str	r3, [r2, #8]
 800cfea:	6893      	ldr	r3, [r2, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1fc      	bne.n	800cfea <ai_platform_inputs_get+0x2a2>
 800cff0:	4b07      	ldr	r3, [pc, #28]	; (800d010 <ai_platform_inputs_get+0x2c8>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	4b07      	ldr	r3, [pc, #28]	; (800d014 <ai_platform_inputs_get+0x2cc>)
 800cff6:	6812      	ldr	r2, [r2, #0]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	f43f aee0 	beq.w	800cdbe <ai_platform_inputs_get+0x76>
 800cffe:	e7fe      	b.n	800cffe <ai_platform_inputs_get+0x2b6>
 800d000:	a1c00100 	.word	0xa1c00100
 800d004:	e0042000 	.word	0xe0042000
 800d008:	5c001000 	.word	0x5c001000
 800d00c:	40023000 	.word	0x40023000
 800d010:	f407a5c2 	.word	0xf407a5c2
 800d014:	b5e8b5cd 	.word	0xb5e8b5cd
 800d018:	58024000 	.word	0x58024000
 800d01c:	4a0d      	ldr	r2, [pc, #52]	; (800d054 <ai_platform_inputs_get+0x30c>)
 800d01e:	2301      	movs	r3, #1
 800d020:	6093      	str	r3, [r2, #8]
 800d022:	6893      	ldr	r3, [r2, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1fc      	bne.n	800d022 <ai_platform_inputs_get+0x2da>
 800d028:	490b      	ldr	r1, [pc, #44]	; (800d058 <ai_platform_inputs_get+0x310>)
 800d02a:	4b0c      	ldr	r3, [pc, #48]	; (800d05c <ai_platform_inputs_get+0x314>)
 800d02c:	6011      	str	r1, [r2, #0]
 800d02e:	6812      	ldr	r2, [r2, #0]
 800d030:	429a      	cmp	r2, r3
 800d032:	f43f af76 	beq.w	800cf22 <ai_platform_inputs_get+0x1da>
 800d036:	e7fe      	b.n	800d036 <ai_platform_inputs_get+0x2ee>
 800d038:	4a06      	ldr	r2, [pc, #24]	; (800d054 <ai_platform_inputs_get+0x30c>)
 800d03a:	2301      	movs	r3, #1
 800d03c:	6093      	str	r3, [r2, #8]
 800d03e:	6893      	ldr	r3, [r2, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1fc      	bne.n	800d03e <ai_platform_inputs_get+0x2f6>
 800d044:	4b04      	ldr	r3, [pc, #16]	; (800d058 <ai_platform_inputs_get+0x310>)
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	4b04      	ldr	r3, [pc, #16]	; (800d05c <ai_platform_inputs_get+0x314>)
 800d04a:	6812      	ldr	r2, [r2, #0]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	f43f aeb6 	beq.w	800cdbe <ai_platform_inputs_get+0x76>
 800d052:	e7fe      	b.n	800d052 <ai_platform_inputs_get+0x30a>
 800d054:	40023000 	.word	0x40023000
 800d058:	f407a5c2 	.word	0xf407a5c2
 800d05c:	b5e8b5cd 	.word	0xb5e8b5cd

0800d060 <ai_platform_outputs_get>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	b085      	sub	sp, #20
 800d066:	9102      	str	r1, [sp, #8]
 800d068:	2800      	cmp	r0, #0
 800d06a:	f000 808f 	beq.w	800d18c <ai_platform_outputs_get+0x12c>
 800d06e:	4ba8      	ldr	r3, [pc, #672]	; (800d310 <ai_platform_outputs_get+0x2b0>)
 800d070:	4681      	mov	r9, r0
 800d072:	6802      	ldr	r2, [r0, #0]
 800d074:	429a      	cmp	r2, r3
 800d076:	f040 8089 	bne.w	800d18c <ai_platform_outputs_get+0x12c>
 800d07a:	f7ff fc9f 	bl	800c9bc <_ai_platform_acquire_crc>
 800d07e:	4ba5      	ldr	r3, [pc, #660]	; (800d314 <ai_platform_outputs_get+0x2b4>)
 800d080:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d08a:	189a      	adds	r2, r3, r2
 800d08c:	2a01      	cmp	r2, #1
 800d08e:	f240 80d6 	bls.w	800d23e <ai_platform_outputs_get+0x1de>
 800d092:	f240 4249 	movw	r2, #1097	; 0x449
 800d096:	4293      	cmp	r3, r2
 800d098:	f000 80d1 	beq.w	800d23e <ai_platform_outputs_get+0x1de>
 800d09c:	4a9e      	ldr	r2, [pc, #632]	; (800d318 <ai_platform_outputs_get+0x2b8>)
 800d09e:	6813      	ldr	r3, [r2, #0]
 800d0a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0a4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d0a8:	f000 80d8 	beq.w	800d25c <ai_platform_outputs_get+0x1fc>
 800d0ac:	6813      	ldr	r3, [r2, #0]
 800d0ae:	f240 4183 	movw	r1, #1155	; 0x483
 800d0b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0b6:	428b      	cmp	r3, r1
 800d0b8:	f000 8109 	beq.w	800d2ce <ai_platform_outputs_get+0x26e>
 800d0bc:	6813      	ldr	r3, [r2, #0]
 800d0be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0c2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d0c6:	f000 813f 	beq.w	800d348 <ai_platform_outputs_get+0x2e8>
 800d0ca:	6813      	ldr	r3, [r2, #0]
 800d0cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 810e 	beq.w	800d2f2 <ai_platform_outputs_get+0x292>
 800d0d6:	f7ff fc73 	bl	800c9c0 <_ai_platform_release_crc>
 800d0da:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	f240 80db 	bls.w	800d29a <ai_platform_outputs_get+0x23a>
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800d0ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	4689      	mov	r9, r1
 800d0f2:	e016      	b.n	800d122 <ai_platform_outputs_get+0xc2>
 800d0f4:	9a01      	ldr	r2, [sp, #4]
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f848 3002 	str.w	r3, [r8, r2]
 800d0fc:	69b2      	ldr	r2, [r6, #24]
 800d0fe:	f04f 0301 	mov.w	r3, #1
 800d102:	6856      	ldr	r6, [r2, #4]
 800d104:	3501      	adds	r5, #1
 800d106:	f109 091c 	add.w	r9, r9, #28
 800d10a:	7523      	strb	r3, [r4, #20]
 800d10c:	2300      	movs	r3, #0
 800d10e:	6962      	ldr	r2, [r4, #20]
 800d110:	60a7      	str	r7, [r4, #8]
 800d112:	f36b 221f 	bfi	r2, fp, #8, #24
 800d116:	6126      	str	r6, [r4, #16]
 800d118:	61a1      	str	r1, [r4, #24]
 800d11a:	60e3      	str	r3, [r4, #12]
 800d11c:	6162      	str	r2, [r4, #20]
 800d11e:	e9c4 0c00 	strd	r0, ip, [r4]
 800d122:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800d126:	b2ac      	uxth	r4, r5
 800d128:	42ab      	cmp	r3, r5
 800d12a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800d12e:	9301      	str	r3, [sp, #4]
 800d130:	f240 80a6 	bls.w	800d280 <ai_platform_outputs_get+0x220>
 800d134:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f000 80a1 	beq.w	800d280 <ai_platform_outputs_get+0x220>
 800d13e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d142:	2e00      	cmp	r6, #0
 800d144:	f000 809c 	beq.w	800d280 <ai_platform_outputs_get+0x220>
 800d148:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d14c:	69b2      	ldr	r2, [r6, #24]
 800d14e:	68f1      	ldr	r1, [r6, #12]
 800d150:	6810      	ldr	r0, [r2, #0]
 800d152:	9100      	str	r1, [sp, #0]
 800d154:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800d158:	68b3      	ldr	r3, [r6, #8]
 800d15a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800d15e:	444c      	add	r4, r9
 800d160:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800d164:	f003 f8d6 	bl	8010314 <ai_array_to_buffer_fmt>
 800d168:	69b2      	ldr	r2, [r6, #24]
 800d16a:	9900      	ldr	r1, [sp, #0]
 800d16c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d170:	2f00      	cmp	r7, #0
 800d172:	d0c4      	beq.n	800d0fe <ai_platform_outputs_get+0x9e>
 800d174:	2200      	movs	r2, #0
 800d176:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800d17a:	6832      	ldr	r2, [r6, #0]
 800d17c:	607a      	str	r2, [r7, #4]
 800d17e:	b112      	cbz	r2, 800d186 <ai_platform_outputs_get+0x126>
 800d180:	8852      	ldrh	r2, [r2, #2]
 800d182:	2a00      	cmp	r2, #0
 800d184:	d1b6      	bne.n	800d0f4 <ai_platform_outputs_get+0x94>
 800d186:	69b2      	ldr	r2, [r6, #24]
 800d188:	2700      	movs	r7, #0
 800d18a:	e7b8      	b.n	800d0fe <ai_platform_outputs_get+0x9e>
 800d18c:	f7ff fc16 	bl	800c9bc <_ai_platform_acquire_crc>
 800d190:	4b60      	ldr	r3, [pc, #384]	; (800d314 <ai_platform_outputs_get+0x2b4>)
 800d192:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d19c:	185a      	adds	r2, r3, r1
 800d19e:	2a01      	cmp	r2, #1
 800d1a0:	d92a      	bls.n	800d1f8 <ai_platform_outputs_get+0x198>
 800d1a2:	f240 4249 	movw	r2, #1097	; 0x449
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d026      	beq.n	800d1f8 <ai_platform_outputs_get+0x198>
 800d1aa:	4a5b      	ldr	r2, [pc, #364]	; (800d318 <ai_platform_outputs_get+0x2b8>)
 800d1ac:	6813      	ldr	r3, [r2, #0]
 800d1ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1b2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d1b6:	d02c      	beq.n	800d212 <ai_platform_outputs_get+0x1b2>
 800d1b8:	6813      	ldr	r3, [r2, #0]
 800d1ba:	f240 4183 	movw	r1, #1155	; 0x483
 800d1be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1c2:	428b      	cmp	r3, r1
 800d1c4:	d072      	beq.n	800d2ac <ai_platform_outputs_get+0x24c>
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1cc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d1d0:	f000 80ac 	beq.w	800d32c <ai_platform_outputs_get+0x2cc>
 800d1d4:	6813      	ldr	r3, [r2, #0]
 800d1d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d129      	bne.n	800d232 <ai_platform_outputs_get+0x1d2>
 800d1de:	4a4f      	ldr	r2, [pc, #316]	; (800d31c <ai_platform_outputs_get+0x2bc>)
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	6093      	str	r3, [r2, #8]
 800d1e4:	6893      	ldr	r3, [r2, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d1fc      	bne.n	800d1e4 <ai_platform_outputs_get+0x184>
 800d1ea:	494d      	ldr	r1, [pc, #308]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d1ec:	4b4d      	ldr	r3, [pc, #308]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d1ee:	6011      	str	r1, [r2, #0]
 800d1f0:	6812      	ldr	r2, [r2, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d01d      	beq.n	800d232 <ai_platform_outputs_get+0x1d2>
 800d1f6:	e7fe      	b.n	800d1f6 <ai_platform_outputs_get+0x196>
 800d1f8:	4a48      	ldr	r2, [pc, #288]	; (800d31c <ai_platform_outputs_get+0x2bc>)
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	6093      	str	r3, [r2, #8]
 800d1fe:	6893      	ldr	r3, [r2, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1fc      	bne.n	800d1fe <ai_platform_outputs_get+0x19e>
 800d204:	4946      	ldr	r1, [pc, #280]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d206:	4b47      	ldr	r3, [pc, #284]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d208:	6011      	str	r1, [r2, #0]
 800d20a:	6812      	ldr	r2, [r2, #0]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d010      	beq.n	800d232 <ai_platform_outputs_get+0x1d2>
 800d210:	e7fe      	b.n	800d210 <ai_platform_outputs_get+0x1b0>
 800d212:	4a45      	ldr	r2, [pc, #276]	; (800d328 <ai_platform_outputs_get+0x2c8>)
 800d214:	2301      	movs	r3, #1
 800d216:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d21a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1fb      	bne.n	800d21a <ai_platform_outputs_get+0x1ba>
 800d222:	493f      	ldr	r1, [pc, #252]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d224:	4b3f      	ldr	r3, [pc, #252]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d226:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d22a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d22e:	429a      	cmp	r2, r3
 800d230:	d113      	bne.n	800d25a <ai_platform_outputs_get+0x1fa>
 800d232:	f7ff fbc5 	bl	800c9c0 <_ai_platform_release_crc>
 800d236:	2000      	movs	r0, #0
 800d238:	b005      	add	sp, #20
 800d23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23e:	4a37      	ldr	r2, [pc, #220]	; (800d31c <ai_platform_outputs_get+0x2bc>)
 800d240:	2301      	movs	r3, #1
 800d242:	6093      	str	r3, [r2, #8]
 800d244:	6893      	ldr	r3, [r2, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1fc      	bne.n	800d244 <ai_platform_outputs_get+0x1e4>
 800d24a:	4b35      	ldr	r3, [pc, #212]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	4b35      	ldr	r3, [pc, #212]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	429a      	cmp	r2, r3
 800d254:	f43f af3f 	beq.w	800d0d6 <ai_platform_outputs_get+0x76>
 800d258:	e7fe      	b.n	800d258 <ai_platform_outputs_get+0x1f8>
 800d25a:	e7fe      	b.n	800d25a <ai_platform_outputs_get+0x1fa>
 800d25c:	4a32      	ldr	r2, [pc, #200]	; (800d328 <ai_platform_outputs_get+0x2c8>)
 800d25e:	2301      	movs	r3, #1
 800d260:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d264:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1fb      	bne.n	800d264 <ai_platform_outputs_get+0x204>
 800d26c:	4b2c      	ldr	r3, [pc, #176]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d26e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d272:	4b2c      	ldr	r3, [pc, #176]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d274:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d278:	429a      	cmp	r2, r3
 800d27a:	f43f af2c 	beq.w	800d0d6 <ai_platform_outputs_get+0x76>
 800d27e:	e7fe      	b.n	800d27e <ai_platform_outputs_get+0x21e>
 800d280:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d284:	b14c      	cbz	r4, 800d29a <ai_platform_outputs_get+0x23a>
 800d286:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d28a:	6858      	ldr	r0, [r3, #4]
 800d28c:	9b02      	ldr	r3, [sp, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0d2      	beq.n	800d238 <ai_platform_outputs_get+0x1d8>
 800d292:	801c      	strh	r4, [r3, #0]
 800d294:	b005      	add	sp, #20
 800d296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29a:	2400      	movs	r4, #0
 800d29c:	2218      	movs	r2, #24
 800d29e:	2111      	movs	r1, #17
 800d2a0:	f109 0010 	add.w	r0, r9, #16
 800d2a4:	f000 ffea 	bl	800e27c <core_set_error>
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	e7ef      	b.n	800d28c <ai_platform_outputs_get+0x22c>
 800d2ac:	4a1e      	ldr	r2, [pc, #120]	; (800d328 <ai_platform_outputs_get+0x2c8>)
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1fb      	bne.n	800d2b4 <ai_platform_outputs_get+0x254>
 800d2bc:	4918      	ldr	r1, [pc, #96]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d2be:	4b19      	ldr	r3, [pc, #100]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d2c0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d2c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d0b2      	beq.n	800d232 <ai_platform_outputs_get+0x1d2>
 800d2cc:	e7fe      	b.n	800d2cc <ai_platform_outputs_get+0x26c>
 800d2ce:	4a16      	ldr	r2, [pc, #88]	; (800d328 <ai_platform_outputs_get+0x2c8>)
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1fb      	bne.n	800d2d6 <ai_platform_outputs_get+0x276>
 800d2de:	4b10      	ldr	r3, [pc, #64]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d2e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d2e4:	4b0f      	ldr	r3, [pc, #60]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d2e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	f43f aef3 	beq.w	800d0d6 <ai_platform_outputs_get+0x76>
 800d2f0:	e7fe      	b.n	800d2f0 <ai_platform_outputs_get+0x290>
 800d2f2:	4a0a      	ldr	r2, [pc, #40]	; (800d31c <ai_platform_outputs_get+0x2bc>)
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	6093      	str	r3, [r2, #8]
 800d2f8:	6893      	ldr	r3, [r2, #8]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1fc      	bne.n	800d2f8 <ai_platform_outputs_get+0x298>
 800d2fe:	4b08      	ldr	r3, [pc, #32]	; (800d320 <ai_platform_outputs_get+0x2c0>)
 800d300:	6013      	str	r3, [r2, #0]
 800d302:	4b08      	ldr	r3, [pc, #32]	; (800d324 <ai_platform_outputs_get+0x2c4>)
 800d304:	6812      	ldr	r2, [r2, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	f43f aee5 	beq.w	800d0d6 <ai_platform_outputs_get+0x76>
 800d30c:	e7fe      	b.n	800d30c <ai_platform_outputs_get+0x2ac>
 800d30e:	bf00      	nop
 800d310:	a1c00100 	.word	0xa1c00100
 800d314:	e0042000 	.word	0xe0042000
 800d318:	5c001000 	.word	0x5c001000
 800d31c:	40023000 	.word	0x40023000
 800d320:	f407a5c2 	.word	0xf407a5c2
 800d324:	b5e8b5cd 	.word	0xb5e8b5cd
 800d328:	58024000 	.word	0x58024000
 800d32c:	4a0d      	ldr	r2, [pc, #52]	; (800d364 <ai_platform_outputs_get+0x304>)
 800d32e:	2301      	movs	r3, #1
 800d330:	6093      	str	r3, [r2, #8]
 800d332:	6893      	ldr	r3, [r2, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1fc      	bne.n	800d332 <ai_platform_outputs_get+0x2d2>
 800d338:	490b      	ldr	r1, [pc, #44]	; (800d368 <ai_platform_outputs_get+0x308>)
 800d33a:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <ai_platform_outputs_get+0x30c>)
 800d33c:	6011      	str	r1, [r2, #0]
 800d33e:	6812      	ldr	r2, [r2, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	f43f af76 	beq.w	800d232 <ai_platform_outputs_get+0x1d2>
 800d346:	e7fe      	b.n	800d346 <ai_platform_outputs_get+0x2e6>
 800d348:	4a06      	ldr	r2, [pc, #24]	; (800d364 <ai_platform_outputs_get+0x304>)
 800d34a:	2301      	movs	r3, #1
 800d34c:	6093      	str	r3, [r2, #8]
 800d34e:	6893      	ldr	r3, [r2, #8]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1fc      	bne.n	800d34e <ai_platform_outputs_get+0x2ee>
 800d354:	4b04      	ldr	r3, [pc, #16]	; (800d368 <ai_platform_outputs_get+0x308>)
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	4b04      	ldr	r3, [pc, #16]	; (800d36c <ai_platform_outputs_get+0x30c>)
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	f43f aeba 	beq.w	800d0d6 <ai_platform_outputs_get+0x76>
 800d362:	e7fe      	b.n	800d362 <ai_platform_outputs_get+0x302>
 800d364:	40023000 	.word	0x40023000
 800d368:	f407a5c2 	.word	0xf407a5c2
 800d36c:	b5e8b5cd 	.word	0xb5e8b5cd

0800d370 <ai_platform_network_create>:
 800d370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d374:	b083      	sub	sp, #12
 800d376:	4604      	mov	r4, r0
 800d378:	4615      	mov	r5, r2
 800d37a:	461e      	mov	r6, r3
 800d37c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800d380:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800d384:	f7ff fb1a 	bl	800c9bc <_ai_platform_acquire_crc>
 800d388:	2800      	cmp	r0, #0
 800d38a:	f000 80bd 	beq.w	800d508 <ai_platform_network_create+0x198>
 800d38e:	4ba5      	ldr	r3, [pc, #660]	; (800d624 <ai_platform_network_create+0x2b4>)
 800d390:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800d394:	4601      	mov	r1, r0
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d39c:	eb03 020c 	add.w	r2, r3, ip
 800d3a0:	2a01      	cmp	r2, #1
 800d3a2:	f240 80a8 	bls.w	800d4f6 <ai_platform_network_create+0x186>
 800d3a6:	f240 4249 	movw	r2, #1097	; 0x449
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	f000 80a3 	beq.w	800d4f6 <ai_platform_network_create+0x186>
 800d3b0:	4a9d      	ldr	r2, [pc, #628]	; (800d628 <ai_platform_network_create+0x2b8>)
 800d3b2:	6813      	ldr	r3, [r2, #0]
 800d3b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3b8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d3bc:	f000 80b9 	beq.w	800d532 <ai_platform_network_create+0x1c2>
 800d3c0:	6813      	ldr	r3, [r2, #0]
 800d3c2:	f240 4c83 	movw	ip, #1155	; 0x483
 800d3c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3ca:	4563      	cmp	r3, ip
 800d3cc:	f000 80a1 	beq.w	800d512 <ai_platform_network_create+0x1a2>
 800d3d0:	6813      	ldr	r3, [r2, #0]
 800d3d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3d6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d3da:	f000 8153 	beq.w	800d684 <ai_platform_network_create+0x314>
 800d3de:	6813      	ldr	r3, [r2, #0]
 800d3e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f040 808d 	bne.w	800d504 <ai_platform_network_create+0x194>
 800d3ea:	4a90      	ldr	r2, [pc, #576]	; (800d62c <ai_platform_network_create+0x2bc>)
 800d3ec:	2318      	movs	r3, #24
 800d3ee:	6093      	str	r3, [r2, #8]
 800d3f0:	6893      	ldr	r3, [r2, #8]
 800d3f2:	2b18      	cmp	r3, #24
 800d3f4:	f040 8086 	bne.w	800d504 <ai_platform_network_create+0x194>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	6093      	str	r3, [r2, #8]
 800d3fc:	6893      	ldr	r3, [r2, #8]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d1fc      	bne.n	800d3fc <ai_platform_network_create+0x8c>
 800d402:	4608      	mov	r0, r1
 800d404:	f7ff fadc 	bl	800c9c0 <_ai_platform_release_crc>
 800d408:	f7ff fad8 	bl	800c9bc <_ai_platform_acquire_crc>
 800d40c:	4b85      	ldr	r3, [pc, #532]	; (800d624 <ai_platform_network_create+0x2b4>)
 800d40e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d418:	189a      	adds	r2, r3, r2
 800d41a:	2a01      	cmp	r2, #1
 800d41c:	f240 809f 	bls.w	800d55e <ai_platform_network_create+0x1ee>
 800d420:	f240 4249 	movw	r2, #1097	; 0x449
 800d424:	4293      	cmp	r3, r2
 800d426:	f000 809a 	beq.w	800d55e <ai_platform_network_create+0x1ee>
 800d42a:	4a7f      	ldr	r2, [pc, #508]	; (800d628 <ai_platform_network_create+0x2b8>)
 800d42c:	6813      	ldr	r3, [r2, #0]
 800d42e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d432:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d436:	f000 80a0 	beq.w	800d57a <ai_platform_network_create+0x20a>
 800d43a:	6813      	ldr	r3, [r2, #0]
 800d43c:	f240 4183 	movw	r1, #1155	; 0x483
 800d440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d444:	428b      	cmp	r3, r1
 800d446:	f000 80bf 	beq.w	800d5c8 <ai_platform_network_create+0x258>
 800d44a:	6813      	ldr	r3, [r2, #0]
 800d44c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d450:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d454:	f000 8123 	beq.w	800d69e <ai_platform_network_create+0x32e>
 800d458:	6813      	ldr	r3, [r2, #0]
 800d45a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f000 80c4 	beq.w	800d5ec <ai_platform_network_create+0x27c>
 800d464:	f7ff faac 	bl	800c9c0 <_ai_platform_release_crc>
 800d468:	2c00      	cmp	r4, #0
 800d46a:	f000 80aa 	beq.w	800d5c2 <ai_platform_network_create+0x252>
 800d46e:	4b70      	ldr	r3, [pc, #448]	; (800d630 <ai_platform_network_create+0x2c0>)
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	6025      	str	r5, [r4, #0]
 800d474:	f000 fefa 	bl	800e26c <core_init>
 800d478:	2800      	cmp	r0, #0
 800d47a:	f000 8090 	beq.w	800d59e <ai_platform_network_create+0x22e>
 800d47e:	f7ff fa9d 	bl	800c9bc <_ai_platform_acquire_crc>
 800d482:	4b68      	ldr	r3, [pc, #416]	; (800d624 <ai_platform_network_create+0x2b4>)
 800d484:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d48e:	185a      	adds	r2, r3, r1
 800d490:	2a01      	cmp	r2, #1
 800d492:	f240 80b9 	bls.w	800d608 <ai_platform_network_create+0x298>
 800d496:	f240 4249 	movw	r2, #1097	; 0x449
 800d49a:	4293      	cmp	r3, r2
 800d49c:	f000 80b4 	beq.w	800d608 <ai_platform_network_create+0x298>
 800d4a0:	4a61      	ldr	r2, [pc, #388]	; (800d628 <ai_platform_network_create+0x2b8>)
 800d4a2:	6813      	ldr	r3, [r2, #0]
 800d4a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4a8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d4ac:	f000 80c8 	beq.w	800d640 <ai_platform_network_create+0x2d0>
 800d4b0:	6813      	ldr	r3, [r2, #0]
 800d4b2:	f240 4183 	movw	r1, #1155	; 0x483
 800d4b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4ba:	428b      	cmp	r3, r1
 800d4bc:	f000 8107 	beq.w	800d6ce <ai_platform_network_create+0x35e>
 800d4c0:	6813      	ldr	r3, [r2, #0]
 800d4c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4c6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d4ca:	f000 8111 	beq.w	800d6f0 <ai_platform_network_create+0x380>
 800d4ce:	6813      	ldr	r3, [r2, #0]
 800d4d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f040 80c3 	bne.w	800d660 <ai_platform_network_create+0x2f0>
 800d4da:	4b54      	ldr	r3, [pc, #336]	; (800d62c <ai_platform_network_create+0x2bc>)
 800d4dc:	2201      	movs	r2, #1
 800d4de:	609a      	str	r2, [r3, #8]
 800d4e0:	689a      	ldr	r2, [r3, #8]
 800d4e2:	2a00      	cmp	r2, #0
 800d4e4:	d1fc      	bne.n	800d4e0 <ai_platform_network_create+0x170>
 800d4e6:	4a53      	ldr	r2, [pc, #332]	; (800d634 <ai_platform_network_create+0x2c4>)
 800d4e8:	601a      	str	r2, [r3, #0]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	4b52      	ldr	r3, [pc, #328]	; (800d638 <ai_platform_network_create+0x2c8>)
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	f000 80b6 	beq.w	800d660 <ai_platform_network_create+0x2f0>
 800d4f4:	e7fe      	b.n	800d4f4 <ai_platform_network_create+0x184>
 800d4f6:	4b4d      	ldr	r3, [pc, #308]	; (800d62c <ai_platform_network_create+0x2bc>)
 800d4f8:	2218      	movs	r2, #24
 800d4fa:	609a      	str	r2, [r3, #8]
 800d4fc:	689a      	ldr	r2, [r3, #8]
 800d4fe:	2a18      	cmp	r2, #24
 800d500:	d027      	beq.n	800d552 <ai_platform_network_create+0x1e2>
 800d502:	4608      	mov	r0, r1
 800d504:	f7ff fa5c 	bl	800c9c0 <_ai_platform_release_crc>
 800d508:	f244 1033 	movw	r0, #16691	; 0x4133
 800d50c:	b003      	add	sp, #12
 800d50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d512:	4a4a      	ldr	r2, [pc, #296]	; (800d63c <ai_platform_network_create+0x2cc>)
 800d514:	2318      	movs	r3, #24
 800d516:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d51a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d51e:	2b18      	cmp	r3, #24
 800d520:	d1f0      	bne.n	800d504 <ai_platform_network_create+0x194>
 800d522:	2301      	movs	r3, #1
 800d524:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d528:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d1fb      	bne.n	800d528 <ai_platform_network_create+0x1b8>
 800d530:	e767      	b.n	800d402 <ai_platform_network_create+0x92>
 800d532:	4a42      	ldr	r2, [pc, #264]	; (800d63c <ai_platform_network_create+0x2cc>)
 800d534:	2318      	movs	r3, #24
 800d536:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d53a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d53e:	2b18      	cmp	r3, #24
 800d540:	d1e0      	bne.n	800d504 <ai_platform_network_create+0x194>
 800d542:	2301      	movs	r3, #1
 800d544:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d548:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1fb      	bne.n	800d548 <ai_platform_network_create+0x1d8>
 800d550:	e757      	b.n	800d402 <ai_platform_network_create+0x92>
 800d552:	2201      	movs	r2, #1
 800d554:	609a      	str	r2, [r3, #8]
 800d556:	689a      	ldr	r2, [r3, #8]
 800d558:	2a00      	cmp	r2, #0
 800d55a:	d1fc      	bne.n	800d556 <ai_platform_network_create+0x1e6>
 800d55c:	e751      	b.n	800d402 <ai_platform_network_create+0x92>
 800d55e:	4a33      	ldr	r2, [pc, #204]	; (800d62c <ai_platform_network_create+0x2bc>)
 800d560:	2301      	movs	r3, #1
 800d562:	6093      	str	r3, [r2, #8]
 800d564:	6891      	ldr	r1, [r2, #8]
 800d566:	2900      	cmp	r1, #0
 800d568:	d1fc      	bne.n	800d564 <ai_platform_network_create+0x1f4>
 800d56a:	4b32      	ldr	r3, [pc, #200]	; (800d634 <ai_platform_network_create+0x2c4>)
 800d56c:	6013      	str	r3, [r2, #0]
 800d56e:	4b32      	ldr	r3, [pc, #200]	; (800d638 <ai_platform_network_create+0x2c8>)
 800d570:	6812      	ldr	r2, [r2, #0]
 800d572:	429a      	cmp	r2, r3
 800d574:	f43f af76 	beq.w	800d464 <ai_platform_network_create+0xf4>
 800d578:	e7fe      	b.n	800d578 <ai_platform_network_create+0x208>
 800d57a:	4a30      	ldr	r2, [pc, #192]	; (800d63c <ai_platform_network_create+0x2cc>)
 800d57c:	2301      	movs	r3, #1
 800d57e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d582:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d586:	2b00      	cmp	r3, #0
 800d588:	d1fb      	bne.n	800d582 <ai_platform_network_create+0x212>
 800d58a:	4b2a      	ldr	r3, [pc, #168]	; (800d634 <ai_platform_network_create+0x2c4>)
 800d58c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d590:	4b29      	ldr	r3, [pc, #164]	; (800d638 <ai_platform_network_create+0x2c8>)
 800d592:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d596:	429a      	cmp	r2, r3
 800d598:	f43f af64 	beq.w	800d464 <ai_platform_network_create+0xf4>
 800d59c:	e7fe      	b.n	800d59c <ai_platform_network_create+0x22c>
 800d59e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	6023      	str	r3, [r4, #0]
 800d5a6:	2410      	movs	r4, #16
 800d5a8:	4642      	mov	r2, r8
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f002 fe95 	bl	80102dc <ai_version_get>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	64ab      	str	r3, [r5, #72]	; 0x48
 800d5b8:	f369 0007 	bfi	r0, r9, #0, #8
 800d5bc:	f364 201f 	bfi	r0, r4, #8, #24
 800d5c0:	e7a4      	b.n	800d50c <ai_platform_network_create+0x19c>
 800d5c2:	f241 0010 	movw	r0, #4112	; 0x1010
 800d5c6:	e7a1      	b.n	800d50c <ai_platform_network_create+0x19c>
 800d5c8:	4a1c      	ldr	r2, [pc, #112]	; (800d63c <ai_platform_network_create+0x2cc>)
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d5d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1fb      	bne.n	800d5d0 <ai_platform_network_create+0x260>
 800d5d8:	4b16      	ldr	r3, [pc, #88]	; (800d634 <ai_platform_network_create+0x2c4>)
 800d5da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d5de:	4b16      	ldr	r3, [pc, #88]	; (800d638 <ai_platform_network_create+0x2c8>)
 800d5e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	f43f af3d 	beq.w	800d464 <ai_platform_network_create+0xf4>
 800d5ea:	e7fe      	b.n	800d5ea <ai_platform_network_create+0x27a>
 800d5ec:	4a0f      	ldr	r2, [pc, #60]	; (800d62c <ai_platform_network_create+0x2bc>)
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	6093      	str	r3, [r2, #8]
 800d5f2:	6893      	ldr	r3, [r2, #8]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d1fc      	bne.n	800d5f2 <ai_platform_network_create+0x282>
 800d5f8:	4b0e      	ldr	r3, [pc, #56]	; (800d634 <ai_platform_network_create+0x2c4>)
 800d5fa:	6013      	str	r3, [r2, #0]
 800d5fc:	4b0e      	ldr	r3, [pc, #56]	; (800d638 <ai_platform_network_create+0x2c8>)
 800d5fe:	6812      	ldr	r2, [r2, #0]
 800d600:	429a      	cmp	r2, r3
 800d602:	f43f af2f 	beq.w	800d464 <ai_platform_network_create+0xf4>
 800d606:	e7fe      	b.n	800d606 <ai_platform_network_create+0x296>
 800d608:	4a08      	ldr	r2, [pc, #32]	; (800d62c <ai_platform_network_create+0x2bc>)
 800d60a:	2301      	movs	r3, #1
 800d60c:	6093      	str	r3, [r2, #8]
 800d60e:	6893      	ldr	r3, [r2, #8]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1fc      	bne.n	800d60e <ai_platform_network_create+0x29e>
 800d614:	4b07      	ldr	r3, [pc, #28]	; (800d634 <ai_platform_network_create+0x2c4>)
 800d616:	6013      	str	r3, [r2, #0]
 800d618:	4b07      	ldr	r3, [pc, #28]	; (800d638 <ai_platform_network_create+0x2c8>)
 800d61a:	6812      	ldr	r2, [r2, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d01f      	beq.n	800d660 <ai_platform_network_create+0x2f0>
 800d620:	e7fe      	b.n	800d620 <ai_platform_network_create+0x2b0>
 800d622:	bf00      	nop
 800d624:	e0042000 	.word	0xe0042000
 800d628:	5c001000 	.word	0x5c001000
 800d62c:	40023000 	.word	0x40023000
 800d630:	a1c00100 	.word	0xa1c00100
 800d634:	f407a5c2 	.word	0xf407a5c2
 800d638:	b5e8b5cd 	.word	0xb5e8b5cd
 800d63c:	58024000 	.word	0x58024000
 800d640:	4a33      	ldr	r2, [pc, #204]	; (800d710 <ai_platform_network_create+0x3a0>)
 800d642:	2301      	movs	r3, #1
 800d644:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d648:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d1fb      	bne.n	800d648 <ai_platform_network_create+0x2d8>
 800d650:	4b30      	ldr	r3, [pc, #192]	; (800d714 <ai_platform_network_create+0x3a4>)
 800d652:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d656:	4b30      	ldr	r3, [pc, #192]	; (800d718 <ai_platform_network_create+0x3a8>)
 800d658:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d12c      	bne.n	800d6ba <ai_platform_network_create+0x34a>
 800d660:	f7ff f9ae 	bl	800c9c0 <_ai_platform_release_crc>
 800d664:	2200      	movs	r2, #0
 800d666:	4639      	mov	r1, r7
 800d668:	4630      	mov	r0, r6
 800d66a:	f002 fe37 	bl	80102dc <ai_version_get>
 800d66e:	4681      	mov	r9, r0
 800d670:	2200      	movs	r2, #0
 800d672:	2105      	movs	r1, #5
 800d674:	2001      	movs	r0, #1
 800d676:	f002 fe31 	bl	80102dc <ai_version_get>
 800d67a:	4581      	cmp	r9, r0
 800d67c:	d01e      	beq.n	800d6bc <ai_platform_network_create+0x34c>
 800d67e:	f04f 0901 	mov.w	r9, #1
 800d682:	e78e      	b.n	800d5a2 <ai_platform_network_create+0x232>
 800d684:	4b25      	ldr	r3, [pc, #148]	; (800d71c <ai_platform_network_create+0x3ac>)
 800d686:	2218      	movs	r2, #24
 800d688:	609a      	str	r2, [r3, #8]
 800d68a:	689a      	ldr	r2, [r3, #8]
 800d68c:	2a18      	cmp	r2, #24
 800d68e:	f47f af39 	bne.w	800d504 <ai_platform_network_create+0x194>
 800d692:	2201      	movs	r2, #1
 800d694:	609a      	str	r2, [r3, #8]
 800d696:	689a      	ldr	r2, [r3, #8]
 800d698:	2a00      	cmp	r2, #0
 800d69a:	d1fc      	bne.n	800d696 <ai_platform_network_create+0x326>
 800d69c:	e6b1      	b.n	800d402 <ai_platform_network_create+0x92>
 800d69e:	4a1f      	ldr	r2, [pc, #124]	; (800d71c <ai_platform_network_create+0x3ac>)
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	6093      	str	r3, [r2, #8]
 800d6a4:	6893      	ldr	r3, [r2, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d1fc      	bne.n	800d6a4 <ai_platform_network_create+0x334>
 800d6aa:	4b1a      	ldr	r3, [pc, #104]	; (800d714 <ai_platform_network_create+0x3a4>)
 800d6ac:	6013      	str	r3, [r2, #0]
 800d6ae:	4b1a      	ldr	r3, [pc, #104]	; (800d718 <ai_platform_network_create+0x3a8>)
 800d6b0:	6812      	ldr	r2, [r2, #0]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	f43f aed6 	beq.w	800d464 <ai_platform_network_create+0xf4>
 800d6b8:	e7fe      	b.n	800d6b8 <ai_platform_network_create+0x348>
 800d6ba:	e7fe      	b.n	800d6ba <ai_platform_network_create+0x34a>
 800d6bc:	4b18      	ldr	r3, [pc, #96]	; (800d720 <ai_platform_network_create+0x3b0>)
 800d6be:	a801      	add	r0, sp, #4
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	f002 fc51 	bl	800ff68 <ai_check_custom_types>
 800d6c6:	b300      	cbz	r0, 800d70a <ai_platform_network_create+0x39a>
 800d6c8:	2400      	movs	r4, #0
 800d6ca:	46a1      	mov	r9, r4
 800d6cc:	e76c      	b.n	800d5a8 <ai_platform_network_create+0x238>
 800d6ce:	4b10      	ldr	r3, [pc, #64]	; (800d710 <ai_platform_network_create+0x3a0>)
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800d6d6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800d6da:	2a00      	cmp	r2, #0
 800d6dc:	d1fb      	bne.n	800d6d6 <ai_platform_network_create+0x366>
 800d6de:	4a0d      	ldr	r2, [pc, #52]	; (800d714 <ai_platform_network_create+0x3a4>)
 800d6e0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800d6e4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800d6e8:	4b0b      	ldr	r3, [pc, #44]	; (800d718 <ai_platform_network_create+0x3a8>)
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d0b8      	beq.n	800d660 <ai_platform_network_create+0x2f0>
 800d6ee:	e7fe      	b.n	800d6ee <ai_platform_network_create+0x37e>
 800d6f0:	4b0a      	ldr	r3, [pc, #40]	; (800d71c <ai_platform_network_create+0x3ac>)
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	609a      	str	r2, [r3, #8]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	2a00      	cmp	r2, #0
 800d6fa:	d1fc      	bne.n	800d6f6 <ai_platform_network_create+0x386>
 800d6fc:	4a05      	ldr	r2, [pc, #20]	; (800d714 <ai_platform_network_create+0x3a4>)
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	4b05      	ldr	r3, [pc, #20]	; (800d718 <ai_platform_network_create+0x3a8>)
 800d704:	429a      	cmp	r2, r3
 800d706:	d0ab      	beq.n	800d660 <ai_platform_network_create+0x2f0>
 800d708:	e7fe      	b.n	800d708 <ai_platform_network_create+0x398>
 800d70a:	f04f 0902 	mov.w	r9, #2
 800d70e:	e748      	b.n	800d5a2 <ai_platform_network_create+0x232>
 800d710:	58024000 	.word	0x58024000
 800d714:	f407a5c2 	.word	0xf407a5c2
 800d718:	b5e8b5cd 	.word	0xb5e8b5cd
 800d71c:	40023000 	.word	0x40023000
 800d720:	84048403 	.word	0x84048403

0800d724 <ai_platform_network_init>:
 800d724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d728:	2800      	cmp	r0, #0
 800d72a:	d052      	beq.n	800d7d2 <ai_platform_network_init+0xae>
 800d72c:	4bab      	ldr	r3, [pc, #684]	; (800d9dc <ai_platform_network_init+0x2b8>)
 800d72e:	4604      	mov	r4, r0
 800d730:	6802      	ldr	r2, [r0, #0]
 800d732:	429a      	cmp	r2, r3
 800d734:	d14d      	bne.n	800d7d2 <ai_platform_network_init+0xae>
 800d736:	460d      	mov	r5, r1
 800d738:	f7ff f940 	bl	800c9bc <_ai_platform_acquire_crc>
 800d73c:	4ba8      	ldr	r3, [pc, #672]	; (800d9e0 <ai_platform_network_init+0x2bc>)
 800d73e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d748:	189a      	adds	r2, r3, r2
 800d74a:	2a01      	cmp	r2, #1
 800d74c:	f240 809b 	bls.w	800d886 <ai_platform_network_init+0x162>
 800d750:	f240 4249 	movw	r2, #1097	; 0x449
 800d754:	4293      	cmp	r3, r2
 800d756:	f000 8096 	beq.w	800d886 <ai_platform_network_init+0x162>
 800d75a:	4aa2      	ldr	r2, [pc, #648]	; (800d9e4 <ai_platform_network_init+0x2c0>)
 800d75c:	6813      	ldr	r3, [r2, #0]
 800d75e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d762:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d766:	f000 809d 	beq.w	800d8a4 <ai_platform_network_init+0x180>
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	f240 4183 	movw	r1, #1155	; 0x483
 800d770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d774:	428b      	cmp	r3, r1
 800d776:	f000 80e4 	beq.w	800d942 <ai_platform_network_init+0x21e>
 800d77a:	6813      	ldr	r3, [r2, #0]
 800d77c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d780:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d784:	f000 811b 	beq.w	800d9be <ai_platform_network_init+0x29a>
 800d788:	6813      	ldr	r3, [r2, #0]
 800d78a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d78e:	2b00      	cmp	r3, #0
 800d790:	f000 80f9 	beq.w	800d986 <ai_platform_network_init+0x262>
 800d794:	f7ff f914 	bl	800c9c0 <_ai_platform_release_crc>
 800d798:	2d00      	cmp	r5, #0
 800d79a:	f000 8147 	beq.w	800da2c <ai_platform_network_init+0x308>
 800d79e:	4b92      	ldr	r3, [pc, #584]	; (800d9e8 <ai_platform_network_init+0x2c4>)
 800d7a0:	682a      	ldr	r2, [r5, #0]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	f040 8090 	bne.w	800d8c8 <ai_platform_network_init+0x1a4>
 800d7a8:	692b      	ldr	r3, [r5, #16]
 800d7aa:	89ae      	ldrh	r6, [r5, #12]
 800d7ac:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800d7b0:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800d7b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7b6:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800d7ba:	2303      	movs	r3, #3
 800d7bc:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d7be:	4626      	mov	r6, r4
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800d7c6:	60e3      	str	r3, [r4, #12]
 800d7c8:	f002 fbf6 	bl	800ffb8 <ai_layers_init_all>
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7d2:	f7ff f8f3 	bl	800c9bc <_ai_platform_acquire_crc>
 800d7d6:	4b82      	ldr	r3, [pc, #520]	; (800d9e0 <ai_platform_network_init+0x2bc>)
 800d7d8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7e2:	185a      	adds	r2, r3, r1
 800d7e4:	2a01      	cmp	r2, #1
 800d7e6:	d92b      	bls.n	800d840 <ai_platform_network_init+0x11c>
 800d7e8:	f240 4249 	movw	r2, #1097	; 0x449
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d027      	beq.n	800d840 <ai_platform_network_init+0x11c>
 800d7f0:	4a7c      	ldr	r2, [pc, #496]	; (800d9e4 <ai_platform_network_init+0x2c0>)
 800d7f2:	6813      	ldr	r3, [r2, #0]
 800d7f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7f8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d7fc:	d02d      	beq.n	800d85a <ai_platform_network_init+0x136>
 800d7fe:	6813      	ldr	r3, [r2, #0]
 800d800:	f240 4183 	movw	r1, #1155	; 0x483
 800d804:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d808:	428b      	cmp	r3, r1
 800d80a:	f000 8089 	beq.w	800d920 <ai_platform_network_init+0x1fc>
 800d80e:	6813      	ldr	r3, [r2, #0]
 800d810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d814:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d818:	f000 80c3 	beq.w	800d9a2 <ai_platform_network_init+0x27e>
 800d81c:	6813      	ldr	r3, [r2, #0]
 800d81e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d822:	2b00      	cmp	r3, #0
 800d824:	d129      	bne.n	800d87a <ai_platform_network_init+0x156>
 800d826:	4a71      	ldr	r2, [pc, #452]	; (800d9ec <ai_platform_network_init+0x2c8>)
 800d828:	2301      	movs	r3, #1
 800d82a:	6093      	str	r3, [r2, #8]
 800d82c:	6893      	ldr	r3, [r2, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1fc      	bne.n	800d82c <ai_platform_network_init+0x108>
 800d832:	496f      	ldr	r1, [pc, #444]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d834:	4b6f      	ldr	r3, [pc, #444]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d836:	6011      	str	r1, [r2, #0]
 800d838:	6812      	ldr	r2, [r2, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d01d      	beq.n	800d87a <ai_platform_network_init+0x156>
 800d83e:	e7fe      	b.n	800d83e <ai_platform_network_init+0x11a>
 800d840:	4a6a      	ldr	r2, [pc, #424]	; (800d9ec <ai_platform_network_init+0x2c8>)
 800d842:	2301      	movs	r3, #1
 800d844:	6093      	str	r3, [r2, #8]
 800d846:	6893      	ldr	r3, [r2, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1fc      	bne.n	800d846 <ai_platform_network_init+0x122>
 800d84c:	4968      	ldr	r1, [pc, #416]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d84e:	4b69      	ldr	r3, [pc, #420]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d850:	6011      	str	r1, [r2, #0]
 800d852:	6812      	ldr	r2, [r2, #0]
 800d854:	429a      	cmp	r2, r3
 800d856:	d010      	beq.n	800d87a <ai_platform_network_init+0x156>
 800d858:	e7fe      	b.n	800d858 <ai_platform_network_init+0x134>
 800d85a:	4a67      	ldr	r2, [pc, #412]	; (800d9f8 <ai_platform_network_init+0x2d4>)
 800d85c:	2301      	movs	r3, #1
 800d85e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d862:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1fb      	bne.n	800d862 <ai_platform_network_init+0x13e>
 800d86a:	4961      	ldr	r1, [pc, #388]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d86c:	4b61      	ldr	r3, [pc, #388]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d86e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d872:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d876:	429a      	cmp	r2, r3
 800d878:	d113      	bne.n	800d8a2 <ai_platform_network_init+0x17e>
 800d87a:	2600      	movs	r6, #0
 800d87c:	f7ff f8a0 	bl	800c9c0 <_ai_platform_release_crc>
 800d880:	4630      	mov	r0, r6
 800d882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d886:	4a59      	ldr	r2, [pc, #356]	; (800d9ec <ai_platform_network_init+0x2c8>)
 800d888:	2301      	movs	r3, #1
 800d88a:	6093      	str	r3, [r2, #8]
 800d88c:	6893      	ldr	r3, [r2, #8]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1fc      	bne.n	800d88c <ai_platform_network_init+0x168>
 800d892:	4b57      	ldr	r3, [pc, #348]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d894:	6013      	str	r3, [r2, #0]
 800d896:	4b57      	ldr	r3, [pc, #348]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	f43f af7a 	beq.w	800d794 <ai_platform_network_init+0x70>
 800d8a0:	e7fe      	b.n	800d8a0 <ai_platform_network_init+0x17c>
 800d8a2:	e7fe      	b.n	800d8a2 <ai_platform_network_init+0x17e>
 800d8a4:	4a54      	ldr	r2, [pc, #336]	; (800d9f8 <ai_platform_network_init+0x2d4>)
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d8ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1fb      	bne.n	800d8ac <ai_platform_network_init+0x188>
 800d8b4:	4b4e      	ldr	r3, [pc, #312]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d8b6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d8ba:	4b4e      	ldr	r3, [pc, #312]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d8bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	f43f af67 	beq.w	800d794 <ai_platform_network_init+0x70>
 800d8c6:	e7fe      	b.n	800d8c6 <ai_platform_network_init+0x1a2>
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	f105 081c 	add.w	r8, r5, #28
 800d8d0:	686e      	ldr	r6, [r5, #4]
 800d8d2:	f7ff f835 	bl	800c940 <ai_buffer_get_size>
 800d8d6:	4607      	mov	r7, r0
 800d8d8:	2101      	movs	r1, #1
 800d8da:	4640      	mov	r0, r8
 800d8dc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800d8e0:	f7ff f82e 	bl	800c940 <ai_buffer_get_size>
 800d8e4:	2f00      	cmp	r7, #0
 800d8e6:	d13e      	bne.n	800d966 <ai_platform_network_init+0x242>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f000 808e 	beq.w	800da0a <ai_platform_network_init+0x2e6>
 800d8ee:	f1b9 0f00 	cmp.w	r9, #0
 800d8f2:	f000 8094 	beq.w	800da1e <ai_platform_network_init+0x2fa>
 800d8f6:	f04f 0c01 	mov.w	ip, #1
 800d8fa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d8fc:	2600      	movs	r6, #0
 800d8fe:	83e7      	strh	r7, [r4, #30]
 800d900:	4563      	cmp	r3, ip
 800d902:	83a6      	strh	r6, [r4, #28]
 800d904:	d37a      	bcc.n	800d9fc <ai_platform_network_init+0x2d8>
 800d906:	f1bc 0f00 	cmp.w	ip, #0
 800d90a:	f000 809c 	beq.w	800da46 <ai_platform_network_init+0x322>
 800d90e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d910:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d916:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d91a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d91e:	e74c      	b.n	800d7ba <ai_platform_network_init+0x96>
 800d920:	4a35      	ldr	r2, [pc, #212]	; (800d9f8 <ai_platform_network_init+0x2d4>)
 800d922:	2301      	movs	r3, #1
 800d924:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d928:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1fb      	bne.n	800d928 <ai_platform_network_init+0x204>
 800d930:	492f      	ldr	r1, [pc, #188]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d932:	4b30      	ldr	r3, [pc, #192]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d934:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d938:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d09c      	beq.n	800d87a <ai_platform_network_init+0x156>
 800d940:	e7fe      	b.n	800d940 <ai_platform_network_init+0x21c>
 800d942:	4a2d      	ldr	r2, [pc, #180]	; (800d9f8 <ai_platform_network_init+0x2d4>)
 800d944:	2301      	movs	r3, #1
 800d946:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d94a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d1fb      	bne.n	800d94a <ai_platform_network_init+0x226>
 800d952:	4b27      	ldr	r3, [pc, #156]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d954:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d958:	4b26      	ldr	r3, [pc, #152]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d95a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d95e:	429a      	cmp	r2, r3
 800d960:	f43f af18 	beq.w	800d794 <ai_platform_network_init+0x70>
 800d964:	e7fe      	b.n	800d964 <ai_platform_network_init+0x240>
 800d966:	2800      	cmp	r0, #0
 800d968:	d153      	bne.n	800da12 <ai_platform_network_init+0x2ee>
 800d96a:	4680      	mov	r8, r0
 800d96c:	4684      	mov	ip, r0
 800d96e:	2e00      	cmp	r6, #0
 800d970:	d063      	beq.n	800da3a <ai_platform_network_init+0x316>
 800d972:	8be6      	ldrh	r6, [r4, #30]
 800d974:	2e00      	cmp	r6, #0
 800d976:	d168      	bne.n	800da4a <ai_platform_network_init+0x326>
 800d978:	2212      	movs	r2, #18
 800d97a:	2116      	movs	r1, #22
 800d97c:	f104 0010 	add.w	r0, r4, #16
 800d980:	f000 fc7c 	bl	800e27c <core_set_error>
 800d984:	e77c      	b.n	800d880 <ai_platform_network_init+0x15c>
 800d986:	4a19      	ldr	r2, [pc, #100]	; (800d9ec <ai_platform_network_init+0x2c8>)
 800d988:	2301      	movs	r3, #1
 800d98a:	6093      	str	r3, [r2, #8]
 800d98c:	6893      	ldr	r3, [r2, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1fc      	bne.n	800d98c <ai_platform_network_init+0x268>
 800d992:	4b17      	ldr	r3, [pc, #92]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	4b17      	ldr	r3, [pc, #92]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	f43f aefa 	beq.w	800d794 <ai_platform_network_init+0x70>
 800d9a0:	e7fe      	b.n	800d9a0 <ai_platform_network_init+0x27c>
 800d9a2:	4a12      	ldr	r2, [pc, #72]	; (800d9ec <ai_platform_network_init+0x2c8>)
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	6093      	str	r3, [r2, #8]
 800d9a8:	6893      	ldr	r3, [r2, #8]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1fc      	bne.n	800d9a8 <ai_platform_network_init+0x284>
 800d9ae:	4910      	ldr	r1, [pc, #64]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d9b0:	4b10      	ldr	r3, [pc, #64]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d9b2:	6011      	str	r1, [r2, #0]
 800d9b4:	6812      	ldr	r2, [r2, #0]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	f43f af5f 	beq.w	800d87a <ai_platform_network_init+0x156>
 800d9bc:	e7fe      	b.n	800d9bc <ai_platform_network_init+0x298>
 800d9be:	4a0b      	ldr	r2, [pc, #44]	; (800d9ec <ai_platform_network_init+0x2c8>)
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	6093      	str	r3, [r2, #8]
 800d9c4:	6893      	ldr	r3, [r2, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1fc      	bne.n	800d9c4 <ai_platform_network_init+0x2a0>
 800d9ca:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <ai_platform_network_init+0x2cc>)
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	4b09      	ldr	r3, [pc, #36]	; (800d9f4 <ai_platform_network_init+0x2d0>)
 800d9d0:	6812      	ldr	r2, [r2, #0]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	f43f aede 	beq.w	800d794 <ai_platform_network_init+0x70>
 800d9d8:	e7fe      	b.n	800d9d8 <ai_platform_network_init+0x2b4>
 800d9da:	bf00      	nop
 800d9dc:	a1c00100 	.word	0xa1c00100
 800d9e0:	e0042000 	.word	0xe0042000
 800d9e4:	5c001000 	.word	0x5c001000
 800d9e8:	a1facade 	.word	0xa1facade
 800d9ec:	40023000 	.word	0x40023000
 800d9f0:	f407a5c2 	.word	0xf407a5c2
 800d9f4:	b5e8b5cd 	.word	0xb5e8b5cd
 800d9f8:	58024000 	.word	0x58024000
 800d9fc:	2213      	movs	r2, #19
 800d9fe:	2116      	movs	r1, #22
 800da00:	f104 0010 	add.w	r0, r4, #16
 800da04:	f000 fc3a 	bl	800e27c <core_set_error>
 800da08:	e73a      	b.n	800d880 <ai_platform_network_init+0x15c>
 800da0a:	4607      	mov	r7, r0
 800da0c:	4680      	mov	r8, r0
 800da0e:	4684      	mov	ip, r0
 800da10:	e773      	b.n	800d8fa <ai_platform_network_init+0x1d6>
 800da12:	f1b9 0f00 	cmp.w	r9, #0
 800da16:	d002      	beq.n	800da1e <ai_platform_network_init+0x2fa>
 800da18:	f04f 0c01 	mov.w	ip, #1
 800da1c:	e7a7      	b.n	800d96e <ai_platform_network_init+0x24a>
 800da1e:	2110      	movs	r1, #16
 800da20:	2213      	movs	r2, #19
 800da22:	2600      	movs	r6, #0
 800da24:	1860      	adds	r0, r4, r1
 800da26:	f000 fc29 	bl	800e27c <core_set_error>
 800da2a:	e729      	b.n	800d880 <ai_platform_network_init+0x15c>
 800da2c:	2110      	movs	r1, #16
 800da2e:	2211      	movs	r2, #17
 800da30:	462e      	mov	r6, r5
 800da32:	1860      	adds	r0, r4, r1
 800da34:	f000 fc22 	bl	800e27c <core_set_error>
 800da38:	e722      	b.n	800d880 <ai_platform_network_init+0x15c>
 800da3a:	2110      	movs	r1, #16
 800da3c:	2212      	movs	r2, #18
 800da3e:	1860      	adds	r0, r4, r1
 800da40:	f000 fc1c 	bl	800e27c <core_set_error>
 800da44:	e71c      	b.n	800d880 <ai_platform_network_init+0x15c>
 800da46:	4666      	mov	r6, ip
 800da48:	e6b7      	b.n	800d7ba <ai_platform_network_init+0x96>
 800da4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da4c:	6a26      	ldr	r6, [r4, #32]
 800da4e:	2701      	movs	r7, #1
 800da50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da56:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800da5a:	e74e      	b.n	800d8fa <ai_platform_network_init+0x1d6>

0800da5c <ai_platform_network_post_init>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	2800      	cmp	r0, #0
 800da60:	d04e      	beq.n	800db00 <ai_platform_network_post_init+0xa4>
 800da62:	4b8c      	ldr	r3, [pc, #560]	; (800dc94 <ai_platform_network_post_init+0x238>)
 800da64:	4604      	mov	r4, r0
 800da66:	6802      	ldr	r2, [r0, #0]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d149      	bne.n	800db00 <ai_platform_network_post_init+0xa4>
 800da6c:	f7fe ffa6 	bl	800c9bc <_ai_platform_acquire_crc>
 800da70:	4b89      	ldr	r3, [pc, #548]	; (800dc98 <ai_platform_network_post_init+0x23c>)
 800da72:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da7c:	189a      	adds	r2, r3, r2
 800da7e:	2a01      	cmp	r2, #1
 800da80:	f240 8095 	bls.w	800dbae <ai_platform_network_post_init+0x152>
 800da84:	f240 4249 	movw	r2, #1097	; 0x449
 800da88:	4293      	cmp	r3, r2
 800da8a:	f000 8090 	beq.w	800dbae <ai_platform_network_post_init+0x152>
 800da8e:	4a83      	ldr	r2, [pc, #524]	; (800dc9c <ai_platform_network_post_init+0x240>)
 800da90:	6813      	ldr	r3, [r2, #0]
 800da92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800da96:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800da9a:	f000 8096 	beq.w	800dbca <ai_platform_network_post_init+0x16e>
 800da9e:	6813      	ldr	r3, [r2, #0]
 800daa0:	f240 4183 	movw	r1, #1155	; 0x483
 800daa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daa8:	428b      	cmp	r3, r1
 800daaa:	f000 80b8 	beq.w	800dc1e <ai_platform_network_post_init+0x1c2>
 800daae:	6813      	ldr	r3, [r2, #0]
 800dab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dab4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dab8:	f000 80de 	beq.w	800dc78 <ai_platform_network_post_init+0x21c>
 800dabc:	6813      	ldr	r3, [r2, #0]
 800dabe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	f000 80bd 	beq.w	800dc42 <ai_platform_network_post_init+0x1e6>
 800dac8:	f7fe ff7a 	bl	800c9c0 <_ai_platform_release_crc>
 800dacc:	68e3      	ldr	r3, [r4, #12]
 800dace:	f013 0502 	ands.w	r5, r3, #2
 800dad2:	f000 808c 	beq.w	800dbee <ai_platform_network_post_init+0x192>
 800dad6:	4620      	mov	r0, r4
 800dad8:	f002 fa7c 	bl	800ffd4 <ai_layers_post_init_all>
 800dadc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dade:	b16b      	cbz	r3, 800dafc <ai_platform_network_post_init+0xa0>
 800dae0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800dae2:	e007      	b.n	800daf4 <ai_platform_network_post_init+0x98>
 800dae4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800dae8:	4798      	blx	r3
 800daea:	692b      	ldr	r3, [r5, #16]
 800daec:	b133      	cbz	r3, 800dafc <ai_platform_network_post_init+0xa0>
 800daee:	42ab      	cmp	r3, r5
 800daf0:	461d      	mov	r5, r3
 800daf2:	d003      	beq.n	800dafc <ai_platform_network_post_init+0xa0>
 800daf4:	4629      	mov	r1, r5
 800daf6:	2000      	movs	r0, #0
 800daf8:	2d00      	cmp	r5, #0
 800dafa:	d1f3      	bne.n	800dae4 <ai_platform_network_post_init+0x88>
 800dafc:	2001      	movs	r0, #1
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	f7fe ff5c 	bl	800c9bc <_ai_platform_acquire_crc>
 800db04:	4b64      	ldr	r3, [pc, #400]	; (800dc98 <ai_platform_network_post_init+0x23c>)
 800db06:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db10:	185a      	adds	r2, r3, r1
 800db12:	2a01      	cmp	r2, #1
 800db14:	d92a      	bls.n	800db6c <ai_platform_network_post_init+0x110>
 800db16:	f240 4249 	movw	r2, #1097	; 0x449
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d026      	beq.n	800db6c <ai_platform_network_post_init+0x110>
 800db1e:	4a5f      	ldr	r2, [pc, #380]	; (800dc9c <ai_platform_network_post_init+0x240>)
 800db20:	6813      	ldr	r3, [r2, #0]
 800db22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db26:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800db2a:	d02c      	beq.n	800db86 <ai_platform_network_post_init+0x12a>
 800db2c:	6813      	ldr	r3, [r2, #0]
 800db2e:	f240 4183 	movw	r1, #1155	; 0x483
 800db32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db36:	428b      	cmp	r3, r1
 800db38:	d060      	beq.n	800dbfc <ai_platform_network_post_init+0x1a0>
 800db3a:	6813      	ldr	r3, [r2, #0]
 800db3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db40:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800db44:	f000 808b 	beq.w	800dc5e <ai_platform_network_post_init+0x202>
 800db48:	6813      	ldr	r3, [r2, #0]
 800db4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d129      	bne.n	800dba6 <ai_platform_network_post_init+0x14a>
 800db52:	4a53      	ldr	r2, [pc, #332]	; (800dca0 <ai_platform_network_post_init+0x244>)
 800db54:	2301      	movs	r3, #1
 800db56:	6093      	str	r3, [r2, #8]
 800db58:	6893      	ldr	r3, [r2, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1fc      	bne.n	800db58 <ai_platform_network_post_init+0xfc>
 800db5e:	4951      	ldr	r1, [pc, #324]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800db60:	4b51      	ldr	r3, [pc, #324]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800db62:	6011      	str	r1, [r2, #0]
 800db64:	6812      	ldr	r2, [r2, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d01d      	beq.n	800dba6 <ai_platform_network_post_init+0x14a>
 800db6a:	e7fe      	b.n	800db6a <ai_platform_network_post_init+0x10e>
 800db6c:	4a4c      	ldr	r2, [pc, #304]	; (800dca0 <ai_platform_network_post_init+0x244>)
 800db6e:	2301      	movs	r3, #1
 800db70:	6093      	str	r3, [r2, #8]
 800db72:	6893      	ldr	r3, [r2, #8]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1fc      	bne.n	800db72 <ai_platform_network_post_init+0x116>
 800db78:	494a      	ldr	r1, [pc, #296]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800db7a:	4b4b      	ldr	r3, [pc, #300]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800db7c:	6011      	str	r1, [r2, #0]
 800db7e:	6812      	ldr	r2, [r2, #0]
 800db80:	429a      	cmp	r2, r3
 800db82:	d010      	beq.n	800dba6 <ai_platform_network_post_init+0x14a>
 800db84:	e7fe      	b.n	800db84 <ai_platform_network_post_init+0x128>
 800db86:	4a49      	ldr	r2, [pc, #292]	; (800dcac <ai_platform_network_post_init+0x250>)
 800db88:	2301      	movs	r3, #1
 800db8a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800db8e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1fb      	bne.n	800db8e <ai_platform_network_post_init+0x132>
 800db96:	4943      	ldr	r1, [pc, #268]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800db98:	4b43      	ldr	r3, [pc, #268]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800db9a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800db9e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d110      	bne.n	800dbc8 <ai_platform_network_post_init+0x16c>
 800dba6:	f7fe ff0b 	bl	800c9c0 <_ai_platform_release_crc>
 800dbaa:	2000      	movs	r0, #0
 800dbac:	bd38      	pop	{r3, r4, r5, pc}
 800dbae:	4a3c      	ldr	r2, [pc, #240]	; (800dca0 <ai_platform_network_post_init+0x244>)
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	6093      	str	r3, [r2, #8]
 800dbb4:	6893      	ldr	r3, [r2, #8]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1fc      	bne.n	800dbb4 <ai_platform_network_post_init+0x158>
 800dbba:	493a      	ldr	r1, [pc, #232]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dbbc:	4b3a      	ldr	r3, [pc, #232]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dbbe:	6011      	str	r1, [r2, #0]
 800dbc0:	6812      	ldr	r2, [r2, #0]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d080      	beq.n	800dac8 <ai_platform_network_post_init+0x6c>
 800dbc6:	e7fe      	b.n	800dbc6 <ai_platform_network_post_init+0x16a>
 800dbc8:	e7fe      	b.n	800dbc8 <ai_platform_network_post_init+0x16c>
 800dbca:	4a38      	ldr	r2, [pc, #224]	; (800dcac <ai_platform_network_post_init+0x250>)
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dbd2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1fb      	bne.n	800dbd2 <ai_platform_network_post_init+0x176>
 800dbda:	4932      	ldr	r1, [pc, #200]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dbdc:	4b32      	ldr	r3, [pc, #200]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dbde:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dbe2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	f43f af6e 	beq.w	800dac8 <ai_platform_network_post_init+0x6c>
 800dbec:	e7fe      	b.n	800dbec <ai_platform_network_post_init+0x190>
 800dbee:	2210      	movs	r2, #16
 800dbf0:	2111      	movs	r1, #17
 800dbf2:	18a0      	adds	r0, r4, r2
 800dbf4:	f000 fb42 	bl	800e27c <core_set_error>
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	4a2b      	ldr	r2, [pc, #172]	; (800dcac <ai_platform_network_post_init+0x250>)
 800dbfe:	2301      	movs	r3, #1
 800dc00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dc04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1fb      	bne.n	800dc04 <ai_platform_network_post_init+0x1a8>
 800dc0c:	4925      	ldr	r1, [pc, #148]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dc0e:	4b26      	ldr	r3, [pc, #152]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dc10:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dc14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d0c4      	beq.n	800dba6 <ai_platform_network_post_init+0x14a>
 800dc1c:	e7fe      	b.n	800dc1c <ai_platform_network_post_init+0x1c0>
 800dc1e:	4a23      	ldr	r2, [pc, #140]	; (800dcac <ai_platform_network_post_init+0x250>)
 800dc20:	2301      	movs	r3, #1
 800dc22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dc26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1fb      	bne.n	800dc26 <ai_platform_network_post_init+0x1ca>
 800dc2e:	491d      	ldr	r1, [pc, #116]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dc30:	4b1d      	ldr	r3, [pc, #116]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dc32:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dc36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	f43f af44 	beq.w	800dac8 <ai_platform_network_post_init+0x6c>
 800dc40:	e7fe      	b.n	800dc40 <ai_platform_network_post_init+0x1e4>
 800dc42:	4a17      	ldr	r2, [pc, #92]	; (800dca0 <ai_platform_network_post_init+0x244>)
 800dc44:	2301      	movs	r3, #1
 800dc46:	6093      	str	r3, [r2, #8]
 800dc48:	6893      	ldr	r3, [r2, #8]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1fc      	bne.n	800dc48 <ai_platform_network_post_init+0x1ec>
 800dc4e:	4915      	ldr	r1, [pc, #84]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dc50:	4b15      	ldr	r3, [pc, #84]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dc52:	6011      	str	r1, [r2, #0]
 800dc54:	6812      	ldr	r2, [r2, #0]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	f43f af36 	beq.w	800dac8 <ai_platform_network_post_init+0x6c>
 800dc5c:	e7fe      	b.n	800dc5c <ai_platform_network_post_init+0x200>
 800dc5e:	4a10      	ldr	r2, [pc, #64]	; (800dca0 <ai_platform_network_post_init+0x244>)
 800dc60:	2301      	movs	r3, #1
 800dc62:	6093      	str	r3, [r2, #8]
 800dc64:	6893      	ldr	r3, [r2, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1fc      	bne.n	800dc64 <ai_platform_network_post_init+0x208>
 800dc6a:	490e      	ldr	r1, [pc, #56]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dc6c:	4b0e      	ldr	r3, [pc, #56]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dc6e:	6011      	str	r1, [r2, #0]
 800dc70:	6812      	ldr	r2, [r2, #0]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d097      	beq.n	800dba6 <ai_platform_network_post_init+0x14a>
 800dc76:	e7fe      	b.n	800dc76 <ai_platform_network_post_init+0x21a>
 800dc78:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <ai_platform_network_post_init+0x244>)
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	6093      	str	r3, [r2, #8]
 800dc7e:	6893      	ldr	r3, [r2, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1fc      	bne.n	800dc7e <ai_platform_network_post_init+0x222>
 800dc84:	4907      	ldr	r1, [pc, #28]	; (800dca4 <ai_platform_network_post_init+0x248>)
 800dc86:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <ai_platform_network_post_init+0x24c>)
 800dc88:	6011      	str	r1, [r2, #0]
 800dc8a:	6812      	ldr	r2, [r2, #0]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	f43f af1b 	beq.w	800dac8 <ai_platform_network_post_init+0x6c>
 800dc92:	e7fe      	b.n	800dc92 <ai_platform_network_post_init+0x236>
 800dc94:	a1c00100 	.word	0xa1c00100
 800dc98:	e0042000 	.word	0xe0042000
 800dc9c:	5c001000 	.word	0x5c001000
 800dca0:	40023000 	.word	0x40023000
 800dca4:	f407a5c2 	.word	0xf407a5c2
 800dca8:	b5e8b5cd 	.word	0xb5e8b5cd
 800dcac:	58024000 	.word	0x58024000

0800dcb0 <ai_platform_network_process>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	b085      	sub	sp, #20
 800dcb6:	460e      	mov	r6, r1
 800dcb8:	4605      	mov	r5, r0
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	b120      	cbz	r0, 800dcc8 <ai_platform_network_process+0x18>
 800dcbe:	4b24      	ldr	r3, [pc, #144]	; (800dd50 <ai_platform_network_process+0xa0>)
 800dcc0:	6802      	ldr	r2, [r0, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	bf18      	it	ne
 800dcc6:	2500      	movne	r5, #0
 800dcc8:	f7fe fe78 	bl	800c9bc <_ai_platform_acquire_crc>
 800dccc:	4b21      	ldr	r3, [pc, #132]	; (800dd54 <ai_platform_network_process+0xa4>)
 800dcce:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dcd8:	185a      	adds	r2, r3, r1
 800dcda:	2a01      	cmp	r2, #1
 800dcdc:	d92b      	bls.n	800dd36 <ai_platform_network_process+0x86>
 800dcde:	f240 4249 	movw	r2, #1097	; 0x449
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d027      	beq.n	800dd36 <ai_platform_network_process+0x86>
 800dce6:	4a1c      	ldr	r2, [pc, #112]	; (800dd58 <ai_platform_network_process+0xa8>)
 800dce8:	6813      	ldr	r3, [r2, #0]
 800dcea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dcee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dcf2:	d039      	beq.n	800dd68 <ai_platform_network_process+0xb8>
 800dcf4:	6813      	ldr	r3, [r2, #0]
 800dcf6:	f240 4183 	movw	r1, #1155	; 0x483
 800dcfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dcfe:	428b      	cmp	r3, r1
 800dd00:	f000 819c 	beq.w	800e03c <ai_platform_network_process+0x38c>
 800dd04:	6813      	ldr	r3, [r2, #0]
 800dd06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd0a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dd0e:	f000 8179 	beq.w	800e004 <ai_platform_network_process+0x354>
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d136      	bne.n	800dd8a <ai_platform_network_process+0xda>
 800dd1c:	4a0f      	ldr	r2, [pc, #60]	; (800dd5c <ai_platform_network_process+0xac>)
 800dd1e:	2301      	movs	r3, #1
 800dd20:	6093      	str	r3, [r2, #8]
 800dd22:	6893      	ldr	r3, [r2, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d1fc      	bne.n	800dd22 <ai_platform_network_process+0x72>
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <ai_platform_network_process+0xb0>)
 800dd2a:	6013      	str	r3, [r2, #0]
 800dd2c:	4b0d      	ldr	r3, [pc, #52]	; (800dd64 <ai_platform_network_process+0xb4>)
 800dd2e:	6812      	ldr	r2, [r2, #0]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d02a      	beq.n	800dd8a <ai_platform_network_process+0xda>
 800dd34:	e7fe      	b.n	800dd34 <ai_platform_network_process+0x84>
 800dd36:	4a09      	ldr	r2, [pc, #36]	; (800dd5c <ai_platform_network_process+0xac>)
 800dd38:	2301      	movs	r3, #1
 800dd3a:	6093      	str	r3, [r2, #8]
 800dd3c:	6893      	ldr	r3, [r2, #8]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1fc      	bne.n	800dd3c <ai_platform_network_process+0x8c>
 800dd42:	4b07      	ldr	r3, [pc, #28]	; (800dd60 <ai_platform_network_process+0xb0>)
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	4b07      	ldr	r3, [pc, #28]	; (800dd64 <ai_platform_network_process+0xb4>)
 800dd48:	6812      	ldr	r2, [r2, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d01d      	beq.n	800dd8a <ai_platform_network_process+0xda>
 800dd4e:	e7fe      	b.n	800dd4e <ai_platform_network_process+0x9e>
 800dd50:	a1c00100 	.word	0xa1c00100
 800dd54:	e0042000 	.word	0xe0042000
 800dd58:	5c001000 	.word	0x5c001000
 800dd5c:	40023000 	.word	0x40023000
 800dd60:	f407a5c2 	.word	0xf407a5c2
 800dd64:	b5e8b5cd 	.word	0xb5e8b5cd
 800dd68:	4ab0      	ldr	r2, [pc, #704]	; (800e02c <ai_platform_network_process+0x37c>)
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dd70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d1fb      	bne.n	800dd70 <ai_platform_network_process+0xc0>
 800dd78:	4bad      	ldr	r3, [pc, #692]	; (800e030 <ai_platform_network_process+0x380>)
 800dd7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800dd7e:	4bad      	ldr	r3, [pc, #692]	; (800e034 <ai_platform_network_process+0x384>)
 800dd80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dd84:	429a      	cmp	r2, r3
 800dd86:	f040 812b 	bne.w	800dfe0 <ai_platform_network_process+0x330>
 800dd8a:	f7fe fe19 	bl	800c9c0 <_ai_platform_release_crc>
 800dd8e:	2d00      	cmp	r5, #0
 800dd90:	f000 8172 	beq.w	800e078 <ai_platform_network_process+0x3c8>
 800dd94:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f000 8123 	beq.w	800dfe2 <ai_platform_network_process+0x332>
 800dd9c:	68eb      	ldr	r3, [r5, #12]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800dda4:	f003 0303 	and.w	r3, r3, #3
 800dda8:	616a      	str	r2, [r5, #20]
 800ddaa:	2b03      	cmp	r3, #3
 800ddac:	f040 811f 	bne.w	800dfee <ai_platform_network_process+0x33e>
 800ddb0:	2e00      	cmp	r6, #0
 800ddb2:	f000 8156 	beq.w	800e062 <ai_platform_network_process+0x3b2>
 800ddb6:	fab8 f788 	clz	r7, r8
 800ddba:	097f      	lsrs	r7, r7, #5
 800ddbc:	f1b8 0f00 	cmp.w	r8, #0
 800ddc0:	f000 814f 	beq.w	800e062 <ai_platform_network_process+0x3b2>
 800ddc4:	f8b8 3000 	ldrh.w	r3, [r8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 814a 	beq.w	800e062 <ai_platform_network_process+0x3b2>
 800ddce:	69b3      	ldr	r3, [r6, #24]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800ddd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d072      	beq.n	800dec4 <ai_platform_network_process+0x214>
 800ddde:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800dde2:	2c00      	cmp	r4, #0
 800dde4:	d06e      	beq.n	800dec4 <ai_platform_network_process+0x214>
 800dde6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddea:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800ddee:	f8d3 a000 	ldr.w	sl, [r3]
 800ddf2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800ddf6:	f000 8133 	beq.w	800e060 <ai_platform_network_process+0x3b0>
 800ddfa:	69a3      	ldr	r3, [r4, #24]
 800ddfc:	2101      	movs	r1, #1
 800ddfe:	4630      	mov	r0, r6
 800de00:	685d      	ldr	r5, [r3, #4]
 800de02:	f7fe fd9d 	bl	800c940 <ai_buffer_get_size>
 800de06:	4285      	cmp	r5, r0
 800de08:	f0c0 8138 	bcc.w	800e07c <ai_platform_network_process+0x3cc>
 800de0c:	68e0      	ldr	r0, [r4, #12]
 800de0e:	69b1      	ldr	r1, [r6, #24]
 800de10:	68c2      	ldr	r2, [r0, #12]
 800de12:	68cb      	ldr	r3, [r1, #12]
 800de14:	429a      	cmp	r2, r3
 800de16:	f040 8131 	bne.w	800e07c <ai_platform_network_process+0x3cc>
 800de1a:	6882      	ldr	r2, [r0, #8]
 800de1c:	688b      	ldr	r3, [r1, #8]
 800de1e:	429a      	cmp	r2, r3
 800de20:	f040 812c 	bne.w	800e07c <ai_platform_network_process+0x3cc>
 800de24:	6842      	ldr	r2, [r0, #4]
 800de26:	684b      	ldr	r3, [r1, #4]
 800de28:	429a      	cmp	r2, r3
 800de2a:	f040 8127 	bne.w	800e07c <ai_platform_network_process+0x3cc>
 800de2e:	69a3      	ldr	r3, [r4, #24]
 800de30:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de34:	f002 fb02 	bl	801043c <ai_array_get_data_byte_size>
 800de38:	4605      	mov	r5, r0
 800de3a:	4620      	mov	r0, r4
 800de3c:	f002 fa54 	bl	80102e8 <get_tensor_byte_size>
 800de40:	4285      	cmp	r5, r0
 800de42:	f0c0 811b 	bcc.w	800e07c <ai_platform_network_process+0x3cc>
 800de46:	69a3      	ldr	r3, [r4, #24]
 800de48:	6818      	ldr	r0, [r3, #0]
 800de4a:	f002 fa63 	bl	8010314 <ai_array_to_buffer_fmt>
 800de4e:	6833      	ldr	r3, [r6, #0]
 800de50:	4058      	eors	r0, r3
 800de52:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800de56:	f040 81ca 	bne.w	800e1ee <ai_platform_network_process+0x53e>
 800de5a:	6873      	ldr	r3, [r6, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 81bd 	beq.w	800e1dc <ai_platform_network_process+0x52c>
 800de62:	69b3      	ldr	r3, [r6, #24]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b00      	cmp	r3, #0
 800de68:	f000 81ca 	beq.w	800e200 <ai_platform_network_process+0x550>
 800de6c:	9a02      	ldr	r2, [sp, #8]
 800de6e:	4620      	mov	r0, r4
 800de70:	3701      	adds	r7, #1
 800de72:	361c      	adds	r6, #28
 800de74:	429a      	cmp	r2, r3
 800de76:	bf38      	it	cc
 800de78:	461a      	movcc	r2, r3
 800de7a:	9202      	str	r2, [sp, #8]
 800de7c:	f002 fa34 	bl	80102e8 <get_tensor_byte_size>
 800de80:	f8c9 0008 	str.w	r0, [r9, #8]
 800de84:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	fb00 f303 	mul.w	r3, r0, r3
 800de8e:	f8c9 300c 	str.w	r3, [r9, #12]
 800de92:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800de96:	440b      	add	r3, r1
 800de98:	f8c9 1004 	str.w	r1, [r9, #4]
 800de9c:	f84a 300b 	str.w	r3, [sl, fp]
 800dea0:	69a0      	ldr	r0, [r4, #24]
 800dea2:	6803      	ldr	r3, [r0, #0]
 800dea4:	009a      	lsls	r2, r3, #2
 800dea6:	f100 80bb 	bmi.w	800e020 <ai_platform_network_process+0x370>
 800deaa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800deae:	1a9b      	subs	r3, r3, r2
 800deb0:	4419      	add	r1, r3
 800deb2:	6081      	str	r1, [r0, #8]
 800deb4:	69a3      	ldr	r3, [r4, #24]
 800deb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800deba:	60da      	str	r2, [r3, #12]
 800debc:	f8b8 3000 	ldrh.w	r3, [r8]
 800dec0:	42bb      	cmp	r3, r7
 800dec2:	d888      	bhi.n	800ddd6 <ai_platform_network_process+0x126>
 800dec4:	9d03      	ldr	r5, [sp, #12]
 800dec6:	9b01      	ldr	r3, [sp, #4]
 800dec8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800deca:	2b00      	cmp	r3, #0
 800decc:	f000 81a1 	beq.w	800e212 <ai_platform_network_process+0x562>
 800ded0:	2a01      	cmp	r2, #1
 800ded2:	f240 817b 	bls.w	800e1cc <ai_platform_network_process+0x51c>
 800ded6:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800deda:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f000 8174 	beq.w	800e1cc <ai_platform_network_process+0x51c>
 800dee4:	9e01      	ldr	r6, [sp, #4]
 800dee6:	2700      	movs	r7, #0
 800dee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800deec:	2b00      	cmp	r3, #0
 800deee:	f000 80d3 	beq.w	800e098 <ai_platform_network_process+0x3e8>
 800def2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800def6:	2c00      	cmp	r4, #0
 800def8:	f000 80ce 	beq.w	800e098 <ai_platform_network_process+0x3e8>
 800defc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df00:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800df04:	f8d3 8000 	ldr.w	r8, [r3]
 800df08:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800df0c:	f000 819f 	beq.w	800e24e <ai_platform_network_process+0x59e>
 800df10:	69a3      	ldr	r3, [r4, #24]
 800df12:	2101      	movs	r1, #1
 800df14:	4630      	mov	r0, r6
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	9301      	str	r3, [sp, #4]
 800df1a:	f7fe fd11 	bl	800c940 <ai_buffer_get_size>
 800df1e:	9b01      	ldr	r3, [sp, #4]
 800df20:	4283      	cmp	r3, r0
 800df22:	f0c0 8153 	bcc.w	800e1cc <ai_platform_network_process+0x51c>
 800df26:	68e0      	ldr	r0, [r4, #12]
 800df28:	69b1      	ldr	r1, [r6, #24]
 800df2a:	68c2      	ldr	r2, [r0, #12]
 800df2c:	68cb      	ldr	r3, [r1, #12]
 800df2e:	429a      	cmp	r2, r3
 800df30:	f040 814c 	bne.w	800e1cc <ai_platform_network_process+0x51c>
 800df34:	6882      	ldr	r2, [r0, #8]
 800df36:	688b      	ldr	r3, [r1, #8]
 800df38:	429a      	cmp	r2, r3
 800df3a:	f040 8147 	bne.w	800e1cc <ai_platform_network_process+0x51c>
 800df3e:	6842      	ldr	r2, [r0, #4]
 800df40:	684b      	ldr	r3, [r1, #4]
 800df42:	429a      	cmp	r2, r3
 800df44:	f040 8142 	bne.w	800e1cc <ai_platform_network_process+0x51c>
 800df48:	69a3      	ldr	r3, [r4, #24]
 800df4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df4e:	f002 fa75 	bl	801043c <ai_array_get_data_byte_size>
 800df52:	9001      	str	r0, [sp, #4]
 800df54:	4620      	mov	r0, r4
 800df56:	f002 f9c7 	bl	80102e8 <get_tensor_byte_size>
 800df5a:	9b01      	ldr	r3, [sp, #4]
 800df5c:	4283      	cmp	r3, r0
 800df5e:	f0c0 8135 	bcc.w	800e1cc <ai_platform_network_process+0x51c>
 800df62:	69a3      	ldr	r3, [r4, #24]
 800df64:	6818      	ldr	r0, [r3, #0]
 800df66:	f002 f9d5 	bl	8010314 <ai_array_to_buffer_fmt>
 800df6a:	6833      	ldr	r3, [r6, #0]
 800df6c:	4058      	eors	r0, r3
 800df6e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800df72:	f040 815c 	bne.w	800e22e <ai_platform_network_process+0x57e>
 800df76:	6873      	ldr	r3, [r6, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 8150 	beq.w	800e21e <ai_platform_network_process+0x56e>
 800df7e:	69b3      	ldr	r3, [r6, #24]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f000 815b 	beq.w	800e23e <ai_platform_network_process+0x58e>
 800df88:	9a02      	ldr	r2, [sp, #8]
 800df8a:	4620      	mov	r0, r4
 800df8c:	3701      	adds	r7, #1
 800df8e:	361c      	adds	r6, #28
 800df90:	429a      	cmp	r2, r3
 800df92:	bf38      	it	cc
 800df94:	461a      	movcc	r2, r3
 800df96:	9202      	str	r2, [sp, #8]
 800df98:	f002 f9a6 	bl	80102e8 <get_tensor_byte_size>
 800df9c:	f8ca 0008 	str.w	r0, [sl, #8]
 800dfa0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	fb00 f303 	mul.w	r3, r0, r3
 800dfaa:	f8ca 300c 	str.w	r3, [sl, #12]
 800dfae:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800dfb2:	440b      	add	r3, r1
 800dfb4:	f8ca 1004 	str.w	r1, [sl, #4]
 800dfb8:	f848 300b 	str.w	r3, [r8, fp]
 800dfbc:	69a0      	ldr	r0, [r4, #24]
 800dfbe:	6803      	ldr	r3, [r0, #0]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	d464      	bmi.n	800e08e <ai_platform_network_process+0x3de>
 800dfc4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800dfc8:	1a9b      	subs	r3, r3, r2
 800dfca:	4419      	add	r1, r3
 800dfcc:	6081      	str	r1, [r0, #8]
 800dfce:	69a3      	ldr	r3, [r4, #24]
 800dfd0:	f8da 2004 	ldr.w	r2, [sl, #4]
 800dfd4:	60da      	str	r2, [r3, #12]
 800dfd6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800dfda:	429f      	cmp	r7, r3
 800dfdc:	d384      	bcc.n	800dee8 <ai_platform_network_process+0x238>
 800dfde:	e05b      	b.n	800e098 <ai_platform_network_process+0x3e8>
 800dfe0:	e7fe      	b.n	800dfe0 <ai_platform_network_process+0x330>
 800dfe2:	68ea      	ldr	r2, [r5, #12]
 800dfe4:	616b      	str	r3, [r5, #20]
 800dfe6:	f002 0203 	and.w	r2, r2, #3
 800dfea:	2a03      	cmp	r2, #3
 800dfec:	d039      	beq.n	800e062 <ai_platform_network_process+0x3b2>
 800dfee:	2230      	movs	r2, #48	; 0x30
 800dff0:	2111      	movs	r1, #17
 800dff2:	f105 0010 	add.w	r0, r5, #16
 800dff6:	2400      	movs	r4, #0
 800dff8:	f000 f940 	bl	800e27c <core_set_error>
 800dffc:	4620      	mov	r0, r4
 800dffe:	b005      	add	sp, #20
 800e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	4a0c      	ldr	r2, [pc, #48]	; (800e038 <ai_platform_network_process+0x388>)
 800e006:	2301      	movs	r3, #1
 800e008:	6093      	str	r3, [r2, #8]
 800e00a:	6893      	ldr	r3, [r2, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1fc      	bne.n	800e00a <ai_platform_network_process+0x35a>
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <ai_platform_network_process+0x380>)
 800e012:	6013      	str	r3, [r2, #0]
 800e014:	4b07      	ldr	r3, [pc, #28]	; (800e034 <ai_platform_network_process+0x384>)
 800e016:	6812      	ldr	r2, [r2, #0]
 800e018:	429a      	cmp	r2, r3
 800e01a:	f43f aeb6 	beq.w	800dd8a <ai_platform_network_process+0xda>
 800e01e:	e7fe      	b.n	800e01e <ai_platform_network_process+0x36e>
 800e020:	f8b8 3000 	ldrh.w	r3, [r8]
 800e024:	429f      	cmp	r7, r3
 800e026:	f4ff aed6 	bcc.w	800ddd6 <ai_platform_network_process+0x126>
 800e02a:	e74b      	b.n	800dec4 <ai_platform_network_process+0x214>
 800e02c:	58024000 	.word	0x58024000
 800e030:	f407a5c2 	.word	0xf407a5c2
 800e034:	b5e8b5cd 	.word	0xb5e8b5cd
 800e038:	40023000 	.word	0x40023000
 800e03c:	4a88      	ldr	r2, [pc, #544]	; (800e260 <ai_platform_network_process+0x5b0>)
 800e03e:	2301      	movs	r3, #1
 800e040:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e044:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1fb      	bne.n	800e044 <ai_platform_network_process+0x394>
 800e04c:	4b85      	ldr	r3, [pc, #532]	; (800e264 <ai_platform_network_process+0x5b4>)
 800e04e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e052:	4b85      	ldr	r3, [pc, #532]	; (800e268 <ai_platform_network_process+0x5b8>)
 800e054:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e058:	429a      	cmp	r2, r3
 800e05a:	f43f ae96 	beq.w	800dd8a <ai_platform_network_process+0xda>
 800e05e:	e7fe      	b.n	800e05e <ai_platform_network_process+0x3ae>
 800e060:	9d03      	ldr	r5, [sp, #12]
 800e062:	2400      	movs	r4, #0
 800e064:	2217      	movs	r2, #23
 800e066:	2112      	movs	r1, #18
 800e068:	f105 0010 	add.w	r0, r5, #16
 800e06c:	f000 f906 	bl	800e27c <core_set_error>
 800e070:	4620      	mov	r0, r4
 800e072:	b005      	add	sp, #20
 800e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e078:	462c      	mov	r4, r5
 800e07a:	e7bf      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e07c:	9d03      	ldr	r5, [sp, #12]
 800e07e:	2218      	movs	r2, #24
 800e080:	2112      	movs	r1, #18
 800e082:	2400      	movs	r4, #0
 800e084:	f105 0010 	add.w	r0, r5, #16
 800e088:	f000 f8f8 	bl	800e27c <core_set_error>
 800e08c:	e7b6      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e08e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e092:	429f      	cmp	r7, r3
 800e094:	f4ff af28 	bcc.w	800dee8 <ai_platform_network_process+0x238>
 800e098:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e09c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800e09e:	82ab      	strh	r3, [r5, #20]
 800e0a0:	2a00      	cmp	r2, #0
 800e0a2:	f040 808d 	bne.w	800e1c0 <ai_platform_network_process+0x510>
 800e0a6:	4616      	mov	r6, r2
 800e0a8:	4617      	mov	r7, r2
 800e0aa:	8aec      	ldrh	r4, [r5, #22]
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	d2a5      	bcs.n	800dffc <ai_platform_network_process+0x34c>
 800e0b0:	46ab      	mov	fp, r5
 800e0b2:	2e00      	cmp	r6, #0
 800e0b4:	d030      	beq.n	800e118 <ai_platform_network_process+0x468>
 800e0b6:	f04f 0800 	mov.w	r8, #0
 800e0ba:	e014      	b.n	800e0e6 <ai_platform_network_process+0x436>
 800e0bc:	6882      	ldr	r2, [r0, #8]
 800e0be:	68c5      	ldr	r5, [r0, #12]
 800e0c0:	6863      	ldr	r3, [r4, #4]
 800e0c2:	1b52      	subs	r2, r2, r5
 800e0c4:	4413      	add	r3, r2
 800e0c6:	6083      	str	r3, [r0, #8]
 800e0c8:	698b      	ldr	r3, [r1, #24]
 800e0ca:	6862      	ldr	r2, [r4, #4]
 800e0cc:	60da      	str	r2, [r3, #12]
 800e0ce:	f859 200a 	ldr.w	r2, [r9, sl]
 800e0d2:	f108 0801 	add.w	r8, r8, #1
 800e0d6:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800e0da:	440b      	add	r3, r1
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d301      	bcc.n	800e0e4 <ai_platform_network_process+0x434>
 800e0e0:	68e3      	ldr	r3, [r4, #12]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	6063      	str	r3, [r4, #4]
 800e0e6:	8833      	ldrh	r3, [r6, #0]
 800e0e8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800e0ec:	4543      	cmp	r3, r8
 800e0ee:	d913      	bls.n	800e118 <ai_platform_network_process+0x468>
 800e0f0:	6873      	ldr	r3, [r6, #4]
 800e0f2:	b18b      	cbz	r3, 800e118 <ai_platform_network_process+0x468>
 800e0f4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800e0f8:	b171      	cbz	r1, 800e118 <ai_platform_network_process+0x468>
 800e0fa:	6988      	ldr	r0, [r1, #24]
 800e0fc:	68b2      	ldr	r2, [r6, #8]
 800e0fe:	6803      	ldr	r3, [r0, #0]
 800e100:	f8d2 9000 	ldr.w	r9, [r2]
 800e104:	009d      	lsls	r5, r3, #2
 800e106:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800e10a:	d5d7      	bpl.n	800e0bc <ai_platform_network_process+0x40c>
 800e10c:	6880      	ldr	r0, [r0, #8]
 800e10e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800e112:	f003 fa75 	bl	8011600 <memcpy>
 800e116:	e7da      	b.n	800e0ce <ai_platform_network_process+0x41e>
 800e118:	4658      	mov	r0, fp
 800e11a:	f001 ff6f 	bl	800fffc <ai_layers_forward_all>
 800e11e:	2f00      	cmp	r7, #0
 800e120:	d03f      	beq.n	800e1a2 <ai_platform_network_process+0x4f2>
 800e122:	2400      	movs	r4, #0
 800e124:	e016      	b.n	800e154 <ai_platform_network_process+0x4a4>
 800e126:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800e12a:	f859 100a 	ldr.w	r1, [r9, sl]
 800e12e:	4413      	add	r3, r2
 800e130:	428b      	cmp	r3, r1
 800e132:	d302      	bcc.n	800e13a <ai_platform_network_process+0x48a>
 800e134:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e138:	1acb      	subs	r3, r1, r3
 800e13a:	f8c8 3004 	str.w	r3, [r8, #4]
 800e13e:	6981      	ldr	r1, [r0, #24]
 800e140:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800e144:	1b52      	subs	r2, r2, r5
 800e146:	4413      	add	r3, r2
 800e148:	608b      	str	r3, [r1, #8]
 800e14a:	6983      	ldr	r3, [r0, #24]
 800e14c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e150:	60da      	str	r2, [r3, #12]
 800e152:	3401      	adds	r4, #1
 800e154:	883b      	ldrh	r3, [r7, #0]
 800e156:	42a3      	cmp	r3, r4
 800e158:	d923      	bls.n	800e1a2 <ai_platform_network_process+0x4f2>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	b30b      	cbz	r3, 800e1a2 <ai_platform_network_process+0x4f2>
 800e15e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e162:	b1f0      	cbz	r0, 800e1a2 <ai_platform_network_process+0x4f2>
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800e16a:	6983      	ldr	r3, [r0, #24]
 800e16c:	f8d2 9000 	ldr.w	r9, [r2]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800e176:	0092      	lsls	r2, r2, #2
 800e178:	d5d5      	bpl.n	800e126 <ai_platform_network_process+0x476>
 800e17a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e17e:	6899      	ldr	r1, [r3, #8]
 800e180:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e184:	f003 fa3c 	bl	8011600 <memcpy>
 800e188:	f859 200a 	ldr.w	r2, [r9, sl]
 800e18c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800e190:	440b      	add	r3, r1
 800e192:	4293      	cmp	r3, r2
 800e194:	d302      	bcc.n	800e19c <ai_platform_network_process+0x4ec>
 800e196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e19a:	1ad3      	subs	r3, r2, r3
 800e19c:	f8c8 3004 	str.w	r3, [r8, #4]
 800e1a0:	e7d7      	b.n	800e152 <ai_platform_network_process+0x4a2>
 800e1a2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800e1a6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800e1aa:	3401      	adds	r4, #1
 800e1ac:	b2a4      	uxth	r4, r4
 800e1ae:	42a3      	cmp	r3, r4
 800e1b0:	f8ab 4016 	strh.w	r4, [fp, #22]
 800e1b4:	f63f af7d 	bhi.w	800e0b2 <ai_platform_network_process+0x402>
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	b005      	add	sp, #20
 800e1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c0:	2a01      	cmp	r2, #1
 800e1c2:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800e1c4:	d029      	beq.n	800e21a <ai_platform_network_process+0x56a>
 800e1c6:	f106 070c 	add.w	r7, r6, #12
 800e1ca:	e76e      	b.n	800e0aa <ai_platform_network_process+0x3fa>
 800e1cc:	2218      	movs	r2, #24
 800e1ce:	2113      	movs	r1, #19
 800e1d0:	f105 0010 	add.w	r0, r5, #16
 800e1d4:	2400      	movs	r4, #0
 800e1d6:	f000 f851 	bl	800e27c <core_set_error>
 800e1da:	e70f      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e1dc:	9d03      	ldr	r5, [sp, #12]
 800e1de:	4604      	mov	r4, r0
 800e1e0:	2217      	movs	r2, #23
 800e1e2:	2112      	movs	r1, #18
 800e1e4:	f105 0010 	add.w	r0, r5, #16
 800e1e8:	f000 f848 	bl	800e27c <core_set_error>
 800e1ec:	e706      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e1ee:	9d03      	ldr	r5, [sp, #12]
 800e1f0:	2219      	movs	r2, #25
 800e1f2:	2112      	movs	r1, #18
 800e1f4:	2400      	movs	r4, #0
 800e1f6:	f105 0010 	add.w	r0, r5, #16
 800e1fa:	f000 f83f 	bl	800e27c <core_set_error>
 800e1fe:	e6fd      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e200:	9d03      	ldr	r5, [sp, #12]
 800e202:	4604      	mov	r4, r0
 800e204:	2221      	movs	r2, #33	; 0x21
 800e206:	2112      	movs	r1, #18
 800e208:	f105 0010 	add.w	r0, r5, #16
 800e20c:	f000 f836 	bl	800e27c <core_set_error>
 800e210:	e6f4      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e212:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e216:	82ab      	strh	r3, [r5, #20]
 800e218:	e742      	b.n	800e0a0 <ai_platform_network_process+0x3f0>
 800e21a:	2700      	movs	r7, #0
 800e21c:	e745      	b.n	800e0aa <ai_platform_network_process+0x3fa>
 800e21e:	4604      	mov	r4, r0
 800e220:	2217      	movs	r2, #23
 800e222:	2113      	movs	r1, #19
 800e224:	f105 0010 	add.w	r0, r5, #16
 800e228:	f000 f828 	bl	800e27c <core_set_error>
 800e22c:	e6e6      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e22e:	2219      	movs	r2, #25
 800e230:	2113      	movs	r1, #19
 800e232:	f105 0010 	add.w	r0, r5, #16
 800e236:	2400      	movs	r4, #0
 800e238:	f000 f820 	bl	800e27c <core_set_error>
 800e23c:	e6de      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e23e:	4604      	mov	r4, r0
 800e240:	2221      	movs	r2, #33	; 0x21
 800e242:	2113      	movs	r1, #19
 800e244:	f105 0010 	add.w	r0, r5, #16
 800e248:	f000 f818 	bl	800e27c <core_set_error>
 800e24c:	e6d6      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e24e:	2217      	movs	r2, #23
 800e250:	2113      	movs	r1, #19
 800e252:	f105 0010 	add.w	r0, r5, #16
 800e256:	4654      	mov	r4, sl
 800e258:	f000 f810 	bl	800e27c <core_set_error>
 800e25c:	e6ce      	b.n	800dffc <ai_platform_network_process+0x34c>
 800e25e:	bf00      	nop
 800e260:	58024000 	.word	0x58024000
 800e264:	f407a5c2 	.word	0xf407a5c2
 800e268:	b5e8b5cd 	.word	0xb5e8b5cd

0800e26c <core_init>:
 800e26c:	2001      	movs	r0, #1
 800e26e:	4770      	bx	lr

0800e270 <core_get_error>:
 800e270:	4603      	mov	r3, r0
 800e272:	2200      	movs	r2, #0
 800e274:	6800      	ldr	r0, [r0, #0]
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop

0800e27c <core_set_error>:
 800e27c:	4603      	mov	r3, r0
 800e27e:	7800      	ldrb	r0, [r0, #0]
 800e280:	b108      	cbz	r0, 800e286 <core_set_error+0xa>
 800e282:	2000      	movs	r0, #0
 800e284:	4770      	bx	lr
 800e286:	7019      	strb	r1, [r3, #0]
 800e288:	2001      	movs	r0, #1
 800e28a:	6819      	ldr	r1, [r3, #0]
 800e28c:	f362 211f 	bfi	r1, r2, #8, #24
 800e290:	6019      	str	r1, [r3, #0]
 800e292:	4770      	bx	lr

0800e294 <func_dummy>:
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop

0800e298 <ai_conv2d_stripe_f32.constprop.0>:
 800e298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e29c:	ed2d 8b0e 	vpush	{d8-d14}
 800e2a0:	b09d      	sub	sp, #116	; 0x74
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800e2a8:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e2aa:	f1b9 0f01 	cmp.w	r9, #1
 800e2ae:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800e2b2:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800e2b6:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800e2ba:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800e2be:	6579      	str	r1, [r7, #84]	; 0x54
 800e2c0:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800e2c4:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800e2c8:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800e2cc:	663b      	str	r3, [r7, #96]	; 0x60
 800e2ce:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800e2d2:	f000 812f 	beq.w	800e534 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800e2d6:	45b1      	cmp	r9, r6
 800e2d8:	f000 8278 	beq.w	800e7cc <ai_conv2d_stripe_f32.constprop.0+0x534>
 800e2dc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e2e0:	2900      	cmp	r1, #0
 800e2e2:	f000 8114 	beq.w	800e50e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e2e6:	eba0 0803 	sub.w	r8, r0, r3
 800e2ea:	1898      	adds	r0, r3, r2
 800e2ec:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e530 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800e2f0:	3801      	subs	r0, #1
 800e2f2:	fb93 f1f2 	sdiv	r1, r3, r2
 800e2f6:	fb90 f0f2 	sdiv	r0, r0, r2
 800e2fa:	fb02 3111 	mls	r1, r2, r1, r3
 800e2fe:	eba2 0a01 	sub.w	sl, r2, r1
 800e302:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800e306:	fb01 f100 	mul.w	r1, r1, r0
 800e30a:	fb9a f0f2 	sdiv	r0, sl, r2
 800e30e:	fb02 a010 	mls	r0, r2, r0, sl
 800e312:	62b9      	str	r1, [r7, #40]	; 0x28
 800e314:	4403      	add	r3, r0
 800e316:	eba8 0100 	sub.w	r1, r8, r0
 800e31a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e31e:	4463      	add	r3, ip
 800e320:	4411      	add	r1, r2
 800e322:	fb00 f303 	mul.w	r3, r0, r3
 800e326:	3901      	subs	r1, #1
 800e328:	fbb6 f4f9 	udiv	r4, r6, r9
 800e32c:	623b      	str	r3, [r7, #32]
 800e32e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800e332:	fb00 f302 	mul.w	r3, r0, r2
 800e336:	f8c7 a014 	str.w	sl, [r7, #20]
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e33c:	fb0e f306 	mul.w	r3, lr, r6
 800e340:	1b1b      	subs	r3, r3, r4
 800e342:	fb91 fbf2 	sdiv	fp, r1, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	eba5 020b 	sub.w	r2, r5, fp
 800e34c:	00b1      	lsls	r1, r6, #2
 800e34e:	46dc      	mov	ip, fp
 800e350:	64bb      	str	r3, [r7, #72]	; 0x48
 800e352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e356:	61f9      	str	r1, [r7, #28]
 800e358:	fb04 f303 	mul.w	r3, r4, r3
 800e35c:	fb02 f303 	mul.w	r3, r2, r3
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
 800e364:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e368:	fbb3 f3f9 	udiv	r3, r3, r9
 800e36c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e36e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	633b      	str	r3, [r7, #48]	; 0x30
 800e376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e37a:	f1c3 0800 	rsb	r8, r3, #0
 800e37e:	ebae 0303 	sub.w	r3, lr, r3
 800e382:	65bb      	str	r3, [r7, #88]	; 0x58
 800e384:	2300      	movs	r3, #0
 800e386:	653b      	str	r3, [r7, #80]	; 0x50
 800e388:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f2c0 80c4 	blt.w	800e51a <ai_conv2d_stripe_f32.constprop.0+0x282>
 800e392:	2000      	movs	r0, #0
 800e394:	4673      	mov	r3, lr
 800e396:	4672      	mov	r2, lr
 800e398:	4601      	mov	r1, r0
 800e39a:	3b01      	subs	r3, #1
 800e39c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e39e:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800e3a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3a6:	fb93 f3fe 	sdiv	r3, r3, lr
 800e3aa:	4423      	add	r3, r4
 800e3ac:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800e3ae:	fb0a 4303 	mla	r3, sl, r3, r4
 800e3b2:	fb92 f4fe 	sdiv	r4, r2, lr
 800e3b6:	fb0e 2214 	mls	r2, lr, r4, r2
 800e3ba:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800e3be:	4444      	add	r4, r8
 800e3c0:	42ac      	cmp	r4, r5
 800e3c2:	bf94      	ite	ls
 800e3c4:	ebc1 0104 	rsbls	r1, r1, r4
 800e3c8:	ebc1 0105 	rsbhi	r1, r1, r5
 800e3cc:	6a3c      	ldr	r4, [r7, #32]
 800e3ce:	1a89      	subs	r1, r1, r2
 800e3d0:	4471      	add	r1, lr
 800e3d2:	3901      	subs	r1, #1
 800e3d4:	fb91 f6fe 	sdiv	r6, r1, lr
 800e3d8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e3dc:	4421      	add	r1, r4
 800e3de:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800e3e0:	4401      	add	r1, r0
 800e3e2:	69f8      	ldr	r0, [r7, #28]
 800e3e4:	4411      	add	r1, r2
 800e3e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3e8:	fb00 2201 	mla	r2, r0, r1, r2
 800e3ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e3ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e3f0:	460a      	mov	r2, r1
 800e3f2:	2900      	cmp	r1, #0
 800e3f4:	bf08      	it	eq
 800e3f6:	4622      	moveq	r2, r4
 800e3f8:	42a2      	cmp	r2, r4
 800e3fa:	637a      	str	r2, [r7, #52]	; 0x34
 800e3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3fe:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800e402:	fb0e 2116 	mls	r1, lr, r6, r2
 800e406:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e40a:	1b92      	subs	r2, r2, r6
 800e40c:	f1b9 0f00 	cmp.w	r9, #0
 800e410:	d066      	beq.n	800e4e0 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800e412:	fb0a f202 	mul.w	r2, sl, r2
 800e416:	fb00 f101 	mul.w	r1, r0, r1
 800e41a:	643a      	str	r2, [r7, #64]	; 0x40
 800e41c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e420:	6479      	str	r1, [r7, #68]	; 0x44
 800e422:	4591      	cmp	r9, r2
 800e424:	d85c      	bhi.n	800e4e0 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800e426:	2500      	movs	r5, #0
 800e428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e42a:	46ab      	mov	fp, r5
 800e42c:	3a01      	subs	r2, #1
 800e42e:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800e432:	61ba      	str	r2, [r7, #24]
 800e434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e436:	f04f 0800 	mov.w	r8, #0
 800e43a:	f8c7 b008 	str.w	fp, [r7, #8]
 800e43e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e442:	63ba      	str	r2, [r7, #56]	; 0x38
 800e444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e446:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e44a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e44e:	f1bc 0f00 	cmp.w	ip, #0
 800e452:	ecf2 7a01 	vldmia	r2!, {s15}
 800e456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e45a:	63ba      	str	r2, [r7, #56]	; 0x38
 800e45c:	dd21      	ble.n	800e4a2 <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800e45e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e460:	2100      	movs	r1, #0
 800e462:	2e00      	cmp	r6, #0
 800e464:	dd16      	ble.n	800e494 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800e466:	2000      	movs	r0, #0
 800e468:	eb02 040a 	add.w	r4, r2, sl
 800e46c:	4294      	cmp	r4, r2
 800e46e:	d90c      	bls.n	800e48a <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800e470:	4696      	mov	lr, r2
 800e472:	469b      	mov	fp, r3
 800e474:	ecbe 6a01 	vldmia	lr!, {s12}
 800e478:	ecfb 5a01 	vldmia	fp!, {s11}
 800e47c:	4574      	cmp	r4, lr
 800e47e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e482:	d8f7      	bhi.n	800e474 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800e484:	697c      	ldr	r4, [r7, #20]
 800e486:	4423      	add	r3, r4
 800e488:	4422      	add	r2, r4
 800e48a:	3001      	adds	r0, #1
 800e48c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800e48e:	4286      	cmp	r6, r0
 800e490:	4422      	add	r2, r4
 800e492:	d1e9      	bne.n	800e468 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800e494:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e496:	3101      	adds	r1, #1
 800e498:	4402      	add	r2, r0
 800e49a:	458c      	cmp	ip, r1
 800e49c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e49e:	4403      	add	r3, r0
 800e4a0:	d1df      	bne.n	800e462 <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800e4a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4a4:	f108 0801 	add.w	r8, r8, #1
 800e4a8:	ece2 7a01 	vstmia	r2!, {s15}
 800e4ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b0:	4413      	add	r3, r2
 800e4b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4b4:	4542      	cmp	r2, r8
 800e4b6:	d8c9      	bhi.n	800e44c <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800e4b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4ba:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800e4be:	4452      	add	r2, sl
 800e4c0:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800e4c4:	f10b 0b01 	add.w	fp, fp, #1
 800e4c8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e4ca:	69ba      	ldr	r2, [r7, #24]
 800e4cc:	4589      	cmp	r9, r1
 800e4ce:	bf88      	it	hi
 800e4d0:	2200      	movhi	r2, #0
 800e4d2:	45d9      	cmp	r9, fp
 800e4d4:	f102 0201 	add.w	r2, r2, #1
 800e4d8:	4415      	add	r5, r2
 800e4da:	d1ab      	bne.n	800e434 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800e4dc:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800e4e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e4e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e6:	440a      	add	r2, r1
 800e4e8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e4f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e4f2:	653b      	str	r3, [r7, #80]	; 0x50
 800e4f4:	4411      	add	r1, r2
 800e4f6:	eba8 0802 	sub.w	r8, r8, r2
 800e4fa:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800e4fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e500:	1a8a      	subs	r2, r1, r2
 800e502:	65ba      	str	r2, [r7, #88]	; 0x58
 800e504:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e508:	429a      	cmp	r2, r3
 800e50a:	f47f af3d 	bne.w	800e388 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800e50e:	3774      	adds	r7, #116	; 0x74
 800e510:	46bd      	mov	sp, r7
 800e512:	ecbd 8b0e 	vpop	{d8-d14}
 800e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e51a:	fb98 f2fe 	sdiv	r2, r8, lr
 800e51e:	fb0e 8212 	mls	r2, lr, r2, r8
 800e522:	4641      	mov	r1, r8
 800e524:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e526:	4640      	mov	r0, r8
 800e528:	ebae 0202 	sub.w	r2, lr, r2
 800e52c:	e735      	b.n	800e39a <ai_conv2d_stripe_f32.constprop.0+0x102>
 800e52e:	bf00      	nop
 800e530:	00000000 	.word	0x00000000
 800e534:	fb0e f102 	mul.w	r1, lr, r2
 800e538:	2901      	cmp	r1, #1
 800e53a:	f47f aecf 	bne.w	800e2dc <ai_conv2d_stripe_f32.constprop.0+0x44>
 800e53e:	1ac2      	subs	r2, r0, r3
 800e540:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800e544:	00b0      	lsls	r0, r6, #2
 800e546:	eb0c 0103 	add.w	r1, ip, r3
 800e54a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e54c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e54e:	63b8      	str	r0, [r7, #56]	; 0x38
 800e550:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800e554:	fb00 f004 	mul.w	r0, r0, r4
 800e558:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800e55a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e55e:	fb00 4101 	mla	r1, r0, r1, r4
 800e562:	65b9      	str	r1, [r7, #88]	; 0x58
 800e564:	f080 8263 	bcs.w	800ea2e <ai_conv2d_stripe_f32.constprop.0+0x796>
 800e568:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	d0ce      	beq.n	800e50e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e570:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e574:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800e578:	fb05 f202 	mul.w	r2, r5, r2
 800e57c:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800e530 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800e580:	fb00 f303 	mul.w	r3, r0, r3
 800e584:	64bb      	str	r3, [r7, #72]	; 0x48
 800e586:	fb06 f302 	mul.w	r3, r6, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	643b      	str	r3, [r7, #64]	; 0x40
 800e58e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e590:	fb03 f306 	mul.w	r3, r3, r6
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	627b      	str	r3, [r7, #36]	; 0x24
 800e598:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e59c:	fb03 f306 	mul.w	r3, r3, r6
 800e5a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	653b      	str	r3, [r7, #80]	; 0x50
 800e5b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 8104 	beq.w	800e7c6 <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800e5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c0:	ecf3 6a01 	vldmia	r3!, {s13}
 800e5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 80e8 	beq.w	800e7a0 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800e5d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5d4:	f04f 0b00 	mov.w	fp, #0
 800e5d8:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800e5dc:	425d      	negs	r5, r3
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	657b      	str	r3, [r7, #84]	; 0x54
 800e5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5e4:	647b      	str	r3, [r7, #68]	; 0x44
 800e5e6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ea:	f2c0 8219 	blt.w	800ea20 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800e5ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5f4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800e5f6:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800e5f8:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800e5fc:	fb02 0c06 	mla	ip, r2, r6, r0
 800e600:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e604:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e608:	4428      	add	r0, r5
 800e60a:	42a0      	cmp	r0, r4
 800e60c:	bf94      	ite	ls
 800e60e:	ebc3 0300 	rsbls	r3, r3, r0
 800e612:	ebc3 0304 	rsbhi	r3, r3, r4
 800e616:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e61a:	1ac4      	subs	r4, r0, r3
 800e61c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800e620:	1ac0      	subs	r0, r0, r3
 800e622:	fb02 f303 	mul.w	r3, r2, r3
 800e626:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e628:	2a00      	cmp	r2, #0
 800e62a:	f340 81f6 	ble.w	800ea1a <ai_conv2d_stripe_f32.constprop.0+0x782>
 800e62e:	fb06 f204 	mul.w	r2, r6, r4
 800e632:	f023 040f 	bic.w	r4, r3, #15
 800e636:	eeb0 7a66 	vmov.f32	s14, s13
 800e63a:	637a      	str	r2, [r7, #52]	; 0x34
 800e63c:	fb06 f200 	mul.w	r2, r6, r0
 800e640:	1e60      	subs	r0, r4, #1
 800e642:	2600      	movs	r6, #0
 800e644:	0900      	lsrs	r0, r0, #4
 800e646:	633a      	str	r2, [r7, #48]	; 0x30
 800e648:	3001      	adds	r0, #1
 800e64a:	0102      	lsls	r2, r0, #4
 800e64c:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e650:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e652:	4662      	mov	r2, ip
 800e654:	2c00      	cmp	r4, #0
 800e656:	f340 81e8 	ble.w	800ea2a <ai_conv2d_stripe_f32.constprop.0+0x792>
 800e65a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e65e:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800e662:	f04f 0800 	mov.w	r8, #0
 800e666:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800e66a:	f108 0810 	add.w	r8, r8, #16
 800e66e:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e672:	3040      	adds	r0, #64	; 0x40
 800e674:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800e678:	45a0      	cmp	r8, r4
 800e67a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e67e:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800e682:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800e686:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e68a:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800e68e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e692:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800e696:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800e69a:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800e69e:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800e6a2:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800e6a6:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800e6aa:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e6ae:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800e6b2:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800e6b6:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800e6ba:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800e6be:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800e6c2:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800e6c6:	eeee 7a25 	vfma.f32	s15, s28, s11
 800e6ca:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800e6ce:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800e6d2:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800e6d6:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800e6da:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800e6de:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800e6e2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800e6e6:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800e6ea:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800e6ee:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800e6f2:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800e6f6:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800e6fa:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800e6fe:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e702:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800e706:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800e70a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e70e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e712:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e716:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e71a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e71e:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e722:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e726:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e72a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e72e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e732:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e736:	db96      	blt.n	800e666 <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800e738:	4471      	add	r1, lr
 800e73a:	4472      	add	r2, lr
 800e73c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e73e:	4283      	cmp	r3, r0
 800e740:	dd11      	ble.n	800e766 <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800e742:	4684      	mov	ip, r0
 800e744:	468a      	mov	sl, r1
 800e746:	4690      	mov	r8, r2
 800e748:	f10c 0c01 	add.w	ip, ip, #1
 800e74c:	ecf8 5a01 	vldmia	r8!, {s11}
 800e750:	ecfa 7a01 	vldmia	sl!, {s15}
 800e754:	4563      	cmp	r3, ip
 800e756:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e75a:	d1f5      	bne.n	800e748 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800e75c:	1a18      	subs	r0, r3, r0
 800e75e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e762:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e766:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e768:	3601      	adds	r6, #1
 800e76a:	4401      	add	r1, r0
 800e76c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e76e:	4402      	add	r2, r0
 800e770:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e772:	42b0      	cmp	r0, r6
 800e774:	f47f af6e 	bne.w	800e654 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800e778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e77a:	f10b 0b01 	add.w	fp, fp, #1
 800e77e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e782:	ed83 7a00 	vstr	s14, [r3]
 800e786:	440b      	add	r3, r1
 800e788:	4491      	add	r9, r2
 800e78a:	1aad      	subs	r5, r5, r2
 800e78c:	647b      	str	r3, [r7, #68]	; 0x44
 800e78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e792:	4413      	add	r3, r2
 800e794:	657b      	str	r3, [r7, #84]	; 0x54
 800e796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e79a:	455b      	cmp	r3, fp
 800e79c:	f47f af23 	bne.w	800e5e6 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800e7a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a6:	440a      	add	r2, r1
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	66ba      	str	r2, [r7, #104]	; 0x68
 800e7ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e7ae:	653b      	str	r3, [r7, #80]	; 0x50
 800e7b0:	3204      	adds	r2, #4
 800e7b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e7b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	f43f aea8 	beq.w	800e50e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e7be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f47f aefc 	bne.w	800e5be <ai_conv2d_stripe_f32.constprop.0+0x326>
 800e7c6:	eef0 6a46 	vmov.f32	s13, s12
 800e7ca:	e6fc      	b.n	800e5c6 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800e7cc:	fb0e f102 	mul.w	r1, lr, r2
 800e7d0:	2901      	cmp	r1, #1
 800e7d2:	f47f ad83 	bne.w	800e2dc <ai_conv2d_stripe_f32.constprop.0+0x44>
 800e7d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e7da:	2a00      	cmp	r2, #0
 800e7dc:	f43f ae97 	beq.w	800e50e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e7e0:	eb0c 0203 	add.w	r2, ip, r3
 800e7e4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800e7e8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800e7ec:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800e530 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800e7f0:	fb01 f202 	mul.w	r2, r1, r2
 800e7f4:	1ac1      	subs	r1, r0, r3
 800e7f6:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e7fa:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800e7fe:	61fa      	str	r2, [r7, #28]
 800e800:	1a1a      	subs	r2, r3, r0
 800e802:	64f9      	str	r1, [r7, #76]	; 0x4c
 800e804:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800e808:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800e80c:	442a      	add	r2, r5
 800e80e:	fb03 f301 	mul.w	r3, r3, r1
 800e812:	fb01 f202 	mul.w	r2, r1, r2
 800e816:	64bb      	str	r3, [r7, #72]	; 0x48
 800e818:	0093      	lsls	r3, r2, #2
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e81c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e820:	fbb3 f3f6 	udiv	r3, r3, r6
 800e824:	61bb      	str	r3, [r7, #24]
 800e826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e82e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e832:	f1c3 0b00 	rsb	fp, r3, #0
 800e836:	00f3      	lsls	r3, r6, #3
 800e838:	623b      	str	r3, [r7, #32]
 800e83a:	2300      	movs	r3, #0
 800e83c:	653b      	str	r3, [r7, #80]	; 0x50
 800e83e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e842:	2b00      	cmp	r3, #0
 800e844:	f2c0 80e3 	blt.w	800ea0e <ai_conv2d_stripe_f32.constprop.0+0x776>
 800e848:	2500      	movs	r5, #0
 800e84a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e84c:	462b      	mov	r3, r5
 800e84e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e852:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800e856:	445a      	add	r2, fp
 800e858:	69fc      	ldr	r4, [r7, #28]
 800e85a:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800e85c:	4282      	cmp	r2, r0
 800e85e:	bf28      	it	cs
 800e860:	4602      	movcs	r2, r0
 800e862:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e866:	1ad2      	subs	r2, r2, r3
 800e868:	1904      	adds	r4, r0, r4
 800e86a:	2e00      	cmp	r6, #0
 800e86c:	f000 8228 	beq.w	800ecc0 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800e870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e872:	647e      	str	r6, [r7, #68]	; 0x44
 800e874:	429e      	cmp	r6, r3
 800e876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e878:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e87c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e880:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800e884:	1a98      	subs	r0, r3, r2
 800e886:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e88a:	fb03 f000 	mul.w	r0, r3, r0
 800e88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e892:	1a9b      	subs	r3, r3, r2
 800e894:	442c      	add	r4, r5
 800e896:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800e898:	fb08 5e04 	mla	lr, r8, r4, r5
 800e89c:	eb0e 0408 	add.w	r4, lr, r8
 800e8a0:	45a6      	cmp	lr, r4
 800e8a2:	62bc      	str	r4, [r7, #40]	; 0x28
 800e8a4:	f080 809a 	bcs.w	800e9dc <ai_conv2d_stripe_f32.constprop.0+0x744>
 800e8a8:	0080      	lsls	r0, r0, #2
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	6378      	str	r0, [r7, #52]	; 0x34
 800e8ae:	633b      	str	r3, [r7, #48]	; 0x30
 800e8b0:	f022 0303 	bic.w	r3, r2, #3
 800e8b4:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800e8b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8ba:	42a0      	cmp	r0, r4
 800e8bc:	f200 808e 	bhi.w	800e9dc <ai_conv2d_stripe_f32.constprop.0+0x744>
 800e8c0:	1e58      	subs	r0, r3, #1
 800e8c2:	f04f 0900 	mov.w	r9, #0
 800e8c6:	0880      	lsrs	r0, r0, #2
 800e8c8:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800e8cc:	1c43      	adds	r3, r0, #1
 800e8ce:	fb00 a00a 	mla	r0, r0, sl, sl
 800e8d2:	6138      	str	r0, [r7, #16]
 800e8d4:	0118      	lsls	r0, r3, #4
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	6178      	str	r0, [r7, #20]
 800e8da:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e8e2:	4499      	add	r9, r3
 800e8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e6:	181c      	adds	r4, r3, r0
 800e8e8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e8ec:	65bc      	str	r4, [r7, #88]	; 0x58
 800e8ee:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800e8f0:	627b      	str	r3, [r7, #36]	; 0x24
 800e8f2:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800e8f6:	1820      	adds	r0, r4, r0
 800e8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8fa:	6438      	str	r0, [r7, #64]	; 0x40
 800e8fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8fe:	ecb3 7a01 	vldmia	r3!, {s14}
 800e902:	65bb      	str	r3, [r7, #88]	; 0x58
 800e904:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	dd55      	ble.n	800e9ba <ai_conv2d_stripe_f32.constprop.0+0x722>
 800e90e:	4675      	mov	r5, lr
 800e910:	f04f 0b00 	mov.w	fp, #0
 800e914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e916:	2b00      	cmp	r3, #0
 800e918:	f340 81d0 	ble.w	800ecbc <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800e91c:	6a38      	ldr	r0, [r7, #32]
 800e91e:	f101 0310 	add.w	r3, r1, #16
 800e922:	2600      	movs	r6, #0
 800e924:	607a      	str	r2, [r7, #4]
 800e926:	182c      	adds	r4, r5, r0
 800e928:	4628      	mov	r0, r5
 800e92a:	eb00 0c08 	add.w	ip, r0, r8
 800e92e:	ed13 4a03 	vldr	s8, [r3, #-12]
 800e932:	ed53 4a04 	vldr	s9, [r3, #-16]
 800e936:	3604      	adds	r6, #4
 800e938:	eddc 7a00 	vldr	s15, [ip]
 800e93c:	eb04 0c08 	add.w	ip, r4, r8
 800e940:	ed90 5a00 	vldr	s10, [r0]
 800e944:	3310      	adds	r3, #16
 800e946:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e94a:	edd4 6a00 	vldr	s13, [r4]
 800e94e:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800e952:	4450      	add	r0, sl
 800e954:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800e958:	4454      	add	r4, sl
 800e95a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e95e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e960:	4296      	cmp	r6, r2
 800e962:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800e966:	eddc 6a00 	vldr	s13, [ip]
 800e96a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e96e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e972:	dbda      	blt.n	800e92a <ai_conv2d_stripe_f32.constprop.0+0x692>
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	441d      	add	r5, r3
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	68fc      	ldr	r4, [r7, #12]
 800e97e:	4419      	add	r1, r3
 800e980:	42a2      	cmp	r2, r4
 800e982:	dd11      	ble.n	800e9a8 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800e984:	4620      	mov	r0, r4
 800e986:	462b      	mov	r3, r5
 800e988:	460e      	mov	r6, r1
 800e98a:	3001      	adds	r0, #1
 800e98c:	edd3 7a00 	vldr	s15, [r3]
 800e990:	ecf6 6a01 	vldmia	r6!, {s13}
 800e994:	4443      	add	r3, r8
 800e996:	4290      	cmp	r0, r2
 800e998:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e99c:	d1f5      	bne.n	800e98a <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800e99e:	1b14      	subs	r4, r2, r4
 800e9a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9a4:	fb04 5508 	mla	r5, r4, r8, r5
 800e9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9aa:	f10b 0b01 	add.w	fp, fp, #1
 800e9ae:	441d      	add	r5, r3
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b2:	4419      	add	r1, r3
 800e9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9b6:	459b      	cmp	fp, r3
 800e9b8:	d1ac      	bne.n	800e914 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800e9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9bc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e9be:	eca3 7a01 	vstmia	r3!, {s14}
 800e9c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	4419      	add	r1, r3
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	4283      	cmp	r3, r0
 800e9cc:	d196      	bne.n	800e8fc <ai_conv2d_stripe_f32.constprop.0+0x664>
 800e9ce:	f10e 0e04 	add.w	lr, lr, #4
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	459e      	cmp	lr, r3
 800e9d6:	d382      	bcc.n	800e8de <ai_conv2d_stripe_f32.constprop.0+0x646>
 800e9d8:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800e9dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e9de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e2:	440a      	add	r2, r1
 800e9e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e9ea:	ebab 0b01 	sub.w	fp, fp, r1
 800e9ee:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800e9f2:	653b      	str	r3, [r7, #80]	; 0x50
 800e9f4:	440a      	add	r2, r1
 800e9f6:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800e9fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	f43f ad85 	beq.w	800e50e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ea04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f6bf af1d 	bge.w	800e848 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800ea0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea10:	465b      	mov	r3, fp
 800ea12:	465d      	mov	r5, fp
 800ea14:	eb02 010b 	add.w	r1, r2, fp
 800ea18:	e719      	b.n	800e84e <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800ea1a:	eeb0 7a66 	vmov.f32	s14, s13
 800ea1e:	e6ab      	b.n	800e778 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800ea20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea22:	462b      	mov	r3, r5
 800ea24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea26:	442a      	add	r2, r5
 800ea28:	e5e4      	b.n	800e5f4 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	e687      	b.n	800e73e <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800ea2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea32:	4669      	mov	r1, sp
 800ea34:	fb05 f202 	mul.w	r2, r5, r2
 800ea38:	ee0e 1a90 	vmov	s29, r1
 800ea3c:	fb06 f202 	mul.w	r2, r6, r2
 800ea40:	0095      	lsls	r5, r2, #2
 800ea42:	637a      	str	r2, [r7, #52]	; 0x34
 800ea44:	1dea      	adds	r2, r5, #7
 800ea46:	f022 0207 	bic.w	r2, r2, #7
 800ea4a:	ebad 0d02 	sub.w	sp, sp, r2
 800ea4e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ea52:	46e9      	mov	r9, sp
 800ea54:	2a00      	cmp	r2, #0
 800ea56:	f000 812d 	beq.w	800ecb4 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800ea5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea5e:	46ca      	mov	sl, r9
 800ea60:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800ed00 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800ea64:	46a9      	mov	r9, r5
 800ea66:	fb02 f303 	mul.w	r3, r2, r3
 800ea6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea6c:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800ea70:	647b      	str	r3, [r7, #68]	; 0x44
 800ea72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea74:	fb03 f306 	mul.w	r3, r3, r6
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	623b      	str	r3, [r7, #32]
 800ea7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea80:	fb03 f306 	mul.w	r3, r3, r6
 800ea84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
 800ea8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ea94:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea96:	2300      	movs	r3, #0
 800ea98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea9c:	b123      	cbz	r3, 800eaa8 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800ea9e:	464a      	mov	r2, r9
 800eaa0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eaa2:	4650      	mov	r0, sl
 800eaa4:	f002 fdac 	bl	8011600 <memcpy>
 800eaa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f000 811c 	beq.w	800ece8 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800eab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eab2:	ecf3 6a01 	vldmia	r3!, {s13}
 800eab6:	64bb      	str	r3, [r7, #72]	; 0x48
 800eab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 80eb 	beq.w	800ec98 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800eac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eac6:	f8c7 901c 	str.w	r9, [r7, #28]
 800eaca:	425d      	negs	r5, r3
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eace:	653b      	str	r3, [r7, #80]	; 0x50
 800ead0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ead2:	643b      	str	r3, [r7, #64]	; 0x40
 800ead4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ead8:	657b      	str	r3, [r7, #84]	; 0x54
 800eada:	2300      	movs	r3, #0
 800eadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f2c0 8107 	blt.w	800ecf4 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800eae6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eae8:	2300      	movs	r3, #0
 800eaea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eaec:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800eaf0:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800eaf4:	4428      	add	r0, r5
 800eaf6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800eaf8:	42b0      	cmp	r0, r6
 800eafa:	bf94      	ite	ls
 800eafc:	ebc3 0300 	rsbls	r3, r3, r0
 800eb00:	ebc3 0306 	rsbhi	r3, r3, r6
 800eb04:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800eb08:	fb02 a204 	mla	r2, r2, r4, sl
 800eb0c:	eba0 0c03 	sub.w	ip, r0, r3
 800eb10:	1af0      	subs	r0, r6, r3
 800eb12:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800eb16:	fb06 f303 	mul.w	r3, r6, r3
 800eb1a:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800eb1c:	2e00      	cmp	r6, #0
 800eb1e:	f340 80e6 	ble.w	800ecee <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800eb22:	fb04 f000 	mul.w	r0, r4, r0
 800eb26:	eeb0 7a66 	vmov.f32	s14, s13
 800eb2a:	fb04 fc0c 	mul.w	ip, r4, ip
 800eb2e:	f023 040f 	bic.w	r4, r3, #15
 800eb32:	6338      	str	r0, [r7, #48]	; 0x30
 800eb34:	2600      	movs	r6, #0
 800eb36:	1e60      	subs	r0, r4, #1
 800eb38:	0900      	lsrs	r0, r0, #4
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800eb40:	0100      	lsls	r0, r0, #4
 800eb42:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb44:	2c00      	cmp	r4, #0
 800eb46:	f340 80cd 	ble.w	800ece4 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800eb4a:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800eb4e:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800eb52:	f04f 0900 	mov.w	r9, #0
 800eb56:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800eb5a:	f109 0910 	add.w	r9, r9, #16
 800eb5e:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800eb62:	3040      	adds	r0, #64	; 0x40
 800eb64:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800eb68:	45a1      	cmp	r9, r4
 800eb6a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800eb6e:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800eb72:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800eb76:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800eb7a:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800eb7e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800eb82:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800eb86:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800eb8a:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800eb8e:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800eb92:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800eb96:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800eb9a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800eb9e:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800eba2:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800eba6:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800ebaa:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800ebae:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800ebb2:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800ebb6:	eeee 7a06 	vfma.f32	s15, s28, s12
 800ebba:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800ebbe:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800ebc2:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800ebc6:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800ebca:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800ebce:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800ebd2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ebd6:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800ebda:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800ebde:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800ebe2:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800ebe6:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800ebea:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800ebee:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ebf2:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800ebf6:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800ebfa:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ebfe:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ec02:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ec06:	eee8 7a80 	vfma.f32	s15, s17, s0
 800ec0a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ec0e:	eee1 7a82 	vfma.f32	s15, s3, s4
 800ec12:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ec16:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ec1a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ec1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ec22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec26:	db96      	blt.n	800eb56 <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800ec28:	4441      	add	r1, r8
 800ec2a:	4442      	add	r2, r8
 800ec2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec2e:	4283      	cmp	r3, r0
 800ec30:	dd11      	ble.n	800ec56 <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800ec32:	4686      	mov	lr, r0
 800ec34:	468b      	mov	fp, r1
 800ec36:	4691      	mov	r9, r2
 800ec38:	f10e 0e01 	add.w	lr, lr, #1
 800ec3c:	ecb9 6a01 	vldmia	r9!, {s12}
 800ec40:	ecfb 7a01 	vldmia	fp!, {s15}
 800ec44:	4573      	cmp	r3, lr
 800ec46:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ec4a:	d1f5      	bne.n	800ec38 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800ec4c:	1a18      	subs	r0, r3, r0
 800ec4e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ec52:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ec56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec58:	3601      	adds	r6, #1
 800ec5a:	4461      	add	r1, ip
 800ec5c:	4402      	add	r2, r0
 800ec5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ec60:	42b0      	cmp	r0, r6
 800ec62:	f47f af6f 	bne.w	800eb44 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800ec66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec68:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ec6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec6c:	4401      	add	r1, r0
 800ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec70:	ed82 7a00 	vstr	s14, [r2]
 800ec74:	1a2d      	subs	r5, r5, r0
 800ec76:	6579      	str	r1, [r7, #84]	; 0x54
 800ec78:	3301      	adds	r3, #1
 800ec7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec7e:	440a      	add	r2, r1
 800ec80:	6a39      	ldr	r1, [r7, #32]
 800ec82:	643a      	str	r2, [r7, #64]	; 0x40
 800ec84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ec86:	440a      	add	r2, r1
 800ec88:	653a      	str	r2, [r7, #80]	; 0x50
 800ec8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	f47f af25 	bne.w	800eade <ai_conv2d_stripe_f32.constprop.0+0x846>
 800ec94:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800ec98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec9c:	444a      	add	r2, r9
 800ec9e:	3301      	adds	r3, #1
 800eca0:	66ba      	str	r2, [r7, #104]	; 0x68
 800eca2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eca6:	3204      	adds	r2, #4
 800eca8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ecaa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	f47f aef3 	bne.w	800ea9a <ai_conv2d_stripe_f32.constprop.0+0x802>
 800ecb4:	ee1e 3a90 	vmov	r3, s29
 800ecb8:	469d      	mov	sp, r3
 800ecba:	e428      	b.n	800e50e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ecbc:	2400      	movs	r4, #0
 800ecbe:	e65f      	b.n	800e980 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800ecc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecc2:	eeb0 3a63 	vmov.f32	s6, s7
 800ecc6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ecca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eccc:	647b      	str	r3, [r7, #68]	; 0x44
 800ecce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecd2:	1a98      	subs	r0, r3, r2
 800ecd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ecd8:	fb03 f000 	mul.w	r0, r3, r0
 800ecdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ece0:	1a9b      	subs	r3, r3, r2
 800ece2:	e5d7      	b.n	800e894 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800ece4:	2000      	movs	r0, #0
 800ece6:	e7a2      	b.n	800ec2e <ai_conv2d_stripe_f32.constprop.0+0x996>
 800ece8:	eef0 6a48 	vmov.f32	s13, s16
 800ecec:	e6e4      	b.n	800eab8 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800ecee:	eeb0 7a66 	vmov.f32	s14, s13
 800ecf2:	e7b8      	b.n	800ec66 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800ecf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecf6:	462b      	mov	r3, r5
 800ecf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ecfa:	442a      	add	r2, r5
 800ecfc:	e6f6      	b.n	800eaec <ai_conv2d_stripe_f32.constprop.0+0x854>
 800ecfe:	bf00      	nop
 800ed00:	00000000 	.word	0x00000000

0800ed04 <ai_dict_decompress_f32>:
 800ed04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed08:	9d08      	ldr	r5, [sp, #32]
 800ed0a:	2b04      	cmp	r3, #4
 800ed0c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ed10:	d00e      	beq.n	800ed30 <ai_dict_decompress_f32+0x2c>
 800ed12:	2b08      	cmp	r3, #8
 800ed14:	d10a      	bne.n	800ed2c <ai_dict_decompress_f32+0x28>
 800ed16:	42a8      	cmp	r0, r5
 800ed18:	d208      	bcs.n	800ed2c <ai_dict_decompress_f32+0x28>
 800ed1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f840 3b04 	str.w	r3, [r0], #4
 800ed28:	4285      	cmp	r5, r0
 800ed2a:	d8f6      	bhi.n	800ed1a <ai_dict_decompress_f32+0x16>
 800ed2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed30:	9b07      	ldr	r3, [sp, #28]
 800ed32:	085e      	lsrs	r6, r3, #1
 800ed34:	f003 0701 	and.w	r7, r3, #1
 800ed38:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800ed3c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ed40:	42a8      	cmp	r0, r5
 800ed42:	d2f3      	bcs.n	800ed2c <ai_dict_decompress_f32+0x28>
 800ed44:	b33e      	cbz	r6, 800ed96 <ai_dict_decompress_f32+0x92>
 800ed46:	f100 0e08 	add.w	lr, r0, #8
 800ed4a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800ed4e:	eb01 0408 	add.w	r4, r1, r8
 800ed52:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ed56:	f10e 0e08 	add.w	lr, lr, #8
 800ed5a:	091b      	lsrs	r3, r3, #4
 800ed5c:	4564      	cmp	r4, ip
 800ed5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f84e 3c10 	str.w	r3, [lr, #-16]
 800ed68:	f89c 3000 	ldrb.w	r3, [ip]
 800ed6c:	f003 030f 	and.w	r3, r3, #15
 800ed70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800ed7a:	d1ea      	bne.n	800ed52 <ai_dict_decompress_f32+0x4e>
 800ed7c:	4431      	add	r1, r6
 800ed7e:	4448      	add	r0, r9
 800ed80:	2f00      	cmp	r7, #0
 800ed82:	d0dd      	beq.n	800ed40 <ai_dict_decompress_f32+0x3c>
 800ed84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed88:	091b      	lsrs	r3, r3, #4
 800ed8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f840 3b04 	str.w	r3, [r0], #4
 800ed94:	e7d4      	b.n	800ed40 <ai_dict_decompress_f32+0x3c>
 800ed96:	2f00      	cmp	r7, #0
 800ed98:	d1f4      	bne.n	800ed84 <ai_dict_decompress_f32+0x80>
 800ed9a:	42a8      	cmp	r0, r5
 800ed9c:	d3fd      	bcc.n	800ed9a <ai_dict_decompress_f32+0x96>
 800ed9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda2:	bf00      	nop

0800eda4 <forward_conv2d>:
 800eda4:	6982      	ldr	r2, [r0, #24]
 800eda6:	8813      	ldrh	r3, [r2, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f000 810f 	beq.w	800efcc <forward_conv2d+0x228>
 800edae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb2:	ed2d 8b04 	vpush	{d8-d9}
 800edb6:	6852      	ldr	r2, [r2, #4]
 800edb8:	b0a9      	sub	sp, #164	; 0xa4
 800edba:	4604      	mov	r4, r0
 800edbc:	6851      	ldr	r1, [r2, #4]
 800edbe:	b101      	cbz	r1, 800edc2 <forward_conv2d+0x1e>
 800edc0:	6809      	ldr	r1, [r1, #0]
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	f000 8152 	beq.w	800f06c <forward_conv2d+0x2c8>
 800edc8:	6915      	ldr	r5, [r2, #16]
 800edca:	b105      	cbz	r5, 800edce <forward_conv2d+0x2a>
 800edcc:	682d      	ldr	r5, [r5, #0]
 800edce:	2b02      	cmp	r3, #2
 800edd0:	f000 80fe 	beq.w	800efd0 <forward_conv2d+0x22c>
 800edd4:	69d3      	ldr	r3, [r2, #28]
 800edd6:	8b12      	ldrh	r2, [r2, #24]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 8138 	beq.w	800f04e <forward_conv2d+0x2aa>
 800edde:	2a01      	cmp	r2, #1
 800ede0:	681e      	ldr	r6, [r3, #0]
 800ede2:	f240 813a 	bls.w	800f05a <forward_conv2d+0x2b6>
 800ede6:	685a      	ldr	r2, [r3, #4]
 800ede8:	ee08 2a10 	vmov	s16, r2
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	68ca      	ldr	r2, [r1, #12]
 800edf0:	6989      	ldr	r1, [r1, #24]
 800edf2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800edf6:	6889      	ldr	r1, [r1, #8]
 800edf8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800edfa:	ee09 1a10 	vmov	s18, r1
 800edfe:	6851      	ldr	r1, [r2, #4]
 800ee00:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800ee04:	911b      	str	r1, [sp, #108]	; 0x6c
 800ee06:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ee0a:	69b7      	ldr	r7, [r6, #24]
 800ee0c:	9118      	str	r1, [sp, #96]	; 0x60
 800ee0e:	68d1      	ldr	r1, [r2, #12]
 800ee10:	6892      	ldr	r2, [r2, #8]
 800ee12:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800ee16:	9223      	str	r2, [sp, #140]	; 0x8c
 800ee18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ee1a:	f8dc a008 	ldr.w	sl, [ip, #8]
 800ee1e:	9224      	str	r2, [sp, #144]	; 0x90
 800ee20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee22:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800ee26:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee28:	6802      	ldr	r2, [r0, #0]
 800ee2a:	9122      	str	r1, [sp, #136]	; 0x88
 800ee2c:	9211      	str	r2, [sp, #68]	; 0x44
 800ee2e:	6842      	ldr	r2, [r0, #4]
 800ee30:	921e      	str	r2, [sp, #120]	; 0x78
 800ee32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ee34:	9210      	str	r2, [sp, #64]	; 0x40
 800ee36:	f8de 2008 	ldr.w	r2, [lr, #8]
 800ee3a:	9219      	str	r2, [sp, #100]	; 0x64
 800ee3c:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ee40:	921a      	str	r2, [sp, #104]	; 0x68
 800ee42:	69e2      	ldr	r2, [r4, #28]
 800ee44:	9225      	str	r2, [sp, #148]	; 0x94
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	ee08 2a90 	vmov	s17, r2
 800ee4c:	ee18 2a10 	vmov	r2, s16
 800ee50:	b11a      	cbz	r2, 800ee5a <forward_conv2d+0xb6>
 800ee52:	6992      	ldr	r2, [r2, #24]
 800ee54:	6892      	ldr	r2, [r2, #8]
 800ee56:	ee08 2a10 	vmov	s16, r2
 800ee5a:	69aa      	ldr	r2, [r5, #24]
 800ee5c:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800ee60:	6892      	ldr	r2, [r2, #8]
 800ee62:	9216      	str	r2, [sp, #88]	; 0x58
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 80df 	beq.w	800f028 <forward_conv2d+0x284>
 800ee6a:	699a      	ldr	r2, [r3, #24]
 800ee6c:	2a00      	cmp	r2, #0
 800ee6e:	f000 80e4 	beq.w	800f03a <forward_conv2d+0x296>
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ee7e:	9327      	str	r3, [sp, #156]	; 0x9c
 800ee80:	f001 fab4 	bl	80103ec <ai_array_get_byte_size>
 800ee84:	69b7      	ldr	r7, [r6, #24]
 800ee86:	9013      	str	r0, [sp, #76]	; 0x4c
 800ee88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee8a:	9312      	str	r3, [sp, #72]	; 0x48
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 80c8 	beq.w	800f022 <forward_conv2d+0x27e>
 800ee92:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ee94:	fa1f f28b 	uxth.w	r2, fp
 800ee98:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ee9c:	1e71      	subs	r1, r6, #1
 800ee9e:	3a01      	subs	r2, #1
 800eea0:	3b01      	subs	r3, #1
 800eea2:	6838      	ldr	r0, [r7, #0]
 800eea4:	fb01 6202 	mla	r2, r1, r2, r6
 800eea8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eeaa:	921c      	str	r2, [sp, #112]	; 0x70
 800eeac:	1e4a      	subs	r2, r1, #1
 800eeae:	fb02 1303 	mla	r3, r2, r3, r1
 800eeb2:	931d      	str	r3, [sp, #116]	; 0x74
 800eeb4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800eeb8:	2b04      	cmp	r3, #4
 800eeba:	f000 808c 	beq.w	800efd6 <forward_conv2d+0x232>
 800eebe:	2b08      	cmp	r3, #8
 800eec0:	f000 8089 	beq.w	800efd6 <forward_conv2d+0x232>
 800eec4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800eec8:	9315      	str	r3, [sp, #84]	; 0x54
 800eeca:	425b      	negs	r3, r3
 800eecc:	9314      	str	r3, [sp, #80]	; 0x50
 800eece:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d076      	beq.n	800efc2 <forward_conv2d+0x21e>
 800eed4:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800eed8:	4644      	mov	r4, r8
 800eeda:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800eede:	425b      	negs	r3, r3
 800eee0:	921e      	str	r2, [sp, #120]	; 0x78
 800eee2:	fa0f f28b 	sxth.w	r2, fp
 800eee6:	9321      	str	r3, [sp, #132]	; 0x84
 800eee8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800eeec:	2300      	movs	r3, #0
 800eeee:	921f      	str	r2, [sp, #124]	; 0x7c
 800eef0:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800eef4:	9317      	str	r3, [sp, #92]	; 0x5c
 800eef6:	fb0a f30b 	mul.w	r3, sl, fp
 800eefa:	9220      	str	r2, [sp, #128]	; 0x80
 800eefc:	9326      	str	r3, [sp, #152]	; 0x98
 800eefe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ef00:	ee19 1a10 	vmov	r1, s18
 800ef04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef06:	920e      	str	r2, [sp, #56]	; 0x38
 800ef08:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ef0e:	920d      	str	r2, [sp, #52]	; 0x34
 800ef10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ef12:	4638      	mov	r0, r7
 800ef14:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ef18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ef1e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ef20:	9307      	str	r3, [sp, #28]
 800ef22:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ef24:	9306      	str	r3, [sp, #24]
 800ef26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef28:	9305      	str	r3, [sp, #20]
 800ef2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ef2c:	e9cd a303 	strd	sl, r3, [sp, #12]
 800ef30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ef36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef3c:	4413      	add	r3, r2
 800ef3e:	bfa8      	it	ge
 800ef40:	2200      	movge	r2, #0
 800ef42:	9208      	str	r2, [sp, #32]
 800ef44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ef46:	4293      	cmp	r3, r2
 800ef48:	bf28      	it	cs
 800ef4a:	4613      	movcs	r3, r2
 800ef4c:	ee18 2a90 	vmov	r2, s17
 800ef50:	9309      	str	r3, [sp, #36]	; 0x24
 800ef52:	ee18 3a10 	vmov	r3, s16
 800ef56:	f7ff f99f 	bl	800e298 <ai_conv2d_stripe_f32.constprop.0>
 800ef5a:	f1ba 0f00 	cmp.w	sl, #0
 800ef5e:	d020      	beq.n	800efa2 <forward_conv2d+0x1fe>
 800ef60:	2600      	movs	r6, #0
 800ef62:	464a      	mov	r2, r9
 800ef64:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800ef68:	9610      	str	r6, [sp, #64]	; 0x40
 800ef6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef6c:	4629      	mov	r1, r5
 800ef6e:	4628      	mov	r0, r5
 800ef70:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ef72:	3301      	adds	r3, #1
 800ef74:	9211      	str	r2, [sp, #68]	; 0x44
 800ef76:	9310      	str	r3, [sp, #64]	; 0x40
 800ef78:	69ab      	ldr	r3, [r5, #24]
 800ef7a:	609f      	str	r7, [r3, #8]
 800ef7c:	4623      	mov	r3, r4
 800ef7e:	444c      	add	r4, r9
 800ef80:	47b0      	blx	r6
 800ef82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ef84:	445f      	add	r7, fp
 800ef86:	eba4 0308 	sub.w	r3, r4, r8
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	bfa8      	it	ge
 800ef8e:	4644      	movge	r4, r8
 800ef90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef92:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef94:	459a      	cmp	sl, r3
 800ef96:	d1e8      	bne.n	800ef6a <forward_conv2d+0x1c6>
 800ef98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ef9a:	4691      	mov	r9, r2
 800ef9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ef9e:	4413      	add	r3, r2
 800efa0:	9316      	str	r3, [sp, #88]	; 0x58
 800efa2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800efa4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efa6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800efa8:	4413      	add	r3, r2
 800efaa:	3101      	adds	r1, #1
 800efac:	9314      	str	r3, [sp, #80]	; 0x50
 800efae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efb0:	9117      	str	r1, [sp, #92]	; 0x5c
 800efb2:	1a9b      	subs	r3, r3, r2
 800efb4:	9315      	str	r3, [sp, #84]	; 0x54
 800efb6:	69ab      	ldr	r3, [r5, #24]
 800efb8:	68da      	ldr	r2, [r3, #12]
 800efba:	609a      	str	r2, [r3, #8]
 800efbc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efbe:	428b      	cmp	r3, r1
 800efc0:	d19d      	bne.n	800eefe <forward_conv2d+0x15a>
 800efc2:	b029      	add	sp, #164	; 0xa4
 800efc4:	ecbd 8b04 	vpop	{d8-d9}
 800efc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	deff      	udf	#255	; 0xff
 800efd0:	2300      	movs	r3, #0
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	deff      	udf	#255	; 0xff
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	2a00      	cmp	r2, #0
 800efda:	f43f af73 	beq.w	800eec4 <forward_conv2d+0x120>
 800efde:	69a3      	ldr	r3, [r4, #24]
 800efe0:	8819      	ldrh	r1, [r3, #0]
 800efe2:	2903      	cmp	r1, #3
 800efe4:	d945      	bls.n	800f072 <forward_conv2d+0x2ce>
 800efe6:	685b      	ldr	r3, [r3, #4]
 800efe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efea:	2b00      	cmp	r3, #0
 800efec:	d039      	beq.n	800f062 <forward_conv2d+0x2be>
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d036      	beq.n	800f062 <forward_conv2d+0x2be>
 800eff4:	699c      	ldr	r4, [r3, #24]
 800eff6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800effa:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	4103      	asrs	r3, r0
 800f002:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f006:	b29b      	uxth	r3, r3
 800f008:	9401      	str	r4, [sp, #4]
 800f00a:	ee18 4a90 	vmov	r4, s17
 800f00e:	2800      	cmp	r0, #0
 800f010:	bf18      	it	ne
 800f012:	4604      	movne	r4, r0
 800f014:	ee08 4a90 	vmov	s17, r4
 800f018:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800f01a:	9400      	str	r4, [sp, #0]
 800f01c:	f7ff fe72 	bl	800ed04 <ai_dict_decompress_f32>
 800f020:	e750      	b.n	800eec4 <forward_conv2d+0x120>
 800f022:	4b15      	ldr	r3, [pc, #84]	; (800f078 <forward_conv2d+0x2d4>)
 800f024:	9312      	str	r3, [sp, #72]	; 0x48
 800f026:	e734      	b.n	800ee92 <forward_conv2d+0xee>
 800f028:	f1b8 0f00 	cmp.w	r8, #0
 800f02c:	d00b      	beq.n	800f046 <forward_conv2d+0x2a2>
 800f02e:	9327      	str	r3, [sp, #156]	; 0x9c
 800f030:	2301      	movs	r3, #1
 800f032:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800f036:	9313      	str	r3, [sp, #76]	; 0x4c
 800f038:	e726      	b.n	800ee88 <forward_conv2d+0xe4>
 800f03a:	f1b8 0f00 	cmp.w	r8, #0
 800f03e:	d001      	beq.n	800f044 <forward_conv2d+0x2a0>
 800f040:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800f044:	2300      	movs	r3, #0
 800f046:	9327      	str	r3, [sp, #156]	; 0x9c
 800f048:	2301      	movs	r3, #1
 800f04a:	9313      	str	r3, [sp, #76]	; 0x4c
 800f04c:	e71c      	b.n	800ee88 <forward_conv2d+0xe4>
 800f04e:	2a01      	cmp	r2, #1
 800f050:	d90a      	bls.n	800f068 <forward_conv2d+0x2c4>
 800f052:	ee08 3a10 	vmov	s16, r3
 800f056:	461e      	mov	r6, r3
 800f058:	e6c9      	b.n	800edee <forward_conv2d+0x4a>
 800f05a:	2200      	movs	r2, #0
 800f05c:	ee08 2a10 	vmov	s16, r2
 800f060:	e6c4      	b.n	800edec <forward_conv2d+0x48>
 800f062:	2300      	movs	r3, #0
 800f064:	699b      	ldr	r3, [r3, #24]
 800f066:	deff      	udf	#255	; 0xff
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	deff      	udf	#255	; 0xff
 800f06c:	2300      	movs	r3, #0
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	deff      	udf	#255	; 0xff
 800f072:	2300      	movs	r3, #0
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	deff      	udf	#255	; 0xff
 800f078:	0800e295 	.word	0x0800e295

0800f07c <forward_dense>:
 800f07c:	6983      	ldr	r3, [r0, #24]
 800f07e:	881a      	ldrh	r2, [r3, #0]
 800f080:	2a00      	cmp	r2, #0
 800f082:	f000 80f0 	beq.w	800f266 <forward_dense+0x1ea>
 800f086:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08a:	ed2d 8b02 	vpush	{d8}
 800f08e:	6858      	ldr	r0, [r3, #4]
 800f090:	b09b      	sub	sp, #108	; 0x6c
 800f092:	6845      	ldr	r5, [r0, #4]
 800f094:	b105      	cbz	r5, 800f098 <forward_dense+0x1c>
 800f096:	682d      	ldr	r5, [r5, #0]
 800f098:	2a01      	cmp	r2, #1
 800f09a:	f000 840a 	beq.w	800f8b2 <forward_dense+0x836>
 800f09e:	6906      	ldr	r6, [r0, #16]
 800f0a0:	b106      	cbz	r6, 800f0a4 <forward_dense+0x28>
 800f0a2:	6836      	ldr	r6, [r6, #0]
 800f0a4:	2a02      	cmp	r2, #2
 800f0a6:	f000 80e0 	beq.w	800f26a <forward_dense+0x1ee>
 800f0aa:	69c3      	ldr	r3, [r0, #28]
 800f0ac:	930d      	str	r3, [sp, #52]	; 0x34
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 83f1 	beq.w	800f896 <forward_dense+0x81a>
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	8b03      	ldrh	r3, [r0, #24]
 800f0b8:	6809      	ldr	r1, [r1, #0]
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	910f      	str	r1, [sp, #60]	; 0x3c
 800f0be:	f240 83ec 	bls.w	800f89a <forward_dense+0x81e>
 800f0c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	930d      	str	r3, [sp, #52]	; 0x34
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800f0ce:	2a03      	cmp	r2, #3
 800f0d0:	68eb      	ldr	r3, [r5, #12]
 800f0d2:	68f7      	ldr	r7, [r6, #12]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	687c      	ldr	r4, [r7, #4]
 800f0d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f0da:	f8d8 3000 	ldr.w	r3, [r8]
 800f0de:	4621      	mov	r1, r4
 800f0e0:	9419      	str	r4, [sp, #100]	; 0x64
 800f0e2:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800f0e6:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800f0ea:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800f0ee:	fb01 f404 	mul.w	r4, r1, r4
 800f0f2:	fa4e f10c 	asr.w	r1, lr, ip
 800f0f6:	9116      	str	r1, [sp, #88]	; 0x58
 800f0f8:	f000 83d8 	beq.w	800f8ac <forward_dense+0x830>
 800f0fc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f0fe:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800f102:	2a00      	cmp	r2, #0
 800f104:	f000 83c2 	beq.w	800f88c <forward_dense+0x810>
 800f108:	6812      	ldr	r2, [r2, #0]
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	f000 83be 	beq.w	800f88c <forward_dense+0x810>
 800f110:	2b04      	cmp	r3, #4
 800f112:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800f116:	f000 83a8 	beq.w	800f86a <forward_dense+0x7ee>
 800f11a:	2b08      	cmp	r3, #8
 800f11c:	f000 83a5 	beq.w	800f86a <forward_dense+0x7ee>
 800f120:	f04f 0a00 	mov.w	sl, #0
 800f124:	69ab      	ldr	r3, [r5, #24]
 800f126:	fb07 f404 	mul.w	r4, r7, r4
 800f12a:	69b2      	ldr	r2, [r6, #24]
 800f12c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f130:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f132:	6892      	ldr	r2, [r2, #8]
 800f134:	695b      	ldr	r3, [r3, #20]
 800f136:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800f13a:	9206      	str	r2, [sp, #24]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	428a      	cmp	r2, r1
 800f140:	9110      	str	r1, [sp, #64]	; 0x40
 800f142:	9304      	str	r3, [sp, #16]
 800f144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f146:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800f14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f14e:	900e      	str	r0, [sp, #56]	; 0x38
 800f150:	9303      	str	r3, [sp, #12]
 800f152:	f080 8380 	bcs.w	800f856 <forward_dense+0x7da>
 800f156:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f158:	4654      	mov	r4, sl
 800f15a:	4bb9      	ldr	r3, [pc, #740]	; (800f440 <forward_dense+0x3c4>)
 800f15c:	46ca      	mov	sl, r9
 800f15e:	08d0      	lsrs	r0, r2, #3
 800f160:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800f444 <forward_dense+0x3c8>
 800f164:	4413      	add	r3, r2
 800f166:	9009      	str	r0, [sp, #36]	; 0x24
 800f168:	0099      	lsls	r1, r3, #2
 800f16a:	f022 0301 	bic.w	r3, r2, #1
 800f16e:	f002 0201 	and.w	r2, r2, #1
 800f172:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f176:	9118      	str	r1, [sp, #96]	; 0x60
 800f178:	920a      	str	r2, [sp, #40]	; 0x28
 800f17a:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800f17e:	9305      	str	r3, [sp, #20]
 800f180:	f101 0320 	add.w	r3, r1, #32
 800f184:	9207      	str	r2, [sp, #28]
 800f186:	9311      	str	r3, [sp, #68]	; 0x44
 800f188:	444b      	add	r3, r9
 800f18a:	469b      	mov	fp, r3
 800f18c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f18e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f190:	699b      	ldr	r3, [r3, #24]
 800f192:	689a      	ldr	r2, [r3, #8]
 800f194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f196:	b10b      	cbz	r3, 800f19c <forward_dense+0x120>
 800f198:	699b      	ldr	r3, [r3, #24]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	2c00      	cmp	r4, #0
 800f19e:	f000 834b 	beq.w	800f838 <forward_dense+0x7bc>
 800f1a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f1a4:	2904      	cmp	r1, #4
 800f1a6:	f000 826a 	beq.w	800f67e <forward_dense+0x602>
 800f1aa:	9903      	ldr	r1, [sp, #12]
 800f1ac:	9806      	ldr	r0, [sp, #24]
 800f1ae:	4281      	cmp	r1, r0
 800f1b0:	f240 8356 	bls.w	800f860 <forward_dense+0x7e4>
 800f1b4:	4686      	mov	lr, r0
 800f1b6:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f1b8:	eb00 090a 	add.w	r9, r0, sl
 800f1bc:	0941      	lsrs	r1, r0, #5
 800f1be:	f10a 0004 	add.w	r0, sl, #4
 800f1c2:	f8cd 9020 	str.w	r9, [sp, #32]
 800f1c6:	9012      	str	r0, [sp, #72]	; 0x48
 800f1c8:	1c48      	adds	r0, r1, #1
 800f1ca:	00c9      	lsls	r1, r1, #3
 800f1cc:	3110      	adds	r1, #16
 800f1ce:	9115      	str	r1, [sp, #84]	; 0x54
 800f1d0:	00c1      	lsls	r1, r0, #3
 800f1d2:	9113      	str	r1, [sp, #76]	; 0x4c
 800f1d4:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800f1d8:	9114      	str	r1, [sp, #80]	; 0x50
 800f1da:	f1a9 0104 	sub.w	r1, r9, #4
 800f1de:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800f1e2:	910c      	str	r1, [sp, #48]	; 0x30
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f000 8128 	beq.w	800f43a <forward_dense+0x3be>
 800f1ea:	ecb3 5a01 	vldmia	r3!, {s10}
 800f1ee:	f1b9 0f07 	cmp.w	r9, #7
 800f1f2:	d83d      	bhi.n	800f270 <forward_dense+0x1f4>
 800f1f4:	45da      	cmp	sl, fp
 800f1f6:	d211      	bcs.n	800f21c <forward_dense+0x1a0>
 800f1f8:	eddf 7a92 	vldr	s15, [pc, #584]	; 800f444 <forward_dense+0x3c8>
 800f1fc:	4650      	mov	r0, sl
 800f1fe:	4615      	mov	r5, r2
 800f200:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f204:	ecb0 7a01 	vldmia	r0!, {s14}
 800f208:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f20c:	4558      	cmp	r0, fp
 800f20e:	edd1 6a00 	vldr	s13, [r1]
 800f212:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f216:	d3f3      	bcc.n	800f200 <forward_dense+0x184>
 800f218:	ee35 5a27 	vadd.f32	s10, s10, s15
 800f21c:	9904      	ldr	r1, [sp, #16]
 800f21e:	ecae 5a01 	vstmia	lr!, {s10}
 800f222:	440a      	add	r2, r1
 800f224:	9903      	ldr	r1, [sp, #12]
 800f226:	458e      	cmp	lr, r1
 800f228:	d3dc      	bcc.n	800f1e4 <forward_dense+0x168>
 800f22a:	9a06      	ldr	r2, [sp, #24]
 800f22c:	1a8b      	subs	r3, r1, r2
 800f22e:	3b01      	subs	r3, #1
 800f230:	f023 0303 	bic.w	r3, r3, #3
 800f234:	3304      	adds	r3, #4
 800f236:	18d3      	adds	r3, r2, r3
 800f238:	4619      	mov	r1, r3
 800f23a:	9306      	str	r3, [sp, #24]
 800f23c:	9b03      	ldr	r3, [sp, #12]
 800f23e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f240:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f242:	4413      	add	r3, r2
 800f244:	9a07      	ldr	r2, [sp, #28]
 800f246:	4281      	cmp	r1, r0
 800f248:	9303      	str	r3, [sp, #12]
 800f24a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f24c:	441a      	add	r2, r3
 800f24e:	449b      	add	fp, r3
 800f250:	9207      	str	r2, [sp, #28]
 800f252:	9a05      	ldr	r2, [sp, #20]
 800f254:	441a      	add	r2, r3
 800f256:	9205      	str	r2, [sp, #20]
 800f258:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f25a:	4692      	mov	sl, r2
 800f25c:	f080 82fb 	bcs.w	800f856 <forward_dense+0x7da>
 800f260:	441a      	add	r2, r3
 800f262:	920b      	str	r2, [sp, #44]	; 0x2c
 800f264:	e793      	b.n	800f18e <forward_dense+0x112>
 800f266:	6853      	ldr	r3, [r2, #4]
 800f268:	deff      	udf	#255	; 0xff
 800f26a:	2300      	movs	r3, #0
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	deff      	udf	#255	; 0xff
 800f270:	f002 0103 	and.w	r1, r2, #3
 800f274:	2902      	cmp	r1, #2
 800f276:	f000 81e6 	beq.w	800f646 <forward_dense+0x5ca>
 800f27a:	2903      	cmp	r1, #3
 800f27c:	f000 80e4 	beq.w	800f448 <forward_dense+0x3cc>
 800f280:	2901      	cmp	r1, #1
 800f282:	f000 81ef 	beq.w	800f664 <forward_dense+0x5e8>
 800f286:	9908      	ldr	r1, [sp, #32]
 800f288:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800f444 <forward_dense+0x3c8>
 800f28c:	458a      	cmp	sl, r1
 800f28e:	f200 82e9 	bhi.w	800f864 <forward_dense+0x7e8>
 800f292:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f294:	f102 0108 	add.w	r1, r2, #8
 800f298:	f10a 0020 	add.w	r0, sl, #32
 800f29c:	18ae      	adds	r6, r5, r2
 800f29e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800f2a2:	3108      	adds	r1, #8
 800f2a4:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800f2a8:	3020      	adds	r0, #32
 800f2aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f2ae:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800f2b2:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800f2b6:	edd5 7a00 	vldr	s15, [r5]
 800f2ba:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800f2be:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f2c2:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800f2c6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f2ca:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800f2ce:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800f2d2:	edd5 2a00 	vldr	s5, [r5]
 800f2d6:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800f2da:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f2de:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800f2e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f2e6:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800f2ea:	ed95 3a00 	vldr	s6, [r5]
 800f2ee:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800f2f2:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f2f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f2fa:	edd5 3a00 	vldr	s7, [r5]
 800f2fe:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800f302:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f306:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f30a:	ed95 4a00 	vldr	s8, [r5]
 800f30e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800f312:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f316:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f31a:	edd5 4a00 	vldr	s9, [r5]
 800f31e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800f322:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f326:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800f32a:	edd5 5a00 	vldr	s11, [r5]
 800f32e:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800f332:	428e      	cmp	r6, r1
 800f334:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f338:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f33c:	ed95 6a00 	vldr	s12, [r5]
 800f340:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f344:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f348:	d1a9      	bne.n	800f29e <forward_dense+0x222>
 800f34a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f34c:	1850      	adds	r0, r2, r1
 800f34e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f350:	4559      	cmp	r1, fp
 800f352:	d26f      	bcs.n	800f434 <forward_dense+0x3b8>
 800f354:	7805      	ldrb	r5, [r0, #0]
 800f356:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f35a:	edd5 7a00 	vldr	s15, [r5]
 800f35e:	460d      	mov	r5, r1
 800f360:	ecf5 6a01 	vldmia	r5!, {s13}
 800f364:	45ab      	cmp	fp, r5
 800f366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f36a:	d963      	bls.n	800f434 <forward_dense+0x3b8>
 800f36c:	7845      	ldrb	r5, [r0, #1]
 800f36e:	edd1 6a01 	vldr	s13, [r1, #4]
 800f372:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f376:	edd5 7a00 	vldr	s15, [r5]
 800f37a:	f101 0508 	add.w	r5, r1, #8
 800f37e:	45ab      	cmp	fp, r5
 800f380:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f384:	d956      	bls.n	800f434 <forward_dense+0x3b8>
 800f386:	7885      	ldrb	r5, [r0, #2]
 800f388:	edd1 6a02 	vldr	s13, [r1, #8]
 800f38c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f390:	edd5 7a00 	vldr	s15, [r5]
 800f394:	f101 050c 	add.w	r5, r1, #12
 800f398:	45ab      	cmp	fp, r5
 800f39a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f39e:	d949      	bls.n	800f434 <forward_dense+0x3b8>
 800f3a0:	78c5      	ldrb	r5, [r0, #3]
 800f3a2:	edd1 6a03 	vldr	s13, [r1, #12]
 800f3a6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3aa:	edd5 7a00 	vldr	s15, [r5]
 800f3ae:	f101 0510 	add.w	r5, r1, #16
 800f3b2:	45ab      	cmp	fp, r5
 800f3b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3b8:	d93c      	bls.n	800f434 <forward_dense+0x3b8>
 800f3ba:	7905      	ldrb	r5, [r0, #4]
 800f3bc:	edd1 6a04 	vldr	s13, [r1, #16]
 800f3c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3c4:	edd5 7a00 	vldr	s15, [r5]
 800f3c8:	f101 0514 	add.w	r5, r1, #20
 800f3cc:	45ab      	cmp	fp, r5
 800f3ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3d2:	d92f      	bls.n	800f434 <forward_dense+0x3b8>
 800f3d4:	7945      	ldrb	r5, [r0, #5]
 800f3d6:	edd1 6a05 	vldr	s13, [r1, #20]
 800f3da:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3de:	edd5 7a00 	vldr	s15, [r5]
 800f3e2:	f101 0518 	add.w	r5, r1, #24
 800f3e6:	45ab      	cmp	fp, r5
 800f3e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3ec:	d922      	bls.n	800f434 <forward_dense+0x3b8>
 800f3ee:	7985      	ldrb	r5, [r0, #6]
 800f3f0:	edd1 6a06 	vldr	s13, [r1, #24]
 800f3f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3f8:	edd5 7a00 	vldr	s15, [r5]
 800f3fc:	f101 051c 	add.w	r5, r1, #28
 800f400:	45ab      	cmp	fp, r5
 800f402:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f406:	d915      	bls.n	800f434 <forward_dense+0x3b8>
 800f408:	79c5      	ldrb	r5, [r0, #7]
 800f40a:	edd1 6a07 	vldr	s13, [r1, #28]
 800f40e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f412:	edd5 7a00 	vldr	s15, [r5]
 800f416:	f101 0520 	add.w	r5, r1, #32
 800f41a:	45ab      	cmp	fp, r5
 800f41c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f420:	d908      	bls.n	800f434 <forward_dense+0x3b8>
 800f422:	edd1 7a08 	vldr	s15, [r1, #32]
 800f426:	7a01      	ldrb	r1, [r0, #8]
 800f428:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f42c:	edd1 6a00 	vldr	s13, [r1]
 800f430:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f434:	ee35 5a07 	vadd.f32	s10, s10, s14
 800f438:	e6f0      	b.n	800f21c <forward_dense+0x1a0>
 800f43a:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800f444 <forward_dense+0x3c8>
 800f43e:	e6d6      	b.n	800f1ee <forward_dense+0x172>
 800f440:	3ffffff8 	.word	0x3ffffff8
 800f444:	00000000 	.word	0x00000000
 800f448:	eeb0 7a48 	vmov.f32	s14, s16
 800f44c:	4650      	mov	r0, sl
 800f44e:	4611      	mov	r1, r2
 800f450:	468c      	mov	ip, r1
 800f452:	4606      	mov	r6, r0
 800f454:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800f458:	ecf6 7a01 	vldmia	r6!, {s15}
 800f45c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f460:	edd5 6a00 	vldr	s13, [r5]
 800f464:	9d08      	ldr	r5, [sp, #32]
 800f466:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f46a:	42ae      	cmp	r6, r5
 800f46c:	d866      	bhi.n	800f53c <forward_dense+0x4c0>
 800f46e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f470:	f101 0711 	add.w	r7, r1, #17
 800f474:	3109      	adds	r1, #9
 800f476:	eba5 0800 	sub.w	r8, r5, r0
 800f47a:	3024      	adds	r0, #36	; 0x24
 800f47c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800f480:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800f484:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800f488:	3108      	adds	r1, #8
 800f48a:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800f48e:	3020      	adds	r0, #32
 800f490:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f494:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800f498:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800f49c:	edd5 7a00 	vldr	s15, [r5]
 800f4a0:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800f4a4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f4a8:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800f4ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4b0:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800f4b4:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800f4b8:	edd5 2a00 	vldr	s5, [r5]
 800f4bc:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800f4c0:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f4c4:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800f4c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4cc:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800f4d0:	ed95 3a00 	vldr	s6, [r5]
 800f4d4:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800f4d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f4dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4e0:	edd5 3a00 	vldr	s7, [r5]
 800f4e4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800f4e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4ec:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f4f0:	ed95 4a00 	vldr	s8, [r5]
 800f4f4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800f4f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f500:	edd5 4a00 	vldr	s9, [r5]
 800f504:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800f508:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f50c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800f510:	edd5 5a00 	vldr	s11, [r5]
 800f514:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800f518:	428f      	cmp	r7, r1
 800f51a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f51e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f522:	ed95 6a00 	vldr	s12, [r5]
 800f526:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f52a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f52e:	d1a9      	bne.n	800f484 <forward_dense+0x408>
 800f530:	f108 0801 	add.w	r8, r8, #1
 800f534:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800f538:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800f53c:	455e      	cmp	r6, fp
 800f53e:	f4bf af79 	bcs.w	800f434 <forward_dense+0x3b8>
 800f542:	f89c 1000 	ldrb.w	r1, [ip]
 800f546:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f54a:	edd1 7a00 	vldr	s15, [r1]
 800f54e:	4631      	mov	r1, r6
 800f550:	ecf1 6a01 	vldmia	r1!, {s13}
 800f554:	458b      	cmp	fp, r1
 800f556:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f55a:	f67f af6b 	bls.w	800f434 <forward_dense+0x3b8>
 800f55e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800f562:	edd6 6a01 	vldr	s13, [r6, #4]
 800f566:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f56a:	edd1 7a00 	vldr	s15, [r1]
 800f56e:	f106 0108 	add.w	r1, r6, #8
 800f572:	458b      	cmp	fp, r1
 800f574:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f578:	f67f af5c 	bls.w	800f434 <forward_dense+0x3b8>
 800f57c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800f580:	edd6 6a02 	vldr	s13, [r6, #8]
 800f584:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f588:	edd1 7a00 	vldr	s15, [r1]
 800f58c:	f106 010c 	add.w	r1, r6, #12
 800f590:	458b      	cmp	fp, r1
 800f592:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f596:	f67f af4d 	bls.w	800f434 <forward_dense+0x3b8>
 800f59a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800f59e:	edd6 6a03 	vldr	s13, [r6, #12]
 800f5a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f5a6:	edd1 7a00 	vldr	s15, [r1]
 800f5aa:	f106 0110 	add.w	r1, r6, #16
 800f5ae:	458b      	cmp	fp, r1
 800f5b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5b4:	f67f af3e 	bls.w	800f434 <forward_dense+0x3b8>
 800f5b8:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800f5bc:	edd6 6a04 	vldr	s13, [r6, #16]
 800f5c0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f5c4:	edd1 7a00 	vldr	s15, [r1]
 800f5c8:	f106 0114 	add.w	r1, r6, #20
 800f5cc:	458b      	cmp	fp, r1
 800f5ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5d2:	f67f af2f 	bls.w	800f434 <forward_dense+0x3b8>
 800f5d6:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800f5da:	edd6 6a05 	vldr	s13, [r6, #20]
 800f5de:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f5e2:	edd1 7a00 	vldr	s15, [r1]
 800f5e6:	f106 0118 	add.w	r1, r6, #24
 800f5ea:	458b      	cmp	fp, r1
 800f5ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5f0:	f67f af20 	bls.w	800f434 <forward_dense+0x3b8>
 800f5f4:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800f5f8:	edd6 6a06 	vldr	s13, [r6, #24]
 800f5fc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f600:	edd1 7a00 	vldr	s15, [r1]
 800f604:	f106 011c 	add.w	r1, r6, #28
 800f608:	458b      	cmp	fp, r1
 800f60a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f60e:	f67f af11 	bls.w	800f434 <forward_dense+0x3b8>
 800f612:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800f616:	edd6 6a07 	vldr	s13, [r6, #28]
 800f61a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f61e:	edd1 7a00 	vldr	s15, [r1]
 800f622:	f106 0120 	add.w	r1, r6, #32
 800f626:	458b      	cmp	fp, r1
 800f628:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f62c:	f67f af02 	bls.w	800f434 <forward_dense+0x3b8>
 800f630:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800f634:	edd6 7a08 	vldr	s15, [r6, #32]
 800f638:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f63c:	edd1 6a00 	vldr	s13, [r1]
 800f640:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f644:	e6f6      	b.n	800f434 <forward_dense+0x3b8>
 800f646:	eeb0 7a48 	vmov.f32	s14, s16
 800f64a:	4650      	mov	r0, sl
 800f64c:	4611      	mov	r1, r2
 800f64e:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f652:	ecf0 7a01 	vldmia	r0!, {s15}
 800f656:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f65a:	edd5 6a00 	vldr	s13, [r5]
 800f65e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f662:	e6f5      	b.n	800f450 <forward_dense+0x3d4>
 800f664:	4611      	mov	r1, r2
 800f666:	edda 7a00 	vldr	s15, [sl]
 800f66a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f66c:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f670:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f674:	ed95 7a00 	vldr	s14, [r5]
 800f678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f67c:	e7e7      	b.n	800f64e <forward_dense+0x5d2>
 800f67e:	9803      	ldr	r0, [sp, #12]
 800f680:	9906      	ldr	r1, [sp, #24]
 800f682:	4288      	cmp	r0, r1
 800f684:	f67f adda 	bls.w	800f23c <forward_dense+0x1c0>
 800f688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f68a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800f68e:	468b      	mov	fp, r1
 800f690:	f100 0c01 	add.w	ip, r0, #1
 800f694:	9805      	ldr	r0, [sp, #20]
 800f696:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f69a:	3801      	subs	r0, #1
 800f69c:	9008      	str	r0, [sp, #32]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f000 80bf 	beq.w	800f822 <forward_dense+0x7a6>
 800f6a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6a6:	ecf3 2a01 	vldmia	r3!, {s5}
 800f6aa:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800f444 <forward_dense+0x3c8>
 800f6ae:	2900      	cmp	r1, #0
 800f6b0:	f000 80bf 	beq.w	800f832 <forward_dense+0x7b6>
 800f6b4:	1d10      	adds	r0, r2, #4
 800f6b6:	f10a 0120 	add.w	r1, sl, #32
 800f6ba:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800f6be:	3004      	adds	r0, #4
 800f6c0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800f6c4:	3120      	adds	r1, #32
 800f6c6:	f007 0e0f 	and.w	lr, r7, #15
 800f6ca:	093f      	lsrs	r7, r7, #4
 800f6cc:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800f6d0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800f6d4:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800f6d8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f6dc:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800f6e0:	edde 7a00 	vldr	s15, [lr]
 800f6e4:	ed97 3a00 	vldr	s6, [r7]
 800f6e8:	0937      	lsrs	r7, r6, #4
 800f6ea:	ee67 7a82 	vmul.f32	s15, s15, s4
 800f6ee:	f006 060f 	and.w	r6, r6, #15
 800f6f2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f6f6:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800f6fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f6fe:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800f702:	eee3 7a04 	vfma.f32	s15, s6, s8
 800f706:	ed97 3a00 	vldr	s6, [r7]
 800f70a:	ed96 4a00 	vldr	s8, [r6]
 800f70e:	092e      	lsrs	r6, r5, #4
 800f710:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800f714:	f005 050f 	and.w	r5, r5, #15
 800f718:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f71c:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800f720:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f724:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800f728:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f72c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f730:	eee4 7a05 	vfma.f32	s15, s8, s10
 800f734:	ed96 4a00 	vldr	s8, [r6]
 800f738:	ed95 5a00 	vldr	s10, [r5]
 800f73c:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800f740:	4560      	cmp	r0, ip
 800f742:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800f746:	f005 050f 	and.w	r5, r5, #15
 800f74a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f74e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f752:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f756:	eee5 7a06 	vfma.f32	s15, s10, s12
 800f75a:	ed96 5a00 	vldr	s10, [r6]
 800f75e:	ed95 6a00 	vldr	s12, [r5]
 800f762:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f766:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f76a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f76e:	d1a4      	bne.n	800f6ba <forward_dense+0x63e>
 800f770:	f1ac 0804 	sub.w	r8, ip, #4
 800f774:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800f778:	9905      	ldr	r1, [sp, #20]
 800f77a:	458e      	cmp	lr, r1
 800f77c:	d229      	bcs.n	800f7d2 <forward_dense+0x756>
 800f77e:	9908      	ldr	r1, [sp, #32]
 800f780:	f10e 0008 	add.w	r0, lr, #8
 800f784:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800f788:	eba1 070e 	sub.w	r7, r1, lr
 800f78c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800f790:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800f794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f798:	3008      	adds	r0, #8
 800f79a:	ed50 5a03 	vldr	s11, [r0, #-12]
 800f79e:	f001 050f 	and.w	r5, r1, #15
 800f7a2:	0909      	lsrs	r1, r1, #4
 800f7a4:	ed50 6a04 	vldr	s13, [r0, #-16]
 800f7a8:	42b7      	cmp	r7, r6
 800f7aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f7ae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f7b2:	edd5 7a00 	vldr	s15, [r5]
 800f7b6:	ed91 6a00 	vldr	s12, [r1]
 800f7ba:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f7be:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f7c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7c6:	d1e5      	bne.n	800f794 <forward_dense+0x718>
 800f7c8:	f109 0901 	add.w	r9, r9, #1
 800f7cc:	44c8      	add	r8, r9
 800f7ce:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800f7d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f7d4:	b1c1      	cbz	r1, 800f808 <forward_dense+0x78c>
 800f7d6:	f898 1000 	ldrb.w	r1, [r8]
 800f7da:	edde 7a00 	vldr	s15, [lr]
 800f7de:	0909      	lsrs	r1, r1, #4
 800f7e0:	9804      	ldr	r0, [sp, #16]
 800f7e2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f7e6:	4402      	add	r2, r0
 800f7e8:	4484      	add	ip, r0
 800f7ea:	edd1 6a00 	vldr	s13, [r1]
 800f7ee:	9903      	ldr	r1, [sp, #12]
 800f7f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f7f4:	ee72 2a87 	vadd.f32	s5, s5, s14
 800f7f8:	eceb 2a01 	vstmia	fp!, {s5}
 800f7fc:	4559      	cmp	r1, fp
 800f7fe:	f63f af4e 	bhi.w	800f69e <forward_dense+0x622>
 800f802:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800f806:	e510      	b.n	800f22a <forward_dense+0x1ae>
 800f808:	9904      	ldr	r1, [sp, #16]
 800f80a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800f80e:	440a      	add	r2, r1
 800f810:	448c      	add	ip, r1
 800f812:	9903      	ldr	r1, [sp, #12]
 800f814:	ecab 7a01 	vstmia	fp!, {s14}
 800f818:	458b      	cmp	fp, r1
 800f81a:	d2f2      	bcs.n	800f802 <forward_dense+0x786>
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f47f af41 	bne.w	800f6a4 <forward_dense+0x628>
 800f822:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f824:	eef0 2a48 	vmov.f32	s5, s16
 800f828:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800f8b8 <forward_dense+0x83c>
 800f82c:	2900      	cmp	r1, #0
 800f82e:	f47f af41 	bne.w	800f6b4 <forward_dense+0x638>
 800f832:	46d6      	mov	lr, sl
 800f834:	4690      	mov	r8, r2
 800f836:	e79f      	b.n	800f778 <forward_dense+0x6fc>
 800f838:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f83a:	4651      	mov	r1, sl
 800f83c:	9d06      	ldr	r5, [sp, #24]
 800f83e:	9001      	str	r0, [sp, #4]
 800f840:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f842:	9000      	str	r0, [sp, #0]
 800f844:	4628      	mov	r0, r5
 800f846:	f000 fc21 	bl	801008c <lite_dense_if32of32wf32>
 800f84a:	462b      	mov	r3, r5
 800f84c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f84e:	4413      	add	r3, r2
 800f850:	4619      	mov	r1, r3
 800f852:	9306      	str	r3, [sp, #24]
 800f854:	e4f2      	b.n	800f23c <forward_dense+0x1c0>
 800f856:	b01b      	add	sp, #108	; 0x6c
 800f858:	ecbd 8b02 	vpop	{d8}
 800f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f860:	4601      	mov	r1, r0
 800f862:	e4eb      	b.n	800f23c <forward_dense+0x1c0>
 800f864:	4651      	mov	r1, sl
 800f866:	4610      	mov	r0, r2
 800f868:	e572      	b.n	800f350 <forward_dense+0x2d4>
 800f86a:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800f86e:	f1b9 0f00 	cmp.w	r9, #0
 800f872:	d016      	beq.n	800f8a2 <forward_dense+0x826>
 800f874:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f878:	f000 fdb8 	bl	80103ec <ai_array_get_byte_size>
 800f87c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800f880:	4602      	mov	r2, r0
 800f882:	4641      	mov	r1, r8
 800f884:	4650      	mov	r0, sl
 800f886:	f001 febb 	bl	8011600 <memcpy>
 800f88a:	e44b      	b.n	800f124 <forward_dense+0xa8>
 800f88c:	2b04      	cmp	r3, #4
 800f88e:	d00a      	beq.n	800f8a6 <forward_dense+0x82a>
 800f890:	f04f 0900 	mov.w	r9, #0
 800f894:	e441      	b.n	800f11a <forward_dense+0x9e>
 800f896:	930f      	str	r3, [sp, #60]	; 0x3c
 800f898:	e417      	b.n	800f0ca <forward_dense+0x4e>
 800f89a:	2300      	movs	r3, #0
 800f89c:	930d      	str	r3, [sp, #52]	; 0x34
 800f89e:	460b      	mov	r3, r1
 800f8a0:	e413      	b.n	800f0ca <forward_dense+0x4e>
 800f8a2:	46c2      	mov	sl, r8
 800f8a4:	e43e      	b.n	800f124 <forward_dense+0xa8>
 800f8a6:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800f8aa:	e43b      	b.n	800f124 <forward_dense+0xa8>
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	deff      	udf	#255	; 0xff
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	deff      	udf	#255	; 0xff
 800f8b8:	00000000 	.word	0x00000000

0800f8bc <forward_mp>:
 800f8bc:	6983      	ldr	r3, [r0, #24]
 800f8be:	881a      	ldrh	r2, [r3, #0]
 800f8c0:	2a00      	cmp	r2, #0
 800f8c2:	f000 80bc 	beq.w	800fa3e <forward_mp+0x182>
 800f8c6:	6859      	ldr	r1, [r3, #4]
 800f8c8:	684b      	ldr	r3, [r1, #4]
 800f8ca:	b103      	cbz	r3, 800f8ce <forward_mp+0x12>
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2a01      	cmp	r2, #1
 800f8d0:	f000 80ba 	beq.w	800fa48 <forward_mp+0x18c>
 800f8d4:	690a      	ldr	r2, [r1, #16]
 800f8d6:	2a00      	cmp	r2, #0
 800f8d8:	f000 80b9 	beq.w	800fa4e <forward_mp+0x192>
 800f8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e0:	6811      	ldr	r1, [r2, #0]
 800f8e2:	b093      	sub	sp, #76	; 0x4c
 800f8e4:	68ca      	ldr	r2, [r1, #12]
 800f8e6:	6989      	ldr	r1, [r1, #24]
 800f8e8:	68d4      	ldr	r4, [r2, #12]
 800f8ea:	6895      	ldr	r5, [r2, #8]
 800f8ec:	688a      	ldr	r2, [r1, #8]
 800f8ee:	68d9      	ldr	r1, [r3, #12]
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	9200      	str	r2, [sp, #0]
 800f8f4:	689b      	ldr	r3, [r3, #8]
 800f8f6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800f8f8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800f8fc:	930e      	str	r3, [sp, #56]	; 0x38
 800f8fe:	9408      	str	r4, [sp, #32]
 800f900:	9504      	str	r5, [sp, #16]
 800f902:	e9d2 3600 	ldrd	r3, r6, [r2]
 800f906:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800f90a:	69c1      	ldr	r1, [r0, #28]
 800f90c:	f1c3 0a00 	rsb	sl, r3, #0
 800f910:	960d      	str	r6, [sp, #52]	; 0x34
 800f912:	9109      	str	r1, [sp, #36]	; 0x24
 800f914:	6a01      	ldr	r1, [r0, #32]
 800f916:	9705      	str	r7, [sp, #20]
 800f918:	910a      	str	r1, [sp, #40]	; 0x28
 800f91a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f91c:	910b      	str	r1, [sp, #44]	; 0x2c
 800f91e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f920:	910c      	str	r1, [sp, #48]	; 0x30
 800f922:	2c00      	cmp	r4, #0
 800f924:	f000 8088 	beq.w	800fa38 <forward_mp+0x17c>
 800f928:	441a      	add	r2, r3
 800f92a:	9b05      	ldr	r3, [sp, #20]
 800f92c:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800f930:	f04f 0b00 	mov.w	fp, #0
 800f934:	fb09 f303 	mul.w	r3, r9, r3
 800f938:	9201      	str	r2, [sp, #4]
 800f93a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800f93e:	4273      	negs	r3, r6
 800f940:	9310      	str	r3, [sp, #64]	; 0x40
 800f942:	fb05 f307 	mul.w	r3, r5, r7
 800f946:	930f      	str	r3, [sp, #60]	; 0x3c
 800f948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f94a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800f94e:	9901      	ldr	r1, [sp, #4]
 800f950:	9307      	str	r3, [sp, #28]
 800f952:	428a      	cmp	r2, r1
 800f954:	bf94      	ite	ls
 800f956:	eb0a 0e02 	addls.w	lr, sl, r2
 800f95a:	eb0a 0e01 	addhi.w	lr, sl, r1
 800f95e:	9a04      	ldr	r2, [sp, #16]
 800f960:	2a00      	cmp	r2, #0
 800f962:	d05f      	beq.n	800fa24 <forward_mp+0x168>
 800f964:	9a05      	ldr	r2, [sp, #20]
 800f966:	9d00      	ldr	r5, [sp, #0]
 800f968:	fb02 f303 	mul.w	r3, r2, r3
 800f96c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f970:	9303      	str	r3, [sp, #12]
 800f972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f974:	18d3      	adds	r3, r2, r3
 800f976:	2200      	movs	r2, #0
 800f978:	9302      	str	r3, [sp, #8]
 800f97a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f97c:	9206      	str	r2, [sp, #24]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	469b      	mov	fp, r3
 800f982:	db5e      	blt.n	800fa42 <forward_mp+0x186>
 800f984:	9a03      	ldr	r2, [sp, #12]
 800f986:	18d6      	adds	r6, r2, r3
 800f988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f98a:	9902      	ldr	r1, [sp, #8]
 800f98c:	fb06 2607 	mla	r6, r6, r7, r2
 800f990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f992:	428a      	cmp	r2, r1
 800f994:	bf94      	ite	ls
 800f996:	eb0b 0402 	addls.w	r4, fp, r2
 800f99a:	eb0b 0401 	addhi.w	r4, fp, r1
 800f99e:	1ae4      	subs	r4, r4, r3
 800f9a0:	f1b9 0f00 	cmp.w	r9, #0
 800f9a4:	d008      	beq.n	800f9b8 <forward_mp+0xfc>
 800f9a6:	4633      	mov	r3, r6
 800f9a8:	462a      	mov	r2, r5
 800f9aa:	19b9      	adds	r1, r7, r6
 800f9ac:	f853 0b04 	ldr.w	r0, [r3], #4
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	f842 0b04 	str.w	r0, [r2], #4
 800f9b6:	d1f9      	bne.n	800f9ac <forward_mp+0xf0>
 800f9b8:	9b07      	ldr	r3, [sp, #28]
 800f9ba:	459e      	cmp	lr, r3
 800f9bc:	dd1f      	ble.n	800f9fe <forward_mp+0x142>
 800f9be:	469c      	mov	ip, r3
 800f9c0:	fb07 6404 	mla	r4, r7, r4, r6
 800f9c4:	42a6      	cmp	r6, r4
 800f9c6:	d214      	bcs.n	800f9f2 <forward_mp+0x136>
 800f9c8:	f1b9 0f00 	cmp.w	r9, #0
 800f9cc:	d011      	beq.n	800f9f2 <forward_mp+0x136>
 800f9ce:	19f1      	adds	r1, r6, r7
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	ecf2 7a01 	vldmia	r2!, {s15}
 800f9da:	ed93 7a00 	vldr	s14, [r3]
 800f9de:	428a      	cmp	r2, r1
 800f9e0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800f9e4:	ece3 7a01 	vstmia	r3!, {s15}
 800f9e8:	d1f5      	bne.n	800f9d6 <forward_mp+0x11a>
 800f9ea:	4438      	add	r0, r7
 800f9ec:	4439      	add	r1, r7
 800f9ee:	42a0      	cmp	r0, r4
 800f9f0:	d3ef      	bcc.n	800f9d2 <forward_mp+0x116>
 800f9f2:	f10c 0c01 	add.w	ip, ip, #1
 800f9f6:	4446      	add	r6, r8
 800f9f8:	4444      	add	r4, r8
 800f9fa:	45e6      	cmp	lr, ip
 800f9fc:	d1e2      	bne.n	800f9c4 <forward_mp+0x108>
 800f9fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa00:	443d      	add	r5, r7
 800fa02:	9802      	ldr	r0, [sp, #8]
 800fa04:	9a06      	ldr	r2, [sp, #24]
 800fa06:	eb01 030b 	add.w	r3, r1, fp
 800fa0a:	1a41      	subs	r1, r0, r1
 800fa0c:	3201      	adds	r2, #1
 800fa0e:	9102      	str	r1, [sp, #8]
 800fa10:	9904      	ldr	r1, [sp, #16]
 800fa12:	9206      	str	r2, [sp, #24]
 800fa14:	4291      	cmp	r1, r2
 800fa16:	d1b2      	bne.n	800f97e <forward_mp+0xc2>
 800fa18:	9b00      	ldr	r3, [sp, #0]
 800fa1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa1c:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800fa20:	4413      	add	r3, r2
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa26:	f10b 0b01 	add.w	fp, fp, #1
 800fa2a:	9a01      	ldr	r2, [sp, #4]
 800fa2c:	449a      	add	sl, r3
 800fa2e:	1ad3      	subs	r3, r2, r3
 800fa30:	9301      	str	r3, [sp, #4]
 800fa32:	9b08      	ldr	r3, [sp, #32]
 800fa34:	455b      	cmp	r3, fp
 800fa36:	d187      	bne.n	800f948 <forward_mp+0x8c>
 800fa38:	b013      	add	sp, #76	; 0x4c
 800fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3e:	6853      	ldr	r3, [r2, #4]
 800fa40:	deff      	udf	#255	; 0xff
 800fa42:	9e03      	ldr	r6, [sp, #12]
 800fa44:	2300      	movs	r3, #0
 800fa46:	e79f      	b.n	800f988 <forward_mp+0xcc>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	deff      	udf	#255	; 0xff
 800fa4e:	68d3      	ldr	r3, [r2, #12]
 800fa50:	deff      	udf	#255	; 0xff
 800fa52:	bf00      	nop

0800fa54 <nl_func_relu_array_f32>:
 800fa54:	b410      	push	{r4}
 800fa56:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fa5a:	698c      	ldr	r4, [r1, #24]
 800fa5c:	6981      	ldr	r1, [r0, #24]
 800fa5e:	4413      	add	r3, r2
 800fa60:	68a0      	ldr	r0, [r4, #8]
 800fa62:	6889      	ldr	r1, [r1, #8]
 800fa64:	009a      	lsls	r2, r3, #2
 800fa66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fa6a:	4298      	cmp	r0, r3
 800fa6c:	d80f      	bhi.n	800fa8e <nl_func_relu_array_f32+0x3a>
 800fa6e:	3204      	adds	r2, #4
 800fa70:	3304      	adds	r3, #4
 800fa72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800fa94 <nl_func_relu_array_f32+0x40>
 800fa76:	4411      	add	r1, r2
 800fa78:	461a      	mov	r2, r3
 800fa7a:	ed73 7a01 	vldmdb	r3!, {s15}
 800fa7e:	3a08      	subs	r2, #8
 800fa80:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fa84:	ed61 7a01 	vstmdb	r1!, {s15}
 800fa88:	68a0      	ldr	r0, [r4, #8]
 800fa8a:	4290      	cmp	r0, r2
 800fa8c:	d9f4      	bls.n	800fa78 <nl_func_relu_array_f32+0x24>
 800fa8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa92:	4770      	bx	lr
 800fa94:	00000000 	.word	0x00000000

0800fa98 <forward_relu>:
 800fa98:	6982      	ldr	r2, [r0, #24]
 800fa9a:	8813      	ldrh	r3, [r2, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d05b      	beq.n	800fb58 <forward_relu+0xc0>
 800faa0:	6851      	ldr	r1, [r2, #4]
 800faa2:	684a      	ldr	r2, [r1, #4]
 800faa4:	b102      	cbz	r2, 800faa8 <forward_relu+0x10>
 800faa6:	6812      	ldr	r2, [r2, #0]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	f000 8123 	beq.w	800fcf4 <forward_relu+0x25c>
 800faae:	b470      	push	{r4, r5, r6}
 800fab0:	690b      	ldr	r3, [r1, #16]
 800fab2:	b103      	cbz	r3, 800fab6 <forward_relu+0x1e>
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	69c6      	ldr	r6, [r0, #28]
 800fab8:	2e00      	cmp	r6, #0
 800faba:	f000 809e 	beq.w	800fbfa <forward_relu+0x162>
 800fabe:	6871      	ldr	r1, [r6, #4]
 800fac0:	6998      	ldr	r0, [r3, #24]
 800fac2:	2901      	cmp	r1, #1
 800fac4:	f000 80c3 	beq.w	800fc4e <forward_relu+0x1b6>
 800fac8:	6893      	ldr	r3, [r2, #8]
 800faca:	6991      	ldr	r1, [r2, #24]
 800facc:	0a1b      	lsrs	r3, r3, #8
 800face:	6880      	ldr	r0, [r0, #8]
 800fad0:	688d      	ldr	r5, [r1, #8]
 800fad2:	f000 80f2 	beq.w	800fcba <forward_relu+0x222>
 800fad6:	68d4      	ldr	r4, [r2, #12]
 800fad8:	2201      	movs	r2, #1
 800fada:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fade:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fae2:	42a3      	cmp	r3, r4
 800fae4:	fb01 f202 	mul.w	r2, r1, r2
 800fae8:	d1f9      	bne.n	800fade <forward_relu+0x46>
 800faea:	68b3      	ldr	r3, [r6, #8]
 800faec:	ed93 7a02 	vldr	s14, [r3, #8]
 800faf0:	edd3 6a00 	vldr	s13, [r3]
 800faf4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800faf8:	ed93 6a01 	vldr	s12, [r3, #4]
 800fafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb00:	d42c      	bmi.n	800fb5c <forward_relu+0xc4>
 800fb02:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fb06:	4413      	add	r3, r2
 800fb08:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800fb0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800fb10:	4295      	cmp	r5, r2
 800fb12:	d81f      	bhi.n	800fb54 <forward_relu+0xbc>
 800fb14:	3204      	adds	r2, #4
 800fb16:	1d01      	adds	r1, r0, #4
 800fb18:	e00d      	b.n	800fb36 <forward_relu+0x9e>
 800fb1a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fb1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb22:	db03      	blt.n	800fb2c <forward_relu+0x94>
 800fb24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb28:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fb2c:	3b08      	subs	r3, #8
 800fb2e:	ed61 7a01 	vstmdb	r1!, {s15}
 800fb32:	429d      	cmp	r5, r3
 800fb34:	d80e      	bhi.n	800fb54 <forward_relu+0xbc>
 800fb36:	4613      	mov	r3, r2
 800fb38:	ed72 7a01 	vldmdb	r2!, {s15}
 800fb3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb44:	d9e9      	bls.n	800fb1a <forward_relu+0x82>
 800fb46:	3b08      	subs	r3, #8
 800fb48:	eef0 7a47 	vmov.f32	s15, s14
 800fb4c:	429d      	cmp	r5, r3
 800fb4e:	ed61 7a01 	vstmdb	r1!, {s15}
 800fb52:	d9f0      	bls.n	800fb36 <forward_relu+0x9e>
 800fb54:	bc70      	pop	{r4, r5, r6}
 800fb56:	4770      	bx	lr
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	deff      	udf	#255	; 0xff
 800fb5c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fb60:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800fb64:	4411      	add	r1, r2
 800fb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb6a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800fb6e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800fb72:	d11f      	bne.n	800fbb4 <forward_relu+0x11c>
 800fb74:	429d      	cmp	r5, r3
 800fb76:	d8ed      	bhi.n	800fb54 <forward_relu+0xbc>
 800fb78:	1b5d      	subs	r5, r3, r5
 800fb7a:	1d1a      	adds	r2, r3, #4
 800fb7c:	1d01      	adds	r1, r0, #4
 800fb7e:	2000      	movs	r0, #0
 800fb80:	f025 0503 	bic.w	r5, r5, #3
 800fb84:	1b5b      	subs	r3, r3, r5
 800fb86:	ed72 7a01 	vldmdb	r2!, {s15}
 800fb8a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb92:	dc0a      	bgt.n	800fbaa <forward_relu+0x112>
 800fb94:	429a      	cmp	r2, r3
 800fb96:	f841 0d04 	str.w	r0, [r1, #-4]!
 800fb9a:	d0db      	beq.n	800fb54 <forward_relu+0xbc>
 800fb9c:	ed72 7a01 	vldmdb	r2!, {s15}
 800fba0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba8:	ddf4      	ble.n	800fb94 <forward_relu+0xfc>
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	ed61 7a01 	vstmdb	r1!, {s15}
 800fbb0:	d1e9      	bne.n	800fb86 <forward_relu+0xee>
 800fbb2:	e7cf      	b.n	800fb54 <forward_relu+0xbc>
 800fbb4:	429d      	cmp	r5, r3
 800fbb6:	d8cd      	bhi.n	800fb54 <forward_relu+0xbc>
 800fbb8:	1b5d      	subs	r5, r3, r5
 800fbba:	1d1a      	adds	r2, r3, #4
 800fbbc:	1d01      	adds	r1, r0, #4
 800fbbe:	f025 0503 	bic.w	r5, r5, #3
 800fbc2:	1b5b      	subs	r3, r3, r5
 800fbc4:	ed72 7a01 	vldmdb	r2!, {s15}
 800fbc8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd0:	db0e      	blt.n	800fbf0 <forward_relu+0x158>
 800fbd2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fbdc:	ed61 7a01 	vstmdb	r1!, {s15}
 800fbe0:	d0b8      	beq.n	800fb54 <forward_relu+0xbc>
 800fbe2:	ed72 7a01 	vldmdb	r2!, {s15}
 800fbe6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbee:	daf0      	bge.n	800fbd2 <forward_relu+0x13a>
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	ed61 7a01 	vstmdb	r1!, {s15}
 800fbf6:	d1e5      	bne.n	800fbc4 <forward_relu+0x12c>
 800fbf8:	e7ac      	b.n	800fb54 <forward_relu+0xbc>
 800fbfa:	6999      	ldr	r1, [r3, #24]
 800fbfc:	6893      	ldr	r3, [r2, #8]
 800fbfe:	6990      	ldr	r0, [r2, #24]
 800fc00:	0a1b      	lsrs	r3, r3, #8
 800fc02:	6889      	ldr	r1, [r1, #8]
 800fc04:	6884      	ldr	r4, [r0, #8]
 800fc06:	d06e      	beq.n	800fce6 <forward_relu+0x24e>
 800fc08:	68d5      	ldr	r5, [r2, #12]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fc10:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800fc14:	429d      	cmp	r5, r3
 800fc16:	fb00 f202 	mul.w	r2, r0, r2
 800fc1a:	d1f9      	bne.n	800fc10 <forward_relu+0x178>
 800fc1c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fc20:	4413      	add	r3, r2
 800fc22:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fc26:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fc2a:	4294      	cmp	r4, r2
 800fc2c:	d892      	bhi.n	800fb54 <forward_relu+0xbc>
 800fc2e:	3204      	adds	r2, #4
 800fc30:	3104      	adds	r1, #4
 800fc32:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fcfc <forward_relu+0x264>
 800fc36:	4613      	mov	r3, r2
 800fc38:	ed72 7a01 	vldmdb	r2!, {s15}
 800fc3c:	3b08      	subs	r3, #8
 800fc3e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fc42:	ed61 7a01 	vstmdb	r1!, {s15}
 800fc46:	429c      	cmp	r4, r3
 800fc48:	d9f5      	bls.n	800fc36 <forward_relu+0x19e>
 800fc4a:	bc70      	pop	{r4, r5, r6}
 800fc4c:	4770      	bx	lr
 800fc4e:	6993      	ldr	r3, [r2, #24]
 800fc50:	6880      	ldr	r0, [r0, #8]
 800fc52:	689c      	ldr	r4, [r3, #8]
 800fc54:	6893      	ldr	r3, [r2, #8]
 800fc56:	0a1b      	lsrs	r3, r3, #8
 800fc58:	d047      	beq.n	800fcea <forward_relu+0x252>
 800fc5a:	68d5      	ldr	r5, [r2, #12]
 800fc5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fc60:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc64:	42ab      	cmp	r3, r5
 800fc66:	fb02 f101 	mul.w	r1, r2, r1
 800fc6a:	d1f9      	bne.n	800fc60 <forward_relu+0x1c8>
 800fc6c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800fc70:	68b3      	ldr	r3, [r6, #8]
 800fc72:	440a      	add	r2, r1
 800fc74:	ed93 7a00 	vldr	s14, [r3]
 800fc78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc7c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800fc80:	429c      	cmp	r4, r3
 800fc82:	f63f af67 	bhi.w	800fb54 <forward_relu+0xbc>
 800fc86:	1d02      	adds	r2, r0, #4
 800fc88:	3304      	adds	r3, #4
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fc90:	1f19      	subs	r1, r3, #4
 800fc92:	3b08      	subs	r3, #8
 800fc94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9c:	d406      	bmi.n	800fcac <forward_relu+0x214>
 800fc9e:	429c      	cmp	r4, r3
 800fca0:	f842 0d04 	str.w	r0, [r2, #-4]!
 800fca4:	f63f af56 	bhi.w	800fb54 <forward_relu+0xbc>
 800fca8:	460b      	mov	r3, r1
 800fcaa:	e7ef      	b.n	800fc8c <forward_relu+0x1f4>
 800fcac:	429c      	cmp	r4, r3
 800fcae:	ed62 7a01 	vstmdb	r2!, {s15}
 800fcb2:	f63f af4f 	bhi.w	800fb54 <forward_relu+0xbc>
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	e7e8      	b.n	800fc8c <forward_relu+0x1f4>
 800fcba:	68b3      	ldr	r3, [r6, #8]
 800fcbc:	ed93 7a02 	vldr	s14, [r3, #8]
 800fcc0:	edd3 6a00 	vldr	s13, [r3]
 800fcc4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fcc8:	ed93 6a01 	vldr	s12, [r3, #4]
 800fccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd0:	d401      	bmi.n	800fcd6 <forward_relu+0x23e>
 800fcd2:	462a      	mov	r2, r5
 800fcd4:	e71e      	b.n	800fb14 <forward_relu+0x7c>
 800fcd6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fcda:	462b      	mov	r3, r5
 800fcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce0:	f47f af6a 	bne.w	800fbb8 <forward_relu+0x120>
 800fce4:	e748      	b.n	800fb78 <forward_relu+0xe0>
 800fce6:	4622      	mov	r2, r4
 800fce8:	e7a1      	b.n	800fc2e <forward_relu+0x196>
 800fcea:	68b2      	ldr	r2, [r6, #8]
 800fcec:	4623      	mov	r3, r4
 800fcee:	ed92 7a00 	vldr	s14, [r2]
 800fcf2:	e7c8      	b.n	800fc86 <forward_relu+0x1ee>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	deff      	udf	#255	; 0xff
 800fcfa:	bf00      	nop
 800fcfc:	00000000 	.word	0x00000000

0800fd00 <forward_sm>:
 800fd00:	6982      	ldr	r2, [r0, #24]
 800fd02:	8813      	ldrh	r3, [r2, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d078      	beq.n	800fdfa <forward_sm+0xfa>
 800fd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd0c:	ed2d 8b04 	vpush	{d8-d9}
 800fd10:	6852      	ldr	r2, [r2, #4]
 800fd12:	b085      	sub	sp, #20
 800fd14:	6854      	ldr	r4, [r2, #4]
 800fd16:	b104      	cbz	r4, 800fd1a <forward_sm+0x1a>
 800fd18:	6824      	ldr	r4, [r4, #0]
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	d072      	beq.n	800fe04 <forward_sm+0x104>
 800fd1e:	6913      	ldr	r3, [r2, #16]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d072      	beq.n	800fe0a <forward_sm+0x10a>
 800fd24:	681e      	ldr	r6, [r3, #0]
 800fd26:	68a3      	ldr	r3, [r4, #8]
 800fd28:	68e0      	ldr	r0, [r4, #12]
 800fd2a:	68f2      	ldr	r2, [r6, #12]
 800fd2c:	0a1b      	lsrs	r3, r3, #8
 800fd2e:	6845      	ldr	r5, [r0, #4]
 800fd30:	6857      	ldr	r7, [r2, #4]
 800fd32:	d064      	beq.n	800fdfe <forward_sm+0xfe>
 800fd34:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fd38:	2201      	movs	r2, #1
 800fd3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd3e:	4298      	cmp	r0, r3
 800fd40:	fb01 f202 	mul.w	r2, r1, r2
 800fd44:	d1f9      	bne.n	800fd3a <forward_sm+0x3a>
 800fd46:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800fd4a:	69a2      	ldr	r2, [r4, #24]
 800fd4c:	69b3      	ldr	r3, [r6, #24]
 800fd4e:	6892      	ldr	r2, [r2, #8]
 800fd50:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800fd54:	eb02 0309 	add.w	r3, r2, r9
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	9301      	str	r3, [sp, #4]
 800fd5c:	d248      	bcs.n	800fdf0 <forward_sm+0xf0>
 800fd5e:	00bb      	lsls	r3, r7, #2
 800fd60:	2d01      	cmp	r5, #1
 800fd62:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800fd66:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800fd6a:	9303      	str	r3, [sp, #12]
 800fd6c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800fd70:	463e      	mov	r6, r7
 800fd72:	ed92 8a00 	vldr	s16, [r2]
 800fd76:	9302      	str	r3, [sp, #8]
 800fd78:	d937      	bls.n	800fdea <forward_sm+0xea>
 800fd7a:	1d13      	adds	r3, r2, #4
 800fd7c:	ecf3 7a01 	vldmia	r3!, {s15}
 800fd80:	429e      	cmp	r6, r3
 800fd82:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800fd86:	d1f9      	bne.n	800fd7c <forward_sm+0x7c>
 800fd88:	4692      	mov	sl, r2
 800fd8a:	46c3      	mov	fp, r8
 800fd8c:	46c1      	mov	r9, r8
 800fd8e:	eddf 8a20 	vldr	s17, [pc, #128]	; 800fe10 <forward_sm+0x110>
 800fd92:	2400      	movs	r4, #0
 800fd94:	ecba 0a01 	vldmia	sl!, {s0}
 800fd98:	3401      	adds	r4, #1
 800fd9a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800fd9e:	f002 f937 	bl	8012010 <expf>
 800fda2:	42a5      	cmp	r5, r4
 800fda4:	ee78 8a80 	vadd.f32	s17, s17, s0
 800fda8:	eca9 0a01 	vstmia	r9!, {s0}
 800fdac:	d8f2      	bhi.n	800fd94 <forward_sm+0x94>
 800fdae:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb6:	d00b      	beq.n	800fdd0 <forward_sm+0xd0>
 800fdb8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	eddb 7a00 	vldr	s15, [fp]
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	429d      	cmp	r5, r3
 800fdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdca:	eceb 7a01 	vstmia	fp!, {s15}
 800fdce:	d8f6      	bhi.n	800fdbe <forward_sm+0xbe>
 800fdd0:	9b03      	ldr	r3, [sp, #12]
 800fdd2:	463a      	mov	r2, r7
 800fdd4:	9901      	ldr	r1, [sp, #4]
 800fdd6:	4498      	add	r8, r3
 800fdd8:	9b02      	ldr	r3, [sp, #8]
 800fdda:	42b9      	cmp	r1, r7
 800fddc:	441e      	add	r6, r3
 800fdde:	d907      	bls.n	800fdf0 <forward_sm+0xf0>
 800fde0:	2d01      	cmp	r5, #1
 800fde2:	441f      	add	r7, r3
 800fde4:	ed92 8a00 	vldr	s16, [r2]
 800fde8:	d8c7      	bhi.n	800fd7a <forward_sm+0x7a>
 800fdea:	2d00      	cmp	r5, #0
 800fdec:	d0f0      	beq.n	800fdd0 <forward_sm+0xd0>
 800fdee:	e7cb      	b.n	800fd88 <forward_sm+0x88>
 800fdf0:	b005      	add	sp, #20
 800fdf2:	ecbd 8b04 	vpop	{d8-d9}
 800fdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	deff      	udf	#255	; 0xff
 800fdfe:	f04f 0904 	mov.w	r9, #4
 800fe02:	e7a2      	b.n	800fd4a <forward_sm+0x4a>
 800fe04:	2300      	movs	r3, #0
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	deff      	udf	#255	; 0xff
 800fe0a:	68db      	ldr	r3, [r3, #12]
 800fe0c:	deff      	udf	#255	; 0xff
 800fe0e:	bf00      	nop
 800fe10:	00000000 	.word	0x00000000

0800fe14 <forward_bn>:
 800fe14:	6982      	ldr	r2, [r0, #24]
 800fe16:	8813      	ldrh	r3, [r2, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d055      	beq.n	800fec8 <forward_bn+0xb4>
 800fe1c:	6852      	ldr	r2, [r2, #4]
 800fe1e:	6850      	ldr	r0, [r2, #4]
 800fe20:	b100      	cbz	r0, 800fe24 <forward_bn+0x10>
 800fe22:	6800      	ldr	r0, [r0, #0]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	f000 809c 	beq.w	800ff62 <forward_bn+0x14e>
 800fe2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe2e:	6915      	ldr	r5, [r2, #16]
 800fe30:	b105      	cbz	r5, 800fe34 <forward_bn+0x20>
 800fe32:	682d      	ldr	r5, [r5, #0]
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d049      	beq.n	800fecc <forward_bn+0xb8>
 800fe38:	69d1      	ldr	r1, [r2, #28]
 800fe3a:	2900      	cmp	r1, #0
 800fe3c:	d049      	beq.n	800fed2 <forward_bn+0xbe>
 800fe3e:	8b13      	ldrh	r3, [r2, #24]
 800fe40:	f8d1 c000 	ldr.w	ip, [r1]
 800fe44:	2b01      	cmp	r3, #1
 800fe46:	d945      	bls.n	800fed4 <forward_bn+0xc0>
 800fe48:	6883      	ldr	r3, [r0, #8]
 800fe4a:	684f      	ldr	r7, [r1, #4]
 800fe4c:	0a1b      	lsrs	r3, r3, #8
 800fe4e:	d06c      	beq.n	800ff2a <forward_bn+0x116>
 800fe50:	68c1      	ldr	r1, [r0, #12]
 800fe52:	2401      	movs	r4, #1
 800fe54:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fe58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fe5c:	428b      	cmp	r3, r1
 800fe5e:	fb02 f404 	mul.w	r4, r2, r4
 800fe62:	d1f9      	bne.n	800fe58 <forward_bn+0x44>
 800fe64:	69aa      	ldr	r2, [r5, #24]
 800fe66:	6981      	ldr	r1, [r0, #24]
 800fe68:	685d      	ldr	r5, [r3, #4]
 800fe6a:	6888      	ldr	r0, [r1, #8]
 800fe6c:	6896      	ldr	r6, [r2, #8]
 800fe6e:	b3b7      	cbz	r7, 800fede <forward_bn+0xca>
 800fe70:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800fe7a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800fe7e:	b30c      	cbz	r4, 800fec4 <forward_bn+0xb0>
 800fe80:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800fe84:	f04f 0e00 	mov.w	lr, #0
 800fe88:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800fe8c:	00bf      	lsls	r7, r7, #2
 800fe8e:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800fe92:	4672      	mov	r2, lr
 800fe94:	44ae      	add	lr, r5
 800fe96:	4596      	cmp	lr, r2
 800fe98:	d911      	bls.n	800febe <forward_bn+0xaa>
 800fe9a:	eb07 030c 	add.w	r3, r7, ip
 800fe9e:	4648      	mov	r0, r9
 800fea0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800fea4:	4641      	mov	r1, r8
 800fea6:	ecf3 6a01 	vldmia	r3!, {s13}
 800feaa:	ecb0 7a01 	vldmia	r0!, {s14}
 800feae:	ecf1 7a01 	vldmia	r1!, {s15}
 800feb2:	4563      	cmp	r3, ip
 800feb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800feb8:	ece2 7a01 	vstmia	r2!, {s15}
 800febc:	d1f3      	bne.n	800fea6 <forward_bn+0x92>
 800febe:	4574      	cmp	r4, lr
 800fec0:	44d4      	add	ip, sl
 800fec2:	d8e6      	bhi.n	800fe92 <forward_bn+0x7e>
 800fec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	deff      	udf	#255	; 0xff
 800fecc:	2300      	movs	r3, #0
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	deff      	udf	#255	; 0xff
 800fed2:	468c      	mov	ip, r1
 800fed4:	6883      	ldr	r3, [r0, #8]
 800fed6:	0a1b      	lsrs	r3, r3, #8
 800fed8:	d037      	beq.n	800ff4a <forward_bn+0x136>
 800feda:	2700      	movs	r7, #0
 800fedc:	e7b8      	b.n	800fe50 <forward_bn+0x3c>
 800fede:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800fee2:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800fee6:	2c00      	cmp	r4, #0
 800fee8:	d0ec      	beq.n	800fec4 <forward_bn+0xb0>
 800feea:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800feee:	46b6      	mov	lr, r6
 800fef0:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800fef4:	f04f 0c00 	mov.w	ip, #0
 800fef8:	00bf      	lsls	r7, r7, #2
 800fefa:	00ae      	lsls	r6, r5, #2
 800fefc:	4663      	mov	r3, ip
 800fefe:	44ac      	add	ip, r5
 800ff00:	4563      	cmp	r3, ip
 800ff02:	d20c      	bcs.n	800ff1e <forward_bn+0x10a>
 800ff04:	19c3      	adds	r3, r0, r7
 800ff06:	4641      	mov	r1, r8
 800ff08:	4672      	mov	r2, lr
 800ff0a:	ecf3 7a01 	vldmia	r3!, {s15}
 800ff0e:	ecb1 7a01 	vldmia	r1!, {s14}
 800ff12:	4298      	cmp	r0, r3
 800ff14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff18:	ece2 7a01 	vstmia	r2!, {s15}
 800ff1c:	d1f5      	bne.n	800ff0a <forward_bn+0xf6>
 800ff1e:	4564      	cmp	r4, ip
 800ff20:	44b6      	add	lr, r6
 800ff22:	4430      	add	r0, r6
 800ff24:	d8ea      	bhi.n	800fefc <forward_bn+0xe8>
 800ff26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff2a:	68c1      	ldr	r1, [r0, #12]
 800ff2c:	69ab      	ldr	r3, [r5, #24]
 800ff2e:	6982      	ldr	r2, [r0, #24]
 800ff30:	684d      	ldr	r5, [r1, #4]
 800ff32:	6890      	ldr	r0, [r2, #8]
 800ff34:	689e      	ldr	r6, [r3, #8]
 800ff36:	b177      	cbz	r7, 800ff56 <forward_bn+0x142>
 800ff38:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800ff3c:	2401      	movs	r4, #1
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800ff44:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ff48:	e79a      	b.n	800fe80 <forward_bn+0x6c>
 800ff4a:	68c1      	ldr	r1, [r0, #12]
 800ff4c:	69ab      	ldr	r3, [r5, #24]
 800ff4e:	6982      	ldr	r2, [r0, #24]
 800ff50:	684d      	ldr	r5, [r1, #4]
 800ff52:	6890      	ldr	r0, [r2, #8]
 800ff54:	689e      	ldr	r6, [r3, #8]
 800ff56:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800ff5a:	2401      	movs	r4, #1
 800ff5c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ff60:	e7c3      	b.n	800feea <forward_bn+0xd6>
 800ff62:	2300      	movs	r3, #0
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	deff      	udf	#255	; 0xff

0800ff68 <ai_check_custom_types>:
 800ff68:	b082      	sub	sp, #8
 800ff6a:	4b12      	ldr	r3, [pc, #72]	; (800ffb4 <ai_check_custom_types+0x4c>)
 800ff6c:	9301      	str	r3, [sp, #4]
 800ff6e:	b118      	cbz	r0, 800ff78 <ai_check_custom_types+0x10>
 800ff70:	7803      	ldrb	r3, [r0, #0]
 800ff72:	2b03      	cmp	r3, #3
 800ff74:	d002      	beq.n	800ff7c <ai_check_custom_types+0x14>
 800ff76:	2000      	movs	r0, #0
 800ff78:	b002      	add	sp, #8
 800ff7a:	4770      	bx	lr
 800ff7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d004      	beq.n	800ff8e <ai_check_custom_types+0x26>
 800ff84:	2001      	movs	r0, #1
 800ff86:	f080 0001 	eor.w	r0, r0, #1
 800ff8a:	b002      	add	sp, #8
 800ff8c:	4770      	bx	lr
 800ff8e:	7842      	ldrb	r2, [r0, #1]
 800ff90:	3001      	adds	r0, #1
 800ff92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d1f4      	bne.n	800ff84 <ai_check_custom_types+0x1c>
 800ff9a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ff9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d1ee      	bne.n	800ff84 <ai_check_custom_types+0x1c>
 800ffa6:	7842      	ldrb	r2, [r0, #1]
 800ffa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d1e9      	bne.n	800ff84 <ai_check_custom_types+0x1c>
 800ffb0:	2000      	movs	r0, #0
 800ffb2:	e7e8      	b.n	800ff86 <ai_check_custom_types+0x1e>
 800ffb4:	84048403 	.word	0x84048403

0800ffb8 <ai_layers_init_all>:
 800ffb8:	2100      	movs	r1, #0
 800ffba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ffbc:	b13b      	cbz	r3, 800ffce <ai_layers_init_all+0x16>
 800ffbe:	691a      	ldr	r2, [r3, #16]
 800ffc0:	3101      	adds	r1, #1
 800ffc2:	60d8      	str	r0, [r3, #12]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	d001      	beq.n	800ffce <ai_layers_init_all+0x16>
 800ffca:	2a00      	cmp	r2, #0
 800ffcc:	d1f6      	bne.n	800ffbc <ai_layers_init_all+0x4>
 800ffce:	4608      	mov	r0, r1
 800ffd0:	4770      	bx	lr
 800ffd2:	bf00      	nop

0800ffd4 <ai_layers_post_init_all>:
 800ffd4:	b538      	push	{r3, r4, r5, lr}
 800ffd6:	2500      	movs	r5, #0
 800ffd8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ffda:	b16c      	cbz	r4, 800fff8 <ai_layers_post_init_all+0x24>
 800ffdc:	6863      	ldr	r3, [r4, #4]
 800ffde:	07db      	lsls	r3, r3, #31
 800ffe0:	d504      	bpl.n	800ffec <ai_layers_post_init_all+0x18>
 800ffe2:	6a23      	ldr	r3, [r4, #32]
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	b10b      	cbz	r3, 800ffec <ai_layers_post_init_all+0x18>
 800ffe8:	3501      	adds	r5, #1
 800ffea:	4798      	blx	r3
 800ffec:	6923      	ldr	r3, [r4, #16]
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	461c      	mov	r4, r3
 800fff2:	d001      	beq.n	800fff8 <ai_layers_post_init_all+0x24>
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1f0      	bne.n	800ffda <ai_layers_post_init_all+0x6>
 800fff8:	4628      	mov	r0, r5
 800fffa:	bd38      	pop	{r3, r4, r5, pc}

0800fffc <ai_layers_forward_all>:
 800fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010000:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8010004:	4604      	mov	r4, r0
 8010006:	f1b8 0f00 	cmp.w	r8, #0
 801000a:	d02a      	beq.n	8010062 <ai_layers_forward_all+0x66>
 801000c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801000e:	6381      	str	r1, [r0, #56]	; 0x38
 8010010:	b319      	cbz	r1, 801005a <ai_layers_forward_all+0x5e>
 8010012:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010014:	2001      	movs	r0, #1
 8010016:	47c0      	blx	r8
 8010018:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801001a:	b1f6      	cbz	r6, 801005a <ai_layers_forward_all+0x5e>
 801001c:	2700      	movs	r7, #0
 801001e:	4631      	mov	r1, r6
 8010020:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010022:	2002      	movs	r0, #2
 8010024:	47c0      	blx	r8
 8010026:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010028:	4628      	mov	r0, r5
 801002a:	696b      	ldr	r3, [r5, #20]
 801002c:	4798      	blx	r3
 801002e:	692e      	ldr	r6, [r5, #16]
 8010030:	2003      	movs	r0, #3
 8010032:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010034:	42b5      	cmp	r5, r6
 8010036:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010038:	d007      	beq.n	801004a <ai_layers_forward_all+0x4e>
 801003a:	47c0      	blx	r8
 801003c:	3701      	adds	r7, #1
 801003e:	63a6      	str	r6, [r4, #56]	; 0x38
 8010040:	2e00      	cmp	r6, #0
 8010042:	d1ec      	bne.n	801001e <ai_layers_forward_all+0x22>
 8010044:	4638      	mov	r0, r7
 8010046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801004a:	2003      	movs	r0, #3
 801004c:	3701      	adds	r7, #1
 801004e:	47c0      	blx	r8
 8010050:	2300      	movs	r3, #0
 8010052:	4638      	mov	r0, r7
 8010054:	63a3      	str	r3, [r4, #56]	; 0x38
 8010056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801005a:	2700      	movs	r7, #0
 801005c:	4638      	mov	r0, r7
 801005e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010062:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010064:	6385      	str	r5, [r0, #56]	; 0x38
 8010066:	2d00      	cmp	r5, #0
 8010068:	d0f7      	beq.n	801005a <ai_layers_forward_all+0x5e>
 801006a:	4647      	mov	r7, r8
 801006c:	696b      	ldr	r3, [r5, #20]
 801006e:	4628      	mov	r0, r5
 8010070:	4798      	blx	r3
 8010072:	462b      	mov	r3, r5
 8010074:	692d      	ldr	r5, [r5, #16]
 8010076:	429d      	cmp	r5, r3
 8010078:	d004      	beq.n	8010084 <ai_layers_forward_all+0x88>
 801007a:	3701      	adds	r7, #1
 801007c:	63a5      	str	r5, [r4, #56]	; 0x38
 801007e:	2d00      	cmp	r5, #0
 8010080:	d1f4      	bne.n	801006c <ai_layers_forward_all+0x70>
 8010082:	e7df      	b.n	8010044 <ai_layers_forward_all+0x48>
 8010084:	2300      	movs	r3, #0
 8010086:	3701      	adds	r7, #1
 8010088:	63a3      	str	r3, [r4, #56]	; 0x38
 801008a:	e7db      	b.n	8010044 <ai_layers_forward_all+0x48>

0801008c <lite_dense_if32of32wf32>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	ed2d 8b0c 	vpush	{d8-d13}
 8010094:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8010098:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 801009c:	4287      	cmp	r7, r0
 801009e:	f240 8105 	bls.w	80102ac <lite_dense_if32of32wf32+0x220>
 80100a2:	f1a6 0810 	sub.w	r8, r6, #16
 80100a6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80100aa:	4605      	mov	r5, r0
 80100ac:	f006 0b0f 	and.w	fp, r6, #15
 80100b0:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80100b4:	f108 0801 	add.w	r8, r8, #1
 80100b8:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80100bc:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80100c0:	2e0f      	cmp	r6, #15
 80100c2:	ed9f 7a85 	vldr	s14, [pc, #532]	; 80102d8 <lite_dense_if32of32wf32+0x24c>
 80100c6:	f240 8102 	bls.w	80102ce <lite_dense_if32of32wf32+0x242>
 80100ca:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80100ce:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80100d2:	46b6      	mov	lr, r6
 80100d4:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 80100d8:	f1ae 0e10 	sub.w	lr, lr, #16
 80100dc:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80100e0:	3440      	adds	r4, #64	; 0x40
 80100e2:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 80100e6:	f1be 0f0f 	cmp.w	lr, #15
 80100ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80100ee:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 80100f2:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80100f6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80100fa:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 80100fe:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010102:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8010106:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 801010a:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 801010e:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8010112:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8010116:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 801011a:	eee5 7a86 	vfma.f32	s15, s11, s12
 801011e:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8010122:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8010126:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 801012a:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 801012e:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 8010132:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8010136:	eeed 7a26 	vfma.f32	s15, s26, s13
 801013a:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 801013e:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 8010142:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8010146:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 801014a:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 801014e:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 8010152:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010156:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 801015a:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 801015e:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8010162:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8010166:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 801016a:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 801016e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010172:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8010176:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 801017a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801017e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010182:	eee8 7a88 	vfma.f32	s15, s17, s16
 8010186:	eee0 7a20 	vfma.f32	s15, s0, s1
 801018a:	eee1 7a21 	vfma.f32	s15, s2, s3
 801018e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8010192:	eee3 7a23 	vfma.f32	s15, s6, s7
 8010196:	eee4 7a24 	vfma.f32	s15, s8, s9
 801019a:	eee5 7a25 	vfma.f32	s15, s10, s11
 801019e:	eee6 7a26 	vfma.f32	s15, s12, s13
 80101a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101a6:	d895      	bhi.n	80100d4 <lite_dense_if32of32wf32+0x48>
 80101a8:	eb02 0e0a 	add.w	lr, r2, sl
 80101ac:	465c      	mov	r4, fp
 80101ae:	46c4      	mov	ip, r8
 80101b0:	2c00      	cmp	r4, #0
 80101b2:	d075      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 80101b4:	eddc 6a00 	vldr	s13, [ip]
 80101b8:	2c01      	cmp	r4, #1
 80101ba:	edde 7a00 	vldr	s15, [lr]
 80101be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101c2:	d06d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 80101c4:	eddc 6a01 	vldr	s13, [ip, #4]
 80101c8:	2c02      	cmp	r4, #2
 80101ca:	edde 7a01 	vldr	s15, [lr, #4]
 80101ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101d2:	d065      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 80101d4:	eddc 6a02 	vldr	s13, [ip, #8]
 80101d8:	2c03      	cmp	r4, #3
 80101da:	edde 7a02 	vldr	s15, [lr, #8]
 80101de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101e2:	d05d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 80101e4:	eddc 6a03 	vldr	s13, [ip, #12]
 80101e8:	2c04      	cmp	r4, #4
 80101ea:	edde 7a03 	vldr	s15, [lr, #12]
 80101ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101f2:	d055      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 80101f4:	eddc 6a04 	vldr	s13, [ip, #16]
 80101f8:	2c05      	cmp	r4, #5
 80101fa:	edde 7a04 	vldr	s15, [lr, #16]
 80101fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010202:	d04d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010204:	eddc 6a05 	vldr	s13, [ip, #20]
 8010208:	2c06      	cmp	r4, #6
 801020a:	edde 7a05 	vldr	s15, [lr, #20]
 801020e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010212:	d045      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010214:	eddc 6a06 	vldr	s13, [ip, #24]
 8010218:	2c07      	cmp	r4, #7
 801021a:	edde 7a06 	vldr	s15, [lr, #24]
 801021e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010222:	d03d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010224:	eddc 6a07 	vldr	s13, [ip, #28]
 8010228:	2c08      	cmp	r4, #8
 801022a:	edde 7a07 	vldr	s15, [lr, #28]
 801022e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010232:	d035      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010234:	eddc 6a08 	vldr	s13, [ip, #32]
 8010238:	2c09      	cmp	r4, #9
 801023a:	edde 7a08 	vldr	s15, [lr, #32]
 801023e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010242:	d02d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010244:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8010248:	2c0a      	cmp	r4, #10
 801024a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 801024e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010252:	d025      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010254:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8010258:	2c0b      	cmp	r4, #11
 801025a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 801025e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010262:	d01d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010264:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8010268:	2c0c      	cmp	r4, #12
 801026a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 801026e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010272:	d015      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010274:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8010278:	3c0d      	subs	r4, #13
 801027a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 801027e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010282:	d00d      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010284:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8010288:	2c01      	cmp	r4, #1
 801028a:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 801028e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010292:	d005      	beq.n	80102a0 <lite_dense_if32of32wf32+0x214>
 8010294:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8010298:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 801029c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102a0:	eca5 7a01 	vstmia	r5!, {s14}
 80102a4:	42af      	cmp	r7, r5
 80102a6:	444a      	add	r2, r9
 80102a8:	f63f af0a 	bhi.w	80100c0 <lite_dense_if32of32wf32+0x34>
 80102ac:	b15b      	cbz	r3, 80102c6 <lite_dense_if32of32wf32+0x23a>
 80102ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80102b0:	b14a      	cbz	r2, 80102c6 <lite_dense_if32of32wf32+0x23a>
 80102b2:	edd0 7a00 	vldr	s15, [r0]
 80102b6:	ecb3 7a01 	vldmia	r3!, {s14}
 80102ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102be:	ece0 7a01 	vstmia	r0!, {s15}
 80102c2:	4287      	cmp	r7, r0
 80102c4:	d1f5      	bne.n	80102b2 <lite_dense_if32of32wf32+0x226>
 80102c6:	ecbd 8b0c 	vpop	{d8-d13}
 80102ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ce:	4634      	mov	r4, r6
 80102d0:	4696      	mov	lr, r2
 80102d2:	468c      	mov	ip, r1
 80102d4:	e76c      	b.n	80101b0 <lite_dense_if32of32wf32+0x124>
 80102d6:	bf00      	nop
 80102d8:	00000000 	.word	0x00000000

080102dc <ai_version_get>:
 80102dc:	0212      	lsls	r2, r2, #8
 80102de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80102e2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80102e6:	4770      	bx	lr

080102e8 <get_tensor_byte_size>:
 80102e8:	b430      	push	{r4, r5}
 80102ea:	6985      	ldr	r5, [r0, #24]
 80102ec:	68c4      	ldr	r4, [r0, #12]
 80102ee:	6941      	ldr	r1, [r0, #20]
 80102f0:	4b06      	ldr	r3, [pc, #24]	; (801030c <get_tensor_byte_size+0x24>)
 80102f2:	6828      	ldr	r0, [r5, #0]
 80102f4:	4a06      	ldr	r2, [pc, #24]	; (8010310 <get_tensor_byte_size+0x28>)
 80102f6:	4003      	ands	r3, r0
 80102f8:	68c9      	ldr	r1, [r1, #12]
 80102fa:	68e0      	ldr	r0, [r4, #12]
 80102fc:	4293      	cmp	r3, r2
 80102fe:	fb01 f000 	mul.w	r0, r1, r0
 8010302:	d101      	bne.n	8010308 <get_tensor_byte_size+0x20>
 8010304:	3007      	adds	r0, #7
 8010306:	08c0      	lsrs	r0, r0, #3
 8010308:	bc30      	pop	{r4, r5}
 801030a:	4770      	bx	lr
 801030c:	017fffff 	.word	0x017fffff
 8010310:	000400c0 	.word	0x000400c0

08010314 <ai_array_to_buffer_fmt>:
 8010314:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010318:	2b02      	cmp	r3, #2
 801031a:	d050      	beq.n	80103be <ai_array_to_buffer_fmt+0xaa>
 801031c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8010320:	4b29      	ldr	r3, [pc, #164]	; (80103c8 <ai_array_to_buffer_fmt+0xb4>)
 8010322:	429a      	cmp	r2, r3
 8010324:	d00b      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010326:	dc1c      	bgt.n	8010362 <ai_array_to_buffer_fmt+0x4e>
 8010328:	4b28      	ldr	r3, [pc, #160]	; (80103cc <ai_array_to_buffer_fmt+0xb8>)
 801032a:	429a      	cmp	r2, r3
 801032c:	d007      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 801032e:	dd0b      	ble.n	8010348 <ai_array_to_buffer_fmt+0x34>
 8010330:	4b27      	ldr	r3, [pc, #156]	; (80103d0 <ai_array_to_buffer_fmt+0xbc>)
 8010332:	429a      	cmp	r2, r3
 8010334:	d003      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010336:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 801033a:	429a      	cmp	r2, r3
 801033c:	d131      	bne.n	80103a2 <ai_array_to_buffer_fmt+0x8e>
 801033e:	4613      	mov	r3, r2
 8010340:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010344:	4318      	orrs	r0, r3
 8010346:	4770      	bx	lr
 8010348:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801034c:	429a      	cmp	r2, r3
 801034e:	d0f6      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010350:	dd2c      	ble.n	80103ac <ai_array_to_buffer_fmt+0x98>
 8010352:	4b20      	ldr	r3, [pc, #128]	; (80103d4 <ai_array_to_buffer_fmt+0xc0>)
 8010354:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010358:	429a      	cmp	r2, r3
 801035a:	bf18      	it	ne
 801035c:	2340      	movne	r3, #64	; 0x40
 801035e:	4318      	orrs	r0, r3
 8010360:	4770      	bx	lr
 8010362:	4b1d      	ldr	r3, [pc, #116]	; (80103d8 <ai_array_to_buffer_fmt+0xc4>)
 8010364:	429a      	cmp	r2, r3
 8010366:	d0ea      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010368:	dd0e      	ble.n	8010388 <ai_array_to_buffer_fmt+0x74>
 801036a:	4b1c      	ldr	r3, [pc, #112]	; (80103dc <ai_array_to_buffer_fmt+0xc8>)
 801036c:	429a      	cmp	r2, r3
 801036e:	d0e6      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010370:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8010374:	429a      	cmp	r2, r3
 8010376:	d0e2      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010378:	4b19      	ldr	r3, [pc, #100]	; (80103e0 <ai_array_to_buffer_fmt+0xcc>)
 801037a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801037e:	429a      	cmp	r2, r3
 8010380:	bf18      	it	ne
 8010382:	2340      	movne	r3, #64	; 0x40
 8010384:	4318      	orrs	r0, r3
 8010386:	4770      	bx	lr
 8010388:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801038c:	429a      	cmp	r2, r3
 801038e:	d0d6      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010390:	3307      	adds	r3, #7
 8010392:	429a      	cmp	r2, r3
 8010394:	d0d3      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 8010396:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 801039a:	429a      	cmp	r2, r3
 801039c:	bf18      	it	ne
 801039e:	2340      	movne	r3, #64	; 0x40
 80103a0:	e7ce      	b.n	8010340 <ai_array_to_buffer_fmt+0x2c>
 80103a2:	4b10      	ldr	r3, [pc, #64]	; (80103e4 <ai_array_to_buffer_fmt+0xd0>)
 80103a4:	429a      	cmp	r2, r3
 80103a6:	bf18      	it	ne
 80103a8:	2340      	movne	r3, #64	; 0x40
 80103aa:	e7c9      	b.n	8010340 <ai_array_to_buffer_fmt+0x2c>
 80103ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d0c4      	beq.n	801033e <ai_array_to_buffer_fmt+0x2a>
 80103b4:	3380      	adds	r3, #128	; 0x80
 80103b6:	429a      	cmp	r2, r3
 80103b8:	bf18      	it	ne
 80103ba:	2340      	movne	r3, #64	; 0x40
 80103bc:	e7c0      	b.n	8010340 <ai_array_to_buffer_fmt+0x2c>
 80103be:	4b0a      	ldr	r3, [pc, #40]	; (80103e8 <ai_array_to_buffer_fmt+0xd4>)
 80103c0:	4003      	ands	r3, r0
 80103c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80103c6:	e7bb      	b.n	8010340 <ai_array_to_buffer_fmt+0x2c>
 80103c8:	00840040 	.word	0x00840040
 80103cc:	00040840 	.word	0x00040840
 80103d0:	00041040 	.word	0x00041040
 80103d4:	00040447 	.word	0x00040447
 80103d8:	00840840 	.word	0x00840840
 80103dc:	00841040 	.word	0x00841040
 80103e0:	0084084f 	.word	0x0084084f
 80103e4:	0004084f 	.word	0x0004084f
 80103e8:	00803fff 	.word	0x00803fff

080103ec <ai_array_get_byte_size>:
 80103ec:	b319      	cbz	r1, 8010436 <ai_array_get_byte_size+0x4a>
 80103ee:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80103f2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80103f6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80103fa:	11c0      	asrs	r0, r0, #7
 80103fc:	fb03 f101 	mul.w	r1, r3, r1
 8010400:	2a04      	cmp	r2, #4
 8010402:	f101 0107 	add.w	r1, r1, #7
 8010406:	f021 0107 	bic.w	r1, r1, #7
 801040a:	fa21 f10c 	lsr.w	r1, r1, ip
 801040e:	d00b      	beq.n	8010428 <ai_array_get_byte_size+0x3c>
 8010410:	2a08      	cmp	r2, #8
 8010412:	d002      	beq.n	801041a <ai_array_get_byte_size+0x2e>
 8010414:	3107      	adds	r1, #7
 8010416:	08c8      	lsrs	r0, r1, #3
 8010418:	4770      	bx	lr
 801041a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801041e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8010422:	3107      	adds	r1, #7
 8010424:	08c8      	lsrs	r0, r1, #3
 8010426:	4770      	bx	lr
 8010428:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801042c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8010430:	3107      	adds	r1, #7
 8010432:	08c8      	lsrs	r0, r1, #3
 8010434:	4770      	bx	lr
 8010436:	4608      	mov	r0, r1
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop

0801043c <ai_array_get_data_byte_size>:
 801043c:	b161      	cbz	r1, 8010458 <ai_array_get_data_byte_size+0x1c>
 801043e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8010442:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8010446:	fb03 f101 	mul.w	r1, r3, r1
 801044a:	1dc8      	adds	r0, r1, #7
 801044c:	f020 0007 	bic.w	r0, r0, #7
 8010450:	40d0      	lsrs	r0, r2
 8010452:	3007      	adds	r0, #7
 8010454:	08c0      	lsrs	r0, r0, #3
 8010456:	4770      	bx	lr
 8010458:	4608      	mov	r0, r1
 801045a:	4770      	bx	lr

0801045c <arm_rfft_fast_init_f32>:
 801045c:	084b      	lsrs	r3, r1, #1
 801045e:	2b80      	cmp	r3, #128	; 0x80
 8010460:	b430      	push	{r4, r5}
 8010462:	8201      	strh	r1, [r0, #16]
 8010464:	8003      	strh	r3, [r0, #0]
 8010466:	d070      	beq.n	801054a <arm_rfft_fast_init_f32+0xee>
 8010468:	d916      	bls.n	8010498 <arm_rfft_fast_init_f32+0x3c>
 801046a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801046e:	d05f      	beq.n	8010530 <arm_rfft_fast_init_f32+0xd4>
 8010470:	d936      	bls.n	80104e0 <arm_rfft_fast_init_f32+0x84>
 8010472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010476:	d026      	beq.n	80104c6 <arm_rfft_fast_init_f32+0x6a>
 8010478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801047c:	d112      	bne.n	80104a4 <arm_rfft_fast_init_f32+0x48>
 801047e:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 8010482:	4c38      	ldr	r4, [pc, #224]	; (8010564 <arm_rfft_fast_init_f32+0x108>)
 8010484:	4938      	ldr	r1, [pc, #224]	; (8010568 <arm_rfft_fast_init_f32+0x10c>)
 8010486:	2300      	movs	r3, #0
 8010488:	4a38      	ldr	r2, [pc, #224]	; (801056c <arm_rfft_fast_init_f32+0x110>)
 801048a:	8185      	strh	r5, [r0, #12]
 801048c:	6084      	str	r4, [r0, #8]
 801048e:	6041      	str	r1, [r0, #4]
 8010490:	6142      	str	r2, [r0, #20]
 8010492:	4618      	mov	r0, r3
 8010494:	bc30      	pop	{r4, r5}
 8010496:	4770      	bx	lr
 8010498:	2b20      	cmp	r3, #32
 801049a:	d031      	beq.n	8010500 <arm_rfft_fast_init_f32+0xa4>
 801049c:	2b40      	cmp	r3, #64	; 0x40
 801049e:	d006      	beq.n	80104ae <arm_rfft_fast_init_f32+0x52>
 80104a0:	2b10      	cmp	r3, #16
 80104a2:	d039      	beq.n	8010518 <arm_rfft_fast_init_f32+0xbc>
 80104a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104a8:	bc30      	pop	{r4, r5}
 80104aa:	4618      	mov	r0, r3
 80104ac:	4770      	bx	lr
 80104ae:	2538      	movs	r5, #56	; 0x38
 80104b0:	4c2f      	ldr	r4, [pc, #188]	; (8010570 <arm_rfft_fast_init_f32+0x114>)
 80104b2:	4930      	ldr	r1, [pc, #192]	; (8010574 <arm_rfft_fast_init_f32+0x118>)
 80104b4:	2300      	movs	r3, #0
 80104b6:	4a30      	ldr	r2, [pc, #192]	; (8010578 <arm_rfft_fast_init_f32+0x11c>)
 80104b8:	8185      	strh	r5, [r0, #12]
 80104ba:	6084      	str	r4, [r0, #8]
 80104bc:	6041      	str	r1, [r0, #4]
 80104be:	6142      	str	r2, [r0, #20]
 80104c0:	4618      	mov	r0, r3
 80104c2:	bc30      	pop	{r4, r5}
 80104c4:	4770      	bx	lr
 80104c6:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80104ca:	4c2c      	ldr	r4, [pc, #176]	; (801057c <arm_rfft_fast_init_f32+0x120>)
 80104cc:	492c      	ldr	r1, [pc, #176]	; (8010580 <arm_rfft_fast_init_f32+0x124>)
 80104ce:	2300      	movs	r3, #0
 80104d0:	4a2c      	ldr	r2, [pc, #176]	; (8010584 <arm_rfft_fast_init_f32+0x128>)
 80104d2:	8185      	strh	r5, [r0, #12]
 80104d4:	6084      	str	r4, [r0, #8]
 80104d6:	6041      	str	r1, [r0, #4]
 80104d8:	6142      	str	r2, [r0, #20]
 80104da:	4618      	mov	r0, r3
 80104dc:	bc30      	pop	{r4, r5}
 80104de:	4770      	bx	lr
 80104e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104e4:	d1de      	bne.n	80104a4 <arm_rfft_fast_init_f32+0x48>
 80104e6:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 80104ea:	4c27      	ldr	r4, [pc, #156]	; (8010588 <arm_rfft_fast_init_f32+0x12c>)
 80104ec:	4927      	ldr	r1, [pc, #156]	; (801058c <arm_rfft_fast_init_f32+0x130>)
 80104ee:	2300      	movs	r3, #0
 80104f0:	4a27      	ldr	r2, [pc, #156]	; (8010590 <arm_rfft_fast_init_f32+0x134>)
 80104f2:	8185      	strh	r5, [r0, #12]
 80104f4:	6084      	str	r4, [r0, #8]
 80104f6:	6041      	str	r1, [r0, #4]
 80104f8:	6142      	str	r2, [r0, #20]
 80104fa:	4618      	mov	r0, r3
 80104fc:	bc30      	pop	{r4, r5}
 80104fe:	4770      	bx	lr
 8010500:	2530      	movs	r5, #48	; 0x30
 8010502:	4c24      	ldr	r4, [pc, #144]	; (8010594 <arm_rfft_fast_init_f32+0x138>)
 8010504:	4924      	ldr	r1, [pc, #144]	; (8010598 <arm_rfft_fast_init_f32+0x13c>)
 8010506:	2300      	movs	r3, #0
 8010508:	4a24      	ldr	r2, [pc, #144]	; (801059c <arm_rfft_fast_init_f32+0x140>)
 801050a:	8185      	strh	r5, [r0, #12]
 801050c:	6084      	str	r4, [r0, #8]
 801050e:	6041      	str	r1, [r0, #4]
 8010510:	6142      	str	r2, [r0, #20]
 8010512:	4618      	mov	r0, r3
 8010514:	bc30      	pop	{r4, r5}
 8010516:	4770      	bx	lr
 8010518:	2514      	movs	r5, #20
 801051a:	4c21      	ldr	r4, [pc, #132]	; (80105a0 <arm_rfft_fast_init_f32+0x144>)
 801051c:	4921      	ldr	r1, [pc, #132]	; (80105a4 <arm_rfft_fast_init_f32+0x148>)
 801051e:	2300      	movs	r3, #0
 8010520:	4a21      	ldr	r2, [pc, #132]	; (80105a8 <arm_rfft_fast_init_f32+0x14c>)
 8010522:	8185      	strh	r5, [r0, #12]
 8010524:	6084      	str	r4, [r0, #8]
 8010526:	6041      	str	r1, [r0, #4]
 8010528:	6142      	str	r2, [r0, #20]
 801052a:	4618      	mov	r0, r3
 801052c:	bc30      	pop	{r4, r5}
 801052e:	4770      	bx	lr
 8010530:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8010534:	4c1d      	ldr	r4, [pc, #116]	; (80105ac <arm_rfft_fast_init_f32+0x150>)
 8010536:	491e      	ldr	r1, [pc, #120]	; (80105b0 <arm_rfft_fast_init_f32+0x154>)
 8010538:	2300      	movs	r3, #0
 801053a:	4a1e      	ldr	r2, [pc, #120]	; (80105b4 <arm_rfft_fast_init_f32+0x158>)
 801053c:	8185      	strh	r5, [r0, #12]
 801053e:	6084      	str	r4, [r0, #8]
 8010540:	6041      	str	r1, [r0, #4]
 8010542:	6142      	str	r2, [r0, #20]
 8010544:	4618      	mov	r0, r3
 8010546:	bc30      	pop	{r4, r5}
 8010548:	4770      	bx	lr
 801054a:	25d0      	movs	r5, #208	; 0xd0
 801054c:	4c1a      	ldr	r4, [pc, #104]	; (80105b8 <arm_rfft_fast_init_f32+0x15c>)
 801054e:	491b      	ldr	r1, [pc, #108]	; (80105bc <arm_rfft_fast_init_f32+0x160>)
 8010550:	2300      	movs	r3, #0
 8010552:	4a1b      	ldr	r2, [pc, #108]	; (80105c0 <arm_rfft_fast_init_f32+0x164>)
 8010554:	8185      	strh	r5, [r0, #12]
 8010556:	6084      	str	r4, [r0, #8]
 8010558:	6041      	str	r1, [r0, #4]
 801055a:	6142      	str	r2, [r0, #20]
 801055c:	4618      	mov	r0, r3
 801055e:	bc30      	pop	{r4, r5}
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop
 8010564:	081804f0 	.word	0x081804f0
 8010568:	081716e8 	.word	0x081716e8
 801056c:	08177858 	.word	0x08177858
 8010570:	081757e8 	.word	0x081757e8
 8010574:	081822b0 	.word	0x081822b0
 8010578:	081847a0 	.word	0x081847a0
 801057c:	0817e1d8 	.word	0x0817e1d8
 8010580:	0817c0d8 	.word	0x0817c0d8
 8010584:	08175858 	.word	0x08175858
 8010588:	08184430 	.word	0x08184430
 801058c:	0817b858 	.word	0x0817b858
 8010590:	081824b0 	.word	0x081824b0
 8010594:	0817f090 	.word	0x0817f090
 8010598:	0817e0d8 	.word	0x0817e0d8
 801059c:	081756e8 	.word	0x081756e8
 80105a0:	0817efe8 	.word	0x0817efe8
 80105a4:	0817c058 	.word	0x0817c058
 80105a8:	0817f010 	.word	0x0817f010
 80105ac:	08182cb0 	.word	0x08182cb0
 80105b0:	0817f4f0 	.word	0x0817f4f0
 80105b4:	08183030 	.word	0x08183030
 80105b8:	081849a0 	.word	0x081849a0
 80105bc:	0817f0f0 	.word	0x0817f0f0
 80105c0:	08184030 	.word	0x08184030

080105c4 <arm_rfft_fast_f32>:
 80105c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c8:	8a05      	ldrh	r5, [r0, #16]
 80105ca:	4606      	mov	r6, r0
 80105cc:	4617      	mov	r7, r2
 80105ce:	460c      	mov	r4, r1
 80105d0:	086d      	lsrs	r5, r5, #1
 80105d2:	8005      	strh	r5, [r0, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d15e      	bne.n	8010696 <arm_rfft_fast_f32+0xd2>
 80105d8:	461a      	mov	r2, r3
 80105da:	2301      	movs	r3, #1
 80105dc:	f000 fbde 	bl	8010d9c <arm_cfft_f32>
 80105e0:	edd4 7a00 	vldr	s15, [r4]
 80105e4:	ed94 7a01 	vldr	s14, [r4, #4]
 80105e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80105ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80105f0:	8832      	ldrh	r2, [r6, #0]
 80105f2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80105f6:	6975      	ldr	r5, [r6, #20]
 80105f8:	3a01      	subs	r2, #1
 80105fa:	eeb0 3a46 	vmov.f32	s6, s12
 80105fe:	3510      	adds	r5, #16
 8010600:	f107 0610 	add.w	r6, r7, #16
 8010604:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010608:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 801060c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010610:	f104 0310 	add.w	r3, r4, #16
 8010614:	3808      	subs	r0, #8
 8010616:	ee26 7a86 	vmul.f32	s14, s13, s12
 801061a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801061e:	ed87 7a00 	vstr	s14, [r7]
 8010622:	edc7 7a01 	vstr	s15, [r7, #4]
 8010626:	ed90 7a02 	vldr	s14, [r0, #8]
 801062a:	3a01      	subs	r2, #1
 801062c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8010630:	f1a0 0008 	sub.w	r0, r0, #8
 8010634:	ed15 6a02 	vldr	s12, [r5, #-8]
 8010638:	f103 0308 	add.w	r3, r3, #8
 801063c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8010640:	edd0 3a05 	vldr	s7, [r0, #20]
 8010644:	ed13 5a03 	vldr	s10, [r3, #-12]
 8010648:	ee77 4a26 	vadd.f32	s9, s14, s13
 801064c:	ed55 5a01 	vldr	s11, [r5, #-4]
 8010650:	f106 0608 	add.w	r6, r6, #8
 8010654:	ee66 6a27 	vmul.f32	s13, s12, s15
 8010658:	f105 0508 	add.w	r5, r5, #8
 801065c:	ee33 4a85 	vadd.f32	s8, s7, s10
 8010660:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8010664:	ee35 5a63 	vsub.f32	s10, s10, s7
 8010668:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801066c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010670:	ee77 7a05 	vadd.f32	s15, s14, s10
 8010674:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010678:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801067c:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8010680:	ee67 7a83 	vmul.f32	s15, s15, s6
 8010684:	ee27 7a03 	vmul.f32	s14, s14, s6
 8010688:	ed46 7a03 	vstr	s15, [r6, #-12]
 801068c:	ed06 7a04 	vstr	s14, [r6, #-16]
 8010690:	d1c9      	bne.n	8010626 <arm_rfft_fast_f32+0x62>
 8010692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010696:	edd1 7a00 	vldr	s15, [r1]
 801069a:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 801069e:	edd1 6a01 	vldr	s13, [r1, #4]
 80106a2:	1e68      	subs	r0, r5, #1
 80106a4:	6975      	ldr	r5, [r6, #20]
 80106a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80106aa:	00c1      	lsls	r1, r0, #3
 80106ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106b0:	ee27 7a23 	vmul.f32	s14, s14, s7
 80106b4:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80106b8:	ed82 7a00 	vstr	s14, [r2]
 80106bc:	edc2 7a01 	vstr	s15, [r2, #4]
 80106c0:	b3e0      	cbz	r0, 801073c <arm_rfft_fast_f32+0x178>
 80106c2:	3908      	subs	r1, #8
 80106c4:	f104 0210 	add.w	r2, r4, #16
 80106c8:	3510      	adds	r5, #16
 80106ca:	440c      	add	r4, r1
 80106cc:	f107 0110 	add.w	r1, r7, #16
 80106d0:	ed94 7a02 	vldr	s14, [r4, #8]
 80106d4:	3801      	subs	r0, #1
 80106d6:	ed52 6a02 	vldr	s13, [r2, #-8]
 80106da:	f1a4 0408 	sub.w	r4, r4, #8
 80106de:	ed15 6a02 	vldr	s12, [r5, #-8]
 80106e2:	f102 0208 	add.w	r2, r2, #8
 80106e6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80106ea:	ed94 4a05 	vldr	s8, [r4, #20]
 80106ee:	ed12 5a03 	vldr	s10, [r2, #-12]
 80106f2:	ee77 6a26 	vadd.f32	s13, s14, s13
 80106f6:	ed55 5a01 	vldr	s11, [r5, #-4]
 80106fa:	f101 0108 	add.w	r1, r1, #8
 80106fe:	ee26 3a27 	vmul.f32	s6, s12, s15
 8010702:	f105 0508 	add.w	r5, r5, #8
 8010706:	ee74 4a05 	vadd.f32	s9, s8, s10
 801070a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801070e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8010712:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010716:	ee26 6a24 	vmul.f32	s12, s12, s9
 801071a:	ee77 7a05 	vadd.f32	s15, s14, s10
 801071e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8010722:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010726:	ee36 7ae5 	vsub.f32	s14, s13, s11
 801072a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801072e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010732:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010736:	ed01 7a04 	vstr	s14, [r1, #-16]
 801073a:	d1c9      	bne.n	80106d0 <arm_rfft_fast_f32+0x10c>
 801073c:	461a      	mov	r2, r3
 801073e:	4639      	mov	r1, r7
 8010740:	4630      	mov	r0, r6
 8010742:	2301      	movs	r3, #1
 8010744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010748:	f000 bb28 	b.w	8010d9c <arm_cfft_f32>

0801074c <arm_cfft_radix8by2_f32>:
 801074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	4607      	mov	r7, r0
 8010752:	4608      	mov	r0, r1
 8010754:	ed2d 8b06 	vpush	{d8-d10}
 8010758:	f8b7 e000 	ldrh.w	lr, [r7]
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8010762:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8010766:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 801076a:	f000 80b0 	beq.w	80108ce <arm_cfft_radix8by2_f32+0x182>
 801076e:	008b      	lsls	r3, r1, #2
 8010770:	3210      	adds	r2, #16
 8010772:	f100 0610 	add.w	r6, r0, #16
 8010776:	f108 0510 	add.w	r5, r8, #16
 801077a:	3310      	adds	r3, #16
 801077c:	18c4      	adds	r4, r0, r3
 801077e:	4443      	add	r3, r8
 8010780:	ed55 6a04 	vldr	s13, [r5, #-16]
 8010784:	f1be 0e01 	subs.w	lr, lr, #1
 8010788:	ed56 4a04 	vldr	s9, [r6, #-16]
 801078c:	f104 0410 	add.w	r4, r4, #16
 8010790:	ed15 7a03 	vldr	s14, [r5, #-12]
 8010794:	f106 0610 	add.w	r6, r6, #16
 8010798:	ee74 9aa6 	vadd.f32	s19, s9, s13
 801079c:	ed55 7a02 	vldr	s15, [r5, #-8]
 80107a0:	ed55 2a01 	vldr	s5, [r5, #-4]
 80107a4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80107a8:	ed53 0a04 	vldr	s1, [r3, #-16]
 80107ac:	f102 0210 	add.w	r2, r2, #16
 80107b0:	ed13 5a03 	vldr	s10, [r3, #-12]
 80107b4:	f105 0510 	add.w	r5, r5, #16
 80107b8:	ed13 3a02 	vldr	s6, [r3, #-8]
 80107bc:	f103 0310 	add.w	r3, r3, #16
 80107c0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 80107c4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 80107c8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80107cc:	ee33 8a83 	vadd.f32	s16, s7, s6
 80107d0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 80107d4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80107d8:	ee34 0a06 	vadd.f32	s0, s8, s12
 80107dc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 80107e0:	ee76 aa87 	vadd.f32	s21, s13, s14
 80107e4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80107e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80107ec:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 80107f0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80107f4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 80107f8:	ee71 8a05 	vadd.f32	s17, s2, s10
 80107fc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8010800:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8010804:	ee72 9a22 	vadd.f32	s19, s4, s5
 8010808:	ee70 5ae5 	vsub.f32	s11, s1, s11
 801080c:	ee35 5a41 	vsub.f32	s10, s10, s2
 8010810:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8010814:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8010818:	ee36 6a44 	vsub.f32	s12, s12, s8
 801081c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8010820:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8010824:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8010828:	ee72 7a62 	vsub.f32	s15, s4, s5
 801082c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8010830:	ee73 2a63 	vsub.f32	s5, s6, s7
 8010834:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8010838:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 801083c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8010840:	ee24 3a84 	vmul.f32	s6, s9, s8
 8010844:	ee27 2a26 	vmul.f32	s4, s14, s13
 8010848:	ee64 4aa6 	vmul.f32	s9, s9, s13
 801084c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8010850:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010854:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010858:	ee65 6a26 	vmul.f32	s13, s10, s13
 801085c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8010860:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010864:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010868:	ee33 4a02 	vadd.f32	s8, s6, s4
 801086c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8010870:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8010874:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8010878:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 801087c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8010880:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8010884:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8010888:	ee61 4aa6 	vmul.f32	s9, s3, s13
 801088c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8010890:	ee61 5a87 	vmul.f32	s11, s3, s14
 8010894:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010898:	ee22 5a87 	vmul.f32	s10, s5, s14
 801089c:	ee26 7a07 	vmul.f32	s14, s12, s14
 80108a0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80108a4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80108a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80108ac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80108b0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80108b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80108b8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 80108bc:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 80108c0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80108c4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80108c8:	f47f af5a 	bne.w	8010780 <arm_cfft_radix8by2_f32+0x34>
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	b28c      	uxth	r4, r1
 80108d0:	2302      	movs	r3, #2
 80108d2:	4621      	mov	r1, r4
 80108d4:	f000 fb78 	bl	8010fc8 <arm_radix8_butterfly_f32>
 80108d8:	4621      	mov	r1, r4
 80108da:	687a      	ldr	r2, [r7, #4]
 80108dc:	4640      	mov	r0, r8
 80108de:	2302      	movs	r3, #2
 80108e0:	ecbd 8b06 	vpop	{d8-d10}
 80108e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	f000 bb6e 	b.w	8010fc8 <arm_radix8_butterfly_f32>

080108ec <arm_cfft_radix8by4_f32>:
 80108ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f0:	ed2d 8b06 	vpush	{d8-d10}
 80108f4:	8804      	ldrh	r4, [r0, #0]
 80108f6:	b08f      	sub	sp, #60	; 0x3c
 80108f8:	ed91 6a00 	vldr	s12, [r1]
 80108fc:	460a      	mov	r2, r1
 80108fe:	0864      	lsrs	r4, r4, #1
 8010900:	ed91 7a01 	vldr	s14, [r1, #4]
 8010904:	9101      	str	r1, [sp, #4]
 8010906:	00a3      	lsls	r3, r4, #2
 8010908:	6841      	ldr	r1, [r0, #4]
 801090a:	0864      	lsrs	r4, r4, #1
 801090c:	900c      	str	r0, [sp, #48]	; 0x30
 801090e:	9205      	str	r2, [sp, #20]
 8010910:	f101 0610 	add.w	r6, r1, #16
 8010914:	4625      	mov	r5, r4
 8010916:	940b      	str	r4, [sp, #44]	; 0x2c
 8010918:	f101 0408 	add.w	r4, r1, #8
 801091c:	9602      	str	r6, [sp, #8]
 801091e:	9407      	str	r4, [sp, #28]
 8010920:	18d4      	adds	r4, r2, r3
 8010922:	1eaa      	subs	r2, r5, #2
 8010924:	f101 0518 	add.w	r5, r1, #24
 8010928:	18e0      	adds	r0, r4, r3
 801092a:	edd4 4a00 	vldr	s9, [r4]
 801092e:	ed94 4a01 	vldr	s8, [r4, #4]
 8010932:	46a6      	mov	lr, r4
 8010934:	edd0 6a00 	vldr	s13, [r0]
 8010938:	18c7      	adds	r7, r0, r3
 801093a:	edd0 7a01 	vldr	s15, [r0, #4]
 801093e:	46a0      	mov	r8, r4
 8010940:	ee76 5a26 	vadd.f32	s11, s12, s13
 8010944:	ed97 5a00 	vldr	s10, [r7]
 8010948:	ee76 6a66 	vsub.f32	s13, s12, s13
 801094c:	4604      	mov	r4, r0
 801094e:	9506      	str	r5, [sp, #24]
 8010950:	4605      	mov	r5, r0
 8010952:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8010956:	900a      	str	r0, [sp, #40]	; 0x28
 8010958:	9801      	ldr	r0, [sp, #4]
 801095a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801095e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010962:	ed97 3a01 	vldr	s6, [r7, #4]
 8010966:	ee72 2a85 	vadd.f32	s5, s5, s10
 801096a:	46bc      	mov	ip, r7
 801096c:	ee76 3a84 	vadd.f32	s7, s13, s8
 8010970:	9704      	str	r7, [sp, #16]
 8010972:	ee36 7a44 	vsub.f32	s14, s12, s8
 8010976:	f8cd e00c 	str.w	lr, [sp, #12]
 801097a:	ee12 9a90 	vmov	r9, s5
 801097e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8010982:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8010986:	1f3e      	subs	r6, r7, #4
 8010988:	f840 9b08 	str.w	r9, [r0], #8
 801098c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8010990:	edde 2a01 	vldr	s5, [lr, #4]
 8010994:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8010998:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801099c:	eddc 4a01 	vldr	s9, [ip, #4]
 80109a0:	ee36 6a22 	vadd.f32	s12, s12, s5
 80109a4:	9001      	str	r0, [sp, #4]
 80109a6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80109aa:	9805      	ldr	r0, [sp, #20]
 80109ac:	ee13 9a90 	vmov	r9, s7
 80109b0:	ee37 7a43 	vsub.f32	s14, s14, s6
 80109b4:	ee36 6a24 	vadd.f32	s12, s12, s9
 80109b8:	f1ae 0704 	sub.w	r7, lr, #4
 80109bc:	ee74 4a05 	vadd.f32	s9, s8, s10
 80109c0:	ee76 6a83 	vadd.f32	s13, s13, s6
 80109c4:	ed80 6a01 	vstr	s12, [r0, #4]
 80109c8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80109cc:	f848 9b08 	str.w	r9, [r8], #8
 80109d0:	edce 4a01 	vstr	s9, [lr, #4]
 80109d4:	ee15 ea90 	vmov	lr, s11
 80109d8:	f844 eb08 	str.w	lr, [r4], #8
 80109dc:	ee16 ea90 	vmov	lr, s13
 80109e0:	9408      	str	r4, [sp, #32]
 80109e2:	462c      	mov	r4, r5
 80109e4:	ed85 7a01 	vstr	s14, [r5, #4]
 80109e8:	9d04      	ldr	r5, [sp, #16]
 80109ea:	f84c eb08 	str.w	lr, [ip], #8
 80109ee:	edc5 7a01 	vstr	s15, [r5, #4]
 80109f2:	0855      	lsrs	r5, r2, #1
 80109f4:	9509      	str	r5, [sp, #36]	; 0x24
 80109f6:	f000 8130 	beq.w	8010c5a <arm_cfft_radix8by4_f32+0x36e>
 80109fa:	9805      	ldr	r0, [sp, #20]
 80109fc:	3b08      	subs	r3, #8
 80109fe:	46ab      	mov	fp, r5
 8010a00:	f1a4 020c 	sub.w	r2, r4, #12
 8010a04:	f100 0510 	add.w	r5, r0, #16
 8010a08:	f101 0920 	add.w	r9, r1, #32
 8010a0c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8010a10:	f8dd a008 	ldr.w	sl, [sp, #8]
 8010a14:	4433      	add	r3, r6
 8010a16:	3410      	adds	r4, #16
 8010a18:	4660      	mov	r0, ip
 8010a1a:	4641      	mov	r1, r8
 8010a1c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8010a20:	ed54 6a02 	vldr	s13, [r4, #-8]
 8010a24:	f1bb 0b01 	subs.w	fp, fp, #1
 8010a28:	ed55 5a02 	vldr	s11, [r5, #-8]
 8010a2c:	f10a 0a08 	add.w	sl, sl, #8
 8010a30:	edd1 7a00 	vldr	s15, [r1]
 8010a34:	f105 0508 	add.w	r5, r5, #8
 8010a38:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8010a3c:	edd0 2a00 	vldr	s5, [r0]
 8010a40:	ed14 7a01 	vldr	s14, [r4, #-4]
 8010a44:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8010a48:	ed55 6a03 	vldr	s13, [r5, #-12]
 8010a4c:	f1a2 0208 	sub.w	r2, r2, #8
 8010a50:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8010a54:	ed90 2a01 	vldr	s4, [r0, #4]
 8010a58:	ee36 5a87 	vadd.f32	s10, s13, s14
 8010a5c:	ed91 6a01 	vldr	s12, [r1, #4]
 8010a60:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010a64:	f109 0910 	add.w	r9, r9, #16
 8010a68:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8010a6c:	f104 0408 	add.w	r4, r4, #8
 8010a70:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8010a74:	f10e 0e18 	add.w	lr, lr, #24
 8010a78:	ee37 3a67 	vsub.f32	s6, s14, s15
 8010a7c:	f1a3 0308 	sub.w	r3, r3, #8
 8010a80:	ed45 6a04 	vstr	s13, [r5, #-16]
 8010a84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a88:	edd1 6a01 	vldr	s13, [r1, #4]
 8010a8c:	ee75 1a86 	vadd.f32	s3, s11, s12
 8010a90:	edd0 4a01 	vldr	s9, [r0, #4]
 8010a94:	ee33 3a22 	vadd.f32	s6, s6, s5
 8010a98:	ee75 6a26 	vadd.f32	s13, s10, s13
 8010a9c:	ee35 5a46 	vsub.f32	s10, s10, s12
 8010aa0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010aa4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010aa8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8010aac:	ee35 5a42 	vsub.f32	s10, s10, s4
 8010ab0:	ed45 6a03 	vstr	s13, [r5, #-12]
 8010ab4:	ee36 2a02 	vadd.f32	s4, s12, s4
 8010ab8:	edd6 7a00 	vldr	s15, [r6]
 8010abc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8010ac0:	ed97 1a00 	vldr	s2, [r7]
 8010ac4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010ac8:	ed92 8a04 	vldr	s16, [r2, #16]
 8010acc:	ee71 8a27 	vadd.f32	s17, s2, s15
 8010ad0:	ed93 aa04 	vldr	s20, [r3, #16]
 8010ad4:	ed16 7a01 	vldr	s14, [r6, #-4]
 8010ad8:	ee71 7a67 	vsub.f32	s15, s2, s15
 8010adc:	ed57 0a01 	vldr	s1, [r7, #-4]
 8010ae0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8010ae4:	ee38 6a88 	vadd.f32	s12, s17, s16
 8010ae8:	edd3 9a03 	vldr	s19, [r3, #12]
 8010aec:	ee30 0a87 	vadd.f32	s0, s1, s14
 8010af0:	ed92 9a03 	vldr	s18, [r2, #12]
 8010af4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8010af8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8010afc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8010b00:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8010b04:	ee16 ca10 	vmov	ip, s12
 8010b08:	ee30 6a49 	vsub.f32	s12, s0, s18
 8010b0c:	ee77 4a01 	vadd.f32	s9, s14, s2
 8010b10:	f847 c908 	str.w	ip, [r7], #-8
 8010b14:	ee34 4a29 	vadd.f32	s8, s8, s19
 8010b18:	edd2 8a03 	vldr	s17, [r2, #12]
 8010b1c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8010b20:	ed93 8a03 	vldr	s16, [r3, #12]
 8010b24:	ee71 0a47 	vsub.f32	s1, s2, s14
 8010b28:	ee30 0a28 	vadd.f32	s0, s0, s17
 8010b2c:	ee39 1a67 	vsub.f32	s2, s18, s15
 8010b30:	ee36 6a69 	vsub.f32	s12, s12, s19
 8010b34:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010b38:	ee75 5aca 	vsub.f32	s11, s11, s20
 8010b3c:	ed87 0a01 	vstr	s0, [r7, #4]
 8010b40:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8010b44:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8010b48:	ee21 8a80 	vmul.f32	s16, s3, s0
 8010b4c:	ee23 7a26 	vmul.f32	s14, s6, s13
 8010b50:	ee64 7a26 	vmul.f32	s15, s8, s13
 8010b54:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8010b58:	ee24 4a00 	vmul.f32	s8, s8, s0
 8010b5c:	ee23 3a00 	vmul.f32	s6, s6, s0
 8010b60:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8010b64:	ee24 0a80 	vmul.f32	s0, s9, s0
 8010b68:	ee38 7a07 	vadd.f32	s14, s16, s14
 8010b6c:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010b70:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b74:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010b78:	ee17 ca10 	vmov	ip, s14
 8010b7c:	f841 cb08 	str.w	ip, [r1], #8
 8010b80:	ed01 3a01 	vstr	s6, [r1, #-4]
 8010b84:	ed82 0a04 	vstr	s0, [r2, #16]
 8010b88:	edc2 6a03 	vstr	s13, [r2, #12]
 8010b8c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8010b90:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8010b94:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8010b98:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8010b9c:	ee65 4a27 	vmul.f32	s9, s10, s15
 8010ba0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8010ba4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8010ba8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010bac:	ee25 5a26 	vmul.f32	s10, s10, s13
 8010bb0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010bb8:	ee34 6a24 	vadd.f32	s12, s8, s9
 8010bbc:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010bc0:	ee35 5a63 	vsub.f32	s10, s10, s7
 8010bc4:	ee17 ca90 	vmov	ip, s15
 8010bc8:	ed04 6a04 	vstr	s12, [r4, #-16]
 8010bcc:	ed04 5a03 	vstr	s10, [r4, #-12]
 8010bd0:	f846 c908 	str.w	ip, [r6], #-8
 8010bd4:	edc6 6a01 	vstr	s13, [r6, #4]
 8010bd8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8010bdc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8010be0:	ee62 5a27 	vmul.f32	s11, s4, s15
 8010be4:	ee22 6a87 	vmul.f32	s12, s5, s14
 8010be8:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010bec:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8010bf0:	ee61 6a07 	vmul.f32	s13, s2, s14
 8010bf4:	ee20 7a87 	vmul.f32	s14, s1, s14
 8010bf8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010bfc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010c00:	ee35 6a86 	vadd.f32	s12, s11, s12
 8010c04:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8010c08:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8010c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c10:	ee16 ca10 	vmov	ip, s12
 8010c14:	f840 cb08 	str.w	ip, [r0], #8
 8010c18:	ed40 2a01 	vstr	s5, [r0, #-4]
 8010c1c:	edc3 0a04 	vstr	s1, [r3, #16]
 8010c20:	edc3 7a03 	vstr	s15, [r3, #12]
 8010c24:	f47f aefc 	bne.w	8010a20 <arm_cfft_radix8by4_f32+0x134>
 8010c28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c2a:	9802      	ldr	r0, [sp, #8]
 8010c2c:	00cb      	lsls	r3, r1, #3
 8010c2e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8010c32:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010c36:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010c3a:	4498      	add	r8, r3
 8010c3c:	449c      	add	ip, r3
 8010c3e:	9102      	str	r1, [sp, #8]
 8010c40:	9901      	ldr	r1, [sp, #4]
 8010c42:	4419      	add	r1, r3
 8010c44:	9101      	str	r1, [sp, #4]
 8010c46:	9907      	ldr	r1, [sp, #28]
 8010c48:	4419      	add	r1, r3
 8010c4a:	9107      	str	r1, [sp, #28]
 8010c4c:	9908      	ldr	r1, [sp, #32]
 8010c4e:	4419      	add	r1, r3
 8010c50:	9b06      	ldr	r3, [sp, #24]
 8010c52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c56:	9108      	str	r1, [sp, #32]
 8010c58:	9306      	str	r3, [sp, #24]
 8010c5a:	9a01      	ldr	r2, [sp, #4]
 8010c5c:	2304      	movs	r3, #4
 8010c5e:	9e08      	ldr	r6, [sp, #32]
 8010c60:	edd2 7a00 	vldr	s15, [r2]
 8010c64:	ed96 7a00 	vldr	s14, [r6]
 8010c68:	edd8 2a00 	vldr	s5, [r8]
 8010c6c:	ee77 5a87 	vadd.f32	s11, s15, s14
 8010c70:	ed9c 3a00 	vldr	s6, [ip]
 8010c74:	ed92 6a01 	vldr	s12, [r2, #4]
 8010c78:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010c7c:	edd6 6a01 	vldr	s13, [r6, #4]
 8010c80:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8010c84:	ed9c 2a01 	vldr	s4, [ip, #4]
 8010c88:	ee36 5a26 	vadd.f32	s10, s12, s13
 8010c8c:	edd8 7a01 	vldr	s15, [r8, #4]
 8010c90:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010c94:	9d02      	ldr	r5, [sp, #8]
 8010c96:	ee34 6a83 	vadd.f32	s12, s9, s6
 8010c9a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8010c9e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8010ca2:	9805      	ldr	r0, [sp, #20]
 8010ca4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8010ca8:	4621      	mov	r1, r4
 8010caa:	ed82 6a00 	vstr	s12, [r2]
 8010cae:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8010cb2:	edd8 3a01 	vldr	s7, [r8, #4]
 8010cb6:	ee75 5a67 	vsub.f32	s11, s10, s15
 8010cba:	eddc 1a01 	vldr	s3, [ip, #4]
 8010cbe:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010cc2:	ee75 3a23 	vadd.f32	s7, s10, s7
 8010cc6:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010cca:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8010cce:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8010cd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010cd6:	ee36 6a43 	vsub.f32	s12, s12, s6
 8010cda:	ed82 5a01 	vstr	s10, [r2, #4]
 8010cde:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8010ce2:	9a07      	ldr	r2, [sp, #28]
 8010ce4:	ee77 7a02 	vadd.f32	s15, s14, s4
 8010ce8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8010cec:	edd2 2a00 	vldr	s5, [r2]
 8010cf0:	ed92 5a01 	vldr	s10, [r2, #4]
 8010cf4:	ee64 3a22 	vmul.f32	s7, s8, s5
 8010cf8:	ee24 4a05 	vmul.f32	s8, s8, s10
 8010cfc:	ee24 5a85 	vmul.f32	s10, s9, s10
 8010d00:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8010d04:	ee33 5a85 	vadd.f32	s10, s7, s10
 8010d08:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010d0c:	ed88 5a00 	vstr	s10, [r8]
 8010d10:	edc8 4a01 	vstr	s9, [r8, #4]
 8010d14:	edd5 4a01 	vldr	s9, [r5, #4]
 8010d18:	edd5 6a00 	vldr	s13, [r5]
 8010d1c:	9d06      	ldr	r5, [sp, #24]
 8010d1e:	ee26 5a26 	vmul.f32	s10, s12, s13
 8010d22:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010d26:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010d2a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8010d2e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010d32:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010d36:	ed86 6a01 	vstr	s12, [r6, #4]
 8010d3a:	edc6 5a00 	vstr	s11, [r6]
 8010d3e:	edd5 5a01 	vldr	s11, [r5, #4]
 8010d42:	edd5 6a00 	vldr	s13, [r5]
 8010d46:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010d48:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8010d4c:	ee67 6a26 	vmul.f32	s13, s14, s13
 8010d50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010d54:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010d58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010d5c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8010d60:	edcc 7a01 	vstr	s15, [ip, #4]
 8010d64:	ed8c 7a00 	vstr	s14, [ip]
 8010d68:	6872      	ldr	r2, [r6, #4]
 8010d6a:	f000 f92d 	bl	8010fc8 <arm_radix8_butterfly_f32>
 8010d6e:	9803      	ldr	r0, [sp, #12]
 8010d70:	4621      	mov	r1, r4
 8010d72:	6872      	ldr	r2, [r6, #4]
 8010d74:	2304      	movs	r3, #4
 8010d76:	f000 f927 	bl	8010fc8 <arm_radix8_butterfly_f32>
 8010d7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	6872      	ldr	r2, [r6, #4]
 8010d80:	2304      	movs	r3, #4
 8010d82:	f000 f921 	bl	8010fc8 <arm_radix8_butterfly_f32>
 8010d86:	4621      	mov	r1, r4
 8010d88:	6872      	ldr	r2, [r6, #4]
 8010d8a:	2304      	movs	r3, #4
 8010d8c:	9804      	ldr	r0, [sp, #16]
 8010d8e:	b00f      	add	sp, #60	; 0x3c
 8010d90:	ecbd 8b06 	vpop	{d8-d10}
 8010d94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d98:	f000 b916 	b.w	8010fc8 <arm_radix8_butterfly_f32>

08010d9c <arm_cfft_f32>:
 8010d9c:	2a01      	cmp	r2, #1
 8010d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da2:	4606      	mov	r6, r0
 8010da4:	4617      	mov	r7, r2
 8010da6:	460c      	mov	r4, r1
 8010da8:	4698      	mov	r8, r3
 8010daa:	8805      	ldrh	r5, [r0, #0]
 8010dac:	d053      	beq.n	8010e56 <arm_cfft_f32+0xba>
 8010dae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010db2:	d04b      	beq.n	8010e4c <arm_cfft_f32+0xb0>
 8010db4:	d916      	bls.n	8010de4 <arm_cfft_f32+0x48>
 8010db6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8010dba:	d01a      	beq.n	8010df2 <arm_cfft_f32+0x56>
 8010dbc:	d95a      	bls.n	8010e74 <arm_cfft_f32+0xd8>
 8010dbe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8010dc2:	d043      	beq.n	8010e4c <arm_cfft_f32+0xb0>
 8010dc4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010dc8:	d105      	bne.n	8010dd6 <arm_cfft_f32+0x3a>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	6872      	ldr	r2, [r6, #4]
 8010dce:	4629      	mov	r1, r5
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f000 f8f9 	bl	8010fc8 <arm_radix8_butterfly_f32>
 8010dd6:	f1b8 0f00 	cmp.w	r8, #0
 8010dda:	d111      	bne.n	8010e00 <arm_cfft_f32+0x64>
 8010ddc:	2f01      	cmp	r7, #1
 8010dde:	d016      	beq.n	8010e0e <arm_cfft_f32+0x72>
 8010de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010de4:	2d20      	cmp	r5, #32
 8010de6:	d031      	beq.n	8010e4c <arm_cfft_f32+0xb0>
 8010de8:	d948      	bls.n	8010e7c <arm_cfft_f32+0xe0>
 8010dea:	2d40      	cmp	r5, #64	; 0x40
 8010dec:	d0ed      	beq.n	8010dca <arm_cfft_f32+0x2e>
 8010dee:	2d80      	cmp	r5, #128	; 0x80
 8010df0:	d1f1      	bne.n	8010dd6 <arm_cfft_f32+0x3a>
 8010df2:	4621      	mov	r1, r4
 8010df4:	4630      	mov	r0, r6
 8010df6:	f7ff fca9 	bl	801074c <arm_cfft_radix8by2_f32>
 8010dfa:	f1b8 0f00 	cmp.w	r8, #0
 8010dfe:	d0ed      	beq.n	8010ddc <arm_cfft_f32+0x40>
 8010e00:	68b2      	ldr	r2, [r6, #8]
 8010e02:	4620      	mov	r0, r4
 8010e04:	89b1      	ldrh	r1, [r6, #12]
 8010e06:	f7ef fa1b 	bl	8000240 <arm_bitreversal_32>
 8010e0a:	2f01      	cmp	r7, #1
 8010e0c:	d1e8      	bne.n	8010de0 <arm_cfft_f32+0x44>
 8010e0e:	ee07 5a90 	vmov	s15, r5
 8010e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010e1e:	2d00      	cmp	r5, #0
 8010e20:	d0de      	beq.n	8010de0 <arm_cfft_f32+0x44>
 8010e22:	f104 0108 	add.w	r1, r4, #8
 8010e26:	2300      	movs	r3, #0
 8010e28:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010e32:	3108      	adds	r1, #8
 8010e34:	429d      	cmp	r5, r3
 8010e36:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e3a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010e3e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010e42:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010e46:	d1ef      	bne.n	8010e28 <arm_cfft_f32+0x8c>
 8010e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e4c:	4621      	mov	r1, r4
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f7ff fd4c 	bl	80108ec <arm_cfft_radix8by4_f32>
 8010e54:	e7bf      	b.n	8010dd6 <arm_cfft_f32+0x3a>
 8010e56:	b1a5      	cbz	r5, 8010e82 <arm_cfft_f32+0xe6>
 8010e58:	f101 030c 	add.w	r3, r1, #12
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010e62:	3201      	adds	r2, #1
 8010e64:	3308      	adds	r3, #8
 8010e66:	eef1 7a67 	vneg.f32	s15, s15
 8010e6a:	4295      	cmp	r5, r2
 8010e6c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8010e70:	d1f5      	bne.n	8010e5e <arm_cfft_f32+0xc2>
 8010e72:	e79c      	b.n	8010dae <arm_cfft_f32+0x12>
 8010e74:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010e78:	d0a7      	beq.n	8010dca <arm_cfft_f32+0x2e>
 8010e7a:	e7ac      	b.n	8010dd6 <arm_cfft_f32+0x3a>
 8010e7c:	2d10      	cmp	r5, #16
 8010e7e:	d0b8      	beq.n	8010df2 <arm_cfft_f32+0x56>
 8010e80:	e7a9      	b.n	8010dd6 <arm_cfft_f32+0x3a>
 8010e82:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010e86:	d896      	bhi.n	8010db6 <arm_cfft_f32+0x1a>
 8010e88:	e7ac      	b.n	8010de4 <arm_cfft_f32+0x48>
 8010e8a:	bf00      	nop

08010e8c <arm_cmplx_mag_squared_f32>:
 8010e8c:	b470      	push	{r4, r5, r6}
 8010e8e:	0896      	lsrs	r6, r2, #2
 8010e90:	d03e      	beq.n	8010f10 <arm_cmplx_mag_squared_f32+0x84>
 8010e92:	f100 0320 	add.w	r3, r0, #32
 8010e96:	f101 0410 	add.w	r4, r1, #16
 8010e9a:	4635      	mov	r5, r6
 8010e9c:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8010ea0:	3d01      	subs	r5, #1
 8010ea2:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8010ea6:	f104 0410 	add.w	r4, r4, #16
 8010eaa:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 8010eae:	ee27 5a07 	vmul.f32	s10, s14, s14
 8010eb2:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8010eb6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010eba:	ed13 7a04 	vldr	s14, [r3, #-16]
 8010ebe:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8010ec2:	ed13 4a03 	vldr	s8, [r3, #-12]
 8010ec6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010eca:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010ece:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010ed2:	ed53 4a01 	vldr	s9, [r3, #-4]
 8010ed6:	ee24 4a04 	vmul.f32	s8, s8, s8
 8010eda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010ede:	f103 0320 	add.w	r3, r3, #32
 8010ee2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8010ee6:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010eea:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010eee:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010ef2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8010ef6:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 8010efa:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8010efe:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8010f02:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010f06:	d1c9      	bne.n	8010e9c <arm_cmplx_mag_squared_f32+0x10>
 8010f08:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8010f0c:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8010f10:	f012 0203 	ands.w	r2, r2, #3
 8010f14:	d010      	beq.n	8010f38 <arm_cmplx_mag_squared_f32+0xac>
 8010f16:	3008      	adds	r0, #8
 8010f18:	ed50 7a02 	vldr	s15, [r0, #-8]
 8010f1c:	3a01      	subs	r2, #1
 8010f1e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8010f22:	f100 0008 	add.w	r0, r0, #8
 8010f26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f2a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f32:	ece1 7a01 	vstmia	r1!, {s15}
 8010f36:	d1ef      	bne.n	8010f18 <arm_cmplx_mag_squared_f32+0x8c>
 8010f38:	bc70      	pop	{r4, r5, r6}
 8010f3a:	4770      	bx	lr

08010f3c <arm_mult_f32>:
 8010f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f3e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8010f42:	d033      	beq.n	8010fac <arm_mult_f32+0x70>
 8010f44:	f100 0610 	add.w	r6, r0, #16
 8010f48:	f101 0510 	add.w	r5, r1, #16
 8010f4c:	f102 0410 	add.w	r4, r2, #16
 8010f50:	4677      	mov	r7, lr
 8010f52:	ed16 7a04 	vldr	s14, [r6, #-16]
 8010f56:	3f01      	subs	r7, #1
 8010f58:	ed15 6a04 	vldr	s12, [r5, #-16]
 8010f5c:	f106 0610 	add.w	r6, r6, #16
 8010f60:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8010f64:	f105 0510 	add.w	r5, r5, #16
 8010f68:	ee27 6a06 	vmul.f32	s12, s14, s12
 8010f6c:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8010f70:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8010f74:	f104 0410 	add.w	r4, r4, #16
 8010f78:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8010f7c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010f80:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8010f84:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8010f88:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010f8c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8010f90:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8010f94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010f98:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8010f9c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010fa0:	d1d7      	bne.n	8010f52 <arm_mult_f32+0x16>
 8010fa2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8010fa6:	4420      	add	r0, r4
 8010fa8:	4421      	add	r1, r4
 8010faa:	4422      	add	r2, r4
 8010fac:	f013 0303 	ands.w	r3, r3, #3
 8010fb0:	d009      	beq.n	8010fc6 <arm_mult_f32+0x8a>
 8010fb2:	ecf0 7a01 	vldmia	r0!, {s15}
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	ecb1 7a01 	vldmia	r1!, {s14}
 8010fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fc0:	ece2 7a01 	vstmia	r2!, {s15}
 8010fc4:	d1f5      	bne.n	8010fb2 <arm_mult_f32+0x76>
 8010fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fc8 <arm_radix8_butterfly_f32>:
 8010fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fcc:	469e      	mov	lr, r3
 8010fce:	4603      	mov	r3, r0
 8010fd0:	468a      	mov	sl, r1
 8010fd2:	468b      	mov	fp, r1
 8010fd4:	3304      	adds	r3, #4
 8010fd6:	ed2d 8b10 	vpush	{d8-d15}
 8010fda:	469c      	mov	ip, r3
 8010fdc:	b09d      	sub	sp, #116	; 0x74
 8010fde:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 80112ec <arm_radix8_butterfly_f32+0x324>
 8010fe2:	9019      	str	r0, [sp, #100]	; 0x64
 8010fe4:	921a      	str	r2, [sp, #104]	; 0x68
 8010fe6:	931b      	str	r3, [sp, #108]	; 0x6c
 8010fe8:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8010fec:	f04f 0800 	mov.w	r8, #0
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8010ff4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010ff8:	4611      	mov	r1, r2
 8010ffa:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	0053      	lsls	r3, r2, #1
 8011002:	18d5      	adds	r5, r2, r3
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	0113      	lsls	r3, r2, #4
 8011008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801100a:	194c      	adds	r4, r1, r5
 801100c:	eb02 0609 	add.w	r6, r2, r9
 8011010:	9302      	str	r3, [sp, #8]
 8011012:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011016:	4613      	mov	r3, r2
 8011018:	190a      	adds	r2, r1, r4
 801101a:	eb06 0709 	add.w	r7, r6, r9
 801101e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011022:	1888      	adds	r0, r1, r2
 8011024:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011028:	4401      	add	r1, r0
 801102a:	3204      	adds	r2, #4
 801102c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011030:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011034:	9b00      	ldr	r3, [sp, #0]
 8011036:	3104      	adds	r1, #4
 8011038:	ed5c 7a01 	vldr	s15, [ip, #-4]
 801103c:	44d8      	add	r8, fp
 801103e:	ed90 7a00 	vldr	s14, [r0]
 8011042:	ed94 5a00 	vldr	s10, [r4]
 8011046:	45c2      	cmp	sl, r8
 8011048:	edd7 3a00 	vldr	s7, [r7]
 801104c:	ed96 6a00 	vldr	s12, [r6]
 8011050:	ee37 1a85 	vadd.f32	s2, s15, s10
 8011054:	ed52 6a01 	vldr	s13, [r2, #-4]
 8011058:	ee73 4a87 	vadd.f32	s9, s7, s14
 801105c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8011060:	edd5 7a00 	vldr	s15, [r5]
 8011064:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8011068:	ed11 7a01 	vldr	s14, [r1, #-4]
 801106c:	ee36 2a26 	vadd.f32	s4, s12, s13
 8011070:	ee37 4a87 	vadd.f32	s8, s15, s14
 8011074:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011078:	ee71 5a24 	vadd.f32	s11, s2, s9
 801107c:	ee32 6a04 	vadd.f32	s12, s4, s8
 8011080:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011084:	ee31 1a64 	vsub.f32	s2, s2, s9
 8011088:	ee75 4a86 	vadd.f32	s9, s11, s12
 801108c:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8011090:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8011094:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8011098:	ee32 2a44 	vsub.f32	s4, s4, s8
 801109c:	ee67 7a89 	vmul.f32	s15, s15, s18
 80110a0:	ed94 0a01 	vldr	s0, [r4, #4]
 80110a4:	edc4 5a00 	vstr	s11, [r4]
 80110a8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80110ac:	edd6 5a01 	vldr	s11, [r6, #4]
 80110b0:	edd5 2a01 	vldr	s5, [r5, #4]
 80110b4:	ee75 1a27 	vadd.f32	s3, s10, s15
 80110b8:	ed92 4a00 	vldr	s8, [r2]
 80110bc:	ee75 7a67 	vsub.f32	s15, s10, s15
 80110c0:	edd1 4a00 	vldr	s9, [r1]
 80110c4:	ee27 7a09 	vmul.f32	s14, s14, s18
 80110c8:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80110cc:	ed9c 6a00 	vldr	s12, [ip]
 80110d0:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80110d4:	edd0 0a01 	vldr	s1, [r0, #4]
 80110d8:	ed97 5a01 	vldr	s10, [r7, #4]
 80110dc:	ee35 4a84 	vadd.f32	s8, s11, s8
 80110e0:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80110e4:	ee73 5a26 	vadd.f32	s11, s6, s13
 80110e8:	ee76 2a00 	vadd.f32	s5, s12, s0
 80110ec:	ee73 6a66 	vsub.f32	s13, s6, s13
 80110f0:	ee36 6a40 	vsub.f32	s12, s12, s0
 80110f4:	ee35 0a20 	vadd.f32	s0, s10, s1
 80110f8:	ee65 5a89 	vmul.f32	s11, s11, s18
 80110fc:	ee35 5a60 	vsub.f32	s10, s10, s1
 8011100:	ee32 3a80 	vadd.f32	s6, s5, s0
 8011104:	ee74 0a24 	vadd.f32	s1, s8, s9
 8011108:	ee66 6a89 	vmul.f32	s13, s13, s18
 801110c:	ee74 4a64 	vsub.f32	s9, s8, s9
 8011110:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8011114:	ee75 2a25 	vadd.f32	s5, s10, s11
 8011118:	ee33 0a20 	vadd.f32	s0, s6, s1
 801111c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8011120:	ee33 3a60 	vsub.f32	s6, s6, s1
 8011124:	ee36 5a26 	vadd.f32	s10, s12, s13
 8011128:	ed8c 0a00 	vstr	s0, [ip]
 801112c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8011130:	449c      	add	ip, r3
 8011132:	ee33 6a87 	vadd.f32	s12, s7, s14
 8011136:	ed84 3a01 	vstr	s6, [r4, #4]
 801113a:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801113e:	441c      	add	r4, r3
 8011140:	ee71 3a24 	vadd.f32	s7, s2, s9
 8011144:	ee71 4a64 	vsub.f32	s9, s2, s9
 8011148:	ee31 3aa2 	vadd.f32	s6, s3, s5
 801114c:	edc7 3a00 	vstr	s7, [r7]
 8011150:	ee34 1a42 	vsub.f32	s2, s8, s4
 8011154:	edc0 4a00 	vstr	s9, [r0]
 8011158:	ee77 3aa5 	vadd.f32	s7, s15, s11
 801115c:	ee75 4a46 	vsub.f32	s9, s10, s12
 8011160:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011164:	ed87 1a01 	vstr	s2, [r7, #4]
 8011168:	ee76 5ac7 	vsub.f32	s11, s13, s14
 801116c:	441f      	add	r7, r3
 801116e:	ee32 4a04 	vadd.f32	s8, s4, s8
 8011172:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8011176:	ee36 6a05 	vadd.f32	s12, s12, s10
 801117a:	ee37 7a26 	vadd.f32	s14, s14, s13
 801117e:	ed80 4a01 	vstr	s8, [r0, #4]
 8011182:	ed86 3a00 	vstr	s6, [r6]
 8011186:	4418      	add	r0, r3
 8011188:	ed41 1a01 	vstr	s3, [r1, #-4]
 801118c:	ed42 3a01 	vstr	s7, [r2, #-4]
 8011190:	edc5 7a00 	vstr	s15, [r5]
 8011194:	edc6 4a01 	vstr	s9, [r6, #4]
 8011198:	441e      	add	r6, r3
 801119a:	ed81 6a00 	vstr	s12, [r1]
 801119e:	4419      	add	r1, r3
 80111a0:	edc2 5a00 	vstr	s11, [r2]
 80111a4:	441a      	add	r2, r3
 80111a6:	ed85 7a01 	vstr	s14, [r5, #4]
 80111aa:	441d      	add	r5, r3
 80111ac:	f63f af44 	bhi.w	8011038 <arm_radix8_butterfly_f32+0x70>
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111b4:	2b07      	cmp	r3, #7
 80111b6:	f240 81f4 	bls.w	80115a2 <arm_radix8_butterfly_f32+0x5da>
 80111ba:	9901      	ldr	r1, [sp, #4]
 80111bc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80111c0:	9d02      	ldr	r5, [sp, #8]
 80111c2:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80111c6:	3101      	adds	r1, #1
 80111c8:	eb04 000e 	add.w	r0, r4, lr
 80111cc:	00e4      	lsls	r4, r4, #3
 80111ce:	3508      	adds	r5, #8
 80111d0:	4419      	add	r1, r3
 80111d2:	eb00 0c0e 	add.w	ip, r0, lr
 80111d6:	9413      	str	r4, [sp, #76]	; 0x4c
 80111d8:	00c0      	lsls	r0, r0, #3
 80111da:	185e      	adds	r6, r3, r1
 80111dc:	4617      	mov	r7, r2
 80111de:	9218      	str	r2, [sp, #96]	; 0x60
 80111e0:	f109 0908 	add.w	r9, r9, #8
 80111e4:	199c      	adds	r4, r3, r6
 80111e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80111e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80111ea:	9012      	str	r0, [sp, #72]	; 0x48
 80111ec:	195d      	adds	r5, r3, r5
 80111ee:	9811      	ldr	r0, [sp, #68]	; 0x44
 80111f0:	443a      	add	r2, r7
 80111f2:	950c      	str	r5, [sp, #48]	; 0x30
 80111f4:	4698      	mov	r8, r3
 80111f6:	4420      	add	r0, r4
 80111f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80111fa:	19d7      	adds	r7, r2, r7
 80111fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011200:	4405      	add	r5, r0
 8011202:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011206:	9710      	str	r7, [sp, #64]	; 0x40
 8011208:	eb0c 070e 	add.w	r7, ip, lr
 801120c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011210:	3404      	adds	r4, #4
 8011212:	3004      	adds	r0, #4
 8011214:	44c8      	add	r8, r9
 8011216:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 801121a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801121c:	940a      	str	r4, [sp, #40]	; 0x28
 801121e:	9009      	str	r0, [sp, #36]	; 0x24
 8011220:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011224:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8011226:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801122a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801122c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8011230:	eb07 080e 	add.w	r8, r7, lr
 8011234:	eb04 0900 	add.w	r9, r4, r0
 8011238:	00f8      	lsls	r0, r7, #3
 801123a:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801123e:	3504      	adds	r5, #4
 8011240:	4607      	mov	r7, r0
 8011242:	9017      	str	r0, [sp, #92]	; 0x5c
 8011244:	910b      	str	r1, [sp, #44]	; 0x2c
 8011246:	4618      	mov	r0, r3
 8011248:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 801124c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801124e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8011252:	18e3      	adds	r3, r4, r3
 8011254:	9508      	str	r5, [sp, #32]
 8011256:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011258:	910e      	str	r1, [sp, #56]	; 0x38
 801125a:	4621      	mov	r1, r4
 801125c:	eb04 0805 	add.w	r8, r4, r5
 8011260:	9304      	str	r3, [sp, #16]
 8011262:	19e5      	adds	r5, r4, r7
 8011264:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8011268:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801126a:	9316      	str	r3, [sp, #88]	; 0x58
 801126c:	190b      	adds	r3, r1, r4
 801126e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011270:	9505      	str	r5, [sp, #20]
 8011272:	9303      	str	r3, [sp, #12]
 8011274:	f100 0308 	add.w	r3, r0, #8
 8011278:	9707      	str	r7, [sp, #28]
 801127a:	4638      	mov	r0, r7
 801127c:	930f      	str	r3, [sp, #60]	; 0x3c
 801127e:	2301      	movs	r3, #1
 8011280:	9306      	str	r3, [sp, #24]
 8011282:	9b00      	ldr	r3, [sp, #0]
 8011284:	ed90 fa00 	vldr	s30, [r0]
 8011288:	edd0 ba01 	vldr	s23, [r0, #4]
 801128c:	9803      	ldr	r0, [sp, #12]
 801128e:	9903      	ldr	r1, [sp, #12]
 8011290:	ed90 ba01 	vldr	s22, [r0, #4]
 8011294:	9804      	ldr	r0, [sp, #16]
 8011296:	edd1 ea00 	vldr	s29, [r1]
 801129a:	edd0 aa01 	vldr	s21, [r0, #4]
 801129e:	9805      	ldr	r0, [sp, #20]
 80112a0:	9905      	ldr	r1, [sp, #20]
 80112a2:	edd0 7a01 	vldr	s15, [r0, #4]
 80112a6:	ed91 da00 	vldr	s26, [r1]
 80112aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80112ac:	9c04      	ldr	r4, [sp, #16]
 80112ae:	edcd 7a01 	vstr	s15, [sp, #4]
 80112b2:	edd8 7a01 	vldr	s15, [r8, #4]
 80112b6:	9100      	str	r1, [sp, #0]
 80112b8:	edd2 fa00 	vldr	s31, [r2]
 80112bc:	ed94 ea00 	vldr	s28, [r4]
 80112c0:	ed92 ca01 	vldr	s24, [r2, #4]
 80112c4:	f8dd e020 	ldr.w	lr, [sp, #32]
 80112c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80112ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80112cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80112ce:	edd9 da00 	vldr	s27, [r9]
 80112d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80112d4:	edd8 ca00 	vldr	s25, [r8]
 80112d8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80112da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80112dc:	f8dd c018 	ldr.w	ip, [sp, #24]
 80112e0:	ed99 aa01 	vldr	s20, [r9, #4]
 80112e4:	edcd 7a02 	vstr	s15, [sp, #8]
 80112e8:	9800      	ldr	r0, [sp, #0]
 80112ea:	e001      	b.n	80112f0 <arm_radix8_butterfly_f32+0x328>
 80112ec:	3f3504f3 	.word	0x3f3504f3
 80112f0:	edd5 3a00 	vldr	s7, [r5]
 80112f4:	44dc      	add	ip, fp
 80112f6:	ed91 7a00 	vldr	s14, [r1]
 80112fa:	edd4 8a00 	vldr	s17, [r4]
 80112fe:	45e2      	cmp	sl, ip
 8011300:	ed57 7a01 	vldr	s15, [r7, #-4]
 8011304:	ed90 5a00 	vldr	s10, [r0]
 8011308:	ed56 5a01 	vldr	s11, [r6, #-4]
 801130c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8011310:	ed92 1a00 	vldr	s2, [r2]
 8011314:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8011318:	ed1e 4a01 	vldr	s8, [lr, #-4]
 801131c:	ee75 9a25 	vadd.f32	s19, s10, s11
 8011320:	ee31 3a07 	vadd.f32	s6, s2, s14
 8011324:	ed92 8a01 	vldr	s16, [r2, #4]
 8011328:	ee73 6a84 	vadd.f32	s13, s7, s8
 801132c:	ee75 5a65 	vsub.f32	s11, s10, s11
 8011330:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8011334:	ee73 1a06 	vadd.f32	s3, s6, s12
 8011338:	ee39 5aa6 	vadd.f32	s10, s19, s13
 801133c:	ee75 7a84 	vadd.f32	s15, s11, s8
 8011340:	ee31 1a47 	vsub.f32	s2, s2, s14
 8011344:	ee31 7a85 	vadd.f32	s14, s3, s10
 8011348:	ee67 7a89 	vmul.f32	s15, s15, s18
 801134c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8011350:	ed82 7a00 	vstr	s14, [r2]
 8011354:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8011358:	ed96 6a00 	vldr	s12, [r6]
 801135c:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8011360:	edd5 3a01 	vldr	s7, [r5, #4]
 8011364:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8011368:	ed90 7a01 	vldr	s14, [r0, #4]
 801136c:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8011370:	edde 4a00 	vldr	s9, [lr]
 8011374:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8011378:	ee77 2a46 	vsub.f32	s5, s14, s12
 801137c:	edd1 6a01 	vldr	s13, [r1, #4]
 8011380:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8011384:	edd7 0a00 	vldr	s1, [r7]
 8011388:	ee77 5a06 	vadd.f32	s11, s14, s12
 801138c:	ed94 7a01 	vldr	s14, [r4, #4]
 8011390:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8011394:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8011398:	ee78 4a66 	vsub.f32	s9, s16, s13
 801139c:	ee78 3a26 	vadd.f32	s7, s16, s13
 80113a0:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80113a4:	ee77 6a20 	vadd.f32	s13, s14, s1
 80113a8:	ee24 4a09 	vmul.f32	s8, s8, s18
 80113ac:	ee37 7a60 	vsub.f32	s14, s14, s1
 80113b0:	ee20 8a09 	vmul.f32	s16, s0, s18
 80113b4:	ee75 0a86 	vadd.f32	s1, s11, s12
 80113b8:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80113bc:	ee62 2a89 	vmul.f32	s5, s5, s18
 80113c0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80113c4:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80113c8:	ee77 7a62 	vsub.f32	s15, s14, s5
 80113cc:	ee74 5a88 	vadd.f32	s11, s9, s16
 80113d0:	ee34 8ac8 	vsub.f32	s16, s9, s16
 80113d4:	ee77 4a22 	vadd.f32	s9, s14, s5
 80113d8:	ee71 2a04 	vadd.f32	s5, s2, s8
 80113dc:	ee31 7a44 	vsub.f32	s14, s2, s8
 80113e0:	ee30 1a60 	vsub.f32	s2, s0, s1
 80113e4:	ee73 1a06 	vadd.f32	s3, s6, s12
 80113e8:	ee33 6a46 	vsub.f32	s12, s6, s12
 80113ec:	ee33 3ae9 	vsub.f32	s6, s7, s19
 80113f0:	ee79 6aa3 	vadd.f32	s13, s19, s7
 80113f4:	ee38 4a68 	vsub.f32	s8, s16, s17
 80113f8:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80113fc:	ee72 5a25 	vadd.f32	s11, s4, s11
 8011400:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8011404:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8011408:	ee77 2a27 	vadd.f32	s5, s14, s15
 801140c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011410:	ee78 7a88 	vadd.f32	s15, s17, s16
 8011414:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8011418:	ee2a 8a81 	vmul.f32	s16, s21, s2
 801141c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8011420:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8011424:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8011428:	ee70 0a20 	vadd.f32	s1, s0, s1
 801142c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8011430:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8011434:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8011438:	edc2 0a01 	vstr	s1, [r2, #4]
 801143c:	ee38 8a88 	vadd.f32	s16, s17, s16
 8011440:	441a      	add	r2, r3
 8011442:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8011446:	ee31 5a45 	vsub.f32	s10, s2, s10
 801144a:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801144e:	ed81 8a00 	vstr	s16, [r1]
 8011452:	ee39 0a80 	vadd.f32	s0, s19, s0
 8011456:	ee33 3a61 	vsub.f32	s6, s6, s3
 801145a:	ed81 5a01 	vstr	s10, [r1, #4]
 801145e:	ee6f 0a82 	vmul.f32	s1, s31, s4
 8011462:	edcd 3a00 	vstr	s7, [sp]
 8011466:	ed9d 5a02 	vldr	s10, [sp, #8]
 801146a:	ee2d 8a06 	vmul.f32	s16, s26, s12
 801146e:	eddd 3a01 	vldr	s7, [sp, #4]
 8011472:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8011476:	ed84 0a00 	vstr	s0, [r4]
 801147a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801147e:	ed84 3a01 	vstr	s6, [r4, #4]
 8011482:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8011486:	ee23 6a86 	vmul.f32	s12, s7, s12
 801148a:	eddd 3a00 	vldr	s7, [sp]
 801148e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8011492:	4419      	add	r1, r3
 8011494:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8011498:	441c      	add	r4, r3
 801149a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 801149e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80114a2:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80114a6:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80114aa:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80114ae:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80114b2:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80114b6:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80114ba:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80114be:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80114c2:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80114c6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80114ca:	ee38 8a01 	vadd.f32	s16, s16, s2
 80114ce:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80114d2:	ee39 5a85 	vadd.f32	s10, s19, s10
 80114d6:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80114da:	ed07 8a01 	vstr	s16, [r7, #-4]
 80114de:	ee30 0a21 	vadd.f32	s0, s0, s3
 80114e2:	ed87 6a00 	vstr	s12, [r7]
 80114e6:	ee74 2a62 	vsub.f32	s5, s8, s5
 80114ea:	edc0 0a00 	vstr	s1, [r0]
 80114ee:	ee33 3a28 	vadd.f32	s6, s6, s17
 80114f2:	edc0 3a01 	vstr	s7, [r0, #4]
 80114f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80114fa:	ed0e 5a01 	vstr	s10, [lr, #-4]
 80114fe:	edce 4a00 	vstr	s9, [lr]
 8011502:	4418      	add	r0, r3
 8011504:	ed06 0a01 	vstr	s0, [r6, #-4]
 8011508:	441f      	add	r7, r3
 801150a:	edc6 2a00 	vstr	s5, [r6]
 801150e:	449e      	add	lr, r3
 8011510:	ed85 3a00 	vstr	s6, [r5]
 8011514:	441e      	add	r6, r3
 8011516:	ed85 7a01 	vstr	s14, [r5, #4]
 801151a:	441d      	add	r5, r3
 801151c:	f63f aee8 	bhi.w	80112f0 <arm_radix8_butterfly_f32+0x328>
 8011520:	9a06      	ldr	r2, [sp, #24]
 8011522:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011524:	3201      	adds	r2, #1
 8011526:	4611      	mov	r1, r2
 8011528:	9206      	str	r2, [sp, #24]
 801152a:	9a07      	ldr	r2, [sp, #28]
 801152c:	4402      	add	r2, r0
 801152e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8011530:	9207      	str	r2, [sp, #28]
 8011532:	9a03      	ldr	r2, [sp, #12]
 8011534:	4402      	add	r2, r0
 8011536:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011538:	9203      	str	r2, [sp, #12]
 801153a:	9a04      	ldr	r2, [sp, #16]
 801153c:	4402      	add	r2, r0
 801153e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011540:	9204      	str	r2, [sp, #16]
 8011542:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011544:	4491      	add	r9, r2
 8011546:	9a05      	ldr	r2, [sp, #20]
 8011548:	4402      	add	r2, r0
 801154a:	9205      	str	r2, [sp, #20]
 801154c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801154e:	4490      	add	r8, r2
 8011550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011552:	3208      	adds	r2, #8
 8011554:	920f      	str	r2, [sp, #60]	; 0x3c
 8011556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011558:	3208      	adds	r2, #8
 801155a:	920e      	str	r2, [sp, #56]	; 0x38
 801155c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801155e:	3208      	adds	r2, #8
 8011560:	920d      	str	r2, [sp, #52]	; 0x34
 8011562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011564:	3208      	adds	r2, #8
 8011566:	920c      	str	r2, [sp, #48]	; 0x30
 8011568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801156a:	3208      	adds	r2, #8
 801156c:	920b      	str	r2, [sp, #44]	; 0x2c
 801156e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011570:	3208      	adds	r2, #8
 8011572:	920a      	str	r2, [sp, #40]	; 0x28
 8011574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011576:	3208      	adds	r2, #8
 8011578:	9209      	str	r2, [sp, #36]	; 0x24
 801157a:	9a08      	ldr	r2, [sp, #32]
 801157c:	3208      	adds	r2, #8
 801157e:	9208      	str	r2, [sp, #32]
 8011580:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011582:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011584:	4622      	mov	r2, r4
 8011586:	4288      	cmp	r0, r1
 8011588:	d005      	beq.n	8011596 <arm_radix8_butterfly_f32+0x5ce>
 801158a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801158c:	4621      	mov	r1, r4
 801158e:	4401      	add	r1, r0
 8011590:	9807      	ldr	r0, [sp, #28]
 8011592:	9110      	str	r1, [sp, #64]	; 0x40
 8011594:	e676      	b.n	8011284 <arm_radix8_butterfly_f32+0x2bc>
 8011596:	4683      	mov	fp, r0
 8011598:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 801159c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80115a0:	e522      	b.n	8010fe8 <arm_radix8_butterfly_f32+0x20>
 80115a2:	b01d      	add	sp, #116	; 0x74
 80115a4:	ecbd 8b10 	vpop	{d8-d15}
 80115a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115ac <__errno>:
 80115ac:	4b01      	ldr	r3, [pc, #4]	; (80115b4 <__errno+0x8>)
 80115ae:	6818      	ldr	r0, [r3, #0]
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	200013b8 	.word	0x200013b8

080115b8 <__libc_init_array>:
 80115b8:	b570      	push	{r4, r5, r6, lr}
 80115ba:	4d0d      	ldr	r5, [pc, #52]	; (80115f0 <__libc_init_array+0x38>)
 80115bc:	4c0d      	ldr	r4, [pc, #52]	; (80115f4 <__libc_init_array+0x3c>)
 80115be:	1b64      	subs	r4, r4, r5
 80115c0:	10a4      	asrs	r4, r4, #2
 80115c2:	2600      	movs	r6, #0
 80115c4:	42a6      	cmp	r6, r4
 80115c6:	d109      	bne.n	80115dc <__libc_init_array+0x24>
 80115c8:	4d0b      	ldr	r5, [pc, #44]	; (80115f8 <__libc_init_array+0x40>)
 80115ca:	4c0c      	ldr	r4, [pc, #48]	; (80115fc <__libc_init_array+0x44>)
 80115cc:	f001 fc54 	bl	8012e78 <_init>
 80115d0:	1b64      	subs	r4, r4, r5
 80115d2:	10a4      	asrs	r4, r4, #2
 80115d4:	2600      	movs	r6, #0
 80115d6:	42a6      	cmp	r6, r4
 80115d8:	d105      	bne.n	80115e6 <__libc_init_array+0x2e>
 80115da:	bd70      	pop	{r4, r5, r6, pc}
 80115dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80115e0:	4798      	blx	r3
 80115e2:	3601      	adds	r6, #1
 80115e4:	e7ee      	b.n	80115c4 <__libc_init_array+0xc>
 80115e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80115ea:	4798      	blx	r3
 80115ec:	3601      	adds	r6, #1
 80115ee:	e7f2      	b.n	80115d6 <__libc_init_array+0x1e>
 80115f0:	08184fc0 	.word	0x08184fc0
 80115f4:	08184fc0 	.word	0x08184fc0
 80115f8:	08184fc0 	.word	0x08184fc0
 80115fc:	08184fc4 	.word	0x08184fc4

08011600 <memcpy>:
 8011600:	440a      	add	r2, r1
 8011602:	4291      	cmp	r1, r2
 8011604:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011608:	d100      	bne.n	801160c <memcpy+0xc>
 801160a:	4770      	bx	lr
 801160c:	b510      	push	{r4, lr}
 801160e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011616:	4291      	cmp	r1, r2
 8011618:	d1f9      	bne.n	801160e <memcpy+0xe>
 801161a:	bd10      	pop	{r4, pc}

0801161c <memset>:
 801161c:	4402      	add	r2, r0
 801161e:	4603      	mov	r3, r0
 8011620:	4293      	cmp	r3, r2
 8011622:	d100      	bne.n	8011626 <memset+0xa>
 8011624:	4770      	bx	lr
 8011626:	f803 1b01 	strb.w	r1, [r3], #1
 801162a:	e7f9      	b.n	8011620 <memset+0x4>

0801162c <_free_r>:
 801162c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801162e:	2900      	cmp	r1, #0
 8011630:	d044      	beq.n	80116bc <_free_r+0x90>
 8011632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011636:	9001      	str	r0, [sp, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	f1a1 0404 	sub.w	r4, r1, #4
 801163e:	bfb8      	it	lt
 8011640:	18e4      	addlt	r4, r4, r3
 8011642:	f000 f903 	bl	801184c <__malloc_lock>
 8011646:	4a1e      	ldr	r2, [pc, #120]	; (80116c0 <_free_r+0x94>)
 8011648:	9801      	ldr	r0, [sp, #4]
 801164a:	6813      	ldr	r3, [r2, #0]
 801164c:	b933      	cbnz	r3, 801165c <_free_r+0x30>
 801164e:	6063      	str	r3, [r4, #4]
 8011650:	6014      	str	r4, [r2, #0]
 8011652:	b003      	add	sp, #12
 8011654:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011658:	f000 b8fe 	b.w	8011858 <__malloc_unlock>
 801165c:	42a3      	cmp	r3, r4
 801165e:	d908      	bls.n	8011672 <_free_r+0x46>
 8011660:	6825      	ldr	r5, [r4, #0]
 8011662:	1961      	adds	r1, r4, r5
 8011664:	428b      	cmp	r3, r1
 8011666:	bf01      	itttt	eq
 8011668:	6819      	ldreq	r1, [r3, #0]
 801166a:	685b      	ldreq	r3, [r3, #4]
 801166c:	1949      	addeq	r1, r1, r5
 801166e:	6021      	streq	r1, [r4, #0]
 8011670:	e7ed      	b.n	801164e <_free_r+0x22>
 8011672:	461a      	mov	r2, r3
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	b10b      	cbz	r3, 801167c <_free_r+0x50>
 8011678:	42a3      	cmp	r3, r4
 801167a:	d9fa      	bls.n	8011672 <_free_r+0x46>
 801167c:	6811      	ldr	r1, [r2, #0]
 801167e:	1855      	adds	r5, r2, r1
 8011680:	42a5      	cmp	r5, r4
 8011682:	d10b      	bne.n	801169c <_free_r+0x70>
 8011684:	6824      	ldr	r4, [r4, #0]
 8011686:	4421      	add	r1, r4
 8011688:	1854      	adds	r4, r2, r1
 801168a:	42a3      	cmp	r3, r4
 801168c:	6011      	str	r1, [r2, #0]
 801168e:	d1e0      	bne.n	8011652 <_free_r+0x26>
 8011690:	681c      	ldr	r4, [r3, #0]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	6053      	str	r3, [r2, #4]
 8011696:	4421      	add	r1, r4
 8011698:	6011      	str	r1, [r2, #0]
 801169a:	e7da      	b.n	8011652 <_free_r+0x26>
 801169c:	d902      	bls.n	80116a4 <_free_r+0x78>
 801169e:	230c      	movs	r3, #12
 80116a0:	6003      	str	r3, [r0, #0]
 80116a2:	e7d6      	b.n	8011652 <_free_r+0x26>
 80116a4:	6825      	ldr	r5, [r4, #0]
 80116a6:	1961      	adds	r1, r4, r5
 80116a8:	428b      	cmp	r3, r1
 80116aa:	bf04      	itt	eq
 80116ac:	6819      	ldreq	r1, [r3, #0]
 80116ae:	685b      	ldreq	r3, [r3, #4]
 80116b0:	6063      	str	r3, [r4, #4]
 80116b2:	bf04      	itt	eq
 80116b4:	1949      	addeq	r1, r1, r5
 80116b6:	6021      	streq	r1, [r4, #0]
 80116b8:	6054      	str	r4, [r2, #4]
 80116ba:	e7ca      	b.n	8011652 <_free_r+0x26>
 80116bc:	b003      	add	sp, #12
 80116be:	bd30      	pop	{r4, r5, pc}
 80116c0:	2001a918 	.word	0x2001a918

080116c4 <sbrk_aligned>:
 80116c4:	b570      	push	{r4, r5, r6, lr}
 80116c6:	4e0e      	ldr	r6, [pc, #56]	; (8011700 <sbrk_aligned+0x3c>)
 80116c8:	460c      	mov	r4, r1
 80116ca:	6831      	ldr	r1, [r6, #0]
 80116cc:	4605      	mov	r5, r0
 80116ce:	b911      	cbnz	r1, 80116d6 <sbrk_aligned+0x12>
 80116d0:	f000 f88c 	bl	80117ec <_sbrk_r>
 80116d4:	6030      	str	r0, [r6, #0]
 80116d6:	4621      	mov	r1, r4
 80116d8:	4628      	mov	r0, r5
 80116da:	f000 f887 	bl	80117ec <_sbrk_r>
 80116de:	1c43      	adds	r3, r0, #1
 80116e0:	d00a      	beq.n	80116f8 <sbrk_aligned+0x34>
 80116e2:	1cc4      	adds	r4, r0, #3
 80116e4:	f024 0403 	bic.w	r4, r4, #3
 80116e8:	42a0      	cmp	r0, r4
 80116ea:	d007      	beq.n	80116fc <sbrk_aligned+0x38>
 80116ec:	1a21      	subs	r1, r4, r0
 80116ee:	4628      	mov	r0, r5
 80116f0:	f000 f87c 	bl	80117ec <_sbrk_r>
 80116f4:	3001      	adds	r0, #1
 80116f6:	d101      	bne.n	80116fc <sbrk_aligned+0x38>
 80116f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80116fc:	4620      	mov	r0, r4
 80116fe:	bd70      	pop	{r4, r5, r6, pc}
 8011700:	2001a91c 	.word	0x2001a91c

08011704 <_malloc_r>:
 8011704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011708:	1ccd      	adds	r5, r1, #3
 801170a:	f025 0503 	bic.w	r5, r5, #3
 801170e:	3508      	adds	r5, #8
 8011710:	2d0c      	cmp	r5, #12
 8011712:	bf38      	it	cc
 8011714:	250c      	movcc	r5, #12
 8011716:	2d00      	cmp	r5, #0
 8011718:	4607      	mov	r7, r0
 801171a:	db01      	blt.n	8011720 <_malloc_r+0x1c>
 801171c:	42a9      	cmp	r1, r5
 801171e:	d905      	bls.n	801172c <_malloc_r+0x28>
 8011720:	230c      	movs	r3, #12
 8011722:	603b      	str	r3, [r7, #0]
 8011724:	2600      	movs	r6, #0
 8011726:	4630      	mov	r0, r6
 8011728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172c:	4e2e      	ldr	r6, [pc, #184]	; (80117e8 <_malloc_r+0xe4>)
 801172e:	f000 f88d 	bl	801184c <__malloc_lock>
 8011732:	6833      	ldr	r3, [r6, #0]
 8011734:	461c      	mov	r4, r3
 8011736:	bb34      	cbnz	r4, 8011786 <_malloc_r+0x82>
 8011738:	4629      	mov	r1, r5
 801173a:	4638      	mov	r0, r7
 801173c:	f7ff ffc2 	bl	80116c4 <sbrk_aligned>
 8011740:	1c43      	adds	r3, r0, #1
 8011742:	4604      	mov	r4, r0
 8011744:	d14d      	bne.n	80117e2 <_malloc_r+0xde>
 8011746:	6834      	ldr	r4, [r6, #0]
 8011748:	4626      	mov	r6, r4
 801174a:	2e00      	cmp	r6, #0
 801174c:	d140      	bne.n	80117d0 <_malloc_r+0xcc>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	4631      	mov	r1, r6
 8011752:	4638      	mov	r0, r7
 8011754:	eb04 0803 	add.w	r8, r4, r3
 8011758:	f000 f848 	bl	80117ec <_sbrk_r>
 801175c:	4580      	cmp	r8, r0
 801175e:	d13a      	bne.n	80117d6 <_malloc_r+0xd2>
 8011760:	6821      	ldr	r1, [r4, #0]
 8011762:	3503      	adds	r5, #3
 8011764:	1a6d      	subs	r5, r5, r1
 8011766:	f025 0503 	bic.w	r5, r5, #3
 801176a:	3508      	adds	r5, #8
 801176c:	2d0c      	cmp	r5, #12
 801176e:	bf38      	it	cc
 8011770:	250c      	movcc	r5, #12
 8011772:	4629      	mov	r1, r5
 8011774:	4638      	mov	r0, r7
 8011776:	f7ff ffa5 	bl	80116c4 <sbrk_aligned>
 801177a:	3001      	adds	r0, #1
 801177c:	d02b      	beq.n	80117d6 <_malloc_r+0xd2>
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	442b      	add	r3, r5
 8011782:	6023      	str	r3, [r4, #0]
 8011784:	e00e      	b.n	80117a4 <_malloc_r+0xa0>
 8011786:	6822      	ldr	r2, [r4, #0]
 8011788:	1b52      	subs	r2, r2, r5
 801178a:	d41e      	bmi.n	80117ca <_malloc_r+0xc6>
 801178c:	2a0b      	cmp	r2, #11
 801178e:	d916      	bls.n	80117be <_malloc_r+0xba>
 8011790:	1961      	adds	r1, r4, r5
 8011792:	42a3      	cmp	r3, r4
 8011794:	6025      	str	r5, [r4, #0]
 8011796:	bf18      	it	ne
 8011798:	6059      	strne	r1, [r3, #4]
 801179a:	6863      	ldr	r3, [r4, #4]
 801179c:	bf08      	it	eq
 801179e:	6031      	streq	r1, [r6, #0]
 80117a0:	5162      	str	r2, [r4, r5]
 80117a2:	604b      	str	r3, [r1, #4]
 80117a4:	4638      	mov	r0, r7
 80117a6:	f104 060b 	add.w	r6, r4, #11
 80117aa:	f000 f855 	bl	8011858 <__malloc_unlock>
 80117ae:	f026 0607 	bic.w	r6, r6, #7
 80117b2:	1d23      	adds	r3, r4, #4
 80117b4:	1af2      	subs	r2, r6, r3
 80117b6:	d0b6      	beq.n	8011726 <_malloc_r+0x22>
 80117b8:	1b9b      	subs	r3, r3, r6
 80117ba:	50a3      	str	r3, [r4, r2]
 80117bc:	e7b3      	b.n	8011726 <_malloc_r+0x22>
 80117be:	6862      	ldr	r2, [r4, #4]
 80117c0:	42a3      	cmp	r3, r4
 80117c2:	bf0c      	ite	eq
 80117c4:	6032      	streq	r2, [r6, #0]
 80117c6:	605a      	strne	r2, [r3, #4]
 80117c8:	e7ec      	b.n	80117a4 <_malloc_r+0xa0>
 80117ca:	4623      	mov	r3, r4
 80117cc:	6864      	ldr	r4, [r4, #4]
 80117ce:	e7b2      	b.n	8011736 <_malloc_r+0x32>
 80117d0:	4634      	mov	r4, r6
 80117d2:	6876      	ldr	r6, [r6, #4]
 80117d4:	e7b9      	b.n	801174a <_malloc_r+0x46>
 80117d6:	230c      	movs	r3, #12
 80117d8:	603b      	str	r3, [r7, #0]
 80117da:	4638      	mov	r0, r7
 80117dc:	f000 f83c 	bl	8011858 <__malloc_unlock>
 80117e0:	e7a1      	b.n	8011726 <_malloc_r+0x22>
 80117e2:	6025      	str	r5, [r4, #0]
 80117e4:	e7de      	b.n	80117a4 <_malloc_r+0xa0>
 80117e6:	bf00      	nop
 80117e8:	2001a918 	.word	0x2001a918

080117ec <_sbrk_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	4d06      	ldr	r5, [pc, #24]	; (8011808 <_sbrk_r+0x1c>)
 80117f0:	2300      	movs	r3, #0
 80117f2:	4604      	mov	r4, r0
 80117f4:	4608      	mov	r0, r1
 80117f6:	602b      	str	r3, [r5, #0]
 80117f8:	f7f0 f8ce 	bl	8001998 <_sbrk>
 80117fc:	1c43      	adds	r3, r0, #1
 80117fe:	d102      	bne.n	8011806 <_sbrk_r+0x1a>
 8011800:	682b      	ldr	r3, [r5, #0]
 8011802:	b103      	cbz	r3, 8011806 <_sbrk_r+0x1a>
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	2001a920 	.word	0x2001a920

0801180c <siprintf>:
 801180c:	b40e      	push	{r1, r2, r3}
 801180e:	b500      	push	{lr}
 8011810:	b09c      	sub	sp, #112	; 0x70
 8011812:	ab1d      	add	r3, sp, #116	; 0x74
 8011814:	9002      	str	r0, [sp, #8]
 8011816:	9006      	str	r0, [sp, #24]
 8011818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801181c:	4809      	ldr	r0, [pc, #36]	; (8011844 <siprintf+0x38>)
 801181e:	9107      	str	r1, [sp, #28]
 8011820:	9104      	str	r1, [sp, #16]
 8011822:	4909      	ldr	r1, [pc, #36]	; (8011848 <siprintf+0x3c>)
 8011824:	f853 2b04 	ldr.w	r2, [r3], #4
 8011828:	9105      	str	r1, [sp, #20]
 801182a:	6800      	ldr	r0, [r0, #0]
 801182c:	9301      	str	r3, [sp, #4]
 801182e:	a902      	add	r1, sp, #8
 8011830:	f000 f8a2 	bl	8011978 <_svfiprintf_r>
 8011834:	9b02      	ldr	r3, [sp, #8]
 8011836:	2200      	movs	r2, #0
 8011838:	701a      	strb	r2, [r3, #0]
 801183a:	b01c      	add	sp, #112	; 0x70
 801183c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011840:	b003      	add	sp, #12
 8011842:	4770      	bx	lr
 8011844:	200013b8 	.word	0x200013b8
 8011848:	ffff0208 	.word	0xffff0208

0801184c <__malloc_lock>:
 801184c:	4801      	ldr	r0, [pc, #4]	; (8011854 <__malloc_lock+0x8>)
 801184e:	f000 bb27 	b.w	8011ea0 <__retarget_lock_acquire_recursive>
 8011852:	bf00      	nop
 8011854:	2001a924 	.word	0x2001a924

08011858 <__malloc_unlock>:
 8011858:	4801      	ldr	r0, [pc, #4]	; (8011860 <__malloc_unlock+0x8>)
 801185a:	f000 bb22 	b.w	8011ea2 <__retarget_lock_release_recursive>
 801185e:	bf00      	nop
 8011860:	2001a924 	.word	0x2001a924

08011864 <_realloc_r>:
 8011864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011868:	4680      	mov	r8, r0
 801186a:	4614      	mov	r4, r2
 801186c:	460e      	mov	r6, r1
 801186e:	b921      	cbnz	r1, 801187a <_realloc_r+0x16>
 8011870:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011874:	4611      	mov	r1, r2
 8011876:	f7ff bf45 	b.w	8011704 <_malloc_r>
 801187a:	b92a      	cbnz	r2, 8011888 <_realloc_r+0x24>
 801187c:	f7ff fed6 	bl	801162c <_free_r>
 8011880:	4625      	mov	r5, r4
 8011882:	4628      	mov	r0, r5
 8011884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011888:	f000 fb26 	bl	8011ed8 <_malloc_usable_size_r>
 801188c:	4284      	cmp	r4, r0
 801188e:	4607      	mov	r7, r0
 8011890:	d802      	bhi.n	8011898 <_realloc_r+0x34>
 8011892:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011896:	d812      	bhi.n	80118be <_realloc_r+0x5a>
 8011898:	4621      	mov	r1, r4
 801189a:	4640      	mov	r0, r8
 801189c:	f7ff ff32 	bl	8011704 <_malloc_r>
 80118a0:	4605      	mov	r5, r0
 80118a2:	2800      	cmp	r0, #0
 80118a4:	d0ed      	beq.n	8011882 <_realloc_r+0x1e>
 80118a6:	42bc      	cmp	r4, r7
 80118a8:	4622      	mov	r2, r4
 80118aa:	4631      	mov	r1, r6
 80118ac:	bf28      	it	cs
 80118ae:	463a      	movcs	r2, r7
 80118b0:	f7ff fea6 	bl	8011600 <memcpy>
 80118b4:	4631      	mov	r1, r6
 80118b6:	4640      	mov	r0, r8
 80118b8:	f7ff feb8 	bl	801162c <_free_r>
 80118bc:	e7e1      	b.n	8011882 <_realloc_r+0x1e>
 80118be:	4635      	mov	r5, r6
 80118c0:	e7df      	b.n	8011882 <_realloc_r+0x1e>

080118c2 <__ssputs_r>:
 80118c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118c6:	688e      	ldr	r6, [r1, #8]
 80118c8:	429e      	cmp	r6, r3
 80118ca:	4682      	mov	sl, r0
 80118cc:	460c      	mov	r4, r1
 80118ce:	4690      	mov	r8, r2
 80118d0:	461f      	mov	r7, r3
 80118d2:	d838      	bhi.n	8011946 <__ssputs_r+0x84>
 80118d4:	898a      	ldrh	r2, [r1, #12]
 80118d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80118da:	d032      	beq.n	8011942 <__ssputs_r+0x80>
 80118dc:	6825      	ldr	r5, [r4, #0]
 80118de:	6909      	ldr	r1, [r1, #16]
 80118e0:	eba5 0901 	sub.w	r9, r5, r1
 80118e4:	6965      	ldr	r5, [r4, #20]
 80118e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118ee:	3301      	adds	r3, #1
 80118f0:	444b      	add	r3, r9
 80118f2:	106d      	asrs	r5, r5, #1
 80118f4:	429d      	cmp	r5, r3
 80118f6:	bf38      	it	cc
 80118f8:	461d      	movcc	r5, r3
 80118fa:	0553      	lsls	r3, r2, #21
 80118fc:	d531      	bpl.n	8011962 <__ssputs_r+0xa0>
 80118fe:	4629      	mov	r1, r5
 8011900:	f7ff ff00 	bl	8011704 <_malloc_r>
 8011904:	4606      	mov	r6, r0
 8011906:	b950      	cbnz	r0, 801191e <__ssputs_r+0x5c>
 8011908:	230c      	movs	r3, #12
 801190a:	f8ca 3000 	str.w	r3, [sl]
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011914:	81a3      	strh	r3, [r4, #12]
 8011916:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801191a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801191e:	6921      	ldr	r1, [r4, #16]
 8011920:	464a      	mov	r2, r9
 8011922:	f7ff fe6d 	bl	8011600 <memcpy>
 8011926:	89a3      	ldrh	r3, [r4, #12]
 8011928:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011930:	81a3      	strh	r3, [r4, #12]
 8011932:	6126      	str	r6, [r4, #16]
 8011934:	6165      	str	r5, [r4, #20]
 8011936:	444e      	add	r6, r9
 8011938:	eba5 0509 	sub.w	r5, r5, r9
 801193c:	6026      	str	r6, [r4, #0]
 801193e:	60a5      	str	r5, [r4, #8]
 8011940:	463e      	mov	r6, r7
 8011942:	42be      	cmp	r6, r7
 8011944:	d900      	bls.n	8011948 <__ssputs_r+0x86>
 8011946:	463e      	mov	r6, r7
 8011948:	6820      	ldr	r0, [r4, #0]
 801194a:	4632      	mov	r2, r6
 801194c:	4641      	mov	r1, r8
 801194e:	f000 faa9 	bl	8011ea4 <memmove>
 8011952:	68a3      	ldr	r3, [r4, #8]
 8011954:	1b9b      	subs	r3, r3, r6
 8011956:	60a3      	str	r3, [r4, #8]
 8011958:	6823      	ldr	r3, [r4, #0]
 801195a:	4433      	add	r3, r6
 801195c:	6023      	str	r3, [r4, #0]
 801195e:	2000      	movs	r0, #0
 8011960:	e7db      	b.n	801191a <__ssputs_r+0x58>
 8011962:	462a      	mov	r2, r5
 8011964:	f7ff ff7e 	bl	8011864 <_realloc_r>
 8011968:	4606      	mov	r6, r0
 801196a:	2800      	cmp	r0, #0
 801196c:	d1e1      	bne.n	8011932 <__ssputs_r+0x70>
 801196e:	6921      	ldr	r1, [r4, #16]
 8011970:	4650      	mov	r0, sl
 8011972:	f7ff fe5b 	bl	801162c <_free_r>
 8011976:	e7c7      	b.n	8011908 <__ssputs_r+0x46>

08011978 <_svfiprintf_r>:
 8011978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801197c:	4698      	mov	r8, r3
 801197e:	898b      	ldrh	r3, [r1, #12]
 8011980:	061b      	lsls	r3, r3, #24
 8011982:	b09d      	sub	sp, #116	; 0x74
 8011984:	4607      	mov	r7, r0
 8011986:	460d      	mov	r5, r1
 8011988:	4614      	mov	r4, r2
 801198a:	d50e      	bpl.n	80119aa <_svfiprintf_r+0x32>
 801198c:	690b      	ldr	r3, [r1, #16]
 801198e:	b963      	cbnz	r3, 80119aa <_svfiprintf_r+0x32>
 8011990:	2140      	movs	r1, #64	; 0x40
 8011992:	f7ff feb7 	bl	8011704 <_malloc_r>
 8011996:	6028      	str	r0, [r5, #0]
 8011998:	6128      	str	r0, [r5, #16]
 801199a:	b920      	cbnz	r0, 80119a6 <_svfiprintf_r+0x2e>
 801199c:	230c      	movs	r3, #12
 801199e:	603b      	str	r3, [r7, #0]
 80119a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119a4:	e0d1      	b.n	8011b4a <_svfiprintf_r+0x1d2>
 80119a6:	2340      	movs	r3, #64	; 0x40
 80119a8:	616b      	str	r3, [r5, #20]
 80119aa:	2300      	movs	r3, #0
 80119ac:	9309      	str	r3, [sp, #36]	; 0x24
 80119ae:	2320      	movs	r3, #32
 80119b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80119b8:	2330      	movs	r3, #48	; 0x30
 80119ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011b64 <_svfiprintf_r+0x1ec>
 80119be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119c2:	f04f 0901 	mov.w	r9, #1
 80119c6:	4623      	mov	r3, r4
 80119c8:	469a      	mov	sl, r3
 80119ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119ce:	b10a      	cbz	r2, 80119d4 <_svfiprintf_r+0x5c>
 80119d0:	2a25      	cmp	r2, #37	; 0x25
 80119d2:	d1f9      	bne.n	80119c8 <_svfiprintf_r+0x50>
 80119d4:	ebba 0b04 	subs.w	fp, sl, r4
 80119d8:	d00b      	beq.n	80119f2 <_svfiprintf_r+0x7a>
 80119da:	465b      	mov	r3, fp
 80119dc:	4622      	mov	r2, r4
 80119de:	4629      	mov	r1, r5
 80119e0:	4638      	mov	r0, r7
 80119e2:	f7ff ff6e 	bl	80118c2 <__ssputs_r>
 80119e6:	3001      	adds	r0, #1
 80119e8:	f000 80aa 	beq.w	8011b40 <_svfiprintf_r+0x1c8>
 80119ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119ee:	445a      	add	r2, fp
 80119f0:	9209      	str	r2, [sp, #36]	; 0x24
 80119f2:	f89a 3000 	ldrb.w	r3, [sl]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	f000 80a2 	beq.w	8011b40 <_svfiprintf_r+0x1c8>
 80119fc:	2300      	movs	r3, #0
 80119fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a06:	f10a 0a01 	add.w	sl, sl, #1
 8011a0a:	9304      	str	r3, [sp, #16]
 8011a0c:	9307      	str	r3, [sp, #28]
 8011a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a12:	931a      	str	r3, [sp, #104]	; 0x68
 8011a14:	4654      	mov	r4, sl
 8011a16:	2205      	movs	r2, #5
 8011a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a1c:	4851      	ldr	r0, [pc, #324]	; (8011b64 <_svfiprintf_r+0x1ec>)
 8011a1e:	f7ee fc77 	bl	8000310 <memchr>
 8011a22:	9a04      	ldr	r2, [sp, #16]
 8011a24:	b9d8      	cbnz	r0, 8011a5e <_svfiprintf_r+0xe6>
 8011a26:	06d0      	lsls	r0, r2, #27
 8011a28:	bf44      	itt	mi
 8011a2a:	2320      	movmi	r3, #32
 8011a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a30:	0711      	lsls	r1, r2, #28
 8011a32:	bf44      	itt	mi
 8011a34:	232b      	movmi	r3, #43	; 0x2b
 8011a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a40:	d015      	beq.n	8011a6e <_svfiprintf_r+0xf6>
 8011a42:	9a07      	ldr	r2, [sp, #28]
 8011a44:	4654      	mov	r4, sl
 8011a46:	2000      	movs	r0, #0
 8011a48:	f04f 0c0a 	mov.w	ip, #10
 8011a4c:	4621      	mov	r1, r4
 8011a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a52:	3b30      	subs	r3, #48	; 0x30
 8011a54:	2b09      	cmp	r3, #9
 8011a56:	d94e      	bls.n	8011af6 <_svfiprintf_r+0x17e>
 8011a58:	b1b0      	cbz	r0, 8011a88 <_svfiprintf_r+0x110>
 8011a5a:	9207      	str	r2, [sp, #28]
 8011a5c:	e014      	b.n	8011a88 <_svfiprintf_r+0x110>
 8011a5e:	eba0 0308 	sub.w	r3, r0, r8
 8011a62:	fa09 f303 	lsl.w	r3, r9, r3
 8011a66:	4313      	orrs	r3, r2
 8011a68:	9304      	str	r3, [sp, #16]
 8011a6a:	46a2      	mov	sl, r4
 8011a6c:	e7d2      	b.n	8011a14 <_svfiprintf_r+0x9c>
 8011a6e:	9b03      	ldr	r3, [sp, #12]
 8011a70:	1d19      	adds	r1, r3, #4
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	9103      	str	r1, [sp, #12]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	bfbb      	ittet	lt
 8011a7a:	425b      	neglt	r3, r3
 8011a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8011a80:	9307      	strge	r3, [sp, #28]
 8011a82:	9307      	strlt	r3, [sp, #28]
 8011a84:	bfb8      	it	lt
 8011a86:	9204      	strlt	r2, [sp, #16]
 8011a88:	7823      	ldrb	r3, [r4, #0]
 8011a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8011a8c:	d10c      	bne.n	8011aa8 <_svfiprintf_r+0x130>
 8011a8e:	7863      	ldrb	r3, [r4, #1]
 8011a90:	2b2a      	cmp	r3, #42	; 0x2a
 8011a92:	d135      	bne.n	8011b00 <_svfiprintf_r+0x188>
 8011a94:	9b03      	ldr	r3, [sp, #12]
 8011a96:	1d1a      	adds	r2, r3, #4
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	9203      	str	r2, [sp, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bfb8      	it	lt
 8011aa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011aa4:	3402      	adds	r4, #2
 8011aa6:	9305      	str	r3, [sp, #20]
 8011aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011b74 <_svfiprintf_r+0x1fc>
 8011aac:	7821      	ldrb	r1, [r4, #0]
 8011aae:	2203      	movs	r2, #3
 8011ab0:	4650      	mov	r0, sl
 8011ab2:	f7ee fc2d 	bl	8000310 <memchr>
 8011ab6:	b140      	cbz	r0, 8011aca <_svfiprintf_r+0x152>
 8011ab8:	2340      	movs	r3, #64	; 0x40
 8011aba:	eba0 000a 	sub.w	r0, r0, sl
 8011abe:	fa03 f000 	lsl.w	r0, r3, r0
 8011ac2:	9b04      	ldr	r3, [sp, #16]
 8011ac4:	4303      	orrs	r3, r0
 8011ac6:	3401      	adds	r4, #1
 8011ac8:	9304      	str	r3, [sp, #16]
 8011aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ace:	4826      	ldr	r0, [pc, #152]	; (8011b68 <_svfiprintf_r+0x1f0>)
 8011ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011ad4:	2206      	movs	r2, #6
 8011ad6:	f7ee fc1b 	bl	8000310 <memchr>
 8011ada:	2800      	cmp	r0, #0
 8011adc:	d038      	beq.n	8011b50 <_svfiprintf_r+0x1d8>
 8011ade:	4b23      	ldr	r3, [pc, #140]	; (8011b6c <_svfiprintf_r+0x1f4>)
 8011ae0:	bb1b      	cbnz	r3, 8011b2a <_svfiprintf_r+0x1b2>
 8011ae2:	9b03      	ldr	r3, [sp, #12]
 8011ae4:	3307      	adds	r3, #7
 8011ae6:	f023 0307 	bic.w	r3, r3, #7
 8011aea:	3308      	adds	r3, #8
 8011aec:	9303      	str	r3, [sp, #12]
 8011aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af0:	4433      	add	r3, r6
 8011af2:	9309      	str	r3, [sp, #36]	; 0x24
 8011af4:	e767      	b.n	80119c6 <_svfiprintf_r+0x4e>
 8011af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8011afa:	460c      	mov	r4, r1
 8011afc:	2001      	movs	r0, #1
 8011afe:	e7a5      	b.n	8011a4c <_svfiprintf_r+0xd4>
 8011b00:	2300      	movs	r3, #0
 8011b02:	3401      	adds	r4, #1
 8011b04:	9305      	str	r3, [sp, #20]
 8011b06:	4619      	mov	r1, r3
 8011b08:	f04f 0c0a 	mov.w	ip, #10
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b12:	3a30      	subs	r2, #48	; 0x30
 8011b14:	2a09      	cmp	r2, #9
 8011b16:	d903      	bls.n	8011b20 <_svfiprintf_r+0x1a8>
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d0c5      	beq.n	8011aa8 <_svfiprintf_r+0x130>
 8011b1c:	9105      	str	r1, [sp, #20]
 8011b1e:	e7c3      	b.n	8011aa8 <_svfiprintf_r+0x130>
 8011b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b24:	4604      	mov	r4, r0
 8011b26:	2301      	movs	r3, #1
 8011b28:	e7f0      	b.n	8011b0c <_svfiprintf_r+0x194>
 8011b2a:	ab03      	add	r3, sp, #12
 8011b2c:	9300      	str	r3, [sp, #0]
 8011b2e:	462a      	mov	r2, r5
 8011b30:	4b0f      	ldr	r3, [pc, #60]	; (8011b70 <_svfiprintf_r+0x1f8>)
 8011b32:	a904      	add	r1, sp, #16
 8011b34:	4638      	mov	r0, r7
 8011b36:	f3af 8000 	nop.w
 8011b3a:	1c42      	adds	r2, r0, #1
 8011b3c:	4606      	mov	r6, r0
 8011b3e:	d1d6      	bne.n	8011aee <_svfiprintf_r+0x176>
 8011b40:	89ab      	ldrh	r3, [r5, #12]
 8011b42:	065b      	lsls	r3, r3, #25
 8011b44:	f53f af2c 	bmi.w	80119a0 <_svfiprintf_r+0x28>
 8011b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b4a:	b01d      	add	sp, #116	; 0x74
 8011b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b50:	ab03      	add	r3, sp, #12
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	462a      	mov	r2, r5
 8011b56:	4b06      	ldr	r3, [pc, #24]	; (8011b70 <_svfiprintf_r+0x1f8>)
 8011b58:	a904      	add	r1, sp, #16
 8011b5a:	4638      	mov	r0, r7
 8011b5c:	f000 f87a 	bl	8011c54 <_printf_i>
 8011b60:	e7eb      	b.n	8011b3a <_svfiprintf_r+0x1c2>
 8011b62:	bf00      	nop
 8011b64:	08184b40 	.word	0x08184b40
 8011b68:	08184b4a 	.word	0x08184b4a
 8011b6c:	00000000 	.word	0x00000000
 8011b70:	080118c3 	.word	0x080118c3
 8011b74:	08184b46 	.word	0x08184b46

08011b78 <_printf_common>:
 8011b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b7c:	4616      	mov	r6, r2
 8011b7e:	4699      	mov	r9, r3
 8011b80:	688a      	ldr	r2, [r1, #8]
 8011b82:	690b      	ldr	r3, [r1, #16]
 8011b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	bfb8      	it	lt
 8011b8c:	4613      	movlt	r3, r2
 8011b8e:	6033      	str	r3, [r6, #0]
 8011b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b94:	4607      	mov	r7, r0
 8011b96:	460c      	mov	r4, r1
 8011b98:	b10a      	cbz	r2, 8011b9e <_printf_common+0x26>
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	6033      	str	r3, [r6, #0]
 8011b9e:	6823      	ldr	r3, [r4, #0]
 8011ba0:	0699      	lsls	r1, r3, #26
 8011ba2:	bf42      	ittt	mi
 8011ba4:	6833      	ldrmi	r3, [r6, #0]
 8011ba6:	3302      	addmi	r3, #2
 8011ba8:	6033      	strmi	r3, [r6, #0]
 8011baa:	6825      	ldr	r5, [r4, #0]
 8011bac:	f015 0506 	ands.w	r5, r5, #6
 8011bb0:	d106      	bne.n	8011bc0 <_printf_common+0x48>
 8011bb2:	f104 0a19 	add.w	sl, r4, #25
 8011bb6:	68e3      	ldr	r3, [r4, #12]
 8011bb8:	6832      	ldr	r2, [r6, #0]
 8011bba:	1a9b      	subs	r3, r3, r2
 8011bbc:	42ab      	cmp	r3, r5
 8011bbe:	dc26      	bgt.n	8011c0e <_printf_common+0x96>
 8011bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bc4:	1e13      	subs	r3, r2, #0
 8011bc6:	6822      	ldr	r2, [r4, #0]
 8011bc8:	bf18      	it	ne
 8011bca:	2301      	movne	r3, #1
 8011bcc:	0692      	lsls	r2, r2, #26
 8011bce:	d42b      	bmi.n	8011c28 <_printf_common+0xb0>
 8011bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011bd4:	4649      	mov	r1, r9
 8011bd6:	4638      	mov	r0, r7
 8011bd8:	47c0      	blx	r8
 8011bda:	3001      	adds	r0, #1
 8011bdc:	d01e      	beq.n	8011c1c <_printf_common+0xa4>
 8011bde:	6823      	ldr	r3, [r4, #0]
 8011be0:	68e5      	ldr	r5, [r4, #12]
 8011be2:	6832      	ldr	r2, [r6, #0]
 8011be4:	f003 0306 	and.w	r3, r3, #6
 8011be8:	2b04      	cmp	r3, #4
 8011bea:	bf08      	it	eq
 8011bec:	1aad      	subeq	r5, r5, r2
 8011bee:	68a3      	ldr	r3, [r4, #8]
 8011bf0:	6922      	ldr	r2, [r4, #16]
 8011bf2:	bf0c      	ite	eq
 8011bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bf8:	2500      	movne	r5, #0
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	bfc4      	itt	gt
 8011bfe:	1a9b      	subgt	r3, r3, r2
 8011c00:	18ed      	addgt	r5, r5, r3
 8011c02:	2600      	movs	r6, #0
 8011c04:	341a      	adds	r4, #26
 8011c06:	42b5      	cmp	r5, r6
 8011c08:	d11a      	bne.n	8011c40 <_printf_common+0xc8>
 8011c0a:	2000      	movs	r0, #0
 8011c0c:	e008      	b.n	8011c20 <_printf_common+0xa8>
 8011c0e:	2301      	movs	r3, #1
 8011c10:	4652      	mov	r2, sl
 8011c12:	4649      	mov	r1, r9
 8011c14:	4638      	mov	r0, r7
 8011c16:	47c0      	blx	r8
 8011c18:	3001      	adds	r0, #1
 8011c1a:	d103      	bne.n	8011c24 <_printf_common+0xac>
 8011c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c24:	3501      	adds	r5, #1
 8011c26:	e7c6      	b.n	8011bb6 <_printf_common+0x3e>
 8011c28:	18e1      	adds	r1, r4, r3
 8011c2a:	1c5a      	adds	r2, r3, #1
 8011c2c:	2030      	movs	r0, #48	; 0x30
 8011c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c32:	4422      	add	r2, r4
 8011c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c3c:	3302      	adds	r3, #2
 8011c3e:	e7c7      	b.n	8011bd0 <_printf_common+0x58>
 8011c40:	2301      	movs	r3, #1
 8011c42:	4622      	mov	r2, r4
 8011c44:	4649      	mov	r1, r9
 8011c46:	4638      	mov	r0, r7
 8011c48:	47c0      	blx	r8
 8011c4a:	3001      	adds	r0, #1
 8011c4c:	d0e6      	beq.n	8011c1c <_printf_common+0xa4>
 8011c4e:	3601      	adds	r6, #1
 8011c50:	e7d9      	b.n	8011c06 <_printf_common+0x8e>
	...

08011c54 <_printf_i>:
 8011c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c58:	7e0f      	ldrb	r7, [r1, #24]
 8011c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c5c:	2f78      	cmp	r7, #120	; 0x78
 8011c5e:	4691      	mov	r9, r2
 8011c60:	4680      	mov	r8, r0
 8011c62:	460c      	mov	r4, r1
 8011c64:	469a      	mov	sl, r3
 8011c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c6a:	d807      	bhi.n	8011c7c <_printf_i+0x28>
 8011c6c:	2f62      	cmp	r7, #98	; 0x62
 8011c6e:	d80a      	bhi.n	8011c86 <_printf_i+0x32>
 8011c70:	2f00      	cmp	r7, #0
 8011c72:	f000 80d8 	beq.w	8011e26 <_printf_i+0x1d2>
 8011c76:	2f58      	cmp	r7, #88	; 0x58
 8011c78:	f000 80a3 	beq.w	8011dc2 <_printf_i+0x16e>
 8011c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c84:	e03a      	b.n	8011cfc <_printf_i+0xa8>
 8011c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c8a:	2b15      	cmp	r3, #21
 8011c8c:	d8f6      	bhi.n	8011c7c <_printf_i+0x28>
 8011c8e:	a101      	add	r1, pc, #4	; (adr r1, 8011c94 <_printf_i+0x40>)
 8011c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c94:	08011ced 	.word	0x08011ced
 8011c98:	08011d01 	.word	0x08011d01
 8011c9c:	08011c7d 	.word	0x08011c7d
 8011ca0:	08011c7d 	.word	0x08011c7d
 8011ca4:	08011c7d 	.word	0x08011c7d
 8011ca8:	08011c7d 	.word	0x08011c7d
 8011cac:	08011d01 	.word	0x08011d01
 8011cb0:	08011c7d 	.word	0x08011c7d
 8011cb4:	08011c7d 	.word	0x08011c7d
 8011cb8:	08011c7d 	.word	0x08011c7d
 8011cbc:	08011c7d 	.word	0x08011c7d
 8011cc0:	08011e0d 	.word	0x08011e0d
 8011cc4:	08011d31 	.word	0x08011d31
 8011cc8:	08011def 	.word	0x08011def
 8011ccc:	08011c7d 	.word	0x08011c7d
 8011cd0:	08011c7d 	.word	0x08011c7d
 8011cd4:	08011e2f 	.word	0x08011e2f
 8011cd8:	08011c7d 	.word	0x08011c7d
 8011cdc:	08011d31 	.word	0x08011d31
 8011ce0:	08011c7d 	.word	0x08011c7d
 8011ce4:	08011c7d 	.word	0x08011c7d
 8011ce8:	08011df7 	.word	0x08011df7
 8011cec:	682b      	ldr	r3, [r5, #0]
 8011cee:	1d1a      	adds	r2, r3, #4
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	602a      	str	r2, [r5, #0]
 8011cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	e0a3      	b.n	8011e48 <_printf_i+0x1f4>
 8011d00:	6820      	ldr	r0, [r4, #0]
 8011d02:	6829      	ldr	r1, [r5, #0]
 8011d04:	0606      	lsls	r6, r0, #24
 8011d06:	f101 0304 	add.w	r3, r1, #4
 8011d0a:	d50a      	bpl.n	8011d22 <_printf_i+0xce>
 8011d0c:	680e      	ldr	r6, [r1, #0]
 8011d0e:	602b      	str	r3, [r5, #0]
 8011d10:	2e00      	cmp	r6, #0
 8011d12:	da03      	bge.n	8011d1c <_printf_i+0xc8>
 8011d14:	232d      	movs	r3, #45	; 0x2d
 8011d16:	4276      	negs	r6, r6
 8011d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d1c:	485e      	ldr	r0, [pc, #376]	; (8011e98 <_printf_i+0x244>)
 8011d1e:	230a      	movs	r3, #10
 8011d20:	e019      	b.n	8011d56 <_printf_i+0x102>
 8011d22:	680e      	ldr	r6, [r1, #0]
 8011d24:	602b      	str	r3, [r5, #0]
 8011d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d2a:	bf18      	it	ne
 8011d2c:	b236      	sxthne	r6, r6
 8011d2e:	e7ef      	b.n	8011d10 <_printf_i+0xbc>
 8011d30:	682b      	ldr	r3, [r5, #0]
 8011d32:	6820      	ldr	r0, [r4, #0]
 8011d34:	1d19      	adds	r1, r3, #4
 8011d36:	6029      	str	r1, [r5, #0]
 8011d38:	0601      	lsls	r1, r0, #24
 8011d3a:	d501      	bpl.n	8011d40 <_printf_i+0xec>
 8011d3c:	681e      	ldr	r6, [r3, #0]
 8011d3e:	e002      	b.n	8011d46 <_printf_i+0xf2>
 8011d40:	0646      	lsls	r6, r0, #25
 8011d42:	d5fb      	bpl.n	8011d3c <_printf_i+0xe8>
 8011d44:	881e      	ldrh	r6, [r3, #0]
 8011d46:	4854      	ldr	r0, [pc, #336]	; (8011e98 <_printf_i+0x244>)
 8011d48:	2f6f      	cmp	r7, #111	; 0x6f
 8011d4a:	bf0c      	ite	eq
 8011d4c:	2308      	moveq	r3, #8
 8011d4e:	230a      	movne	r3, #10
 8011d50:	2100      	movs	r1, #0
 8011d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d56:	6865      	ldr	r5, [r4, #4]
 8011d58:	60a5      	str	r5, [r4, #8]
 8011d5a:	2d00      	cmp	r5, #0
 8011d5c:	bfa2      	ittt	ge
 8011d5e:	6821      	ldrge	r1, [r4, #0]
 8011d60:	f021 0104 	bicge.w	r1, r1, #4
 8011d64:	6021      	strge	r1, [r4, #0]
 8011d66:	b90e      	cbnz	r6, 8011d6c <_printf_i+0x118>
 8011d68:	2d00      	cmp	r5, #0
 8011d6a:	d04d      	beq.n	8011e08 <_printf_i+0x1b4>
 8011d6c:	4615      	mov	r5, r2
 8011d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d72:	fb03 6711 	mls	r7, r3, r1, r6
 8011d76:	5dc7      	ldrb	r7, [r0, r7]
 8011d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d7c:	4637      	mov	r7, r6
 8011d7e:	42bb      	cmp	r3, r7
 8011d80:	460e      	mov	r6, r1
 8011d82:	d9f4      	bls.n	8011d6e <_printf_i+0x11a>
 8011d84:	2b08      	cmp	r3, #8
 8011d86:	d10b      	bne.n	8011da0 <_printf_i+0x14c>
 8011d88:	6823      	ldr	r3, [r4, #0]
 8011d8a:	07de      	lsls	r6, r3, #31
 8011d8c:	d508      	bpl.n	8011da0 <_printf_i+0x14c>
 8011d8e:	6923      	ldr	r3, [r4, #16]
 8011d90:	6861      	ldr	r1, [r4, #4]
 8011d92:	4299      	cmp	r1, r3
 8011d94:	bfde      	ittt	le
 8011d96:	2330      	movle	r3, #48	; 0x30
 8011d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011da0:	1b52      	subs	r2, r2, r5
 8011da2:	6122      	str	r2, [r4, #16]
 8011da4:	f8cd a000 	str.w	sl, [sp]
 8011da8:	464b      	mov	r3, r9
 8011daa:	aa03      	add	r2, sp, #12
 8011dac:	4621      	mov	r1, r4
 8011dae:	4640      	mov	r0, r8
 8011db0:	f7ff fee2 	bl	8011b78 <_printf_common>
 8011db4:	3001      	adds	r0, #1
 8011db6:	d14c      	bne.n	8011e52 <_printf_i+0x1fe>
 8011db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dbc:	b004      	add	sp, #16
 8011dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dc2:	4835      	ldr	r0, [pc, #212]	; (8011e98 <_printf_i+0x244>)
 8011dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011dc8:	6829      	ldr	r1, [r5, #0]
 8011dca:	6823      	ldr	r3, [r4, #0]
 8011dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8011dd0:	6029      	str	r1, [r5, #0]
 8011dd2:	061d      	lsls	r5, r3, #24
 8011dd4:	d514      	bpl.n	8011e00 <_printf_i+0x1ac>
 8011dd6:	07df      	lsls	r7, r3, #31
 8011dd8:	bf44      	itt	mi
 8011dda:	f043 0320 	orrmi.w	r3, r3, #32
 8011dde:	6023      	strmi	r3, [r4, #0]
 8011de0:	b91e      	cbnz	r6, 8011dea <_printf_i+0x196>
 8011de2:	6823      	ldr	r3, [r4, #0]
 8011de4:	f023 0320 	bic.w	r3, r3, #32
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	2310      	movs	r3, #16
 8011dec:	e7b0      	b.n	8011d50 <_printf_i+0xfc>
 8011dee:	6823      	ldr	r3, [r4, #0]
 8011df0:	f043 0320 	orr.w	r3, r3, #32
 8011df4:	6023      	str	r3, [r4, #0]
 8011df6:	2378      	movs	r3, #120	; 0x78
 8011df8:	4828      	ldr	r0, [pc, #160]	; (8011e9c <_printf_i+0x248>)
 8011dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011dfe:	e7e3      	b.n	8011dc8 <_printf_i+0x174>
 8011e00:	0659      	lsls	r1, r3, #25
 8011e02:	bf48      	it	mi
 8011e04:	b2b6      	uxthmi	r6, r6
 8011e06:	e7e6      	b.n	8011dd6 <_printf_i+0x182>
 8011e08:	4615      	mov	r5, r2
 8011e0a:	e7bb      	b.n	8011d84 <_printf_i+0x130>
 8011e0c:	682b      	ldr	r3, [r5, #0]
 8011e0e:	6826      	ldr	r6, [r4, #0]
 8011e10:	6961      	ldr	r1, [r4, #20]
 8011e12:	1d18      	adds	r0, r3, #4
 8011e14:	6028      	str	r0, [r5, #0]
 8011e16:	0635      	lsls	r5, r6, #24
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	d501      	bpl.n	8011e20 <_printf_i+0x1cc>
 8011e1c:	6019      	str	r1, [r3, #0]
 8011e1e:	e002      	b.n	8011e26 <_printf_i+0x1d2>
 8011e20:	0670      	lsls	r0, r6, #25
 8011e22:	d5fb      	bpl.n	8011e1c <_printf_i+0x1c8>
 8011e24:	8019      	strh	r1, [r3, #0]
 8011e26:	2300      	movs	r3, #0
 8011e28:	6123      	str	r3, [r4, #16]
 8011e2a:	4615      	mov	r5, r2
 8011e2c:	e7ba      	b.n	8011da4 <_printf_i+0x150>
 8011e2e:	682b      	ldr	r3, [r5, #0]
 8011e30:	1d1a      	adds	r2, r3, #4
 8011e32:	602a      	str	r2, [r5, #0]
 8011e34:	681d      	ldr	r5, [r3, #0]
 8011e36:	6862      	ldr	r2, [r4, #4]
 8011e38:	2100      	movs	r1, #0
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f7ee fa68 	bl	8000310 <memchr>
 8011e40:	b108      	cbz	r0, 8011e46 <_printf_i+0x1f2>
 8011e42:	1b40      	subs	r0, r0, r5
 8011e44:	6060      	str	r0, [r4, #4]
 8011e46:	6863      	ldr	r3, [r4, #4]
 8011e48:	6123      	str	r3, [r4, #16]
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e50:	e7a8      	b.n	8011da4 <_printf_i+0x150>
 8011e52:	6923      	ldr	r3, [r4, #16]
 8011e54:	462a      	mov	r2, r5
 8011e56:	4649      	mov	r1, r9
 8011e58:	4640      	mov	r0, r8
 8011e5a:	47d0      	blx	sl
 8011e5c:	3001      	adds	r0, #1
 8011e5e:	d0ab      	beq.n	8011db8 <_printf_i+0x164>
 8011e60:	6823      	ldr	r3, [r4, #0]
 8011e62:	079b      	lsls	r3, r3, #30
 8011e64:	d413      	bmi.n	8011e8e <_printf_i+0x23a>
 8011e66:	68e0      	ldr	r0, [r4, #12]
 8011e68:	9b03      	ldr	r3, [sp, #12]
 8011e6a:	4298      	cmp	r0, r3
 8011e6c:	bfb8      	it	lt
 8011e6e:	4618      	movlt	r0, r3
 8011e70:	e7a4      	b.n	8011dbc <_printf_i+0x168>
 8011e72:	2301      	movs	r3, #1
 8011e74:	4632      	mov	r2, r6
 8011e76:	4649      	mov	r1, r9
 8011e78:	4640      	mov	r0, r8
 8011e7a:	47d0      	blx	sl
 8011e7c:	3001      	adds	r0, #1
 8011e7e:	d09b      	beq.n	8011db8 <_printf_i+0x164>
 8011e80:	3501      	adds	r5, #1
 8011e82:	68e3      	ldr	r3, [r4, #12]
 8011e84:	9903      	ldr	r1, [sp, #12]
 8011e86:	1a5b      	subs	r3, r3, r1
 8011e88:	42ab      	cmp	r3, r5
 8011e8a:	dcf2      	bgt.n	8011e72 <_printf_i+0x21e>
 8011e8c:	e7eb      	b.n	8011e66 <_printf_i+0x212>
 8011e8e:	2500      	movs	r5, #0
 8011e90:	f104 0619 	add.w	r6, r4, #25
 8011e94:	e7f5      	b.n	8011e82 <_printf_i+0x22e>
 8011e96:	bf00      	nop
 8011e98:	08184b51 	.word	0x08184b51
 8011e9c:	08184b62 	.word	0x08184b62

08011ea0 <__retarget_lock_acquire_recursive>:
 8011ea0:	4770      	bx	lr

08011ea2 <__retarget_lock_release_recursive>:
 8011ea2:	4770      	bx	lr

08011ea4 <memmove>:
 8011ea4:	4288      	cmp	r0, r1
 8011ea6:	b510      	push	{r4, lr}
 8011ea8:	eb01 0402 	add.w	r4, r1, r2
 8011eac:	d902      	bls.n	8011eb4 <memmove+0x10>
 8011eae:	4284      	cmp	r4, r0
 8011eb0:	4623      	mov	r3, r4
 8011eb2:	d807      	bhi.n	8011ec4 <memmove+0x20>
 8011eb4:	1e43      	subs	r3, r0, #1
 8011eb6:	42a1      	cmp	r1, r4
 8011eb8:	d008      	beq.n	8011ecc <memmove+0x28>
 8011eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ec2:	e7f8      	b.n	8011eb6 <memmove+0x12>
 8011ec4:	4402      	add	r2, r0
 8011ec6:	4601      	mov	r1, r0
 8011ec8:	428a      	cmp	r2, r1
 8011eca:	d100      	bne.n	8011ece <memmove+0x2a>
 8011ecc:	bd10      	pop	{r4, pc}
 8011ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ed6:	e7f7      	b.n	8011ec8 <memmove+0x24>

08011ed8 <_malloc_usable_size_r>:
 8011ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011edc:	1f18      	subs	r0, r3, #4
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	bfbc      	itt	lt
 8011ee2:	580b      	ldrlt	r3, [r1, r0]
 8011ee4:	18c0      	addlt	r0, r0, r3
 8011ee6:	4770      	bx	lr

08011ee8 <with_errnof>:
 8011ee8:	b513      	push	{r0, r1, r4, lr}
 8011eea:	4604      	mov	r4, r0
 8011eec:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011ef0:	f7ff fb5c 	bl	80115ac <__errno>
 8011ef4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011ef8:	6004      	str	r4, [r0, #0]
 8011efa:	b002      	add	sp, #8
 8011efc:	bd10      	pop	{r4, pc}

08011efe <xflowf>:
 8011efe:	b130      	cbz	r0, 8011f0e <xflowf+0x10>
 8011f00:	eef1 7a40 	vneg.f32	s15, s0
 8011f04:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011f08:	2022      	movs	r0, #34	; 0x22
 8011f0a:	f7ff bfed 	b.w	8011ee8 <with_errnof>
 8011f0e:	eef0 7a40 	vmov.f32	s15, s0
 8011f12:	e7f7      	b.n	8011f04 <xflowf+0x6>

08011f14 <__math_uflowf>:
 8011f14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f1c <__math_uflowf+0x8>
 8011f18:	f7ff bff1 	b.w	8011efe <xflowf>
 8011f1c:	10000000 	.word	0x10000000

08011f20 <__math_may_uflowf>:
 8011f20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f28 <__math_may_uflowf+0x8>
 8011f24:	f7ff bfeb 	b.w	8011efe <xflowf>
 8011f28:	1a200000 	.word	0x1a200000

08011f2c <__math_oflowf>:
 8011f2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f34 <__math_oflowf+0x8>
 8011f30:	f7ff bfe5 	b.w	8011efe <xflowf>
 8011f34:	70000000 	.word	0x70000000

08011f38 <__math_divzerof>:
 8011f38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011f3c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011f40:	2800      	cmp	r0, #0
 8011f42:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8011f46:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011f54 <__math_divzerof+0x1c>
 8011f4a:	2022      	movs	r0, #34	; 0x22
 8011f4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011f50:	f7ff bfca 	b.w	8011ee8 <with_errnof>
 8011f54:	00000000 	.word	0x00000000

08011f58 <__math_invalidf>:
 8011f58:	eef0 7a40 	vmov.f32	s15, s0
 8011f5c:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011f60:	eef4 7a67 	vcmp.f32	s15, s15
 8011f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f68:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8011f6c:	d602      	bvs.n	8011f74 <__math_invalidf+0x1c>
 8011f6e:	2021      	movs	r0, #33	; 0x21
 8011f70:	f7ff bfba 	b.w	8011ee8 <with_errnof>
 8011f74:	4770      	bx	lr
	...

08011f78 <cos>:
 8011f78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f7a:	eeb0 7b40 	vmov.f64	d7, d0
 8011f7e:	ee17 3a90 	vmov	r3, s15
 8011f82:	4a21      	ldr	r2, [pc, #132]	; (8012008 <cos+0x90>)
 8011f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	dc06      	bgt.n	8011f9a <cos+0x22>
 8011f8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8012000 <cos+0x88>
 8011f90:	b005      	add	sp, #20
 8011f92:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f96:	f000 bb03 	b.w	80125a0 <__kernel_cos>
 8011f9a:	4a1c      	ldr	r2, [pc, #112]	; (801200c <cos+0x94>)
 8011f9c:	4293      	cmp	r3, r2
 8011f9e:	dd04      	ble.n	8011faa <cos+0x32>
 8011fa0:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011fa4:	b005      	add	sp, #20
 8011fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011faa:	4668      	mov	r0, sp
 8011fac:	f000 f958 	bl	8012260 <__ieee754_rem_pio2>
 8011fb0:	f000 0003 	and.w	r0, r0, #3
 8011fb4:	2801      	cmp	r0, #1
 8011fb6:	d009      	beq.n	8011fcc <cos+0x54>
 8011fb8:	2802      	cmp	r0, #2
 8011fba:	d010      	beq.n	8011fde <cos+0x66>
 8011fbc:	b9b0      	cbnz	r0, 8011fec <cos+0x74>
 8011fbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fc2:	ed9d 0b00 	vldr	d0, [sp]
 8011fc6:	f000 faeb 	bl	80125a0 <__kernel_cos>
 8011fca:	e7eb      	b.n	8011fa4 <cos+0x2c>
 8011fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fd0:	ed9d 0b00 	vldr	d0, [sp]
 8011fd4:	f000 fde8 	bl	8012ba8 <__kernel_sin>
 8011fd8:	eeb1 0b40 	vneg.f64	d0, d0
 8011fdc:	e7e2      	b.n	8011fa4 <cos+0x2c>
 8011fde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fe2:	ed9d 0b00 	vldr	d0, [sp]
 8011fe6:	f000 fadb 	bl	80125a0 <__kernel_cos>
 8011fea:	e7f5      	b.n	8011fd8 <cos+0x60>
 8011fec:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ff0:	ed9d 0b00 	vldr	d0, [sp]
 8011ff4:	2001      	movs	r0, #1
 8011ff6:	f000 fdd7 	bl	8012ba8 <__kernel_sin>
 8011ffa:	e7d3      	b.n	8011fa4 <cos+0x2c>
 8011ffc:	f3af 8000 	nop.w
	...
 8012008:	3fe921fb 	.word	0x3fe921fb
 801200c:	7fefffff 	.word	0x7fefffff

08012010 <expf>:
 8012010:	ee10 2a10 	vmov	r2, s0
 8012014:	f240 412a 	movw	r1, #1066	; 0x42a
 8012018:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801201c:	428b      	cmp	r3, r1
 801201e:	b430      	push	{r4, r5}
 8012020:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8012024:	d92a      	bls.n	801207c <expf+0x6c>
 8012026:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801202a:	d058      	beq.n	80120de <expf+0xce>
 801202c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8012030:	d303      	bcc.n	801203a <expf+0x2a>
 8012032:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012036:	bc30      	pop	{r4, r5}
 8012038:	4770      	bx	lr
 801203a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80120e4 <expf+0xd4>
 801203e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012046:	dd03      	ble.n	8012050 <expf+0x40>
 8012048:	bc30      	pop	{r4, r5}
 801204a:	2000      	movs	r0, #0
 801204c:	f7ff bf6e 	b.w	8011f2c <__math_oflowf>
 8012050:	eddf 7a25 	vldr	s15, [pc, #148]	; 80120e8 <expf+0xd8>
 8012054:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205c:	d503      	bpl.n	8012066 <expf+0x56>
 801205e:	bc30      	pop	{r4, r5}
 8012060:	2000      	movs	r0, #0
 8012062:	f7ff bf57 	b.w	8011f14 <__math_uflowf>
 8012066:	eddf 7a21 	vldr	s15, [pc, #132]	; 80120ec <expf+0xdc>
 801206a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801206e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012072:	d503      	bpl.n	801207c <expf+0x6c>
 8012074:	bc30      	pop	{r4, r5}
 8012076:	2000      	movs	r0, #0
 8012078:	f7ff bf52 	b.w	8011f20 <__math_may_uflowf>
 801207c:	4b1c      	ldr	r3, [pc, #112]	; (80120f0 <expf+0xe0>)
 801207e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012082:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8012086:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801208a:	eeb0 7b44 	vmov.f64	d7, d4
 801208e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012092:	ee17 0a10 	vmov	r0, s14
 8012096:	ee37 7b44 	vsub.f64	d7, d7, d4
 801209a:	f000 021f 	and.w	r2, r0, #31
 801209e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80120a2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 80120a6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80120aa:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 80120ae:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80120b2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80120b6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80120ba:	684d      	ldr	r5, [r1, #4]
 80120bc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 80120c0:	2100      	movs	r1, #0
 80120c2:	190a      	adds	r2, r1, r4
 80120c4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80120c8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80120cc:	ec43 2b17 	vmov	d7, r2, r3
 80120d0:	eea6 0b04 	vfma.f64	d0, d6, d4
 80120d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80120d8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80120dc:	e7ab      	b.n	8012036 <expf+0x26>
 80120de:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80120f4 <expf+0xe4>
 80120e2:	e7a8      	b.n	8012036 <expf+0x26>
 80120e4:	42b17217 	.word	0x42b17217
 80120e8:	c2cff1b4 	.word	0xc2cff1b4
 80120ec:	c2ce8ecf 	.word	0xc2ce8ecf
 80120f0:	08184b78 	.word	0x08184b78
 80120f4:	00000000 	.word	0x00000000

080120f8 <logf>:
 80120f8:	ee10 3a10 	vmov	r3, s0
 80120fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012100:	b410      	push	{r4}
 8012102:	d055      	beq.n	80121b0 <logf+0xb8>
 8012104:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8012108:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801210c:	d31a      	bcc.n	8012144 <logf+0x4c>
 801210e:	005a      	lsls	r2, r3, #1
 8012110:	d104      	bne.n	801211c <logf+0x24>
 8012112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012116:	2001      	movs	r0, #1
 8012118:	f7ff bf0e 	b.w	8011f38 <__math_divzerof>
 801211c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012120:	d043      	beq.n	80121aa <logf+0xb2>
 8012122:	2b00      	cmp	r3, #0
 8012124:	db02      	blt.n	801212c <logf+0x34>
 8012126:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801212a:	d303      	bcc.n	8012134 <logf+0x3c>
 801212c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012130:	f7ff bf12 	b.w	8011f58 <__math_invalidf>
 8012134:	eddf 7a20 	vldr	s15, [pc, #128]	; 80121b8 <logf+0xc0>
 8012138:	ee20 0a27 	vmul.f32	s0, s0, s15
 801213c:	ee10 3a10 	vmov	r3, s0
 8012140:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8012144:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8012148:	491c      	ldr	r1, [pc, #112]	; (80121bc <logf+0xc4>)
 801214a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801214e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8012152:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8012156:	0dd4      	lsrs	r4, r2, #23
 8012158:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801215c:	05e4      	lsls	r4, r4, #23
 801215e:	ed90 6b00 	vldr	d6, [r0]
 8012162:	1b1b      	subs	r3, r3, r4
 8012164:	ee07 3a90 	vmov	s15, r3
 8012168:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801216c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012170:	15d2      	asrs	r2, r2, #23
 8012172:	eea6 0b07 	vfma.f64	d0, d6, d7
 8012176:	ed90 6b02 	vldr	d6, [r0, #8]
 801217a:	ee20 4b00 	vmul.f64	d4, d0, d0
 801217e:	ee07 2a90 	vmov	s15, r2
 8012182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012186:	eea7 6b05 	vfma.f64	d6, d7, d5
 801218a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801218e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8012192:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012196:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801219a:	ee30 0b06 	vadd.f64	d0, d0, d6
 801219e:	eea5 7b04 	vfma.f64	d7, d5, d4
 80121a2:	eea4 0b07 	vfma.f64	d0, d4, d7
 80121a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80121aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ae:	4770      	bx	lr
 80121b0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80121c0 <logf+0xc8>
 80121b4:	e7f9      	b.n	80121aa <logf+0xb2>
 80121b6:	bf00      	nop
 80121b8:	4b000000 	.word	0x4b000000
 80121bc:	08184cc0 	.word	0x08184cc0
 80121c0:	00000000 	.word	0x00000000

080121c4 <log10f>:
 80121c4:	b508      	push	{r3, lr}
 80121c6:	ed2d 8b02 	vpush	{d8}
 80121ca:	eeb0 8a40 	vmov.f32	s16, s0
 80121ce:	f000 f98b 	bl	80124e8 <__ieee754_log10f>
 80121d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80121d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121da:	d60f      	bvs.n	80121fc <log10f+0x38>
 80121dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80121e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e4:	d80a      	bhi.n	80121fc <log10f+0x38>
 80121e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80121ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ee:	d108      	bne.n	8012202 <log10f+0x3e>
 80121f0:	f7ff f9dc 	bl	80115ac <__errno>
 80121f4:	2322      	movs	r3, #34	; 0x22
 80121f6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012218 <log10f+0x54>
 80121fa:	6003      	str	r3, [r0, #0]
 80121fc:	ecbd 8b02 	vpop	{d8}
 8012200:	bd08      	pop	{r3, pc}
 8012202:	f7ff f9d3 	bl	80115ac <__errno>
 8012206:	ecbd 8b02 	vpop	{d8}
 801220a:	2321      	movs	r3, #33	; 0x21
 801220c:	6003      	str	r3, [r0, #0]
 801220e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012212:	4802      	ldr	r0, [pc, #8]	; (801221c <log10f+0x58>)
 8012214:	f000 be2a 	b.w	8012e6c <nanf>
 8012218:	ff800000 	.word	0xff800000
 801221c:	08184b45 	.word	0x08184b45

08012220 <sqrtf>:
 8012220:	b508      	push	{r3, lr}
 8012222:	ed2d 8b02 	vpush	{d8}
 8012226:	eeb0 8a40 	vmov.f32	s16, s0
 801222a:	f000 f9b5 	bl	8012598 <__ieee754_sqrtf>
 801222e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012236:	d60c      	bvs.n	8012252 <sqrtf+0x32>
 8012238:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012258 <sqrtf+0x38>
 801223c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012244:	d505      	bpl.n	8012252 <sqrtf+0x32>
 8012246:	f7ff f9b1 	bl	80115ac <__errno>
 801224a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801224e:	2321      	movs	r3, #33	; 0x21
 8012250:	6003      	str	r3, [r0, #0]
 8012252:	ecbd 8b02 	vpop	{d8}
 8012256:	bd08      	pop	{r3, pc}
	...

08012260 <__ieee754_rem_pio2>:
 8012260:	b570      	push	{r4, r5, r6, lr}
 8012262:	eeb0 7b40 	vmov.f64	d7, d0
 8012266:	ee17 5a90 	vmov	r5, s15
 801226a:	4b99      	ldr	r3, [pc, #612]	; (80124d0 <__ieee754_rem_pio2+0x270>)
 801226c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012270:	429e      	cmp	r6, r3
 8012272:	b088      	sub	sp, #32
 8012274:	4604      	mov	r4, r0
 8012276:	dc07      	bgt.n	8012288 <__ieee754_rem_pio2+0x28>
 8012278:	2200      	movs	r2, #0
 801227a:	2300      	movs	r3, #0
 801227c:	ed84 0b00 	vstr	d0, [r4]
 8012280:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012284:	2000      	movs	r0, #0
 8012286:	e01b      	b.n	80122c0 <__ieee754_rem_pio2+0x60>
 8012288:	4b92      	ldr	r3, [pc, #584]	; (80124d4 <__ieee754_rem_pio2+0x274>)
 801228a:	429e      	cmp	r6, r3
 801228c:	dc3b      	bgt.n	8012306 <__ieee754_rem_pio2+0xa6>
 801228e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8012292:	2d00      	cmp	r5, #0
 8012294:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8012490 <__ieee754_rem_pio2+0x230>
 8012298:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801229c:	dd19      	ble.n	80122d2 <__ieee754_rem_pio2+0x72>
 801229e:	ee30 7b46 	vsub.f64	d7, d0, d6
 80122a2:	429e      	cmp	r6, r3
 80122a4:	d00e      	beq.n	80122c4 <__ieee754_rem_pio2+0x64>
 80122a6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8012498 <__ieee754_rem_pio2+0x238>
 80122aa:	ee37 5b46 	vsub.f64	d5, d7, d6
 80122ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 80122b2:	ed84 5b00 	vstr	d5, [r4]
 80122b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80122be:	2001      	movs	r0, #1
 80122c0:	b008      	add	sp, #32
 80122c2:	bd70      	pop	{r4, r5, r6, pc}
 80122c4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80124a0 <__ieee754_rem_pio2+0x240>
 80122c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122cc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80124a8 <__ieee754_rem_pio2+0x248>
 80122d0:	e7eb      	b.n	80122aa <__ieee754_rem_pio2+0x4a>
 80122d2:	429e      	cmp	r6, r3
 80122d4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80122d8:	d00e      	beq.n	80122f8 <__ieee754_rem_pio2+0x98>
 80122da:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8012498 <__ieee754_rem_pio2+0x238>
 80122de:	ee37 5b06 	vadd.f64	d5, d7, d6
 80122e2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80122e6:	ed84 5b00 	vstr	d5, [r4]
 80122ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80122ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80122f6:	e7e3      	b.n	80122c0 <__ieee754_rem_pio2+0x60>
 80122f8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80124a0 <__ieee754_rem_pio2+0x240>
 80122fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012300:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80124a8 <__ieee754_rem_pio2+0x248>
 8012304:	e7eb      	b.n	80122de <__ieee754_rem_pio2+0x7e>
 8012306:	4b74      	ldr	r3, [pc, #464]	; (80124d8 <__ieee754_rem_pio2+0x278>)
 8012308:	429e      	cmp	r6, r3
 801230a:	dc70      	bgt.n	80123ee <__ieee754_rem_pio2+0x18e>
 801230c:	f000 fca4 	bl	8012c58 <fabs>
 8012310:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012314:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80124b0 <__ieee754_rem_pio2+0x250>
 8012318:	eea0 7b06 	vfma.f64	d7, d0, d6
 801231c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012320:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012324:	ee17 0a90 	vmov	r0, s15
 8012328:	eeb1 4b45 	vneg.f64	d4, d5
 801232c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8012490 <__ieee754_rem_pio2+0x230>
 8012330:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012334:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8012498 <__ieee754_rem_pio2+0x238>
 8012338:	281f      	cmp	r0, #31
 801233a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801233e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012342:	dc08      	bgt.n	8012356 <__ieee754_rem_pio2+0xf6>
 8012344:	4b65      	ldr	r3, [pc, #404]	; (80124dc <__ieee754_rem_pio2+0x27c>)
 8012346:	1e42      	subs	r2, r0, #1
 8012348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801234c:	42b3      	cmp	r3, r6
 801234e:	d002      	beq.n	8012356 <__ieee754_rem_pio2+0xf6>
 8012350:	ed84 6b00 	vstr	d6, [r4]
 8012354:	e026      	b.n	80123a4 <__ieee754_rem_pio2+0x144>
 8012356:	ee16 3a90 	vmov	r3, s13
 801235a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801235e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012362:	2b10      	cmp	r3, #16
 8012364:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012368:	ddf2      	ble.n	8012350 <__ieee754_rem_pio2+0xf0>
 801236a:	eeb0 6b40 	vmov.f64	d6, d0
 801236e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80124a0 <__ieee754_rem_pio2+0x240>
 8012372:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80124a8 <__ieee754_rem_pio2+0x248>
 8012376:	eea4 6b07 	vfma.f64	d6, d4, d7
 801237a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801237e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8012382:	eeb0 7b40 	vmov.f64	d7, d0
 8012386:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801238a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801238e:	ee13 3a90 	vmov	r3, s7
 8012392:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8012396:	1ad3      	subs	r3, r2, r3
 8012398:	2b31      	cmp	r3, #49	; 0x31
 801239a:	dc17      	bgt.n	80123cc <__ieee754_rem_pio2+0x16c>
 801239c:	eeb0 0b46 	vmov.f64	d0, d6
 80123a0:	ed84 3b00 	vstr	d3, [r4]
 80123a4:	ed94 6b00 	vldr	d6, [r4]
 80123a8:	2d00      	cmp	r5, #0
 80123aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80123ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80123b2:	ed84 0b02 	vstr	d0, [r4, #8]
 80123b6:	da83      	bge.n	80122c0 <__ieee754_rem_pio2+0x60>
 80123b8:	eeb1 6b46 	vneg.f64	d6, d6
 80123bc:	eeb1 0b40 	vneg.f64	d0, d0
 80123c0:	ed84 6b00 	vstr	d6, [r4]
 80123c4:	ed84 0b02 	vstr	d0, [r4, #8]
 80123c8:	4240      	negs	r0, r0
 80123ca:	e779      	b.n	80122c0 <__ieee754_rem_pio2+0x60>
 80123cc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80124b8 <__ieee754_rem_pio2+0x258>
 80123d0:	eeb0 0b46 	vmov.f64	d0, d6
 80123d4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80123d8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80123dc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80124c0 <__ieee754_rem_pio2+0x260>
 80123e0:	eea4 7b03 	vfma.f64	d7, d4, d3
 80123e4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80123e8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80123ec:	e7b0      	b.n	8012350 <__ieee754_rem_pio2+0xf0>
 80123ee:	4b3c      	ldr	r3, [pc, #240]	; (80124e0 <__ieee754_rem_pio2+0x280>)
 80123f0:	429e      	cmp	r6, r3
 80123f2:	dd06      	ble.n	8012402 <__ieee754_rem_pio2+0x1a2>
 80123f4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80123f8:	ed80 7b02 	vstr	d7, [r0, #8]
 80123fc:	ed80 7b00 	vstr	d7, [r0]
 8012400:	e740      	b.n	8012284 <__ieee754_rem_pio2+0x24>
 8012402:	1532      	asrs	r2, r6, #20
 8012404:	ee10 0a10 	vmov	r0, s0
 8012408:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801240c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012410:	ec41 0b17 	vmov	d7, r0, r1
 8012414:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012418:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80124c8 <__ieee754_rem_pio2+0x268>
 801241c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012420:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012424:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012428:	ee27 7b05 	vmul.f64	d7, d7, d5
 801242c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012430:	a902      	add	r1, sp, #8
 8012432:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012436:	ee37 7b46 	vsub.f64	d7, d7, d6
 801243a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801243e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012442:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012446:	2603      	movs	r6, #3
 8012448:	4608      	mov	r0, r1
 801244a:	ed91 7b04 	vldr	d7, [r1, #16]
 801244e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012456:	4633      	mov	r3, r6
 8012458:	f1a1 0108 	sub.w	r1, r1, #8
 801245c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8012460:	d0f3      	beq.n	801244a <__ieee754_rem_pio2+0x1ea>
 8012462:	4920      	ldr	r1, [pc, #128]	; (80124e4 <__ieee754_rem_pio2+0x284>)
 8012464:	9101      	str	r1, [sp, #4]
 8012466:	2102      	movs	r1, #2
 8012468:	9100      	str	r1, [sp, #0]
 801246a:	4621      	mov	r1, r4
 801246c:	f000 f904 	bl	8012678 <__kernel_rem_pio2>
 8012470:	2d00      	cmp	r5, #0
 8012472:	f6bf af25 	bge.w	80122c0 <__ieee754_rem_pio2+0x60>
 8012476:	ed94 7b00 	vldr	d7, [r4]
 801247a:	eeb1 7b47 	vneg.f64	d7, d7
 801247e:	ed84 7b00 	vstr	d7, [r4]
 8012482:	ed94 7b02 	vldr	d7, [r4, #8]
 8012486:	eeb1 7b47 	vneg.f64	d7, d7
 801248a:	ed84 7b02 	vstr	d7, [r4, #8]
 801248e:	e79b      	b.n	80123c8 <__ieee754_rem_pio2+0x168>
 8012490:	54400000 	.word	0x54400000
 8012494:	3ff921fb 	.word	0x3ff921fb
 8012498:	1a626331 	.word	0x1a626331
 801249c:	3dd0b461 	.word	0x3dd0b461
 80124a0:	1a600000 	.word	0x1a600000
 80124a4:	3dd0b461 	.word	0x3dd0b461
 80124a8:	2e037073 	.word	0x2e037073
 80124ac:	3ba3198a 	.word	0x3ba3198a
 80124b0:	6dc9c883 	.word	0x6dc9c883
 80124b4:	3fe45f30 	.word	0x3fe45f30
 80124b8:	2e000000 	.word	0x2e000000
 80124bc:	3ba3198a 	.word	0x3ba3198a
 80124c0:	252049c1 	.word	0x252049c1
 80124c4:	397b839a 	.word	0x397b839a
 80124c8:	00000000 	.word	0x00000000
 80124cc:	41700000 	.word	0x41700000
 80124d0:	3fe921fb 	.word	0x3fe921fb
 80124d4:	4002d97b 	.word	0x4002d97b
 80124d8:	413921fb 	.word	0x413921fb
 80124dc:	08184de0 	.word	0x08184de0
 80124e0:	7fefffff 	.word	0x7fefffff
 80124e4:	08184e60 	.word	0x08184e60

080124e8 <__ieee754_log10f>:
 80124e8:	b508      	push	{r3, lr}
 80124ea:	ee10 2a10 	vmov	r2, s0
 80124ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80124f2:	ed2d 8b02 	vpush	{d8}
 80124f6:	d108      	bne.n	801250a <__ieee754_log10f+0x22>
 80124f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8012580 <__ieee754_log10f+0x98>
 80124fc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012584 <__ieee754_log10f+0x9c>
 8012500:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012504:	ecbd 8b02 	vpop	{d8}
 8012508:	bd08      	pop	{r3, pc}
 801250a:	2a00      	cmp	r2, #0
 801250c:	da02      	bge.n	8012514 <__ieee754_log10f+0x2c>
 801250e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012512:	e7f3      	b.n	80124fc <__ieee754_log10f+0x14>
 8012514:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012518:	db02      	blt.n	8012520 <__ieee754_log10f+0x38>
 801251a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801251e:	e7f1      	b.n	8012504 <__ieee754_log10f+0x1c>
 8012520:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012524:	bfbf      	itttt	lt
 8012526:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8012588 <__ieee754_log10f+0xa0>
 801252a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801252e:	f06f 0118 	mvnlt.w	r1, #24
 8012532:	ee17 2a90 	vmovlt	r2, s15
 8012536:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801253a:	bfa8      	it	ge
 801253c:	2100      	movge	r1, #0
 801253e:	3b7f      	subs	r3, #127	; 0x7f
 8012540:	440b      	add	r3, r1
 8012542:	0fd9      	lsrs	r1, r3, #31
 8012544:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012548:	ee07 3a90 	vmov	s15, r3
 801254c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012550:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8012554:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012558:	ee00 3a10 	vmov	s0, r3
 801255c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012560:	f7ff fdca 	bl	80120f8 <logf>
 8012564:	eddf 7a09 	vldr	s15, [pc, #36]	; 801258c <__ieee754_log10f+0xa4>
 8012568:	ee20 0a27 	vmul.f32	s0, s0, s15
 801256c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012590 <__ieee754_log10f+0xa8>
 8012570:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012574:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012594 <__ieee754_log10f+0xac>
 8012578:	eea8 0a27 	vfma.f32	s0, s16, s15
 801257c:	e7c2      	b.n	8012504 <__ieee754_log10f+0x1c>
 801257e:	bf00      	nop
 8012580:	cc000000 	.word	0xcc000000
 8012584:	00000000 	.word	0x00000000
 8012588:	4c000000 	.word	0x4c000000
 801258c:	3ede5bd9 	.word	0x3ede5bd9
 8012590:	355427db 	.word	0x355427db
 8012594:	3e9a2080 	.word	0x3e9a2080

08012598 <__ieee754_sqrtf>:
 8012598:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801259c:	4770      	bx	lr
	...

080125a0 <__kernel_cos>:
 80125a0:	ee10 1a90 	vmov	r1, s1
 80125a4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80125a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80125ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80125b0:	da05      	bge.n	80125be <__kernel_cos+0x1e>
 80125b2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80125b6:	ee17 3a90 	vmov	r3, s15
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d03d      	beq.n	801263a <__kernel_cos+0x9a>
 80125be:	ee20 3b00 	vmul.f64	d3, d0, d0
 80125c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012640 <__kernel_cos+0xa0>
 80125c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012648 <__kernel_cos+0xa8>
 80125ca:	eea3 6b07 	vfma.f64	d6, d3, d7
 80125ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012650 <__kernel_cos+0xb0>
 80125d2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80125d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012658 <__kernel_cos+0xb8>
 80125da:	eea7 6b03 	vfma.f64	d6, d7, d3
 80125de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012660 <__kernel_cos+0xc0>
 80125e2:	4b23      	ldr	r3, [pc, #140]	; (8012670 <__kernel_cos+0xd0>)
 80125e4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80125e8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8012668 <__kernel_cos+0xc8>
 80125ec:	4299      	cmp	r1, r3
 80125ee:	eea7 6b03 	vfma.f64	d6, d7, d3
 80125f2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80125f6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80125fa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80125fe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8012602:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012606:	dc04      	bgt.n	8012612 <__kernel_cos+0x72>
 8012608:	ee37 6b46 	vsub.f64	d6, d7, d6
 801260c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8012610:	4770      	bx	lr
 8012612:	4b18      	ldr	r3, [pc, #96]	; (8012674 <__kernel_cos+0xd4>)
 8012614:	4299      	cmp	r1, r3
 8012616:	dc0d      	bgt.n	8012634 <__kernel_cos+0x94>
 8012618:	2200      	movs	r2, #0
 801261a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801261e:	ec43 2b15 	vmov	d5, r2, r3
 8012622:	ee34 0b45 	vsub.f64	d0, d4, d5
 8012626:	ee37 7b45 	vsub.f64	d7, d7, d5
 801262a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801262e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012632:	4770      	bx	lr
 8012634:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012638:	e7f3      	b.n	8012622 <__kernel_cos+0x82>
 801263a:	eeb0 0b44 	vmov.f64	d0, d4
 801263e:	4770      	bx	lr
 8012640:	be8838d4 	.word	0xbe8838d4
 8012644:	bda8fae9 	.word	0xbda8fae9
 8012648:	bdb4b1c4 	.word	0xbdb4b1c4
 801264c:	3e21ee9e 	.word	0x3e21ee9e
 8012650:	809c52ad 	.word	0x809c52ad
 8012654:	be927e4f 	.word	0xbe927e4f
 8012658:	19cb1590 	.word	0x19cb1590
 801265c:	3efa01a0 	.word	0x3efa01a0
 8012660:	16c15177 	.word	0x16c15177
 8012664:	bf56c16c 	.word	0xbf56c16c
 8012668:	5555554c 	.word	0x5555554c
 801266c:	3fa55555 	.word	0x3fa55555
 8012670:	3fd33332 	.word	0x3fd33332
 8012674:	3fe90000 	.word	0x3fe90000

08012678 <__kernel_rem_pio2>:
 8012678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801267c:	ed2d 8b06 	vpush	{d8-d10}
 8012680:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8012684:	460f      	mov	r7, r1
 8012686:	9002      	str	r0, [sp, #8]
 8012688:	49c5      	ldr	r1, [pc, #788]	; (80129a0 <__kernel_rem_pio2+0x328>)
 801268a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801268c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8012690:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8012694:	9301      	str	r3, [sp, #4]
 8012696:	f112 0f14 	cmn.w	r2, #20
 801269a:	bfa8      	it	ge
 801269c:	2018      	movge	r0, #24
 801269e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80126a2:	bfb8      	it	lt
 80126a4:	2000      	movlt	r0, #0
 80126a6:	f06f 0417 	mvn.w	r4, #23
 80126aa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8012988 <__kernel_rem_pio2+0x310>
 80126ae:	bfa4      	itt	ge
 80126b0:	f1a2 0a03 	subge.w	sl, r2, #3
 80126b4:	fb9a f0f0 	sdivge	r0, sl, r0
 80126b8:	fb00 4404 	mla	r4, r0, r4, r4
 80126bc:	1a46      	subs	r6, r0, r1
 80126be:	4414      	add	r4, r2
 80126c0:	eb09 0c01 	add.w	ip, r9, r1
 80126c4:	ad1a      	add	r5, sp, #104	; 0x68
 80126c6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80126ca:	2200      	movs	r2, #0
 80126cc:	4562      	cmp	r2, ip
 80126ce:	dd10      	ble.n	80126f2 <__kernel_rem_pio2+0x7a>
 80126d0:	9a01      	ldr	r2, [sp, #4]
 80126d2:	ab1a      	add	r3, sp, #104	; 0x68
 80126d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80126d8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80126dc:	f04f 0c00 	mov.w	ip, #0
 80126e0:	45cc      	cmp	ip, r9
 80126e2:	dc26      	bgt.n	8012732 <__kernel_rem_pio2+0xba>
 80126e4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8012988 <__kernel_rem_pio2+0x310>
 80126e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80126ec:	4616      	mov	r6, r2
 80126ee:	2500      	movs	r5, #0
 80126f0:	e015      	b.n	801271e <__kernel_rem_pio2+0xa6>
 80126f2:	42d6      	cmn	r6, r2
 80126f4:	d409      	bmi.n	801270a <__kernel_rem_pio2+0x92>
 80126f6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80126fa:	ee07 3a90 	vmov	s15, r3
 80126fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012702:	eca5 7b02 	vstmia	r5!, {d7}
 8012706:	3201      	adds	r2, #1
 8012708:	e7e0      	b.n	80126cc <__kernel_rem_pio2+0x54>
 801270a:	eeb0 7b46 	vmov.f64	d7, d6
 801270e:	e7f8      	b.n	8012702 <__kernel_rem_pio2+0x8a>
 8012710:	ecb8 5b02 	vldmia	r8!, {d5}
 8012714:	ed96 6b00 	vldr	d6, [r6]
 8012718:	3501      	adds	r5, #1
 801271a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801271e:	428d      	cmp	r5, r1
 8012720:	f1a6 0608 	sub.w	r6, r6, #8
 8012724:	ddf4      	ble.n	8012710 <__kernel_rem_pio2+0x98>
 8012726:	ecaa 7b02 	vstmia	sl!, {d7}
 801272a:	f10c 0c01 	add.w	ip, ip, #1
 801272e:	3208      	adds	r2, #8
 8012730:	e7d6      	b.n	80126e0 <__kernel_rem_pio2+0x68>
 8012732:	ab06      	add	r3, sp, #24
 8012734:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8012990 <__kernel_rem_pio2+0x318>
 8012738:	ed9f ab97 	vldr	d10, [pc, #604]	; 8012998 <__kernel_rem_pio2+0x320>
 801273c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012740:	9303      	str	r3, [sp, #12]
 8012742:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8012746:	464d      	mov	r5, r9
 8012748:	00eb      	lsls	r3, r5, #3
 801274a:	9304      	str	r3, [sp, #16]
 801274c:	ab92      	add	r3, sp, #584	; 0x248
 801274e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012752:	f10d 0b18 	add.w	fp, sp, #24
 8012756:	ab6a      	add	r3, sp, #424	; 0x1a8
 8012758:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801275c:	465e      	mov	r6, fp
 801275e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012762:	4628      	mov	r0, r5
 8012764:	2800      	cmp	r0, #0
 8012766:	f1a2 0208 	sub.w	r2, r2, #8
 801276a:	dc4c      	bgt.n	8012806 <__kernel_rem_pio2+0x18e>
 801276c:	4620      	mov	r0, r4
 801276e:	9105      	str	r1, [sp, #20]
 8012770:	f000 faf2 	bl	8012d58 <scalbn>
 8012774:	eeb0 8b40 	vmov.f64	d8, d0
 8012778:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801277c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8012780:	f000 fa76 	bl	8012c70 <floor>
 8012784:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8012788:	eea0 8b47 	vfms.f64	d8, d0, d7
 801278c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8012790:	2c00      	cmp	r4, #0
 8012792:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8012796:	ee17 8a90 	vmov	r8, s15
 801279a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801279e:	9905      	ldr	r1, [sp, #20]
 80127a0:	dd43      	ble.n	801282a <__kernel_rem_pio2+0x1b2>
 80127a2:	1e68      	subs	r0, r5, #1
 80127a4:	ab06      	add	r3, sp, #24
 80127a6:	f1c4 0c18 	rsb	ip, r4, #24
 80127aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80127ae:	fa46 f20c 	asr.w	r2, r6, ip
 80127b2:	4490      	add	r8, r2
 80127b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80127b8:	1ab6      	subs	r6, r6, r2
 80127ba:	f1c4 0217 	rsb	r2, r4, #23
 80127be:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80127c2:	4116      	asrs	r6, r2
 80127c4:	2e00      	cmp	r6, #0
 80127c6:	dd3f      	ble.n	8012848 <__kernel_rem_pio2+0x1d0>
 80127c8:	f04f 0c00 	mov.w	ip, #0
 80127cc:	f108 0801 	add.w	r8, r8, #1
 80127d0:	4660      	mov	r0, ip
 80127d2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80127d6:	4565      	cmp	r5, ip
 80127d8:	dc6e      	bgt.n	80128b8 <__kernel_rem_pio2+0x240>
 80127da:	2c00      	cmp	r4, #0
 80127dc:	dd04      	ble.n	80127e8 <__kernel_rem_pio2+0x170>
 80127de:	2c01      	cmp	r4, #1
 80127e0:	d07f      	beq.n	80128e2 <__kernel_rem_pio2+0x26a>
 80127e2:	2c02      	cmp	r4, #2
 80127e4:	f000 8087 	beq.w	80128f6 <__kernel_rem_pio2+0x27e>
 80127e8:	2e02      	cmp	r6, #2
 80127ea:	d12d      	bne.n	8012848 <__kernel_rem_pio2+0x1d0>
 80127ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80127f0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80127f4:	b340      	cbz	r0, 8012848 <__kernel_rem_pio2+0x1d0>
 80127f6:	4620      	mov	r0, r4
 80127f8:	9105      	str	r1, [sp, #20]
 80127fa:	f000 faad 	bl	8012d58 <scalbn>
 80127fe:	9905      	ldr	r1, [sp, #20]
 8012800:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012804:	e020      	b.n	8012848 <__kernel_rem_pio2+0x1d0>
 8012806:	ee20 7b09 	vmul.f64	d7, d0, d9
 801280a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801280e:	3801      	subs	r0, #1
 8012810:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012814:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012818:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801281c:	eca6 0a01 	vstmia	r6!, {s0}
 8012820:	ed92 0b00 	vldr	d0, [r2]
 8012824:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012828:	e79c      	b.n	8012764 <__kernel_rem_pio2+0xec>
 801282a:	d105      	bne.n	8012838 <__kernel_rem_pio2+0x1c0>
 801282c:	1e6a      	subs	r2, r5, #1
 801282e:	ab06      	add	r3, sp, #24
 8012830:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012834:	15f6      	asrs	r6, r6, #23
 8012836:	e7c5      	b.n	80127c4 <__kernel_rem_pio2+0x14c>
 8012838:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801283c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012844:	da36      	bge.n	80128b4 <__kernel_rem_pio2+0x23c>
 8012846:	2600      	movs	r6, #0
 8012848:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012850:	f040 80aa 	bne.w	80129a8 <__kernel_rem_pio2+0x330>
 8012854:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8012858:	4658      	mov	r0, fp
 801285a:	2200      	movs	r2, #0
 801285c:	4548      	cmp	r0, r9
 801285e:	da52      	bge.n	8012906 <__kernel_rem_pio2+0x28e>
 8012860:	2a00      	cmp	r2, #0
 8012862:	f000 8081 	beq.w	8012968 <__kernel_rem_pio2+0x2f0>
 8012866:	ab06      	add	r3, sp, #24
 8012868:	3c18      	subs	r4, #24
 801286a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801286e:	2b00      	cmp	r3, #0
 8012870:	f000 8087 	beq.w	8012982 <__kernel_rem_pio2+0x30a>
 8012874:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012878:	4620      	mov	r0, r4
 801287a:	f000 fa6d 	bl	8012d58 <scalbn>
 801287e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012882:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8012990 <__kernel_rem_pio2+0x318>
 8012886:	a96a      	add	r1, sp, #424	; 0x1a8
 8012888:	f103 0208 	add.w	r2, r3, #8
 801288c:	1888      	adds	r0, r1, r2
 801288e:	4659      	mov	r1, fp
 8012890:	2900      	cmp	r1, #0
 8012892:	f280 80b7 	bge.w	8012a04 <__kernel_rem_pio2+0x38c>
 8012896:	4659      	mov	r1, fp
 8012898:	2900      	cmp	r1, #0
 801289a:	f2c0 80d5 	blt.w	8012a48 <__kernel_rem_pio2+0x3d0>
 801289e:	a86a      	add	r0, sp, #424	; 0x1a8
 80128a0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80128a4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8012988 <__kernel_rem_pio2+0x310>
 80128a8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80129a4 <__kernel_rem_pio2+0x32c>
 80128ac:	2400      	movs	r4, #0
 80128ae:	ebab 0001 	sub.w	r0, fp, r1
 80128b2:	e0be      	b.n	8012a32 <__kernel_rem_pio2+0x3ba>
 80128b4:	2602      	movs	r6, #2
 80128b6:	e787      	b.n	80127c8 <__kernel_rem_pio2+0x150>
 80128b8:	f8db 2000 	ldr.w	r2, [fp]
 80128bc:	b958      	cbnz	r0, 80128d6 <__kernel_rem_pio2+0x25e>
 80128be:	b122      	cbz	r2, 80128ca <__kernel_rem_pio2+0x252>
 80128c0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80128c4:	f8cb 2000 	str.w	r2, [fp]
 80128c8:	2201      	movs	r2, #1
 80128ca:	f10c 0c01 	add.w	ip, ip, #1
 80128ce:	f10b 0b04 	add.w	fp, fp, #4
 80128d2:	4610      	mov	r0, r2
 80128d4:	e77f      	b.n	80127d6 <__kernel_rem_pio2+0x15e>
 80128d6:	ebae 0202 	sub.w	r2, lr, r2
 80128da:	f8cb 2000 	str.w	r2, [fp]
 80128de:	4602      	mov	r2, r0
 80128e0:	e7f3      	b.n	80128ca <__kernel_rem_pio2+0x252>
 80128e2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80128e6:	ab06      	add	r3, sp, #24
 80128e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80128ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80128f0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80128f4:	e778      	b.n	80127e8 <__kernel_rem_pio2+0x170>
 80128f6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 80128fa:	ab06      	add	r3, sp, #24
 80128fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012900:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8012904:	e7f4      	b.n	80128f0 <__kernel_rem_pio2+0x278>
 8012906:	ab06      	add	r3, sp, #24
 8012908:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801290c:	3801      	subs	r0, #1
 801290e:	431a      	orrs	r2, r3
 8012910:	e7a4      	b.n	801285c <__kernel_rem_pio2+0x1e4>
 8012912:	f10c 0c01 	add.w	ip, ip, #1
 8012916:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801291a:	2800      	cmp	r0, #0
 801291c:	d0f9      	beq.n	8012912 <__kernel_rem_pio2+0x29a>
 801291e:	9b04      	ldr	r3, [sp, #16]
 8012920:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012924:	eb0d 0203 	add.w	r2, sp, r3
 8012928:	9b01      	ldr	r3, [sp, #4]
 801292a:	18e8      	adds	r0, r5, r3
 801292c:	ab1a      	add	r3, sp, #104	; 0x68
 801292e:	1c6e      	adds	r6, r5, #1
 8012930:	3a98      	subs	r2, #152	; 0x98
 8012932:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012936:	4465      	add	r5, ip
 8012938:	42b5      	cmp	r5, r6
 801293a:	f6ff af05 	blt.w	8012748 <__kernel_rem_pio2+0xd0>
 801293e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8012942:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012946:	ee07 3a90 	vmov	s15, r3
 801294a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801294e:	f04f 0c00 	mov.w	ip, #0
 8012952:	eca0 7b02 	vstmia	r0!, {d7}
 8012956:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012988 <__kernel_rem_pio2+0x310>
 801295a:	4680      	mov	r8, r0
 801295c:	458c      	cmp	ip, r1
 801295e:	dd07      	ble.n	8012970 <__kernel_rem_pio2+0x2f8>
 8012960:	eca2 7b02 	vstmia	r2!, {d7}
 8012964:	3601      	adds	r6, #1
 8012966:	e7e7      	b.n	8012938 <__kernel_rem_pio2+0x2c0>
 8012968:	9a03      	ldr	r2, [sp, #12]
 801296a:	f04f 0c01 	mov.w	ip, #1
 801296e:	e7d2      	b.n	8012916 <__kernel_rem_pio2+0x29e>
 8012970:	ecbe 5b02 	vldmia	lr!, {d5}
 8012974:	ed38 6b02 	vldmdb	r8!, {d6}
 8012978:	f10c 0c01 	add.w	ip, ip, #1
 801297c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012980:	e7ec      	b.n	801295c <__kernel_rem_pio2+0x2e4>
 8012982:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012986:	e76e      	b.n	8012866 <__kernel_rem_pio2+0x1ee>
	...
 8012994:	3e700000 	.word	0x3e700000
 8012998:	00000000 	.word	0x00000000
 801299c:	41700000 	.word	0x41700000
 80129a0:	08184fa8 	.word	0x08184fa8
 80129a4:	08184f68 	.word	0x08184f68
 80129a8:	4260      	negs	r0, r4
 80129aa:	eeb0 0b48 	vmov.f64	d0, d8
 80129ae:	f000 f9d3 	bl	8012d58 <scalbn>
 80129b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012b90 <__kernel_rem_pio2+0x518>
 80129b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80129ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129be:	db18      	blt.n	80129f2 <__kernel_rem_pio2+0x37a>
 80129c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012b98 <__kernel_rem_pio2+0x520>
 80129c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80129c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80129cc:	aa06      	add	r2, sp, #24
 80129ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80129d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80129d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80129da:	f105 0b01 	add.w	fp, r5, #1
 80129de:	ee10 3a10 	vmov	r3, s0
 80129e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80129e6:	ee17 3a10 	vmov	r3, s14
 80129ea:	3418      	adds	r4, #24
 80129ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80129f0:	e740      	b.n	8012874 <__kernel_rem_pio2+0x1fc>
 80129f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80129f6:	aa06      	add	r2, sp, #24
 80129f8:	ee10 3a10 	vmov	r3, s0
 80129fc:	46ab      	mov	fp, r5
 80129fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012a02:	e737      	b.n	8012874 <__kernel_rem_pio2+0x1fc>
 8012a04:	ac06      	add	r4, sp, #24
 8012a06:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8012a0a:	9401      	str	r4, [sp, #4]
 8012a0c:	ee07 4a90 	vmov	s15, r4
 8012a10:	3901      	subs	r1, #1
 8012a12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a16:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012a1a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012a1e:	ed20 7b02 	vstmdb	r0!, {d7}
 8012a22:	e735      	b.n	8012890 <__kernel_rem_pio2+0x218>
 8012a24:	ecbc 5b02 	vldmia	ip!, {d5}
 8012a28:	ecb5 6b02 	vldmia	r5!, {d6}
 8012a2c:	3401      	adds	r4, #1
 8012a2e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012a32:	454c      	cmp	r4, r9
 8012a34:	dc01      	bgt.n	8012a3a <__kernel_rem_pio2+0x3c2>
 8012a36:	4284      	cmp	r4, r0
 8012a38:	ddf4      	ble.n	8012a24 <__kernel_rem_pio2+0x3ac>
 8012a3a:	ac42      	add	r4, sp, #264	; 0x108
 8012a3c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012a40:	ed80 7b00 	vstr	d7, [r0]
 8012a44:	3901      	subs	r1, #1
 8012a46:	e727      	b.n	8012898 <__kernel_rem_pio2+0x220>
 8012a48:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8012a4a:	2902      	cmp	r1, #2
 8012a4c:	dc0a      	bgt.n	8012a64 <__kernel_rem_pio2+0x3ec>
 8012a4e:	2900      	cmp	r1, #0
 8012a50:	dc2c      	bgt.n	8012aac <__kernel_rem_pio2+0x434>
 8012a52:	d045      	beq.n	8012ae0 <__kernel_rem_pio2+0x468>
 8012a54:	f008 0007 	and.w	r0, r8, #7
 8012a58:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8012a5c:	ecbd 8b06 	vpop	{d8-d10}
 8012a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a64:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012a66:	2a03      	cmp	r2, #3
 8012a68:	d1f4      	bne.n	8012a54 <__kernel_rem_pio2+0x3dc>
 8012a6a:	aa42      	add	r2, sp, #264	; 0x108
 8012a6c:	4413      	add	r3, r2
 8012a6e:	461a      	mov	r2, r3
 8012a70:	4619      	mov	r1, r3
 8012a72:	4658      	mov	r0, fp
 8012a74:	2800      	cmp	r0, #0
 8012a76:	f1a1 0108 	sub.w	r1, r1, #8
 8012a7a:	dc54      	bgt.n	8012b26 <__kernel_rem_pio2+0x4ae>
 8012a7c:	4659      	mov	r1, fp
 8012a7e:	2901      	cmp	r1, #1
 8012a80:	f1a2 0208 	sub.w	r2, r2, #8
 8012a84:	dc5f      	bgt.n	8012b46 <__kernel_rem_pio2+0x4ce>
 8012a86:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012ba0 <__kernel_rem_pio2+0x528>
 8012a8a:	3308      	adds	r3, #8
 8012a8c:	f1bb 0f01 	cmp.w	fp, #1
 8012a90:	dc69      	bgt.n	8012b66 <__kernel_rem_pio2+0x4ee>
 8012a92:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012a96:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8012a9a:	2e00      	cmp	r6, #0
 8012a9c:	d16a      	bne.n	8012b74 <__kernel_rem_pio2+0x4fc>
 8012a9e:	ed87 5b00 	vstr	d5, [r7]
 8012aa2:	ed87 6b02 	vstr	d6, [r7, #8]
 8012aa6:	ed87 7b04 	vstr	d7, [r7, #16]
 8012aaa:	e7d3      	b.n	8012a54 <__kernel_rem_pio2+0x3dc>
 8012aac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012ba0 <__kernel_rem_pio2+0x528>
 8012ab0:	ab42      	add	r3, sp, #264	; 0x108
 8012ab2:	441a      	add	r2, r3
 8012ab4:	465b      	mov	r3, fp
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	da26      	bge.n	8012b08 <__kernel_rem_pio2+0x490>
 8012aba:	b35e      	cbz	r6, 8012b14 <__kernel_rem_pio2+0x49c>
 8012abc:	eeb1 7b46 	vneg.f64	d7, d6
 8012ac0:	ed87 7b00 	vstr	d7, [r7]
 8012ac4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012ac8:	aa44      	add	r2, sp, #272	; 0x110
 8012aca:	2301      	movs	r3, #1
 8012acc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012ad0:	459b      	cmp	fp, r3
 8012ad2:	da22      	bge.n	8012b1a <__kernel_rem_pio2+0x4a2>
 8012ad4:	b10e      	cbz	r6, 8012ada <__kernel_rem_pio2+0x462>
 8012ad6:	eeb1 7b47 	vneg.f64	d7, d7
 8012ada:	ed87 7b02 	vstr	d7, [r7, #8]
 8012ade:	e7b9      	b.n	8012a54 <__kernel_rem_pio2+0x3dc>
 8012ae0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012ba0 <__kernel_rem_pio2+0x528>
 8012ae4:	ab42      	add	r3, sp, #264	; 0x108
 8012ae6:	441a      	add	r2, r3
 8012ae8:	f1bb 0f00 	cmp.w	fp, #0
 8012aec:	da05      	bge.n	8012afa <__kernel_rem_pio2+0x482>
 8012aee:	b10e      	cbz	r6, 8012af4 <__kernel_rem_pio2+0x47c>
 8012af0:	eeb1 7b47 	vneg.f64	d7, d7
 8012af4:	ed87 7b00 	vstr	d7, [r7]
 8012af8:	e7ac      	b.n	8012a54 <__kernel_rem_pio2+0x3dc>
 8012afa:	ed32 6b02 	vldmdb	r2!, {d6}
 8012afe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012b02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b06:	e7ef      	b.n	8012ae8 <__kernel_rem_pio2+0x470>
 8012b08:	ed32 7b02 	vldmdb	r2!, {d7}
 8012b0c:	3b01      	subs	r3, #1
 8012b0e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012b12:	e7d0      	b.n	8012ab6 <__kernel_rem_pio2+0x43e>
 8012b14:	eeb0 7b46 	vmov.f64	d7, d6
 8012b18:	e7d2      	b.n	8012ac0 <__kernel_rem_pio2+0x448>
 8012b1a:	ecb2 6b02 	vldmia	r2!, {d6}
 8012b1e:	3301      	adds	r3, #1
 8012b20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b24:	e7d4      	b.n	8012ad0 <__kernel_rem_pio2+0x458>
 8012b26:	ed91 7b00 	vldr	d7, [r1]
 8012b2a:	ed91 5b02 	vldr	d5, [r1, #8]
 8012b2e:	3801      	subs	r0, #1
 8012b30:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012b34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b38:	ed81 6b00 	vstr	d6, [r1]
 8012b3c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012b40:	ed81 7b02 	vstr	d7, [r1, #8]
 8012b44:	e796      	b.n	8012a74 <__kernel_rem_pio2+0x3fc>
 8012b46:	ed92 7b00 	vldr	d7, [r2]
 8012b4a:	ed92 5b02 	vldr	d5, [r2, #8]
 8012b4e:	3901      	subs	r1, #1
 8012b50:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012b54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b58:	ed82 6b00 	vstr	d6, [r2]
 8012b5c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012b60:	ed82 7b02 	vstr	d7, [r2, #8]
 8012b64:	e78b      	b.n	8012a7e <__kernel_rem_pio2+0x406>
 8012b66:	ed33 6b02 	vldmdb	r3!, {d6}
 8012b6a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b72:	e78b      	b.n	8012a8c <__kernel_rem_pio2+0x414>
 8012b74:	eeb1 5b45 	vneg.f64	d5, d5
 8012b78:	eeb1 6b46 	vneg.f64	d6, d6
 8012b7c:	ed87 5b00 	vstr	d5, [r7]
 8012b80:	eeb1 7b47 	vneg.f64	d7, d7
 8012b84:	ed87 6b02 	vstr	d6, [r7, #8]
 8012b88:	e78d      	b.n	8012aa6 <__kernel_rem_pio2+0x42e>
 8012b8a:	bf00      	nop
 8012b8c:	f3af 8000 	nop.w
 8012b90:	00000000 	.word	0x00000000
 8012b94:	41700000 	.word	0x41700000
 8012b98:	00000000 	.word	0x00000000
 8012b9c:	3e700000 	.word	0x3e700000
	...

08012ba8 <__kernel_sin>:
 8012ba8:	ee10 3a90 	vmov	r3, s1
 8012bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bb0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012bb4:	da04      	bge.n	8012bc0 <__kernel_sin+0x18>
 8012bb6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012bba:	ee17 3a90 	vmov	r3, s15
 8012bbe:	b35b      	cbz	r3, 8012c18 <__kernel_sin+0x70>
 8012bc0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012bc4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012bc8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012c20 <__kernel_sin+0x78>
 8012bcc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c28 <__kernel_sin+0x80>
 8012bd0:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012bd4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012c30 <__kernel_sin+0x88>
 8012bd8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012bdc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c38 <__kernel_sin+0x90>
 8012be0:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012be4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012c40 <__kernel_sin+0x98>
 8012be8:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012bec:	b930      	cbnz	r0, 8012bfc <__kernel_sin+0x54>
 8012bee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c48 <__kernel_sin+0xa0>
 8012bf2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012bf6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012bfa:	4770      	bx	lr
 8012bfc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012c00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012c04:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012c08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012c0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012c50 <__kernel_sin+0xa8>
 8012c10:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012c14:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012c18:	4770      	bx	lr
 8012c1a:	bf00      	nop
 8012c1c:	f3af 8000 	nop.w
 8012c20:	5acfd57c 	.word	0x5acfd57c
 8012c24:	3de5d93a 	.word	0x3de5d93a
 8012c28:	8a2b9ceb 	.word	0x8a2b9ceb
 8012c2c:	be5ae5e6 	.word	0xbe5ae5e6
 8012c30:	57b1fe7d 	.word	0x57b1fe7d
 8012c34:	3ec71de3 	.word	0x3ec71de3
 8012c38:	19c161d5 	.word	0x19c161d5
 8012c3c:	bf2a01a0 	.word	0xbf2a01a0
 8012c40:	1110f8a6 	.word	0x1110f8a6
 8012c44:	3f811111 	.word	0x3f811111
 8012c48:	55555549 	.word	0x55555549
 8012c4c:	bfc55555 	.word	0xbfc55555
 8012c50:	55555549 	.word	0x55555549
 8012c54:	3fc55555 	.word	0x3fc55555

08012c58 <fabs>:
 8012c58:	ec51 0b10 	vmov	r0, r1, d0
 8012c5c:	ee10 2a10 	vmov	r2, s0
 8012c60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c64:	ec43 2b10 	vmov	d0, r2, r3
 8012c68:	4770      	bx	lr
 8012c6a:	0000      	movs	r0, r0
 8012c6c:	0000      	movs	r0, r0
	...

08012c70 <floor>:
 8012c70:	ee10 1a90 	vmov	r1, s1
 8012c74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012c78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012c7c:	2b13      	cmp	r3, #19
 8012c7e:	b530      	push	{r4, r5, lr}
 8012c80:	ee10 0a10 	vmov	r0, s0
 8012c84:	ee10 5a10 	vmov	r5, s0
 8012c88:	dc31      	bgt.n	8012cee <floor+0x7e>
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	da15      	bge.n	8012cba <floor+0x4a>
 8012c8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012d48 <floor+0xd8>
 8012c92:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012c96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c9e:	dd07      	ble.n	8012cb0 <floor+0x40>
 8012ca0:	2900      	cmp	r1, #0
 8012ca2:	da4e      	bge.n	8012d42 <floor+0xd2>
 8012ca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ca8:	4318      	orrs	r0, r3
 8012caa:	d001      	beq.n	8012cb0 <floor+0x40>
 8012cac:	4928      	ldr	r1, [pc, #160]	; (8012d50 <floor+0xe0>)
 8012cae:	2000      	movs	r0, #0
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	ec43 2b10 	vmov	d0, r2, r3
 8012cb8:	e020      	b.n	8012cfc <floor+0x8c>
 8012cba:	4a26      	ldr	r2, [pc, #152]	; (8012d54 <floor+0xe4>)
 8012cbc:	411a      	asrs	r2, r3
 8012cbe:	ea01 0402 	and.w	r4, r1, r2
 8012cc2:	4304      	orrs	r4, r0
 8012cc4:	d01a      	beq.n	8012cfc <floor+0x8c>
 8012cc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012d48 <floor+0xd8>
 8012cca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012cce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cd6:	ddeb      	ble.n	8012cb0 <floor+0x40>
 8012cd8:	2900      	cmp	r1, #0
 8012cda:	bfbe      	ittt	lt
 8012cdc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012ce0:	fa40 f303 	asrlt.w	r3, r0, r3
 8012ce4:	18c9      	addlt	r1, r1, r3
 8012ce6:	ea21 0102 	bic.w	r1, r1, r2
 8012cea:	2000      	movs	r0, #0
 8012cec:	e7e0      	b.n	8012cb0 <floor+0x40>
 8012cee:	2b33      	cmp	r3, #51	; 0x33
 8012cf0:	dd05      	ble.n	8012cfe <floor+0x8e>
 8012cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012cf6:	d101      	bne.n	8012cfc <floor+0x8c>
 8012cf8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012cfc:	bd30      	pop	{r4, r5, pc}
 8012cfe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d06:	40e2      	lsrs	r2, r4
 8012d08:	4202      	tst	r2, r0
 8012d0a:	d0f7      	beq.n	8012cfc <floor+0x8c>
 8012d0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012d48 <floor+0xd8>
 8012d10:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012d14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1c:	ddc8      	ble.n	8012cb0 <floor+0x40>
 8012d1e:	2900      	cmp	r1, #0
 8012d20:	da02      	bge.n	8012d28 <floor+0xb8>
 8012d22:	2b14      	cmp	r3, #20
 8012d24:	d103      	bne.n	8012d2e <floor+0xbe>
 8012d26:	3101      	adds	r1, #1
 8012d28:	ea20 0002 	bic.w	r0, r0, r2
 8012d2c:	e7c0      	b.n	8012cb0 <floor+0x40>
 8012d2e:	2401      	movs	r4, #1
 8012d30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012d34:	fa04 f303 	lsl.w	r3, r4, r3
 8012d38:	4418      	add	r0, r3
 8012d3a:	42a8      	cmp	r0, r5
 8012d3c:	bf38      	it	cc
 8012d3e:	1909      	addcc	r1, r1, r4
 8012d40:	e7f2      	b.n	8012d28 <floor+0xb8>
 8012d42:	2000      	movs	r0, #0
 8012d44:	4601      	mov	r1, r0
 8012d46:	e7b3      	b.n	8012cb0 <floor+0x40>
 8012d48:	8800759c 	.word	0x8800759c
 8012d4c:	7e37e43c 	.word	0x7e37e43c
 8012d50:	bff00000 	.word	0xbff00000
 8012d54:	000fffff 	.word	0x000fffff

08012d58 <scalbn>:
 8012d58:	ee10 1a90 	vmov	r1, s1
 8012d5c:	b510      	push	{r4, lr}
 8012d5e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012d62:	b98c      	cbnz	r4, 8012d88 <scalbn+0x30>
 8012d64:	ee10 3a10 	vmov	r3, s0
 8012d68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d6c:	430b      	orrs	r3, r1
 8012d6e:	d011      	beq.n	8012d94 <scalbn+0x3c>
 8012d70:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012e38 <scalbn+0xe0>
 8012d74:	4b3c      	ldr	r3, [pc, #240]	; (8012e68 <scalbn+0x110>)
 8012d76:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012d7a:	4298      	cmp	r0, r3
 8012d7c:	da0b      	bge.n	8012d96 <scalbn+0x3e>
 8012d7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012e40 <scalbn+0xe8>
 8012d82:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012d86:	e005      	b.n	8012d94 <scalbn+0x3c>
 8012d88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012d8c:	429c      	cmp	r4, r3
 8012d8e:	d107      	bne.n	8012da0 <scalbn+0x48>
 8012d90:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012d94:	bd10      	pop	{r4, pc}
 8012d96:	ee10 1a90 	vmov	r1, s1
 8012d9a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012d9e:	3c36      	subs	r4, #54	; 0x36
 8012da0:	4404      	add	r4, r0
 8012da2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012da6:	429c      	cmp	r4, r3
 8012da8:	dd0d      	ble.n	8012dc6 <scalbn+0x6e>
 8012daa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012e48 <scalbn+0xf0>
 8012dae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012e50 <scalbn+0xf8>
 8012db2:	eeb0 6b47 	vmov.f64	d6, d7
 8012db6:	ee10 3a90 	vmov	r3, s1
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012dc0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012dc4:	e7e6      	b.n	8012d94 <scalbn+0x3c>
 8012dc6:	2c00      	cmp	r4, #0
 8012dc8:	dd0a      	ble.n	8012de0 <scalbn+0x88>
 8012dca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012dce:	ec53 2b10 	vmov	r2, r3, d0
 8012dd2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012dd6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012dda:	ec43 2b10 	vmov	d0, r2, r3
 8012dde:	e7d9      	b.n	8012d94 <scalbn+0x3c>
 8012de0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012de4:	da19      	bge.n	8012e1a <scalbn+0xc2>
 8012de6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012dea:	4298      	cmp	r0, r3
 8012dec:	ee10 3a90 	vmov	r3, s1
 8012df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012df4:	dd09      	ble.n	8012e0a <scalbn+0xb2>
 8012df6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012e48 <scalbn+0xf0>
 8012dfa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012e50 <scalbn+0xf8>
 8012dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012e08:	e7bb      	b.n	8012d82 <scalbn+0x2a>
 8012e0a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012e40 <scalbn+0xe8>
 8012e0e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012e58 <scalbn+0x100>
 8012e12:	eeb0 7b40 	vmov.f64	d7, d0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	e7f4      	b.n	8012e04 <scalbn+0xac>
 8012e1a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012e1e:	ec53 2b10 	vmov	r2, r3, d0
 8012e22:	3436      	adds	r4, #54	; 0x36
 8012e24:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012e28:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012e2c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012e60 <scalbn+0x108>
 8012e30:	ec43 2b10 	vmov	d0, r2, r3
 8012e34:	e7a5      	b.n	8012d82 <scalbn+0x2a>
 8012e36:	bf00      	nop
 8012e38:	00000000 	.word	0x00000000
 8012e3c:	43500000 	.word	0x43500000
 8012e40:	c2f8f359 	.word	0xc2f8f359
 8012e44:	01a56e1f 	.word	0x01a56e1f
 8012e48:	8800759c 	.word	0x8800759c
 8012e4c:	7e37e43c 	.word	0x7e37e43c
 8012e50:	8800759c 	.word	0x8800759c
 8012e54:	fe37e43c 	.word	0xfe37e43c
 8012e58:	c2f8f359 	.word	0xc2f8f359
 8012e5c:	81a56e1f 	.word	0x81a56e1f
 8012e60:	00000000 	.word	0x00000000
 8012e64:	3c900000 	.word	0x3c900000
 8012e68:	ffff3cb0 	.word	0xffff3cb0

08012e6c <nanf>:
 8012e6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e74 <nanf+0x8>
 8012e70:	4770      	bx	lr
 8012e72:	bf00      	nop
 8012e74:	7fc00000 	.word	0x7fc00000

08012e78 <_init>:
 8012e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e7a:	bf00      	nop
 8012e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e7e:	bc08      	pop	{r3}
 8012e80:	469e      	mov	lr, r3
 8012e82:	4770      	bx	lr

08012e84 <_fini>:
 8012e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e86:	bf00      	nop
 8012e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e8a:	bc08      	pop	{r3}
 8012e8c:	469e      	mov	lr, r3
 8012e8e:	4770      	bx	lr
