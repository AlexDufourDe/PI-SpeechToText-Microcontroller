
Speech_to_text_phase1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012cc0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00172138  08012ec0  08012ec0  00022ec0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08184ff8  08184ff8  001a141c  2**0
                  CONTENTS
  4 .ARM          00000008  08184ff8  08184ff8  00194ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08185000  08185000  001a141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08185000  08185000  00195000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08185004  08185004  00195004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  08185008  001a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018d18  2000141c  08186424  001a141c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2001a134  08186424  001aa134  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  001a141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000271d9  00000000  00000000  001a144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065ca  00000000  00000000  001c8623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  001cebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  001d07c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003827f  00000000  00000000  001d1fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c14c  00000000  00000000  0020a267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013654e  00000000  00000000  002363b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0036c901  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000728c  00000000  00000000  0036c9c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  00373c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000141c 	.word	0x2000141c
 800021c:	00000000 	.word	0x00000000
 8000220:	08012ea8 	.word	0x08012ea8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001420 	.word	0x20001420
 800023c:	08012ea8 	.word	0x08012ea8

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_ADC1_Init+0x98>)
 8000716:	f002 f819 	bl	800274c <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fdf6 	bl	8001310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_ADC1_Init+0xa4>)
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x98>)
 8000736:	f002 f84d 	bl	80027d4 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 fde6 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20001438 	.word	0x20001438
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001
 8000758:	10000012 	.word	0x10000012

0800075c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <HAL_ADC_MspInit+0x38>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d10b      	bne.n	8000786 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 8000774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000778:	6453      	str	r3, [r2, #68]	; 0x44
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <HAL_ADC_MspInit+0x3c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000
 8000798:	40023800 	.word	0x40023800

0800079c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <MX_CRC_Init+0x40>)
 80007a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_CRC_Init+0x3c>)
 80007c6:	f002 fb67 	bl	8002e98 <HAL_CRC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007d0:	f000 fd9e 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20001480 	.word	0x20001480
 80007dc:	40023000 	.word	0x40023000

080007e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <HAL_CRC_MspInit+0x38>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d10b      	bne.n	800080a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a09      	ldr	r2, [pc, #36]	; (800081c <HAL_CRC_MspInit+0x3c>)
 80007f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b07      	ldr	r3, [pc, #28]	; (800081c <HAL_CRC_MspInit+0x3c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023000 	.word	0x40023000
 800081c:	40023800 	.word	0x40023800

08000820 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000824:	4b63      	ldr	r3, [pc, #396]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <MX_DFSDM1_Init+0x198>)
 8000828:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000830:	4b60      	ldr	r3, [pc, #384]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000832:	2201      	movs	r2, #1
 8000834:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000836:	4b5f      	ldr	r3, [pc, #380]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000838:	2201      	movs	r2, #1
 800083a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800083c:	4b5d      	ldr	r3, [pc, #372]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000842:	4b5c      	ldr	r3, [pc, #368]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000844:	2200      	movs	r2, #0
 8000846:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000848:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800084a:	2200      	movs	r2, #0
 800084c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800084e:	4b59      	ldr	r3, [pc, #356]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800085c:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800085e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000862:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000864:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000866:	22b0      	movs	r2, #176	; 0xb0
 8000868:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 800086c:	2201      	movs	r2, #1
 800086e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000870:	4850      	ldr	r0, [pc, #320]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000872:	f002 fcbb 	bl	80031ec <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000876:	4b51      	ldr	r3, [pc, #324]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000878:	4a51      	ldr	r2, [pc, #324]	; (80009c0 <MX_DFSDM1_Init+0x1a0>)
 800087a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800087c:	4b4f      	ldr	r3, [pc, #316]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000884:	2201      	movs	r2, #1
 8000886:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000888:	4b4c      	ldr	r3, [pc, #304]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800088a:	2201      	movs	r2, #1
 800088c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000894:	4b49      	ldr	r3, [pc, #292]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 8000896:	2201      	movs	r2, #1
 8000898:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 800089a:	4b48      	ldr	r3, [pc, #288]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 800089c:	2200      	movs	r2, #0
 800089e:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80008a6:	4b45      	ldr	r3, [pc, #276]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008b0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008b4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008b8:	22b0      	movs	r2, #176	; 0xb0
 80008ba:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008bc:	4b3f      	ldr	r3, [pc, #252]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008be:	2201      	movs	r2, #1
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008c2:	483e      	ldr	r0, [pc, #248]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80008c4:	f002 fc92 	bl	80031ec <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008c8:	4b3e      	ldr	r3, [pc, #248]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MX_DFSDM1_Init+0x1a8>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008d4:	4b3b      	ldr	r3, [pc, #236]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008da:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 80008dc:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008de:	2204      	movs	r2, #4
 80008e0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008e2:	4b38      	ldr	r3, [pc, #224]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008fc:	4b31      	ldr	r3, [pc, #196]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 80008fe:	2204      	movs	r2, #4
 8000900:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000902:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000908:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 800090a:	2201      	movs	r2, #1
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800090e:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000910:	2200      	movs	r2, #0
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000914:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 8000916:	2200      	movs	r2, #0
 8000918:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800091a:	482a      	ldr	r0, [pc, #168]	; (80009c4 <MX_DFSDM1_Init+0x1a4>)
 800091c:	f002 fba6 	bl	800306c <HAL_DFSDM_ChannelInit>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000926:	f000 fcf3 	bl	8001310 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MX_DFSDM1_Init+0x1b0>)
 800092e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000932:	2201      	movs	r2, #1
 8000934:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000938:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800093c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000940:	2204      	movs	r2, #4
 8000942:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800095e:	2204      	movs	r2, #4
 8000960:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800096a:	220a      	movs	r2, #10
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000974:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 8000976:	2202      	movs	r2, #2
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_DFSDM1_Init+0x1ac>)
 800097c:	f002 fb76 	bl	800306c <HAL_DFSDM_ChannelInit>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000986:	f000 fcc3 	bl	8001310 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800098a:	2201      	movs	r2, #1
 800098c:	4911      	ldr	r1, [pc, #68]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 800098e:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000990:	f002 fd06 	bl	80033a0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000994:	490f      	ldr	r1, [pc, #60]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <MX_DFSDM1_Init+0x194>)
 8000998:	f002 fd48 	bl	800342c <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800099c:	2201      	movs	r2, #1
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <MX_DFSDM1_Init+0x1b4>)
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80009a2:	f002 fcfd 	bl	80033a0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80009a6:	2101      	movs	r1, #1
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_DFSDM1_Init+0x19c>)
 80009aa:	f002 fd3f 	bl	800342c <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200014a4 	.word	0x200014a4
 80009b8:	40017500 	.word	0x40017500
 80009bc:	200014f8 	.word	0x200014f8
 80009c0:	40017580 	.word	0x40017580
 80009c4:	2000154c 	.word	0x2000154c
 80009c8:	40017400 	.word	0x40017400
 80009cc:	20001584 	.word	0x20001584
 80009d0:	40017420 	.word	0x40017420
 80009d4:	00010002 	.word	0x00010002

080009d8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80009f0:	4b63      	ldr	r3, [pc, #396]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d145      	bne.n	8000a84 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009f8:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a61      	ldr	r2, [pc, #388]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000a00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000a02:	4b60      	ldr	r3, [pc, #384]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10b      	bne.n	8000a22 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000a0a:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a5e      	ldr	r2, [pc, #376]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b59      	ldr	r3, [pc, #356]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a58      	ldr	r2, [pc, #352]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b56      	ldr	r3, [pc, #344]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a4a:	230a      	movs	r3, #10
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	484d      	ldr	r0, [pc, #308]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a56:	f003 fa3b 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4845      	ldr	r0, [pc, #276]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a76:	f003 fa2b 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a3f      	ldr	r2, [pc, #252]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a82:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d137      	bne.n	8000afe <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000a92:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a94:	4b3f      	ldr	r3, [pc, #252]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000aa8:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aae:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ab0:	4b38      	ldr	r3, [pc, #224]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ab2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000abe:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ace:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad0:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ad6:	482f      	ldr	r0, [pc, #188]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ad8:	f002 fe54 	bl	8003784 <HAL_DMA_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000ae2:	f000 fc15 	bl	8001310 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aec:	4a29      	ldr	r2, [pc, #164]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a26      	ldr	r2, [pc, #152]	; (8000b9c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d137      	bne.n	8000b78 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000b08:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b0a:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000b0c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b14:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b28:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b38:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b40:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b48:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b52:	f002 fe17 	bl	8003784 <HAL_DMA_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000b5c:	f000 fbd8 	bl	8001310 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20001680 	.word	0x20001680
 8000b84:	2000167c 	.word	0x2000167c
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020c00 	.word	0x40020c00
 8000b90:	40017500 	.word	0x40017500
 8000b94:	200015bc 	.word	0x200015bc
 8000b98:	40026410 	.word	0x40026410
 8000b9c:	40017580 	.word	0x40017580
 8000ba0:	2000161c 	.word	0x2000161c
 8000ba4:	40026488 	.word	0x40026488

08000ba8 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d145      	bne.n	8000c54 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bd0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10b      	bne.n	8000bf2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4810      	ldr	r0, [pc, #64]	; (8000c68 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c26:	f003 f953 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c2a:	2308      	movs	r3, #8
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4808      	ldr	r0, [pc, #32]	; (8000c68 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c46:	f003 f943 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a02      	ldr	r2, [pc, #8]	; (8000c5c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c52:	6013      	str	r3, [r2, #0]
  }
}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20001680 	.word	0x20001680
 8000c60:	2000167c 	.word	0x2000167c
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_DMA_Init+0x78>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f002 f8cb 	bl	8002e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f002 f8e4 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2039      	movs	r0, #57	; 0x39
 8000ca0:	f002 f8c3 	bl	8002e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ca4:	2039      	movs	r0, #57	; 0x39
 8000ca6:	f002 f8dc 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	203b      	movs	r0, #59	; 0x3b
 8000cb0:	f002 f8bb 	bl	8002e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cb4:	203b      	movs	r0, #59	; 0x3b
 8000cb6:	f002 f8d4 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2044      	movs	r0, #68	; 0x44
 8000cc0:	f002 f8b3 	bl	8002e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cc4:	2044      	movs	r0, #68	; 0x44
 8000cc6:	f002 f8cc 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2045      	movs	r0, #69	; 0x45
 8000cd0:	f002 f8ab 	bl	8002e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cd4:	2045      	movs	r0, #69	; 0x45
 8000cd6:	f002 f8c4 	bl	8002e62 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	623b      	str	r3, [r7, #32]
 8000d14:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a56      	ldr	r2, [pc, #344]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d1c:	f043 0310 	orr.w	r3, r3, #16
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b54      	ldr	r3, [pc, #336]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2e:	4b51      	ldr	r3, [pc, #324]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a50      	ldr	r2, [pc, #320]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a4a      	ldr	r2, [pc, #296]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5e:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a3e      	ldr	r2, [pc, #248]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d8e:	4b39      	ldr	r3, [pc, #228]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a38      	ldr	r2, [pc, #224]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2a      	ldr	r3, [pc, #168]	; (8000e74 <MX_GPIO_Init+0x18c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4826      	ldr	r0, [pc, #152]	; (8000e78 <MX_GPIO_Init+0x190>)
 8000dde:	f003 fa3b 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	210b      	movs	r1, #11
 8000de6:	4825      	ldr	r0, [pc, #148]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000de8:	f003 fa36 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_GPIO_Init+0x198>)
 8000e04:	f003 f864 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000e08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4815      	ldr	r0, [pc, #84]	; (8000e78 <MX_GPIO_Init+0x190>)
 8000e22:	f003 f855 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000e26:	230b      	movs	r3, #11
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480f      	ldr	r0, [pc, #60]	; (8000e7c <MX_GPIO_Init+0x194>)
 8000e3e:	f003 f847 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <MX_GPIO_Init+0x19c>)
 8000e58:	f003 f83a 	bl	8003ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2028      	movs	r0, #40	; 0x28
 8000e62:	f001 ffe2 	bl	8002e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f001 fffb 	bl	8002e62 <HAL_NVIC_EnableIRQ>

}
 8000e6c:	bf00      	nop
 8000e6e:	3738      	adds	r7, #56	; 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	40022400 	.word	0x40022400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400

08000e88 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e8c:	f3bf 8f4f 	dsb	sy
}
 8000e90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e92:	f3bf 8f6f 	isb	sy
}
 8000e96:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea0:	f3bf 8f4f 	dsb	sy
}
 8000ea4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ea6:	f3bf 8f6f 	isb	sy
}
 8000eaa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <SCB_EnableICache+0x48>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eb8:	f3bf 8f4f 	dsb	sy
}
 8000ebc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ebe:	f3bf 8f6f 	isb	sy
}
 8000ec2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee2:	f3bf 8f4f 	dsb	sy
}
 8000ee6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eee:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0b5b      	lsrs	r3, r3, #13
 8000ef4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ef8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	08db      	lsrs	r3, r3, #3
 8000efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f02:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f0c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f12:	4911      	ldr	r1, [pc, #68]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1e5a      	subs	r2, r3, #1
 8000f1e:	60ba      	str	r2, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ef      	bne.n	8000f04 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	1e5a      	subs	r2, r3, #1
 8000f28:	60fa      	str	r2, [r7, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1e5      	bne.n	8000efa <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f2e:	f3bf 8f4f 	dsb	sy
}
 8000f32:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <SCB_EnableDCache+0x84>)
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f40:	f3bf 8f4f 	dsb	sy
}
 8000f44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f46:	f3bf 8f6f 	isb	sy
}
 8000f4a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b09d      	sub	sp, #116	; 0x74
 8000f60:	af00      	add	r7, sp, #0

	ModelOutput output;
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f62:	f7ff ff91 	bl	8000e88 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f66:	f7ff ffb5 	bl	8000ed4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f001 fb6d 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f92d 	bl	80011cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f72:	f000 f99d 	bl	80012b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f76:	f7ff feb7 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7a:	f7ff fe77 	bl	8000c6c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f7e:	f7ff fc4f 	bl	8000820 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000f82:	f000 fa65 	bl	8001450 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000f86:	f7ff fb95 	bl	80006b4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000f8a:	f000 fd73 	bl	8001a74 <MX_UART4_Init>
  MX_CRC_Init();
 8000f8e:	f7ff fc05 	bl	800079c <MX_CRC_Init>
  MX_RTC_Init();
 8000f92:	f000 f9c3 	bl	800131c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f96:	f000 fb65 	bl	8001664 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f9a:	f007 fe0f 	bl	8008bbc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000f9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa2:	497c      	ldr	r1, [pc, #496]	; (8001194 <main+0x238>)
 8000fa4:	487c      	ldr	r0, [pc, #496]	; (8001198 <main+0x23c>)
 8000fa6:	f002 fa71 	bl	800348c <HAL_DFSDM_FilterRegularStart_DMA>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <main+0x58>
    {
      Error_Handler();
 8000fb0:	f000 f9ae 	bl	8001310 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb8:	4978      	ldr	r1, [pc, #480]	; (800119c <main+0x240>)
 8000fba:	4879      	ldr	r0, [pc, #484]	; (80011a0 <main+0x244>)
 8000fbc:	f002 fa66 	bl	800348c <HAL_DFSDM_FilterRegularStart_DMA>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <main+0x6e>
    {
      Error_Handler();
 8000fc6:	f000 f9a3 	bl	8001310 <Error_Handler>
    }


	SDInit();
 8000fca:	f00b fac5 	bl	800c558 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd4:	4873      	ldr	r0, [pc, #460]	; (80011a4 <main+0x248>)
 8000fd6:	f003 f93f 	bl	8004258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2101      	movs	r1, #1
 8000fde:	4872      	ldr	r0, [pc, #456]	; (80011a8 <main+0x24c>)
 8000fe0:	f003 f93a 	bl	8004258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	486f      	ldr	r0, [pc, #444]	; (80011a8 <main+0x24c>)
 8000fea:	f003 f935 	bl	8004258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	486d      	ldr	r0, [pc, #436]	; (80011a8 <main+0x24c>)
 8000ff4:	f003 f930 	bl	8004258 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000ff8:	f00b f882 	bl	800c100 <Preprocessing_Init>
	 if (modelSetup()!= AI_OK)
 8000ffc:	f00a fefa 	bl	800bdf4 <modelSetup>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0xae>
	{
		Error_Handler();
 8001006:	f000 f983 	bl	8001310 <Error_Handler>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for the temper button to be pressed
	  while (!recording);
 800100a:	bf00      	nop
 800100c:	4b67      	ldr	r3, [pc, #412]	; (80011ac <main+0x250>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0fb      	beq.n	800100c <main+0xb0>
	  // debouncing
	  HAL_Delay(250);
 8001014:	20fa      	movs	r0, #250	; 0xfa
 8001016:	f001 fb75 	bl	8002704 <HAL_Delay>
	  recording = 1;
 800101a:	4b64      	ldr	r3, [pc, #400]	; (80011ac <main+0x250>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 8001020:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <main+0x254>)
 8001022:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001026:	461a      	mov	r2, r3
 8001028:	2300      	movs	r3, #0
 800102a:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 800102e:	4b60      	ldr	r3, [pc, #384]	; (80011b0 <main+0x254>)
 8001030:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
	  //LEDs on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001040:	4858      	ldr	r0, [pc, #352]	; (80011a4 <main+0x248>)
 8001042:	f003 f909 	bl	8004258 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2101      	movs	r1, #1
 800104a:	4857      	ldr	r0, [pc, #348]	; (80011a8 <main+0x24c>)
 800104c:	f003 f904 	bl	8004258 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4854      	ldr	r0, [pc, #336]	; (80011a8 <main+0x24c>)
 8001056:	f003 f8ff 	bl	8004258 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2108      	movs	r1, #8
 800105e:	4852      	ldr	r0, [pc, #328]	; (80011a8 <main+0x24c>)
 8001060:	f003 f8fa 	bl	8004258 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8001064:	e001      	b.n	800106a <main+0x10e>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 8001066:	f00b f95b 	bl	800c320 <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 800106a:	4b50      	ldr	r3, [pc, #320]	; (80011ac <main+0x250>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <main+0x124>
 8001072:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <main+0x254>)
 8001074:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001078:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f2      	beq.n	8001066 <main+0x10a>
	  }
	  HAL_Delay(250);
 8001080:	20fa      	movs	r0, #250	; 0xfa
 8001082:	f001 fb3f 	bl	8002704 <HAL_Delay>
	  recording = 0;
 8001086:	4b49      	ldr	r3, [pc, #292]	; (80011ac <main+0x250>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001092:	4844      	ldr	r0, [pc, #272]	; (80011a4 <main+0x248>)
 8001094:	f003 f8e0 	bl	8004258 <HAL_GPIO_WritePin>
	  //read date to folder name
	  get_date((char*)directory_name);
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	4618      	mov	r0, r3
 800109e:	f00b fa01 	bl	800c4a4 <get_date>
	  //creates a folder with the date
	  f_mkdir ((char*)(directory_name));
 80010a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00a f949 	bl	800b33e <f_mkdir>
	  //read time and date
	  get_time_filename((char*)file_name);
 80010ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00b fa19 	bl	800c4e8 <get_time_filename>


//////////////////////////////////////
	  //getting the mel spectrogram
	  AudioPreprocessing_RunMethod4(BufferCtl.pcm_buff, (float32_t*)spectrogram_output, BufferCtl.fptr);
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <main+0x254>)
 80010b8:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80010bc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80010c0:	461a      	mov	r2, r3
 80010c2:	493c      	ldr	r1, [pc, #240]	; (80011b4 <main+0x258>)
 80010c4:	483a      	ldr	r0, [pc, #232]	; (80011b0 <main+0x254>)
 80010c6:	f00b f8a3 	bl	800c210 <AudioPreprocessing_RunMethod4>
	  sprintf((char*)file_path,"%s/%s",directory_name, file_name);
 80010ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010d2:	1d38      	adds	r0, r7, #4
 80010d4:	4938      	ldr	r1, [pc, #224]	; (80011b8 <main+0x25c>)
 80010d6:	f010 fbaf 	bl	8011838 <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f00b fa4f 	bl	800c580 <createFile>
	  writeToFile((uint8_t*)spectrogram_output, 4*MEL_SPEC_SIZE);
 80010e2:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80010e6:	4833      	ldr	r0, [pc, #204]	; (80011b4 <main+0x258>)
 80010e8:	f00b fa62 	bl	800c5b0 <writeToFile>
	  SDclose();
 80010ec:	f00b fa74 	bl	800c5d8 <SDclose>
//////////////////////////////////////

	  sprintf((char*)file_path,"%s/%s.wav",directory_name, file_name);
 80010f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010f8:	1d38      	adds	r0, r7, #4
 80010fa:	4930      	ldr	r1, [pc, #192]	; (80011bc <main+0x260>)
 80010fc:	f010 fb9c 	bl	8011838 <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f00b fa3c 	bl	800c580 <createFile>
	  //creates the header and saves audio file
	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 8001108:	492d      	ldr	r1, [pc, #180]	; (80011c0 <main+0x264>)
 800110a:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800110e:	f00b facd 	bl	800c6ac <WavProcess_EncInit>
	  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 8001112:	212c      	movs	r1, #44	; 0x2c
 8001114:	482a      	ldr	r0, [pc, #168]	; (80011c0 <main+0x264>)
 8001116:	f00b fa4b 	bl	800c5b0 <writeToFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <main+0x254>)
 800111c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001120:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 8001124:	4619      	mov	r1, r3
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <main+0x254>)
 8001128:	f00b fa42 	bl	800c5b0 <writeToFile>
	  SDclose();
 800112c:	f00b fa54 	bl	800c5d8 <SDclose>

////////////////////////////////////// AI

	  //getting the mel spectrogram
	  output = modelRun((float32_t*)spectrogram_output);
 8001130:	4820      	ldr	r0, [pc, #128]	; (80011b4 <main+0x258>)
 8001132:	f00a feb5 	bl	800bea0 <modelRun>
 8001136:	4603      	mov	r3, r0
 8001138:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	  sprintf((char*)file_path,"%s/%s.txt",directory_name, file_name);
 800113c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001140:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001144:	1d38      	adds	r0, r7, #4
 8001146:	491f      	ldr	r1, [pc, #124]	; (80011c4 <main+0x268>)
 8001148:	f010 fb76 	bl	8011838 <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f00b fa16 	bl	800c580 <createFile>
	  writeToFile((char*)word_list[output], strlen(word_list[output]));
 8001154:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <main+0x26c>)
 8001162:	189c      	adds	r4, r3, r2
 8001164:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4a15      	ldr	r2, [pc, #84]	; (80011c8 <main+0x26c>)
 8001172:	4413      	add	r3, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f8c3 	bl	8000300 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	4619      	mov	r1, r3
 800117e:	4620      	mov	r0, r4
 8001180:	f00b fa16 	bl	800c5b0 <writeToFile>
	  SDclose();
 8001184:	f00b fa28 	bl	800c5d8 <SDclose>

	  ledsShowValue(output);
 8001188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118c:	4618      	mov	r0, r3
 800118e:	f00b fa4b 	bl	800c628 <ledsShowValue>
  {
 8001192:	e73a      	b.n	800100a <main+0xae>
 8001194:	20003688 	.word	0x20003688
 8001198:	200014f8 	.word	0x200014f8
 800119c:	20001688 	.word	0x20001688
 80011a0:	200014a4 	.word	0x200014a4
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40022400 	.word	0x40022400
 80011ac:	20001684 	.word	0x20001684
 80011b0:	2000a5b8 	.word	0x2000a5b8
 80011b4:	200122cc 	.word	0x200122cc
 80011b8:	08012ec0 	.word	0x08012ec0
 80011bc:	08012ec8 	.word	0x08012ec8
 80011c0:	2001a0f8 	.word	0x2001a0f8
 80011c4:	08012ed4 	.word	0x08012ed4
 80011c8:	20005f30 	.word	0x20005f30

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	2234      	movs	r2, #52	; 0x34
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f010 fa34 	bl	8011648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <SystemClock_Config+0xdc>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <SystemClock_Config+0xdc>)
 80011f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40
 80011fc:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <SystemClock_Config+0xdc>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <SystemClock_Config+0xe0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a27      	ldr	r2, [pc, #156]	; (80012ac <SystemClock_Config+0xe0>)
 800120e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <SystemClock_Config+0xe0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001220:	2309      	movs	r3, #9
 8001222:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800122a:	2301      	movs	r3, #1
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800122e:	2302      	movs	r3, #2
 8001230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001232:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001238:	2319      	movs	r3, #25
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 800123c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001242:	2302      	movs	r3, #2
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001246:	2309      	movs	r3, #9
 8001248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4618      	mov	r0, r3
 8001254:	f003 f882 	bl	800435c <HAL_RCC_OscConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800125e:	f000 f857 	bl	8001310 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001262:	f003 f82b 	bl	80042bc <HAL_PWREx_EnableOverDrive>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800126c:	f000 f850 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001270:	230f      	movs	r3, #15
 8001272:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	2302      	movs	r3, #2
 8001276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800127c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2107      	movs	r1, #7
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fb12 	bl	80048b8 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800129a:	f000 f839 	bl	8001310 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3750      	adds	r7, #80	; 0x50
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b0a4      	sub	sp, #144	; 0x90
 80012b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2290      	movs	r2, #144	; 0x90
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f010 f9c3 	bl	8011648 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <PeriphCommonClock_Config+0x5c>)
 80012c4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 80012c6:	f240 13ad 	movw	r3, #429	; 0x1ad
 80012ca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 80012d0:	2306      	movs	r3, #6
 80012d2:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 80012d8:	2306      	movs	r3, #6
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 80012e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80012e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fcc5 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001300:	f000 f806 	bl	8001310 <Error_Handler>
  }
}
 8001304:	bf00      	nop
 8001306:	3790      	adds	r7, #144	; 0x90
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	18300000 	.word	0x18300000

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>
	...

0800131c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <MX_RTC_Init+0xd0>)
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <MX_RTC_Init+0xd4>)
 8001338:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <MX_RTC_Init+0xd0>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <MX_RTC_Init+0xd0>)
 8001342:	227f      	movs	r2, #127	; 0x7f
 8001344:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_RTC_Init+0xd0>)
 8001348:	22ff      	movs	r2, #255	; 0xff
 800134a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <MX_RTC_Init+0xd0>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001352:	4b26      	ldr	r3, [pc, #152]	; (80013ec <MX_RTC_Init+0xd0>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001358:	4b24      	ldr	r3, [pc, #144]	; (80013ec <MX_RTC_Init+0xd0>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800135e:	4823      	ldr	r0, [pc, #140]	; (80013ec <MX_RTC_Init+0xd0>)
 8001360:	f004 fa2a 	bl	80057b8 <HAL_RTC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800136a:	f7ff ffd1 	bl	8001310 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 800136e:	2100      	movs	r1, #0
 8001370:	481e      	ldr	r0, [pc, #120]	; (80013ec <MX_RTC_Init+0xd0>)
 8001372:	f004 fd4b 	bl	8005e0c <HAL_RTCEx_BKUPRead>
 8001376:	4603      	mov	r3, r0
 8001378:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800137c:	4293      	cmp	r3, r2
 800137e:	d02e      	beq.n	80013de <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001380:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001384:	2100      	movs	r1, #0
 8001386:	4819      	ldr	r0, [pc, #100]	; (80013ec <MX_RTC_Init+0xd0>)
 8001388:	f004 fd26 	bl	8005dd8 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 800138c:	2314      	movs	r3, #20
 800138e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 8001390:	2329      	movs	r3, #41	; 0x29
 8001392:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 8001394:	2300      	movs	r3, #0
 8001396:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2201      	movs	r2, #1
 80013a4:	4619      	mov	r1, r3
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_RTC_Init+0xd0>)
 80013a8:	f004 fa8a 	bl	80058c0 <HAL_RTC_SetTime>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80013b2:	f7ff ffad 	bl	8001310 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013b6:	2301      	movs	r3, #1
 80013b8:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 80013ba:	2301      	movs	r3, #1
 80013bc:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 80013be:	2323      	movs	r3, #35	; 0x23
 80013c0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 80013c2:	2323      	movs	r3, #35	; 0x23
 80013c4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	2201      	movs	r2, #1
 80013ca:	4619      	mov	r1, r3
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <MX_RTC_Init+0xd0>)
 80013ce:	f004 fb6f 	bl	8005ab0 <HAL_RTC_SetDate>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80013d8:	f7ff ff9a 	bl	8001310 <Error_Handler>
  }
  return;
 80013dc:	e001      	b.n	80013e2 <MX_RTC_Init+0xc6>
			return;
 80013de:	bf00      	nop
 80013e0:	e000      	b.n	80013e4 <MX_RTC_Init+0xc8>
  return;
 80013e2:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20005698 	.word	0x20005698
 80013f0:	40002800 	.word	0x40002800

080013f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b0a6      	sub	sp, #152	; 0x98
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2290      	movs	r2, #144	; 0x90
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f010 f91f 	bl	8011648 <memset>
  if(rtcHandle->Instance==RTC)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_RTC_MspInit+0x54>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d114      	bne.n	800143e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001414:	2320      	movs	r3, #32
 8001416:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4618      	mov	r0, r3
 8001424:	f003 fc2e 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800142e:	f7ff ff6f 	bl	8001310 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_RTC_MspInit+0x58>)
 8001434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_RTC_MspInit+0x58>)
 8001438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800143e:	bf00      	nop
 8001440:	3798      	adds	r7, #152	; 0x98
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40002800 	.word	0x40002800
 800144c:	40023800 	.word	0x40023800

08001450 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <MX_SAI2_Init+0xb4>)
 8001458:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_SAI2_Init+0xb0>)
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001462:	2200      	movs	r2, #0
 8001464:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_SAI2_Init+0xb0>)
 800146e:	2200      	movs	r2, #0
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_SAI2_Init+0xb0>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001484:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_SAI2_Init+0xb0>)
 800148e:	2201      	movs	r2, #1
 8001490:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_SAI2_Init+0xb0>)
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_SAI2_Init+0xb8>)
 8001496:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_SAI2_Init+0xb0>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014a4:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014b2:	2220      	movs	r2, #32
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014b8:	2210      	movs	r2, #16
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014c2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80014d0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_SAI2_Init+0xb0>)
 80014ec:	f004 fca6 	bl	8005e3c <HAL_SAI_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80014f6:	f7ff ff0b 	bl	8001310 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200056b8 	.word	0x200056b8
 8001504:	40015c24 	.word	0x40015c24
 8001508:	0002ee00 	.word	0x0002ee00

0800150c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a4a      	ldr	r2, [pc, #296]	; (8001644 <HAL_SAI_MspInit+0x138>)
 800151a:	4293      	cmp	r3, r2
 800151c:	f040 808e 	bne.w	800163c <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8001520:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_SAI_MspInit+0x13c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10b      	bne.n	8001540 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_SAI_MspInit+0x140>)
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <HAL_SAI_MspInit+0x140>)
 800152e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001532:	6453      	str	r3, [r2, #68]	; 0x44
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_SAI_MspInit+0x140>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_SAI_MspInit+0x13c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_SAI_MspInit+0x13c>)
 8001548:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800155a:	230a      	movs	r3, #10
 800155c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	4619      	mov	r1, r3
 8001564:	483a      	ldr	r0, [pc, #232]	; (8001650 <HAL_SAI_MspInit+0x144>)
 8001566:	f002 fcb3 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800156a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800157c:	230a      	movs	r3, #10
 800157e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4619      	mov	r1, r3
 8001586:	4833      	ldr	r0, [pc, #204]	; (8001654 <HAL_SAI_MspInit+0x148>)
 8001588:	f002 fca2 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800158c:	2301      	movs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800159c:	230a      	movs	r3, #10
 800159e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	482c      	ldr	r0, [pc, #176]	; (8001658 <HAL_SAI_MspInit+0x14c>)
 80015a8:	f002 fc92 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ac:	2304      	movs	r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 80015bc:	2308      	movs	r3, #8
 80015be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <HAL_SAI_MspInit+0x14c>)
 80015c8:	f002 fc82 	bl	8003ed0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015ce:	4a24      	ldr	r2, [pc, #144]	; (8001660 <HAL_SAI_MspInit+0x154>)
 80015d0:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015d4:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ec:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_SAI_MspInit+0x150>)
 80015f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fc:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001604:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800160c:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001614:	4811      	ldr	r0, [pc, #68]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001616:	f002 f8b5 	bl	8003784 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 8001620:	f7ff fe76 	bl	8001310 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001628:	671a      	str	r2, [r3, #112]	; 0x70
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_SAI_MspInit+0x150>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001634:	66da      	str	r2, [r3, #108]	; 0x6c
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_SAI_MspInit+0x150>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40015c24 	.word	0x40015c24
 8001648:	2000579c 	.word	0x2000579c
 800164c:	40023800 	.word	0x40023800
 8001650:	40021000 	.word	0x40021000
 8001654:	40021800 	.word	0x40021800
 8001658:	40020000 	.word	0x40020000
 800165c:	2000573c 	.word	0x2000573c
 8001660:	40026428 	.word	0x40026428

08001664 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <MX_SDMMC1_SD_Init+0x3c>)
 800166c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 800167c:	2200      	movs	r2, #0
 800167e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <MX_SDMMC1_SD_Init+0x38>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	200057a0 	.word	0x200057a0
 80016a0:	40012c00 	.word	0x40012c00

080016a4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ae      	sub	sp, #184	; 0xb8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2290      	movs	r2, #144	; 0x90
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f00f ffbf 	bl	8011648 <memset>
  if(sdHandle->Instance==SDMMC1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a74      	ldr	r2, [pc, #464]	; (80018a0 <HAL_SD_MspInit+0x1fc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f040 80e0 	bne.w	8001896 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80016d6:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80016da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fac9 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80016f8:	f7ff fe0a 	bl	8001310 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80016fc:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <HAL_SD_MspInit+0x200>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	4a68      	ldr	r2, [pc, #416]	; (80018a4 <HAL_SD_MspInit+0x200>)
 8001702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001706:	6453      	str	r3, [r2, #68]	; 0x44
 8001708:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_SD_MspInit+0x200>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_SD_MspInit+0x200>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a62      	ldr	r2, [pc, #392]	; (80018a4 <HAL_SD_MspInit+0x200>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <HAL_SD_MspInit+0x200>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <HAL_SD_MspInit+0x200>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a5c      	ldr	r2, [pc, #368]	; (80018a4 <HAL_SD_MspInit+0x200>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_SD_MspInit+0x200>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001744:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800175e:	230c      	movs	r3, #12
 8001760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001768:	4619      	mov	r1, r3
 800176a:	484f      	ldr	r0, [pc, #316]	; (80018a8 <HAL_SD_MspInit+0x204>)
 800176c:	f002 fbb0 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001770:	2304      	movs	r3, #4
 8001772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001788:	230c      	movs	r3, #12
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001792:	4619      	mov	r1, r3
 8001794:	4845      	ldr	r0, [pc, #276]	; (80018ac <HAL_SD_MspInit+0x208>)
 8001796:	f002 fb9b 	bl	8003ed0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 800179c:	4a45      	ldr	r2, [pc, #276]	; (80018b4 <HAL_SD_MspInit+0x210>)
 800179e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80017a0:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b40      	ldr	r3, [pc, #256]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b3e      	ldr	r3, [pc, #248]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ca:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017ce:	2220      	movs	r2, #32
 80017d0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017d8:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017da:	2204      	movs	r2, #4
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017e0:	2203      	movs	r2, #3
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80017f4:	482e      	ldr	r0, [pc, #184]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 80017f6:	f001 ffc5 	bl	8003784 <HAL_DMA_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001800:	f7ff fd86 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a2a      	ldr	r2, [pc, #168]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
 800180a:	4a29      	ldr	r2, [pc, #164]	; (80018b0 <HAL_SD_MspInit+0x20c>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001812:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <HAL_SD_MspInit+0x218>)
 8001814:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_SD_MspInit+0x214>)
 800182c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001830:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001838:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_SD_MspInit+0x214>)
 800183c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001840:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001844:	2220      	movs	r2, #32
 8001846:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_SD_MspInit+0x214>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001850:	2204      	movs	r2, #4
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001856:	2203      	movs	r2, #3
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <HAL_SD_MspInit+0x214>)
 800185c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001864:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001868:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800186a:	4813      	ldr	r0, [pc, #76]	; (80018b8 <HAL_SD_MspInit+0x214>)
 800186c:	f001 ff8a 	bl	8003784 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001876:	f7ff fd4b 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_SD_MspInit+0x214>)
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_SD_MspInit+0x214>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2031      	movs	r0, #49	; 0x31
 800188c:	f001 facd 	bl	8002e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001890:	2031      	movs	r0, #49	; 0x31
 8001892:	f001 fae6 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001896:	bf00      	nop
 8001898:	37b8      	adds	r7, #184	; 0xb8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	20005824 	.word	0x20005824
 80018b4:	400264a0 	.word	0x400264a0
 80018b8:	20005884 	.word	0x20005884
 80018bc:	40026458 	.word	0x40026458

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_MspInit+0x44>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_MspInit+0x44>)
 80018cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_MspInit+0x44>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x44>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x44>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x44>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f000 feb6 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 8001960:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001964:	f002 fc92 	bl	800428c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <SDMMC1_IRQHandler+0x10>)
 8001972:	f004 fe99 	bl	80066a8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200057a0 	.word	0x200057a0

08001980 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <DMA2_Stream0_IRQHandler+0x10>)
 8001986:	f002 f82d 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200015bc 	.word	0x200015bc

08001994 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <DMA2_Stream1_IRQHandler+0x10>)
 800199a:	f002 f823 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000573c 	.word	0x2000573c

080019a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <DMA2_Stream3_IRQHandler+0x10>)
 80019ae:	f002 f819 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20005884 	.word	0x20005884

080019bc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA2_Stream5_IRQHandler+0x10>)
 80019c2:	f002 f80f 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000161c 	.word	0x2000161c

080019d0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA2_Stream6_IRQHandler+0x10>)
 80019d6:	f002 f805 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20005824 	.word	0x20005824

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f00f fde0 	bl	80115d8 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20080000 	.word	0x20080000
 8001a44:	00000800 	.word	0x00000800
 8001a48:	200058e4 	.word	0x200058e4
 8001a4c:	2001a138 	.word	0x2001a138

08001a50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <SystemInit+0x20>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <SystemInit+0x20>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_UART4_Init+0x58>)
 8001a7a:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <MX_UART4_Init+0x5c>)
 8001a7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <MX_UART4_Init+0x58>)
 8001a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_UART4_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_UART4_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_UART4_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_UART4_Init+0x58>)
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_UART4_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_UART4_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_UART4_Init+0x58>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_UART4_Init+0x58>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_UART4_Init+0x58>)
 8001ab8:	f005 fea1 	bl	80077fe <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001ac2:	f7ff fc25 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200058e8 	.word	0x200058e8
 8001ad0:	40004c00 	.word	0x40004c00

08001ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b0ae      	sub	sp, #184	; 0xb8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2290      	movs	r2, #144	; 0x90
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f00f fda7 	bl	8011648 <memset>
  if(uartHandle->Instance==UART4)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_UART_MspInit+0xf4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d15d      	bne.n	8001bc0 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f8b6 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b1e:	f7ff fbf7 	bl	8001310 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a23      	ldr	r2, [pc, #140]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b21      	ldr	r3, [pc, #132]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b82:	2308      	movs	r3, #8
 8001b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <HAL_UART_MspInit+0xfc>)
 8001b90:	f002 f99e 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001bae:	2306      	movs	r3, #6
 8001bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_UART_MspInit+0x100>)
 8001bbc:	f002 f988 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	37b8      	adds	r7, #184	; 0xb8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40004c00 	.word	0x40004c00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40020000 	.word	0x40020000

08001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bde:	490e      	ldr	r1, [pc, #56]	; (8001c18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bf4:	4c0b      	ldr	r4, [pc, #44]	; (8001c24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c02:	f7ff ff25 	bl	8001a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c06:	f00f fced 	bl	80115e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0a:	f7ff f9a7 	bl	8000f5c <main>
  bx  lr    
 8001c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	2000141c 	.word	0x2000141c
  ldr r2, =_sidata
 8001c1c:	08185008 	.word	0x08185008
  ldr r2, =_sbss
 8001c20:	2000141c 	.word	0x2000141c
  ldr r4, =_ebss
 8001c24:	2001a134 	.word	0x2001a134

08001c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <ADC_IRQHandler>

08001c2a <buf_to_float>:
 * @param      *pInSignal  points to input signal buffer
 * @param      *pOutSignal points to output signal buffer
 * @param      len         signal length
 */
void buf_to_float(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e012      	b.n	8001c62 <buf_to_float+0x38>
  {
    pOutSignal[i] = (float32_t) pInSignal[i];
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	4413      	add	r3, r2
 8001c50:	ee07 1a90 	vmov	s15, r1
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d3e8      	bcc.n	8001c3c <buf_to_float+0x12>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	; 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6899      	ldr	r1, [r3, #8]
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f00f f962 	bl	8010f68 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	18d0      	adds	r0, r2, r3
 8001cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	f00f fcc7 	bl	8011648 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6a3a      	ldr	r2, [r7, #32]
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	f00e fc94 	bl	80105f0 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd8:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf0:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f103 0008 	add.w	r0, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	1d19      	adds	r1, r3, #4
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f00f f8d4 	bl	8010eb8 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	085b      	lsrs	r3, r3, #1
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	791b      	ldrb	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12c      	bne.n	8001d80 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d2a:	e023      	b.n	8001d74 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	440b      	add	r3, r1
 8001d3e:	617a      	str	r2, [r7, #20]
 8001d40:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001d42:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	db09      	blt.n	8001d64 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001d50:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d54:	f010 fa7c 	bl	8012250 <sqrtf>
 8001d58:	eef0 7a40 	vmov.f32	s15, s0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001d62:	e004      	b.n	8001d6e <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001d6c:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d70:	3301      	adds	r3, #1
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	3301      	adds	r3, #1
 8001d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3d5      	bcc.n	8001d2c <SpectrogramColumn+0xb4>
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b08f      	sub	sp, #60	; 0x3c
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff5a 	bl	8001c78 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fa49 	bl	8002266 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd8:	e012      	b.n	8001e00 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8001dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	edd3 6a00 	vldr	s13, [r3]
 8001de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	ed97 7a06 	vldr	s14, [r7, #24]
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3e8      	bcc.n	8001dda <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e0c:	e014      	b.n	8001e38 <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	d806      	bhi.n	8001e32 <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001e30:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	3301      	adds	r3, #1
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
 8001e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3e6      	bcc.n	8001e0e <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d14a      	bne.n	8001ede <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4c:	e018      	b.n	8001e80 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5e:	f010 f9c9 	bl	80121f4 <log10f>
 8001e62:	eef0 7a40 	vmov.f32	s15, s0
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e76:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d3e2      	bcc.n	8001e4e <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e8c:	e022      	b.n	8001ed4 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8001e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	ed93 7a00 	vldr	s14, [r3]
 8001e9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e9e:	eef1 7a67 	vneg.f32	s15, s15
 8001ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	d504      	bpl.n	8001eb6 <LogMelSpectrogramColumn+0x12e>
 8001eac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb0:	eef1 7a67 	vneg.f32	s15, s15
 8001eb4:	e005      	b.n	8001ec2 <LogMelSpectrogramColumn+0x13a>
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d3d8      	bcc.n	8001e8e <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8001edc:	e01b      	b.n	8001f16 <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee2:	e014      	b.n	8001f0e <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	18d4      	adds	r4, r2, r3
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	f010 f914 	bl	8012128 <logf>
 8001f00:	eef0 7a40 	vmov.f32	s15, s0
 8001f04:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3e6      	bcc.n	8001ee4 <LogMelSpectrogramColumn+0x15c>
}
 8001f16:	bf00      	nop
 8001f18:	373c      	adds	r7, #60	; 0x3c
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd90      	pop	{r4, r7, pc}

08001f1e <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b0a4      	sub	sp, #144	; 0x90
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f38:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	330c      	adds	r3, #12
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001f74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f78:	4618      	mov	r0, r3
 8001f7a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001f7e:	f000 f9c7 	bl	8002310 <MelScale>
 8001f82:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001f86:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001f90:	f000 f9be 	bl	8002310 <MelScale>
 8001f94:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001f98:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fa0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fda:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fe8:	e133      	b.n	8002252 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d044      	beq.n	800207a <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ffa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002002:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800200e:	4618      	mov	r0, r3
 8002010:	eeb0 0a67 	vmov.f32	s0, s15
 8002014:	f000 f9ec 	bl	80023f0 <InverseMelScale>
 8002018:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 800201c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800201e:	3301      	adds	r3, #1
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002028:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800202c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002030:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800203c:	4618      	mov	r0, r3
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	f000 f9d5 	bl	80023f0 <InverseMelScale>
 8002046:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 800204a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204c:	3302      	adds	r3, #2
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002056:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800205a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800206a:	4618      	mov	r0, r3
 800206c:	eeb0 0a67 	vmov.f32	s0, s15
 8002070:	f000 f9be 	bl	80023f0 <InverseMelScale>
 8002074:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8002078:	e02e      	b.n	80020d8 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 800207a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002084:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002094:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8002098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800209a:	3301      	adds	r3, #1
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 80020b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ba:	3302      	adds	r3, #2
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80020d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d4:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 80020d8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80020dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80020e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 80020e8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020ec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80020f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f4:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8002108:	2300      	movs	r3, #0
 800210a:	667b      	str	r3, [r7, #100]	; 0x64
 800210c:	e098      	b.n	8002240 <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 800210e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8002114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 800212a:	e011      	b.n	8002150 <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 800212c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002136:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002142:	4618      	mov	r0, r3
 8002144:	eeb0 0a67 	vmov.f32	s0, s15
 8002148:	f000 f8e2 	bl	8002310 <MelScale>
 800214c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8002150:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002154:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215c:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8002160:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002164:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216c:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8002170:	edd7 7a07 	vldr	s15, [r7, #28]
 8002174:	eef1 6a67 	vneg.f32	s13, s15
 8002178:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800217c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002180:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8002184:	edd7 6a06 	vldr	s13, [r7, #24]
 8002188:	ed97 7a08 	vldr	s14, [r7, #32]
 800218c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002190:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8002194:	ed97 7a05 	vldr	s14, [r7, #20]
 8002198:	edd7 7a04 	vldr	s15, [r7, #16]
 800219c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d502      	bpl.n	80021ac <MelFilterbank_Init+0x28e>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	673b      	str	r3, [r7, #112]	; 0x70
 80021aa:	e001      	b.n	80021b0 <MelFilterbank_Init+0x292>
      else min = upper;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 80021b0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80021b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021bc:	dd2f      	ble.n	800221e <MelFilterbank_Init+0x300>
      {
        weight = min;
 80021be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c0:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 80021c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 80021c8:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80021cc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80021d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021dc:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 80021e0:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80021e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ec:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 80021f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f4:	1d1a      	adds	r2, r3, #4
 80021f6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80021fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80021fc:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 80021fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002206:	d102      	bne.n	800220e <MelFilterbank_Init+0x2f0>
          start_index = j;
 8002208:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800220a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800220e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8002214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221c:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800221e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002224:	4413      	add	r3, r2
 8002226:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800222a:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 800222c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002232:	4413      	add	r3, r2
 8002234:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002238:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800223a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800223c:	3301      	adds	r3, #1
 800223e:	667b      	str	r3, [r7, #100]	; 0x64
 8002240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002246:	429a      	cmp	r2, r3
 8002248:	f4ff af61 	bcc.w	800210e <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 800224c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224e:	3301      	adds	r3, #1
 8002250:	66bb      	str	r3, [r7, #104]	; 0x68
 8002252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002256:	429a      	cmp	r2, r3
 8002258:	f4ff aec7 	bcc.w	8001fea <MelFilterbank_Init+0xcc>
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3790      	adds	r7, #144	; 0x90
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8002266:	b480      	push	{r7}
 8002268:	b08d      	sub	sp, #52	; 0x34
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e034      	b.n	80022fa <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4413      	add	r3, r2
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80022ae:	8a7b      	ldrh	r3, [r7, #18]
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	e015      	b.n	80022e0 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	4413      	add	r3, r2
 80022bc:	ed93 7a00 	vldr	s14, [r3]
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	1d1a      	adds	r2, r3, #4
 80022c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	3301      	adds	r3, #1
 80022de:	623b      	str	r3, [r7, #32]
 80022e0:	8a3b      	ldrh	r3, [r7, #16]
 80022e2:	6a3a      	ldr	r2, [r7, #32]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d9e5      	bls.n	80022b4 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022f2:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	3301      	adds	r3, #1
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3c6      	bcc.n	8002290 <MelFilterbank+0x2a>
  }
}
 8002302:	bf00      	nop
 8002304:	bf00      	nop
 8002306:	3734      	adds	r7, #52	; 0x34
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	ed87 0a01 	vstr	s0, [r7, #4]
 800231a:	4603      	mov	r3, r0
 800231c:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d042      	beq.n	80023aa <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800232a:	4b2c      	ldr	r3, [pc, #176]	; (80023dc <MelScale+0xcc>)
 800232c:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800232e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002332:	edd7 7a06 	vldr	s15, [r7, #24]
 8002336:	ee77 6a67 	vsub.f32	s13, s14, s15
 800233a:	ed97 7a05 	vldr	s14, [r7, #20]
 800233e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002342:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002346:	4b26      	ldr	r3, [pc, #152]	; (80023e0 <MelScale+0xd0>)
 8002348:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800234a:	ed97 7a04 	vldr	s14, [r7, #16]
 800234e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002352:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002356:	ed97 7a05 	vldr	s14, [r7, #20]
 800235a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235e:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MelScale+0xd4>)
 8002364:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 8002366:	ed97 7a01 	vldr	s14, [r7, #4]
 800236a:	edd7 7a04 	vldr	s15, [r7, #16]
 800236e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	db15      	blt.n	80023a4 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 8002378:	ed97 7a01 	vldr	s14, [r7, #4]
 800237c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002380:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002384:	eeb0 0a66 	vmov.f32	s0, s13
 8002388:	f00f fece 	bl	8012128 <logf>
 800238c:	eef0 6a40 	vmov.f32	s13, s0
 8002390:	ed97 7a02 	vldr	s14, [r7, #8]
 8002394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002398:	ed97 7a03 	vldr	s14, [r7, #12]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 80023a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80023a8:	e013      	b.n	80023d2 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 80023aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80023ae:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80023e8 <MelScale+0xd8>
 80023b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023be:	eeb0 0a67 	vmov.f32	s0, s15
 80023c2:	f00f feb1 	bl	8012128 <logf>
 80023c6:	eef0 7a40 	vmov.f32	s15, s0
 80023ca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023ec <MelScale+0xdc>
 80023ce:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	42855555 	.word	0x42855555
 80023e0:	447a0000 	.word	0x447a0000
 80023e4:	3d8ccdbb 	.word	0x3d8ccdbb
 80023e8:	442f0000 	.word	0x442f0000
 80023ec:	448ce000 	.word	0x448ce000

080023f0 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80023fa:	4603      	mov	r3, r0
 80023fc:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d042      	beq.n	800248a <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800240a:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <InverseMelScale+0xcc>)
 800240c:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800240e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002412:	edd7 7a01 	vldr	s15, [r7, #4]
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	ed97 7a06 	vldr	s14, [r7, #24]
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <InverseMelScale+0xd0>)
 8002428:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800242a:	ed97 7a04 	vldr	s14, [r7, #16]
 800242e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002432:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002436:	ed97 7a05 	vldr	s14, [r7, #20]
 800243a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243e:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <InverseMelScale+0xd4>)
 8002444:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 8002446:	ed97 7a01 	vldr	s14, [r7, #4]
 800244a:	edd7 7a03 	vldr	s15, [r7, #12]
 800244e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002456:	db15      	blt.n	8002484 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8002458:	ed97 7a01 	vldr	s14, [r7, #4]
 800245c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002464:	edd7 7a02 	vldr	s15, [r7, #8]
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	eeb0 0a67 	vmov.f32	s0, s15
 8002470:	f00f fde6 	bl	8012040 <expf>
 8002474:	eeb0 7a40 	vmov.f32	s14, s0
 8002478:	edd7 7a04 	vldr	s15, [r7, #16]
 800247c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002480:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8002484:	edd7 7a07 	vldr	s15, [r7, #28]
 8002488:	e013      	b.n	80024b2 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800248a:	edd7 7a01 	vldr	s15, [r7, #4]
 800248e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80024c8 <InverseMelScale+0xd8>
 8002492:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002496:	eeb0 0a47 	vmov.f32	s0, s14
 800249a:	f00f fdd1 	bl	8012040 <expf>
 800249e:	eef0 7a40 	vmov.f32	s15, s0
 80024a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024aa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80024cc <InverseMelScale+0xdc>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80024b2:	eeb0 0a67 	vmov.f32	s0, s15
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	42855555 	.word	0x42855555
 80024c0:	447a0000 	.word	0x447a0000
 80024c4:	3d8ccdbb 	.word	0x3d8ccdbb
 80024c8:	448ce000 	.word	0x448ce000
 80024cc:	442f0000 	.word	0x442f0000

080024d0 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]

  switch (type)
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d01c      	beq.n	8002522 <Window_Init+0x52>
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	dc25      	bgt.n	8002538 <Window_Init+0x68>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <Window_Init+0x26>
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d00b      	beq.n	800250c <Window_Init+0x3c>
 80024f4:	e020      	b.n	8002538 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 80024f6:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8002550 <Window_Init+0x80>
 80024fa:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 80024fe:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 f837 	bl	8002578 <cosine_sum_window_create>
      break;
 800250a:	e019      	b.n	8002540 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800250c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8002550 <Window_Init+0x80>
 8002510:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002558 <Window_Init+0x88>
 8002514:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002560 <Window_Init+0x90>
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f82c 	bl	8002578 <cosine_sum_window_create>
      break;
 8002520:	e00e      	b.n	8002540 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8002522:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002568 <Window_Init+0x98>
 8002526:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800252a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002570 <Window_Init+0xa0>
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 f821 	bl	8002578 <cosine_sum_window_create>
      break;
 8002536:	e003      	b.n	8002540 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253c:	617b      	str	r3, [r7, #20]
      break;
 800253e:	bf00      	nop
  }

  return status;
 8002540:	697b      	ldr	r3, [r7, #20]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	f3af 8000 	nop.w
	...
 8002558:	d70a3d71 	.word	0xd70a3d71
 800255c:	3fdd70a3 	.word	0x3fdd70a3
 8002560:	147ae148 	.word	0x147ae148
 8002564:	3fe147ae 	.word	0x3fe147ae
 8002568:	47ae147b 	.word	0x47ae147b
 800256c:	3fb47ae1 	.word	0x3fb47ae1
 8002570:	ae147ae1 	.word	0xae147ae1
 8002574:	3fdae147 	.word	0x3fdae147

08002578 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	ed2d 8b02 	vpush	{d8}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	61f8      	str	r0, [r7, #28]
 8002584:	61b9      	str	r1, [r7, #24]
 8002586:	ed87 0b04 	vstr	d0, [r7, #16]
 800258a:	ed87 1b02 	vstr	d1, [r7, #8]
 800258e:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
 8002596:	e043      	b.n	8002620 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025a2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002638 <cosine_sum_window_create+0xc0>
 80025a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	ee07 3a90 	vmov	s15, r3
 80025b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025b4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80025b8:	eeb0 0b45 	vmov.f64	d0, d5
 80025bc:	f00f fcf4 	bl	8011fa8 <cos>
 80025c0:	eeb0 6b40 	vmov.f64	d6, d0
 80025c4:	ed97 7b02 	vldr	d7, [r7, #8]
 80025c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80025cc:	ed97 6b04 	vldr	d6, [r7, #16]
 80025d0:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	ee07 3a90 	vmov	s15, r3
 80025da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025de:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002640 <cosine_sum_window_create+0xc8>
 80025e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80025f0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80025f4:	eeb0 0b45 	vmov.f64	d0, d5
 80025f8:	f00f fcd6 	bl	8011fa8 <cos>
 80025fc:	eeb0 6b40 	vmov.f64	d6, d0
 8002600:	ed97 7b00 	vldr	d7, [r7]
 8002604:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002608:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8002612:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 8002616:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3301      	adds	r3, #1
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	429a      	cmp	r2, r3
 8002626:	d3b7      	bcc.n	8002598 <cosine_sum_window_create+0x20>
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	; 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	ecbd 8b02 	vpop	{d8}
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	54442d18 	.word	0x54442d18
 800263c:	401921fb 	.word	0x401921fb
 8002640:	54442d18 	.word	0x54442d18
 8002644:	402921fb 	.word	0x402921fb

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 fbe1 	bl	8002e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	200f      	movs	r0, #15
 8002654:	f000 f806 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002658:	f7ff f932 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fbfb 	bl	8002e7e <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a0:	f000 fbc3 	bl	8002e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <HAL_InitTick+0x5c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000008 	.word	0x20000008
 80026c0:	20000004 	.word	0x20000004

080026c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x20>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_IncTick+0x24>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_IncTick+0x24>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000008 	.word	0x20000008
 80026e8:	20005970 	.word	0x20005970

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20005970 	.word	0x20005970

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffde 	bl	80026ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000008 	.word	0x20000008

0800274c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e031      	b.n	80027c6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7fd fff6 	bl	800075c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_ADC_Init+0x84>)
 8002790:	4013      	ands	r3, r2
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f970 	bl	8002a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f023 0303 	bic.w	r3, r3, #3
 80027ae:	f043 0201 	orr.w	r2, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
 80027b6:	e001      	b.n	80027bc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	ffffeefd 	.word	0xffffeefd

080027d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1c>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e136      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x28a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b09      	cmp	r3, #9
 80027fe:	d93a      	bls.n	8002876 <HAL_ADC_ConfigChannel+0xa2>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002808:	d035      	beq.n	8002876 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68d9      	ldr	r1, [r3, #12]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	3b1e      	subs	r3, #30
 8002820:	2207      	movs	r2, #7
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a8d      	ldr	r2, [pc, #564]	; (8002a6c <HAL_ADC_ConfigChannel+0x298>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68d9      	ldr	r1, [r3, #12]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	061a      	lsls	r2, r3, #24
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284e:	e035      	b.n	80028bc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68d9      	ldr	r1, [r3, #12]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	4603      	mov	r3, r0
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4403      	add	r3, r0
 8002868:	3b1e      	subs	r3, #30
 800286a:	409a      	lsls	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002874:	e022      	b.n	80028bc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6919      	ldr	r1, [r3, #16]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	4613      	mov	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	4413      	add	r3, r2
 800288a:	2207      	movs	r2, #7
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43da      	mvns	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	400a      	ands	r2, r1
 8002898:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6919      	ldr	r1, [r3, #16]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	4603      	mov	r3, r0
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4403      	add	r3, r0
 80028b2:	409a      	lsls	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d824      	bhi.n	800290e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b05      	subs	r3, #5
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b05      	subs	r3, #5
 8002900:	fa00 f203 	lsl.w	r2, r0, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	635a      	str	r2, [r3, #52]	; 0x34
 800290c:	e04c      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b0c      	cmp	r3, #12
 8002914:	d824      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b23      	subs	r3, #35	; 0x23
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b23      	subs	r3, #35	; 0x23
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
 800295e:	e023      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	3b41      	subs	r3, #65	; 0x41
 8002972:	221f      	movs	r2, #31
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	4618      	mov	r0, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b41      	subs	r3, #65	; 0x41
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_ADC_ConfigChannel+0x29c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d10a      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1f4>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ba:	d105      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029bc:	4b2d      	ldr	r3, [pc, #180]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	4a2c      	ldr	r2, [pc, #176]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 80029c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029c6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <HAL_ADC_ConfigChannel+0x29c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10f      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x21e>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2b12      	cmp	r3, #18
 80029d8:	d10b      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 80029e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029e4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 80029ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029f0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_ADC_ConfigChannel+0x29c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d12b      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x280>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_ADC_ConfigChannel+0x298>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x23a>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b11      	cmp	r3, #17
 8002a0c:	d122      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a18:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a10      	ldr	r2, [pc, #64]	; (8002a6c <HAL_ADC_ConfigChannel+0x298>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d111      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <HAL_ADC_ConfigChannel+0x2a8>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9a      	lsrs	r2, r3, #18
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a46:	e002      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	10000012 	.word	0x10000012
 8002a70:	40012000 	.word	0x40012000
 8002a74:	40012300 	.word	0x40012300
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	431bde83 	.word	0x431bde83

08002a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002a88:	4b78      	ldr	r3, [pc, #480]	; (8002c6c <ADC_Init+0x1ec>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a77      	ldr	r2, [pc, #476]	; (8002c6c <ADC_Init+0x1ec>)
 8002a8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002a92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002a94:	4b75      	ldr	r3, [pc, #468]	; (8002c6c <ADC_Init+0x1ec>)
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4973      	ldr	r1, [pc, #460]	; (8002c6c <ADC_Init+0x1ec>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	021a      	lsls	r2, r3, #8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6859      	ldr	r1, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6899      	ldr	r1, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <ADC_Init+0x1f0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d022      	beq.n	8002b5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6899      	ldr	r1, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	e00f      	b.n	8002b7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0202 	bic.w	r2, r2, #2
 8002b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	005a      	lsls	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d01b      	beq.n	8002be0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	035a      	lsls	r2, r3, #13
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e007      	b.n	8002bf0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	051a      	lsls	r2, r3, #20
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c32:	025a      	lsls	r2, r3, #9
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	029a      	lsls	r2, r3, #10
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40012300 	.word	0x40012300
 8002c70:	0f000001 	.word	0x0f000001

08002c74 <__NVIC_SetPriorityGrouping>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c9c:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00
 8002cb8:	05fa0000 	.word	0x05fa0000

08002cbc <__NVIC_GetPriorityGrouping>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_EnableIRQ>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db0b      	blt.n	8002d02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <__NVIC_EnableIRQ+0x38>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100

08002d14 <__NVIC_SetPriority>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	6039      	str	r1, [r7, #0]
 8002d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	db0a      	blt.n	8002d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	490c      	ldr	r1, [pc, #48]	; (8002d60 <__NVIC_SetPriority+0x4c>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	0112      	lsls	r2, r2, #4
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	440b      	add	r3, r1
 8002d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d3c:	e00a      	b.n	8002d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4908      	ldr	r1, [pc, #32]	; (8002d64 <__NVIC_SetPriority+0x50>)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	3b04      	subs	r3, #4
 8002d4c:	0112      	lsls	r2, r2, #4
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	440b      	add	r3, r1
 8002d52:	761a      	strb	r2, [r3, #24]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000e100 	.word	0xe000e100
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <NVIC_EncodePriority>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f1c3 0307 	rsb	r3, r3, #7
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	bf28      	it	cs
 8002d86:	2304      	movcs	r3, #4
 8002d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2b06      	cmp	r3, #6
 8002d90:	d902      	bls.n	8002d98 <NVIC_EncodePriority+0x30>
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	3b03      	subs	r3, #3
 8002d96:	e000      	b.n	8002d9a <NVIC_EncodePriority+0x32>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43da      	mvns	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	401a      	ands	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dba:	43d9      	mvns	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc0:	4313      	orrs	r3, r2
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de0:	d301      	bcc.n	8002de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00f      	b.n	8002e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de6:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <SysTick_Config+0x40>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dee:	210f      	movs	r1, #15
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df4:	f7ff ff8e 	bl	8002d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <SysTick_Config+0x40>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <SysTick_Config+0x40>)
 8002e00:	2207      	movs	r2, #7
 8002e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	e000e010 	.word	0xe000e010

08002e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff ff29 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3c:	f7ff ff3e 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7ff ff8e 	bl	8002d68 <NVIC_EncodePriority>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff5d 	bl	8002d14 <__NVIC_SetPriority>
}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff31 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffa2 	bl	8002dd0 <SysTick_Config>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e054      	b.n	8002f54 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7f5b      	ldrb	r3, [r3, #29]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd fc90 	bl	80007e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_CRC_Init+0xc4>)
 8002ed4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0218 	bic.w	r2, r2, #24
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e00c      	b.n	8002f02 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f834 	bl	8002f60 <HAL_CRCEx_Polynomial_Set>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e028      	b.n	8002f54 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	795b      	ldrb	r3, [r3, #5]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	e004      	b.n	8002f20 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6912      	ldr	r2, [r2, #16]
 8002f1e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	04c11db7 	.word	0x04c11db7

08002f60 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002f70:	231f      	movs	r3, #31
 8002f72:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002f74:	bf00      	nop
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	613a      	str	r2, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_CRCEx_Polynomial_Set+0x34>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b18      	cmp	r3, #24
 8002f98:	d846      	bhi.n	8003028 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	0800302f 	.word	0x0800302f
 8002fa4:	08003029 	.word	0x08003029
 8002fa8:	08003029 	.word	0x08003029
 8002fac:	08003029 	.word	0x08003029
 8002fb0:	08003029 	.word	0x08003029
 8002fb4:	08003029 	.word	0x08003029
 8002fb8:	08003029 	.word	0x08003029
 8002fbc:	08003029 	.word	0x08003029
 8002fc0:	0800301d 	.word	0x0800301d
 8002fc4:	08003029 	.word	0x08003029
 8002fc8:	08003029 	.word	0x08003029
 8002fcc:	08003029 	.word	0x08003029
 8002fd0:	08003029 	.word	0x08003029
 8002fd4:	08003029 	.word	0x08003029
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	08003029 	.word	0x08003029
 8002fe0:	08003011 	.word	0x08003011
 8002fe4:	08003029 	.word	0x08003029
 8002fe8:	08003029 	.word	0x08003029
 8002fec:	08003029 	.word	0x08003029
 8002ff0:	08003029 	.word	0x08003029
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	08003029 	.word	0x08003029
 8002ffc:	08003029 	.word	0x08003029
 8003000:	08003005 	.word	0x08003005
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d913      	bls.n	8003032 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800300e:	e010      	b.n	8003032 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b07      	cmp	r3, #7
 8003014:	d90f      	bls.n	8003036 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800301a:	e00c      	b.n	8003036 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	d90b      	bls.n	800303a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003026:	e008      	b.n	800303a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
      break;
 800302c:	e006      	b.n	800303c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800303a:	bf00      	nop
  }
  if (status == HAL_OK)
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 0118 	bic.w	r1, r3, #24
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0ac      	b.n	80031d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fadc 	bl	8003640 <DFSDM_GetChannelFromInstance>
 8003088:	4603      	mov	r3, r0
 800308a:	4a55      	ldr	r2, [pc, #340]	; (80031e0 <HAL_DFSDM_ChannelInit+0x174>)
 800308c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e09f      	b.n	80031d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd fd85 	bl	8000ba8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800309e:	4b51      	ldr	r3, [pc, #324]	; (80031e4 <HAL_DFSDM_ChannelInit+0x178>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	4a4f      	ldr	r2, [pc, #316]	; (80031e4 <HAL_DFSDM_ChannelInit+0x178>)
 80030a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80030a8:	4b4e      	ldr	r3, [pc, #312]	; (80031e4 <HAL_DFSDM_ChannelInit+0x178>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d125      	bne.n	80030fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a4c      	ldr	r2, [pc, #304]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4948      	ldr	r1, [pc, #288]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80030d4:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	791b      	ldrb	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 80030de:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	493f      	ldr	r1, [pc, #252]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80030f0:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3c      	ldr	r2, [pc, #240]	; (80031e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80030f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800310a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800311a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003120:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 020f 	bic.w	r2, r2, #15
 8003138:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003160:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f002 0207 	and.w	r2, r2, #7
 800318c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fa3a 	bl	8003640 <DFSDM_GetChannelFromInstance>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_DFSDM_ChannelInit+0x174>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20005978 	.word	0x20005978
 80031e4:	20005974 	.word	0x20005974
 80031e8:	40017400 	.word	0x40017400

080031ec <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e0c6      	b.n	800338c <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a64      	ldr	r2, [pc, #400]	; (8003394 <HAL_DFSDM_FilterInit+0x1a8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d109      	bne.n	800321c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800320c:	2b01      	cmp	r3, #1
 800320e:	d003      	beq.n	8003218 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b7      	b.n	800338c <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fd fbcf 	bl	80009d8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003248:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7a1b      	ldrb	r3, [r3, #8]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003272:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7a5b      	ldrb	r3, [r3, #9]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d108      	bne.n	800328e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e007      	b.n	800329e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800329c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_DFSDM_FilterInit+0x1ac>)
 80032aa:	400b      	ands	r3, r1
 80032ac:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d108      	bne.n	80032c8 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7c1b      	ldrb	r3, [r3, #16]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d108      	bne.n	80032e2 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0210 	orr.w	r2, r2, #16
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e007      	b.n	80032f2 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0210 	bic.w	r2, r2, #16
 80032f0:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7c5b      	ldrb	r3, [r3, #17]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d108      	bne.n	800330c <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0220 	orr.w	r2, r2, #32
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e007      	b.n	800331c <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0220 	bic.w	r2, r2, #32
 800331a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6959      	ldr	r1, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b1d      	ldr	r3, [pc, #116]	; (800339c <HAL_DFSDM_FilterInit+0x1b0>)
 8003328:	400b      	ands	r3, r1
 800332a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6959      	ldr	r1, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	3b01      	subs	r3, #1
 800333c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800333e:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003346:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7c1a      	ldrb	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40017500 	.word	0x40017500
 8003398:	ffff80f7 	.word	0xffff80f7
 800339c:	1c00ff00 	.word	0x1c00ff00

080033a0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d02c      	beq.n	8003414 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80033c0:	2bff      	cmp	r3, #255	; 0xff
 80033c2:	d027      	beq.n	8003414 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80033d0:	400b      	ands	r3, r1
 80033d2:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e00a      	b.n	800340c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
 8003412:	e001      	b.n	8003418 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	f8fbffff 	.word	0xf8fbffff

0800342c <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800344a:	2bff      	cmp	r3, #255	; 0xff
 800344c:	d016      	beq.n	800347c <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	b292      	uxth	r2, r2
 8003456:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8003458:	6838      	ldr	r0, [r7, #0]
 800345a:	f000 f8d2 	bl	8003602 <DFSDM_GetInjChannelsNbr>
 800345e:	4602      	mov	r2, r0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	e000      	b.n	8003476 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8003474:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6493      	str	r3, [r2, #72]	; 0x48
 800347a:	e001      	b.n	8003480 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003480:	7bfb      	ldrb	r3, [r7, #15]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	75fb      	strb	r3, [r7, #23]
 80034ac:	e066      	b.n	800357c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034bc:	d002      	beq.n	80034c4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
 80034c2:	e05b      	b.n	800357c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10e      	bne.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	75fb      	strb	r3, [r7, #23]
 80034e8:	e048      	b.n	800357c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d108      	bne.n	800350c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003504:	d102      	bne.n	800350c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
 800350a:	e037      	b.n	800357c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d004      	beq.n	8003520 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800351c:	2b03      	cmp	r3, #3
 800351e:	d12b      	bne.n	8003578 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003526:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	4a17      	ldr	r2, [pc, #92]	; (800358c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800352e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d101      	bne.n	8003540 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800353e:	e000      	b.n	8003542 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003540:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	331c      	adds	r3, #28
 8003552:	4619      	mov	r1, r3
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f000 f9c2 	bl	80038e0 <HAL_DMA_Start_IT>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	22ff      	movs	r2, #255	; 0xff
 8003566:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800356e:	e005      	b.n	800357c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f8b1 	bl	80036d8 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003576:	e001      	b.n	800357c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800357c:	7dfb      	ldrb	r3, [r7, #23]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	080035c5 	.word	0x080035c5
 800358c:	080035e1 	.word	0x080035e1
 8003590:	080035a9 	.word	0x080035a9

08003594 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f008 fe7a 	bl	800c2b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f008 fe88 	bl	800c2e8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2203      	movs	r2, #3
 80035f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff ffcd 	bl	8003594 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	b29b      	uxth	r3, r3
 8003612:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8003614:	e00a      	b.n	800362c <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3301      	adds	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f1      	bne.n	8003616 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <DFSDM_GetChannelFromInstance+0x7c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d102      	bne.n	8003656 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e02b      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <DFSDM_GetChannelFromInstance+0x80>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d102      	bne.n	8003664 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800365e:	2301      	movs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e024      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <DFSDM_GetChannelFromInstance+0x84>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d102      	bne.n	8003672 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800366c:	2302      	movs	r3, #2
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e01d      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <DFSDM_GetChannelFromInstance+0x88>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d102      	bne.n	8003680 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800367a:	2303      	movs	r3, #3
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e016      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a12      	ldr	r2, [pc, #72]	; (80036cc <DFSDM_GetChannelFromInstance+0x8c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d102      	bne.n	800368e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003688:	2304      	movs	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e00f      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <DFSDM_GetChannelFromInstance+0x90>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d102      	bne.n	800369c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8003696:	2305      	movs	r3, #5
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e008      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a0d      	ldr	r2, [pc, #52]	; (80036d4 <DFSDM_GetChannelFromInstance+0x94>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d102      	bne.n	80036aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80036a4:	2306      	movs	r3, #6
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	e001      	b.n	80036ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80036aa:	2307      	movs	r3, #7
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40017400 	.word	0x40017400
 80036c0:	40017420 	.word	0x40017420
 80036c4:	40017440 	.word	0x40017440
 80036c8:	40017460 	.word	0x40017460
 80036cc:	40017480 	.word	0x40017480
 80036d0:	400174a0 	.word	0x400174a0
 80036d4:	400174c0 	.word	0x400174c0

080036d8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d108      	bne.n	80036fa <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	e033      	b.n	8003762 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0201 	bic.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003718:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003730:	2b03      	cmp	r3, #3
 8003732:	d116      	bne.n	8003762 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	2b00      	cmp	r3, #0
 800373a:	d107      	bne.n	800374c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0202 	orr.w	r2, r2, #2
 800374a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <DFSDM_RegConvStart+0x84>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	e000      	b.n	800375e <DFSDM_RegConvStart+0x86>
 800375c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <DFSDM_RegConvStart+0x98>
 800376c:	2202      	movs	r2, #2
 800376e:	e000      	b.n	8003772 <DFSDM_RegConvStart+0x9a>
 8003770:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003790:	f7fe ffac 	bl	80026ec <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e099      	b.n	80038d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037c0:	e00f      	b.n	80037e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037c2:	f7fe ff93 	bl	80026ec <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d908      	bls.n	80037e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2203      	movs	r2, #3
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e078      	b.n	80038d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e8      	bne.n	80037c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4b38      	ldr	r3, [pc, #224]	; (80038dc <HAL_DMA_Init+0x158>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800380e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800381a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	2b04      	cmp	r3, #4
 800383a:	d107      	bne.n	800384c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	4313      	orrs	r3, r2
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0307 	bic.w	r3, r3, #7
 8003862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b04      	cmp	r3, #4
 8003874:	d117      	bne.n	80038a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 faa5 	bl	8003dd8 <DMA_CheckFifoParam>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2240      	movs	r2, #64	; 0x40
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038a2:	2301      	movs	r3, #1
 80038a4:	e016      	b.n	80038d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa5c 	bl	8003d6c <DMA_CalcBaseAndBitshift>
 80038b4:	4603      	mov	r3, r0
 80038b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	223f      	movs	r2, #63	; 0x3f
 80038be:	409a      	lsls	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	e010803f 	.word	0xe010803f

080038e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_DMA_Start_IT+0x26>
 8003902:	2302      	movs	r3, #2
 8003904:	e048      	b.n	8003998 <HAL_DMA_Start_IT+0xb8>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d137      	bne.n	800398a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 f9ee 	bl	8003d10 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	223f      	movs	r2, #63	; 0x3f
 800393a:	409a      	lsls	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0216 	orr.w	r2, r2, #22
 800394e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800395e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0208 	orr.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e005      	b.n	8003996 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003992:	2302      	movs	r3, #2
 8003994:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00c      	b.n	80039d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2205      	movs	r2, #5
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80039f0:	4b8e      	ldr	r3, [pc, #568]	; (8003c2c <HAL_DMA_IRQHandler+0x248>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a8e      	ldr	r2, [pc, #568]	; (8003c30 <HAL_DMA_IRQHandler+0x24c>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	2208      	movs	r2, #8
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d043      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03c      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2210      	movs	r2, #16
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d024      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	e01f      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
 8003b24:	e016      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2220      	movs	r2, #32
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808f 	beq.w	8003c84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8087 	beq.w	8003c84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d136      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x1da>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	223f      	movs	r2, #63	; 0x3f
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d07e      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
        }
        return;
 8003bfa:	e079      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01d      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e02c      	b.n	8003c84 <HAL_DMA_IRQHandler+0x2a0>
 8003c2a:	bf00      	nop
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	e01e      	b.n	8003c84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10f      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0210 	bic.w	r2, r2, #16
 8003c62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d032      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d022      	beq.n	8003cde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d307      	bcc.n	8003ccc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f2      	bne.n	8003cb0 <HAL_DMA_IRQHandler+0x2cc>
 8003cca:	e000      	b.n	8003cce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ccc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
 8003cee:	e000      	b.n	8003cf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cf0:	bf00      	nop
    }
  }
}
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d2c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d108      	bne.n	8003d50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d4e:	e007      	b.n	8003d60 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
}
 8003d60:	bf00      	nop
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	3b10      	subs	r3, #16
 8003d7c:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <DMA_CalcBaseAndBitshift+0x60>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d86:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d908      	bls.n	8003dac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	659a      	str	r2, [r3, #88]	; 0x58
 8003daa:	e006      	b.n	8003dba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x68>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	aaaaaaab 	.word	0xaaaaaaab
 8003dd0:	08012fc8 	.word	0x08012fc8
 8003dd4:	fffffc00 	.word	0xfffffc00

08003dd8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d11f      	bne.n	8003e32 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d856      	bhi.n	8003ea6 <DMA_CheckFifoParam+0xce>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <DMA_CheckFifoParam+0x28>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e23 	.word	0x08003e23
 8003e08:	08003e11 	.word	0x08003e11
 8003e0c:	08003ea7 	.word	0x08003ea7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d046      	beq.n	8003eaa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e20:	e043      	b.n	8003eaa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e2a:	d140      	bne.n	8003eae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e30:	e03d      	b.n	8003eae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3a:	d121      	bne.n	8003e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d837      	bhi.n	8003eb2 <DMA_CheckFifoParam+0xda>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <DMA_CheckFifoParam+0x70>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e59 	.word	0x08003e59
 8003e4c:	08003e5f 	.word	0x08003e5f
 8003e50:	08003e59 	.word	0x08003e59
 8003e54:	08003e71 	.word	0x08003e71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e5c:	e030      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d025      	beq.n	8003eb6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6e:	e022      	b.n	8003eb6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e78:	d11f      	bne.n	8003eba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e7e:	e01c      	b.n	8003eba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d903      	bls.n	8003e8e <DMA_CheckFifoParam+0xb6>
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d003      	beq.n	8003e94 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e8c:	e018      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      break;
 8003e92:	e015      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00e      	beq.n	8003ebe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e00b      	b.n	8003ebe <DMA_CheckFifoParam+0xe6>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e00a      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e008      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e006      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e004      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ebe:	bf00      	nop
    }
  } 
  
  return status; 
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003eea:	2300      	movs	r3, #0
 8003eec:	61fb      	str	r3, [r7, #28]
 8003eee:	e175      	b.n	80041dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4013      	ands	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	f040 8164 	bne.w	80041d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d005      	beq.n	8003f26 <HAL_GPIO_Init+0x56>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d130      	bne.n	8003f88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	2203      	movs	r2, #3
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 0201 	and.w	r2, r3, #1
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 0303 	and.w	r3, r3, #3
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d017      	beq.n	8003fc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d123      	bne.n	8004018 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	08da      	lsrs	r2, r3, #3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3208      	adds	r2, #8
 8003fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	220f      	movs	r2, #15
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	43db      	mvns	r3, r3
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	08da      	lsrs	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3208      	adds	r2, #8
 8004012:	69b9      	ldr	r1, [r7, #24]
 8004014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0203 	and.w	r2, r3, #3
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80be 	beq.w	80041d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405a:	4b66      	ldr	r3, [pc, #408]	; (80041f4 <HAL_GPIO_Init+0x324>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	4a65      	ldr	r2, [pc, #404]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004064:	6453      	str	r3, [r2, #68]	; 0x44
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004072:	4a61      	ldr	r2, [pc, #388]	; (80041f8 <HAL_GPIO_Init+0x328>)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	3302      	adds	r3, #2
 800407a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a58      	ldr	r2, [pc, #352]	; (80041fc <HAL_GPIO_Init+0x32c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d037      	beq.n	800410e <HAL_GPIO_Init+0x23e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a57      	ldr	r2, [pc, #348]	; (8004200 <HAL_GPIO_Init+0x330>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d031      	beq.n	800410a <HAL_GPIO_Init+0x23a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a56      	ldr	r2, [pc, #344]	; (8004204 <HAL_GPIO_Init+0x334>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02b      	beq.n	8004106 <HAL_GPIO_Init+0x236>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a55      	ldr	r2, [pc, #340]	; (8004208 <HAL_GPIO_Init+0x338>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d025      	beq.n	8004102 <HAL_GPIO_Init+0x232>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a54      	ldr	r2, [pc, #336]	; (800420c <HAL_GPIO_Init+0x33c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <HAL_GPIO_Init+0x22e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a53      	ldr	r2, [pc, #332]	; (8004210 <HAL_GPIO_Init+0x340>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d019      	beq.n	80040fa <HAL_GPIO_Init+0x22a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a52      	ldr	r2, [pc, #328]	; (8004214 <HAL_GPIO_Init+0x344>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_Init+0x226>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a51      	ldr	r2, [pc, #324]	; (8004218 <HAL_GPIO_Init+0x348>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_Init+0x222>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a50      	ldr	r2, [pc, #320]	; (800421c <HAL_GPIO_Init+0x34c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_Init+0x21e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a4f      	ldr	r2, [pc, #316]	; (8004220 <HAL_GPIO_Init+0x350>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_Init+0x21a>
 80040e6:	2309      	movs	r3, #9
 80040e8:	e012      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040ea:	230a      	movs	r3, #10
 80040ec:	e010      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e00e      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040f2:	2307      	movs	r3, #7
 80040f4:	e00c      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040f6:	2306      	movs	r3, #6
 80040f8:	e00a      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040fa:	2305      	movs	r3, #5
 80040fc:	e008      	b.n	8004110 <HAL_GPIO_Init+0x240>
 80040fe:	2304      	movs	r3, #4
 8004100:	e006      	b.n	8004110 <HAL_GPIO_Init+0x240>
 8004102:	2303      	movs	r3, #3
 8004104:	e004      	b.n	8004110 <HAL_GPIO_Init+0x240>
 8004106:	2302      	movs	r3, #2
 8004108:	e002      	b.n	8004110 <HAL_GPIO_Init+0x240>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <HAL_GPIO_Init+0x240>
 800410e:	2300      	movs	r3, #0
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	f002 0203 	and.w	r2, r2, #3
 8004116:	0092      	lsls	r2, r2, #2
 8004118:	4093      	lsls	r3, r2
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004120:	4935      	ldr	r1, [pc, #212]	; (80041f8 <HAL_GPIO_Init+0x328>)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	089b      	lsrs	r3, r3, #2
 8004126:	3302      	adds	r3, #2
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_GPIO_Init+0x354>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004152:	4a34      	ldr	r2, [pc, #208]	; (8004224 <HAL_GPIO_Init+0x354>)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004158:	4b32      	ldr	r3, [pc, #200]	; (8004224 <HAL_GPIO_Init+0x354>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800417c:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_GPIO_Init+0x354>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004182:	4b28      	ldr	r3, [pc, #160]	; (8004224 <HAL_GPIO_Init+0x354>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041a6:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <HAL_GPIO_Init+0x354>)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_GPIO_Init+0x354>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <HAL_GPIO_Init+0x354>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	2b0f      	cmp	r3, #15
 80041e0:	f67f ae86 	bls.w	8003ef0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3724      	adds	r7, #36	; 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	40013800 	.word	0x40013800
 80041fc:	40020000 	.word	0x40020000
 8004200:	40020400 	.word	0x40020400
 8004204:	40020800 	.word	0x40020800
 8004208:	40020c00 	.word	0x40020c00
 800420c:	40021000 	.word	0x40021000
 8004210:	40021400 	.word	0x40021400
 8004214:	40021800 	.word	0x40021800
 8004218:	40021c00 	.word	0x40021c00
 800421c:	40022000 	.word	0x40022000
 8004220:	40022400 	.word	0x40022400
 8004224:	40013c00 	.word	0x40013c00

08004228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
 8004244:	e001      	b.n	800424a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004274:	e003      	b.n	800427e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	041a      	lsls	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042a2:	4a05      	ldr	r2, [pc, #20]	; (80042b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f008 f99e 	bl	800c5ec <HAL_GPIO_EXTI_Callback>
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	4b23      	ldr	r3, [pc, #140]	; (8004354 <HAL_PWREx_EnableOverDrive+0x98>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	4a22      	ldr	r2, [pc, #136]	; (8004354 <HAL_PWREx_EnableOverDrive+0x98>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	; 0x40
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <HAL_PWREx_EnableOverDrive+0x98>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042ea:	f7fe f9ff 	bl	80026ec <HAL_GetTick>
 80042ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042f0:	e009      	b.n	8004306 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042f2:	f7fe f9fb 	bl	80026ec <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004300:	d901      	bls.n	8004306 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e022      	b.n	800434c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004312:	d1ee      	bne.n	80042f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a0f      	ldr	r2, [pc, #60]	; (8004358 <HAL_PWREx_EnableOverDrive+0x9c>)
 800431a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004320:	f7fe f9e4 	bl	80026ec <HAL_GetTick>
 8004324:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004326:	e009      	b.n	800433c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004328:	f7fe f9e0 	bl	80026ec <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004336:	d901      	bls.n	800433c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e007      	b.n	800434c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_PWREx_EnableOverDrive+0x9c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004348:	d1ee      	bne.n	8004328 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	40007000 	.word	0x40007000

0800435c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004364:	2300      	movs	r3, #0
 8004366:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e29b      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 8087 	beq.w	800448e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004380:	4b96      	ldr	r3, [pc, #600]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b04      	cmp	r3, #4
 800438a:	d00c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438c:	4b93      	ldr	r3, [pc, #588]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d112      	bne.n	80043be <HAL_RCC_OscConfig+0x62>
 8004398:	4b90      	ldr	r3, [pc, #576]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a4:	d10b      	bne.n	80043be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a6:	4b8d      	ldr	r3, [pc, #564]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d06c      	beq.n	800448c <HAL_RCC_OscConfig+0x130>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d168      	bne.n	800448c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e275      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x7a>
 80043c8:	4b84      	ldr	r3, [pc, #528]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a83      	ldr	r2, [pc, #524]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	e02e      	b.n	8004434 <HAL_RCC_OscConfig+0xd8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x9c>
 80043de:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a7e      	ldr	r2, [pc, #504]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	4b7c      	ldr	r3, [pc, #496]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a7b      	ldr	r2, [pc, #492]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80043f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	e01d      	b.n	8004434 <HAL_RCC_OscConfig+0xd8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004400:	d10c      	bne.n	800441c <HAL_RCC_OscConfig+0xc0>
 8004402:	4b76      	ldr	r3, [pc, #472]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a75      	ldr	r2, [pc, #468]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a72      	ldr	r2, [pc, #456]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e00b      	b.n	8004434 <HAL_RCC_OscConfig+0xd8>
 800441c:	4b6f      	ldr	r3, [pc, #444]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a6e      	ldr	r2, [pc, #440]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a6b      	ldr	r2, [pc, #428]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800442e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d013      	beq.n	8004464 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe f956 	bl	80026ec <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fe f952 	bl	80026ec <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e229      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	4b61      	ldr	r3, [pc, #388]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0xe8>
 8004462:	e014      	b.n	800448e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004464:	f7fe f942 	bl	80026ec <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800446c:	f7fe f93e 	bl	80026ec <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b64      	cmp	r3, #100	; 0x64
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e215      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	4b57      	ldr	r3, [pc, #348]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x110>
 800448a:	e000      	b.n	800448e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d069      	beq.n	800456e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800449a:	4b50      	ldr	r3, [pc, #320]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b4d      	ldr	r3, [pc, #308]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d11c      	bne.n	80044ec <HAL_RCC_OscConfig+0x190>
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b47      	ldr	r3, [pc, #284]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1e9      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d6:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	493d      	ldr	r1, [pc, #244]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e040      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d023      	beq.n	800453c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b39      	ldr	r3, [pc, #228]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a38      	ldr	r2, [pc, #224]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe f8f4 	bl	80026ec <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004508:	f7fe f8f0 	bl	80026ec <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e1c7      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	4b30      	ldr	r3, [pc, #192]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4929      	ldr	r1, [pc, #164]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
 800453a:	e018      	b.n	800456e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453c:	4b27      	ldr	r3, [pc, #156]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a26      	ldr	r2, [pc, #152]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe f8d0 	bl	80026ec <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fe f8cc 	bl	80026ec <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1a3      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004562:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d038      	beq.n	80045ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d019      	beq.n	80045b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b16      	ldr	r3, [pc, #88]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fe f8ad 	bl	80026ec <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004596:	f7fe f8a9 	bl	80026ec <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e180      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x23a>
 80045b4:	e01a      	b.n	80045ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <HAL_RCC_OscConfig+0x280>)
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fe f893 	bl	80026ec <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fe f88f 	bl	80026ec <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d903      	bls.n	80045e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e166      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
 80045dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e0:	4b92      	ldr	r3, [pc, #584]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80a4 	beq.w	8004742 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fa:	4b8c      	ldr	r3, [pc, #560]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004606:	4b89      	ldr	r3, [pc, #548]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a88      	ldr	r2, [pc, #544]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 800460c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b86      	ldr	r3, [pc, #536]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004622:	4b83      	ldr	r3, [pc, #524]	; (8004830 <HAL_RCC_OscConfig+0x4d4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d118      	bne.n	8004660 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800462e:	4b80      	ldr	r3, [pc, #512]	; (8004830 <HAL_RCC_OscConfig+0x4d4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a7f      	ldr	r2, [pc, #508]	; (8004830 <HAL_RCC_OscConfig+0x4d4>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463a:	f7fe f857 	bl	80026ec <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004642:	f7fe f853 	bl	80026ec <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b64      	cmp	r3, #100	; 0x64
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e12a      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004654:	4b76      	ldr	r3, [pc, #472]	; (8004830 <HAL_RCC_OscConfig+0x4d4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x31a>
 8004668:	4b70      	ldr	r3, [pc, #448]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a6f      	ldr	r2, [pc, #444]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	e02d      	b.n	80046d2 <HAL_RCC_OscConfig+0x376>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x33c>
 800467e:	4b6b      	ldr	r3, [pc, #428]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a6a      	ldr	r2, [pc, #424]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	4b68      	ldr	r3, [pc, #416]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a67      	ldr	r2, [pc, #412]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	e01c      	b.n	80046d2 <HAL_RCC_OscConfig+0x376>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d10c      	bne.n	80046ba <HAL_RCC_OscConfig+0x35e>
 80046a0:	4b62      	ldr	r3, [pc, #392]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a61      	ldr	r2, [pc, #388]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	f043 0304 	orr.w	r3, r3, #4
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b5f      	ldr	r3, [pc, #380]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a5e      	ldr	r2, [pc, #376]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	e00b      	b.n	80046d2 <HAL_RCC_OscConfig+0x376>
 80046ba:	4b5c      	ldr	r3, [pc, #368]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a5b      	ldr	r2, [pc, #364]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a58      	ldr	r2, [pc, #352]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fe f807 	bl	80026ec <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fe f803 	bl	80026ec <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0d8      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	4b4c      	ldr	r3, [pc, #304]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCC_OscConfig+0x386>
 8004704:	e014      	b.n	8004730 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fd fff1 	bl	80026ec <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd ffed 	bl	80026ec <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e0c2      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	4b41      	ldr	r3, [pc, #260]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ee      	bne.n	800470e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d105      	bne.n	8004742 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a3c      	ldr	r2, [pc, #240]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 800473c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f000 80ae 	beq.w	80048a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800474c:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b08      	cmp	r3, #8
 8004756:	d06d      	beq.n	8004834 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d14b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a31      	ldr	r2, [pc, #196]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fd ffbe 	bl	80026ec <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004774:	f7fd ffba 	bl	80026ec <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e091      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004786:	4b29      	ldr	r3, [pc, #164]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	019b      	lsls	r3, r3, #6
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	3b01      	subs	r3, #1
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	061b      	lsls	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047bc:	071b      	lsls	r3, r3, #28
 80047be:	491b      	ldr	r1, [pc, #108]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c4:	4b19      	ldr	r3, [pc, #100]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80047ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fd ff8c 	bl	80026ec <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fd ff88 	bl	80026ec <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e05f      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x47c>
 80047f6:	e057      	b.n	80048a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f8:	4b0c      	ldr	r3, [pc, #48]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0b      	ldr	r2, [pc, #44]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd ff72 	bl	80026ec <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd ff6e 	bl	80026ec <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e045      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCC_OscConfig+0x4d0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x4b0>
 800482a:	e03d      	b.n	80048a8 <HAL_RCC_OscConfig+0x54c>
 800482c:	40023800 	.word	0x40023800
 8004830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004834:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <HAL_RCC_OscConfig+0x558>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d030      	beq.n	80048a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d129      	bne.n	80048a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d122      	bne.n	80048a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800486a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800486c:	4293      	cmp	r3, r2
 800486e:	d119      	bne.n	80048a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	3b01      	subs	r3, #1
 800487e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d10f      	bne.n	80048a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d107      	bne.n	80048a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d001      	beq.n	80048a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800

080048b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0d0      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d910      	bls.n	8004900 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 020f 	bic.w	r2, r3, #15
 80048e6:	4965      	ldr	r1, [pc, #404]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0b8      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4a58      	ldr	r2, [pc, #352]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800491e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004922:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d005      	beq.n	800493c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004930:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	4a52      	ldr	r2, [pc, #328]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800493a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800493c:	4b50      	ldr	r3, [pc, #320]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	494d      	ldr	r1, [pc, #308]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d040      	beq.n	80049dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d107      	bne.n	8004972 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d115      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e07f      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d107      	bne.n	800498a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e073      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0302 	and.w	r3, r3, #2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e06b      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4936      	ldr	r1, [pc, #216]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fd fe9e 	bl	80026ec <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b4:	f7fd fe9a 	bl	80026ec <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e053      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ca:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 020c 	and.w	r2, r3, #12
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1eb      	bne.n	80049b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049dc:	4b27      	ldr	r3, [pc, #156]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d210      	bcs.n	8004a0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 020f 	bic.w	r2, r3, #15
 80049f2:	4922      	ldr	r1, [pc, #136]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fa:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <HAL_RCC_ClockConfig+0x1c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e032      	b.n	8004a72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4916      	ldr	r1, [pc, #88]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d009      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a36:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	490e      	ldr	r1, [pc, #56]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a4a:	f000 f821 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <HAL_RCC_ClockConfig+0x1c8>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	490a      	ldr	r1, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x1cc>)
 8004a5c:	5ccb      	ldrb	r3, [r1, r3]
 8004a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1d0>)
 8004a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCC_ClockConfig+0x1d4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fdfa 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023c00 	.word	0x40023c00
 8004a80:	40023800 	.word	0x40023800
 8004a84:	08012fb0 	.word	0x08012fb0
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000004 	.word	0x20000004

08004a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a94:	b090      	sub	sp, #64	; 0x40
 8004a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa8:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 030c 	and.w	r3, r3, #12
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d00d      	beq.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	f200 80a1 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x16c>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d003      	beq.n	8004aca <HAL_RCC_GetSysClockFreq+0x3a>
 8004ac2:	e09b      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ac4:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ac8:	e09b      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aca:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ace:	e098      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ad0:	4b4f      	ldr	r3, [pc, #316]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ada:	4b4d      	ldr	r3, [pc, #308]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	099b      	lsrs	r3, r3, #6
 8004aec:	2200      	movs	r2, #0
 8004aee:	623b      	str	r3, [r7, #32]
 8004af0:	627a      	str	r2, [r7, #36]	; 0x24
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004af8:	2100      	movs	r1, #0
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004afc:	fb03 f201 	mul.w	r2, r3, r1
 8004b00:	2300      	movs	r3, #0
 8004b02:	fb00 f303 	mul.w	r3, r0, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	4a43      	ldr	r2, [pc, #268]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b0a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b10:	460a      	mov	r2, r1
 8004b12:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b16:	4413      	add	r3, r2
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	61fa      	str	r2, [r7, #28]
 8004b22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b2a:	f7fb fc41 	bl	80003b0 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4613      	mov	r3, r2
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b36:	e053      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b38:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	099b      	lsrs	r3, r3, #6
 8004b3e:	2200      	movs	r2, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	617a      	str	r2, [r7, #20]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b4a:	f04f 0b00 	mov.w	fp, #0
 8004b4e:	4652      	mov	r2, sl
 8004b50:	465b      	mov	r3, fp
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f04f 0100 	mov.w	r1, #0
 8004b5a:	0159      	lsls	r1, r3, #5
 8004b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b60:	0150      	lsls	r0, r2, #5
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	ebb2 080a 	subs.w	r8, r2, sl
 8004b6a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004b82:	ebb2 0408 	subs.w	r4, r2, r8
 8004b86:	eb63 0509 	sbc.w	r5, r3, r9
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	00eb      	lsls	r3, r5, #3
 8004b94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b98:	00e2      	lsls	r2, r4, #3
 8004b9a:	4614      	mov	r4, r2
 8004b9c:	461d      	mov	r5, r3
 8004b9e:	eb14 030a 	adds.w	r3, r4, sl
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	eb45 030b 	adc.w	r3, r5, fp
 8004ba8:	607b      	str	r3, [r7, #4]
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	028b      	lsls	r3, r1, #10
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	028a      	lsls	r2, r1, #10
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bca:	2200      	movs	r2, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	60fa      	str	r2, [r7, #12]
 8004bd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bd4:	f7fb fbec 	bl	80003b0 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	3301      	adds	r3, #1
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3740      	adds	r7, #64	; 0x40
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c0e:	bf00      	nop
 8004c10:	40023800 	.word	0x40023800
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	017d7840 	.word	0x017d7840

08004c1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c20:	4b03      	ldr	r3, [pc, #12]	; (8004c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c22:	681b      	ldr	r3, [r3, #0]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000

08004c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c38:	f7ff fff0 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0a9b      	lsrs	r3, r3, #10
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	; (8004c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	08012fc0 	.word	0x08012fc0

08004c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c60:	f7ff ffdc 	bl	8004c1c <HAL_RCC_GetHCLKFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	0b5b      	lsrs	r3, r3, #13
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	4903      	ldr	r1, [pc, #12]	; (8004c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	08012fc0 	.word	0x08012fc0

08004c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d012      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cac:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a68      	ldr	r2, [pc, #416]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cb6:	6093      	str	r3, [r2, #8]
 8004cb8:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc0:	4964      	ldr	r1, [pc, #400]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d017      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cde:	4b5d      	ldr	r3, [pc, #372]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ce4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	4959      	ldr	r1, [pc, #356]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d017      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d1a:	4b4e      	ldr	r3, [pc, #312]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	494a      	ldr	r1, [pc, #296]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d56:	2301      	movs	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 808b 	beq.w	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	4a39      	ldr	r2, [pc, #228]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d72:	6413      	str	r3, [r2, #64]	; 0x40
 8004d74:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d80:	4b35      	ldr	r3, [pc, #212]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a34      	ldr	r2, [pc, #208]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fd fcae 	bl	80026ec <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d94:	f7fd fcaa 	bl	80026ec <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b64      	cmp	r3, #100	; 0x64
 8004da0:	d901      	bls.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e38f      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004da6:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004db2:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d035      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d02e      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dda:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004de6:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dea:	4a1a      	ldr	r2, [pc, #104]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d114      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd fc72 	bl	80026ec <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e0c:	f7fd fc6e 	bl	80026ec <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e351      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e22:	4b0c      	ldr	r3, [pc, #48]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0ee      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e3a:	d111      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	4901      	ldr	r1, [pc, #4]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
 8004e52:	e00b      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	0ffffcff 	.word	0x0ffffcff
 8004e60:	4bac      	ldr	r3, [pc, #688]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4aab      	ldr	r2, [pc, #684]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e6a:	6093      	str	r3, [r2, #8]
 8004e6c:	4ba9      	ldr	r3, [pc, #676]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e78:	49a6      	ldr	r1, [pc, #664]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e8a:	4ba2      	ldr	r3, [pc, #648]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e90:	4aa0      	ldr	r2, [pc, #640]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e9a:	4b9e      	ldr	r3, [pc, #632]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	499b      	ldr	r1, [pc, #620]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eb8:	4b96      	ldr	r3, [pc, #600]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec6:	4993      	ldr	r1, [pc, #588]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eda:	4b8e      	ldr	r3, [pc, #568]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ee8:	498a      	ldr	r1, [pc, #552]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004efc:	4b85      	ldr	r3, [pc, #532]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0a:	4982      	ldr	r1, [pc, #520]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f1e:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4979      	ldr	r1, [pc, #484]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f40:	4b74      	ldr	r3, [pc, #464]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	4971      	ldr	r1, [pc, #452]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f62:	4b6c      	ldr	r3, [pc, #432]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	f023 020c 	bic.w	r2, r3, #12
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f70:	4968      	ldr	r1, [pc, #416]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f84:	4b63      	ldr	r3, [pc, #396]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	4960      	ldr	r1, [pc, #384]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fa6:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb4:	4957      	ldr	r1, [pc, #348]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fc8:	4b52      	ldr	r3, [pc, #328]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	494f      	ldr	r1, [pc, #316]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fea:	4b4a      	ldr	r3, [pc, #296]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	4946      	ldr	r1, [pc, #280]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800500c:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	493e      	ldr	r1, [pc, #248]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800502e:	4b39      	ldr	r3, [pc, #228]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005034:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	4935      	ldr	r1, [pc, #212]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005050:	4b30      	ldr	r3, [pc, #192]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505e:	492d      	ldr	r1, [pc, #180]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d011      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005072:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005078:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	4924      	ldr	r1, [pc, #144]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800508c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005090:	d101      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005092:	2301      	movs	r3, #1
 8005094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050a2:	2301      	movs	r3, #1
 80050a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b2:	4b18      	ldr	r3, [pc, #96]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c0:	4914      	ldr	r1, [pc, #80]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00b      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e4:	490b      	ldr	r1, [pc, #44]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00f      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005108:	4902      	ldr	r1, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005110:	e002      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005124:	4b8a      	ldr	r3, [pc, #552]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800512a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	4986      	ldr	r1, [pc, #536]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005148:	4b81      	ldr	r3, [pc, #516]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005158:	497d      	ldr	r1, [pc, #500]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d006      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80d6 	beq.w	8005320 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005174:	4b76      	ldr	r3, [pc, #472]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a75      	ldr	r2, [pc, #468]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800517a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005180:	f7fd fab4 	bl	80026ec <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005188:	f7fd fab0 	bl	80026ec <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e195      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800519a:	4b6d      	ldr	r3, [pc, #436]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d021      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d11d      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ba:	4b65      	ldr	r3, [pc, #404]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051c8:	4b61      	ldr	r3, [pc, #388]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ce:	0e1b      	lsrs	r3, r3, #24
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	019a      	lsls	r2, r3, #6
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	061b      	lsls	r3, r3, #24
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	071b      	lsls	r3, r3, #28
 80051ee:	4958      	ldr	r1, [pc, #352]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02e      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005220:	d129      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005222:	4b4b      	ldr	r3, [pc, #300]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005230:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005236:	0f1b      	lsrs	r3, r3, #28
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	019a      	lsls	r2, r3, #6
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	061b      	lsls	r3, r3, #24
 8005250:	431a      	orrs	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	071b      	lsls	r3, r3, #28
 8005256:	493e      	ldr	r1, [pc, #248]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800525e:	4b3c      	ldr	r3, [pc, #240]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005264:	f023 021f 	bic.w	r2, r3, #31
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	3b01      	subs	r3, #1
 800526e:	4938      	ldr	r1, [pc, #224]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01d      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005282:	4b33      	ldr	r3, [pc, #204]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005288:	0e1b      	lsrs	r3, r3, #24
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005290:	4b2f      	ldr	r3, [pc, #188]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005296:	0f1b      	lsrs	r3, r3, #28
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	019a      	lsls	r2, r3, #6
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	431a      	orrs	r2, r3
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	071b      	lsls	r3, r3, #28
 80052b6:	4926      	ldr	r1, [pc, #152]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d011      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	019a      	lsls	r2, r3, #6
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	071b      	lsls	r3, r3, #28
 80052e6:	491a      	ldr	r1, [pc, #104]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052ee:	4b18      	ldr	r3, [pc, #96]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a17      	ldr	r2, [pc, #92]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fa:	f7fd f9f7 	bl	80026ec <HAL_GetTick>
 80052fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005302:	f7fd f9f3 	bl	80026ec <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b64      	cmp	r3, #100	; 0x64
 800530e:	d901      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e0d8      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005314:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b01      	cmp	r3, #1
 8005324:	f040 80ce 	bne.w	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a08      	ldr	r2, [pc, #32]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005334:	f7fd f9da 	bl	80026ec <HAL_GetTick>
 8005338:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800533a:	e00b      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800533c:	f7fd f9d6 	bl	80026ec <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d904      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0bb      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005354:	4b5e      	ldr	r3, [pc, #376]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005360:	d0ec      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005372:	2b00      	cmp	r3, #0
 8005374:	d009      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800537e:	2b00      	cmp	r3, #0
 8005380:	d02e      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d12a      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800538a:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005398:	4b4d      	ldr	r3, [pc, #308]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	0f1b      	lsrs	r3, r3, #28
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	019a      	lsls	r2, r3, #6
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	061b      	lsls	r3, r3, #24
 80053b8:	431a      	orrs	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	071b      	lsls	r3, r3, #28
 80053be:	4944      	ldr	r1, [pc, #272]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053c6:	4b42      	ldr	r3, [pc, #264]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	493d      	ldr	r1, [pc, #244]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d022      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f4:	d11d      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053f6:	4b36      	ldr	r3, [pc, #216]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005404:	4b32      	ldr	r3, [pc, #200]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	0f1b      	lsrs	r3, r3, #28
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	019a      	lsls	r2, r3, #6
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	431a      	orrs	r2, r3
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	061b      	lsls	r3, r3, #24
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	071b      	lsls	r3, r3, #28
 800542a:	4929      	ldr	r1, [pc, #164]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d028      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800543e:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005444:	0e1b      	lsrs	r3, r3, #24
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800544c:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	f003 0303 	and.w	r3, r3, #3
 8005458:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	019a      	lsls	r2, r3, #6
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	041b      	lsls	r3, r3, #16
 8005464:	431a      	orrs	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	071b      	lsls	r3, r3, #28
 8005472:	4917      	ldr	r1, [pc, #92]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800547a:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800547c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	4911      	ldr	r1, [pc, #68]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800549c:	f7fd f926 	bl	80026ec <HAL_GetTick>
 80054a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054a2:	e008      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054a4:	f7fd f922 	bl	80026ec <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e007      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c2:	d1ef      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800

080054d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054f2:	f040 80a3 	bne.w	800563c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80054f6:	4ba8      	ldr	r3, [pc, #672]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005504:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800550c:	f000 808a 	beq.w	8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005516:	f200 8093 	bhi.w	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005520:	d07d      	beq.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005528:	f200 808a 	bhi.w	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005538:	d039      	beq.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800553a:	e081      	b.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800553c:	4b96      	ldr	r3, [pc, #600]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005548:	4b93      	ldr	r3, [pc, #588]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005550:	4a92      	ldr	r2, [pc, #584]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005552:	fbb2 f3f3 	udiv	r3, r2, r3
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	e007      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800555a:	4b8f      	ldr	r3, [pc, #572]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005562:	4a8f      	ldr	r2, [pc, #572]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800556a:	4b8b      	ldr	r3, [pc, #556]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005578:	4b87      	ldr	r3, [pc, #540]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	099b      	lsrs	r3, r3, #6
 8005580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	fb03 f202 	mul.w	r2, r3, r2
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005592:	4b81      	ldr	r3, [pc, #516]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005598:	0a1b      	lsrs	r3, r3, #8
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	3301      	adds	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	617b      	str	r3, [r7, #20]
        break;
 80055ac:	e049      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055ae:	4b7a      	ldr	r3, [pc, #488]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d108      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055ba:	4b77      	ldr	r3, [pc, #476]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055c2:	4a76      	ldr	r2, [pc, #472]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e007      	b.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055cc:	4b72      	ldr	r3, [pc, #456]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d4:	4a72      	ldr	r2, [pc, #456]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80055dc:	4b6e      	ldr	r3, [pc, #440]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e2:	0e1b      	lsrs	r3, r3, #24
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80055ea:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	099b      	lsrs	r3, r3, #6
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	fb03 f202 	mul.w	r2, r3, r2
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005604:	4b64      	ldr	r3, [pc, #400]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	3301      	adds	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	fbb2 f3f3 	udiv	r3, r2, r3
 800561a:	617b      	str	r3, [r7, #20]
        break;
 800561c:	e011      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800561e:	4b61      	ldr	r3, [pc, #388]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005620:	617b      	str	r3, [r7, #20]
        break;
 8005622:	e00e      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005624:	4b5c      	ldr	r3, [pc, #368]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005630:	4b5a      	ldr	r3, [pc, #360]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005632:	617b      	str	r3, [r7, #20]
        break;
 8005634:	e005      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005636:	4b5a      	ldr	r3, [pc, #360]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005638:	617b      	str	r3, [r7, #20]
        break;
 800563a:	e002      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800563c:	bf00      	nop
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8005640:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005648:	f040 80a3 	bne.w	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800564c:	4b52      	ldr	r3, [pc, #328]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800564e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005652:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800565a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005662:	f000 808a 	beq.w	800577a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800566c:	f200 809c 	bhi.w	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005676:	d07d      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800567e:	f200 8093 	bhi.w	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800568e:	d039      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005690:	e08a      	b.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005692:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d108      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800569e:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056a6:	4a3d      	ldr	r2, [pc, #244]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	e007      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80056b0:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056b8:	4a39      	ldr	r2, [pc, #228]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80056ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80056be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	0e1b      	lsrs	r3, r3, #24
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80056ce:	4b32      	ldr	r3, [pc, #200]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	099b      	lsrs	r3, r3, #6
 80056d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	fb03 f202 	mul.w	r2, r3, r2
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80056e8:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80056ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
        break;
 8005702:	e052      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005704:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005710:	4b21      	ldr	r3, [pc, #132]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005718:	4a20      	ldr	r2, [pc, #128]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e007      	b.n	8005732 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800572a:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005732:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005738:	0e1b      	lsrs	r3, r3, #24
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	fb03 f202 	mul.w	r2, r3, r2
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]
        break;
 8005772:	e01a      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005774:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005776:	617b      	str	r3, [r7, #20]
        break;
 8005778:	e017      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005788:	617b      	str	r3, [r7, #20]
        break;
 800578a:	e00e      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800578e:	617b      	str	r3, [r7, #20]
        break;
 8005790:	e00b      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8005792:	bf00      	nop
 8005794:	e009      	b.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	00f42400 	.word	0x00f42400
 80057a0:	017d7840 	.word	0x017d7840
 80057a4:	00bb8000 	.word	0x00bb8000
        break;
 80057a8:	bf00      	nop

  return frequency;
 80057aa:	697b      	ldr	r3, [r7, #20]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e071      	b.n	80058b2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	7f5b      	ldrb	r3, [r3, #29]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fb fe08 	bl	80013f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d053      	beq.n	80058a0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	22ca      	movs	r2, #202	; 0xca
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2253      	movs	r2, #83	; 0x53
 8005806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa4d 	bl	8005ca8 <RTC_EnterInitMode>
 800580e:	4603      	mov	r3, r0
 8005810:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d12a      	bne.n	800586e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6899      	ldr	r1, [r3, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <HAL_RTC_Init+0x104>)
 8005824:	400b      	ands	r3, r1
 8005826:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6899      	ldr	r1, [r3, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685a      	ldr	r2, [r3, #4]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	431a      	orrs	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68d2      	ldr	r2, [r2, #12]
 800584e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6919      	ldr	r1, [r3, #16]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	041a      	lsls	r2, r3, #16
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fa56 	bl	8005d16 <RTC_ExitInitMode>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d110      	bne.n	8005896 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0208 	bic.w	r2, r2, #8
 8005882:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	22ff      	movs	r2, #255	; 0xff
 800589c:	625a      	str	r2, [r3, #36]	; 0x24
 800589e:	e001      	b.n	80058a4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80058a0:	2300      	movs	r3, #0
 80058a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	ff8fffbf 	.word	0xff8fffbf

080058c0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	7f1b      	ldrb	r3, [r3, #28]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_RTC_SetTime+0x1c>
 80058d8:	2302      	movs	r3, #2
 80058da:	e085      	b.n	80059e8 <HAL_RTC_SetTime+0x128>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d126      	bne.n	800593c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa2a 	bl	8005d60 <RTC_ByteToBcd2>
 800590c:	4603      	mov	r3, r0
 800590e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	785b      	ldrb	r3, [r3, #1]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fa23 	bl	8005d60 <RTC_ByteToBcd2>
 800591a:	4603      	mov	r3, r0
 800591c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800591e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	789b      	ldrb	r3, [r3, #2]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fa1b 	bl	8005d60 <RTC_ByteToBcd2>
 800592a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800592c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	78db      	ldrb	r3, [r3, #3]
 8005934:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e018      	b.n	800596e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2200      	movs	r2, #0
 800594e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800595c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005962:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	78db      	ldrb	r3, [r3, #3]
 8005968:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	22ca      	movs	r2, #202	; 0xca
 8005974:	625a      	str	r2, [r3, #36]	; 0x24
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2253      	movs	r2, #83	; 0x53
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f992 	bl	8005ca8 <RTC_EnterInitMode>
 8005984:	4603      	mov	r3, r0
 8005986:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d11e      	bne.n	80059cc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	4b16      	ldr	r3, [pc, #88]	; (80059f0 <HAL_RTC_SetTime+0x130>)
 8005996:	400b      	ands	r3, r1
 8005998:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6899      	ldr	r1, [r3, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f9a7 	bl	8005d16 <RTC_ExitInitMode>
 80059c8:	4603      	mov	r3, r0
 80059ca:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059cc:	7cfb      	ldrb	r3, [r7, #19]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	22ff      	movs	r2, #255	; 0xff
 80059de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	771a      	strb	r2, [r3, #28]

  return status;
 80059e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd90      	pop	{r4, r7, pc}
 80059f0:	007f7f7f 	.word	0x007f7f7f

080059f4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b22      	ldr	r3, [pc, #136]	; (8005aac <HAL_RTC_GetTime+0xb8>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0c1b      	lsrs	r3, r3, #16
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	0d9b      	lsrs	r3, r3, #22
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11a      	bne.n	8005aa2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f993 	bl	8005d9c <RTC_Bcd2ToByte>
 8005a76:	4603      	mov	r3, r0
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f98a 	bl	8005d9c <RTC_Bcd2ToByte>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	789b      	ldrb	r3, [r3, #2]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 f981 	bl	8005d9c <RTC_Bcd2ToByte>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	007f7f7f 	.word	0x007f7f7f

08005ab0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	7f1b      	ldrb	r3, [r3, #28]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <HAL_RTC_SetDate+0x1c>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e06f      	b.n	8005bac <HAL_RTC_SetDate+0xfc>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10e      	bne.n	8005afc <HAL_RTC_SetDate+0x4c>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	785b      	ldrb	r3, [r3, #1]
 8005aee:	f023 0310 	bic.w	r3, r3, #16
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	330a      	adds	r3, #10
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d11c      	bne.n	8005b3c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	78db      	ldrb	r3, [r3, #3]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 f92a 	bl	8005d60 <RTC_ByteToBcd2>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f923 	bl	8005d60 <RTC_ByteToBcd2>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b1e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	789b      	ldrb	r3, [r3, #2]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f91b 	bl	8005d60 <RTC_ByteToBcd2>
 8005b2a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b2c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	e00e      	b.n	8005b5a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	78db      	ldrb	r3, [r3, #3]
 8005b40:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b48:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b4e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b56:	4313      	orrs	r3, r2
 8005b58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	22ca      	movs	r2, #202	; 0xca
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2253      	movs	r2, #83	; 0x53
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f89c 	bl	8005ca8 <RTC_EnterInitMode>
 8005b70:	4603      	mov	r3, r0
 8005b72:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RTC_SetDate+0x104>)
 8005b82:	400b      	ands	r3, r1
 8005b84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f8c5 	bl	8005d16 <RTC_ExitInitMode>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	22ff      	movs	r2, #255	; 0xff
 8005ba2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	771a      	strb	r2, [r3, #28]

  return status;
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd90      	pop	{r4, r7, pc}
 8005bb4:	00ffff3f 	.word	0x00ffff3f

08005bb8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <HAL_RTC_GetDate+0x9c>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	0c1b      	lsrs	r3, r3, #16
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	0b5b      	lsrs	r3, r3, #13
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d11a      	bne.n	8005c48 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	78db      	ldrb	r3, [r3, #3]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f8c0 	bl	8005d9c <RTC_Bcd2ToByte>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 f8b7 	bl	8005d9c <RTC_Bcd2ToByte>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	789b      	ldrb	r3, [r3, #2]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f8ae 	bl	8005d9c <RTC_Bcd2ToByte>
 8005c40:	4603      	mov	r3, r0
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	00ffff3f 	.word	0x00ffff3f

08005c58 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c72:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c74:	f7fc fd3a 	bl	80026ec <HAL_GetTick>
 8005c78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c7a:	e009      	b.n	8005c90 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c7c:	f7fc fd36 	bl	80026ec <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c8a:	d901      	bls.n	8005c90 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e007      	b.n	8005ca0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ee      	beq.n	8005c7c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d122      	bne.n	8005d0c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cd4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd6:	f7fc fd09 	bl	80026ec <HAL_GetTick>
 8005cda:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cdc:	e00c      	b.n	8005cf8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cde:	f7fc fd05 	bl	80026ec <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cec:	d904      	bls.n	8005cf8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <RTC_EnterInitMode+0x64>
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d1e8      	bne.n	8005cde <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7ff ff89 	bl	8005c58 <HAL_RTC_WaitForSynchro>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005d6e:	e005      	b.n	8005d7c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	3b0a      	subs	r3, #10
 8005d7a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d8f6      	bhi.n	8005d70 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	011b      	lsls	r3, r3, #4
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	b2db      	uxtb	r3, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	461a      	mov	r2, r3
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	4413      	add	r3, r2
 8005dca:	b2db      	uxtb	r3, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3350      	adds	r3, #80	; 0x50
 8005dee:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	4413      	add	r3, r2
 8005df8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3350      	adds	r3, #80	; 0x50
 8005e20:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e156      	b.n	8006108 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fb fb4c 	bl	800150c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f95b 	bl	8006138 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d00c      	beq.n	8005ea4 <HAL_SAI_Init+0x68>
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d80d      	bhi.n	8005eaa <HAL_SAI_Init+0x6e>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <HAL_SAI_Init+0x5c>
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d003      	beq.n	8005e9e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005e96:	e008      	b.n	8005eaa <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61fb      	str	r3, [r7, #28]
      break;
 8005e9c:	e006      	b.n	8005eac <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	61fb      	str	r3, [r7, #28]
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	61fb      	str	r3, [r7, #28]
      break;
 8005ea8:	e000      	b.n	8005eac <HAL_SAI_Init+0x70>
      break;
 8005eaa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d81e      	bhi.n	8005ef2 <HAL_SAI_Init+0xb6>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <HAL_SAI_Init+0x80>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005ed3 	.word	0x08005ed3
 8005ec4:	08005edb 	.word	0x08005edb
 8005ec8:	08005ee3 	.word	0x08005ee3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ed0:	e010      	b.n	8005ef4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ed8:	e00c      	b.n	8005ef4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ede:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ee0:	e008      	b.n	8005ef4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ee6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005ef0:	e000      	b.n	8005ef4 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005ef2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a85      	ldr	r2, [pc, #532]	; (8006110 <HAL_SAI_Init+0x2d4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_SAI_Init+0xcc>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a84      	ldr	r2, [pc, #528]	; (8006114 <HAL_SAI_Init+0x2d8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d103      	bne.n	8005f10 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005f08:	4a83      	ldr	r2, [pc, #524]	; (8006118 <HAL_SAI_Init+0x2dc>)
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e002      	b.n	8005f16 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005f10:	4a82      	ldr	r2, [pc, #520]	; (800611c <HAL_SAI_Init+0x2e0>)
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d04c      	beq.n	8005fb8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a7a      	ldr	r2, [pc, #488]	; (8006110 <HAL_SAI_Init+0x2d4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_SAI_Init+0xfa>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a78      	ldr	r2, [pc, #480]	; (8006114 <HAL_SAI_Init+0x2d8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d104      	bne.n	8005f40 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005f36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005f3a:	f7ff facb 	bl	80054d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f3e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a76      	ldr	r2, [pc, #472]	; (8006120 <HAL_SAI_Init+0x2e4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d004      	beq.n	8005f54 <HAL_SAI_Init+0x118>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a75      	ldr	r2, [pc, #468]	; (8006124 <HAL_SAI_Init+0x2e8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d104      	bne.n	8005f5e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005f54:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005f58:	f7ff fabc 	bl	80054d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f5c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4613      	mov	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	025b      	lsls	r3, r3, #9
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a6b      	ldr	r2, [pc, #428]	; (8006128 <HAL_SAI_Init+0x2ec>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	08da      	lsrs	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005f84:	68f9      	ldr	r1, [r7, #12]
 8005f86:	4b68      	ldr	r3, [pc, #416]	; (8006128 <HAL_SAI_Init+0x2ec>)
 8005f88:	fba3 2301 	umull	r2, r3, r3, r1
 8005f8c:	08da      	lsrs	r2, r3, #3
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	1aca      	subs	r2, r1, r3
 8005f98:	2a08      	cmp	r2, #8
 8005f9a:	d904      	bls.n	8005fa6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d104      	bne.n	8005fb8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	085a      	lsrs	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <HAL_SAI_Init+0x18c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d109      	bne.n	8005fdc <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_SAI_Init+0x198>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e001      	b.n	8005fd8 <HAL_SAI_Init+0x19c>
 8005fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e008      	b.n	8005fee <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d102      	bne.n	8005fea <HAL_SAI_Init+0x1ae>
 8005fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe8:	e000      	b.n	8005fec <HAL_SAI_Init+0x1b0>
 8005fea:	2300      	movs	r3, #0
 8005fec:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b4c      	ldr	r3, [pc, #304]	; (800612c <HAL_SAI_Init+0x2f0>)
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006012:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	431a      	orrs	r2, r3
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8006026:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006032:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	051b      	lsls	r3, r3, #20
 800603a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b38      	ldr	r3, [pc, #224]	; (8006130 <HAL_SAI_Init+0x2f4>)
 8006050:	400b      	ands	r3, r1
 8006052:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6899      	ldr	r1, [r3, #8]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b2d      	ldr	r3, [pc, #180]	; (8006134 <HAL_SAI_Init+0x2f8>)
 800607e:	400b      	ands	r3, r1
 8006080:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6899      	ldr	r1, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006092:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8006098:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800609e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a4:	3b01      	subs	r3, #1
 80060a6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80060a8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68d9      	ldr	r1, [r3, #12]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	f24f 0320 	movw	r3, #61472	; 0xf020
 80060c0:	400b      	ands	r3, r1
 80060c2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	041b      	lsls	r3, r3, #16
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e0:	3b01      	subs	r3, #1
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3720      	adds	r7, #32
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	40015804 	.word	0x40015804
 8006114:	40015824 	.word	0x40015824
 8006118:	40015800 	.word	0x40015800
 800611c:	40015c00 	.word	0x40015c00
 8006120:	40015c04 	.word	0x40015c04
 8006124:	40015c24 	.word	0x40015c24
 8006128:	cccccccd 	.word	0xcccccccd
 800612c:	ff05c010 	.word	0xff05c010
 8006130:	ffff1ff0 	.word	0xffff1ff0
 8006134:	fff88000 	.word	0xfff88000

08006138 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8006140:	4b17      	ldr	r3, [pc, #92]	; (80061a0 <SAI_Disable+0x68>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <SAI_Disable+0x6c>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	0b1b      	lsrs	r3, r3, #12
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006162:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	1e5a      	subs	r2, r3, #1
 8006168:	60fa      	str	r2, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	72fb      	strb	r3, [r7, #11]
      break;
 8006182:	e006      	b.n	8006192 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e8      	bne.n	8006164 <SAI_Disable+0x2c>

  return status;
 8006192:	7afb      	ldrb	r3, [r7, #11]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	20000000 	.word	0x20000000
 80061a4:	95cbec1b 	.word	0x95cbec1b

080061a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e022      	b.n	8006200 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fb fa69 	bl	80016a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2203      	movs	r2, #3
 80061d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f814 	bl	8006208 <HAL_SD_InitCard>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e00a      	b.n	8006200 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006208:	b5b0      	push	{r4, r5, r7, lr}
 800620a:	b08e      	sub	sp, #56	; 0x38
 800620c:	af04      	add	r7, sp, #16
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006210:	2300      	movs	r3, #0
 8006212:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006218:	2300      	movs	r3, #0
 800621a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006220:	2300      	movs	r3, #0
 8006222:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006224:	2376      	movs	r3, #118	; 0x76
 8006226:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681d      	ldr	r5, [r3, #0]
 800622c:	466c      	mov	r4, sp
 800622e:	f107 0314 	add.w	r3, r7, #20
 8006232:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006236:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800623a:	f107 0308 	add.w	r3, r7, #8
 800623e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006240:	4628      	mov	r0, r5
 8006242:	f001 ff45 	bl	80080d0 <SDMMC_Init>
 8006246:	4603      	mov	r3, r0
 8006248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800624c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e059      	b.n	800630c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006266:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f001 ff79 	bl	8008164 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006280:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006282:	2002      	movs	r0, #2
 8006284:	f7fc fa3e 	bl	8002704 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fff3 	bl	8007274 <SD_PowerON>
 800628e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e02e      	b.n	800630c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 ff12 	bl	80070d8 <SD_InitCard>
 80062b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e01b      	b.n	800630c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 ffd3 	bl	8008288 <SDMMC_CmdBlockLength>
 80062e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00f      	beq.n	800630a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a09      	ldr	r2, [pc, #36]	; (8006314 <HAL_SD_InitCard+0x10c>)
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3728      	adds	r7, #40	; 0x28
 8006310:	46bd      	mov	sp, r7
 8006312:	bdb0      	pop	{r4, r5, r7, pc}
 8006314:	004005ff 	.word	0x004005ff

08006318 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	; 0x30
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d107      	bne.n	8006340 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006334:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e0c3      	b.n	80064c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	f040 80bc 	bne.w	80064c6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	441a      	add	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635e:	429a      	cmp	r2, r3
 8006360:	d907      	bls.n	8006372 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e0aa      	b.n	80064c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2203      	movs	r2, #3
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	4a4e      	ldr	r2, [pc, #312]	; (80064d0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	4a4d      	ldr	r2, [pc, #308]	; (80064d4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80063a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2200      	movs	r2, #0
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2200      	movs	r2, #0
 80063b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3380      	adds	r3, #128	; 0x80
 80063d8:	4619      	mov	r1, r3
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	025b      	lsls	r3, r3, #9
 80063e0:	089b      	lsrs	r3, r3, #2
 80063e2:	f7fd fa7d 	bl	80038e0 <HAL_DMA_Start_IT>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80063fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a35      	ldr	r2, [pc, #212]	; (80064d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006408:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e055      	b.n	80064c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0208 	orr.w	r2, r2, #8
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006430:	2b01      	cmp	r3, #1
 8006432:	d002      	beq.n	800643a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	025b      	lsls	r3, r3, #9
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800643a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800643e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	025b      	lsls	r3, r3, #9
 8006444:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006446:	2390      	movs	r3, #144	; 0x90
 8006448:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800644a:	2302      	movs	r3, #2
 800644c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800644e:	2300      	movs	r3, #0
 8006450:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006452:	2301      	movs	r3, #1
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f107 0210 	add.w	r2, r7, #16
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f001 fee5 	bl	8008230 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d90a      	bls.n	8006482 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2282      	movs	r2, #130	; 0x82
 8006470:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006478:	4618      	mov	r0, r3
 800647a:	f001 ff49 	bl	8008310 <SDMMC_CmdReadMultiBlock>
 800647e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006480:	e009      	b.n	8006496 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2281      	movs	r2, #129	; 0x81
 8006486:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648e:	4618      	mov	r0, r3
 8006490:	f001 ff1c 	bl	80082cc <SDMMC_CmdReadSingleBlock>
 8006494:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d012      	beq.n	80064c2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0d      	ldr	r2, [pc, #52]	; (80064d8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	431a      	orrs	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e002      	b.n	80064c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3730      	adds	r7, #48	; 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	08006ee7 	.word	0x08006ee7
 80064d4:	08006f59 	.word	0x08006f59
 80064d8:	004005ff 	.word	0x004005ff

080064dc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08c      	sub	sp, #48	; 0x30
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0c6      	b.n	8006692 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 80bf 	bne.w	8006690 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	441a      	add	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006522:	429a      	cmp	r2, r3
 8006524:	d907      	bls.n	8006536 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e0ad      	b.n	8006692 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2203      	movs	r2, #3
 800653a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 021a 	orr.w	r2, r2, #26
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	4a50      	ldr	r2, [pc, #320]	; (800669c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800655c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006562:	4a4f      	ldr	r2, [pc, #316]	; (80066a0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006564:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656a:	2200      	movs	r2, #0
 800656c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	025b      	lsls	r3, r3, #9
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d90a      	bls.n	8006598 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	22a0      	movs	r2, #160	; 0xa0
 8006586:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800658e:	4618      	mov	r0, r3
 8006590:	f001 ff02 	bl	8008398 <SDMMC_CmdWriteMultiBlock>
 8006594:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006596:	e009      	b.n	80065ac <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2290      	movs	r2, #144	; 0x90
 800659c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a4:	4618      	mov	r0, r3
 80065a6:	f001 fed5 	bl	8008354 <SDMMC_CmdWriteSingleBlock>
 80065aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d012      	beq.n	80065d8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a3b      	ldr	r2, [pc, #236]	; (80066a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e05c      	b.n	8006692 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ec:	2240      	movs	r2, #64	; 0x40
 80065ee:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3380      	adds	r3, #128	; 0x80
 8006618:	461a      	mov	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	025b      	lsls	r3, r3, #9
 800661e:	089b      	lsrs	r3, r3, #2
 8006620:	f7fd f95e 	bl	80038e0 <HAL_DMA_Start_IT>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01a      	beq.n	8006660 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 021a 	bic.w	r2, r2, #26
 8006638:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e018      	b.n	8006692 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006664:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	025b      	lsls	r3, r3, #9
 800666a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800666c:	2390      	movs	r3, #144	; 0x90
 800666e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006670:	2300      	movs	r3, #0
 8006672:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006674:	2300      	movs	r3, #0
 8006676:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006678:	2301      	movs	r3, #1
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f107 0210 	add.w	r2, r7, #16
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 fdd2 	bl	8008230 <SDMMC_ConfigData>

      return HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	3730      	adds	r7, #48	; 0x30
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	08006ebd 	.word	0x08006ebd
 80066a0:	08006f59 	.word	0x08006f59
 80066a4:	004005ff 	.word	0x004005ff

080066a8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d008      	beq.n	80066d6 <HAL_SD_IRQHandler+0x2e>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 ffef 	bl	80076b2 <SD_Read_IT>
 80066d4:	e15a      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 808d 	beq.w	8006800 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	4b9a      	ldr	r3, [pc, #616]	; (8006964 <HAL_SD_IRQHandler+0x2bc>)
 80066fc:	400b      	ands	r3, r1
 80066fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0201 	bic.w	r2, r2, #1
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d039      	beq.n	800678e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_SD_IRQHandler+0x86>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d011      	beq.n	8006752 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fe52 	bl	80083dc <SDMMC_CmdStopTransfer>
 8006738:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d008      	beq.n	8006752 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f921 	bl	8006994 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f240 523a 	movw	r2, #1338	; 0x53a
 800675a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d104      	bne.n	800677e <HAL_SD_IRQHandler+0xd6>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f002 fac2 	bl	8008d08 <HAL_SD_RxCpltCallback>
 8006784:	e102      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f002 fab4 	bl	8008cf4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800678c:	e0fe      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006794:	2b00      	cmp	r3, #0
 8006796:	f000 80f9 	beq.w	800698c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d011      	beq.n	80067c8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fe17 	bl	80083dc <SDMMC_CmdStopTransfer>
 80067ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d008      	beq.n	80067c8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f8e6 	bl	8006994 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 80dc 	bne.w	800698c <HAL_SD_IRQHandler+0x2e4>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f040 80d6 	bne.w	800698c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0208 	bic.w	r2, r2, #8
 80067ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f002 fa7b 	bl	8008cf4 <HAL_SD_TxCpltCallback>
}
 80067fe:	e0c5      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <HAL_SD_IRQHandler+0x178>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 ff9b 	bl	8007754 <SD_Write_IT>
 800681e:	e0b5      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006826:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80ae 	beq.w	800698c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	f043 0202 	orr.w	r2, r3, #2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d005      	beq.n	8006864 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f043 0208 	orr.w	r2, r3, #8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006890:	f043 0210 	orr.w	r2, r3, #16
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f240 523a 	movw	r2, #1338	; 0x53a
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80068b0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fd90 	bl	80083dc <SDMMC_CmdStopTransfer>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f857 	bl	8006994 <HAL_SD_ErrorCallback>
}
 80068e6:	e051      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d04c      	beq.n	800698c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d104      	bne.n	8006906 <HAL_SD_IRQHandler+0x25e>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d011      	beq.n	800692a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_SD_IRQHandler+0x2c0>)
 800690c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	4618      	mov	r0, r3
 8006914:	f7fd f844 	bl	80039a0 <HAL_DMA_Abort_IT>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d036      	beq.n	800698c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fb6a 	bl	8006ffc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006928:	e030      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <HAL_SD_IRQHandler+0x296>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	4a0a      	ldr	r2, [pc, #40]	; (800696c <HAL_SD_IRQHandler+0x2c4>)
 8006944:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd f828 	bl	80039a0 <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01a      	beq.n	800698c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fb85 	bl	800706a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006960:	e014      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
 8006962:	bf00      	nop
 8006964:	ffff3ec5 	.word	0xffff3ec5
 8006968:	08006ffd 	.word	0x08006ffd
 800696c:	0800706b 	.word	0x0800706b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 f9ab 	bl	8008ce0 <HAL_SD_AbortCallback>
}
 800698a:	e7ff      	b.n	800698c <HAL_SD_IRQHandler+0x2e4>
 800698c:	bf00      	nop
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069b6:	0f9b      	lsrs	r3, r3, #30
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069c2:	0e9b      	lsrs	r3, r3, #26
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d4:	0e1b      	lsrs	r3, r3, #24
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0303 	and.w	r3, r3, #3
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e6:	0c1b      	lsrs	r3, r3, #16
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069f2:	0a1b      	lsrs	r3, r3, #8
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a08:	0d1b      	lsrs	r3, r3, #20
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a14:	0c1b      	lsrs	r3, r3, #16
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	f003 030f 	and.w	r3, r3, #15
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a26:	0bdb      	lsrs	r3, r3, #15
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a38:	0b9b      	lsrs	r3, r3, #14
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a4a:	0b5b      	lsrs	r3, r3, #13
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a5c:	0b1b      	lsrs	r3, r3, #12
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d163      	bne.n	8006b40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a7c:	009a      	lsls	r2, r3, #2
 8006a7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a82:	4013      	ands	r3, r2
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006a88:	0f92      	lsrs	r2, r2, #30
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a94:	0edb      	lsrs	r3, r3, #27
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa6:	0e1b      	lsrs	r3, r3, #24
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab8:	0d5b      	lsrs	r3, r3, #21
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aca:	0c9b      	lsrs	r3, r3, #18
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	0bdb      	lsrs	r3, r3, #15
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	7e1b      	ldrb	r3, [r3, #24]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	3302      	adds	r3, #2
 8006b00:	2201      	movs	r2, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b0a:	fb03 f202 	mul.w	r2, r3, r2
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	7a1b      	ldrb	r3, [r3, #8]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	f003 030f 	and.w	r3, r3, #15
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006b2c:	0a52      	lsrs	r2, r2, #9
 8006b2e:	fb03 f202 	mul.w	r2, r3, r2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3c:	661a      	str	r2, [r3, #96]	; 0x60
 8006b3e:	e031      	b.n	8006ba4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d11d      	bne.n	8006b84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b56:	0c1b      	lsrs	r3, r3, #16
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	029a      	lsls	r2, r3, #10
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	661a      	str	r2, [r3, #96]	; 0x60
 8006b82:	e00f      	b.n	8006ba4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a58      	ldr	r2, [pc, #352]	; (8006cec <HAL_SD_GetCardCSD+0x344>)
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e09d      	b.n	8006ce0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba8:	0b9b      	lsrs	r3, r3, #14
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bba:	09db      	lsrs	r3, r3, #7
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bdc:	0fdb      	lsrs	r3, r3, #31
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be8:	0f5b      	lsrs	r3, r3, #29
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 0303 	and.w	r3, r3, #3
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfa:	0e9b      	lsrs	r3, r3, #26
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0c:	0d9b      	lsrs	r3, r3, #22
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 030f 	and.w	r3, r3, #15
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	0d5b      	lsrs	r3, r3, #21
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	0c1b      	lsrs	r3, r3, #16
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c4e:	0bdb      	lsrs	r3, r3, #15
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	0b9b      	lsrs	r3, r3, #14
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	0b5b      	lsrs	r3, r3, #13
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	0b1b      	lsrs	r3, r3, #12
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9e:	0a9b      	lsrs	r3, r3, #10
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	004005ff 	.word	0x004005ff

08006cf0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006d48:	b5b0      	push	{r4, r5, r7, lr}
 8006d4a:	b08e      	sub	sp, #56	; 0x38
 8006d4c:	af04      	add	r7, sp, #16
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d02e      	beq.n	8006dc6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d6e:	d106      	bne.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8006d7c:	e029      	b.n	8006dd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d84:	d10a      	bne.n	8006d9c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb2a 	bl	80073e0 <SD_WideBus_Enable>
 8006d8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	639a      	str	r2, [r3, #56]	; 0x38
 8006d9a:	e01a      	b.n	8006dd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fb67 	bl	8007476 <SD_WideBus_Disable>
 8006da8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	639a      	str	r2, [r3, #56]	; 0x38
 8006db6:	e00c      	b.n	8006dd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8006dc4:	e005      	b.n	8006dd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00b      	beq.n	8006df2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a26      	ldr	r2, [pc, #152]	; (8006e78 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006df0:	e01f      	b.n	8006e32 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681d      	ldr	r5, [r3, #0]
 8006e18:	466c      	mov	r4, sp
 8006e1a:	f107 0314 	add.w	r3, r7, #20
 8006e1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e26:	f107 0308 	add.w	r3, r7, #8
 8006e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f001 f94f 	bl	80080d0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f001 fa24 	bl	8008288 <SDMMC_CmdBlockLength>
 8006e40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00c      	beq.n	8006e62 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	; 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bdb0      	pop	{r4, r5, r7, pc}
 8006e76:	bf00      	nop
 8006e78:	004005ff 	.word	0x004005ff

08006e7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e88:	f107 030c 	add.w	r3, r7, #12
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa7e 	bl	8007390 <SD_SendStatus>
 8006e94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	0a5b      	lsrs	r3, r3, #9
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006eb2:	693b      	ldr	r3, [r7, #16]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ed8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	2b82      	cmp	r3, #130	; 0x82
 8006efa:	d111      	bne.n	8006f20 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 fa6b 	bl	80083dc <SDMMC_CmdStopTransfer>
 8006f06:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f7ff fd3a 	bl	8006994 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0208 	bic.w	r2, r2, #8
 8006f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f240 523a 	movw	r2, #1338	; 0x53a
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f001 fedd 	bl	8008d08 <HAL_SD_RxCpltCallback>
#endif
}
 8006f4e:	bf00      	nop
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fc fec6 	bl	8003cf8 <HAL_DMA_GetError>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d03e      	beq.n	8006ff0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d002      	beq.n	8006f8e <SD_DMAError+0x36>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d12d      	bne.n	8006fea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <SD_DMAError+0xa0>)
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006fa4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006fb2:	6978      	ldr	r0, [r7, #20]
 8006fb4:	f7ff ff62 	bl	8006e7c <HAL_SD_GetCardState>
 8006fb8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b06      	cmp	r3, #6
 8006fbe:	d002      	beq.n	8006fc6 <SD_DMAError+0x6e>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b05      	cmp	r3, #5
 8006fc4:	d10a      	bne.n	8006fdc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fa06 	bl	80083dc <SDMMC_CmdStopTransfer>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006fea:	6978      	ldr	r0, [r7, #20]
 8006fec:	f7ff fcd2 	bl	8006994 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	004005ff 	.word	0x004005ff

08006ffc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007012:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff ff31 	bl	8006e7c <HAL_SD_GetCardState>
 800701a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b06      	cmp	r3, #6
 800702e:	d002      	beq.n	8007036 <SD_DMATxAbort+0x3a>
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b05      	cmp	r3, #5
 8007034:	d10a      	bne.n	800704c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f9ce 	bl	80083dc <SDMMC_CmdStopTransfer>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	431a      	orrs	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f001 fe43 	bl	8008ce0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800705a:	e002      	b.n	8007062 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f7ff fc99 	bl	8006994 <HAL_SD_ErrorCallback>
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007080:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fefa 	bl	8006e7c <HAL_SD_GetCardState>
 8007088:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b06      	cmp	r3, #6
 800709c:	d002      	beq.n	80070a4 <SD_DMARxAbort+0x3a>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d10a      	bne.n	80070ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f001 f997 	bl	80083dc <SDMMC_CmdStopTransfer>
 80070ae:	4602      	mov	r2, r0
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	431a      	orrs	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f001 fe0c 	bl	8008ce0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80070c8:	e002      	b.n	80070d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fc62 	bl	8006994 <HAL_SD_ErrorCallback>
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80070d8:	b5b0      	push	{r4, r5, r7, lr}
 80070da:	b094      	sub	sp, #80	; 0x50
 80070dc:	af04      	add	r7, sp, #16
 80070de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80070e0:	2301      	movs	r3, #1
 80070e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 f849 	bl	8008180 <SDMMC_GetPowerState>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80070f8:	e0b8      	b.n	800726c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d02f      	beq.n	8007162 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fa73 	bl	80085f2 <SDMMC_CmdSendCID>
 800710c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <SD_InitCard+0x40>
    {
      return errorstate;
 8007114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007116:	e0a9      	b.n	800726c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f873 	bl	800820a <SDMMC_GetResponse>
 8007124:	4602      	mov	r2, r0
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2104      	movs	r1, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f001 f86a 	bl	800820a <SDMMC_GetResponse>
 8007136:	4602      	mov	r2, r0
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2108      	movs	r1, #8
 8007142:	4618      	mov	r0, r3
 8007144:	f001 f861 	bl	800820a <SDMMC_GetResponse>
 8007148:	4602      	mov	r2, r0
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	210c      	movs	r1, #12
 8007154:	4618      	mov	r0, r3
 8007156:	f001 f858 	bl	800820a <SDMMC_GetResponse>
 800715a:	4602      	mov	r2, r0
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007166:	2b03      	cmp	r3, #3
 8007168:	d00d      	beq.n	8007186 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f107 020e 	add.w	r2, r7, #14
 8007172:	4611      	mov	r1, r2
 8007174:	4618      	mov	r0, r3
 8007176:	f001 fa79 	bl	800866c <SDMMC_CmdSetRelAdd>
 800717a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800717c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <SD_InitCard+0xae>
    {
      return errorstate;
 8007182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007184:	e072      	b.n	800726c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718a:	2b03      	cmp	r3, #3
 800718c:	d036      	beq.n	80071fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800718e:	89fb      	ldrh	r3, [r7, #14]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719e:	041b      	lsls	r3, r3, #16
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f001 fa43 	bl	800862e <SDMMC_CmdSendCSD>
 80071a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80071b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b2:	e05b      	b.n	800726c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f001 f825 	bl	800820a <SDMMC_GetResponse>
 80071c0:	4602      	mov	r2, r0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2104      	movs	r1, #4
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 f81c 	bl	800820a <SDMMC_GetResponse>
 80071d2:	4602      	mov	r2, r0
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2108      	movs	r1, #8
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 f813 	bl	800820a <SDMMC_GetResponse>
 80071e4:	4602      	mov	r2, r0
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	210c      	movs	r1, #12
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 f80a 	bl	800820a <SDMMC_GetResponse>
 80071f6:	4602      	mov	r2, r0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2104      	movs	r1, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f801 	bl	800820a <SDMMC_GetResponse>
 8007208:	4603      	mov	r3, r0
 800720a:	0d1a      	lsrs	r2, r3, #20
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007210:	f107 0310 	add.w	r3, r7, #16
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fbc6 	bl	80069a8 <HAL_SD_GetCardCSD>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007226:	e021      	b.n	800726c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6819      	ldr	r1, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	2200      	movs	r2, #0
 8007234:	461c      	mov	r4, r3
 8007236:	4615      	mov	r5, r2
 8007238:	4622      	mov	r2, r4
 800723a:	462b      	mov	r3, r5
 800723c:	4608      	mov	r0, r1
 800723e:	f001 f8ef 	bl	8008420 <SDMMC_CmdSelDesel>
 8007242:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <SD_InitCard+0x176>
  {
    return errorstate;
 800724a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724c:	e00e      	b.n	800726c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681d      	ldr	r5, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	466c      	mov	r4, sp
 8007256:	f103 0210 	add.w	r2, r3, #16
 800725a:	ca07      	ldmia	r2, {r0, r1, r2}
 800725c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007260:	3304      	adds	r3, #4
 8007262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007264:	4628      	mov	r0, r5
 8007266:	f000 ff33 	bl	80080d0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3740      	adds	r7, #64	; 0x40
 8007270:	46bd      	mov	sp, r7
 8007272:	bdb0      	pop	{r4, r5, r7, pc}

08007274 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	2300      	movs	r3, #0
 8007286:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4618      	mov	r0, r3
 800728e:	f001 f8ea 	bl	8008466 <SDMMC_CmdGoIdleState>
 8007292:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <SD_PowerON+0x2a>
  {
    return errorstate;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	e072      	b.n	8007384 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f001 f8fd 	bl	80084a2 <SDMMC_CmdOperCond>
 80072a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00d      	beq.n	80072cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f001 f8d3 	bl	8008466 <SDMMC_CmdGoIdleState>
 80072c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	e05b      	b.n	8007384 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d137      	bne.n	800734a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2100      	movs	r1, #0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 f8fd 	bl	80084e0 <SDMMC_CmdAppCommand>
 80072e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d02d      	beq.n	800734a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80072ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80072f2:	e047      	b.n	8007384 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f8f0 	bl	80084e0 <SDMMC_CmdAppCommand>
 8007300:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <SD_PowerON+0x98>
    {
      return errorstate;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	e03b      	b.n	8007384 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	491e      	ldr	r1, [pc, #120]	; (800738c <SD_PowerON+0x118>)
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f906 	bl	8008524 <SDMMC_CmdAppOperCommand>
 8007318:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007320:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007324:	e02e      	b.n	8007384 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2100      	movs	r1, #0
 800732c:	4618      	mov	r0, r3
 800732e:	f000 ff6c 	bl	800820a <SDMMC_GetResponse>
 8007332:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	0fdb      	lsrs	r3, r3, #31
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <SD_PowerON+0xcc>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <SD_PowerON+0xce>
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]

    count++;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	3301      	adds	r3, #1
 8007348:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007350:	4293      	cmp	r3, r2
 8007352:	d802      	bhi.n	800735a <SD_PowerON+0xe6>
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0cc      	beq.n	80072f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007360:	4293      	cmp	r3, r2
 8007362:	d902      	bls.n	800736a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007368:	e00c      	b.n	8007384 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d003      	beq.n	800737c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	645a      	str	r2, [r3, #68]	; 0x44
 800737a:	e002      	b.n	8007382 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	c1100000 	.word	0xc1100000

08007390 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80073a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073a4:	e018      	b.n	80073d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f001 f97b 	bl	80086ae <SDMMC_CmdSendStatus>
 80073b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	e009      	b.n	80073d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 ff1d 	bl	800820a <SDMMC_GetResponse>
 80073d0:	4602      	mov	r2, r0
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	2300      	movs	r3, #0
 80073ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 ff07 	bl	800820a <SDMMC_GetResponse>
 80073fc:	4603      	mov	r3, r0
 80073fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007406:	d102      	bne.n	800740e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007408:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800740c:	e02f      	b.n	800746e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800740e:	f107 030c 	add.w	r3, r7, #12
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f879 	bl	800750c <SD_FindSCR>
 800741a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	e023      	b.n	800746e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01c      	beq.n	800746a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	4619      	mov	r1, r3
 800743c:	4610      	mov	r0, r2
 800743e:	f001 f84f 	bl	80084e0 <SDMMC_CmdAppCommand>
 8007442:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	e00f      	b.n	800746e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2102      	movs	r1, #2
 8007454:	4618      	mov	r0, r3
 8007456:	f001 f889 	bl	800856c <SDMMC_CmdBusWidth>
 800745a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	e003      	b.n	800746e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007466:	2300      	movs	r3, #0
 8007468:	e001      	b.n	800746e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800746a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800747e:	2300      	movs	r3, #0
 8007480:	60fb      	str	r3, [r7, #12]
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2100      	movs	r1, #0
 800748c:	4618      	mov	r0, r3
 800748e:	f000 febc 	bl	800820a <SDMMC_GetResponse>
 8007492:	4603      	mov	r3, r0
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800749c:	d102      	bne.n	80074a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800749e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074a2:	e02f      	b.n	8007504 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80074a4:	f107 030c 	add.w	r3, r7, #12
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f82e 	bl	800750c <SD_FindSCR>
 80074b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	e023      	b.n	8007504 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d01c      	beq.n	8007500 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f001 f804 	bl	80084e0 <SDMMC_CmdAppCommand>
 80074d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	e00f      	b.n	8007504 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2100      	movs	r1, #0
 80074ea:	4618      	mov	r0, r3
 80074ec:	f001 f83e 	bl	800856c <SDMMC_CmdBusWidth>
 80074f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	e003      	b.n	8007504 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e001      	b.n	8007504 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007500:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800750c:	b590      	push	{r4, r7, lr}
 800750e:	b08f      	sub	sp, #60	; 0x3c
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007516:	f7fb f8e9 	bl	80026ec <HAL_GetTick>
 800751a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007520:	2300      	movs	r3, #0
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2108      	movs	r1, #8
 8007532:	4618      	mov	r0, r3
 8007534:	f000 fea8 	bl	8008288 <SDMMC_CmdBlockLength>
 8007538:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007542:	e0b2      	b.n	80076aa <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f000 ffc5 	bl	80084e0 <SDMMC_CmdAppCommand>
 8007556:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <SD_FindSCR+0x56>
  {
    return errorstate;
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	e0a3      	b.n	80076aa <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007566:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007568:	2308      	movs	r3, #8
 800756a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800756c:	2330      	movs	r3, #48	; 0x30
 800756e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007570:	2302      	movs	r3, #2
 8007572:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007574:	2300      	movs	r3, #0
 8007576:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007578:	2301      	movs	r3, #1
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f107 0210 	add.w	r2, r7, #16
 8007584:	4611      	mov	r1, r2
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fe52 	bl	8008230 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f80d 	bl	80085b0 <SDMMC_CmdSendSCR>
 8007596:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02a      	beq.n	80075f4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	e083      	b.n	80076aa <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00f      	beq.n	80075d0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	f107 0208 	add.w	r2, r7, #8
 80075bc:	18d4      	adds	r4, r2, r3
 80075be:	4608      	mov	r0, r1
 80075c0:	f000 fdb2 	bl	8008128 <SDMMC_ReadFIFO>
 80075c4:	4603      	mov	r3, r0
 80075c6:	6023      	str	r3, [r4, #0]
      index++;
 80075c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ca:	3301      	adds	r3, #1
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
 80075ce:	e006      	b.n	80075de <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d012      	beq.n	8007604 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075de:	f7fb f885 	bl	80026ec <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ec:	d102      	bne.n	80075f4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075f2:	e05a      	b.n	80076aa <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0cf      	beq.n	80075a2 <SD_FindSCR+0x96>
 8007602:	e000      	b.n	8007606 <SD_FindSCR+0xfa>
      break;
 8007604:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2208      	movs	r2, #8
 800761a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800761c:	2308      	movs	r3, #8
 800761e:	e044      	b.n	80076aa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2202      	movs	r2, #2
 8007634:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007636:	2302      	movs	r3, #2
 8007638:	e037      	b.n	80076aa <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d005      	beq.n	8007654 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2220      	movs	r2, #32
 800764e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007650:	2320      	movs	r3, #32
 8007652:	e02a      	b.n	80076aa <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f240 523a 	movw	r2, #1338	; 0x53a
 800765c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	061a      	lsls	r2, r3, #24
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800766a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007674:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	0e1b      	lsrs	r3, r3, #24
 800767a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767e:	601a      	str	r2, [r3, #0]
    scr++;
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	3304      	adds	r3, #4
 8007684:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	061a      	lsls	r2, r3, #24
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007692:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800769c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	0e1b      	lsrs	r3, r3, #24
 80076a2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	373c      	adds	r7, #60	; 0x3c
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd90      	pop	{r4, r7, pc}

080076b2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d03f      	beq.n	800774c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	e033      	b.n	800773a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 fd26 	bl	8008128 <SDMMC_ReadFIFO>
 80076dc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	3b01      	subs	r3, #1
 80076f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	3301      	adds	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	3b01      	subs	r3, #1
 8007706:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3b01      	subs	r3, #1
 800771c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	0e1b      	lsrs	r3, r3, #24
 8007722:	b2da      	uxtb	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3301      	adds	r3, #1
 800772c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3b01      	subs	r3, #1
 8007732:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	3301      	adds	r3, #1
 8007738:	617b      	str	r3, [r7, #20]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b07      	cmp	r3, #7
 800773e:	d9c8      	bls.n	80076d2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800774c:	bf00      	nop
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d043      	beq.n	80077f6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e037      	b.n	80077e4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	60bb      	str	r3, [r7, #8]
      tmp++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3b01      	subs	r3, #1
 8007784:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	021a      	lsls	r2, r3, #8
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	3b01      	subs	r3, #1
 800779c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	041a      	lsls	r2, r3, #16
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3301      	adds	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	061a      	lsls	r2, r3, #24
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3301      	adds	r3, #1
 80077c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f107 0208 	add.w	r2, r7, #8
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fcb2 	bl	8008142 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	3301      	adds	r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b07      	cmp	r3, #7
 80077e8:	d9c4      	bls.n	8007774 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80077f6:	bf00      	nop
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d101      	bne.n	8007810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e040      	b.n	8007892 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d106      	bne.n	8007826 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7fa f957 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2224      	movs	r2, #36	; 0x24
 800782a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0201 	bic.w	r2, r2, #1
 800783a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f82d 	bl	800789c <UART_SetConfig>
 8007842:	4603      	mov	r3, r0
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e022      	b.n	8007892 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fa85 	bl	8007d64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f042 0201 	orr.w	r2, r2, #1
 8007888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fb0c 	bl	8007ea8 <UART_CheckIdleState>
 8007890:	4603      	mov	r3, r0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	4313      	orrs	r3, r2
 80078be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	4ba6      	ldr	r3, [pc, #664]	; (8007b60 <UART_SetConfig+0x2c4>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	6979      	ldr	r1, [r7, #20]
 80078d0:	430b      	orrs	r3, r1
 80078d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68da      	ldr	r2, [r3, #12]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	430a      	orrs	r2, r1
 800790c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a94      	ldr	r2, [pc, #592]	; (8007b64 <UART_SetConfig+0x2c8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d120      	bne.n	800795a <UART_SetConfig+0xbe>
 8007918:	4b93      	ldr	r3, [pc, #588]	; (8007b68 <UART_SetConfig+0x2cc>)
 800791a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b03      	cmp	r3, #3
 8007924:	d816      	bhi.n	8007954 <UART_SetConfig+0xb8>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <UART_SetConfig+0x90>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	0800793d 	.word	0x0800793d
 8007930:	08007949 	.word	0x08007949
 8007934:	08007943 	.word	0x08007943
 8007938:	0800794f 	.word	0x0800794f
 800793c:	2301      	movs	r3, #1
 800793e:	77fb      	strb	r3, [r7, #31]
 8007940:	e150      	b.n	8007be4 <UART_SetConfig+0x348>
 8007942:	2302      	movs	r3, #2
 8007944:	77fb      	strb	r3, [r7, #31]
 8007946:	e14d      	b.n	8007be4 <UART_SetConfig+0x348>
 8007948:	2304      	movs	r3, #4
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e14a      	b.n	8007be4 <UART_SetConfig+0x348>
 800794e:	2308      	movs	r3, #8
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e147      	b.n	8007be4 <UART_SetConfig+0x348>
 8007954:	2310      	movs	r3, #16
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e144      	b.n	8007be4 <UART_SetConfig+0x348>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a83      	ldr	r2, [pc, #524]	; (8007b6c <UART_SetConfig+0x2d0>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d132      	bne.n	80079ca <UART_SetConfig+0x12e>
 8007964:	4b80      	ldr	r3, [pc, #512]	; (8007b68 <UART_SetConfig+0x2cc>)
 8007966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796a:	f003 030c 	and.w	r3, r3, #12
 800796e:	2b0c      	cmp	r3, #12
 8007970:	d828      	bhi.n	80079c4 <UART_SetConfig+0x128>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <UART_SetConfig+0xdc>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	080079ad 	.word	0x080079ad
 800797c:	080079c5 	.word	0x080079c5
 8007980:	080079c5 	.word	0x080079c5
 8007984:	080079c5 	.word	0x080079c5
 8007988:	080079b9 	.word	0x080079b9
 800798c:	080079c5 	.word	0x080079c5
 8007990:	080079c5 	.word	0x080079c5
 8007994:	080079c5 	.word	0x080079c5
 8007998:	080079b3 	.word	0x080079b3
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079c5 	.word	0x080079c5
 80079a8:	080079bf 	.word	0x080079bf
 80079ac:	2300      	movs	r3, #0
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e118      	b.n	8007be4 <UART_SetConfig+0x348>
 80079b2:	2302      	movs	r3, #2
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e115      	b.n	8007be4 <UART_SetConfig+0x348>
 80079b8:	2304      	movs	r3, #4
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e112      	b.n	8007be4 <UART_SetConfig+0x348>
 80079be:	2308      	movs	r3, #8
 80079c0:	77fb      	strb	r3, [r7, #31]
 80079c2:	e10f      	b.n	8007be4 <UART_SetConfig+0x348>
 80079c4:	2310      	movs	r3, #16
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e10c      	b.n	8007be4 <UART_SetConfig+0x348>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a68      	ldr	r2, [pc, #416]	; (8007b70 <UART_SetConfig+0x2d4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d120      	bne.n	8007a16 <UART_SetConfig+0x17a>
 80079d4:	4b64      	ldr	r3, [pc, #400]	; (8007b68 <UART_SetConfig+0x2cc>)
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079de:	2b30      	cmp	r3, #48	; 0x30
 80079e0:	d013      	beq.n	8007a0a <UART_SetConfig+0x16e>
 80079e2:	2b30      	cmp	r3, #48	; 0x30
 80079e4:	d814      	bhi.n	8007a10 <UART_SetConfig+0x174>
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d009      	beq.n	80079fe <UART_SetConfig+0x162>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d810      	bhi.n	8007a10 <UART_SetConfig+0x174>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <UART_SetConfig+0x15c>
 80079f2:	2b10      	cmp	r3, #16
 80079f4:	d006      	beq.n	8007a04 <UART_SetConfig+0x168>
 80079f6:	e00b      	b.n	8007a10 <UART_SetConfig+0x174>
 80079f8:	2300      	movs	r3, #0
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e0f2      	b.n	8007be4 <UART_SetConfig+0x348>
 80079fe:	2302      	movs	r3, #2
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e0ef      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a04:	2304      	movs	r3, #4
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e0ec      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e0e9      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a10:	2310      	movs	r3, #16
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e0e6      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a56      	ldr	r2, [pc, #344]	; (8007b74 <UART_SetConfig+0x2d8>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d120      	bne.n	8007a62 <UART_SetConfig+0x1c6>
 8007a20:	4b51      	ldr	r3, [pc, #324]	; (8007b68 <UART_SetConfig+0x2cc>)
 8007a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a2c:	d013      	beq.n	8007a56 <UART_SetConfig+0x1ba>
 8007a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a30:	d814      	bhi.n	8007a5c <UART_SetConfig+0x1c0>
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d009      	beq.n	8007a4a <UART_SetConfig+0x1ae>
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d810      	bhi.n	8007a5c <UART_SetConfig+0x1c0>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <UART_SetConfig+0x1a8>
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d006      	beq.n	8007a50 <UART_SetConfig+0x1b4>
 8007a42:	e00b      	b.n	8007a5c <UART_SetConfig+0x1c0>
 8007a44:	2300      	movs	r3, #0
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e0cc      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	77fb      	strb	r3, [r7, #31]
 8007a4e:	e0c9      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a50:	2304      	movs	r3, #4
 8007a52:	77fb      	strb	r3, [r7, #31]
 8007a54:	e0c6      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a56:	2308      	movs	r3, #8
 8007a58:	77fb      	strb	r3, [r7, #31]
 8007a5a:	e0c3      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a5c:	2310      	movs	r3, #16
 8007a5e:	77fb      	strb	r3, [r7, #31]
 8007a60:	e0c0      	b.n	8007be4 <UART_SetConfig+0x348>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a44      	ldr	r2, [pc, #272]	; (8007b78 <UART_SetConfig+0x2dc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d125      	bne.n	8007ab8 <UART_SetConfig+0x21c>
 8007a6c:	4b3e      	ldr	r3, [pc, #248]	; (8007b68 <UART_SetConfig+0x2cc>)
 8007a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a7a:	d017      	beq.n	8007aac <UART_SetConfig+0x210>
 8007a7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a80:	d817      	bhi.n	8007ab2 <UART_SetConfig+0x216>
 8007a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a86:	d00b      	beq.n	8007aa0 <UART_SetConfig+0x204>
 8007a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8c:	d811      	bhi.n	8007ab2 <UART_SetConfig+0x216>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d003      	beq.n	8007a9a <UART_SetConfig+0x1fe>
 8007a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a96:	d006      	beq.n	8007aa6 <UART_SetConfig+0x20a>
 8007a98:	e00b      	b.n	8007ab2 <UART_SetConfig+0x216>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e0a1      	b.n	8007be4 <UART_SetConfig+0x348>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e09e      	b.n	8007be4 <UART_SetConfig+0x348>
 8007aa6:	2304      	movs	r3, #4
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e09b      	b.n	8007be4 <UART_SetConfig+0x348>
 8007aac:	2308      	movs	r3, #8
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	e098      	b.n	8007be4 <UART_SetConfig+0x348>
 8007ab2:	2310      	movs	r3, #16
 8007ab4:	77fb      	strb	r3, [r7, #31]
 8007ab6:	e095      	b.n	8007be4 <UART_SetConfig+0x348>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2f      	ldr	r2, [pc, #188]	; (8007b7c <UART_SetConfig+0x2e0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d125      	bne.n	8007b0e <UART_SetConfig+0x272>
 8007ac2:	4b29      	ldr	r3, [pc, #164]	; (8007b68 <UART_SetConfig+0x2cc>)
 8007ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ad0:	d017      	beq.n	8007b02 <UART_SetConfig+0x266>
 8007ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ad6:	d817      	bhi.n	8007b08 <UART_SetConfig+0x26c>
 8007ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007adc:	d00b      	beq.n	8007af6 <UART_SetConfig+0x25a>
 8007ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae2:	d811      	bhi.n	8007b08 <UART_SetConfig+0x26c>
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <UART_SetConfig+0x254>
 8007ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aec:	d006      	beq.n	8007afc <UART_SetConfig+0x260>
 8007aee:	e00b      	b.n	8007b08 <UART_SetConfig+0x26c>
 8007af0:	2301      	movs	r3, #1
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e076      	b.n	8007be4 <UART_SetConfig+0x348>
 8007af6:	2302      	movs	r3, #2
 8007af8:	77fb      	strb	r3, [r7, #31]
 8007afa:	e073      	b.n	8007be4 <UART_SetConfig+0x348>
 8007afc:	2304      	movs	r3, #4
 8007afe:	77fb      	strb	r3, [r7, #31]
 8007b00:	e070      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b02:	2308      	movs	r3, #8
 8007b04:	77fb      	strb	r3, [r7, #31]
 8007b06:	e06d      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	77fb      	strb	r3, [r7, #31]
 8007b0c:	e06a      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <UART_SetConfig+0x2e4>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d138      	bne.n	8007b8a <UART_SetConfig+0x2ee>
 8007b18:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <UART_SetConfig+0x2cc>)
 8007b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b26:	d017      	beq.n	8007b58 <UART_SetConfig+0x2bc>
 8007b28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b2c:	d82a      	bhi.n	8007b84 <UART_SetConfig+0x2e8>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b32:	d00b      	beq.n	8007b4c <UART_SetConfig+0x2b0>
 8007b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b38:	d824      	bhi.n	8007b84 <UART_SetConfig+0x2e8>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d003      	beq.n	8007b46 <UART_SetConfig+0x2aa>
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d006      	beq.n	8007b52 <UART_SetConfig+0x2b6>
 8007b44:	e01e      	b.n	8007b84 <UART_SetConfig+0x2e8>
 8007b46:	2300      	movs	r3, #0
 8007b48:	77fb      	strb	r3, [r7, #31]
 8007b4a:	e04b      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e048      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b52:	2304      	movs	r3, #4
 8007b54:	77fb      	strb	r3, [r7, #31]
 8007b56:	e045      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	77fb      	strb	r3, [r7, #31]
 8007b5c:	e042      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b5e:	bf00      	nop
 8007b60:	efff69f3 	.word	0xefff69f3
 8007b64:	40011000 	.word	0x40011000
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	40004400 	.word	0x40004400
 8007b70:	40004800 	.word	0x40004800
 8007b74:	40004c00 	.word	0x40004c00
 8007b78:	40005000 	.word	0x40005000
 8007b7c:	40011400 	.word	0x40011400
 8007b80:	40007800 	.word	0x40007800
 8007b84:	2310      	movs	r3, #16
 8007b86:	77fb      	strb	r3, [r7, #31]
 8007b88:	e02c      	b.n	8007be4 <UART_SetConfig+0x348>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a72      	ldr	r2, [pc, #456]	; (8007d58 <UART_SetConfig+0x4bc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d125      	bne.n	8007be0 <UART_SetConfig+0x344>
 8007b94:	4b71      	ldr	r3, [pc, #452]	; (8007d5c <UART_SetConfig+0x4c0>)
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ba2:	d017      	beq.n	8007bd4 <UART_SetConfig+0x338>
 8007ba4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ba8:	d817      	bhi.n	8007bda <UART_SetConfig+0x33e>
 8007baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bae:	d00b      	beq.n	8007bc8 <UART_SetConfig+0x32c>
 8007bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb4:	d811      	bhi.n	8007bda <UART_SetConfig+0x33e>
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <UART_SetConfig+0x326>
 8007bba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bbe:	d006      	beq.n	8007bce <UART_SetConfig+0x332>
 8007bc0:	e00b      	b.n	8007bda <UART_SetConfig+0x33e>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	77fb      	strb	r3, [r7, #31]
 8007bc6:	e00d      	b.n	8007be4 <UART_SetConfig+0x348>
 8007bc8:	2302      	movs	r3, #2
 8007bca:	77fb      	strb	r3, [r7, #31]
 8007bcc:	e00a      	b.n	8007be4 <UART_SetConfig+0x348>
 8007bce:	2304      	movs	r3, #4
 8007bd0:	77fb      	strb	r3, [r7, #31]
 8007bd2:	e007      	b.n	8007be4 <UART_SetConfig+0x348>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	77fb      	strb	r3, [r7, #31]
 8007bd8:	e004      	b.n	8007be4 <UART_SetConfig+0x348>
 8007bda:	2310      	movs	r3, #16
 8007bdc:	77fb      	strb	r3, [r7, #31]
 8007bde:	e001      	b.n	8007be4 <UART_SetConfig+0x348>
 8007be0:	2310      	movs	r3, #16
 8007be2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bec:	d15b      	bne.n	8007ca6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007bee:	7ffb      	ldrb	r3, [r7, #31]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d828      	bhi.n	8007c46 <UART_SetConfig+0x3aa>
 8007bf4:	a201      	add	r2, pc, #4	; (adr r2, 8007bfc <UART_SetConfig+0x360>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c29 	.word	0x08007c29
 8007c04:	08007c31 	.word	0x08007c31
 8007c08:	08007c47 	.word	0x08007c47
 8007c0c:	08007c37 	.word	0x08007c37
 8007c10:	08007c47 	.word	0x08007c47
 8007c14:	08007c47 	.word	0x08007c47
 8007c18:	08007c47 	.word	0x08007c47
 8007c1c:	08007c3f 	.word	0x08007c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fd f808 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8007c24:	61b8      	str	r0, [r7, #24]
        break;
 8007c26:	e013      	b.n	8007c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c28:	f7fd f818 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 8007c2c:	61b8      	str	r0, [r7, #24]
        break;
 8007c2e:	e00f      	b.n	8007c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c30:	4b4b      	ldr	r3, [pc, #300]	; (8007d60 <UART_SetConfig+0x4c4>)
 8007c32:	61bb      	str	r3, [r7, #24]
        break;
 8007c34:	e00c      	b.n	8007c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c36:	f7fc ff2b 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8007c3a:	61b8      	str	r0, [r7, #24]
        break;
 8007c3c:	e008      	b.n	8007c50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c42:	61bb      	str	r3, [r7, #24]
        break;
 8007c44:	e004      	b.n	8007c50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	77bb      	strb	r3, [r7, #30]
        break;
 8007c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d074      	beq.n	8007d40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	005a      	lsls	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b0f      	cmp	r3, #15
 8007c70:	d916      	bls.n	8007ca0 <UART_SetConfig+0x404>
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c78:	d212      	bcs.n	8007ca0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f023 030f 	bic.w	r3, r3, #15
 8007c82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	89fb      	ldrh	r3, [r7, #14]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	89fa      	ldrh	r2, [r7, #14]
 8007c9c:	60da      	str	r2, [r3, #12]
 8007c9e:	e04f      	b.n	8007d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	77bb      	strb	r3, [r7, #30]
 8007ca4:	e04c      	b.n	8007d40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ca6:	7ffb      	ldrb	r3, [r7, #31]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d828      	bhi.n	8007cfe <UART_SetConfig+0x462>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <UART_SetConfig+0x418>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007cd9 	.word	0x08007cd9
 8007cb8:	08007ce1 	.word	0x08007ce1
 8007cbc:	08007ce9 	.word	0x08007ce9
 8007cc0:	08007cff 	.word	0x08007cff
 8007cc4:	08007cef 	.word	0x08007cef
 8007cc8:	08007cff 	.word	0x08007cff
 8007ccc:	08007cff 	.word	0x08007cff
 8007cd0:	08007cff 	.word	0x08007cff
 8007cd4:	08007cf7 	.word	0x08007cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd8:	f7fc ffac 	bl	8004c34 <HAL_RCC_GetPCLK1Freq>
 8007cdc:	61b8      	str	r0, [r7, #24]
        break;
 8007cde:	e013      	b.n	8007d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ce0:	f7fc ffbc 	bl	8004c5c <HAL_RCC_GetPCLK2Freq>
 8007ce4:	61b8      	str	r0, [r7, #24]
        break;
 8007ce6:	e00f      	b.n	8007d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b1d      	ldr	r3, [pc, #116]	; (8007d60 <UART_SetConfig+0x4c4>)
 8007cea:	61bb      	str	r3, [r7, #24]
        break;
 8007cec:	e00c      	b.n	8007d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fc fecf 	bl	8004a90 <HAL_RCC_GetSysClockFreq>
 8007cf2:	61b8      	str	r0, [r7, #24]
        break;
 8007cf4:	e008      	b.n	8007d08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cfa:	61bb      	str	r3, [r7, #24]
        break;
 8007cfc:	e004      	b.n	8007d08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	77bb      	strb	r3, [r7, #30]
        break;
 8007d06:	bf00      	nop
    }

    if (pclk != 0U)
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d018      	beq.n	8007d40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	085a      	lsrs	r2, r3, #1
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	441a      	add	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	2b0f      	cmp	r3, #15
 8007d26:	d909      	bls.n	8007d3c <UART_SetConfig+0x4a0>
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d2e:	d205      	bcs.n	8007d3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60da      	str	r2, [r3, #12]
 8007d3a:	e001      	b.n	8007d40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	40007c00 	.word	0x40007c00
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	00f42400 	.word	0x00f42400

08007d64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	f003 0308 	and.w	r3, r3, #8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	430a      	orrs	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01a      	beq.n	8007e7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e62:	d10a      	bne.n	8007e7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb8:	f7fa fc18 	bl	80026ec <HAL_GetTick>
 8007ebc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0308 	and.w	r3, r3, #8
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d10e      	bne.n	8007eea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f831 	bl	8007f42 <UART_WaitOnFlagUntilTimeout>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d001      	beq.n	8007eea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e027      	b.n	8007f3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d10e      	bne.n	8007f16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f81b 	bl	8007f42 <UART_WaitOnFlagUntilTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e011      	b.n	8007f3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b09c      	sub	sp, #112	; 0x70
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	603b      	str	r3, [r7, #0]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f52:	e0a7      	b.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f5a:	f000 80a3 	beq.w	80080a4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f5e:	f7fa fbc5 	bl	80026ec <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d302      	bcc.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d13f      	bne.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f88:	667b      	str	r3, [r7, #100]	; 0x64
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e6      	bne.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e5      	bne.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2220      	movs	r2, #32
 8007fde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e068      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d050      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800800c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008010:	d148      	bne.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800801a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008030:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803a:	637b      	str	r3, [r7, #52]	; 0x34
 800803c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e6      	bne.n	800801c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3308      	adds	r3, #8
 8008054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	613b      	str	r3, [r7, #16]
   return(result);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	66bb      	str	r3, [r7, #104]	; 0x68
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800806e:	623a      	str	r2, [r7, #32]
 8008070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	69f9      	ldr	r1, [r7, #28]
 8008074:	6a3a      	ldr	r2, [r7, #32]
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	61bb      	str	r3, [r7, #24]
   return(result);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e5      	bne.n	800804e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2220      	movs	r2, #32
 800808c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2220      	movs	r2, #32
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e010      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69da      	ldr	r2, [r3, #28]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4013      	ands	r3, r2
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	461a      	mov	r2, r3
 80080bc:	79fb      	ldrb	r3, [r7, #7]
 80080be:	429a      	cmp	r2, r3
 80080c0:	f43f af48 	beq.w	8007f54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3770      	adds	r7, #112	; 0x70
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80080d0:	b084      	sub	sp, #16
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	f107 001c 	add.w	r0, r7, #28
 80080de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80080e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80080e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80080ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80080ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80080f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80080f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80080fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	4313      	orrs	r3, r2
 8008100:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b07      	ldr	r3, [pc, #28]	; (8008124 <SDMMC_Init+0x54>)
 8008108:	4013      	ands	r3, r2
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	b004      	add	sp, #16
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	ffff8100 	.word	0xffff8100

08008128 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2203      	movs	r2, #3
 8008170:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0303 	and.w	r3, r3, #3
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800819c:	b480      	push	{r7}
 800819e:	b085      	sub	sp, #20
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80081c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80081c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	4b06      	ldr	r3, [pc, #24]	; (80081ec <SDMMC_SendCommand+0x50>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	431a      	orrs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	fffff000 	.word	0xfffff000

080081f0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	b2db      	uxtb	r3, r3
}
 80081fe:	4618      	mov	r0, r3
 8008200:	370c      	adds	r7, #12
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3314      	adds	r3, #20
 8008218:	461a      	mov	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	4413      	add	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
}  
 8008224:	4618      	mov	r0, r3
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008256:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800825c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008262:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800827a:	2300      	movs	r3, #0

}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008296:	2310      	movs	r3, #16
 8008298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800829a:	2340      	movs	r3, #64	; 0x40
 800829c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a8:	f107 0308 	add.w	r3, r7, #8
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff ff74 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80082b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b8:	2110      	movs	r1, #16
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fa1a 	bl	80086f4 <SDMMC_GetCmdResp1>
 80082c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082c2:	69fb      	ldr	r3, [r7, #28]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3720      	adds	r7, #32
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80082da:	2311      	movs	r3, #17
 80082dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082e2:	2300      	movs	r3, #0
 80082e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff ff52 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80082f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80082fc:	2111      	movs	r1, #17
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f9f8 	bl	80086f4 <SDMMC_GetCmdResp1>
 8008304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008306:	69fb      	ldr	r3, [r7, #28]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3720      	adds	r7, #32
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800831e:	2312      	movs	r3, #18
 8008320:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008322:	2340      	movs	r3, #64	; 0x40
 8008324:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800832a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800832e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008330:	f107 0308 	add.w	r3, r7, #8
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff ff30 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800833c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008340:	2112      	movs	r1, #18
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9d6 	bl	80086f4 <SDMMC_GetCmdResp1>
 8008348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800834a:	69fb      	ldr	r3, [r7, #28]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3720      	adds	r7, #32
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008362:	2318      	movs	r3, #24
 8008364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008366:	2340      	movs	r3, #64	; 0x40
 8008368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800836e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008372:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4619      	mov	r1, r3
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff ff0e 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	2118      	movs	r1, #24
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f9b4 	bl	80086f4 <SDMMC_GetCmdResp1>
 800838c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800838e:	69fb      	ldr	r3, [r7, #28]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80083a6:	2319      	movs	r3, #25
 80083a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083aa:	2340      	movs	r3, #64	; 0x40
 80083ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083b8:	f107 0308 	add.w	r3, r7, #8
 80083bc:	4619      	mov	r1, r3
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff feec 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80083c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c8:	2119      	movs	r1, #25
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f992 	bl	80086f4 <SDMMC_GetCmdResp1>
 80083d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083d2:	69fb      	ldr	r3, [r7, #28]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3720      	adds	r7, #32
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083e8:	230c      	movs	r3, #12
 80083ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083ec:	2340      	movs	r3, #64	; 0x40
 80083ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083f0:	2300      	movs	r3, #0
 80083f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	4619      	mov	r1, r3
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7ff fecb 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008406:	4a05      	ldr	r2, [pc, #20]	; (800841c <SDMMC_CmdStopTransfer+0x40>)
 8008408:	210c      	movs	r1, #12
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f972 	bl	80086f4 <SDMMC_GetCmdResp1>
 8008410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008412:	69fb      	ldr	r3, [r7, #28]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	05f5e100 	.word	0x05f5e100

08008420 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08a      	sub	sp, #40	; 0x28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008430:	2307      	movs	r3, #7
 8008432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008434:	2340      	movs	r3, #64	; 0x40
 8008436:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008438:	2300      	movs	r3, #0
 800843a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800843c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008440:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008442:	f107 0310 	add.w	r3, r7, #16
 8008446:	4619      	mov	r1, r3
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f7ff fea7 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800844e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008452:	2107      	movs	r1, #7
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 f94d 	bl	80086f4 <SDMMC_GetCmdResp1>
 800845a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800845e:	4618      	mov	r0, r3
 8008460:	3728      	adds	r7, #40	; 0x28
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b088      	sub	sp, #32
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800847a:	2300      	movs	r3, #0
 800847c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800847e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008484:	f107 0308 	add.w	r3, r7, #8
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff fe86 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb67 	bl	8008b64 <SDMMC_GetCmdError>
 8008496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008498:	69fb      	ldr	r3, [r7, #28]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3720      	adds	r7, #32
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b088      	sub	sp, #32
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80084aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80084ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80084b0:	2308      	movs	r3, #8
 80084b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084b4:	2340      	movs	r3, #64	; 0x40
 80084b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084c2:	f107 0308 	add.w	r3, r7, #8
 80084c6:	4619      	mov	r1, r3
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f7ff fe67 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fafa 	bl	8008ac8 <SDMMC_GetCmdResp7>
 80084d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084d6:	69fb      	ldr	r3, [r7, #28]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b088      	sub	sp, #32
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084ee:	2337      	movs	r3, #55	; 0x37
 80084f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084f6:	2300      	movs	r3, #0
 80084f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008500:	f107 0308 	add.w	r3, r7, #8
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fe48 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800850c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008510:	2137      	movs	r1, #55	; 0x37
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f8ee 	bl	80086f4 <SDMMC_GetCmdResp1>
 8008518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800851a:	69fb      	ldr	r3, [r7, #28]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3720      	adds	r7, #32
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	4b0d      	ldr	r3, [pc, #52]	; (8008568 <SDMMC_CmdAppOperCommand+0x44>)
 8008532:	4313      	orrs	r3, r2
 8008534:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008536:	2329      	movs	r3, #41	; 0x29
 8008538:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800853a:	2340      	movs	r3, #64	; 0x40
 800853c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008546:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008548:	f107 0308 	add.w	r3, r7, #8
 800854c:	4619      	mov	r1, r3
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fe24 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa03 	bl	8008960 <SDMMC_GetCmdResp3>
 800855a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800855c:	69fb      	ldr	r3, [r7, #28]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	80100000 	.word	0x80100000

0800856c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800857a:	2306      	movs	r3, #6
 800857c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800857e:	2340      	movs	r3, #64	; 0x40
 8008580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800858a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800858c:	f107 0308 	add.w	r3, r7, #8
 8008590:	4619      	mov	r1, r3
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff fe02 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	2106      	movs	r1, #6
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8a8 	bl	80086f4 <SDMMC_GetCmdResp1>
 80085a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a6:	69fb      	ldr	r3, [r7, #28]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80085bc:	2333      	movs	r3, #51	; 0x33
 80085be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ce:	f107 0308 	add.w	r3, r7, #8
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7ff fde1 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80085da:	f241 3288 	movw	r2, #5000	; 0x1388
 80085de:	2133      	movs	r1, #51	; 0x33
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f887 	bl	80086f4 <SDMMC_GetCmdResp1>
 80085e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e8:	69fb      	ldr	r3, [r7, #28]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80085fe:	2302      	movs	r3, #2
 8008600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008602:	23c0      	movs	r3, #192	; 0xc0
 8008604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008606:	2300      	movs	r3, #0
 8008608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800860a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff fdc0 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f957 	bl	80088d0 <SDMMC_GetCmdResp2>
 8008622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008624:	69fb      	ldr	r3, [r7, #28]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3720      	adds	r7, #32
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b088      	sub	sp, #32
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800863c:	2309      	movs	r3, #9
 800863e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008640:	23c0      	movs	r3, #192	; 0xc0
 8008642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008644:	2300      	movs	r3, #0
 8008646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800864c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800864e:	f107 0308 	add.w	r3, r7, #8
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f7ff fda1 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f938 	bl	80088d0 <SDMMC_GetCmdResp2>
 8008660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008662:	69fb      	ldr	r3, [r7, #28]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800867a:	2303      	movs	r3, #3
 800867c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800867e:	2340      	movs	r3, #64	; 0x40
 8008680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800868c:	f107 0308 	add.w	r3, r7, #8
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff fd82 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	2103      	movs	r1, #3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f99d 	bl	80089dc <SDMMC_GetCmdResp6>
 80086a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086a4:	69fb      	ldr	r3, [r7, #28]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b088      	sub	sp, #32
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80086bc:	230d      	movs	r3, #13
 80086be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086c0:	2340      	movs	r3, #64	; 0x40
 80086c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086ce:	f107 0308 	add.w	r3, r7, #8
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fd61 	bl	800819c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80086da:	f241 3288 	movw	r2, #5000	; 0x1388
 80086de:	210d      	movs	r1, #13
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f807 	bl	80086f4 <SDMMC_GetCmdResp1>
 80086e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086e8:	69fb      	ldr	r3, [r7, #28]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
	...

080086f4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b088      	sub	sp, #32
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	460b      	mov	r3, r1
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008702:	4b70      	ldr	r3, [pc, #448]	; (80088c4 <SDMMC_GetCmdResp1+0x1d0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a70      	ldr	r2, [pc, #448]	; (80088c8 <SDMMC_GetCmdResp1+0x1d4>)
 8008708:	fba2 2303 	umull	r2, r3, r2, r3
 800870c:	0a5a      	lsrs	r2, r3, #9
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	fb02 f303 	mul.w	r3, r2, r3
 8008714:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	1e5a      	subs	r2, r3, #1
 800871a:	61fa      	str	r2, [r7, #28]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008720:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008724:	e0c9      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0ef      	beq.n	8008716 <SDMMC_GetCmdResp1+0x22>
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1ea      	bne.n	8008716 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2204      	movs	r2, #4
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008752:	2304      	movs	r3, #4
 8008754:	e0b1      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008768:	2301      	movs	r3, #1
 800876a:	e0a6      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	22c5      	movs	r2, #197	; 0xc5
 8008770:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff fd3c 	bl	80081f0 <SDMMC_GetCommandResponse>
 8008778:	4603      	mov	r3, r0
 800877a:	461a      	mov	r2, r3
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	4293      	cmp	r3, r2
 8008780:	d001      	beq.n	8008786 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008782:	2301      	movs	r3, #1
 8008784:	e099      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008786:	2100      	movs	r1, #0
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f7ff fd3e 	bl	800820a <SDMMC_GetResponse>
 800878e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4b4e      	ldr	r3, [pc, #312]	; (80088cc <SDMMC_GetCmdResp1+0x1d8>)
 8008794:	4013      	ands	r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800879a:	2300      	movs	r3, #0
 800879c:	e08d      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	da02      	bge.n	80087aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80087a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087a8:	e087      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	e080      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d001      	beq.n	80087c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80087c2:	2380      	movs	r3, #128	; 0x80
 80087c4:	e079      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80087d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087d4:	e071      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80087e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087e4:	e069      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80087f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f4:	e061      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008800:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008804:	e059      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d002      	beq.n	8008816 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008814:	e051      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008824:	e049      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008834:	e041      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008844:	e039      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008854:	e031      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008860:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008864:	e029      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008874:	e021      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008880:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008884:	e019      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008890:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008894:	e011      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80088a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80088a4:	e009      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d002      	beq.n	80088b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80088b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80088b4:	e001      	b.n	80088ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000000 	.word	0x20000000
 80088c8:	10624dd3 	.word	0x10624dd3
 80088cc:	fdffe008 	.word	0xfdffe008

080088d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088d8:	4b1f      	ldr	r3, [pc, #124]	; (8008958 <SDMMC_GetCmdResp2+0x88>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a1f      	ldr	r2, [pc, #124]	; (800895c <SDMMC_GetCmdResp2+0x8c>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	1e5a      	subs	r2, r3, #1
 80088f2:	60fa      	str	r2, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088fc:	e026      	b.n	800894c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008902:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0ef      	beq.n	80088ee <SDMMC_GetCmdResp2+0x1e>
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1ea      	bne.n	80088ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d004      	beq.n	800892e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2204      	movs	r2, #4
 8008928:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800892a:	2304      	movs	r3, #4
 800892c:	e00e      	b.n	800894c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008940:	2301      	movs	r3, #1
 8008942:	e003      	b.n	800894c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	22c5      	movs	r2, #197	; 0xc5
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	20000000 	.word	0x20000000
 800895c:	10624dd3 	.word	0x10624dd3

08008960 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008968:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <SDMMC_GetCmdResp3+0x74>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1a      	ldr	r2, [pc, #104]	; (80089d8 <SDMMC_GetCmdResp3+0x78>)
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
 8008972:	0a5b      	lsrs	r3, r3, #9
 8008974:	f241 3288 	movw	r2, #5000	; 0x1388
 8008978:	fb02 f303 	mul.w	r3, r2, r3
 800897c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1e5a      	subs	r2, r3, #1
 8008982:	60fa      	str	r2, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800898c:	e01b      	b.n	80089c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800899a:	2b00      	cmp	r3, #0
 800899c:	d0ef      	beq.n	800897e <SDMMC_GetCmdResp3+0x1e>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1ea      	bne.n	800897e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ac:	f003 0304 	and.w	r3, r3, #4
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2204      	movs	r2, #4
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089ba:	2304      	movs	r3, #4
 80089bc:	e003      	b.n	80089c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	22c5      	movs	r2, #197	; 0xc5
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20000000 	.word	0x20000000
 80089d8:	10624dd3 	.word	0x10624dd3

080089dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	460b      	mov	r3, r1
 80089e6:	607a      	str	r2, [r7, #4]
 80089e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80089ea:	4b35      	ldr	r3, [pc, #212]	; (8008ac0 <SDMMC_GetCmdResp6+0xe4>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a35      	ldr	r2, [pc, #212]	; (8008ac4 <SDMMC_GetCmdResp6+0xe8>)
 80089f0:	fba2 2303 	umull	r2, r3, r2, r3
 80089f4:	0a5b      	lsrs	r3, r3, #9
 80089f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	1e5a      	subs	r2, r3, #1
 8008a04:	61fa      	str	r2, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a0e:	e052      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a14:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d0ef      	beq.n	8008a00 <SDMMC_GetCmdResp6+0x24>
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1ea      	bne.n	8008a00 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d004      	beq.n	8008a40 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a3c:	2304      	movs	r3, #4
 8008a3e:	e03a      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d004      	beq.n	8008a56 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e02f      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	f7ff fbca 	bl	80081f0 <SDMMC_GetCommandResponse>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d001      	beq.n	8008a6a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e025      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	22c5      	movs	r2, #197	; 0xc5
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a70:	2100      	movs	r1, #0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f7ff fbc9 	bl	800820a <SDMMC_GetResponse>
 8008a78:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d106      	bne.n	8008a92 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	e011      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aa0:	e009      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d002      	beq.n	8008ab2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ab0:	e001      	b.n	8008ab6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3720      	adds	r7, #32
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000000 	.word	0x20000000
 8008ac4:	10624dd3 	.word	0x10624dd3

08008ac8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ad0:	4b22      	ldr	r3, [pc, #136]	; (8008b5c <SDMMC_GetCmdResp7+0x94>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a22      	ldr	r2, [pc, #136]	; (8008b60 <SDMMC_GetCmdResp7+0x98>)
 8008ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ada:	0a5b      	lsrs	r3, r3, #9
 8008adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae0:	fb02 f303 	mul.w	r3, r2, r3
 8008ae4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	1e5a      	subs	r2, r3, #1
 8008aea:	60fa      	str	r2, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d102      	bne.n	8008af6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008af0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008af4:	e02c      	b.n	8008b50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0ef      	beq.n	8008ae6 <SDMMC_GetCmdResp7+0x1e>
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1ea      	bne.n	8008ae6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b14:	f003 0304 	and.w	r3, r3, #4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2204      	movs	r2, #4
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b22:	2304      	movs	r3, #4
 8008b24:	e014      	b.n	8008b50 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e009      	b.n	8008b50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2240      	movs	r2, #64	; 0x40
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b4e:	2300      	movs	r3, #0
  
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	20000000 	.word	0x20000000
 8008b60:	10624dd3 	.word	0x10624dd3

08008b64 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <SDMMC_GetCmdError+0x50>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a11      	ldr	r2, [pc, #68]	; (8008bb8 <SDMMC_GetCmdError+0x54>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	0a5b      	lsrs	r3, r3, #9
 8008b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7c:	fb02 f303 	mul.w	r3, r2, r3
 8008b80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1e5a      	subs	r2, r3, #1
 8008b86:	60fa      	str	r2, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b90:	e009      	b.n	8008ba6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0f1      	beq.n	8008b82 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	22c5      	movs	r2, #197	; 0xc5
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	20000000 	.word	0x20000000
 8008bb8:	10624dd3 	.word	0x10624dd3

08008bbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008bc0:	4904      	ldr	r1, [pc, #16]	; (8008bd4 <MX_FATFS_Init+0x18>)
 8008bc2:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <MX_FATFS_Init+0x1c>)
 8008bc4:	f002 fd0e 	bl	800b5e4 <FATFS_LinkDriver>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	4b03      	ldr	r3, [pc, #12]	; (8008bdc <MX_FATFS_Init+0x20>)
 8008bce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008bd0:	bf00      	nop
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	2000599c 	.word	0x2000599c
 8008bd8:	08012fd0 	.word	0x08012fd0
 8008bdc:	20005998 	.word	0x20005998

08008be0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008be4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008bfa:	f000 f896 	bl	8008d2a <BSP_SD_IsDetected>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d001      	beq.n	8008c08 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008c04:	2302      	movs	r3, #2
 8008c06:	e012      	b.n	8008c2e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008c08:	480b      	ldr	r0, [pc, #44]	; (8008c38 <BSP_SD_Init+0x48>)
 8008c0a:	f7fd facd 	bl	80061a8 <HAL_SD_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008c18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008c1c:	4806      	ldr	r0, [pc, #24]	; (8008c38 <BSP_SD_Init+0x48>)
 8008c1e:	f7fe f893 	bl	8006d48 <HAL_SD_ConfigWideBusOperation>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008c2c:	79fb      	ldrb	r3, [r7, #7]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	200057a0 	.word	0x200057a0

08008c3c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	68f9      	ldr	r1, [r7, #12]
 8008c52:	4806      	ldr	r0, [pc, #24]	; (8008c6c <BSP_SD_ReadBlocks_DMA+0x30>)
 8008c54:	f7fd fb60 	bl	8006318 <HAL_SD_ReadBlocks_DMA>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200057a0 	.word	0x200057a0

08008c70 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	68f9      	ldr	r1, [r7, #12]
 8008c86:	4806      	ldr	r0, [pc, #24]	; (8008ca0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008c88:	f7fd fc28 	bl	80064dc <HAL_SD_WriteBlocks_DMA>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	200057a0 	.word	0x200057a0

08008ca4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008ca8:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <BSP_SD_GetCardState+0x1c>)
 8008caa:	f7fe f8e7 	bl	8006e7c <HAL_SD_GetCardState>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	bf14      	ite	ne
 8008cb4:	2301      	movne	r3, #1
 8008cb6:	2300      	moveq	r3, #0
 8008cb8:	b2db      	uxtb	r3, r3
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	200057a0 	.word	0x200057a0

08008cc4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4803      	ldr	r0, [pc, #12]	; (8008cdc <BSP_SD_GetCardInfo+0x18>)
 8008cd0:	f7fe f80e 	bl	8006cf0 <HAL_SD_GetCardInfo>
}
 8008cd4:	bf00      	nop
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	200057a0 	.word	0x200057a0

08008ce0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008ce8:	f000 f818 	bl	8008d1c <BSP_SD_AbortCallback>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008cfc:	f000 f9a8 	bl	8009050 <BSP_SD_WriteCpltCallback>
}
 8008d00:	bf00      	nop
 8008d02:	3708      	adds	r7, #8
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008d10:	f000 f9aa 	bl	8009068 <BSP_SD_ReadCpltCallback>
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0

}
 8008d20:	bf00      	nop
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008d30:	2301      	movs	r3, #1
 8008d32:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008d34:	f000 f80c 	bl	8008d50 <BSP_PlatformIsDetected>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	b2db      	uxtb	r3, r3
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008d56:	2301      	movs	r3, #1
 8008d58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008d5e:	4806      	ldr	r0, [pc, #24]	; (8008d78 <BSP_PlatformIsDetected+0x28>)
 8008d60:	f7fb fa62 	bl	8004228 <HAL_GPIO_ReadPin>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40020400 	.word	0x40020400

08008d7c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008d84:	f7f9 fcb2 	bl	80026ec <HAL_GetTick>
 8008d88:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008d8a:	e006      	b.n	8008d9a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008d8c:	f7ff ff8a 	bl	8008ca4 <BSP_SD_GetCardState>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d101      	bne.n	8008d9a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e009      	b.n	8008dae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008d9a:	f7f9 fca7 	bl	80026ec <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d8f0      	bhi.n	8008d8c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <SD_CheckStatus+0x38>)
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008dc8:	f7ff ff6c 	bl	8008ca4 <BSP_SD_GetCardState>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008dd2:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <SD_CheckStatus+0x38>)
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	f023 0301 	bic.w	r3, r3, #1
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <SD_CheckStatus+0x38>)
 8008de0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008de2:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <SD_CheckStatus+0x38>)
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	b2db      	uxtb	r3, r3
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20000009 	.word	0x20000009

08008df4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008dfe:	f7ff fef7 	bl	8008bf0 <BSP_SD_Init>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d107      	bne.n	8008e18 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff ffd4 	bl	8008db8 <SD_CheckStatus>
 8008e10:	4603      	mov	r3, r0
 8008e12:	461a      	mov	r2, r3
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <SD_initialize+0x34>)
 8008e16:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008e18:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <SD_initialize+0x34>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	b2db      	uxtb	r3, r3
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3708      	adds	r7, #8
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000009 	.word	0x20000009

08008e2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4603      	mov	r3, r0
 8008e34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ffbd 	bl	8008db8 <SD_CheckStatus>
 8008e3e:	4603      	mov	r3, r0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008e5c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008e60:	f7ff ff8c 	bl	8008d7c <SD_CheckStatusWithTimeout>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	da01      	bge.n	8008e6e <SD_read+0x26>
  {
    return res;
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	e03b      	b.n	8008ee6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	68b8      	ldr	r0, [r7, #8]
 8008e74:	f7ff fee2 	bl	8008c3c <BSP_SD_ReadBlocks_DMA>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d132      	bne.n	8008ee4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008e7e:	4b1c      	ldr	r3, [pc, #112]	; (8008ef0 <SD_read+0xa8>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008e84:	f7f9 fc32 	bl	80026ec <HAL_GetTick>
 8008e88:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008e8a:	bf00      	nop
 8008e8c:	4b18      	ldr	r3, [pc, #96]	; (8008ef0 <SD_read+0xa8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d108      	bne.n	8008ea6 <SD_read+0x5e>
 8008e94:	f7f9 fc2a 	bl	80026ec <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d9f2      	bls.n	8008e8c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008ea6:	4b12      	ldr	r3, [pc, #72]	; (8008ef0 <SD_read+0xa8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d102      	bne.n	8008eb4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]
 8008eb2:	e017      	b.n	8008ee4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <SD_read+0xa8>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008eba:	f7f9 fc17 	bl	80026ec <HAL_GetTick>
 8008ebe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ec0:	e007      	b.n	8008ed2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ec2:	f7ff feef 	bl	8008ca4 <BSP_SD_GetCardState>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d102      	bne.n	8008ed2 <SD_read+0x8a>
          {
            res = RES_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008ed0:	e008      	b.n	8008ee4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ed2:	f7f9 fc0b 	bl	80026ec <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d9ee      	bls.n	8008ec2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20005e04 	.word	0x20005e04

08008ef4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008f08:	4b24      	ldr	r3, [pc, #144]	; (8008f9c <SD_write+0xa8>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008f0e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008f12:	f7ff ff33 	bl	8008d7c <SD_CheckStatusWithTimeout>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da01      	bge.n	8008f20 <SD_write+0x2c>
  {
    return res;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	e038      	b.n	8008f92 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	68b8      	ldr	r0, [r7, #8]
 8008f26:	f7ff fea3 	bl	8008c70 <BSP_SD_WriteBlocks_DMA>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d12f      	bne.n	8008f90 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008f30:	f7f9 fbdc 	bl	80026ec <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008f36:	bf00      	nop
 8008f38:	4b18      	ldr	r3, [pc, #96]	; (8008f9c <SD_write+0xa8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d108      	bne.n	8008f52 <SD_write+0x5e>
 8008f40:	f7f9 fbd4 	bl	80026ec <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d9f2      	bls.n	8008f38 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008f52:	4b12      	ldr	r3, [pc, #72]	; (8008f9c <SD_write+0xa8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	75fb      	strb	r3, [r7, #23]
 8008f5e:	e017      	b.n	8008f90 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008f60:	4b0e      	ldr	r3, [pc, #56]	; (8008f9c <SD_write+0xa8>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008f66:	f7f9 fbc1 	bl	80026ec <HAL_GetTick>
 8008f6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008f6c:	e007      	b.n	8008f7e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f6e:	f7ff fe99 	bl	8008ca4 <BSP_SD_GetCardState>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d102      	bne.n	8008f7e <SD_write+0x8a>
          {
            res = RES_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	75fb      	strb	r3, [r7, #23]
            break;
 8008f7c:	e008      	b.n	8008f90 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008f7e:	f7f9 fbb5 	bl	80026ec <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d9ee      	bls.n	8008f6e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20005e00 	.word	0x20005e00

08008fa0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	; 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	603a      	str	r2, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
 8008fac:	460b      	mov	r3, r1
 8008fae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008fb6:	4b25      	ldr	r3, [pc, #148]	; (800904c <SD_ioctl+0xac>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <SD_ioctl+0x28>
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e03c      	b.n	8009042 <SD_ioctl+0xa2>

  switch (cmd)
 8008fc8:	79bb      	ldrb	r3, [r7, #6]
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d834      	bhi.n	8009038 <SD_ioctl+0x98>
 8008fce:	a201      	add	r2, pc, #4	; (adr r2, 8008fd4 <SD_ioctl+0x34>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008fe5 	.word	0x08008fe5
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08009005 	.word	0x08009005
 8008fe0:	0800901f 	.word	0x0800901f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008fea:	e028      	b.n	800903e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008fec:	f107 030c 	add.w	r3, r7, #12
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff fe67 	bl	8008cc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009002:	e01c      	b.n	800903e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009004:	f107 030c 	add.w	r3, r7, #12
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff fe5b 	bl	8008cc4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	b29a      	uxth	r2, r3
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800901c:	e00f      	b.n	800903e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800901e:	f107 030c 	add.w	r3, r7, #12
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fe4e 	bl	8008cc4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	0a5a      	lsrs	r2, r3, #9
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009036:	e002      	b.n	800903e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009038:	2304      	movs	r3, #4
 800903a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800903e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009042:	4618      	mov	r0, r3
 8009044:	3730      	adds	r7, #48	; 0x30
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000009 	.word	0x20000009

08009050 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009050:	b480      	push	{r7}
 8009052:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009054:	4b03      	ldr	r3, [pc, #12]	; (8009064 <BSP_SD_WriteCpltCallback+0x14>)
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]
}
 800905a:	bf00      	nop
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20005e00 	.word	0x20005e00

08009068 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009068:	b480      	push	{r7}
 800906a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800906c:	4b03      	ldr	r3, [pc, #12]	; (800907c <BSP_SD_ReadCpltCallback+0x14>)
 800906e:	2201      	movs	r2, #1
 8009070:	601a      	str	r2, [r3, #0]
}
 8009072:	bf00      	nop
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	20005e04 	.word	0x20005e04

08009080 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <disk_status+0x30>)
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	79fa      	ldrb	r2, [r7, #7]
 8009098:	4905      	ldr	r1, [pc, #20]	; (80090b0 <disk_status+0x30>)
 800909a:	440a      	add	r2, r1
 800909c:	7a12      	ldrb	r2, [r2, #8]
 800909e:	4610      	mov	r0, r2
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	20005e30 	.word	0x20005e30

080090b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <disk_initialize+0x48>)
 80090c6:	5cd3      	ldrb	r3, [r2, r3]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d111      	bne.n	80090f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	4a0b      	ldr	r2, [pc, #44]	; (80090fc <disk_initialize+0x48>)
 80090d0:	2101      	movs	r1, #1
 80090d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	4a09      	ldr	r2, [pc, #36]	; (80090fc <disk_initialize+0x48>)
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	79fa      	ldrb	r2, [r7, #7]
 80090e2:	4906      	ldr	r1, [pc, #24]	; (80090fc <disk_initialize+0x48>)
 80090e4:	440a      	add	r2, r1
 80090e6:	7a12      	ldrb	r2, [r2, #8]
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20005e30 	.word	0x20005e30

08009100 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009100:	b590      	push	{r4, r7, lr}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4603      	mov	r3, r0
 800910e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009110:	7bfb      	ldrb	r3, [r7, #15]
 8009112:	4a0a      	ldr	r2, [pc, #40]	; (800913c <disk_read+0x3c>)
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	689c      	ldr	r4, [r3, #8]
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	4a07      	ldr	r2, [pc, #28]	; (800913c <disk_read+0x3c>)
 8009120:	4413      	add	r3, r2
 8009122:	7a18      	ldrb	r0, [r3, #8]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	47a0      	blx	r4
 800912c:	4603      	mov	r3, r0
 800912e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
}
 8009132:	4618      	mov	r0, r3
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	bd90      	pop	{r4, r7, pc}
 800913a:	bf00      	nop
 800913c:	20005e30 	.word	0x20005e30

08009140 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009140:	b590      	push	{r4, r7, lr}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4a0a      	ldr	r2, [pc, #40]	; (800917c <disk_write+0x3c>)
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	68dc      	ldr	r4, [r3, #12]
 800915c:	7bfb      	ldrb	r3, [r7, #15]
 800915e:	4a07      	ldr	r2, [pc, #28]	; (800917c <disk_write+0x3c>)
 8009160:	4413      	add	r3, r2
 8009162:	7a18      	ldrb	r0, [r3, #8]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	47a0      	blx	r4
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009170:	7dfb      	ldrb	r3, [r7, #23]
}
 8009172:	4618      	mov	r0, r3
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd90      	pop	{r4, r7, pc}
 800917a:	bf00      	nop
 800917c:	20005e30 	.word	0x20005e30

08009180 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	603a      	str	r2, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
 800918c:	460b      	mov	r3, r1
 800918e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	4a09      	ldr	r2, [pc, #36]	; (80091b8 <disk_ioctl+0x38>)
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	79fa      	ldrb	r2, [r7, #7]
 800919e:	4906      	ldr	r1, [pc, #24]	; (80091b8 <disk_ioctl+0x38>)
 80091a0:	440a      	add	r2, r1
 80091a2:	7a10      	ldrb	r0, [r2, #8]
 80091a4:	79b9      	ldrb	r1, [r7, #6]
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	4798      	blx	r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20005e30 	.word	0x20005e30

080091bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3301      	adds	r3, #1
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80091cc:	89fb      	ldrh	r3, [r7, #14]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	b21a      	sxth	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	b21b      	sxth	r3, r3
 80091d8:	4313      	orrs	r3, r2
 80091da:	b21b      	sxth	r3, r3
 80091dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80091de:	89fb      	ldrh	r3, [r7, #14]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3303      	adds	r3, #3
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	3202      	adds	r2, #2
 8009204:	7812      	ldrb	r2, [r2, #0]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	3201      	adds	r2, #1
 8009212:	7812      	ldrb	r2, [r2, #0]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	021b      	lsls	r3, r3, #8
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	7812      	ldrb	r2, [r2, #0]
 8009220:	4313      	orrs	r3, r2
 8009222:	60fb      	str	r3, [r7, #12]
	return rv;
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009232:	b480      	push	{r7}
 8009234:	b083      	sub	sp, #12
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	887a      	ldrh	r2, [r7, #2]
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	887b      	ldrh	r3, [r7, #2]
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	887a      	ldrh	r2, [r7, #2]
 8009258:	b2d2      	uxtb	r2, r2
 800925a:	701a      	strb	r2, [r3, #0]
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	b2d2      	uxtb	r2, r2
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	607a      	str	r2, [r7, #4]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	b2d2      	uxtb	r2, r2
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	0a1b      	lsrs	r3, r3, #8
 8009294:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	0a1b      	lsrs	r3, r3, #8
 80092a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	607a      	str	r2, [r7, #4]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	b2d2      	uxtb	r2, r2
 80092b2:	701a      	strb	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00d      	beq.n	80092f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	1c53      	adds	r3, r2, #1
 80092de:	613b      	str	r3, [r7, #16]
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	1c59      	adds	r1, r3, #1
 80092e4:	6179      	str	r1, [r7, #20]
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	607b      	str	r3, [r7, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f1      	bne.n	80092da <mem_cpy+0x1a>
	}
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009302:	b480      	push	{r7}
 8009304:	b087      	sub	sp, #28
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	617a      	str	r2, [r7, #20]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	3b01      	subs	r3, #1
 8009322:	607b      	str	r3, [r7, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1f3      	bne.n	8009312 <mem_set+0x10>
}
 800932a:	bf00      	nop
 800932c:	bf00      	nop
 800932e:	371c      	adds	r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009338:	b480      	push	{r7}
 800933a:	b089      	sub	sp, #36	; 0x24
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	61fb      	str	r3, [r7, #28]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	61fa      	str	r2, [r7, #28]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	4619      	mov	r1, r3
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	61ba      	str	r2, [r7, #24]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	1acb      	subs	r3, r1, r3
 8009364:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3b01      	subs	r3, #1
 800936a:	607b      	str	r3, [r7, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <mem_cmp+0x40>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0eb      	beq.n	8009350 <mem_cmp+0x18>

	return r;
 8009378:	697b      	ldr	r3, [r7, #20]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3724      	adds	r7, #36	; 0x24
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009386:	b480      	push	{r7}
 8009388:	b083      	sub	sp, #12
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009390:	e002      	b.n	8009398 <chk_chr+0x12>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3301      	adds	r3, #1
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <chk_chr+0x26>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d1f2      	bne.n	8009392 <chk_chr+0xc>
	return *str;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	781b      	ldrb	r3, [r3, #0]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	e029      	b.n	8009424 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80093d0:	4a27      	ldr	r2, [pc, #156]	; (8009470 <chk_lock+0xb4>)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	4413      	add	r3, r2
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01d      	beq.n	800941a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80093de:	4a24      	ldr	r2, [pc, #144]	; (8009470 <chk_lock+0xb4>)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	011b      	lsls	r3, r3, #4
 80093e4:	4413      	add	r3, r2
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d116      	bne.n	800941e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80093f0:	4a1f      	ldr	r2, [pc, #124]	; (8009470 <chk_lock+0xb4>)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009400:	429a      	cmp	r2, r3
 8009402:	d10c      	bne.n	800941e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009404:	4a1a      	ldr	r2, [pc, #104]	; (8009470 <chk_lock+0xb4>)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	4413      	add	r3, r2
 800940c:	3308      	adds	r3, #8
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009414:	429a      	cmp	r2, r3
 8009416:	d102      	bne.n	800941e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009418:	e007      	b.n	800942a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800941a:	2301      	movs	r3, #1
 800941c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3301      	adds	r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d9d2      	bls.n	80093d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d109      	bne.n	8009444 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d102      	bne.n	800943c <chk_lock+0x80>
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d101      	bne.n	8009440 <chk_lock+0x84>
 800943c:	2300      	movs	r3, #0
 800943e:	e010      	b.n	8009462 <chk_lock+0xa6>
 8009440:	2312      	movs	r3, #18
 8009442:	e00e      	b.n	8009462 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d108      	bne.n	800945c <chk_lock+0xa0>
 800944a:	4a09      	ldr	r2, [pc, #36]	; (8009470 <chk_lock+0xb4>)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	011b      	lsls	r3, r3, #4
 8009450:	4413      	add	r3, r2
 8009452:	330c      	adds	r3, #12
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800945a:	d101      	bne.n	8009460 <chk_lock+0xa4>
 800945c:	2310      	movs	r3, #16
 800945e:	e000      	b.n	8009462 <chk_lock+0xa6>
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20005e10 	.word	0x20005e10

08009474 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800947a:	2300      	movs	r3, #0
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	e002      	b.n	8009486 <enq_lock+0x12>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	3301      	adds	r3, #1
 8009484:	607b      	str	r3, [r7, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d806      	bhi.n	800949a <enq_lock+0x26>
 800948c:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <enq_lock+0x40>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	4413      	add	r3, r2
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1f2      	bne.n	8009480 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b02      	cmp	r3, #2
 800949e:	bf14      	ite	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	2300      	moveq	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20005e10 	.word	0x20005e10

080094b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
 80094c6:	e01f      	b.n	8009508 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80094c8:	4a41      	ldr	r2, [pc, #260]	; (80095d0 <inc_lock+0x118>)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	4413      	add	r3, r2
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d113      	bne.n	8009502 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80094da:	4a3d      	ldr	r2, [pc, #244]	; (80095d0 <inc_lock+0x118>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	4413      	add	r3, r2
 80094e2:	3304      	adds	r3, #4
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d109      	bne.n	8009502 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80094ee:	4a38      	ldr	r2, [pc, #224]	; (80095d0 <inc_lock+0x118>)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	4413      	add	r3, r2
 80094f6:	3308      	adds	r3, #8
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80094fe:	429a      	cmp	r2, r3
 8009500:	d006      	beq.n	8009510 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d9dc      	bls.n	80094c8 <inc_lock+0x10>
 800950e:	e000      	b.n	8009512 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009510:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b02      	cmp	r3, #2
 8009516:	d132      	bne.n	800957e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
 800951c:	e002      	b.n	8009524 <inc_lock+0x6c>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d806      	bhi.n	8009538 <inc_lock+0x80>
 800952a:	4a29      	ldr	r2, [pc, #164]	; (80095d0 <inc_lock+0x118>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	4413      	add	r3, r2
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1f2      	bne.n	800951e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d101      	bne.n	8009542 <inc_lock+0x8a>
 800953e:	2300      	movs	r3, #0
 8009540:	e040      	b.n	80095c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	4922      	ldr	r1, [pc, #136]	; (80095d0 <inc_lock+0x118>)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	011b      	lsls	r3, r3, #4
 800954c:	440b      	add	r3, r1
 800954e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	491e      	ldr	r1, [pc, #120]	; (80095d0 <inc_lock+0x118>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	440b      	add	r3, r1
 800955c:	3304      	adds	r3, #4
 800955e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	695a      	ldr	r2, [r3, #20]
 8009564:	491a      	ldr	r1, [pc, #104]	; (80095d0 <inc_lock+0x118>)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	440b      	add	r3, r1
 800956c:	3308      	adds	r3, #8
 800956e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009570:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <inc_lock+0x118>)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	011b      	lsls	r3, r3, #4
 8009576:	4413      	add	r3, r2
 8009578:	330c      	adds	r3, #12
 800957a:	2200      	movs	r2, #0
 800957c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d009      	beq.n	8009598 <inc_lock+0xe0>
 8009584:	4a12      	ldr	r2, [pc, #72]	; (80095d0 <inc_lock+0x118>)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	4413      	add	r3, r2
 800958c:	330c      	adds	r3, #12
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <inc_lock+0xe0>
 8009594:	2300      	movs	r3, #0
 8009596:	e015      	b.n	80095c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d108      	bne.n	80095b0 <inc_lock+0xf8>
 800959e:	4a0c      	ldr	r2, [pc, #48]	; (80095d0 <inc_lock+0x118>)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	4413      	add	r3, r2
 80095a6:	330c      	adds	r3, #12
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	e001      	b.n	80095b4 <inc_lock+0xfc>
 80095b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095b4:	4906      	ldr	r1, [pc, #24]	; (80095d0 <inc_lock+0x118>)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	440b      	add	r3, r1
 80095bc:	330c      	adds	r3, #12
 80095be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20005e10 	.word	0x20005e10

080095d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	3b01      	subs	r3, #1
 80095e0:	607b      	str	r3, [r7, #4]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d825      	bhi.n	8009634 <dec_lock+0x60>
		n = Files[i].ctr;
 80095e8:	4a17      	ldr	r2, [pc, #92]	; (8009648 <dec_lock+0x74>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	4413      	add	r3, r2
 80095f0:	330c      	adds	r3, #12
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80095f6:	89fb      	ldrh	r3, [r7, #14]
 80095f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095fc:	d101      	bne.n	8009602 <dec_lock+0x2e>
 80095fe:	2300      	movs	r3, #0
 8009600:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009602:	89fb      	ldrh	r3, [r7, #14]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <dec_lock+0x3a>
 8009608:	89fb      	ldrh	r3, [r7, #14]
 800960a:	3b01      	subs	r3, #1
 800960c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800960e:	4a0e      	ldr	r2, [pc, #56]	; (8009648 <dec_lock+0x74>)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	4413      	add	r3, r2
 8009616:	330c      	adds	r3, #12
 8009618:	89fa      	ldrh	r2, [r7, #14]
 800961a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800961c:	89fb      	ldrh	r3, [r7, #14]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d105      	bne.n	800962e <dec_lock+0x5a>
 8009622:	4a09      	ldr	r2, [pc, #36]	; (8009648 <dec_lock+0x74>)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	4413      	add	r3, r2
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	737b      	strb	r3, [r7, #13]
 8009632:	e001      	b.n	8009638 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009634:	2302      	movs	r3, #2
 8009636:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009638:	7b7b      	ldrb	r3, [r7, #13]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20005e10 	.word	0x20005e10

0800964c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	e010      	b.n	800967c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800965a:	4a0d      	ldr	r2, [pc, #52]	; (8009690 <clear_lock+0x44>)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	4413      	add	r3, r2
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d105      	bne.n	8009676 <clear_lock+0x2a>
 800966a:	4a09      	ldr	r2, [pc, #36]	; (8009690 <clear_lock+0x44>)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	4413      	add	r3, r2
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3301      	adds	r3, #1
 800967a:	60fb      	str	r3, [r7, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d9eb      	bls.n	800965a <clear_lock+0xe>
	}
}
 8009682:	bf00      	nop
 8009684:	bf00      	nop
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr
 8009690:	20005e10 	.word	0x20005e10

08009694 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	78db      	ldrb	r3, [r3, #3]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d034      	beq.n	8009712 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	7858      	ldrb	r0, [r3, #1]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096b8:	2301      	movs	r3, #1
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	f7ff fd40 	bl	8009140 <disk_write>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	e022      	b.n	8009712 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	1ad2      	subs	r2, r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d217      	bcs.n	8009712 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	789b      	ldrb	r3, [r3, #2]
 80096e6:	613b      	str	r3, [r7, #16]
 80096e8:	e010      	b.n	800970c <sync_window+0x78>
					wsect += fs->fsize;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	7858      	ldrb	r0, [r3, #1]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096fe:	2301      	movs	r3, #1
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	f7ff fd1d 	bl	8009140 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	3b01      	subs	r3, #1
 800970a:	613b      	str	r3, [r7, #16]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d8eb      	bhi.n	80096ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d01b      	beq.n	800976c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ffad 	bl	8009694 <sync_window>
 800973a:	4603      	mov	r3, r0
 800973c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d113      	bne.n	800976c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	7858      	ldrb	r0, [r3, #1]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800974e:	2301      	movs	r3, #1
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	f7ff fcd5 	bl	8009100 <disk_read>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d004      	beq.n	8009766 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800975c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009760:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009762:	2301      	movs	r3, #1
 8009764:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f7ff ff87 	bl	8009694 <sync_window>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d158      	bne.n	8009842 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d148      	bne.n	800982a <sync_fs+0xb2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	791b      	ldrb	r3, [r3, #4]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d144      	bne.n	800982a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3330      	adds	r3, #48	; 0x30
 80097a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fda9 	bl	8009302 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	3330      	adds	r3, #48	; 0x30
 80097b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff fd38 	bl	8009232 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3330      	adds	r3, #48	; 0x30
 80097c6:	4921      	ldr	r1, [pc, #132]	; (800984c <sync_fs+0xd4>)
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7ff fd4d 	bl	8009268 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3330      	adds	r3, #48	; 0x30
 80097d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097d6:	491e      	ldr	r1, [pc, #120]	; (8009850 <sync_fs+0xd8>)
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fd45 	bl	8009268 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	3330      	adds	r3, #48	; 0x30
 80097e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7ff fd3b 	bl	8009268 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3330      	adds	r3, #48	; 0x30
 80097f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f7ff fd31 	bl	8009268 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7858      	ldrb	r0, [r3, #1]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981e:	2301      	movs	r3, #1
 8009820:	f7ff fc8e 	bl	8009140 <disk_write>
			fs->fsi_flag = 0;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	785b      	ldrb	r3, [r3, #1]
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff fca4 	bl	8009180 <disk_ioctl>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <sync_fs+0xca>
 800983e:	2301      	movs	r3, #1
 8009840:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	41615252 	.word	0x41615252
 8009850:	61417272 	.word	0x61417272

08009854 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	3b02      	subs	r3, #2
 8009862:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	695b      	ldr	r3, [r3, #20]
 8009868:	3b02      	subs	r3, #2
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d301      	bcc.n	8009874 <clust2sect+0x20>
 8009870:	2300      	movs	r3, #0
 8009872:	e008      	b.n	8009886 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	895b      	ldrh	r3, [r3, #10]
 8009878:	461a      	mov	r2, r3
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	fb03 f202 	mul.w	r2, r3, r2
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009884:	4413      	add	r3, r2
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b086      	sub	sp, #24
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d904      	bls.n	80098b2 <get_fat+0x20>
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80098b2:	2301      	movs	r3, #1
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	e08f      	b.n	80099d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d062      	beq.n	800998c <get_fat+0xfa>
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	dc7c      	bgt.n	80099c4 <get_fat+0x132>
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d002      	beq.n	80098d4 <get_fat+0x42>
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d042      	beq.n	8009958 <get_fat+0xc6>
 80098d2:	e077      	b.n	80099c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6a1a      	ldr	r2, [r3, #32]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	0a5b      	lsrs	r3, r3, #9
 80098ea:	4413      	add	r3, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	6938      	ldr	r0, [r7, #16]
 80098f0:	f7ff ff14 	bl	800971c <move_window>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d167      	bne.n	80099ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	60fa      	str	r2, [r7, #12]
 8009900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	4413      	add	r3, r2
 8009908:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800990c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	6a1a      	ldr	r2, [r3, #32]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	0a5b      	lsrs	r3, r3, #9
 8009916:	4413      	add	r3, r2
 8009918:	4619      	mov	r1, r3
 800991a:	6938      	ldr	r0, [r7, #16]
 800991c:	f7ff fefe 	bl	800971c <move_window>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d153      	bne.n	80099ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4413      	add	r3, r2
 8009930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	461a      	mov	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4313      	orrs	r3, r2
 800993c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <get_fat+0xbc>
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	091b      	lsrs	r3, r3, #4
 800994c:	e002      	b.n	8009954 <get_fat+0xc2>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009954:	617b      	str	r3, [r7, #20]
			break;
 8009956:	e03f      	b.n	80099d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	4413      	add	r3, r2
 8009962:	4619      	mov	r1, r3
 8009964:	6938      	ldr	r0, [r7, #16]
 8009966:	f7ff fed9 	bl	800971c <move_window>
 800996a:	4603      	mov	r3, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	d130      	bne.n	80099d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800997e:	4413      	add	r3, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff fc1b 	bl	80091bc <ld_word>
 8009986:	4603      	mov	r3, r0
 8009988:	617b      	str	r3, [r7, #20]
			break;
 800998a:	e025      	b.n	80099d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	6a1a      	ldr	r2, [r3, #32]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	09db      	lsrs	r3, r3, #7
 8009994:	4413      	add	r3, r2
 8009996:	4619      	mov	r1, r3
 8009998:	6938      	ldr	r0, [r7, #16]
 800999a:	f7ff febf 	bl	800971c <move_window>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d118      	bne.n	80099d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80099b2:	4413      	add	r3, r2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff fc19 	bl	80091ec <ld_dword>
 80099ba:	4603      	mov	r3, r0
 80099bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099c0:	617b      	str	r3, [r7, #20]
			break;
 80099c2:	e009      	b.n	80099d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80099c4:	2301      	movs	r3, #1
 80099c6:	617b      	str	r3, [r7, #20]
 80099c8:	e006      	b.n	80099d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099ca:	bf00      	nop
 80099cc:	e004      	b.n	80099d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099ce:	bf00      	nop
 80099d0:	e002      	b.n	80099d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80099d2:	bf00      	nop
 80099d4:	e000      	b.n	80099d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099d6:	bf00      	nop
		}
	}

	return val;
 80099d8:	697b      	ldr	r3, [r7, #20]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80099e2:	b590      	push	{r4, r7, lr}
 80099e4:	b089      	sub	sp, #36	; 0x24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80099ee:	2302      	movs	r3, #2
 80099f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	f240 80d2 	bls.w	8009b9e <put_fat+0x1bc>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	f080 80cc 	bcs.w	8009b9e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	2b03      	cmp	r3, #3
 8009a0c:	f000 8096 	beq.w	8009b3c <put_fat+0x15a>
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	f300 80cd 	bgt.w	8009bb0 <put_fat+0x1ce>
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d002      	beq.n	8009a20 <put_fat+0x3e>
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d06e      	beq.n	8009afc <put_fat+0x11a>
 8009a1e:	e0c7      	b.n	8009bb0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	61bb      	str	r3, [r7, #24]
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	085b      	lsrs	r3, r3, #1
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	0a5b      	lsrs	r3, r3, #9
 8009a36:	4413      	add	r3, r2
 8009a38:	4619      	mov	r1, r3
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff fe6e 	bl	800971c <move_window>
 8009a40:	4603      	mov	r3, r0
 8009a42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a44:	7ffb      	ldrb	r3, [r7, #31]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f040 80ab 	bne.w	8009ba2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	1c59      	adds	r1, r3, #1
 8009a56:	61b9      	str	r1, [r7, #24]
 8009a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5c:	4413      	add	r3, r2
 8009a5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00d      	beq.n	8009a86 <put_fat+0xa4>
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	b25b      	sxtb	r3, r3
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	b25a      	sxtb	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	b25b      	sxtb	r3, r3
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	b25b      	sxtb	r3, r3
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	e001      	b.n	8009a8a <put_fat+0xa8>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2201      	movs	r2, #1
 8009a92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1a      	ldr	r2, [r3, #32]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	0a5b      	lsrs	r3, r3, #9
 8009a9c:	4413      	add	r3, r2
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f7ff fe3b 	bl	800971c <move_window>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009aaa:	7ffb      	ldrb	r3, [r7, #31]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d17a      	bne.n	8009ba6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009abc:	4413      	add	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <put_fat+0xf0>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	091b      	lsrs	r3, r3, #4
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	e00e      	b.n	8009af0 <put_fat+0x10e>
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	b25b      	sxtb	r3, r3
 8009ad8:	f023 030f 	bic.w	r3, r3, #15
 8009adc:	b25a      	sxtb	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	0a1b      	lsrs	r3, r3, #8
 8009ae2:	b25b      	sxtb	r3, r3
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	b25b      	sxtb	r3, r3
 8009aea:	4313      	orrs	r3, r2
 8009aec:	b25b      	sxtb	r3, r3
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2201      	movs	r2, #1
 8009af8:	70da      	strb	r2, [r3, #3]
			break;
 8009afa:	e059      	b.n	8009bb0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a1a      	ldr	r2, [r3, #32]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	4413      	add	r3, r2
 8009b06:	4619      	mov	r1, r3
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f7ff fe07 	bl	800971c <move_window>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b12:	7ffb      	ldrb	r3, [r7, #31]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d148      	bne.n	8009baa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009b26:	4413      	add	r3, r2
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	b292      	uxth	r2, r2
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fb7f 	bl	8009232 <st_word>
			fs->wflag = 1;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	70da      	strb	r2, [r3, #3]
			break;
 8009b3a:	e039      	b.n	8009bb0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a1a      	ldr	r2, [r3, #32]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	09db      	lsrs	r3, r3, #7
 8009b44:	4413      	add	r3, r2
 8009b46:	4619      	mov	r1, r3
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff fde7 	bl	800971c <move_window>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b52:	7ffb      	ldrb	r3, [r7, #31]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d12a      	bne.n	8009bae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b6c:	4413      	add	r3, r2
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7ff fb3c 	bl	80091ec <ld_dword>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009b7a:	4323      	orrs	r3, r4
 8009b7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b8c:	4413      	add	r3, r2
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff fb69 	bl	8009268 <st_dword>
			fs->wflag = 1;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	70da      	strb	r2, [r3, #3]
			break;
 8009b9c:	e008      	b.n	8009bb0 <put_fat+0x1ce>
		}
	}
 8009b9e:	bf00      	nop
 8009ba0:	e006      	b.n	8009bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009ba2:	bf00      	nop
 8009ba4:	e004      	b.n	8009bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bae:	bf00      	nop
	return res;
 8009bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3724      	adds	r7, #36	; 0x24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd90      	pop	{r4, r7, pc}

08009bba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b088      	sub	sp, #32
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d904      	bls.n	8009be0 <remove_chain+0x26>
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	695b      	ldr	r3, [r3, #20]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d301      	bcc.n	8009be4 <remove_chain+0x2a>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e04b      	b.n	8009c7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	69b8      	ldr	r0, [r7, #24]
 8009bf2:	f7ff fef6 	bl	80099e2 <put_fat>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009bfa:	7ffb      	ldrb	r3, [r7, #31]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <remove_chain+0x4a>
 8009c00:	7ffb      	ldrb	r3, [r7, #31]
 8009c02:	e03b      	b.n	8009c7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7ff fe43 	bl	8009892 <get_fat>
 8009c0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d031      	beq.n	8009c78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <remove_chain+0x64>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e02e      	b.n	8009c7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c24:	d101      	bne.n	8009c2a <remove_chain+0x70>
 8009c26:	2301      	movs	r3, #1
 8009c28:	e028      	b.n	8009c7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	69b8      	ldr	r0, [r7, #24]
 8009c30:	f7ff fed7 	bl	80099e2 <put_fat>
 8009c34:	4603      	mov	r3, r0
 8009c36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c38:	7ffb      	ldrb	r3, [r7, #31]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <remove_chain+0x88>
 8009c3e:	7ffb      	ldrb	r3, [r7, #31]
 8009c40:	e01c      	b.n	8009c7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	691a      	ldr	r2, [r3, #16]
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	3b02      	subs	r3, #2
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d20b      	bcs.n	8009c68 <remove_chain+0xae>
			fs->free_clst++;
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	791b      	ldrb	r3, [r3, #4]
 8009c5e:	f043 0301 	orr.w	r3, r3, #1
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d3c6      	bcc.n	8009c04 <remove_chain+0x4a>
 8009c76:	e000      	b.n	8009c7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009c78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3720      	adds	r7, #32
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10d      	bne.n	8009cb6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <create_chain+0x2c>
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	695b      	ldr	r3, [r3, #20]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d31b      	bcc.n	8009ce8 <create_chain+0x64>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	61bb      	str	r3, [r7, #24]
 8009cb4:	e018      	b.n	8009ce8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff fdea 	bl	8009892 <get_fat>
 8009cbe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d801      	bhi.n	8009cca <create_chain+0x46>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e070      	b.n	8009dac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cd0:	d101      	bne.n	8009cd6 <create_chain+0x52>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	e06a      	b.n	8009dac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d201      	bcs.n	8009ce4 <create_chain+0x60>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	e063      	b.n	8009dac <create_chain+0x128>
		scl = clst;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	69fa      	ldr	r2, [r7, #28]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d307      	bcc.n	8009d0c <create_chain+0x88>
				ncl = 2;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d901      	bls.n	8009d0c <create_chain+0x88>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	e04f      	b.n	8009dac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009d0c:	69f9      	ldr	r1, [r7, #28]
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff fdbf 	bl	8009892 <get_fat>
 8009d14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00e      	beq.n	8009d3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d003      	beq.n	8009d2a <create_chain+0xa6>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d28:	d101      	bne.n	8009d2e <create_chain+0xaa>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	e03e      	b.n	8009dac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d1da      	bne.n	8009cec <create_chain+0x68>
 8009d36:	2300      	movs	r3, #0
 8009d38:	e038      	b.n	8009dac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009d3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d40:	69f9      	ldr	r1, [r7, #28]
 8009d42:	6938      	ldr	r0, [r7, #16]
 8009d44:	f7ff fe4d 	bl	80099e2 <put_fat>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d109      	bne.n	8009d66 <create_chain+0xe2>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d006      	beq.n	8009d66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d58:	69fa      	ldr	r2, [r7, #28]
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6938      	ldr	r0, [r7, #16]
 8009d5e:	f7ff fe40 	bl	80099e2 <put_fat>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d116      	bne.n	8009d9a <create_chain+0x116>
		fs->last_clst = ncl;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	691a      	ldr	r2, [r3, #16]
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	3b02      	subs	r3, #2
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d804      	bhi.n	8009d8a <create_chain+0x106>
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	1e5a      	subs	r2, r3, #1
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	f043 0301 	orr.w	r3, r3, #1
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	711a      	strb	r2, [r3, #4]
 8009d98:	e007      	b.n	8009daa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d102      	bne.n	8009da6 <create_chain+0x122>
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da4:	e000      	b.n	8009da8 <create_chain+0x124>
 8009da6:	2301      	movs	r3, #1
 8009da8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009daa:	69fb      	ldr	r3, [r7, #28]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3720      	adds	r7, #32
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	3304      	adds	r3, #4
 8009dca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	0a5b      	lsrs	r3, r3, #9
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	8952      	ldrh	r2, [r2, #10]
 8009dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	1d1a      	adds	r2, r3, #4
 8009dde:	613a      	str	r2, [r7, #16]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <clmt_clust+0x3a>
 8009dea:	2300      	movs	r3, #0
 8009dec:	e010      	b.n	8009e10 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d307      	bcc.n	8009e06 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	617b      	str	r3, [r7, #20]
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	3304      	adds	r3, #4
 8009e02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e04:	e7e9      	b.n	8009dda <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009e06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e32:	d204      	bcs.n	8009e3e <dir_sdi+0x22>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	f003 031f 	and.w	r3, r3, #31
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e063      	b.n	8009f0a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d106      	bne.n	8009e62 <dir_sdi+0x46>
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d902      	bls.n	8009e62 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10c      	bne.n	8009e82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	8912      	ldrh	r2, [r2, #8]
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d301      	bcc.n	8009e78 <dir_sdi+0x5c>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e048      	b.n	8009f0a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	61da      	str	r2, [r3, #28]
 8009e80:	e029      	b.n	8009ed6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	895b      	ldrh	r3, [r3, #10]
 8009e86:	025b      	lsls	r3, r3, #9
 8009e88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e8a:	e019      	b.n	8009ec0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6979      	ldr	r1, [r7, #20]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff fcfe 	bl	8009892 <get_fat>
 8009e96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e9e:	d101      	bne.n	8009ea4 <dir_sdi+0x88>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e032      	b.n	8009f0a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d904      	bls.n	8009eb4 <dir_sdi+0x98>
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d301      	bcc.n	8009eb8 <dir_sdi+0x9c>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e028      	b.n	8009f0a <dir_sdi+0xee>
			ofs -= csz;
 8009eb8:	683a      	ldr	r2, [r7, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d2e1      	bcs.n	8009e8c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009ec8:	6979      	ldr	r1, [r7, #20]
 8009eca:	6938      	ldr	r0, [r7, #16]
 8009ecc:	f7ff fcc2 	bl	8009854 <clust2sect>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	69db      	ldr	r3, [r3, #28]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d101      	bne.n	8009ee8 <dir_sdi+0xcc>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e010      	b.n	8009f0a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	69da      	ldr	r2, [r3, #28]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	0a5b      	lsrs	r3, r3, #9
 8009ef0:	441a      	add	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f02:	441a      	add	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3718      	adds	r7, #24
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b086      	sub	sp, #24
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	695b      	ldr	r3, [r3, #20]
 8009f26:	3320      	adds	r3, #32
 8009f28:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <dir_next+0x28>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f38:	d301      	bcc.n	8009f3e <dir_next+0x2c>
 8009f3a:	2304      	movs	r3, #4
 8009f3c:	e0aa      	b.n	800a094 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f040 8098 	bne.w	800a07a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	8912      	ldrh	r2, [r2, #8]
 8009f64:	4293      	cmp	r3, r2
 8009f66:	f0c0 8088 	bcc.w	800a07a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	61da      	str	r2, [r3, #28]
 8009f70:	2304      	movs	r3, #4
 8009f72:	e08f      	b.n	800a094 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	0a5b      	lsrs	r3, r3, #9
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	8952      	ldrh	r2, [r2, #10]
 8009f7c:	3a01      	subs	r2, #1
 8009f7e:	4013      	ands	r3, r2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d17a      	bne.n	800a07a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	f7ff fc80 	bl	8009892 <get_fat>
 8009f92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d801      	bhi.n	8009f9e <dir_next+0x8c>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e07a      	b.n	800a094 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa4:	d101      	bne.n	8009faa <dir_next+0x98>
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e074      	b.n	800a094 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d358      	bcc.n	800a066 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d104      	bne.n	8009fc4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	61da      	str	r2, [r3, #28]
 8009fc0:	2304      	movs	r3, #4
 8009fc2:	e067      	b.n	800a094 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4610      	mov	r0, r2
 8009fce:	f7ff fe59 	bl	8009c84 <create_chain>
 8009fd2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <dir_next+0xcc>
 8009fda:	2307      	movs	r3, #7
 8009fdc:	e05a      	b.n	800a094 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d101      	bne.n	8009fe8 <dir_next+0xd6>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e055      	b.n	800a094 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fee:	d101      	bne.n	8009ff4 <dir_next+0xe2>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	e04f      	b.n	800a094 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7ff fb4d 	bl	8009694 <sync_window>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <dir_next+0xf2>
 800a000:	2301      	movs	r3, #1
 800a002:	e047      	b.n	800a094 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3330      	adds	r3, #48	; 0x30
 800a008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff f977 	bl	8009302 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a014:	2300      	movs	r3, #0
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	6979      	ldr	r1, [r7, #20]
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7ff fc1a 	bl	8009854 <clust2sect>
 800a020:	4602      	mov	r2, r0
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	62da      	str	r2, [r3, #44]	; 0x2c
 800a026:	e012      	b.n	800a04e <dir_next+0x13c>
						fs->wflag = 1;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2201      	movs	r2, #1
 800a02c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	f7ff fb30 	bl	8009694 <sync_window>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <dir_next+0x12c>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e02a      	b.n	800a094 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	3301      	adds	r3, #1
 800a042:	613b      	str	r3, [r7, #16]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	62da      	str	r2, [r3, #44]	; 0x2c
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	895b      	ldrh	r3, [r3, #10]
 800a052:	461a      	mov	r2, r3
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	4293      	cmp	r3, r2
 800a058:	d3e6      	bcc.n	800a028 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a06c:	6979      	ldr	r1, [r7, #20]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff fbf0 	bl	8009854 <clust2sect>
 800a074:	4602      	mov	r2, r0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08c:	441a      	add	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff feb4 	bl	8009e1c <dir_sdi>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d12b      	bne.n	800a116 <dir_alloc+0x7a>
		n = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f7ff fb27 	bl	800971c <move_window>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d11d      	bne.n	800a114 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2be5      	cmp	r3, #229	; 0xe5
 800a0e0:	d004      	beq.n	800a0ec <dir_alloc+0x50>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d107      	bne.n	800a0fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d102      	bne.n	800a100 <dir_alloc+0x64>
 800a0fa:	e00c      	b.n	800a116 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a100:	2101      	movs	r1, #1
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff ff05 	bl	8009f12 <dir_next>
 800a108:	4603      	mov	r3, r0
 800a10a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a10c:	7dfb      	ldrb	r3, [r7, #23]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0d7      	beq.n	800a0c2 <dir_alloc+0x26>
 800a112:	e000      	b.n	800a116 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a114:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a116:	7dfb      	ldrb	r3, [r7, #23]
 800a118:	2b04      	cmp	r3, #4
 800a11a:	d101      	bne.n	800a120 <dir_alloc+0x84>
 800a11c:	2307      	movs	r3, #7
 800a11e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a120:	7dfb      	ldrb	r3, [r7, #23]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	331a      	adds	r3, #26
 800a138:	4618      	mov	r0, r3
 800a13a:	f7ff f83f 	bl	80091bc <ld_word>
 800a13e:	4603      	mov	r3, r0
 800a140:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d109      	bne.n	800a15e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	3314      	adds	r3, #20
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff f834 	bl	80091bc <ld_word>
 800a154:	4603      	mov	r3, r0
 800a156:	041b      	lsls	r3, r3, #16
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a15e:	68fb      	ldr	r3, [r7, #12]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	331a      	adds	r3, #26
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	b292      	uxth	r2, r2
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff f857 	bl	8009232 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d109      	bne.n	800a1a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f103 0214 	add.w	r2, r3, #20
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	0c1b      	lsrs	r3, r3, #16
 800a196:	b29b      	uxth	r3, r3
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f7ff f849 	bl	8009232 <st_word>
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fe2f 	bl	8009e1c <dir_sdi>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a1c2:	7dfb      	ldrb	r3, [r7, #23]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <dir_find+0x24>
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	e03e      	b.n	800a24a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	69db      	ldr	r3, [r3, #28]
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6938      	ldr	r0, [r7, #16]
 800a1d4:	f7ff faa2 	bl	800971c <move_window>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d12f      	bne.n	800a242 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <dir_find+0x4e>
 800a1f0:	2304      	movs	r3, #4
 800a1f2:	75fb      	strb	r3, [r7, #23]
 800a1f4:	e028      	b.n	800a248 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	330b      	adds	r3, #11
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a202:	b2da      	uxtb	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	330b      	adds	r3, #11
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <dir_find+0x86>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a18      	ldr	r0, [r3, #32]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3324      	adds	r3, #36	; 0x24
 800a220:	220b      	movs	r2, #11
 800a222:	4619      	mov	r1, r3
 800a224:	f7ff f888 	bl	8009338 <mem_cmp>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00b      	beq.n	800a246 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a22e:	2100      	movs	r1, #0
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fe6e 	bl	8009f12 <dir_next>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d0c5      	beq.n	800a1cc <dir_find+0x24>
 800a240:	e002      	b.n	800a248 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a242:	bf00      	nop
 800a244:	e000      	b.n	800a248 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a246:	bf00      	nop

	return res;
 800a248:	7dfb      	ldrb	r3, [r7, #23]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a260:	2101      	movs	r1, #1
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff ff1a 	bl	800a09c <dir_alloc>
 800a268:	4603      	mov	r3, r0
 800a26a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d11c      	bne.n	800a2ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	4619      	mov	r1, r3
 800a278:	68b8      	ldr	r0, [r7, #8]
 800a27a:	f7ff fa4f 	bl	800971c <move_window>
 800a27e:	4603      	mov	r3, r0
 800a280:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d111      	bne.n	800a2ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	2220      	movs	r2, #32
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff f836 	bl	8009302 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a18      	ldr	r0, [r3, #32]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3324      	adds	r3, #36	; 0x24
 800a29e:	220b      	movs	r2, #11
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	f7ff f80d 	bl	80092c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3324      	adds	r3, #36	; 0x24
 800a2cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a2ce:	220b      	movs	r2, #11
 800a2d0:	2120      	movs	r1, #32
 800a2d2:	68b8      	ldr	r0, [r7, #8]
 800a2d4:	f7ff f815 	bl	8009302 <mem_set>
	si = i = 0; ni = 8;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	61fb      	str	r3, [r7, #28]
 800a2e0:	2308      	movs	r3, #8
 800a2e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	61fa      	str	r2, [r7, #28]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2f2:	7efb      	ldrb	r3, [r7, #27]
 800a2f4:	2b20      	cmp	r3, #32
 800a2f6:	d94e      	bls.n	800a396 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a2f8:	7efb      	ldrb	r3, [r7, #27]
 800a2fa:	2b2f      	cmp	r3, #47	; 0x2f
 800a2fc:	d006      	beq.n	800a30c <create_name+0x54>
 800a2fe:	7efb      	ldrb	r3, [r7, #27]
 800a300:	2b5c      	cmp	r3, #92	; 0x5c
 800a302:	d110      	bne.n	800a326 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a304:	e002      	b.n	800a30c <create_name+0x54>
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	3301      	adds	r3, #1
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	4413      	add	r3, r2
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b2f      	cmp	r3, #47	; 0x2f
 800a316:	d0f6      	beq.n	800a306 <create_name+0x4e>
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b5c      	cmp	r3, #92	; 0x5c
 800a322:	d0f0      	beq.n	800a306 <create_name+0x4e>
			break;
 800a324:	e038      	b.n	800a398 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a326:	7efb      	ldrb	r3, [r7, #27]
 800a328:	2b2e      	cmp	r3, #46	; 0x2e
 800a32a:	d003      	beq.n	800a334 <create_name+0x7c>
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	429a      	cmp	r2, r3
 800a332:	d30c      	bcc.n	800a34e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2b0b      	cmp	r3, #11
 800a338:	d002      	beq.n	800a340 <create_name+0x88>
 800a33a:	7efb      	ldrb	r3, [r7, #27]
 800a33c:	2b2e      	cmp	r3, #46	; 0x2e
 800a33e:	d001      	beq.n	800a344 <create_name+0x8c>
 800a340:	2306      	movs	r3, #6
 800a342:	e044      	b.n	800a3ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a344:	2308      	movs	r3, #8
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	230b      	movs	r3, #11
 800a34a:	617b      	str	r3, [r7, #20]
			continue;
 800a34c:	e022      	b.n	800a394 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a34e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a352:	2b00      	cmp	r3, #0
 800a354:	da04      	bge.n	800a360 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a356:	7efb      	ldrb	r3, [r7, #27]
 800a358:	3b80      	subs	r3, #128	; 0x80
 800a35a:	4a1f      	ldr	r2, [pc, #124]	; (800a3d8 <create_name+0x120>)
 800a35c:	5cd3      	ldrb	r3, [r2, r3]
 800a35e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a360:	7efb      	ldrb	r3, [r7, #27]
 800a362:	4619      	mov	r1, r3
 800a364:	481d      	ldr	r0, [pc, #116]	; (800a3dc <create_name+0x124>)
 800a366:	f7ff f80e 	bl	8009386 <chk_chr>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <create_name+0xbc>
 800a370:	2306      	movs	r3, #6
 800a372:	e02c      	b.n	800a3ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a374:	7efb      	ldrb	r3, [r7, #27]
 800a376:	2b60      	cmp	r3, #96	; 0x60
 800a378:	d905      	bls.n	800a386 <create_name+0xce>
 800a37a:	7efb      	ldrb	r3, [r7, #27]
 800a37c:	2b7a      	cmp	r3, #122	; 0x7a
 800a37e:	d802      	bhi.n	800a386 <create_name+0xce>
 800a380:	7efb      	ldrb	r3, [r7, #27]
 800a382:	3b20      	subs	r3, #32
 800a384:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	613a      	str	r2, [r7, #16]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	4413      	add	r3, r2
 800a390:	7efa      	ldrb	r2, [r7, #27]
 800a392:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a394:	e7a6      	b.n	800a2e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a396:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	441a      	add	r2, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <create_name+0xf4>
 800a3a8:	2306      	movs	r3, #6
 800a3aa:	e010      	b.n	800a3ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2be5      	cmp	r3, #229	; 0xe5
 800a3b2:	d102      	bne.n	800a3ba <create_name+0x102>
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2205      	movs	r2, #5
 800a3b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a3ba:	7efb      	ldrb	r3, [r7, #27]
 800a3bc:	2b20      	cmp	r3, #32
 800a3be:	d801      	bhi.n	800a3c4 <create_name+0x10c>
 800a3c0:	2204      	movs	r2, #4
 800a3c2:	e000      	b.n	800a3c6 <create_name+0x10e>
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	330b      	adds	r3, #11
 800a3ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a3cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3720      	adds	r7, #32
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	08012fe4 	.word	0x08012fe4
 800a3dc:	08012ee0 	.word	0x08012ee0

0800a3e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3f4:	e002      	b.n	800a3fc <follow_path+0x1c>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	603b      	str	r3, [r7, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b2f      	cmp	r3, #47	; 0x2f
 800a402:	d0f8      	beq.n	800a3f6 <follow_path+0x16>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b5c      	cmp	r3, #92	; 0x5c
 800a40a:	d0f4      	beq.n	800a3f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2200      	movs	r2, #0
 800a410:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b1f      	cmp	r3, #31
 800a418:	d80a      	bhi.n	800a430 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2280      	movs	r2, #128	; 0x80
 800a41e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a422:	2100      	movs	r1, #0
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff fcf9 	bl	8009e1c <dir_sdi>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]
 800a42e:	e043      	b.n	800a4b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a430:	463b      	mov	r3, r7
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff ff3f 	bl	800a2b8 <create_name>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d134      	bne.n	800a4ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff feaf 	bl	800a1a8 <dir_find>
 800a44a:	4603      	mov	r3, r0
 800a44c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a454:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00a      	beq.n	800a472 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	2b04      	cmp	r3, #4
 800a460:	d127      	bne.n	800a4b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d122      	bne.n	800a4b2 <follow_path+0xd2>
 800a46c:	2305      	movs	r3, #5
 800a46e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a470:	e01f      	b.n	800a4b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a472:	7afb      	ldrb	r3, [r7, #11]
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d11c      	bne.n	800a4b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	799b      	ldrb	r3, [r3, #6]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a488:	2305      	movs	r3, #5
 800a48a:	75fb      	strb	r3, [r7, #23]
 800a48c:	e014      	b.n	800a4b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a49c:	4413      	add	r3, r2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fe42 	bl	800a12a <ld_clust>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4ac:	e7c0      	b.n	800a430 <follow_path+0x50>
			if (res != FR_OK) break;
 800a4ae:	bf00      	nop
 800a4b0:	e002      	b.n	800a4b8 <follow_path+0xd8>
				break;
 800a4b2:	bf00      	nop
 800a4b4:	e000      	b.n	800a4b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4b6:	bf00      	nop
			}
		}
	}

	return res;
 800a4b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a4c2:	b480      	push	{r7}
 800a4c4:	b087      	sub	sp, #28
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d031      	beq.n	800a53c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	e002      	b.n	800a4e6 <get_ldnumber+0x24>
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	617b      	str	r3, [r7, #20]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d903      	bls.n	800a4f6 <get_ldnumber+0x34>
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b3a      	cmp	r3, #58	; 0x3a
 800a4f4:	d1f4      	bne.n	800a4e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b3a      	cmp	r3, #58	; 0x3a
 800a4fc:	d11c      	bne.n	800a538 <get_ldnumber+0x76>
			tp = *path;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	60fa      	str	r2, [r7, #12]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	3b30      	subs	r3, #48	; 0x30
 800a50e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b09      	cmp	r3, #9
 800a514:	d80e      	bhi.n	800a534 <get_ldnumber+0x72>
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d10a      	bne.n	800a534 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d107      	bne.n	800a534 <get_ldnumber+0x72>
					vol = (int)i;
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	3301      	adds	r3, #1
 800a52c:	617b      	str	r3, [r7, #20]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	e002      	b.n	800a53e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a538:	2300      	movs	r3, #0
 800a53a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a53c:	693b      	ldr	r3, [r7, #16]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	371c      	adds	r7, #28
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr
	...

0800a54c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	70da      	strb	r2, [r3, #3]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a562:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7ff f8d8 	bl	800971c <move_window>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <check_fs+0x2a>
 800a572:	2304      	movs	r3, #4
 800a574:	e038      	b.n	800a5e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3330      	adds	r3, #48	; 0x30
 800a57a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fe1c 	bl	80091bc <ld_word>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d001      	beq.n	800a594 <check_fs+0x48>
 800a590:	2303      	movs	r3, #3
 800a592:	e029      	b.n	800a5e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a59a:	2be9      	cmp	r3, #233	; 0xe9
 800a59c:	d009      	beq.n	800a5b2 <check_fs+0x66>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5a4:	2beb      	cmp	r3, #235	; 0xeb
 800a5a6:	d11e      	bne.n	800a5e6 <check_fs+0x9a>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a5ae:	2b90      	cmp	r3, #144	; 0x90
 800a5b0:	d119      	bne.n	800a5e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3330      	adds	r3, #48	; 0x30
 800a5b6:	3336      	adds	r3, #54	; 0x36
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fe17 	bl	80091ec <ld_dword>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5c4:	4a0a      	ldr	r2, [pc, #40]	; (800a5f0 <check_fs+0xa4>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d101      	bne.n	800a5ce <check_fs+0x82>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e00c      	b.n	800a5e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3330      	adds	r3, #48	; 0x30
 800a5d2:	3352      	adds	r3, #82	; 0x52
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7fe fe09 	bl	80091ec <ld_dword>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <check_fs+0xa8>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d101      	bne.n	800a5e6 <check_fs+0x9a>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e000      	b.n	800a5e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a5e6:	2302      	movs	r3, #2
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	00544146 	.word	0x00544146
 800a5f4:	33544146 	.word	0x33544146

0800a5f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b096      	sub	sp, #88	; 0x58
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	4613      	mov	r3, r2
 800a604:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2200      	movs	r2, #0
 800a60a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f7ff ff58 	bl	800a4c2 <get_ldnumber>
 800a612:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a616:	2b00      	cmp	r3, #0
 800a618:	da01      	bge.n	800a61e <find_volume+0x26>
 800a61a:	230b      	movs	r3, #11
 800a61c:	e22d      	b.n	800aa7a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a61e:	4aa1      	ldr	r2, [pc, #644]	; (800a8a4 <find_volume+0x2ac>)
 800a620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a626:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <find_volume+0x3a>
 800a62e:	230c      	movs	r3, #12
 800a630:	e223      	b.n	800aa7a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a636:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	f023 0301 	bic.w	r3, r3, #1
 800a63e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01a      	beq.n	800a67e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	785b      	ldrb	r3, [r3, #1]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe fd17 	bl	8009080 <disk_status>
 800a652:	4603      	mov	r3, r0
 800a654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10c      	bne.n	800a67e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d007      	beq.n	800a67a <find_volume+0x82>
 800a66a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a66e:	f003 0304 	and.w	r3, r3, #4
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a676:	230a      	movs	r3, #10
 800a678:	e1ff      	b.n	800aa7a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a67a:	2300      	movs	r3, #0
 800a67c:	e1fd      	b.n	800aa7a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a680:	2200      	movs	r2, #0
 800a682:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a686:	b2da      	uxtb	r2, r3
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe fd0f 	bl	80090b4 <disk_initialize>
 800a696:	4603      	mov	r3, r0
 800a698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a69c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e1e6      	b.n	800aa7a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a6ac:	79fb      	ldrb	r3, [r7, #7]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d007      	beq.n	800a6c2 <find_volume+0xca>
 800a6b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d001      	beq.n	800a6c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a6be:	230a      	movs	r3, #10
 800a6c0:	e1db      	b.n	800aa7a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ca:	f7ff ff3f 	bl	800a54c <check_fs>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d149      	bne.n	800a770 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6dc:	2300      	movs	r3, #0
 800a6de:	643b      	str	r3, [r7, #64]	; 0x40
 800a6e0:	e01e      	b.n	800a720 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ea:	011b      	lsls	r3, r3, #4
 800a6ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a6f0:	4413      	add	r3, r2
 800a6f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d006      	beq.n	800a70c <find_volume+0x114>
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	3308      	adds	r3, #8
 800a702:	4618      	mov	r0, r3
 800a704:	f7fe fd72 	bl	80091ec <ld_dword>
 800a708:	4602      	mov	r2, r0
 800a70a:	e000      	b.n	800a70e <find_volume+0x116>
 800a70c:	2200      	movs	r2, #0
 800a70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	3358      	adds	r3, #88	; 0x58
 800a714:	443b      	add	r3, r7
 800a716:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71c:	3301      	adds	r3, #1
 800a71e:	643b      	str	r3, [r7, #64]	; 0x40
 800a720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a722:	2b03      	cmp	r3, #3
 800a724:	d9dd      	bls.n	800a6e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a726:	2300      	movs	r3, #0
 800a728:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <find_volume+0x13e>
 800a730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a732:	3b01      	subs	r3, #1
 800a734:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	3358      	adds	r3, #88	; 0x58
 800a73c:	443b      	add	r3, r7
 800a73e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a742:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a746:	2b00      	cmp	r3, #0
 800a748:	d005      	beq.n	800a756 <find_volume+0x15e>
 800a74a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a74e:	f7ff fefd 	bl	800a54c <check_fs>
 800a752:	4603      	mov	r3, r0
 800a754:	e000      	b.n	800a758 <find_volume+0x160>
 800a756:	2303      	movs	r3, #3
 800a758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a75c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a760:	2b01      	cmp	r3, #1
 800a762:	d905      	bls.n	800a770 <find_volume+0x178>
 800a764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a766:	3301      	adds	r3, #1
 800a768:	643b      	str	r3, [r7, #64]	; 0x40
 800a76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d9e2      	bls.n	800a736 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a774:	2b04      	cmp	r3, #4
 800a776:	d101      	bne.n	800a77c <find_volume+0x184>
 800a778:	2301      	movs	r3, #1
 800a77a:	e17e      	b.n	800aa7a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a77c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a780:	2b01      	cmp	r3, #1
 800a782:	d901      	bls.n	800a788 <find_volume+0x190>
 800a784:	230d      	movs	r3, #13
 800a786:	e178      	b.n	800aa7a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	3330      	adds	r3, #48	; 0x30
 800a78c:	330b      	adds	r3, #11
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fd14 	bl	80091bc <ld_word>
 800a794:	4603      	mov	r3, r0
 800a796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79a:	d001      	beq.n	800a7a0 <find_volume+0x1a8>
 800a79c:	230d      	movs	r3, #13
 800a79e:	e16c      	b.n	800aa7a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	3330      	adds	r3, #48	; 0x30
 800a7a4:	3316      	adds	r3, #22
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fd08 	bl	80091bc <ld_word>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d106      	bne.n	800a7c4 <find_volume+0x1cc>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	3330      	adds	r3, #48	; 0x30
 800a7ba:	3324      	adds	r3, #36	; 0x24
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f7fe fd15 	bl	80091ec <ld_dword>
 800a7c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	789b      	ldrb	r3, [r3, #2]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d005      	beq.n	800a7e8 <find_volume+0x1f0>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	789b      	ldrb	r3, [r3, #2]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d001      	beq.n	800a7e8 <find_volume+0x1f0>
 800a7e4:	230d      	movs	r3, #13
 800a7e6:	e148      	b.n	800aa7a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	789b      	ldrb	r3, [r3, #2]
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f0:	fb02 f303 	mul.w	r3, r2, r3
 800a7f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	895b      	ldrh	r3, [r3, #10]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <find_volume+0x224>
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	895b      	ldrh	r3, [r3, #10]
 800a80e:	461a      	mov	r2, r3
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	895b      	ldrh	r3, [r3, #10]
 800a814:	3b01      	subs	r3, #1
 800a816:	4013      	ands	r3, r2
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <find_volume+0x228>
 800a81c:	230d      	movs	r3, #13
 800a81e:	e12c      	b.n	800aa7a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	3330      	adds	r3, #48	; 0x30
 800a824:	3311      	adds	r3, #17
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe fcc8 	bl	80091bc <ld_word>
 800a82c:	4603      	mov	r3, r0
 800a82e:	461a      	mov	r2, r3
 800a830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a832:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	891b      	ldrh	r3, [r3, #8]
 800a838:	f003 030f 	and.w	r3, r3, #15
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <find_volume+0x24e>
 800a842:	230d      	movs	r3, #13
 800a844:	e119      	b.n	800aa7a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	3330      	adds	r3, #48	; 0x30
 800a84a:	3313      	adds	r3, #19
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fe fcb5 	bl	80091bc <ld_word>
 800a852:	4603      	mov	r3, r0
 800a854:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <find_volume+0x272>
 800a85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85e:	3330      	adds	r3, #48	; 0x30
 800a860:	3320      	adds	r3, #32
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fcc2 	bl	80091ec <ld_dword>
 800a868:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86c:	3330      	adds	r3, #48	; 0x30
 800a86e:	330e      	adds	r3, #14
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe fca3 	bl	80091bc <ld_word>
 800a876:	4603      	mov	r3, r0
 800a878:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a87a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <find_volume+0x28c>
 800a880:	230d      	movs	r3, #13
 800a882:	e0fa      	b.n	800aa7a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a884:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a888:	4413      	add	r3, r2
 800a88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a88c:	8912      	ldrh	r2, [r2, #8]
 800a88e:	0912      	lsrs	r2, r2, #4
 800a890:	b292      	uxth	r2, r2
 800a892:	4413      	add	r3, r2
 800a894:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d204      	bcs.n	800a8a8 <find_volume+0x2b0>
 800a89e:	230d      	movs	r3, #13
 800a8a0:	e0eb      	b.n	800aa7a <find_volume+0x482>
 800a8a2:	bf00      	nop
 800a8a4:	20005e08 	.word	0x20005e08
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b0:	8952      	ldrh	r2, [r2, #10]
 800a8b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <find_volume+0x2ca>
 800a8be:	230d      	movs	r3, #13
 800a8c0:	e0db      	b.n	800aa7a <find_volume+0x482>
		fmt = FS_FAT32;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d802      	bhi.n	800a8d8 <find_volume+0x2e0>
 800a8d2:	2302      	movs	r3, #2
 800a8d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d802      	bhi.n	800a8e8 <find_volume+0x2f0>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	1c9a      	adds	r2, r3, #2
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8f4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fa:	441a      	add	r2, r3
 800a8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	441a      	add	r2, r3
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a90a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d11e      	bne.n	800a950 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a914:	3330      	adds	r3, #48	; 0x30
 800a916:	332a      	adds	r3, #42	; 0x2a
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fe fc4f 	bl	80091bc <ld_word>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <find_volume+0x330>
 800a924:	230d      	movs	r3, #13
 800a926:	e0a8      	b.n	800aa7a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	891b      	ldrh	r3, [r3, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d001      	beq.n	800a934 <find_volume+0x33c>
 800a930:	230d      	movs	r3, #13
 800a932:	e0a2      	b.n	800aa7a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a936:	3330      	adds	r3, #48	; 0x30
 800a938:	332c      	adds	r3, #44	; 0x2c
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe fc56 	bl	80091ec <ld_dword>
 800a940:	4602      	mov	r2, r0
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a944:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	647b      	str	r3, [r7, #68]	; 0x44
 800a94e:	e01f      	b.n	800a990 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	891b      	ldrh	r3, [r3, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <find_volume+0x364>
 800a958:	230d      	movs	r3, #13
 800a95a:	e08e      	b.n	800aa7a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	6a1a      	ldr	r2, [r3, #32]
 800a960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a962:	441a      	add	r2, r3
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d103      	bne.n	800a978 <find_volume+0x380>
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	695b      	ldr	r3, [r3, #20]
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	e00a      	b.n	800a98e <find_volume+0x396>
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	695a      	ldr	r2, [r3, #20]
 800a97c:	4613      	mov	r3, r2
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	4413      	add	r3, r2
 800a982:	085a      	lsrs	r2, r3, #1
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a98e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	699a      	ldr	r2, [r3, #24]
 800a994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a996:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a99a:	0a5b      	lsrs	r3, r3, #9
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d201      	bcs.n	800a9a4 <find_volume+0x3ac>
 800a9a0:	230d      	movs	r3, #13
 800a9a2:	e06a      	b.n	800aa7a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9aa:	611a      	str	r2, [r3, #16]
 800a9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ae:	691a      	ldr	r2, [r3, #16]
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	2280      	movs	r2, #128	; 0x80
 800a9b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d149      	bne.n	800aa56 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c4:	3330      	adds	r3, #48	; 0x30
 800a9c6:	3330      	adds	r3, #48	; 0x30
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7fe fbf7 	bl	80091bc <ld_word>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d140      	bne.n	800aa56 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9dc:	f7fe fe9e 	bl	800971c <move_window>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d137      	bne.n	800aa56 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	3330      	adds	r3, #48	; 0x30
 800a9f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fbe1 	bl	80091bc <ld_word>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d127      	bne.n	800aa56 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	3330      	adds	r3, #48	; 0x30
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fe fbee 	bl	80091ec <ld_dword>
 800aa10:	4603      	mov	r3, r0
 800aa12:	4a1c      	ldr	r2, [pc, #112]	; (800aa84 <find_volume+0x48c>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d11e      	bne.n	800aa56 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	3330      	adds	r3, #48	; 0x30
 800aa1c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fe fbe3 	bl	80091ec <ld_dword>
 800aa26:	4603      	mov	r3, r0
 800aa28:	4a17      	ldr	r2, [pc, #92]	; (800aa88 <find_volume+0x490>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d113      	bne.n	800aa56 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	3330      	adds	r3, #48	; 0x30
 800aa32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe fbd8 	bl	80091ec <ld_dword>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	3330      	adds	r3, #48	; 0x30
 800aa46:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fbce 	bl	80091ec <ld_dword>
 800aa50:	4602      	mov	r2, r0
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa5c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	; (800aa8c <find_volume+0x494>)
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	3301      	adds	r3, #1
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <find_volume+0x494>)
 800aa68:	801a      	strh	r2, [r3, #0]
 800aa6a:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <find_volume+0x494>)
 800aa6c:	881a      	ldrh	r2, [r3, #0]
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa72:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa74:	f7fe fdea 	bl	800964c <clear_lock>
#endif
	return FR_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3758      	adds	r7, #88	; 0x58
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	41615252 	.word	0x41615252
 800aa88:	61417272 	.word	0x61417272
 800aa8c:	20005e0c 	.word	0x20005e0c

0800aa90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa9a:	2309      	movs	r3, #9
 800aa9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d01c      	beq.n	800aade <validate+0x4e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d018      	beq.n	800aade <validate+0x4e>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d013      	beq.n	800aade <validate+0x4e>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	889a      	ldrh	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	88db      	ldrh	r3, [r3, #6]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d10c      	bne.n	800aade <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	785b      	ldrb	r3, [r3, #1]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fe fad8 	bl	8009080 <disk_status>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d101      	bne.n	800aade <validate+0x4e>
			res = FR_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <validate+0x5a>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	e000      	b.n	800aaec <validate+0x5c>
 800aaea:	2300      	movs	r3, #0
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	6013      	str	r3, [r2, #0]
	return res;
 800aaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
	...

0800aafc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab0e:	f107 0310 	add.w	r3, r7, #16
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff fcd5 	bl	800a4c2 <get_ldnumber>
 800ab18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da01      	bge.n	800ab24 <f_mount+0x28>
 800ab20:	230b      	movs	r3, #11
 800ab22:	e02b      	b.n	800ab7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab24:	4a17      	ldr	r2, [pc, #92]	; (800ab84 <f_mount+0x88>)
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d005      	beq.n	800ab40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab34:	69b8      	ldr	r0, [r7, #24]
 800ab36:	f7fe fd89 	bl	800964c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab3a:	69bb      	ldr	r3, [r7, #24]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	490d      	ldr	r1, [pc, #52]	; (800ab84 <f_mount+0x88>)
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <f_mount+0x66>
 800ab5c:	79fb      	ldrb	r3, [r7, #7]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d001      	beq.n	800ab66 <f_mount+0x6a>
 800ab62:	2300      	movs	r3, #0
 800ab64:	e00a      	b.n	800ab7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab66:	f107 010c 	add.w	r1, r7, #12
 800ab6a:	f107 0308 	add.w	r3, r7, #8
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fd41 	bl	800a5f8 <find_volume>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3720      	adds	r7, #32
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20005e08 	.word	0x20005e08

0800ab88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b098      	sub	sp, #96	; 0x60
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	4613      	mov	r3, r2
 800ab94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <f_open+0x18>
 800ab9c:	2309      	movs	r3, #9
 800ab9e:	e1ad      	b.n	800aefc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aba6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aba8:	79fa      	ldrb	r2, [r7, #7]
 800abaa:	f107 0110 	add.w	r1, r7, #16
 800abae:	f107 0308 	add.w	r3, r7, #8
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff fd20 	bl	800a5f8 <find_volume>
 800abb8:	4603      	mov	r3, r0
 800abba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800abbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	f040 8191 	bne.w	800aeea <f_open+0x362>
		dj.obj.fs = fs;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	4611      	mov	r1, r2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fc03 	bl	800a3e0 <follow_path>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800abe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11a      	bne.n	800ac1e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800abe8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abec:	b25b      	sxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	da03      	bge.n	800abfa <f_open+0x72>
				res = FR_INVALID_NAME;
 800abf2:	2306      	movs	r3, #6
 800abf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abf8:	e011      	b.n	800ac1e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abfa:	79fb      	ldrb	r3, [r7, #7]
 800abfc:	f023 0301 	bic.w	r3, r3, #1
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	bf14      	ite	ne
 800ac04:	2301      	movne	r3, #1
 800ac06:	2300      	moveq	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f107 0314 	add.w	r3, r7, #20
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fbd2 	bl	80093bc <chk_lock>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	f003 031c 	and.w	r3, r3, #28
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d07f      	beq.n	800ad28 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d017      	beq.n	800ac60 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d10e      	bne.n	800ac56 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac38:	f7fe fc1c 	bl	8009474 <enq_lock>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d006      	beq.n	800ac50 <f_open+0xc8>
 800ac42:	f107 0314 	add.w	r3, r7, #20
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff fb03 	bl	800a252 <dir_register>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	e000      	b.n	800ac52 <f_open+0xca>
 800ac50:	2312      	movs	r3, #18
 800ac52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac56:	79fb      	ldrb	r3, [r7, #7]
 800ac58:	f043 0308 	orr.w	r3, r3, #8
 800ac5c:	71fb      	strb	r3, [r7, #7]
 800ac5e:	e010      	b.n	800ac82 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac60:	7ebb      	ldrb	r3, [r7, #26]
 800ac62:	f003 0311 	and.w	r3, r3, #17
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d003      	beq.n	800ac72 <f_open+0xea>
					res = FR_DENIED;
 800ac6a:	2307      	movs	r3, #7
 800ac6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac70:	e007      	b.n	800ac82 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac72:	79fb      	ldrb	r3, [r7, #7]
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d002      	beq.n	800ac82 <f_open+0xfa>
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d168      	bne.n	800ad5c <f_open+0x1d4>
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	f003 0308 	and.w	r3, r3, #8
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d063      	beq.n	800ad5c <f_open+0x1d4>
				dw = GET_FATTIME();
 800ac94:	f7fd ffa4 	bl	8008be0 <get_fattime>
 800ac98:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac9c:	330e      	adds	r3, #14
 800ac9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fe fae1 	bl	8009268 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca8:	3316      	adds	r3, #22
 800acaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acac:	4618      	mov	r0, r3
 800acae:	f7fe fadb 	bl	8009268 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800acb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb4:	330b      	adds	r3, #11
 800acb6:	2220      	movs	r2, #32
 800acb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acbe:	4611      	mov	r1, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fa32 	bl	800a12a <ld_clust>
 800acc6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800accc:	2200      	movs	r2, #0
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff fa4a 	bl	800a168 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800acd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd6:	331c      	adds	r3, #28
 800acd8:	2100      	movs	r1, #0
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fac4 	bl	8009268 <st_dword>
					fs->wflag = 1;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	2201      	movs	r2, #1
 800ace4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ace6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d037      	beq.n	800ad5c <f_open+0x1d4>
						dw = fs->winsect;
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800acf2:	f107 0314 	add.w	r3, r7, #20
 800acf6:	2200      	movs	r2, #0
 800acf8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fe ff5d 	bl	8009bba <remove_chain>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ad06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d126      	bne.n	800ad5c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fd02 	bl	800971c <move_window>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad22:	3a01      	subs	r2, #1
 800ad24:	60da      	str	r2, [r3, #12]
 800ad26:	e019      	b.n	800ad5c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d115      	bne.n	800ad5c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ad30:	7ebb      	ldrb	r3, [r7, #26]
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d003      	beq.n	800ad42 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ad3a:	2304      	movs	r3, #4
 800ad3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad40:	e00c      	b.n	800ad5c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d007      	beq.n	800ad5c <f_open+0x1d4>
 800ad4c:	7ebb      	ldrb	r3, [r7, #26]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <f_open+0x1d4>
						res = FR_DENIED;
 800ad56:	2307      	movs	r3, #7
 800ad58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d128      	bne.n	800adb6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	f003 0308 	and.w	r3, r3, #8
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d003      	beq.n	800ad76 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad84:	79fb      	ldrb	r3, [r7, #7]
 800ad86:	f023 0301 	bic.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	bf14      	ite	ne
 800ad8e:	2301      	movne	r3, #1
 800ad90:	2300      	moveq	r3, #0
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	461a      	mov	r2, r3
 800ad96:	f107 0314 	add.w	r3, r7, #20
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7fe fb8b 	bl	80094b8 <inc_lock>
 800ada2:	4602      	mov	r2, r0
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <f_open+0x22e>
 800adb0:	2302      	movs	r3, #2
 800adb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800adb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f040 8095 	bne.w	800aeea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adc4:	4611      	mov	r1, r2
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff f9af 	bl	800a12a <ld_clust>
 800adcc:	4602      	mov	r2, r0
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	331c      	adds	r3, #28
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fa08 	bl	80091ec <ld_dword>
 800addc:	4602      	mov	r2, r0
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	88da      	ldrh	r2, [r3, #6]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	79fa      	ldrb	r2, [r7, #7]
 800adfa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2200      	movs	r2, #0
 800ae06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	3330      	adds	r3, #48	; 0x30
 800ae12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae16:	2100      	movs	r1, #0
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7fe fa72 	bl	8009302 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae1e:	79fb      	ldrb	r3, [r7, #7]
 800ae20:	f003 0320 	and.w	r3, r3, #32
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d060      	beq.n	800aeea <f_open+0x362>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d05c      	beq.n	800aeea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	895b      	ldrh	r3, [r3, #10]
 800ae3c:	025b      	lsls	r3, r3, #9
 800ae3e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ae4c:	e016      	b.n	800ae7c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe fd1d 	bl	8009892 <get_fat>
 800ae58:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ae5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d802      	bhi.n	800ae66 <f_open+0x2de>
 800ae60:	2302      	movs	r3, #2
 800ae62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae6c:	d102      	bne.n	800ae74 <f_open+0x2ec>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	657b      	str	r3, [r7, #84]	; 0x54
 800ae7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <f_open+0x304>
 800ae84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d8e0      	bhi.n	800ae4e <f_open+0x2c6>
				}
				fp->clust = clst;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d127      	bne.n	800aeea <f_open+0x362>
 800ae9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d022      	beq.n	800aeea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe fcd3 	bl	8009854 <clust2sect>
 800aeae:	6478      	str	r0, [r7, #68]	; 0x44
 800aeb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d103      	bne.n	800aebe <f_open+0x336>
						res = FR_INT_ERR;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aebc:	e015      	b.n	800aeea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec0:	0a5a      	lsrs	r2, r3, #9
 800aec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec4:	441a      	add	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	7858      	ldrb	r0, [r3, #1]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6a1a      	ldr	r2, [r3, #32]
 800aed8:	2301      	movs	r3, #1
 800aeda:	f7fe f911 	bl	8009100 <disk_read>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <f_open+0x362>
 800aee4:	2301      	movs	r3, #1
 800aee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aeea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <f_open+0x370>
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aef8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3760      	adds	r7, #96	; 0x60
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08c      	sub	sp, #48	; 0x30
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	2200      	movs	r2, #0
 800af1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f107 0210 	add.w	r2, r7, #16
 800af22:	4611      	mov	r1, r2
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff fdb3 	bl	800aa90 <validate>
 800af2a:	4603      	mov	r3, r0
 800af2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af34:	2b00      	cmp	r3, #0
 800af36:	d107      	bne.n	800af48 <f_write+0x44>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	7d5b      	ldrb	r3, [r3, #21]
 800af3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800af40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <f_write+0x4a>
 800af48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af4c:	e14b      	b.n	800b1e6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	7d1b      	ldrb	r3, [r3, #20]
 800af52:	f003 0302 	and.w	r3, r3, #2
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <f_write+0x5a>
 800af5a:	2307      	movs	r3, #7
 800af5c:	e143      	b.n	800b1e6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	699a      	ldr	r2, [r3, #24]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	441a      	add	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	f080 812d 	bcs.w	800b1ca <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	43db      	mvns	r3, r3
 800af76:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af78:	e127      	b.n	800b1ca <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 80e3 	bne.w	800b14e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	0a5b      	lsrs	r3, r3, #9
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	8952      	ldrh	r2, [r2, #10]
 800af92:	3a01      	subs	r2, #1
 800af94:	4013      	ands	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d143      	bne.n	800b026 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10c      	bne.n	800afc0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800afac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d11a      	bne.n	800afe8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2100      	movs	r1, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fe64 	bl	8009c84 <create_chain>
 800afbc:	62b8      	str	r0, [r7, #40]	; 0x28
 800afbe:	e013      	b.n	800afe8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d007      	beq.n	800afd8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	4619      	mov	r1, r3
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7fe fef0 	bl	8009db4 <clmt_clust>
 800afd4:	62b8      	str	r0, [r7, #40]	; 0x28
 800afd6:	e007      	b.n	800afe8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	4619      	mov	r1, r3
 800afe0:	4610      	mov	r0, r2
 800afe2:	f7fe fe4f 	bl	8009c84 <create_chain>
 800afe6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	f000 80f2 	beq.w	800b1d4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d104      	bne.n	800b000 <f_write+0xfc>
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2202      	movs	r2, #2
 800affa:	755a      	strb	r2, [r3, #21]
 800affc:	2302      	movs	r3, #2
 800affe:	e0f2      	b.n	800b1e6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b006:	d104      	bne.n	800b012 <f_write+0x10e>
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2201      	movs	r2, #1
 800b00c:	755a      	strb	r2, [r3, #21]
 800b00e:	2301      	movs	r3, #1
 800b010:	e0e9      	b.n	800b1e6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b016:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <f_write+0x122>
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b024:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	7d1b      	ldrb	r3, [r3, #20]
 800b02a:	b25b      	sxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	da18      	bge.n	800b062 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	7858      	ldrb	r0, [r3, #1]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6a1a      	ldr	r2, [r3, #32]
 800b03e:	2301      	movs	r3, #1
 800b040:	f7fe f87e 	bl	8009140 <disk_write>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d004      	beq.n	800b054 <f_write+0x150>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2201      	movs	r2, #1
 800b04e:	755a      	strb	r2, [r3, #21]
 800b050:	2301      	movs	r3, #1
 800b052:	e0c8      	b.n	800b1e6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	7d1b      	ldrb	r3, [r3, #20]
 800b058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	69db      	ldr	r3, [r3, #28]
 800b068:	4619      	mov	r1, r3
 800b06a:	4610      	mov	r0, r2
 800b06c:	f7fe fbf2 	bl	8009854 <clust2sect>
 800b070:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d104      	bne.n	800b082 <f_write+0x17e>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2202      	movs	r2, #2
 800b07c:	755a      	strb	r2, [r3, #21]
 800b07e:	2302      	movs	r3, #2
 800b080:	e0b1      	b.n	800b1e6 <f_write+0x2e2>
			sect += csect;
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	4413      	add	r3, r2
 800b088:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	0a5b      	lsrs	r3, r3, #9
 800b08e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d03c      	beq.n	800b110 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	4413      	add	r3, r2
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	8952      	ldrh	r2, [r2, #10]
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d905      	bls.n	800b0b0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	895b      	ldrh	r3, [r3, #10]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	7858      	ldrb	r0, [r3, #1]
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	697a      	ldr	r2, [r7, #20]
 800b0b8:	69f9      	ldr	r1, [r7, #28]
 800b0ba:	f7fe f841 	bl	8009140 <disk_write>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d004      	beq.n	800b0ce <f_write+0x1ca>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	755a      	strb	r2, [r3, #21]
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e08b      	b.n	800b1e6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a1a      	ldr	r2, [r3, #32]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	6a3a      	ldr	r2, [r7, #32]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d915      	bls.n	800b108 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6a1a      	ldr	r2, [r3, #32]
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	025b      	lsls	r3, r3, #9
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f7fe f8e3 	bl	80092c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	7d1b      	ldrb	r3, [r3, #20]
 800b0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b102:	b2da      	uxtb	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	025b      	lsls	r3, r3, #9
 800b10c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b10e:	e03f      	b.n	800b190 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a1b      	ldr	r3, [r3, #32]
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	429a      	cmp	r2, r3
 800b118:	d016      	beq.n	800b148 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	699a      	ldr	r2, [r3, #24]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b122:	429a      	cmp	r2, r3
 800b124:	d210      	bcs.n	800b148 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	7858      	ldrb	r0, [r3, #1]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b130:	2301      	movs	r3, #1
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	f7fd ffe4 	bl	8009100 <disk_read>
 800b138:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2201      	movs	r2, #1
 800b142:	755a      	strb	r2, [r3, #21]
 800b144:	2301      	movs	r3, #1
 800b146:	e04e      	b.n	800b1e6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b156:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b15a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	429a      	cmp	r2, r3
 800b162:	d901      	bls.n	800b168 <f_write+0x264>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b176:	4413      	add	r3, r2
 800b178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17a:	69f9      	ldr	r1, [r7, #28]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fe f89f 	bl	80092c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	7d1b      	ldrb	r3, [r3, #20]
 800b186:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b18a:	b2da      	uxtb	r2, r3
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	4413      	add	r3, r2
 800b196:	61fb      	str	r3, [r7, #28]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	699a      	ldr	r2, [r3, #24]
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	441a      	add	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	619a      	str	r2, [r3, #24]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68da      	ldr	r2, [r3, #12]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	bf38      	it	cc
 800b1b0:	461a      	movcc	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	60da      	str	r2, [r3, #12]
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	441a      	add	r2, r3
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f47f aed4 	bne.w	800af7a <f_write+0x76>
 800b1d2:	e000      	b.n	800b1d6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	7d1b      	ldrb	r3, [r3, #20]
 800b1da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3730      	adds	r7, #48	; 0x30
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b086      	sub	sp, #24
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f107 0208 	add.w	r2, r7, #8
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff fc46 	bl	800aa90 <validate>
 800b204:	4603      	mov	r3, r0
 800b206:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b208:	7dfb      	ldrb	r3, [r7, #23]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d168      	bne.n	800b2e0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	7d1b      	ldrb	r3, [r3, #20]
 800b212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b216:	2b00      	cmp	r3, #0
 800b218:	d062      	beq.n	800b2e0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	7d1b      	ldrb	r3, [r3, #20]
 800b21e:	b25b      	sxtb	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	da15      	bge.n	800b250 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	7858      	ldrb	r0, [r3, #1]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1a      	ldr	r2, [r3, #32]
 800b232:	2301      	movs	r3, #1
 800b234:	f7fd ff84 	bl	8009140 <disk_write>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d001      	beq.n	800b242 <f_sync+0x54>
 800b23e:	2301      	movs	r3, #1
 800b240:	e04f      	b.n	800b2e2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	7d1b      	ldrb	r3, [r3, #20]
 800b246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b24a:	b2da      	uxtb	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b250:	f7fd fcc6 	bl	8008be0 <get_fattime>
 800b254:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	f7fe fa5c 	bl	800971c <move_window>
 800b264:	4603      	mov	r3, r0
 800b266:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b268:	7dfb      	ldrb	r3, [r7, #23]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d138      	bne.n	800b2e0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b272:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	330b      	adds	r3, #11
 800b278:	781a      	ldrb	r2, [r3, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	330b      	adds	r3, #11
 800b27e:	f042 0220 	orr.w	r2, r2, #32
 800b282:	b2d2      	uxtb	r2, r2
 800b284:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6818      	ldr	r0, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	461a      	mov	r2, r3
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	f7fe ff69 	bl	800a168 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f103 021c 	add.w	r2, r3, #28
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	4610      	mov	r0, r2
 800b2a4:	f7fd ffe0 	bl	8009268 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	3316      	adds	r3, #22
 800b2ac:	6939      	ldr	r1, [r7, #16]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fd ffda 	bl	8009268 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	3312      	adds	r3, #18
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd ffb9 	bl	8009232 <st_word>
					fs->wflag = 1;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fe fa55 	bl	8009778 <sync_fs>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7d1b      	ldrb	r3, [r3, #20]
 800b2d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b084      	sub	sp, #16
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff ff7b 	bl	800b1ee <f_sync>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d118      	bne.n	800b334 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f107 0208 	add.w	r2, r7, #8
 800b308:	4611      	mov	r1, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7ff fbc0 	bl	800aa90 <validate>
 800b310:	4603      	mov	r3, r0
 800b312:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10c      	bne.n	800b334 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe f958 	bl	80095d4 <dec_lock>
 800b324:	4603      	mov	r3, r0
 800b326:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b328:	7bfb      	ldrb	r3, [r7, #15]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d102      	bne.n	800b334 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b334:	7bfb      	ldrb	r3, [r7, #15]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b096      	sub	sp, #88	; 0x58
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b346:	f107 0108 	add.w	r1, r7, #8
 800b34a:	1d3b      	adds	r3, r7, #4
 800b34c:	2202      	movs	r2, #2
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff f952 	bl	800a5f8 <find_volume>
 800b354:	4603      	mov	r3, r0
 800b356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b35e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b362:	2b00      	cmp	r3, #0
 800b364:	f040 80ec 	bne.w	800b540 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	f107 030c 	add.w	r3, r7, #12
 800b36e:	4611      	mov	r1, r2
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff f835 	bl	800a3e0 <follow_path>
 800b376:	4603      	mov	r3, r0
 800b378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b37c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <f_mkdir+0x4c>
 800b384:	2308      	movs	r3, #8
 800b386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b38a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b38e:	2b04      	cmp	r3, #4
 800b390:	f040 80d6 	bne.w	800b540 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b394:	f107 030c 	add.w	r3, r7, #12
 800b398:	2100      	movs	r1, #0
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe fc72 	bl	8009c84 <create_chain>
 800b3a0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	895b      	ldrh	r3, [r3, #10]
 800b3a6:	025b      	lsls	r3, r3, #9
 800b3a8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b3b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d102      	bne.n	800b3bc <f_mkdir+0x7e>
 800b3b6:	2307      	movs	r3, #7
 800b3b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b3bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d102      	bne.n	800b3c8 <f_mkdir+0x8a>
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b3c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3ce:	d102      	bne.n	800b3d6 <f_mkdir+0x98>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b3d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <f_mkdir+0xae>
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe f957 	bl	8009694 <sync_window>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b3ec:	f7fd fbf8 	bl	8008be0 <get_fattime>
 800b3f0:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b3f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d16a      	bne.n	800b4d0 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe fa28 	bl	8009854 <clust2sect>
 800b404:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	3330      	adds	r3, #48	; 0x30
 800b40a:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b40c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b410:	2100      	movs	r1, #0
 800b412:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b414:	f7fd ff75 	bl	8009302 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b418:	220b      	movs	r2, #11
 800b41a:	2120      	movs	r1, #32
 800b41c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b41e:	f7fd ff70 	bl	8009302 <mem_set>
					dir[DIR_Name] = '.';
 800b422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b424:	222e      	movs	r2, #46	; 0x2e
 800b426:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b42a:	330b      	adds	r3, #11
 800b42c:	2210      	movs	r2, #16
 800b42e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b432:	3316      	adds	r3, #22
 800b434:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b436:	4618      	mov	r0, r3
 800b438:	f7fd ff16 	bl	8009268 <st_dword>
					st_clust(fs, dir, dcl);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fe90 	bl	800a168 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44a:	3320      	adds	r3, #32
 800b44c:	2220      	movs	r2, #32
 800b44e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b450:	4618      	mov	r0, r3
 800b452:	f7fd ff35 	bl	80092c0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b458:	3321      	adds	r3, #33	; 0x21
 800b45a:	222e      	movs	r2, #46	; 0x2e
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b03      	cmp	r3, #3
 800b468:	d106      	bne.n	800b478 <f_mkdir+0x13a>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b46e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b470:	429a      	cmp	r2, r3
 800b472:	d101      	bne.n	800b478 <f_mkdir+0x13a>
 800b474:	2300      	movs	r3, #0
 800b476:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47c:	3320      	adds	r3, #32
 800b47e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b480:	4619      	mov	r1, r3
 800b482:	f7fe fe71 	bl	800a168 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	895b      	ldrh	r3, [r3, #10]
 800b48a:	653b      	str	r3, [r7, #80]	; 0x50
 800b48c:	e01b      	b.n	800b4c6 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b490:	1c5a      	adds	r2, r3, #1
 800b492:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2201      	movs	r2, #1
 800b49c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe f8f7 	bl	8009694 <sync_window>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b4ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10c      	bne.n	800b4ce <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b4b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4bc:	f7fd ff21 	bl	8009302 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b4c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	653b      	str	r3, [r7, #80]	; 0x50
 800b4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e0      	bne.n	800b48e <f_mkdir+0x150>
 800b4cc:	e000      	b.n	800b4d0 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b4ce:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b4d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d107      	bne.n	800b4e8 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b4d8:	f107 030c 	add.w	r3, r7, #12
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe feb8 	bl	800a252 <dir_register>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d120      	bne.n	800b532 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f6:	3316      	adds	r3, #22
 800b4f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7fd feb4 	bl	8009268 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b506:	4618      	mov	r0, r3
 800b508:	f7fe fe2e 	bl	800a168 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50e:	330b      	adds	r3, #11
 800b510:	2210      	movs	r2, #16
 800b512:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2201      	movs	r2, #1
 800b518:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b51a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10e      	bne.n	800b540 <f_mkdir+0x202>
					res = sync_fs(fs);
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe f927 	bl	8009778 <sync_fs>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b530:	e006      	b.n	800b540 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b532:	f107 030c 	add.w	r3, r7, #12
 800b536:	2200      	movs	r2, #0
 800b538:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe fb3d 	bl	8009bba <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b540:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b544:	4618      	mov	r0, r3
 800b546:	3758      	adds	r7, #88	; 0x58
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	4613      	mov	r3, r2
 800b558:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b55a:	2301      	movs	r3, #1
 800b55c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b562:	4b1f      	ldr	r3, [pc, #124]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b564:	7a5b      	ldrb	r3, [r3, #9]
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d131      	bne.n	800b5d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b56c:	4b1c      	ldr	r3, [pc, #112]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b56e:	7a5b      	ldrb	r3, [r3, #9]
 800b570:	b2db      	uxtb	r3, r3
 800b572:	461a      	mov	r2, r3
 800b574:	4b1a      	ldr	r3, [pc, #104]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b576:	2100      	movs	r1, #0
 800b578:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b57a:	4b19      	ldr	r3, [pc, #100]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b57c:	7a5b      	ldrb	r3, [r3, #9]
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	4a17      	ldr	r2, [pc, #92]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b58a:	4b15      	ldr	r3, [pc, #84]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b58c:	7a5b      	ldrb	r3, [r3, #9]
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	4b13      	ldr	r3, [pc, #76]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b594:	4413      	add	r3, r2
 800b596:	79fa      	ldrb	r2, [r7, #7]
 800b598:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b59a:	4b11      	ldr	r3, [pc, #68]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b59c:	7a5b      	ldrb	r3, [r3, #9]
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	b2d1      	uxtb	r1, r2
 800b5a4:	4a0e      	ldr	r2, [pc, #56]	; (800b5e0 <FATFS_LinkDriverEx+0x94>)
 800b5a6:	7251      	strb	r1, [r2, #9]
 800b5a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5aa:	7dbb      	ldrb	r3, [r7, #22]
 800b5ac:	3330      	adds	r3, #48	; 0x30
 800b5ae:	b2da      	uxtb	r2, r3
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	223a      	movs	r2, #58	; 0x3a
 800b5ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	3302      	adds	r3, #2
 800b5c0:	222f      	movs	r2, #47	; 0x2f
 800b5c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	3303      	adds	r3, #3
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	371c      	adds	r7, #28
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	20005e30 	.word	0x20005e30

0800b5e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	6839      	ldr	r1, [r7, #0]
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7ff ffaa 	bl	800b54c <FATFS_LinkDriverEx>
 800b5f8:	4603      	mov	r3, r0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <phase_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_phase_1_activations_map, 1, params)) {
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	2101      	movs	r1, #1
 800b612:	485e      	ldr	r0, [pc, #376]	; (800b78c <phase_1_configure_activations+0x188>)
 800b614:	f001 fa44 	bl	800caa0 <ai_platform_get_activations_map>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 80ac 	beq.w	800b778 <phase_1_configure_activations+0x174>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_3_input0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800b620:	4b5a      	ldr	r3, [pc, #360]	; (800b78c <phase_1_configure_activations+0x188>)
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	4b5a      	ldr	r3, [pc, #360]	; (800b790 <phase_1_configure_activations+0x18c>)
 800b626:	4413      	add	r3, r2
 800b628:	4a5a      	ldr	r2, [pc, #360]	; (800b794 <phase_1_configure_activations+0x190>)
 800b62a:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_3_input0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800b62c:	4b57      	ldr	r3, [pc, #348]	; (800b78c <phase_1_configure_activations+0x188>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	4b57      	ldr	r3, [pc, #348]	; (800b790 <phase_1_configure_activations+0x18c>)
 800b632:	4413      	add	r3, r2
 800b634:	4a57      	ldr	r2, [pc, #348]	; (800b794 <phase_1_configure_activations+0x190>)
 800b636:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b638:	4b54      	ldr	r3, [pc, #336]	; (800b78c <phase_1_configure_activations+0x188>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a56      	ldr	r2, [pc, #344]	; (800b798 <phase_1_configure_activations+0x194>)
 800b63e:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b640:	4b52      	ldr	r3, [pc, #328]	; (800b78c <phase_1_configure_activations+0x188>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4a54      	ldr	r2, [pc, #336]	; (800b798 <phase_1_configure_activations+0x194>)
 800b646:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b648:	4b50      	ldr	r3, [pc, #320]	; (800b78c <phase_1_configure_activations+0x188>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a53      	ldr	r2, [pc, #332]	; (800b79c <phase_1_configure_activations+0x198>)
 800b64e:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b650:	4b4e      	ldr	r3, [pc, #312]	; (800b78c <phase_1_configure_activations+0x188>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a51      	ldr	r2, [pc, #324]	; (800b79c <phase_1_configure_activations+0x198>)
 800b656:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b658:	4b4c      	ldr	r3, [pc, #304]	; (800b78c <phase_1_configure_activations+0x188>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a50      	ldr	r2, [pc, #320]	; (800b7a0 <phase_1_configure_activations+0x19c>)
 800b65e:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b660:	4b4a      	ldr	r3, [pc, #296]	; (800b78c <phase_1_configure_activations+0x188>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a4e      	ldr	r2, [pc, #312]	; (800b7a0 <phase_1_configure_activations+0x19c>)
 800b666:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800b668:	4b48      	ldr	r3, [pc, #288]	; (800b78c <phase_1_configure_activations+0x188>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b670:	4a4c      	ldr	r2, [pc, #304]	; (800b7a4 <phase_1_configure_activations+0x1a0>)
 800b672:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800b674:	4b45      	ldr	r3, [pc, #276]	; (800b78c <phase_1_configure_activations+0x188>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b67c:	4a49      	ldr	r2, [pc, #292]	; (800b7a4 <phase_1_configure_activations+0x1a0>)
 800b67e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b680:	4b42      	ldr	r3, [pc, #264]	; (800b78c <phase_1_configure_activations+0x188>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b688:	4a47      	ldr	r2, [pc, #284]	; (800b7a8 <phase_1_configure_activations+0x1a4>)
 800b68a:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b68c:	4b3f      	ldr	r3, [pc, #252]	; (800b78c <phase_1_configure_activations+0x188>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b694:	4a44      	ldr	r2, [pc, #272]	; (800b7a8 <phase_1_configure_activations+0x1a4>)
 800b696:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b698:	4b3c      	ldr	r3, [pc, #240]	; (800b78c <phase_1_configure_activations+0x188>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a43      	ldr	r2, [pc, #268]	; (800b7ac <phase_1_configure_activations+0x1a8>)
 800b69e:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6a0:	4b3a      	ldr	r3, [pc, #232]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a41      	ldr	r2, [pc, #260]	; (800b7ac <phase_1_configure_activations+0x1a8>)
 800b6a6:	60d3      	str	r3, [r2, #12]
    
    pool_9_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b6a8:	4b38      	ldr	r3, [pc, #224]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b6b0:	4a3f      	ldr	r2, [pc, #252]	; (800b7b0 <phase_1_configure_activations+0x1ac>)
 800b6b2:	6093      	str	r3, [r2, #8]
    pool_9_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800b6b4:	4b35      	ldr	r3, [pc, #212]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800b6bc:	4a3c      	ldr	r2, [pc, #240]	; (800b7b0 <phase_1_configure_activations+0x1ac>)
 800b6be:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6c0:	4b32      	ldr	r3, [pc, #200]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a3b      	ldr	r2, [pc, #236]	; (800b7b4 <phase_1_configure_activations+0x1b0>)
 800b6c6:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b6c8:	4b30      	ldr	r3, [pc, #192]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a39      	ldr	r2, [pc, #228]	; (800b7b4 <phase_1_configure_activations+0x1b0>)
 800b6ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800b6d0:	4b2e      	ldr	r3, [pc, #184]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b6d8:	4a37      	ldr	r2, [pc, #220]	; (800b7b8 <phase_1_configure_activations+0x1b4>)
 800b6da:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800b6dc:	4b2b      	ldr	r3, [pc, #172]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b6e4:	4a34      	ldr	r2, [pc, #208]	; (800b7b8 <phase_1_configure_activations+0x1b4>)
 800b6e6:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800b6e8:	4b28      	ldr	r3, [pc, #160]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800b6f0:	4a32      	ldr	r2, [pc, #200]	; (800b7bc <phase_1_configure_activations+0x1b8>)
 800b6f2:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800b6f4:	4b25      	ldr	r3, [pc, #148]	; (800b78c <phase_1_configure_activations+0x188>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800b6fc:	4a2f      	ldr	r2, [pc, #188]	; (800b7bc <phase_1_configure_activations+0x1b8>)
 800b6fe:	60d3      	str	r3, [r2, #12]
    
    pool_15_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b700:	4b22      	ldr	r3, [pc, #136]	; (800b78c <phase_1_configure_activations+0x188>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a2e      	ldr	r2, [pc, #184]	; (800b7c0 <phase_1_configure_activations+0x1bc>)
 800b706:	6093      	str	r3, [r2, #8]
    pool_15_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b708:	4b20      	ldr	r3, [pc, #128]	; (800b78c <phase_1_configure_activations+0x188>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a2c      	ldr	r2, [pc, #176]	; (800b7c0 <phase_1_configure_activations+0x1bc>)
 800b70e:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800b710:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <phase_1_configure_activations+0x188>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800b718:	4a2a      	ldr	r2, [pc, #168]	; (800b7c4 <phase_1_configure_activations+0x1c0>)
 800b71a:	6093      	str	r3, [r2, #8]
    eltwise_17_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800b71c:	4b1b      	ldr	r3, [pc, #108]	; (800b78c <phase_1_configure_activations+0x188>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800b724:	4a27      	ldr	r2, [pc, #156]	; (800b7c4 <phase_1_configure_activations+0x1c0>)
 800b726:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b728:	4b18      	ldr	r3, [pc, #96]	; (800b78c <phase_1_configure_activations+0x188>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a26      	ldr	r2, [pc, #152]	; (800b7c8 <phase_1_configure_activations+0x1c4>)
 800b72e:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b730:	4b16      	ldr	r3, [pc, #88]	; (800b78c <phase_1_configure_activations+0x188>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a24      	ldr	r2, [pc, #144]	; (800b7c8 <phase_1_configure_activations+0x1c4>)
 800b736:	60d3      	str	r3, [r2, #12]
    
    nl_19_nl_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800b738:	4b14      	ldr	r3, [pc, #80]	; (800b78c <phase_1_configure_activations+0x188>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b740:	4a22      	ldr	r2, [pc, #136]	; (800b7cc <phase_1_configure_activations+0x1c8>)
 800b742:	6093      	str	r3, [r2, #8]
    nl_19_nl_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800b744:	4b11      	ldr	r3, [pc, #68]	; (800b78c <phase_1_configure_activations+0x188>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b74c:	4a1f      	ldr	r2, [pc, #124]	; (800b7cc <phase_1_configure_activations+0x1c8>)
 800b74e:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b750:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <phase_1_configure_activations+0x188>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a1e      	ldr	r2, [pc, #120]	; (800b7d0 <phase_1_configure_activations+0x1cc>)
 800b756:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800b758:	4b0c      	ldr	r3, [pc, #48]	; (800b78c <phase_1_configure_activations+0x188>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a1c      	ldr	r2, [pc, #112]	; (800b7d0 <phase_1_configure_activations+0x1cc>)
 800b75e:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 40);
 800b760:	4b0a      	ldr	r3, [pc, #40]	; (800b78c <phase_1_configure_activations+0x188>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3328      	adds	r3, #40	; 0x28
 800b766:	4a1b      	ldr	r2, [pc, #108]	; (800b7d4 <phase_1_configure_activations+0x1d0>)
 800b768:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 40);
 800b76a:	4b08      	ldr	r3, [pc, #32]	; (800b78c <phase_1_configure_activations+0x188>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3328      	adds	r3, #40	; 0x28
 800b770:	4a18      	ldr	r2, [pc, #96]	; (800b7d4 <phase_1_configure_activations+0x1d0>)
 800b772:	60d3      	str	r3, [r2, #12]
    
    return true;
 800b774:	2301      	movs	r3, #1
 800b776:	e005      	b.n	800b784 <phase_1_configure_activations+0x180>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800b778:	2213      	movs	r2, #19
 800b77a:	2130      	movs	r1, #48	; 0x30
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f001 faf3 	bl	800cd68 <ai_platform_network_set_error>
  return false;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	20005e3c 	.word	0x20005e3c
 800b790:	0003c080 	.word	0x0003c080
 800b794:	200000dc 	.word	0x200000dc
 800b798:	200000ec 	.word	0x200000ec
 800b79c:	2000010c 	.word	0x2000010c
 800b7a0:	2000011c 	.word	0x2000011c
 800b7a4:	2000012c 	.word	0x2000012c
 800b7a8:	2000013c 	.word	0x2000013c
 800b7ac:	2000014c 	.word	0x2000014c
 800b7b0:	2000015c 	.word	0x2000015c
 800b7b4:	2000016c 	.word	0x2000016c
 800b7b8:	2000017c 	.word	0x2000017c
 800b7bc:	2000018c 	.word	0x2000018c
 800b7c0:	2000019c 	.word	0x2000019c
 800b7c4:	200001ac 	.word	0x200001ac
 800b7c8:	200001bc 	.word	0x200001bc
 800b7cc:	200001cc 	.word	0x200001cc
 800b7d0:	200001dc 	.word	0x200001dc
 800b7d4:	200001ec 	.word	0x200001ec

0800b7d8 <phase_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_phase_1_weights_map, 1, params)) {
 800b7e2:	683a      	ldr	r2, [r7, #0]
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	4892      	ldr	r0, [pc, #584]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b7e8:	f001 f902 	bl	800c9f0 <ai_platform_get_weights_map>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 81c4 	beq.w	800bb7c <phase_1_configure_weights+0x3a4>
    /* Updating weights (byte) offsets */
    
    eltwise_8_scale_array.format |= AI_FMT_FLAG_CONST;
 800b7f4:	4b8f      	ldr	r3, [pc, #572]	; (800ba34 <phase_1_configure_weights+0x25c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7fc:	4a8d      	ldr	r2, [pc, #564]	; (800ba34 <phase_1_configure_weights+0x25c>)
 800b7fe:	6013      	str	r3, [r2, #0]
    eltwise_8_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 0);
 800b800:	4b8b      	ldr	r3, [pc, #556]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a8b      	ldr	r2, [pc, #556]	; (800ba34 <phase_1_configure_weights+0x25c>)
 800b806:	6093      	str	r3, [r2, #8]
    eltwise_8_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 0);
 800b808:	4b89      	ldr	r3, [pc, #548]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a89      	ldr	r2, [pc, #548]	; (800ba34 <phase_1_configure_weights+0x25c>)
 800b80e:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800b810:	4b89      	ldr	r3, [pc, #548]	; (800ba38 <phase_1_configure_weights+0x260>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b818:	4a87      	ldr	r2, [pc, #540]	; (800ba38 <phase_1_configure_weights+0x260>)
 800b81a:	6013      	str	r3, [r2, #0]
    eltwise_8_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 256);
 800b81c:	4b84      	ldr	r3, [pc, #528]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b824:	4a84      	ldr	r2, [pc, #528]	; (800ba38 <phase_1_configure_weights+0x260>)
 800b826:	6093      	str	r3, [r2, #8]
    eltwise_8_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 256);
 800b828:	4b81      	ldr	r3, [pc, #516]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b830:	4a81      	ldr	r2, [pc, #516]	; (800ba38 <phase_1_configure_weights+0x260>)
 800b832:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_scale_array.format |= AI_FMT_FLAG_CONST;
 800b834:	4b81      	ldr	r3, [pc, #516]	; (800ba3c <phase_1_configure_weights+0x264>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b83c:	4a7f      	ldr	r2, [pc, #508]	; (800ba3c <phase_1_configure_weights+0x264>)
 800b83e:	6013      	str	r3, [r2, #0]
    eltwise_11_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 512);
 800b840:	4b7b      	ldr	r3, [pc, #492]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b848:	4a7c      	ldr	r2, [pc, #496]	; (800ba3c <phase_1_configure_weights+0x264>)
 800b84a:	6093      	str	r3, [r2, #8]
    eltwise_11_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 512);
 800b84c:	4b78      	ldr	r3, [pc, #480]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b854:	4a79      	ldr	r2, [pc, #484]	; (800ba3c <phase_1_configure_weights+0x264>)
 800b856:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800b858:	4b79      	ldr	r3, [pc, #484]	; (800ba40 <phase_1_configure_weights+0x268>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b860:	4a77      	ldr	r2, [pc, #476]	; (800ba40 <phase_1_configure_weights+0x268>)
 800b862:	6013      	str	r3, [r2, #0]
    eltwise_11_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 768);
 800b864:	4b72      	ldr	r3, [pc, #456]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b86c:	4a74      	ldr	r2, [pc, #464]	; (800ba40 <phase_1_configure_weights+0x268>)
 800b86e:	6093      	str	r3, [r2, #8]
    eltwise_11_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 768);
 800b870:	4b6f      	ldr	r3, [pc, #444]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800b878:	4a71      	ldr	r2, [pc, #452]	; (800ba40 <phase_1_configure_weights+0x268>)
 800b87a:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800b87c:	4b71      	ldr	r3, [pc, #452]	; (800ba44 <phase_1_configure_weights+0x26c>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b884:	4a6f      	ldr	r2, [pc, #444]	; (800ba44 <phase_1_configure_weights+0x26c>)
 800b886:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800b888:	4b69      	ldr	r3, [pc, #420]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b890:	4a6c      	ldr	r2, [pc, #432]	; (800ba44 <phase_1_configure_weights+0x26c>)
 800b892:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800b894:	4b66      	ldr	r3, [pc, #408]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b89c:	4a69      	ldr	r2, [pc, #420]	; (800ba44 <phase_1_configure_weights+0x26c>)
 800b89e:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800b8a0:	4b69      	ldr	r3, [pc, #420]	; (800ba48 <phase_1_configure_weights+0x270>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8a8:	4a67      	ldr	r2, [pc, #412]	; (800ba48 <phase_1_configure_weights+0x270>)
 800b8aa:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800b8ac:	4b60      	ldr	r3, [pc, #384]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	4b66      	ldr	r3, [pc, #408]	; (800ba4c <phase_1_configure_weights+0x274>)
 800b8b2:	4413      	add	r3, r2
 800b8b4:	4a64      	ldr	r2, [pc, #400]	; (800ba48 <phase_1_configure_weights+0x270>)
 800b8b6:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800b8b8:	4b5d      	ldr	r3, [pc, #372]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	4b63      	ldr	r3, [pc, #396]	; (800ba4c <phase_1_configure_weights+0x274>)
 800b8be:	4413      	add	r3, r2
 800b8c0:	4a61      	ldr	r2, [pc, #388]	; (800ba48 <phase_1_configure_weights+0x270>)
 800b8c2:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 800b8c4:	4b62      	ldr	r3, [pc, #392]	; (800ba50 <phase_1_configure_weights+0x278>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8cc:	4a60      	ldr	r2, [pc, #384]	; (800ba50 <phase_1_configure_weights+0x278>)
 800b8ce:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800b8d0:	4b57      	ldr	r3, [pc, #348]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	4b5f      	ldr	r3, [pc, #380]	; (800ba54 <phase_1_configure_weights+0x27c>)
 800b8d6:	4413      	add	r3, r2
 800b8d8:	4a5d      	ldr	r2, [pc, #372]	; (800ba50 <phase_1_configure_weights+0x278>)
 800b8da:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800b8dc:	4b54      	ldr	r3, [pc, #336]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	4b5c      	ldr	r3, [pc, #368]	; (800ba54 <phase_1_configure_weights+0x27c>)
 800b8e2:	4413      	add	r3, r2
 800b8e4:	4a5a      	ldr	r2, [pc, #360]	; (800ba50 <phase_1_configure_weights+0x278>)
 800b8e6:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800b8e8:	4b5b      	ldr	r3, [pc, #364]	; (800ba58 <phase_1_configure_weights+0x280>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8f0:	4a59      	ldr	r2, [pc, #356]	; (800ba58 <phase_1_configure_weights+0x280>)
 800b8f2:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800b8f4:	4b4e      	ldr	r3, [pc, #312]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800b8fc:	4a56      	ldr	r2, [pc, #344]	; (800ba58 <phase_1_configure_weights+0x280>)
 800b8fe:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800b900:	4b4b      	ldr	r3, [pc, #300]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800b908:	4a53      	ldr	r2, [pc, #332]	; (800ba58 <phase_1_configure_weights+0x280>)
 800b90a:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_scale_array.format |= AI_FMT_FLAG_CONST;
 800b90c:	4b53      	ldr	r3, [pc, #332]	; (800ba5c <phase_1_configure_weights+0x284>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b914:	4a51      	ldr	r2, [pc, #324]	; (800ba5c <phase_1_configure_weights+0x284>)
 800b916:	6013      	str	r3, [r2, #0]
    eltwise_17_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800b918:	4b45      	ldr	r3, [pc, #276]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	4b50      	ldr	r3, [pc, #320]	; (800ba60 <phase_1_configure_weights+0x288>)
 800b91e:	4413      	add	r3, r2
 800b920:	4a4e      	ldr	r2, [pc, #312]	; (800ba5c <phase_1_configure_weights+0x284>)
 800b922:	6093      	str	r3, [r2, #8]
    eltwise_17_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800b924:	4b42      	ldr	r3, [pc, #264]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	4b4d      	ldr	r3, [pc, #308]	; (800ba60 <phase_1_configure_weights+0x288>)
 800b92a:	4413      	add	r3, r2
 800b92c:	4a4b      	ldr	r2, [pc, #300]	; (800ba5c <phase_1_configure_weights+0x284>)
 800b92e:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800b930:	4b4c      	ldr	r3, [pc, #304]	; (800ba64 <phase_1_configure_weights+0x28c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b938:	4a4a      	ldr	r2, [pc, #296]	; (800ba64 <phase_1_configure_weights+0x28c>)
 800b93a:	6013      	str	r3, [r2, #0]
    eltwise_17_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800b93c:	4b3c      	ldr	r3, [pc, #240]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	4b49      	ldr	r3, [pc, #292]	; (800ba68 <phase_1_configure_weights+0x290>)
 800b942:	4413      	add	r3, r2
 800b944:	4a47      	ldr	r2, [pc, #284]	; (800ba64 <phase_1_configure_weights+0x28c>)
 800b946:	6093      	str	r3, [r2, #8]
    eltwise_17_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800b948:	4b39      	ldr	r3, [pc, #228]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	4b46      	ldr	r3, [pc, #280]	; (800ba68 <phase_1_configure_weights+0x290>)
 800b94e:	4413      	add	r3, r2
 800b950:	4a44      	ldr	r2, [pc, #272]	; (800ba64 <phase_1_configure_weights+0x28c>)
 800b952:	60d3      	str	r3, [r2, #12]
    
    dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800b954:	4b45      	ldr	r3, [pc, #276]	; (800ba6c <phase_1_configure_weights+0x294>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b95c:	4a43      	ldr	r2, [pc, #268]	; (800ba6c <phase_1_configure_weights+0x294>)
 800b95e:	6013      	str	r3, [r2, #0]
    dense_19_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 299520);
 800b960:	4b33      	ldr	r3, [pc, #204]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	4b42      	ldr	r3, [pc, #264]	; (800ba70 <phase_1_configure_weights+0x298>)
 800b966:	4413      	add	r3, r2
 800b968:	4a40      	ldr	r2, [pc, #256]	; (800ba6c <phase_1_configure_weights+0x294>)
 800b96a:	6093      	str	r3, [r2, #8]
    dense_19_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 298496);
 800b96c:	4b30      	ldr	r3, [pc, #192]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	4b40      	ldr	r3, [pc, #256]	; (800ba74 <phase_1_configure_weights+0x29c>)
 800b972:	4413      	add	r3, r2
 800b974:	4a3d      	ldr	r2, [pc, #244]	; (800ba6c <phase_1_configure_weights+0x294>)
 800b976:	60d3      	str	r3, [r2, #12]
    
    dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800b978:	4b3f      	ldr	r3, [pc, #252]	; (800ba78 <phase_1_configure_weights+0x2a0>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b980:	4a3d      	ldr	r2, [pc, #244]	; (800ba78 <phase_1_configure_weights+0x2a0>)
 800b982:	6013      	str	r3, [r2, #0]
    dense_19_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800b984:	4b2a      	ldr	r3, [pc, #168]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	4b3c      	ldr	r3, [pc, #240]	; (800ba7c <phase_1_configure_weights+0x2a4>)
 800b98a:	4413      	add	r3, r2
 800b98c:	4a3a      	ldr	r2, [pc, #232]	; (800ba78 <phase_1_configure_weights+0x2a0>)
 800b98e:	6093      	str	r3, [r2, #8]
    dense_19_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800b990:	4b27      	ldr	r3, [pc, #156]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	4b39      	ldr	r3, [pc, #228]	; (800ba7c <phase_1_configure_weights+0x2a4>)
 800b996:	4413      	add	r3, r2
 800b998:	4a37      	ldr	r2, [pc, #220]	; (800ba78 <phase_1_configure_weights+0x2a0>)
 800b99a:	60d3      	str	r3, [r2, #12]
    
    dense_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800b99c:	4b38      	ldr	r3, [pc, #224]	; (800ba80 <phase_1_configure_weights+0x2a8>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9a4:	4a36      	ldr	r2, [pc, #216]	; (800ba80 <phase_1_configure_weights+0x2a8>)
 800b9a6:	6013      	str	r3, [r2, #0]
    dense_20_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800b9a8:	4b21      	ldr	r3, [pc, #132]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	4b35      	ldr	r3, [pc, #212]	; (800ba84 <phase_1_configure_weights+0x2ac>)
 800b9ae:	4413      	add	r3, r2
 800b9b0:	4a33      	ldr	r2, [pc, #204]	; (800ba80 <phase_1_configure_weights+0x2a8>)
 800b9b2:	6093      	str	r3, [r2, #8]
    dense_20_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800b9b4:	4b1e      	ldr	r3, [pc, #120]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	4b32      	ldr	r3, [pc, #200]	; (800ba84 <phase_1_configure_weights+0x2ac>)
 800b9ba:	4413      	add	r3, r2
 800b9bc:	4a30      	ldr	r2, [pc, #192]	; (800ba80 <phase_1_configure_weights+0x2a8>)
 800b9be:	60d3      	str	r3, [r2, #12]
    
    dense_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800b9c0:	4b31      	ldr	r3, [pc, #196]	; (800ba88 <phase_1_configure_weights+0x2b0>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9c8:	4a2f      	ldr	r2, [pc, #188]	; (800ba88 <phase_1_configure_weights+0x2b0>)
 800b9ca:	6013      	str	r3, [r2, #0]
    dense_20_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800b9cc:	4b18      	ldr	r3, [pc, #96]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	4b2e      	ldr	r3, [pc, #184]	; (800ba8c <phase_1_configure_weights+0x2b4>)
 800b9d2:	4413      	add	r3, r2
 800b9d4:	4a2c      	ldr	r2, [pc, #176]	; (800ba88 <phase_1_configure_weights+0x2b0>)
 800b9d6:	6093      	str	r3, [r2, #8]
    dense_20_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800b9d8:	4b15      	ldr	r3, [pc, #84]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <phase_1_configure_weights+0x2b4>)
 800b9de:	4413      	add	r3, r2
 800b9e0:	4a29      	ldr	r2, [pc, #164]	; (800ba88 <phase_1_configure_weights+0x2b0>)
 800b9e2:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800b9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ba90 <phase_1_configure_weights+0x2b8>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b9ec:	4a28      	ldr	r2, [pc, #160]	; (800ba90 <phase_1_configure_weights+0x2b8>)
 800b9ee:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800b9f0:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	4b27      	ldr	r3, [pc, #156]	; (800ba94 <phase_1_configure_weights+0x2bc>)
 800b9f6:	4413      	add	r3, r2
 800b9f8:	4a25      	ldr	r2, [pc, #148]	; (800ba90 <phase_1_configure_weights+0x2b8>)
 800b9fa:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800b9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ba30 <phase_1_configure_weights+0x258>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	4b24      	ldr	r3, [pc, #144]	; (800ba94 <phase_1_configure_weights+0x2bc>)
 800ba02:	4413      	add	r3, r2
 800ba04:	4a22      	ldr	r2, [pc, #136]	; (800ba90 <phase_1_configure_weights+0x2b8>)
 800ba06:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800ba08:	4b23      	ldr	r3, [pc, #140]	; (800ba98 <phase_1_configure_weights+0x2c0>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ba10:	4a21      	ldr	r2, [pc, #132]	; (800ba98 <phase_1_configure_weights+0x2c0>)
 800ba12:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800ba14:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <phase_1_configure_weights+0x258>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	4b20      	ldr	r3, [pc, #128]	; (800ba9c <phase_1_configure_weights+0x2c4>)
 800ba1a:	4413      	add	r3, r2
 800ba1c:	4a1e      	ldr	r2, [pc, #120]	; (800ba98 <phase_1_configure_weights+0x2c0>)
 800ba1e:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800ba20:	4b03      	ldr	r3, [pc, #12]	; (800ba30 <phase_1_configure_weights+0x258>)
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <phase_1_configure_weights+0x2c4>)
 800ba26:	4413      	add	r3, r2
 800ba28:	4a1b      	ldr	r2, [pc, #108]	; (800ba98 <phase_1_configure_weights+0x2c0>)
 800ba2a:	60d3      	str	r3, [r2, #12]
 800ba2c:	e038      	b.n	800baa0 <phase_1_configure_weights+0x2c8>
 800ba2e:	bf00      	nop
 800ba30:	20005e40 	.word	0x20005e40
 800ba34:	2000000c 	.word	0x2000000c
 800ba38:	2000001c 	.word	0x2000001c
 800ba3c:	2000002c 	.word	0x2000002c
 800ba40:	2000003c 	.word	0x2000003c
 800ba44:	2000004c 	.word	0x2000004c
 800ba48:	2000005c 	.word	0x2000005c
 800ba4c:	00048400 	.word	0x00048400
 800ba50:	2000006c 	.word	0x2000006c
 800ba54:	00048600 	.word	0x00048600
 800ba58:	2000007c 	.word	0x2000007c
 800ba5c:	2000008c 	.word	0x2000008c
 800ba60:	00048a00 	.word	0x00048a00
 800ba64:	2000009c 	.word	0x2000009c
 800ba68:	00048c00 	.word	0x00048c00
 800ba6c:	200000ac 	.word	0x200000ac
 800ba70:	00049200 	.word	0x00049200
 800ba74:	00048e00 	.word	0x00048e00
 800ba78:	200000bc 	.word	0x200000bc
 800ba7c:	00149200 	.word	0x00149200
 800ba80:	200000cc 	.word	0x200000cc
 800ba84:	00149600 	.word	0x00149600
 800ba88:	200000fc 	.word	0x200000fc
 800ba8c:	0014be00 	.word	0x0014be00
 800ba90:	200001fc 	.word	0x200001fc
 800ba94:	0014be28 	.word	0x0014be28
 800ba98:	2000020c 	.word	0x2000020c
 800ba9c:	0014c2a8 	.word	0x0014c2a8
    
    eltwise_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800baa0:	4b3b      	ldr	r3, [pc, #236]	; (800bb90 <phase_1_configure_weights+0x3b8>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baa8:	4a39      	ldr	r2, [pc, #228]	; (800bb90 <phase_1_configure_weights+0x3b8>)
 800baaa:	6013      	str	r3, [r2, #0]
    eltwise_2_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800baac:	4b39      	ldr	r3, [pc, #228]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	4b39      	ldr	r3, [pc, #228]	; (800bb98 <phase_1_configure_weights+0x3c0>)
 800bab2:	4413      	add	r3, r2
 800bab4:	4a36      	ldr	r2, [pc, #216]	; (800bb90 <phase_1_configure_weights+0x3b8>)
 800bab6:	6093      	str	r3, [r2, #8]
    eltwise_2_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800bab8:	4b36      	ldr	r3, [pc, #216]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	4b36      	ldr	r3, [pc, #216]	; (800bb98 <phase_1_configure_weights+0x3c0>)
 800babe:	4413      	add	r3, r2
 800bac0:	4a33      	ldr	r2, [pc, #204]	; (800bb90 <phase_1_configure_weights+0x3b8>)
 800bac2:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800bac4:	4b35      	ldr	r3, [pc, #212]	; (800bb9c <phase_1_configure_weights+0x3c4>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bacc:	4a33      	ldr	r2, [pc, #204]	; (800bb9c <phase_1_configure_weights+0x3c4>)
 800bace:	6013      	str	r3, [r2, #0]
    eltwise_2_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800bad0:	4b30      	ldr	r3, [pc, #192]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	4b32      	ldr	r3, [pc, #200]	; (800bba0 <phase_1_configure_weights+0x3c8>)
 800bad6:	4413      	add	r3, r2
 800bad8:	4a30      	ldr	r2, [pc, #192]	; (800bb9c <phase_1_configure_weights+0x3c4>)
 800bada:	6093      	str	r3, [r2, #8]
    eltwise_2_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800badc:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	4b2f      	ldr	r3, [pc, #188]	; (800bba0 <phase_1_configure_weights+0x3c8>)
 800bae2:	4413      	add	r3, r2
 800bae4:	4a2d      	ldr	r2, [pc, #180]	; (800bb9c <phase_1_configure_weights+0x3c4>)
 800bae6:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_scale_array.format |= AI_FMT_FLAG_CONST;
 800bae8:	4b2e      	ldr	r3, [pc, #184]	; (800bba4 <phase_1_configure_weights+0x3cc>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800baf0:	4a2c      	ldr	r2, [pc, #176]	; (800bba4 <phase_1_configure_weights+0x3cc>)
 800baf2:	6013      	str	r3, [r2, #0]
    eltwise_5_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800baf4:	4b27      	ldr	r3, [pc, #156]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	4b2b      	ldr	r3, [pc, #172]	; (800bba8 <phase_1_configure_weights+0x3d0>)
 800bafa:	4413      	add	r3, r2
 800bafc:	4a29      	ldr	r2, [pc, #164]	; (800bba4 <phase_1_configure_weights+0x3cc>)
 800bafe:	6093      	str	r3, [r2, #8]
    eltwise_5_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800bb00:	4b24      	ldr	r3, [pc, #144]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	4b28      	ldr	r3, [pc, #160]	; (800bba8 <phase_1_configure_weights+0x3d0>)
 800bb06:	4413      	add	r3, r2
 800bb08:	4a26      	ldr	r2, [pc, #152]	; (800bba4 <phase_1_configure_weights+0x3cc>)
 800bb0a:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800bb0c:	4b27      	ldr	r3, [pc, #156]	; (800bbac <phase_1_configure_weights+0x3d4>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb14:	4a25      	ldr	r2, [pc, #148]	; (800bbac <phase_1_configure_weights+0x3d4>)
 800bb16:	6013      	str	r3, [r2, #0]
    eltwise_5_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800bb18:	4b1e      	ldr	r3, [pc, #120]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	4b24      	ldr	r3, [pc, #144]	; (800bbb0 <phase_1_configure_weights+0x3d8>)
 800bb1e:	4413      	add	r3, r2
 800bb20:	4a22      	ldr	r2, [pc, #136]	; (800bbac <phase_1_configure_weights+0x3d4>)
 800bb22:	6093      	str	r3, [r2, #8]
    eltwise_5_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800bb24:	4b1b      	ldr	r3, [pc, #108]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	4b21      	ldr	r3, [pc, #132]	; (800bbb0 <phase_1_configure_weights+0x3d8>)
 800bb2a:	4413      	add	r3, r2
 800bb2c:	4a1f      	ldr	r2, [pc, #124]	; (800bbac <phase_1_configure_weights+0x3d4>)
 800bb2e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800bb30:	4b20      	ldr	r3, [pc, #128]	; (800bbb4 <phase_1_configure_weights+0x3dc>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb38:	4a1e      	ldr	r2, [pc, #120]	; (800bbb4 <phase_1_configure_weights+0x3dc>)
 800bb3a:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800bb3c:	4b15      	ldr	r3, [pc, #84]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	4b1d      	ldr	r3, [pc, #116]	; (800bbb8 <phase_1_configure_weights+0x3e0>)
 800bb42:	4413      	add	r3, r2
 800bb44:	4a1b      	ldr	r2, [pc, #108]	; (800bbb4 <phase_1_configure_weights+0x3dc>)
 800bb46:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800bb48:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	4b1a      	ldr	r3, [pc, #104]	; (800bbb8 <phase_1_configure_weights+0x3e0>)
 800bb4e:	4413      	add	r3, r2
 800bb50:	4a18      	ldr	r2, [pc, #96]	; (800bbb4 <phase_1_configure_weights+0x3dc>)
 800bb52:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800bb54:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <phase_1_configure_weights+0x3e4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb5c:	4a17      	ldr	r2, [pc, #92]	; (800bbbc <phase_1_configure_weights+0x3e4>)
 800bb5e:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800bb60:	4b0c      	ldr	r3, [pc, #48]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	4b16      	ldr	r3, [pc, #88]	; (800bbc0 <phase_1_configure_weights+0x3e8>)
 800bb66:	4413      	add	r3, r2
 800bb68:	4a14      	ldr	r2, [pc, #80]	; (800bbbc <phase_1_configure_weights+0x3e4>)
 800bb6a:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800bb6c:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <phase_1_configure_weights+0x3bc>)
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	4b13      	ldr	r3, [pc, #76]	; (800bbc0 <phase_1_configure_weights+0x3e8>)
 800bb72:	4413      	add	r3, r2
 800bb74:	4a11      	ldr	r2, [pc, #68]	; (800bbbc <phase_1_configure_weights+0x3e4>)
 800bb76:	60d3      	str	r3, [r2, #12]
    
    return true;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e005      	b.n	800bb88 <phase_1_configure_weights+0x3b0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800bb7c:	2212      	movs	r2, #18
 800bb7e:	2130      	movs	r1, #48	; 0x30
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f001 f8f1 	bl	800cd68 <ai_platform_network_set_error>
  return false;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	2000021c 	.word	0x2000021c
 800bb94:	20005e40 	.word	0x20005e40
 800bb98:	0014c328 	.word	0x0014c328
 800bb9c:	2000022c 	.word	0x2000022c
 800bba0:	0014c3a8 	.word	0x0014c3a8
 800bba4:	2000023c 	.word	0x2000023c
 800bba8:	0014c428 	.word	0x0014c428
 800bbac:	2000024c 	.word	0x2000024c
 800bbb0:	0014c4a8 	.word	0x0014c4a8
 800bbb4:	2000025c 	.word	0x2000025c
 800bbb8:	0014c528 	.word	0x0014c528
 800bbbc:	2000026c 	.word	0x2000026c
 800bbc0:	0015e528 	.word	0x0015e528

0800bbc4 <ai_phase_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_phase_1_get_error(ai_handle network)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 ffbf 	bl	800cb50 <ai_platform_network_get_error>
 800bbd2:	4603      	mov	r3, r0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <ai_phase_1_create>:

AI_API_ENTRY
ai_error ai_phase_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	2305      	movs	r3, #5
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	2301      	movs	r3, #1
 800bbf0:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <ai_phase_1_create+0x28>)
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f001 fbd1 	bl	800d39c <ai_platform_network_create>
 800bbfa:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20001308 	.word	0x20001308

0800bc08 <ai_phase_1_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_phase_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d104      	bne.n	800bc22 <ai_phase_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bc18:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <ai_phase_1_inputs_get+0x2c>)
 800bc1a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a06      	ldr	r2, [pc, #24]	; (800bc38 <ai_phase_1_inputs_get+0x30>)
 800bc20:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800bc22:	6839      	ldr	r1, [r7, #0]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 f8a5 	bl	800cd74 <ai_platform_inputs_get>
 800bc2a:	4603      	mov	r3, r0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20001308 	.word	0x20001308
 800bc38:	a1c00100 	.word	0xa1c00100

0800bc3c <ai_phase_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_phase_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <ai_phase_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800bc4c:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <ai_phase_1_outputs_get+0x2c>)
 800bc4e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a06      	ldr	r2, [pc, #24]	; (800bc6c <ai_phase_1_outputs_get+0x30>)
 800bc54:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fa17 	bl	800d08c <ai_platform_outputs_get>
 800bc5e:	4603      	mov	r3, r0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3708      	adds	r7, #8
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20001308 	.word	0x20001308
 800bc6c:	a1c00100 	.word	0xa1c00100

0800bc70 <ai_phase_1_init>:
}

AI_API_ENTRY
ai_bool ai_phase_1_init(
  ai_handle network, const ai_network_params* params)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f001 fd67 	bl	800d750 <ai_platform_network_init>
 800bc82:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <ai_phase_1_init+0x1e>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	e028      	b.n	800bce0 <ai_phase_1_init+0x70>

  ai_bool ok = true;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_weights(net_ctx, params);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f7ff fd9f 	bl	800b7d8 <phase_1_configure_weights>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	7afb      	ldrb	r3, [r7, #11]
 800bca0:	4013      	ands	r3, r2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bf14      	ite	ne
 800bca6:	2301      	movne	r3, #1
 800bca8:	2300      	moveq	r3, #0
 800bcaa:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_activations(net_ctx, params);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f7ff fca8 	bl	800b604 <phase_1_configure_activations>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	7afb      	ldrb	r3, [r7, #11]
 800bcba:	4013      	ands	r3, r2
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	bf14      	ite	ne
 800bcc0:	2301      	movne	r3, #1
 800bcc2:	2300      	moveq	r3, #0
 800bcc4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 fede 	bl	800da88 <ai_platform_network_post_init>
 800bccc:	4603      	mov	r3, r0
 800bcce:	461a      	mov	r2, r3
 800bcd0:	7afb      	ldrb	r3, [r7, #11]
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	72fb      	strb	r3, [r7, #11]

  return ok;
 800bcde:	7afb      	ldrb	r3, [r7, #11]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3710      	adds	r7, #16
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <ai_phase_1_run>:


AI_API_ENTRY
ai_i32 ai_phase_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	60b9      	str	r1, [r7, #8]
 800bcf2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	68b9      	ldr	r1, [r7, #8]
 800bcf8:	68f8      	ldr	r0, [r7, #12]
 800bcfa:	f001 ffef 	bl	800dcdc <ai_platform_network_process>
 800bcfe:	4603      	mov	r3, r0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <ai_phase_1_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_activations_buffer_get(const ai_handle ptr)
{
 800bd08:	b4b0      	push	{r4, r5, r7}
 800bd0a:	b08f      	sub	sp, #60	; 0x3c
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800bd12:	4b15      	ldr	r3, [pc, #84]	; (800bd68 <ai_phase_1_data_activations_buffer_get+0x60>)
 800bd14:	61fb      	str	r3, [r7, #28]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	623b      	str	r3, [r7, #32]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd1e:	2300      	movs	r3, #0
 800bd20:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd22:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <ai_phase_1_data_activations_buffer_get+0x64>)
 800bd24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd26:	2301      	movs	r3, #1
 800bd28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	2204      	movs	r2, #4
 800bd30:	f362 231f 	bfi	r3, r2, #8, #24
 800bd34:	633b      	str	r3, [r7, #48]	; 0x30
 800bd36:	4b0e      	ldr	r3, [pc, #56]	; (800bd70 <ai_phase_1_data_activations_buffer_get+0x68>)
 800bd38:	f107 040c 	add.w	r4, r7, #12
 800bd3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bd3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bd42:	f107 030c 	add.w	r3, r7, #12
 800bd46:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_ACTIVATIONS_SIZE, 1, AI_PHASE_1_DATA_ACTIVATIONS_COUNT),
    AI_PHASE_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	461d      	mov	r5, r3
 800bd4c:	f107 041c 	add.w	r4, r7, #28
 800bd50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bd54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bd58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	373c      	adds	r7, #60	; 0x3c
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bcb0      	pop	{r4, r5, r7}
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	00040440 	.word	0x00040440
 800bd6c:	00043e80 	.word	0x00043e80
 800bd70:	08012f24 	.word	0x08012f24

0800bd74 <ai_phase_1_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_weights_buffer_get(const ai_handle ptr)
{
 800bd74:	b4b0      	push	{r4, r5, r7}
 800bd76:	b08f      	sub	sp, #60	; 0x3c
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800bd7e:	4b15      	ldr	r3, [pc, #84]	; (800bdd4 <ai_phase_1_data_weights_buffer_get+0x60>)
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	623b      	str	r3, [r7, #32]
 800bd86:	2300      	movs	r3, #0
 800bd88:	627b      	str	r3, [r7, #36]	; 0x24
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd8e:	4b12      	ldr	r3, [pc, #72]	; (800bdd8 <ai_phase_1_data_weights_buffer_get+0x64>)
 800bd90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800bd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9a:	2204      	movs	r2, #4
 800bd9c:	f362 231f 	bfi	r3, r2, #8, #24
 800bda0:	633b      	str	r3, [r7, #48]	; 0x30
 800bda2:	4b0e      	ldr	r3, [pc, #56]	; (800bddc <ai_phase_1_data_weights_buffer_get+0x68>)
 800bda4:	f107 040c 	add.w	r4, r7, #12
 800bda8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bdaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_WEIGHTS_SIZE, 1, AI_PHASE_1_DATA_WEIGHTS_COUNT),
    AI_PHASE_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	461d      	mov	r5, r3
 800bdb8:	f107 041c 	add.w	r4, r7, #28
 800bdbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdc0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bdc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	373c      	adds	r7, #60	; 0x3c
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bcb0      	pop	{r4, r5, r7}
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	40040440 	.word	0x40040440
 800bdd8:	0015e628 	.word	0x0015e628
 800bddc:	08012f34 	.word	0x08012f34

0800bde0 <ai_phase_1_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_phase_1_data_weights_get(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_phase_1_weights_table);
 800bde4:	4b02      	ldr	r3, [pc, #8]	; (800bdf0 <ai_phase_1_data_weights_get+0x10>)

}
 800bde6:	4618      	mov	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr
 800bdf0:	200013ac 	.word	0x200013ac

0800bdf4 <modelSetup>:

char word_list[WORD_LIST_SIZE][10];


int modelSetup()
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	af00      	add	r7, sp, #0
	sprintf((char*)&word_list[YES]   ,"yes");
 800bdf8:	4915      	ldr	r1, [pc, #84]	; (800be50 <modelSetup+0x5c>)
 800bdfa:	4816      	ldr	r0, [pc, #88]	; (800be54 <modelSetup+0x60>)
 800bdfc:	f005 fd1c 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[NO]    ,"no");
 800be00:	4915      	ldr	r1, [pc, #84]	; (800be58 <modelSetup+0x64>)
 800be02:	4816      	ldr	r0, [pc, #88]	; (800be5c <modelSetup+0x68>)
 800be04:	f005 fd18 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[UP]    ,"up");
 800be08:	4915      	ldr	r1, [pc, #84]	; (800be60 <modelSetup+0x6c>)
 800be0a:	4816      	ldr	r0, [pc, #88]	; (800be64 <modelSetup+0x70>)
 800be0c:	f005 fd14 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[DOWN]  ,"down");
 800be10:	4915      	ldr	r1, [pc, #84]	; (800be68 <modelSetup+0x74>)
 800be12:	4816      	ldr	r0, [pc, #88]	; (800be6c <modelSetup+0x78>)
 800be14:	f005 fd10 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[RIGHT] ,"right");
 800be18:	4915      	ldr	r1, [pc, #84]	; (800be70 <modelSetup+0x7c>)
 800be1a:	4816      	ldr	r0, [pc, #88]	; (800be74 <modelSetup+0x80>)
 800be1c:	f005 fd0c 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[LEFT]  ,"left");
 800be20:	4915      	ldr	r1, [pc, #84]	; (800be78 <modelSetup+0x84>)
 800be22:	4816      	ldr	r0, [pc, #88]	; (800be7c <modelSetup+0x88>)
 800be24:	f005 fd08 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[STOP]  ,"stop");
 800be28:	4915      	ldr	r1, [pc, #84]	; (800be80 <modelSetup+0x8c>)
 800be2a:	4816      	ldr	r0, [pc, #88]	; (800be84 <modelSetup+0x90>)
 800be2c:	f005 fd04 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[GO]    ,"go");
 800be30:	4915      	ldr	r1, [pc, #84]	; (800be88 <modelSetup+0x94>)
 800be32:	4816      	ldr	r0, [pc, #88]	; (800be8c <modelSetup+0x98>)
 800be34:	f005 fd00 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[ON]    ,"on");
 800be38:	4915      	ldr	r1, [pc, #84]	; (800be90 <modelSetup+0x9c>)
 800be3a:	4816      	ldr	r0, [pc, #88]	; (800be94 <modelSetup+0xa0>)
 800be3c:	f005 fcfc 	bl	8011838 <siprintf>
	sprintf((char*)&word_list[OFF]   ,"off");
 800be40:	4915      	ldr	r1, [pc, #84]	; (800be98 <modelSetup+0xa4>)
 800be42:	4816      	ldr	r0, [pc, #88]	; (800be9c <modelSetup+0xa8>)
 800be44:	f005 fcf8 	bl	8011838 <siprintf>


	  return AI_OK;
 800be48:	2300      	movs	r3, #0


}
 800be4a:	4618      	mov	r0, r3
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	08012f54 	.word	0x08012f54
 800be54:	20005f30 	.word	0x20005f30
 800be58:	08012f58 	.word	0x08012f58
 800be5c:	20005f3a 	.word	0x20005f3a
 800be60:	08012f5c 	.word	0x08012f5c
 800be64:	20005f44 	.word	0x20005f44
 800be68:	08012f60 	.word	0x08012f60
 800be6c:	20005f4e 	.word	0x20005f4e
 800be70:	08012f68 	.word	0x08012f68
 800be74:	20005f58 	.word	0x20005f58
 800be78:	08012f70 	.word	0x08012f70
 800be7c:	20005f62 	.word	0x20005f62
 800be80:	08012f78 	.word	0x08012f78
 800be84:	20005f6c 	.word	0x20005f6c
 800be88:	08012f80 	.word	0x08012f80
 800be8c:	20005f76 	.word	0x20005f76
 800be90:	08012f84 	.word	0x08012f84
 800be94:	20005f80 	.word	0x20005f80
 800be98:	08012f88 	.word	0x08012f88
 800be9c:	20005f8a 	.word	0x20005f8a

0800bea0 <modelRun>:

ModelOutput modelRun(float* input)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	f5ad 2d97 	sub.w	sp, sp, #309248	; 0x4b800
 800bea6:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 800beaa:	af00      	add	r7, sp, #0
 800beac:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800beb0:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 800beb4:	6018      	str	r0, [r3, #0]

	ai_error ai_err;
	  AI_ALIGNED(4) ai_u8 activations[AI_PHASE_1_DATA_ACTIVATIONS_SIZE];
	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
		AI_PHASE_1_DATA_WEIGHTS(ai_phase_1_data_weights_get()),
 800beb6:	f7ff ff93 	bl	800bde0 <ai_phase_1_data_weights_get>
 800beba:	4602      	mov	r2, r0
 800bebc:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800bec0:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800bec4:	4611      	mov	r1, r2
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff ff54 	bl	800bd74 <ai_phase_1_data_weights_buffer_get>
		AI_PHASE_1_DATA_ACTIVATIONS(activations)
 800becc:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800bed0:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800bed4:	f103 021c 	add.w	r2, r3, #28
 800bed8:	4b7c      	ldr	r3, [pc, #496]	; (800c0cc <modelRun+0x22c>)
 800beda:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bede:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bee2:	443b      	add	r3, r7
 800bee4:	4619      	mov	r1, r3
 800bee6:	4610      	mov	r0, r2
 800bee8:	f7ff ff0e 	bl	800bd08 <ai_phase_1_data_activations_buffer_get>
	  };

	  // Create instance of neural network
	  ai_err = ai_phase_1_create(&phase_1, AI_PHASE_1_DATA_CONFIG);
 800beec:	4b78      	ldr	r3, [pc, #480]	; (800c0d0 <modelRun+0x230>)
 800beee:	443b      	add	r3, r7
 800bef0:	2100      	movs	r1, #0
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7ff fe72 	bl	800bbdc <ai_phase_1_create>
 800bef8:	4602      	mov	r2, r0
 800befa:	4b76      	ldr	r3, [pc, #472]	; (800c0d4 <modelRun+0x234>)
 800befc:	443b      	add	r3, r7
 800befe:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800bf02:	601a      	str	r2, [r3, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 800bf04:	4b73      	ldr	r3, [pc, #460]	; (800c0d4 <modelRun+0x234>)
 800bf06:	443b      	add	r3, r7
 800bf08:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d001      	beq.n	800bf16 <modelRun+0x76>
	  {
		return 2;
 800bf12:	2302      	movs	r3, #2
 800bf14:	e0d3      	b.n	800c0be <modelRun+0x21e>
	  }

		// Initialize neural network
		if (!ai_phase_1_init(phase_1, &ai_params))
 800bf16:	4b6e      	ldr	r3, [pc, #440]	; (800c0d0 <modelRun+0x230>)
 800bf18:	443b      	add	r3, r7
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	4b6e      	ldr	r3, [pc, #440]	; (800c0d8 <modelRun+0x238>)
 800bf1e:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bf22:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bf26:	443b      	add	r3, r7
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7ff fea0 	bl	800bc70 <ai_phase_1_init>
 800bf30:	4603      	mov	r3, r0
 800bf32:	f083 0301 	eor.w	r3, r3, #1
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d001      	beq.n	800bf40 <modelRun+0xa0>
		{
		  return 1;
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e0be      	b.n	800c0be <modelRun+0x21e>
		}
		// Initialize wrapper structs that hold pointers to data and info about the
		  // data (tensor height, width, channels)
		  ai_input  = ai_phase_1_inputs_get(phase_1, 0);
 800bf40:	4b63      	ldr	r3, [pc, #396]	; (800c0d0 <modelRun+0x230>)
 800bf42:	443b      	add	r3, r7
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	2100      	movs	r1, #0
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fe5d 	bl	800bc08 <ai_phase_1_inputs_get>
 800bf4e:	4b63      	ldr	r3, [pc, #396]	; (800c0dc <modelRun+0x23c>)
 800bf50:	443b      	add	r3, r7
 800bf52:	6018      	str	r0, [r3, #0]

		  ai_output = AI_PHASE_1_OUT;
 800bf54:	2100      	movs	r1, #0
 800bf56:	2000      	movs	r0, #0
 800bf58:	f7ff fe70 	bl	800bc3c <ai_phase_1_outputs_get>
 800bf5c:	4b60      	ldr	r3, [pc, #384]	; (800c0e0 <modelRun+0x240>)
 800bf5e:	443b      	add	r3, r7
 800bf60:	6018      	str	r0, [r3, #0]


		  // Set pointers wrapper structs to our data buffers
		  //ai_input[0].n_batches = 1;
		  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800bf62:	4b5e      	ldr	r3, [pc, #376]	; (800c0dc <modelRun+0x23c>)
 800bf64:	443b      	add	r3, r7
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	4b5e      	ldr	r3, [pc, #376]	; (800c0e4 <modelRun+0x244>)
 800bf6a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bf6e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bf72:	443b      	add	r3, r7
 800bf74:	6053      	str	r3, [r2, #4]
		  //ai_output[0].n_batches = 1;
	float y_val[10];
	// Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800bf76:	2300      	movs	r3, #0
 800bf78:	4a5b      	ldr	r2, [pc, #364]	; (800c0e8 <modelRun+0x248>)
 800bf7a:	443a      	add	r2, r7
 800bf7c:	6013      	str	r3, [r2, #0]
 800bf7e:	e01d      	b.n	800bfbc <modelRun+0x11c>
	{
		((ai_float *)in_data)[i] = (ai_float)input[i];
 800bf80:	4b59      	ldr	r3, [pc, #356]	; (800c0e8 <modelRun+0x248>)
 800bf82:	443b      	add	r3, r7
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 800bf8c:	f6a2 5234 	subw	r2, r2, #3380	; 0xd34
 800bf90:	6812      	ldr	r2, [r2, #0]
 800bf92:	441a      	add	r2, r3
 800bf94:	4b54      	ldr	r3, [pc, #336]	; (800c0e8 <modelRun+0x248>)
 800bf96:	443b      	add	r3, r7
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	0099      	lsls	r1, r3, #2
 800bf9c:	4b51      	ldr	r3, [pc, #324]	; (800c0e4 <modelRun+0x244>)
 800bf9e:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800bfa2:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800bfa6:	443b      	add	r3, r7
 800bfa8:	440b      	add	r3, r1
 800bfaa:	6812      	ldr	r2, [r2, #0]
 800bfac:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800bfae:	4b4e      	ldr	r3, [pc, #312]	; (800c0e8 <modelRun+0x248>)
 800bfb0:	443b      	add	r3, r7
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	4a4c      	ldr	r2, [pc, #304]	; (800c0e8 <modelRun+0x248>)
 800bfb8:	443a      	add	r2, r7
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	4b4a      	ldr	r3, [pc, #296]	; (800c0e8 <modelRun+0x248>)
 800bfbe:	443b      	add	r3, r7
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 800bfc6:	d3db      	bcc.n	800bf80 <modelRun+0xe0>
	}


	// Perform inference
	nbatch = ai_phase_1_run(phase_1, &ai_input[0], &ai_output[0]);
 800bfc8:	4b41      	ldr	r3, [pc, #260]	; (800c0d0 <modelRun+0x230>)
 800bfca:	443b      	add	r3, r7
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a44      	ldr	r2, [pc, #272]	; (800c0e0 <modelRun+0x240>)
 800bfd0:	443a      	add	r2, r7
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	4941      	ldr	r1, [pc, #260]	; (800c0dc <modelRun+0x23c>)
 800bfd6:	4439      	add	r1, r7
 800bfd8:	6809      	ldr	r1, [r1, #0]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fe84 	bl	800bce8 <ai_phase_1_run>
 800bfe0:	4b42      	ldr	r3, [pc, #264]	; (800c0ec <modelRun+0x24c>)
 800bfe2:	443b      	add	r3, r7
 800bfe4:	6018      	str	r0, [r3, #0]
	if (nbatch != 1) {
 800bfe6:	4b41      	ldr	r3, [pc, #260]	; (800c0ec <modelRun+0x24c>)
 800bfe8:	443b      	add	r3, r7
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d00b      	beq.n	800c008 <modelRun+0x168>
		ai_err =  ai_phase_1_get_error(phase_1);
 800bff0:	4b37      	ldr	r3, [pc, #220]	; (800c0d0 <modelRun+0x230>)
 800bff2:	443b      	add	r3, r7
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff fde4 	bl	800bbc4 <ai_phase_1_get_error>
 800bffc:	4602      	mov	r2, r0
 800bffe:	4b35      	ldr	r3, [pc, #212]	; (800c0d4 <modelRun+0x234>)
 800c000:	443b      	add	r3, r7
 800c002:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800c006:	601a      	str	r2, [r3, #0]
	}
	float max = 0;
 800c008:	f04f 0300 	mov.w	r3, #0
 800c00c:	4a38      	ldr	r2, [pc, #224]	; (800c0f0 <modelRun+0x250>)
 800c00e:	443a      	add	r2, r7
 800c010:	6013      	str	r3, [r2, #0]
	int max_ind = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	4a37      	ldr	r2, [pc, #220]	; (800c0f4 <modelRun+0x254>)
 800c016:	443a      	add	r2, r7
 800c018:	6013      	str	r3, [r2, #0]
	for (int i =0; i<10; i++)
 800c01a:	2300      	movs	r3, #0
 800c01c:	4a36      	ldr	r2, [pc, #216]	; (800c0f8 <modelRun+0x258>)
 800c01e:	443a      	add	r2, r7
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	e043      	b.n	800c0ac <modelRun+0x20c>
	{
		// Read output (predicted y) of neural network
		y_val[i] = ((float *)out_data)[i];
 800c024:	4b34      	ldr	r3, [pc, #208]	; (800c0f8 <modelRun+0x258>)
 800c026:	443b      	add	r3, r7
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	009a      	lsls	r2, r3, #2
 800c02c:	4b33      	ldr	r3, [pc, #204]	; (800c0fc <modelRun+0x25c>)
 800c02e:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800c032:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800c036:	443b      	add	r3, r7
 800c038:	4413      	add	r3, r2
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800c040:	f6a3 512c 	subw	r1, r3, #3372	; 0xd2c
 800c044:	4b2c      	ldr	r3, [pc, #176]	; (800c0f8 <modelRun+0x258>)
 800c046:	443b      	add	r3, r7
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	601a      	str	r2, [r3, #0]
		if (y_val[i]>max)
 800c050:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800c054:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800c058:	4b27      	ldr	r3, [pc, #156]	; (800c0f8 <modelRun+0x258>)
 800c05a:	443b      	add	r3, r7
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	edd3 7a00 	vldr	s15, [r3]
 800c066:	4b22      	ldr	r3, [pc, #136]	; (800c0f0 <modelRun+0x250>)
 800c068:	443b      	add	r3, r7
 800c06a:	ed93 7a00 	vldr	s14, [r3]
 800c06e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c076:	d512      	bpl.n	800c09e <modelRun+0x1fe>
		{
			max_ind = i;
 800c078:	4b1f      	ldr	r3, [pc, #124]	; (800c0f8 <modelRun+0x258>)
 800c07a:	443b      	add	r3, r7
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a1d      	ldr	r2, [pc, #116]	; (800c0f4 <modelRun+0x254>)
 800c080:	443a      	add	r2, r7
 800c082:	6013      	str	r3, [r2, #0]
			max  = y_val[i];
 800c084:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800c088:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800c08c:	4b1a      	ldr	r3, [pc, #104]	; (800c0f8 <modelRun+0x258>)
 800c08e:	443b      	add	r3, r7
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <modelRun+0x250>)
 800c09a:	443a      	add	r2, r7
 800c09c:	6013      	str	r3, [r2, #0]
	for (int i =0; i<10; i++)
 800c09e:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <modelRun+0x258>)
 800c0a0:	443b      	add	r3, r7
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4a14      	ldr	r2, [pc, #80]	; (800c0f8 <modelRun+0x258>)
 800c0a8:	443a      	add	r2, r7
 800c0aa:	6013      	str	r3, [r2, #0]
 800c0ac:	4b12      	ldr	r3, [pc, #72]	; (800c0f8 <modelRun+0x258>)
 800c0ae:	443b      	add	r3, r7
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b09      	cmp	r3, #9
 800c0b4:	ddb6      	ble.n	800c024 <modelRun+0x184>
		}
	}

	return max_ind;
 800c0b6:	4b0f      	ldr	r3, [pc, #60]	; (800c0f4 <modelRun+0x254>)
 800c0b8:	443b      	add	r3, r7
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	b2db      	uxtb	r3, r3

}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f507 2797 	add.w	r7, r7, #309248	; 0x4b800
 800c0c4:	f507 67a7 	add.w	r7, r7, #1336	; 0x538
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}
 800c0cc:	fffb4334 	.word	0xfffb4334
 800c0d0:	0004bd18 	.word	0x0004bd18
 800c0d4:	00044d38 	.word	0x00044d38
 800c0d8:	fffb42fc 	.word	0xfffb42fc
 800c0dc:	0004bd24 	.word	0x0004bd24
 800c0e0:	0004bd20 	.word	0x0004bd20
 800c0e4:	ffff81e0 	.word	0xffff81e0
 800c0e8:	0004bd34 	.word	0x0004bd34
 800c0ec:	0004bd1c 	.word	0x0004bd1c
 800c0f0:	0004bd30 	.word	0x0004bd30
 800c0f4:	0004bd2c 	.word	0x0004bd2c
 800c0f8:	0004bd28 	.word	0x0004bd28
 800c0fc:	ffff81b8 	.word	0xffff81b8

0800c100 <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800c104:	2200      	movs	r2, #0
 800c106:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c10a:	4836      	ldr	r0, [pc, #216]	; (800c1e4 <Preprocessing_Init+0xe4>)
 800c10c:	f7f6 f9e0 	bl	80024d0 <Window_Init>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d000      	beq.n	800c118 <Preprocessing_Init+0x18>
  {
    while(1);
 800c116:	e7fe      	b.n	800c116 <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800c118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c11c:	4832      	ldr	r0, [pc, #200]	; (800c1e8 <Preprocessing_Init+0xe8>)
 800c11e:	f004 f9b3 	bl	8010488 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800c122:	4b32      	ldr	r3, [pc, #200]	; (800c1ec <Preprocessing_Init+0xec>)
 800c124:	4a30      	ldr	r2, [pc, #192]	; (800c1e8 <Preprocessing_Init+0xe8>)
 800c126:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800c128:	4b30      	ldr	r3, [pc, #192]	; (800c1ec <Preprocessing_Init+0xec>)
 800c12a:	2201      	movs	r2, #1
 800c12c:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800c12e:	4b2f      	ldr	r3, [pc, #188]	; (800c1ec <Preprocessing_Init+0xec>)
 800c130:	4a2c      	ldr	r2, [pc, #176]	; (800c1e4 <Preprocessing_Init+0xe4>)
 800c132:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800c134:	4b2d      	ldr	r3, [pc, #180]	; (800c1ec <Preprocessing_Init+0xec>)
 800c136:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c13a:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800c13c:	4b2b      	ldr	r3, [pc, #172]	; (800c1ec <Preprocessing_Init+0xec>)
 800c13e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c142:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800c144:	4b29      	ldr	r3, [pc, #164]	; (800c1ec <Preprocessing_Init+0xec>)
 800c146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c14a:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800c14c:	4b27      	ldr	r3, [pc, #156]	; (800c1ec <Preprocessing_Init+0xec>)
 800c14e:	4a28      	ldr	r2, [pc, #160]	; (800c1f0 <Preprocessing_Init+0xf0>)
 800c150:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800c152:	4b28      	ldr	r3, [pc, #160]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c154:	4a28      	ldr	r2, [pc, #160]	; (800c1f8 <Preprocessing_Init+0xf8>)
 800c156:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800c158:	4b26      	ldr	r3, [pc, #152]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c15a:	4a28      	ldr	r2, [pc, #160]	; (800c1fc <Preprocessing_Init+0xfc>)
 800c15c:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800c15e:	4b25      	ldr	r3, [pc, #148]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c160:	4a27      	ldr	r2, [pc, #156]	; (800c200 <Preprocessing_Init+0x100>)
 800c162:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800c164:	4b23      	ldr	r3, [pc, #140]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c166:	2280      	movs	r2, #128	; 0x80
 800c168:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800c16a:	4b22      	ldr	r3, [pc, #136]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c16c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c170:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800c172:	4b20      	ldr	r3, [pc, #128]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c174:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c178:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800c17a:	4b1e      	ldr	r3, [pc, #120]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c17c:	f04f 0200 	mov.w	r2, #0
 800c180:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800c182:	4b1c      	ldr	r3, [pc, #112]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	ee07 3a90 	vmov	s15, r3
 800c18a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800c18e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c192:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c196:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c19a:	4b16      	ldr	r3, [pc, #88]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c19c:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800c1a0:	4b14      	ldr	r3, [pc, #80]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800c1a8:	4b12      	ldr	r3, [pc, #72]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800c1ae:	4b11      	ldr	r3, [pc, #68]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800c1b4:	480f      	ldr	r0, [pc, #60]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c1b6:	f7f5 feb2 	bl	8001f1e <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800c1ba:	4b12      	ldr	r3, [pc, #72]	; (800c204 <Preprocessing_Init+0x104>)
 800c1bc:	4a0b      	ldr	r2, [pc, #44]	; (800c1ec <Preprocessing_Init+0xec>)
 800c1be:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800c1c0:	4b10      	ldr	r3, [pc, #64]	; (800c204 <Preprocessing_Init+0x104>)
 800c1c2:	4a0c      	ldr	r2, [pc, #48]	; (800c1f4 <Preprocessing_Init+0xf4>)
 800c1c4:	605a      	str	r2, [r3, #4]

  S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 800c1c6:	4b10      	ldr	r3, [pc, #64]	; (800c208 <Preprocessing_Init+0x108>)
 800c1c8:	4a0e      	ldr	r2, [pc, #56]	; (800c204 <Preprocessing_Init+0x104>)
 800c1ca:	601a      	str	r2, [r3, #0]
  S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800c1cc:	4b0e      	ldr	r3, [pc, #56]	; (800c208 <Preprocessing_Init+0x108>)
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	711a      	strb	r2, [r3, #4]
  S_LogMelSpectr.Ref = 1;
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <Preprocessing_Init+0x108>)
 800c1d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c1d8:	609a      	str	r2, [r3, #8]
  S_LogMelSpectr.TopdB = 80;
 800c1da:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <Preprocessing_Init+0x108>)
 800c1dc:	4a0b      	ldr	r2, [pc, #44]	; (800c20c <Preprocessing_Init+0x10c>)
 800c1de:	60da      	str	r2, [r3, #12]

}
 800c1e0:	bf00      	nop
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	200071b8 	.word	0x200071b8
 800c1e8:	20005f3c 	.word	0x20005f3c
 800c1ec:	20005f84 	.word	0x20005f84
 800c1f0:	200081b8 	.word	0x200081b8
 800c1f4:	20005f54 	.word	0x20005f54
 800c1f8:	2000a1b8 	.word	0x2000a1b8
 800c1fc:	2000a3b8 	.word	0x2000a3b8
 800c200:	200091b8 	.word	0x200091b8
 800c204:	20005fa0 	.word	0x20005fa0
 800c208:	20005fa8 	.word	0x20005fa8
 800c20c:	42a00000 	.word	0x42a00000

0800c210 <AudioPreprocessing_RunMethod4>:
  }
}

//Method 4: Mel scale spectrogram without normalized input and with db scale output
void AudioPreprocessing_RunMethod4(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
	uint32_t num_frames;
	//zero pads at the end of the audio buffer
	if (END_ZERO_PADDING)
	{
	  memset(&pInSignal[signal_len], 0, FRAME_LEN);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	4413      	add	r3, r2
 800c224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f005 fa0c 	bl	8011648 <memset>
	  num_frames = 1 + (signal_len) / HOP_LEN;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	0a1b      	lsrs	r3, r3, #8
 800c234:	3301      	adds	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
	else
	{
	  num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
	}

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800c238:	2300      	movs	r3, #0
 800c23a:	61fb      	str	r3, [r7, #28]
 800c23c:	e029      	b.n	800c292 <AudioPreprocessing_RunMethod4+0x82>
  {
    buf_to_float(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	025b      	lsls	r3, r3, #9
 800c242:	68fa      	ldr	r2, [r7, #12]
 800c244:	4413      	add	r3, r2
 800c246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c24a:	4916      	ldr	r1, [pc, #88]	; (800c2a4 <AudioPreprocessing_RunMethod4+0x94>)
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7f5 fcec 	bl	8001c2a <buf_to_float>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800c252:	4a15      	ldr	r2, [pc, #84]	; (800c2a8 <AudioPreprocessing_RunMethod4+0x98>)
 800c254:	4913      	ldr	r1, [pc, #76]	; (800c2a4 <AudioPreprocessing_RunMethod4+0x94>)
 800c256:	4815      	ldr	r0, [pc, #84]	; (800c2ac <AudioPreprocessing_RunMethod4+0x9c>)
 800c258:	f7f5 fd96 	bl	8001d88 <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800c25c:	2300      	movs	r3, #0
 800c25e:	61bb      	str	r3, [r7, #24]
 800c260:	e011      	b.n	800c286 <AudioPreprocessing_RunMethod4+0x76>
    {
    	pOut[num_frames * frame_index + i] = pOutColBuffer[i];
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	69fa      	ldr	r2, [r7, #28]
 800c266:	fb03 f202 	mul.w	r2, r3, r2
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	4413      	add	r3, r2
 800c274:	490c      	ldr	r1, [pc, #48]	; (800c2a8 <AudioPreprocessing_RunMethod4+0x98>)
 800c276:	69ba      	ldr	r2, [r7, #24]
 800c278:	0092      	lsls	r2, r2, #2
 800c27a:	440a      	add	r2, r1
 800c27c:	6812      	ldr	r2, [r2, #0]
 800c27e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	3301      	adds	r3, #1
 800c284:	61bb      	str	r3, [r7, #24]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	2b7f      	cmp	r3, #127	; 0x7f
 800c28a:	d9ea      	bls.n	800c262 <AudioPreprocessing_RunMethod4+0x52>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	3301      	adds	r3, #1
 800c290:	61fb      	str	r3, [r7, #28]
 800c292:	69fa      	ldr	r2, [r7, #28]
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	429a      	cmp	r2, r3
 800c298:	d3d1      	bcc.n	800c23e <AudioPreprocessing_RunMethod4+0x2e>
    }
  }
}
 800c29a:	bf00      	nop
 800c29c:	bf00      	nop
 800c29e:	3720      	adds	r7, #32
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}
 800c2a4:	20005fb8 	.word	0x20005fb8
 800c2a8:	20006fb8 	.word	0x20006fb8
 800c2ac:	20005fa8 	.word	0x20005fa8

0800c2b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a08      	ldr	r2, [pc, #32]	; (800c2dc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d103      	bne.n	800c2c8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800c2c0:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800c2c6:	e002      	b.n	800c2ce <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800c2c8:	4b06      	ldr	r3, [pc, #24]	; (800c2e4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
}
 800c2ce:	bf00      	nop
 800c2d0:	370c      	adds	r7, #12
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	200014a4 	.word	0x200014a4
 800c2e0:	20005688 	.word	0x20005688
 800c2e4:	20005690 	.word	0x20005690

0800c2e8 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a08      	ldr	r2, [pc, #32]	; (800c314 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d103      	bne.n	800c300 <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800c2f8:	4b07      	ldr	r3, [pc, #28]	; (800c318 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800c2fe:	e002      	b.n	800c306 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800c300:	4b06      	ldr	r3, [pc, #24]	; (800c31c <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
}
 800c306:	bf00      	nop
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	200014a4 	.word	0x200014a4
 800c318:	2000568c 	.word	0x2000568c
 800c31c:	20005694 	.word	0x20005694

0800c320 <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800c326:	4b59      	ldr	r3, [pc, #356]	; (800c48c <checkMicrophone+0x16c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d151      	bne.n	800c3d2 <checkMicrophone+0xb2>
 800c32e:	4b58      	ldr	r3, [pc, #352]	; (800c490 <checkMicrophone+0x170>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b01      	cmp	r3, #1
 800c334:	d14d      	bne.n	800c3d2 <checkMicrophone+0xb2>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800c336:	2300      	movs	r3, #0
 800c338:	607b      	str	r3, [r7, #4]
 800c33a:	e040      	b.n	800c3be <checkMicrophone+0x9e>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800c33c:	4b55      	ldr	r3, [pc, #340]	; (800c494 <checkMicrophone+0x174>)
 800c33e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c342:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800c346:	2b01      	cmp	r3, #1
 800c348:	d028      	beq.n	800c39c <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800c34a:	4a53      	ldr	r2, [pc, #332]	; (800c498 <checkMicrophone+0x178>)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c352:	121b      	asrs	r3, r3, #8
 800c354:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800c358:	db0b      	blt.n	800c372 <checkMicrophone+0x52>
 800c35a:	4a4f      	ldr	r2, [pc, #316]	; (800c498 <checkMicrophone+0x178>)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c362:	121b      	asrs	r3, r3, #8
 800c364:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c368:	4293      	cmp	r3, r2
 800c36a:	bfa8      	it	ge
 800c36c:	4613      	movge	r3, r2
 800c36e:	b29a      	uxth	r2, r3
 800c370:	e001      	b.n	800c376 <checkMicrophone+0x56>
 800c372:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c376:	4b47      	ldr	r3, [pc, #284]	; (800c494 <checkMicrophone+0x174>)
 800c378:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c37c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c380:	4944      	ldr	r1, [pc, #272]	; (800c494 <checkMicrophone+0x174>)
 800c382:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800c386:	4b43      	ldr	r3, [pc, #268]	; (800c494 <checkMicrophone+0x174>)
 800c388:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c38c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c390:	3301      	adds	r3, #1
 800c392:	4a40      	ldr	r2, [pc, #256]	; (800c494 <checkMicrophone+0x174>)
 800c394:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800c398:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800c39c:	4b3d      	ldr	r3, [pc, #244]	; (800c494 <checkMicrophone+0x174>)
 800c39e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c3a2:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c3a6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c3aa:	d305      	bcc.n	800c3b8 <checkMicrophone+0x98>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800c3ac:	4b39      	ldr	r3, [pc, #228]	; (800c494 <checkMicrophone+0x174>)
 800c3ae:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 0; i < 1024; i++)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	607b      	str	r3, [r7, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3c4:	dbba      	blt.n	800c33c <checkMicrophone+0x1c>
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800c3c6:	4b31      	ldr	r3, [pc, #196]	; (800c48c <checkMicrophone+0x16c>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800c3cc:	4b30      	ldr	r3, [pc, #192]	; (800c490 <checkMicrophone+0x170>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800c3d2:	4b32      	ldr	r3, [pc, #200]	; (800c49c <checkMicrophone+0x17c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d152      	bne.n	800c480 <checkMicrophone+0x160>
 800c3da:	4b31      	ldr	r3, [pc, #196]	; (800c4a0 <checkMicrophone+0x180>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d14e      	bne.n	800c480 <checkMicrophone+0x160>
	{
		for(int i = 1024; i < 2048; i++)
 800c3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3e6:	603b      	str	r3, [r7, #0]
 800c3e8:	e040      	b.n	800c46c <checkMicrophone+0x14c>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800c3ea:	4b2a      	ldr	r3, [pc, #168]	; (800c494 <checkMicrophone+0x174>)
 800c3ec:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c3f0:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d028      	beq.n	800c44a <checkMicrophone+0x12a>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800c3f8:	4a27      	ldr	r2, [pc, #156]	; (800c498 <checkMicrophone+0x178>)
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c400:	121b      	asrs	r3, r3, #8
 800c402:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800c406:	db0b      	blt.n	800c420 <checkMicrophone+0x100>
 800c408:	4a23      	ldr	r2, [pc, #140]	; (800c498 <checkMicrophone+0x178>)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c410:	121b      	asrs	r3, r3, #8
 800c412:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c416:	4293      	cmp	r3, r2
 800c418:	bfa8      	it	ge
 800c41a:	4613      	movge	r3, r2
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	e001      	b.n	800c424 <checkMicrophone+0x104>
 800c420:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c424:	4b1b      	ldr	r3, [pc, #108]	; (800c494 <checkMicrophone+0x174>)
 800c426:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c42a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c42e:	4919      	ldr	r1, [pc, #100]	; (800c494 <checkMicrophone+0x174>)
 800c430:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800c434:	4b17      	ldr	r3, [pc, #92]	; (800c494 <checkMicrophone+0x174>)
 800c436:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c43a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c43e:	3301      	adds	r3, #1
 800c440:	4a14      	ldr	r2, [pc, #80]	; (800c494 <checkMicrophone+0x174>)
 800c442:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800c446:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800c44a:	4b12      	ldr	r3, [pc, #72]	; (800c494 <checkMicrophone+0x174>)
 800c44c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c450:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c454:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800c458:	d305      	bcc.n	800c466 <checkMicrophone+0x146>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800c45a:	4b0e      	ldr	r3, [pc, #56]	; (800c494 <checkMicrophone+0x174>)
 800c45c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 1024; i < 2048; i++)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	3301      	adds	r3, #1
 800c46a:	603b      	str	r3, [r7, #0]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c472:	dbba      	blt.n	800c3ea <checkMicrophone+0xca>
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800c474:	4b09      	ldr	r3, [pc, #36]	; (800c49c <checkMicrophone+0x17c>)
 800c476:	2200      	movs	r2, #0
 800c478:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800c47a:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <checkMicrophone+0x180>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	601a      	str	r2, [r3, #0]
	}
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	20005688 	.word	0x20005688
 800c490:	20005690 	.word	0x20005690
 800c494:	2000a5b8 	.word	0x2000a5b8
 800c498:	20001688 	.word	0x20001688
 800c49c:	2000568c 	.word	0x2000568c
 800c4a0:	20005694 	.word	0x20005694

0800c4a4 <get_date>:
extern RTC_HandleTypeDef hrtc;


//returns a string containing current date
char* get_date( char* date)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800c4ac:	f107 030c 	add.w	r3, r7, #12
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	480a      	ldr	r0, [pc, #40]	; (800c4e0 <get_date+0x3c>)
 800c4b6:	f7f9 fb7f 	bl	8005bb8 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	7b7b      	ldrb	r3, [r7, #13]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
 800c4c4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4905      	ldr	r1, [pc, #20]	; (800c4e4 <get_date+0x40>)
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f005 f9b2 	bl	8011838 <siprintf>

	 return date;
 800c4d4:	687b      	ldr	r3, [r7, #4]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	20005698 	.word	0x20005698
 800c4e4:	08012f8c 	.word	0x08012f8c

0800c4e8 <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08c      	sub	sp, #48	; 0x30
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800c4f0:	2364      	movs	r3, #100	; 0x64
 800c4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4f6:	236d      	movs	r3, #109	; 0x6d
 800c4f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4fc:	2379      	movs	r3, #121	; 0x79
 800c4fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c502:	2368      	movs	r3, #104	; 0x68
 800c504:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800c508:	236d      	movs	r3, #109	; 0x6d
 800c50a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c50e:	2373      	movs	r3, #115	; 0x73
 800c510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	2200      	movs	r2, #0
 800c51a:	4619      	mov	r1, r3
 800c51c:	480c      	ldr	r0, [pc, #48]	; (800c550 <get_time_filename+0x68>)
 800c51e:	f7f9 fa69 	bl	80059f4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800c522:	f107 0308 	add.w	r3, r7, #8
 800c526:	2200      	movs	r2, #0
 800c528:	4619      	mov	r1, r3
 800c52a:	4809      	ldr	r0, [pc, #36]	; (800c550 <get_time_filename+0x68>)
 800c52c:	f7f9 fb44 	bl	8005bb8 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800c530:	7b3b      	ldrb	r3, [r7, #12]
 800c532:	461a      	mov	r2, r3
 800c534:	7b7b      	ldrb	r3, [r7, #13]
 800c536:	4619      	mov	r1, r3
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	460b      	mov	r3, r1
 800c53e:	4905      	ldr	r1, [pc, #20]	; (800c554 <get_time_filename+0x6c>)
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f005 f979 	bl	8011838 <siprintf>
	 return name;
 800c546:	687b      	ldr	r3, [r7, #4]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3728      	adds	r7, #40	; 0x28
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20005698 	.word	0x20005698
 800c554:	08012f8c 	.word	0x08012f8c

0800c558 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800c55c:	2200      	movs	r2, #0
 800c55e:	4906      	ldr	r1, [pc, #24]	; (800c578 <SDInit+0x20>)
 800c560:	4806      	ldr	r0, [pc, #24]	; (800c57c <SDInit+0x24>)
 800c562:	f7fe facb 	bl	800aafc <f_mount>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <SDInit+0x18>
	      {
	          Error_Handler();
 800c56c:	f7f4 fed0 	bl	8001310 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	2000599c 	.word	0x2000599c
 800c57c:	200059a0 	.word	0x200059a0

0800c580 <createFile>:

int createFile(char* file_name)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800c588:	220a      	movs	r2, #10
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	4807      	ldr	r0, [pc, #28]	; (800c5ac <createFile+0x2c>)
 800c58e:	f7fe fafb 	bl	800ab88 <f_open>
 800c592:	4603      	mov	r3, r0
 800c594:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <createFile+0x22>
	  {
		  return -1;
 800c59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5a0:	e000      	b.n	800c5a4 <createFile+0x24>
	  }
	  return 0;
 800c5a2:	2300      	movs	r3, #0

}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20005bd0 	.word	0x20005bd0

0800c5b0 <writeToFile>:
int writeToFile(char* text, int size)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	f107 030c 	add.w	r3, r7, #12
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	4804      	ldr	r0, [pc, #16]	; (800c5d4 <writeToFile+0x24>)
 800c5c4:	f7fe fc9e 	bl	800af04 <f_write>
	return byteswritten;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20005bd0 	.word	0x20005bd0

0800c5d8 <SDclose>:
int SDclose()
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800c5dc:	4802      	ldr	r0, [pc, #8]	; (800c5e8 <SDclose+0x10>)
 800c5de:	f7fe fe84 	bl	800b2ea <f_close>
	return 0;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	20005bd0 	.word	0x20005bd0

0800c5ec <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800c5f6:	88fb      	ldrh	r3, [r7, #6]
 800c5f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5fc:	d10a      	bne.n	800c614 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800c5fe:	4b09      	ldr	r3, [pc, #36]	; (800c624 <HAL_GPIO_EXTI_Callback+0x38>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	bf0c      	ite	eq
 800c606:	2301      	moveq	r3, #1
 800c608:	2300      	movne	r3, #0
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	461a      	mov	r2, r3
 800c60e:	4b05      	ldr	r3, [pc, #20]	; (800c624 <HAL_GPIO_EXTI_Callback+0x38>)
 800c610:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800c612:	e000      	b.n	800c616 <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800c614:	bf00      	nop
}
 800c616:	bf00      	nop
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20001684 	.word	0x20001684

0800c628 <ledsShowValue>:

void ledsShowValue(int value)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !((value)&0x1));
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	bf0c      	ite	eq
 800c63a:	2301      	moveq	r3, #1
 800c63c:	2300      	movne	r3, #0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c646:	4817      	ldr	r0, [pc, #92]	; (800c6a4 <ledsShowValue+0x7c>)
 800c648:	f7f7 fe06 	bl	8004258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !((value>>1)&0x1));
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	bf0c      	ite	eq
 800c656:	2301      	moveq	r3, #1
 800c658:	2300      	movne	r3, #0
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	461a      	mov	r2, r3
 800c65e:	2101      	movs	r1, #1
 800c660:	4811      	ldr	r0, [pc, #68]	; (800c6a8 <ledsShowValue+0x80>)
 800c662:	f7f7 fdf9 	bl	8004258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !((value>>2)&0x1));
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f003 0304 	and.w	r3, r3, #4
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bf0c      	ite	eq
 800c670:	2301      	moveq	r3, #1
 800c672:	2300      	movne	r3, #0
 800c674:	b2db      	uxtb	r3, r3
 800c676:	461a      	mov	r2, r3
 800c678:	2102      	movs	r1, #2
 800c67a:	480b      	ldr	r0, [pc, #44]	; (800c6a8 <ledsShowValue+0x80>)
 800c67c:	f7f7 fdec 	bl	8004258 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !((value>>3)&0x1));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f003 0308 	and.w	r3, r3, #8
 800c686:	2b00      	cmp	r3, #0
 800c688:	bf0c      	ite	eq
 800c68a:	2301      	moveq	r3, #1
 800c68c:	2300      	movne	r3, #0
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	461a      	mov	r2, r3
 800c692:	2108      	movs	r1, #8
 800c694:	4804      	ldr	r0, [pc, #16]	; (800c6a8 <ledsShowValue+0x80>)
 800c696:	f7f7 fddf 	bl	8004258 <HAL_GPIO_WritePin>
}
 800c69a:	bf00      	nop
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	40022000 	.word	0x40022000
 800c6a8:	40022400 	.word	0x40022400

0800c6ac <WavProcess_EncInit>:
extern AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800c6b6:	4b21      	ldr	r3, [pc, #132]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6b8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c6bc:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800c6be:	4b1f      	ldr	r3, [pc, #124]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800c6c4:	4b1d      	ldr	r3, [pc, #116]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6c6:	2210      	movs	r2, #16
 800c6c8:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800c6ca:	4b1c      	ldr	r3, [pc, #112]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6cc:	4a1c      	ldr	r2, [pc, #112]	; (800c740 <WavProcess_EncInit+0x94>)
 800c6ce:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800c6d0:	4b1a      	ldr	r3, [pc, #104]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6d2:	222c      	movs	r2, #44	; 0x2c
 800c6d4:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c6d6:	4b19      	ldr	r3, [pc, #100]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6d8:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800c6da:	4a18      	ldr	r2, [pc, #96]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6dc:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800c6de:	08d2      	lsrs	r2, r2, #3
 800c6e0:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c6e2:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800c6e6:	4a15      	ldr	r2, [pc, #84]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6e8:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800c6ea:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c6ee:	4a13      	ldr	r2, [pc, #76]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6f0:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800c6f2:	4b12      	ldr	r3, [pc, #72]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6f4:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800c6f6:	4b11      	ldr	r3, [pc, #68]	; (800c73c <WavProcess_EncInit+0x90>)
 800c6f8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800c6fa:	08db      	lsrs	r3, r3, #3
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	fb12 f303 	smulbb	r3, r2, r3
 800c702:	b29a      	uxth	r2, r3
 800c704:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <WavProcess_EncInit+0x90>)
 800c706:	841a      	strh	r2, [r3, #32]
  BufferCtl.size = BufferCtl.fptr * 2;
 800c708:	4b0e      	ldr	r3, [pc, #56]	; (800c744 <WavProcess_EncInit+0x98>)
 800c70a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c70e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	4a0b      	ldr	r2, [pc, #44]	; (800c744 <WavProcess_EncInit+0x98>)
 800c716:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800c71a:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800c71e:	4a09      	ldr	r2, [pc, #36]	; (800c744 <WavProcess_EncInit+0x98>)
 800c720:	4906      	ldr	r1, [pc, #24]	; (800c73c <WavProcess_EncInit+0x90>)
 800c722:	6838      	ldr	r0, [r7, #0]
 800c724:	f000 f810 	bl	800c748 <WavProcess_HeaderInit>
 800c728:	4603      	mov	r3, r0
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <WavProcess_EncInit+0x86>
  {
    return 1;
 800c72e:	2301      	movs	r3, #1
 800c730:	e000      	b.n	800c734 <WavProcess_EncInit+0x88>
  }
  return 0;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	2001a0cc 	.word	0x2001a0cc
 800c740:	001d4c00 	.word	0x001d4c00
 800c744:	2000a5b8 	.word	0x2000a5b8

0800c748 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2252      	movs	r2, #82	; 0x52
 800c758:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3301      	adds	r3, #1
 800c75e:	2249      	movs	r2, #73	; 0x49
 800c760:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3302      	adds	r3, #2
 800c766:	2246      	movs	r2, #70	; 0x46
 800c768:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	3303      	adds	r3, #3
 800c76e:	2246      	movs	r2, #70	; 0x46
 800c770:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->size);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c778:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	3304      	adds	r3, #4
 800c780:	b2d2      	uxtb	r2, r2
 800c782:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->size >> 8);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c78a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c78e:	0a1a      	lsrs	r2, r3, #8
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3305      	adds	r3, #5
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->size >> 16);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c79e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c7a2:	0c1a      	lsrs	r2, r3, #16
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	3306      	adds	r3, #6
 800c7a8:	b2d2      	uxtb	r2, r2
 800c7aa:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->size >> 24);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c7b2:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c7b6:	0e1a      	lsrs	r2, r3, #24
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3307      	adds	r3, #7
 800c7bc:	b2d2      	uxtb	r2, r2
 800c7be:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	2257      	movs	r2, #87	; 0x57
 800c7c6:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3309      	adds	r3, #9
 800c7cc:	2241      	movs	r2, #65	; 0x41
 800c7ce:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	330a      	adds	r3, #10
 800c7d4:	2256      	movs	r2, #86	; 0x56
 800c7d6:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	330b      	adds	r3, #11
 800c7dc:	2245      	movs	r2, #69	; 0x45
 800c7de:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	330c      	adds	r3, #12
 800c7e4:	2266      	movs	r2, #102	; 0x66
 800c7e6:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	330d      	adds	r3, #13
 800c7ec:	226d      	movs	r2, #109	; 0x6d
 800c7ee:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	330e      	adds	r3, #14
 800c7f4:	2274      	movs	r2, #116	; 0x74
 800c7f6:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	330f      	adds	r3, #15
 800c7fc:	2220      	movs	r2, #32
 800c7fe:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3310      	adds	r3, #16
 800c804:	2210      	movs	r2, #16
 800c806:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3311      	adds	r3, #17
 800c80c:	2200      	movs	r2, #0
 800c80e:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3312      	adds	r3, #18
 800c814:	2200      	movs	r2, #0
 800c816:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3313      	adds	r3, #19
 800c81c:	2200      	movs	r2, #0
 800c81e:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3314      	adds	r3, #20
 800c824:	2201      	movs	r2, #1
 800c826:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3315      	adds	r3, #21
 800c82c:	2200      	movs	r2, #0
 800c82e:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	8ada      	ldrh	r2, [r3, #22]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	3316      	adds	r3, #22
 800c838:	b2d2      	uxtb	r2, r2
 800c83a:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	3317      	adds	r3, #23
 800c840:	2200      	movs	r2, #0
 800c842:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	699a      	ldr	r2, [r3, #24]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3318      	adds	r3, #24
 800c84c:	b2d2      	uxtb	r2, r2
 800c84e:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	0a1a      	lsrs	r2, r3, #8
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3319      	adds	r3, #25
 800c85a:	b2d2      	uxtb	r2, r2
 800c85c:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	0c1a      	lsrs	r2, r3, #16
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	331a      	adds	r3, #26
 800c868:	b2d2      	uxtb	r2, r2
 800c86a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	0e1a      	lsrs	r2, r3, #24
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	331b      	adds	r3, #27
 800c876:	b2d2      	uxtb	r2, r2
 800c878:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	69da      	ldr	r2, [r3, #28]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	331c      	adds	r3, #28
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	0a1a      	lsrs	r2, r3, #8
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	331d      	adds	r3, #29
 800c890:	b2d2      	uxtb	r2, r2
 800c892:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	0c1a      	lsrs	r2, r3, #16
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	331e      	adds	r3, #30
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	69db      	ldr	r3, [r3, #28]
 800c8a6:	0e1a      	lsrs	r2, r3, #24
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	331f      	adds	r3, #31
 800c8ac:	b2d2      	uxtb	r2, r2
 800c8ae:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	8c1a      	ldrh	r2, [r3, #32]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3320      	adds	r3, #32
 800c8b8:	b2d2      	uxtb	r2, r2
 800c8ba:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3321      	adds	r3, #33	; 0x21
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	3322      	adds	r3, #34	; 0x22
 800c8cc:	b2d2      	uxtb	r2, r2
 800c8ce:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3323      	adds	r3, #35	; 0x23
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3324      	adds	r3, #36	; 0x24
 800c8dc:	2264      	movs	r2, #100	; 0x64
 800c8de:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3325      	adds	r3, #37	; 0x25
 800c8e4:	2261      	movs	r2, #97	; 0x61
 800c8e6:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	3326      	adds	r3, #38	; 0x26
 800c8ec:	2274      	movs	r2, #116	; 0x74
 800c8ee:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3327      	adds	r3, #39	; 0x27
 800c8f4:	2261      	movs	r2, #97	; 0x61
 800c8f6:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->size -=44;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c8fe:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c902:	3b2c      	subs	r3, #44	; 0x2c
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800c90a:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  pHeader[40] = (uint8_t)(BufferCtl->size);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c914:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	3328      	adds	r3, #40	; 0x28
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->size >> 8);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c926:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c92a:	0a1a      	lsrs	r2, r3, #8
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	3329      	adds	r3, #41	; 0x29
 800c930:	b2d2      	uxtb	r2, r2
 800c932:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->size >> 16);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c93a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c93e:	0c1a      	lsrs	r2, r3, #16
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	332a      	adds	r3, #42	; 0x2a
 800c944:	b2d2      	uxtb	r2, r2
 800c946:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->size >> 24);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c94e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c952:	0e1a      	lsrs	r2, r3, #24
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	332b      	adds	r3, #43	; 0x2b
 800c958:	b2d2      	uxtb	r2, r2
 800c95a:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
	...

0800c96c <ai_buffer_get_size>:
 800c96c:	b368      	cbz	r0, 800c9ca <ai_buffer_get_size+0x5e>
 800c96e:	4b17      	ldr	r3, [pc, #92]	; (800c9cc <ai_buffer_get_size+0x60>)
 800c970:	4a17      	ldr	r2, [pc, #92]	; (800c9d0 <ai_buffer_get_size+0x64>)
 800c972:	b410      	push	{r4}
 800c974:	6804      	ldr	r4, [r0, #0]
 800c976:	4023      	ands	r3, r4
 800c978:	4293      	cmp	r3, r2
 800c97a:	d123      	bne.n	800c9c4 <ai_buffer_get_size+0x58>
 800c97c:	b311      	cbz	r1, 800c9c4 <ai_buffer_get_size+0x58>
 800c97e:	6984      	ldr	r4, [r0, #24]
 800c980:	6862      	ldr	r2, [r4, #4]
 800c982:	321f      	adds	r2, #31
 800c984:	f022 021f 	bic.w	r2, r2, #31
 800c988:	7d03      	ldrb	r3, [r0, #20]
 800c98a:	6941      	ldr	r1, [r0, #20]
 800c98c:	f1a3 0301 	sub.w	r3, r3, #1
 800c990:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800c994:	fab3 f383 	clz	r3, r3
 800c998:	095b      	lsrs	r3, r3, #5
 800c99a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800c99e:	da0c      	bge.n	800c9ba <ai_buffer_get_size+0x4e>
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d103      	bne.n	800c9ac <ai_buffer_get_size+0x40>
 800c9a4:	2802      	cmp	r0, #2
 800c9a6:	f04f 0302 	mov.w	r3, #2
 800c9aa:	d006      	beq.n	800c9ba <ai_buffer_get_size+0x4e>
 800c9ac:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	4298      	cmp	r0, r3
 800c9b4:	fb01 f202 	mul.w	r2, r1, r2
 800c9b8:	d1f2      	bne.n	800c9a0 <ai_buffer_get_size+0x34>
 800c9ba:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800c9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9c2:	4770      	bx	lr
 800c9c4:	6984      	ldr	r4, [r0, #24]
 800c9c6:	6862      	ldr	r2, [r4, #4]
 800c9c8:	e7de      	b.n	800c988 <ai_buffer_get_size+0x1c>
 800c9ca:	4770      	bx	lr
 800c9cc:	017fffff 	.word	0x017fffff
 800c9d0:	000400c0 	.word	0x000400c0

0800c9d4 <ai_buffer_array_sane>:
 800c9d4:	b138      	cbz	r0, 800c9e6 <ai_buffer_array_sane+0x12>
 800c9d6:	6843      	ldr	r3, [r0, #4]
 800c9d8:	b123      	cbz	r3, 800c9e4 <ai_buffer_array_sane+0x10>
 800c9da:	8840      	ldrh	r0, [r0, #2]
 800c9dc:	3800      	subs	r0, #0
 800c9de:	bf18      	it	ne
 800c9e0:	2001      	movne	r0, #1
 800c9e2:	4770      	bx	lr
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	4770      	bx	lr

0800c9e8 <_ai_platform_acquire_crc>:
 800c9e8:	2001      	movs	r0, #1
 800c9ea:	4770      	bx	lr

0800c9ec <_ai_platform_release_crc>:
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop

0800c9f0 <ai_platform_get_weights_map>:
 800c9f0:	2900      	cmp	r1, #0
 800c9f2:	bf18      	it	ne
 800c9f4:	2800      	cmpne	r0, #0
 800c9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f8:	bf0c      	ite	eq
 800c9fa:	2401      	moveq	r4, #1
 800c9fc:	2400      	movne	r4, #0
 800c9fe:	2a00      	cmp	r2, #0
 800ca00:	bf08      	it	eq
 800ca02:	f044 0401 	orreq.w	r4, r4, #1
 800ca06:	b114      	cbz	r4, 800ca0e <ai_platform_get_weights_map+0x1e>
 800ca08:	2400      	movs	r4, #0
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0e:	4616      	mov	r6, r2
 800ca10:	4b22      	ldr	r3, [pc, #136]	; (800ca9c <ai_platform_get_weights_map+0xac>)
 800ca12:	6812      	ldr	r2, [r2, #0]
 800ca14:	4605      	mov	r5, r0
 800ca16:	460f      	mov	r7, r1
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d022      	beq.n	800ca62 <ai_platform_get_weights_map+0x72>
 800ca1c:	6870      	ldr	r0, [r6, #4]
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d0f2      	beq.n	800ca08 <ai_platform_get_weights_map+0x18>
 800ca22:	6806      	ldr	r6, [r0, #0]
 800ca24:	429e      	cmp	r6, r3
 800ca26:	d006      	beq.n	800ca36 <ai_platform_get_weights_map+0x46>
 800ca28:	f1a1 0401 	sub.w	r4, r1, #1
 800ca2c:	6028      	str	r0, [r5, #0]
 800ca2e:	fab4 f484 	clz	r4, r4
 800ca32:	0964      	lsrs	r4, r4, #5
 800ca34:	e7e9      	b.n	800ca0a <ai_platform_get_weights_map+0x1a>
 800ca36:	3d04      	subs	r5, #4
 800ca38:	4602      	mov	r2, r0
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	e000      	b.n	800ca40 <ai_platform_get_weights_map+0x50>
 800ca3e:	4619      	mov	r1, r3
 800ca40:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800ca44:	42b3      	cmp	r3, r6
 800ca46:	d025      	beq.n	800ca94 <ai_platform_get_weights_map+0xa4>
 800ca48:	f845 3f04 	str.w	r3, [r5, #4]!
 800ca4c:	1c4b      	adds	r3, r1, #1
 800ca4e:	429f      	cmp	r7, r3
 800ca50:	d8f5      	bhi.n	800ca3e <ai_platform_get_weights_map+0x4e>
 800ca52:	d1da      	bne.n	800ca0a <ai_platform_get_weights_map+0x1a>
 800ca54:	3102      	adds	r1, #2
 800ca56:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800ca5a:	42b3      	cmp	r3, r6
 800ca5c:	d1d5      	bne.n	800ca0a <ai_platform_get_weights_map+0x1a>
 800ca5e:	2401      	movs	r4, #1
 800ca60:	e7d3      	b.n	800ca0a <ai_platform_get_weights_map+0x1a>
 800ca62:	1d30      	adds	r0, r6, #4
 800ca64:	f7ff ffb6 	bl	800c9d4 <ai_buffer_array_sane>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d0cd      	beq.n	800ca08 <ai_platform_get_weights_map+0x18>
 800ca6c:	88f3      	ldrh	r3, [r6, #6]
 800ca6e:	429f      	cmp	r7, r3
 800ca70:	d1ca      	bne.n	800ca08 <ai_platform_get_weights_map+0x18>
 800ca72:	3d04      	subs	r5, #4
 800ca74:	4622      	mov	r2, r4
 800ca76:	68b3      	ldr	r3, [r6, #8]
 800ca78:	4423      	add	r3, r4
 800ca7a:	341c      	adds	r4, #28
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	b123      	cbz	r3, 800ca8a <ai_platform_get_weights_map+0x9a>
 800ca80:	3201      	adds	r2, #1
 800ca82:	f845 3f04 	str.w	r3, [r5, #4]!
 800ca86:	4297      	cmp	r7, r2
 800ca88:	d8f5      	bhi.n	800ca76 <ai_platform_get_weights_map+0x86>
 800ca8a:	1abc      	subs	r4, r7, r2
 800ca8c:	fab4 f484 	clz	r4, r4
 800ca90:	0964      	lsrs	r4, r4, #5
 800ca92:	e7ba      	b.n	800ca0a <ai_platform_get_weights_map+0x1a>
 800ca94:	428f      	cmp	r7, r1
 800ca96:	d1b8      	bne.n	800ca0a <ai_platform_get_weights_map+0x1a>
 800ca98:	e7e1      	b.n	800ca5e <ai_platform_get_weights_map+0x6e>
 800ca9a:	bf00      	nop
 800ca9c:	a1facade 	.word	0xa1facade

0800caa0 <ai_platform_get_activations_map>:
 800caa0:	2900      	cmp	r1, #0
 800caa2:	bf18      	it	ne
 800caa4:	2800      	cmpne	r0, #0
 800caa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa8:	bf0c      	ite	eq
 800caaa:	2401      	moveq	r4, #1
 800caac:	2400      	movne	r4, #0
 800caae:	2a00      	cmp	r2, #0
 800cab0:	bf08      	it	eq
 800cab2:	f044 0401 	orreq.w	r4, r4, #1
 800cab6:	b114      	cbz	r4, 800cabe <ai_platform_get_activations_map+0x1e>
 800cab8:	2400      	movs	r4, #0
 800caba:	4620      	mov	r0, r4
 800cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cabe:	4616      	mov	r6, r2
 800cac0:	4b22      	ldr	r3, [pc, #136]	; (800cb4c <ai_platform_get_activations_map+0xac>)
 800cac2:	6812      	ldr	r2, [r2, #0]
 800cac4:	4605      	mov	r5, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	429a      	cmp	r2, r3
 800caca:	d022      	beq.n	800cb12 <ai_platform_get_activations_map+0x72>
 800cacc:	6a30      	ldr	r0, [r6, #32]
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0f2      	beq.n	800cab8 <ai_platform_get_activations_map+0x18>
 800cad2:	6806      	ldr	r6, [r0, #0]
 800cad4:	429e      	cmp	r6, r3
 800cad6:	d006      	beq.n	800cae6 <ai_platform_get_activations_map+0x46>
 800cad8:	f1a1 0401 	sub.w	r4, r1, #1
 800cadc:	6028      	str	r0, [r5, #0]
 800cade:	fab4 f484 	clz	r4, r4
 800cae2:	0964      	lsrs	r4, r4, #5
 800cae4:	e7e9      	b.n	800caba <ai_platform_get_activations_map+0x1a>
 800cae6:	3d04      	subs	r5, #4
 800cae8:	4602      	mov	r2, r0
 800caea:	4621      	mov	r1, r4
 800caec:	e000      	b.n	800caf0 <ai_platform_get_activations_map+0x50>
 800caee:	4619      	mov	r1, r3
 800caf0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800caf4:	42b3      	cmp	r3, r6
 800caf6:	d026      	beq.n	800cb46 <ai_platform_get_activations_map+0xa6>
 800caf8:	f845 3f04 	str.w	r3, [r5, #4]!
 800cafc:	1c4b      	adds	r3, r1, #1
 800cafe:	429f      	cmp	r7, r3
 800cb00:	d8f5      	bhi.n	800caee <ai_platform_get_activations_map+0x4e>
 800cb02:	d1da      	bne.n	800caba <ai_platform_get_activations_map+0x1a>
 800cb04:	3102      	adds	r1, #2
 800cb06:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800cb0a:	42b3      	cmp	r3, r6
 800cb0c:	d1d5      	bne.n	800caba <ai_platform_get_activations_map+0x1a>
 800cb0e:	2401      	movs	r4, #1
 800cb10:	e7d3      	b.n	800caba <ai_platform_get_activations_map+0x1a>
 800cb12:	f106 000c 	add.w	r0, r6, #12
 800cb16:	f7ff ff5d 	bl	800c9d4 <ai_buffer_array_sane>
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d0cc      	beq.n	800cab8 <ai_platform_get_activations_map+0x18>
 800cb1e:	89f3      	ldrh	r3, [r6, #14]
 800cb20:	429f      	cmp	r7, r3
 800cb22:	d1c9      	bne.n	800cab8 <ai_platform_get_activations_map+0x18>
 800cb24:	3d04      	subs	r5, #4
 800cb26:	4622      	mov	r2, r4
 800cb28:	6933      	ldr	r3, [r6, #16]
 800cb2a:	4423      	add	r3, r4
 800cb2c:	341c      	adds	r4, #28
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	b123      	cbz	r3, 800cb3c <ai_platform_get_activations_map+0x9c>
 800cb32:	3201      	adds	r2, #1
 800cb34:	f845 3f04 	str.w	r3, [r5, #4]!
 800cb38:	4297      	cmp	r7, r2
 800cb3a:	d8f5      	bhi.n	800cb28 <ai_platform_get_activations_map+0x88>
 800cb3c:	1abc      	subs	r4, r7, r2
 800cb3e:	fab4 f484 	clz	r4, r4
 800cb42:	0964      	lsrs	r4, r4, #5
 800cb44:	e7b9      	b.n	800caba <ai_platform_get_activations_map+0x1a>
 800cb46:	428f      	cmp	r7, r1
 800cb48:	d1b7      	bne.n	800caba <ai_platform_get_activations_map+0x1a>
 800cb4a:	e7e0      	b.n	800cb0e <ai_platform_get_activations_map+0x6e>
 800cb4c:	a1facade 	.word	0xa1facade

0800cb50 <ai_platform_network_get_error>:
 800cb50:	b510      	push	{r4, lr}
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d03f      	beq.n	800cbd6 <ai_platform_network_get_error+0x86>
 800cb56:	4b7d      	ldr	r3, [pc, #500]	; (800cd4c <ai_platform_network_get_error+0x1fc>)
 800cb58:	4604      	mov	r4, r0
 800cb5a:	6802      	ldr	r2, [r0, #0]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d13a      	bne.n	800cbd6 <ai_platform_network_get_error+0x86>
 800cb60:	f7ff ff42 	bl	800c9e8 <_ai_platform_acquire_crc>
 800cb64:	4b7a      	ldr	r3, [pc, #488]	; (800cd50 <ai_platform_network_get_error+0x200>)
 800cb66:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb70:	189a      	adds	r2, r3, r2
 800cb72:	2a01      	cmp	r2, #1
 800cb74:	f240 8086 	bls.w	800cc84 <ai_platform_network_get_error+0x134>
 800cb78:	f240 4249 	movw	r2, #1097	; 0x449
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	f000 8081 	beq.w	800cc84 <ai_platform_network_get_error+0x134>
 800cb82:	4a74      	ldr	r2, [pc, #464]	; (800cd54 <ai_platform_network_get_error+0x204>)
 800cb84:	6813      	ldr	r3, [r2, #0]
 800cb86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb8a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cb8e:	f000 8087 	beq.w	800cca0 <ai_platform_network_get_error+0x150>
 800cb92:	6813      	ldr	r3, [r2, #0]
 800cb94:	f240 4183 	movw	r1, #1155	; 0x483
 800cb98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	f000 80a9 	beq.w	800ccf4 <ai_platform_network_get_error+0x1a4>
 800cba2:	6813      	ldr	r3, [r2, #0]
 800cba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cba8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cbac:	f000 80c0 	beq.w	800cd30 <ai_platform_network_get_error+0x1e0>
 800cbb0:	6813      	ldr	r3, [r2, #0]
 800cbb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f040 8082 	bne.w	800ccc0 <ai_platform_network_get_error+0x170>
 800cbbc:	4a66      	ldr	r2, [pc, #408]	; (800cd58 <ai_platform_network_get_error+0x208>)
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	6093      	str	r3, [r2, #8]
 800cbc2:	6893      	ldr	r3, [r2, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1fc      	bne.n	800cbc2 <ai_platform_network_get_error+0x72>
 800cbc8:	4964      	ldr	r1, [pc, #400]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cbca:	4b65      	ldr	r3, [pc, #404]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cbcc:	6011      	str	r1, [r2, #0]
 800cbce:	6812      	ldr	r2, [r2, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d075      	beq.n	800ccc0 <ai_platform_network_get_error+0x170>
 800cbd4:	e7fe      	b.n	800cbd4 <ai_platform_network_get_error+0x84>
 800cbd6:	f7ff ff07 	bl	800c9e8 <_ai_platform_acquire_crc>
 800cbda:	4b5d      	ldr	r3, [pc, #372]	; (800cd50 <ai_platform_network_get_error+0x200>)
 800cbdc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbe6:	185a      	adds	r2, r3, r1
 800cbe8:	2a01      	cmp	r2, #1
 800cbea:	d929      	bls.n	800cc40 <ai_platform_network_get_error+0xf0>
 800cbec:	f240 4249 	movw	r2, #1097	; 0x449
 800cbf0:	4293      	cmp	r3, r2
 800cbf2:	d025      	beq.n	800cc40 <ai_platform_network_get_error+0xf0>
 800cbf4:	4a57      	ldr	r2, [pc, #348]	; (800cd54 <ai_platform_network_get_error+0x204>)
 800cbf6:	6813      	ldr	r3, [r2, #0]
 800cbf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cbfc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cc00:	d02b      	beq.n	800cc5a <ai_platform_network_get_error+0x10a>
 800cc02:	6813      	ldr	r3, [r2, #0]
 800cc04:	f240 4183 	movw	r1, #1155	; 0x483
 800cc08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc0c:	428b      	cmp	r3, r1
 800cc0e:	d060      	beq.n	800ccd2 <ai_platform_network_get_error+0x182>
 800cc10:	6813      	ldr	r3, [r2, #0]
 800cc12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc16:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cc1a:	d07c      	beq.n	800cd16 <ai_platform_network_get_error+0x1c6>
 800cc1c:	6813      	ldr	r3, [r2, #0]
 800cc1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d129      	bne.n	800cc7a <ai_platform_network_get_error+0x12a>
 800cc26:	4a4c      	ldr	r2, [pc, #304]	; (800cd58 <ai_platform_network_get_error+0x208>)
 800cc28:	2301      	movs	r3, #1
 800cc2a:	6093      	str	r3, [r2, #8]
 800cc2c:	6893      	ldr	r3, [r2, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1fc      	bne.n	800cc2c <ai_platform_network_get_error+0xdc>
 800cc32:	494a      	ldr	r1, [pc, #296]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cc34:	4b4a      	ldr	r3, [pc, #296]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cc36:	6011      	str	r1, [r2, #0]
 800cc38:	6812      	ldr	r2, [r2, #0]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d01d      	beq.n	800cc7a <ai_platform_network_get_error+0x12a>
 800cc3e:	e7fe      	b.n	800cc3e <ai_platform_network_get_error+0xee>
 800cc40:	4a45      	ldr	r2, [pc, #276]	; (800cd58 <ai_platform_network_get_error+0x208>)
 800cc42:	2301      	movs	r3, #1
 800cc44:	6093      	str	r3, [r2, #8]
 800cc46:	6893      	ldr	r3, [r2, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1fc      	bne.n	800cc46 <ai_platform_network_get_error+0xf6>
 800cc4c:	4943      	ldr	r1, [pc, #268]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cc4e:	4b44      	ldr	r3, [pc, #272]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cc50:	6011      	str	r1, [r2, #0]
 800cc52:	6812      	ldr	r2, [r2, #0]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d010      	beq.n	800cc7a <ai_platform_network_get_error+0x12a>
 800cc58:	e7fe      	b.n	800cc58 <ai_platform_network_get_error+0x108>
 800cc5a:	4a42      	ldr	r2, [pc, #264]	; (800cd64 <ai_platform_network_get_error+0x214>)
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cc62:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1fb      	bne.n	800cc62 <ai_platform_network_get_error+0x112>
 800cc6a:	493c      	ldr	r1, [pc, #240]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cc6c:	4b3c      	ldr	r3, [pc, #240]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cc6e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cc72:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d111      	bne.n	800cc9e <ai_platform_network_get_error+0x14e>
 800cc7a:	f7ff feb7 	bl	800c9ec <_ai_platform_release_crc>
 800cc7e:	f241 0010 	movw	r0, #4112	; 0x1010
 800cc82:	bd10      	pop	{r4, pc}
 800cc84:	4a34      	ldr	r2, [pc, #208]	; (800cd58 <ai_platform_network_get_error+0x208>)
 800cc86:	2301      	movs	r3, #1
 800cc88:	6093      	str	r3, [r2, #8]
 800cc8a:	6893      	ldr	r3, [r2, #8]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1fc      	bne.n	800cc8a <ai_platform_network_get_error+0x13a>
 800cc90:	4932      	ldr	r1, [pc, #200]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cc92:	4b33      	ldr	r3, [pc, #204]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cc94:	6011      	str	r1, [r2, #0]
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d011      	beq.n	800ccc0 <ai_platform_network_get_error+0x170>
 800cc9c:	e7fe      	b.n	800cc9c <ai_platform_network_get_error+0x14c>
 800cc9e:	e7fe      	b.n	800cc9e <ai_platform_network_get_error+0x14e>
 800cca0:	4a30      	ldr	r2, [pc, #192]	; (800cd64 <ai_platform_network_get_error+0x214>)
 800cca2:	2301      	movs	r3, #1
 800cca4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cca8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1fb      	bne.n	800cca8 <ai_platform_network_get_error+0x158>
 800ccb0:	492a      	ldr	r1, [pc, #168]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800ccb2:	4b2b      	ldr	r3, [pc, #172]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800ccb4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ccb8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d107      	bne.n	800ccd0 <ai_platform_network_get_error+0x180>
 800ccc0:	f7ff fe94 	bl	800c9ec <_ai_platform_release_crc>
 800ccc4:	f104 0010 	add.w	r0, r4, #16
 800ccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cccc:	f001 bae6 	b.w	800e29c <core_get_error>
 800ccd0:	e7fe      	b.n	800ccd0 <ai_platform_network_get_error+0x180>
 800ccd2:	4a24      	ldr	r2, [pc, #144]	; (800cd64 <ai_platform_network_get_error+0x214>)
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ccda:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1fb      	bne.n	800ccda <ai_platform_network_get_error+0x18a>
 800cce2:	491e      	ldr	r1, [pc, #120]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cce4:	4b1e      	ldr	r3, [pc, #120]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cce6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ccea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d0c3      	beq.n	800cc7a <ai_platform_network_get_error+0x12a>
 800ccf2:	e7fe      	b.n	800ccf2 <ai_platform_network_get_error+0x1a2>
 800ccf4:	4a1b      	ldr	r2, [pc, #108]	; (800cd64 <ai_platform_network_get_error+0x214>)
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ccfc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1fb      	bne.n	800ccfc <ai_platform_network_get_error+0x1ac>
 800cd04:	4915      	ldr	r1, [pc, #84]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cd06:	4b16      	ldr	r3, [pc, #88]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cd08:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cd0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d0d5      	beq.n	800ccc0 <ai_platform_network_get_error+0x170>
 800cd14:	e7fe      	b.n	800cd14 <ai_platform_network_get_error+0x1c4>
 800cd16:	4a10      	ldr	r2, [pc, #64]	; (800cd58 <ai_platform_network_get_error+0x208>)
 800cd18:	2301      	movs	r3, #1
 800cd1a:	6093      	str	r3, [r2, #8]
 800cd1c:	6893      	ldr	r3, [r2, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1fc      	bne.n	800cd1c <ai_platform_network_get_error+0x1cc>
 800cd22:	490e      	ldr	r1, [pc, #56]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cd24:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cd26:	6011      	str	r1, [r2, #0]
 800cd28:	6812      	ldr	r2, [r2, #0]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d0a5      	beq.n	800cc7a <ai_platform_network_get_error+0x12a>
 800cd2e:	e7fe      	b.n	800cd2e <ai_platform_network_get_error+0x1de>
 800cd30:	4a09      	ldr	r2, [pc, #36]	; (800cd58 <ai_platform_network_get_error+0x208>)
 800cd32:	2301      	movs	r3, #1
 800cd34:	6093      	str	r3, [r2, #8]
 800cd36:	6893      	ldr	r3, [r2, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1fc      	bne.n	800cd36 <ai_platform_network_get_error+0x1e6>
 800cd3c:	4907      	ldr	r1, [pc, #28]	; (800cd5c <ai_platform_network_get_error+0x20c>)
 800cd3e:	4b08      	ldr	r3, [pc, #32]	; (800cd60 <ai_platform_network_get_error+0x210>)
 800cd40:	6011      	str	r1, [r2, #0]
 800cd42:	6812      	ldr	r2, [r2, #0]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d0bb      	beq.n	800ccc0 <ai_platform_network_get_error+0x170>
 800cd48:	e7fe      	b.n	800cd48 <ai_platform_network_get_error+0x1f8>
 800cd4a:	bf00      	nop
 800cd4c:	a1c00100 	.word	0xa1c00100
 800cd50:	e0042000 	.word	0xe0042000
 800cd54:	5c001000 	.word	0x5c001000
 800cd58:	40023000 	.word	0x40023000
 800cd5c:	f407a5c2 	.word	0xf407a5c2
 800cd60:	b5e8b5cd 	.word	0xb5e8b5cd
 800cd64:	58024000 	.word	0x58024000

0800cd68 <ai_platform_network_set_error>:
 800cd68:	b110      	cbz	r0, 800cd70 <ai_platform_network_set_error+0x8>
 800cd6a:	3010      	adds	r0, #16
 800cd6c:	f001 ba9c 	b.w	800e2a8 <core_set_error>
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <ai_platform_inputs_get>:
 800cd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd78:	b085      	sub	sp, #20
 800cd7a:	9102      	str	r1, [sp, #8]
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	f000 8093 	beq.w	800cea8 <ai_platform_inputs_get+0x134>
 800cd82:	4baa      	ldr	r3, [pc, #680]	; (800d02c <ai_platform_inputs_get+0x2b8>)
 800cd84:	4681      	mov	r9, r0
 800cd86:	6802      	ldr	r2, [r0, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	f040 808d 	bne.w	800cea8 <ai_platform_inputs_get+0x134>
 800cd8e:	f7ff fe2b 	bl	800c9e8 <_ai_platform_acquire_crc>
 800cd92:	4ba7      	ldr	r3, [pc, #668]	; (800d030 <ai_platform_inputs_get+0x2bc>)
 800cd94:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd9e:	189a      	adds	r2, r3, r2
 800cda0:	2a01      	cmp	r2, #1
 800cda2:	f240 80da 	bls.w	800cf5a <ai_platform_inputs_get+0x1e6>
 800cda6:	f240 4249 	movw	r2, #1097	; 0x449
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	f000 80d5 	beq.w	800cf5a <ai_platform_inputs_get+0x1e6>
 800cdb0:	4aa0      	ldr	r2, [pc, #640]	; (800d034 <ai_platform_inputs_get+0x2c0>)
 800cdb2:	6813      	ldr	r3, [r2, #0]
 800cdb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdb8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800cdbc:	f000 80dc 	beq.w	800cf78 <ai_platform_inputs_get+0x204>
 800cdc0:	6813      	ldr	r3, [r2, #0]
 800cdc2:	f240 4183 	movw	r1, #1155	; 0x483
 800cdc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdca:	428b      	cmp	r3, r1
 800cdcc:	f000 810e 	beq.w	800cfec <ai_platform_inputs_get+0x278>
 800cdd0:	6813      	ldr	r3, [r2, #0]
 800cdd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cdd6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800cdda:	f000 8143 	beq.w	800d064 <ai_platform_inputs_get+0x2f0>
 800cdde:	6813      	ldr	r3, [r2, #0]
 800cde0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 8113 	beq.w	800d010 <ai_platform_inputs_get+0x29c>
 800cdea:	f7ff fdff 	bl	800c9ec <_ai_platform_release_crc>
 800cdee:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f000 80d2 	beq.w	800cf9c <ai_platform_inputs_get+0x228>
 800cdf8:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800cdfc:	f1ba 0f00 	cmp.w	sl, #0
 800ce00:	f000 80cc 	beq.w	800cf9c <ai_platform_inputs_get+0x228>
 800ce04:	2100      	movs	r1, #0
 800ce06:	f8cd 900c 	str.w	r9, [sp, #12]
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	4689      	mov	r9, r1
 800ce0e:	e016      	b.n	800ce3e <ai_platform_inputs_get+0xca>
 800ce10:	9a01      	ldr	r2, [sp, #4]
 800ce12:	2301      	movs	r3, #1
 800ce14:	f848 3002 	str.w	r3, [r8, r2]
 800ce18:	69b2      	ldr	r2, [r6, #24]
 800ce1a:	f04f 0301 	mov.w	r3, #1
 800ce1e:	6856      	ldr	r6, [r2, #4]
 800ce20:	3501      	adds	r5, #1
 800ce22:	f109 091c 	add.w	r9, r9, #28
 800ce26:	7523      	strb	r3, [r4, #20]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	6962      	ldr	r2, [r4, #20]
 800ce2c:	60a7      	str	r7, [r4, #8]
 800ce2e:	f36b 221f 	bfi	r2, fp, #8, #24
 800ce32:	6126      	str	r6, [r4, #16]
 800ce34:	61a1      	str	r1, [r4, #24]
 800ce36:	60e3      	str	r3, [r4, #12]
 800ce38:	6162      	str	r2, [r4, #20]
 800ce3a:	e9c4 0c00 	strd	r0, ip, [r4]
 800ce3e:	f8ba 3000 	ldrh.w	r3, [sl]
 800ce42:	b2ac      	uxth	r4, r5
 800ce44:	42ab      	cmp	r3, r5
 800ce46:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	f240 80b5 	bls.w	800cfba <ai_platform_inputs_get+0x246>
 800ce50:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f000 80b0 	beq.w	800cfba <ai_platform_inputs_get+0x246>
 800ce5a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800ce5e:	2e00      	cmp	r6, #0
 800ce60:	f000 80ab 	beq.w	800cfba <ai_platform_inputs_get+0x246>
 800ce64:	f8da 3008 	ldr.w	r3, [sl, #8]
 800ce68:	69b2      	ldr	r2, [r6, #24]
 800ce6a:	68f1      	ldr	r1, [r6, #12]
 800ce6c:	6810      	ldr	r0, [r2, #0]
 800ce6e:	9100      	str	r1, [sp, #0]
 800ce70:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800ce74:	68b3      	ldr	r3, [r6, #8]
 800ce76:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800ce7a:	444c      	add	r4, r9
 800ce7c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800ce80:	f003 fa5e 	bl	8010340 <ai_array_to_buffer_fmt>
 800ce84:	69b2      	ldr	r2, [r6, #24]
 800ce86:	9900      	ldr	r1, [sp, #0]
 800ce88:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800ce8c:	2f00      	cmp	r7, #0
 800ce8e:	d0c4      	beq.n	800ce1a <ai_platform_inputs_get+0xa6>
 800ce90:	2200      	movs	r2, #0
 800ce92:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800ce96:	6832      	ldr	r2, [r6, #0]
 800ce98:	607a      	str	r2, [r7, #4]
 800ce9a:	b112      	cbz	r2, 800cea2 <ai_platform_inputs_get+0x12e>
 800ce9c:	8852      	ldrh	r2, [r2, #2]
 800ce9e:	2a00      	cmp	r2, #0
 800cea0:	d1b6      	bne.n	800ce10 <ai_platform_inputs_get+0x9c>
 800cea2:	69b2      	ldr	r2, [r6, #24]
 800cea4:	2700      	movs	r7, #0
 800cea6:	e7b8      	b.n	800ce1a <ai_platform_inputs_get+0xa6>
 800cea8:	f7ff fd9e 	bl	800c9e8 <_ai_platform_acquire_crc>
 800ceac:	4b60      	ldr	r3, [pc, #384]	; (800d030 <ai_platform_inputs_get+0x2bc>)
 800ceae:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ceb8:	185a      	adds	r2, r3, r1
 800ceba:	2a01      	cmp	r2, #1
 800cebc:	d92a      	bls.n	800cf14 <ai_platform_inputs_get+0x1a0>
 800cebe:	f240 4249 	movw	r2, #1097	; 0x449
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d026      	beq.n	800cf14 <ai_platform_inputs_get+0x1a0>
 800cec6:	4a5b      	ldr	r2, [pc, #364]	; (800d034 <ai_platform_inputs_get+0x2c0>)
 800cec8:	6813      	ldr	r3, [r2, #0]
 800ceca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cece:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ced2:	d02c      	beq.n	800cf2e <ai_platform_inputs_get+0x1ba>
 800ced4:	6813      	ldr	r3, [r2, #0]
 800ced6:	f240 4183 	movw	r1, #1155	; 0x483
 800ceda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cede:	428b      	cmp	r3, r1
 800cee0:	d073      	beq.n	800cfca <ai_platform_inputs_get+0x256>
 800cee2:	6813      	ldr	r3, [r2, #0]
 800cee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cee8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ceec:	f000 80ac 	beq.w	800d048 <ai_platform_inputs_get+0x2d4>
 800cef0:	6813      	ldr	r3, [r2, #0]
 800cef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d129      	bne.n	800cf4e <ai_platform_inputs_get+0x1da>
 800cefa:	4a4f      	ldr	r2, [pc, #316]	; (800d038 <ai_platform_inputs_get+0x2c4>)
 800cefc:	2301      	movs	r3, #1
 800cefe:	6093      	str	r3, [r2, #8]
 800cf00:	6893      	ldr	r3, [r2, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d1fc      	bne.n	800cf00 <ai_platform_inputs_get+0x18c>
 800cf06:	494d      	ldr	r1, [pc, #308]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cf08:	4b4d      	ldr	r3, [pc, #308]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800cf0a:	6011      	str	r1, [r2, #0]
 800cf0c:	6812      	ldr	r2, [r2, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d01d      	beq.n	800cf4e <ai_platform_inputs_get+0x1da>
 800cf12:	e7fe      	b.n	800cf12 <ai_platform_inputs_get+0x19e>
 800cf14:	4a48      	ldr	r2, [pc, #288]	; (800d038 <ai_platform_inputs_get+0x2c4>)
 800cf16:	2301      	movs	r3, #1
 800cf18:	6093      	str	r3, [r2, #8]
 800cf1a:	6893      	ldr	r3, [r2, #8]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d1fc      	bne.n	800cf1a <ai_platform_inputs_get+0x1a6>
 800cf20:	4946      	ldr	r1, [pc, #280]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cf22:	4b47      	ldr	r3, [pc, #284]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800cf24:	6011      	str	r1, [r2, #0]
 800cf26:	6812      	ldr	r2, [r2, #0]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d010      	beq.n	800cf4e <ai_platform_inputs_get+0x1da>
 800cf2c:	e7fe      	b.n	800cf2c <ai_platform_inputs_get+0x1b8>
 800cf2e:	4a45      	ldr	r2, [pc, #276]	; (800d044 <ai_platform_inputs_get+0x2d0>)
 800cf30:	2301      	movs	r3, #1
 800cf32:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf36:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1fb      	bne.n	800cf36 <ai_platform_inputs_get+0x1c2>
 800cf3e:	493f      	ldr	r1, [pc, #252]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cf40:	4b3f      	ldr	r3, [pc, #252]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800cf42:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cf46:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d113      	bne.n	800cf76 <ai_platform_inputs_get+0x202>
 800cf4e:	f7ff fd4d 	bl	800c9ec <_ai_platform_release_crc>
 800cf52:	2000      	movs	r0, #0
 800cf54:	b005      	add	sp, #20
 800cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5a:	4a37      	ldr	r2, [pc, #220]	; (800d038 <ai_platform_inputs_get+0x2c4>)
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	6093      	str	r3, [r2, #8]
 800cf60:	6893      	ldr	r3, [r2, #8]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1fc      	bne.n	800cf60 <ai_platform_inputs_get+0x1ec>
 800cf66:	4b35      	ldr	r3, [pc, #212]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	4b35      	ldr	r3, [pc, #212]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	f43f af3b 	beq.w	800cdea <ai_platform_inputs_get+0x76>
 800cf74:	e7fe      	b.n	800cf74 <ai_platform_inputs_get+0x200>
 800cf76:	e7fe      	b.n	800cf76 <ai_platform_inputs_get+0x202>
 800cf78:	4a32      	ldr	r2, [pc, #200]	; (800d044 <ai_platform_inputs_get+0x2d0>)
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cf80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1fb      	bne.n	800cf80 <ai_platform_inputs_get+0x20c>
 800cf88:	4b2c      	ldr	r3, [pc, #176]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cf8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800cf8e:	4b2c      	ldr	r3, [pc, #176]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800cf90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cf94:	429a      	cmp	r2, r3
 800cf96:	f43f af28 	beq.w	800cdea <ai_platform_inputs_get+0x76>
 800cf9a:	e7fe      	b.n	800cf9a <ai_platform_inputs_get+0x226>
 800cf9c:	2400      	movs	r4, #0
 800cf9e:	2218      	movs	r2, #24
 800cfa0:	2111      	movs	r1, #17
 800cfa2:	f109 0010 	add.w	r0, r9, #16
 800cfa6:	f001 f97f 	bl	800e2a8 <core_set_error>
 800cfaa:	4620      	mov	r0, r4
 800cfac:	9b02      	ldr	r3, [sp, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d0d0      	beq.n	800cf54 <ai_platform_inputs_get+0x1e0>
 800cfb2:	801c      	strh	r4, [r3, #0]
 800cfb4:	b005      	add	sp, #20
 800cfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfba:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800cfbe:	2c00      	cmp	r4, #0
 800cfc0:	d0ec      	beq.n	800cf9c <ai_platform_inputs_get+0x228>
 800cfc2:	f8da 3008 	ldr.w	r3, [sl, #8]
 800cfc6:	6858      	ldr	r0, [r3, #4]
 800cfc8:	e7f0      	b.n	800cfac <ai_platform_inputs_get+0x238>
 800cfca:	4a1e      	ldr	r2, [pc, #120]	; (800d044 <ai_platform_inputs_get+0x2d0>)
 800cfcc:	2301      	movs	r3, #1
 800cfce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cfd2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1fb      	bne.n	800cfd2 <ai_platform_inputs_get+0x25e>
 800cfda:	4918      	ldr	r1, [pc, #96]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cfdc:	4b18      	ldr	r3, [pc, #96]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800cfde:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800cfe2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d0b1      	beq.n	800cf4e <ai_platform_inputs_get+0x1da>
 800cfea:	e7fe      	b.n	800cfea <ai_platform_inputs_get+0x276>
 800cfec:	4a15      	ldr	r2, [pc, #84]	; (800d044 <ai_platform_inputs_get+0x2d0>)
 800cfee:	2301      	movs	r3, #1
 800cff0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800cff4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1fb      	bne.n	800cff4 <ai_platform_inputs_get+0x280>
 800cffc:	4b0f      	ldr	r3, [pc, #60]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800cffe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d002:	4b0f      	ldr	r3, [pc, #60]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800d004:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d008:	429a      	cmp	r2, r3
 800d00a:	f43f aeee 	beq.w	800cdea <ai_platform_inputs_get+0x76>
 800d00e:	e7fe      	b.n	800d00e <ai_platform_inputs_get+0x29a>
 800d010:	4a09      	ldr	r2, [pc, #36]	; (800d038 <ai_platform_inputs_get+0x2c4>)
 800d012:	2301      	movs	r3, #1
 800d014:	6093      	str	r3, [r2, #8]
 800d016:	6893      	ldr	r3, [r2, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d1fc      	bne.n	800d016 <ai_platform_inputs_get+0x2a2>
 800d01c:	4b07      	ldr	r3, [pc, #28]	; (800d03c <ai_platform_inputs_get+0x2c8>)
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	4b07      	ldr	r3, [pc, #28]	; (800d040 <ai_platform_inputs_get+0x2cc>)
 800d022:	6812      	ldr	r2, [r2, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	f43f aee0 	beq.w	800cdea <ai_platform_inputs_get+0x76>
 800d02a:	e7fe      	b.n	800d02a <ai_platform_inputs_get+0x2b6>
 800d02c:	a1c00100 	.word	0xa1c00100
 800d030:	e0042000 	.word	0xe0042000
 800d034:	5c001000 	.word	0x5c001000
 800d038:	40023000 	.word	0x40023000
 800d03c:	f407a5c2 	.word	0xf407a5c2
 800d040:	b5e8b5cd 	.word	0xb5e8b5cd
 800d044:	58024000 	.word	0x58024000
 800d048:	4a0d      	ldr	r2, [pc, #52]	; (800d080 <ai_platform_inputs_get+0x30c>)
 800d04a:	2301      	movs	r3, #1
 800d04c:	6093      	str	r3, [r2, #8]
 800d04e:	6893      	ldr	r3, [r2, #8]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1fc      	bne.n	800d04e <ai_platform_inputs_get+0x2da>
 800d054:	490b      	ldr	r1, [pc, #44]	; (800d084 <ai_platform_inputs_get+0x310>)
 800d056:	4b0c      	ldr	r3, [pc, #48]	; (800d088 <ai_platform_inputs_get+0x314>)
 800d058:	6011      	str	r1, [r2, #0]
 800d05a:	6812      	ldr	r2, [r2, #0]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	f43f af76 	beq.w	800cf4e <ai_platform_inputs_get+0x1da>
 800d062:	e7fe      	b.n	800d062 <ai_platform_inputs_get+0x2ee>
 800d064:	4a06      	ldr	r2, [pc, #24]	; (800d080 <ai_platform_inputs_get+0x30c>)
 800d066:	2301      	movs	r3, #1
 800d068:	6093      	str	r3, [r2, #8]
 800d06a:	6893      	ldr	r3, [r2, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1fc      	bne.n	800d06a <ai_platform_inputs_get+0x2f6>
 800d070:	4b04      	ldr	r3, [pc, #16]	; (800d084 <ai_platform_inputs_get+0x310>)
 800d072:	6013      	str	r3, [r2, #0]
 800d074:	4b04      	ldr	r3, [pc, #16]	; (800d088 <ai_platform_inputs_get+0x314>)
 800d076:	6812      	ldr	r2, [r2, #0]
 800d078:	429a      	cmp	r2, r3
 800d07a:	f43f aeb6 	beq.w	800cdea <ai_platform_inputs_get+0x76>
 800d07e:	e7fe      	b.n	800d07e <ai_platform_inputs_get+0x30a>
 800d080:	40023000 	.word	0x40023000
 800d084:	f407a5c2 	.word	0xf407a5c2
 800d088:	b5e8b5cd 	.word	0xb5e8b5cd

0800d08c <ai_platform_outputs_get>:
 800d08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	b085      	sub	sp, #20
 800d092:	9102      	str	r1, [sp, #8]
 800d094:	2800      	cmp	r0, #0
 800d096:	f000 808f 	beq.w	800d1b8 <ai_platform_outputs_get+0x12c>
 800d09a:	4ba8      	ldr	r3, [pc, #672]	; (800d33c <ai_platform_outputs_get+0x2b0>)
 800d09c:	4681      	mov	r9, r0
 800d09e:	6802      	ldr	r2, [r0, #0]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	f040 8089 	bne.w	800d1b8 <ai_platform_outputs_get+0x12c>
 800d0a6:	f7ff fc9f 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d0aa:	4ba5      	ldr	r3, [pc, #660]	; (800d340 <ai_platform_outputs_get+0x2b4>)
 800d0ac:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0b6:	189a      	adds	r2, r3, r2
 800d0b8:	2a01      	cmp	r2, #1
 800d0ba:	f240 80d6 	bls.w	800d26a <ai_platform_outputs_get+0x1de>
 800d0be:	f240 4249 	movw	r2, #1097	; 0x449
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	f000 80d1 	beq.w	800d26a <ai_platform_outputs_get+0x1de>
 800d0c8:	4a9e      	ldr	r2, [pc, #632]	; (800d344 <ai_platform_outputs_get+0x2b8>)
 800d0ca:	6813      	ldr	r3, [r2, #0]
 800d0cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0d0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d0d4:	f000 80d8 	beq.w	800d288 <ai_platform_outputs_get+0x1fc>
 800d0d8:	6813      	ldr	r3, [r2, #0]
 800d0da:	f240 4183 	movw	r1, #1155	; 0x483
 800d0de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0e2:	428b      	cmp	r3, r1
 800d0e4:	f000 8109 	beq.w	800d2fa <ai_platform_outputs_get+0x26e>
 800d0e8:	6813      	ldr	r3, [r2, #0]
 800d0ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d0f2:	f000 813f 	beq.w	800d374 <ai_platform_outputs_get+0x2e8>
 800d0f6:	6813      	ldr	r3, [r2, #0]
 800d0f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f000 810e 	beq.w	800d31e <ai_platform_outputs_get+0x292>
 800d102:	f7ff fc73 	bl	800c9ec <_ai_platform_release_crc>
 800d106:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	f240 80db 	bls.w	800d2c6 <ai_platform_outputs_get+0x23a>
 800d110:	2100      	movs	r1, #0
 800d112:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800d116:	f8cd 900c 	str.w	r9, [sp, #12]
 800d11a:	460d      	mov	r5, r1
 800d11c:	4689      	mov	r9, r1
 800d11e:	e016      	b.n	800d14e <ai_platform_outputs_get+0xc2>
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	2301      	movs	r3, #1
 800d124:	f848 3002 	str.w	r3, [r8, r2]
 800d128:	69b2      	ldr	r2, [r6, #24]
 800d12a:	f04f 0301 	mov.w	r3, #1
 800d12e:	6856      	ldr	r6, [r2, #4]
 800d130:	3501      	adds	r5, #1
 800d132:	f109 091c 	add.w	r9, r9, #28
 800d136:	7523      	strb	r3, [r4, #20]
 800d138:	2300      	movs	r3, #0
 800d13a:	6962      	ldr	r2, [r4, #20]
 800d13c:	60a7      	str	r7, [r4, #8]
 800d13e:	f36b 221f 	bfi	r2, fp, #8, #24
 800d142:	6126      	str	r6, [r4, #16]
 800d144:	61a1      	str	r1, [r4, #24]
 800d146:	60e3      	str	r3, [r4, #12]
 800d148:	6162      	str	r2, [r4, #20]
 800d14a:	e9c4 0c00 	strd	r0, ip, [r4]
 800d14e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800d152:	b2ac      	uxth	r4, r5
 800d154:	42ab      	cmp	r3, r5
 800d156:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	f240 80a6 	bls.w	800d2ac <ai_platform_outputs_get+0x220>
 800d160:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d164:	2b00      	cmp	r3, #0
 800d166:	f000 80a1 	beq.w	800d2ac <ai_platform_outputs_get+0x220>
 800d16a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800d16e:	2e00      	cmp	r6, #0
 800d170:	f000 809c 	beq.w	800d2ac <ai_platform_outputs_get+0x220>
 800d174:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d178:	69b2      	ldr	r2, [r6, #24]
 800d17a:	68f1      	ldr	r1, [r6, #12]
 800d17c:	6810      	ldr	r0, [r2, #0]
 800d17e:	9100      	str	r1, [sp, #0]
 800d180:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800d184:	68b3      	ldr	r3, [r6, #8]
 800d186:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800d18a:	444c      	add	r4, r9
 800d18c:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800d190:	f003 f8d6 	bl	8010340 <ai_array_to_buffer_fmt>
 800d194:	69b2      	ldr	r2, [r6, #24]
 800d196:	9900      	ldr	r1, [sp, #0]
 800d198:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800d19c:	2f00      	cmp	r7, #0
 800d19e:	d0c4      	beq.n	800d12a <ai_platform_outputs_get+0x9e>
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800d1a6:	6832      	ldr	r2, [r6, #0]
 800d1a8:	607a      	str	r2, [r7, #4]
 800d1aa:	b112      	cbz	r2, 800d1b2 <ai_platform_outputs_get+0x126>
 800d1ac:	8852      	ldrh	r2, [r2, #2]
 800d1ae:	2a00      	cmp	r2, #0
 800d1b0:	d1b6      	bne.n	800d120 <ai_platform_outputs_get+0x94>
 800d1b2:	69b2      	ldr	r2, [r6, #24]
 800d1b4:	2700      	movs	r7, #0
 800d1b6:	e7b8      	b.n	800d12a <ai_platform_outputs_get+0x9e>
 800d1b8:	f7ff fc16 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d1bc:	4b60      	ldr	r3, [pc, #384]	; (800d340 <ai_platform_outputs_get+0x2b4>)
 800d1be:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1c8:	185a      	adds	r2, r3, r1
 800d1ca:	2a01      	cmp	r2, #1
 800d1cc:	d92a      	bls.n	800d224 <ai_platform_outputs_get+0x198>
 800d1ce:	f240 4249 	movw	r2, #1097	; 0x449
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d026      	beq.n	800d224 <ai_platform_outputs_get+0x198>
 800d1d6:	4a5b      	ldr	r2, [pc, #364]	; (800d344 <ai_platform_outputs_get+0x2b8>)
 800d1d8:	6813      	ldr	r3, [r2, #0]
 800d1da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d1e2:	d02c      	beq.n	800d23e <ai_platform_outputs_get+0x1b2>
 800d1e4:	6813      	ldr	r3, [r2, #0]
 800d1e6:	f240 4183 	movw	r1, #1155	; 0x483
 800d1ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1ee:	428b      	cmp	r3, r1
 800d1f0:	d072      	beq.n	800d2d8 <ai_platform_outputs_get+0x24c>
 800d1f2:	6813      	ldr	r3, [r2, #0]
 800d1f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d1fc:	f000 80ac 	beq.w	800d358 <ai_platform_outputs_get+0x2cc>
 800d200:	6813      	ldr	r3, [r2, #0]
 800d202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d206:	2b00      	cmp	r3, #0
 800d208:	d129      	bne.n	800d25e <ai_platform_outputs_get+0x1d2>
 800d20a:	4a4f      	ldr	r2, [pc, #316]	; (800d348 <ai_platform_outputs_get+0x2bc>)
 800d20c:	2301      	movs	r3, #1
 800d20e:	6093      	str	r3, [r2, #8]
 800d210:	6893      	ldr	r3, [r2, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1fc      	bne.n	800d210 <ai_platform_outputs_get+0x184>
 800d216:	494d      	ldr	r1, [pc, #308]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d218:	4b4d      	ldr	r3, [pc, #308]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d21a:	6011      	str	r1, [r2, #0]
 800d21c:	6812      	ldr	r2, [r2, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d01d      	beq.n	800d25e <ai_platform_outputs_get+0x1d2>
 800d222:	e7fe      	b.n	800d222 <ai_platform_outputs_get+0x196>
 800d224:	4a48      	ldr	r2, [pc, #288]	; (800d348 <ai_platform_outputs_get+0x2bc>)
 800d226:	2301      	movs	r3, #1
 800d228:	6093      	str	r3, [r2, #8]
 800d22a:	6893      	ldr	r3, [r2, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1fc      	bne.n	800d22a <ai_platform_outputs_get+0x19e>
 800d230:	4946      	ldr	r1, [pc, #280]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d232:	4b47      	ldr	r3, [pc, #284]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d234:	6011      	str	r1, [r2, #0]
 800d236:	6812      	ldr	r2, [r2, #0]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d010      	beq.n	800d25e <ai_platform_outputs_get+0x1d2>
 800d23c:	e7fe      	b.n	800d23c <ai_platform_outputs_get+0x1b0>
 800d23e:	4a45      	ldr	r2, [pc, #276]	; (800d354 <ai_platform_outputs_get+0x2c8>)
 800d240:	2301      	movs	r3, #1
 800d242:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d246:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d1fb      	bne.n	800d246 <ai_platform_outputs_get+0x1ba>
 800d24e:	493f      	ldr	r1, [pc, #252]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d250:	4b3f      	ldr	r3, [pc, #252]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d252:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d256:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d113      	bne.n	800d286 <ai_platform_outputs_get+0x1fa>
 800d25e:	f7ff fbc5 	bl	800c9ec <_ai_platform_release_crc>
 800d262:	2000      	movs	r0, #0
 800d264:	b005      	add	sp, #20
 800d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26a:	4a37      	ldr	r2, [pc, #220]	; (800d348 <ai_platform_outputs_get+0x2bc>)
 800d26c:	2301      	movs	r3, #1
 800d26e:	6093      	str	r3, [r2, #8]
 800d270:	6893      	ldr	r3, [r2, #8]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1fc      	bne.n	800d270 <ai_platform_outputs_get+0x1e4>
 800d276:	4b35      	ldr	r3, [pc, #212]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d278:	6013      	str	r3, [r2, #0]
 800d27a:	4b35      	ldr	r3, [pc, #212]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d27c:	6812      	ldr	r2, [r2, #0]
 800d27e:	429a      	cmp	r2, r3
 800d280:	f43f af3f 	beq.w	800d102 <ai_platform_outputs_get+0x76>
 800d284:	e7fe      	b.n	800d284 <ai_platform_outputs_get+0x1f8>
 800d286:	e7fe      	b.n	800d286 <ai_platform_outputs_get+0x1fa>
 800d288:	4a32      	ldr	r2, [pc, #200]	; (800d354 <ai_platform_outputs_get+0x2c8>)
 800d28a:	2301      	movs	r3, #1
 800d28c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d290:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1fb      	bne.n	800d290 <ai_platform_outputs_get+0x204>
 800d298:	4b2c      	ldr	r3, [pc, #176]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d29a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d29e:	4b2c      	ldr	r3, [pc, #176]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d2a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	f43f af2c 	beq.w	800d102 <ai_platform_outputs_get+0x76>
 800d2aa:	e7fe      	b.n	800d2aa <ai_platform_outputs_get+0x21e>
 800d2ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d2b0:	b14c      	cbz	r4, 800d2c6 <ai_platform_outputs_get+0x23a>
 800d2b2:	f8da 3014 	ldr.w	r3, [sl, #20]
 800d2b6:	6858      	ldr	r0, [r3, #4]
 800d2b8:	9b02      	ldr	r3, [sp, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d0d2      	beq.n	800d264 <ai_platform_outputs_get+0x1d8>
 800d2be:	801c      	strh	r4, [r3, #0]
 800d2c0:	b005      	add	sp, #20
 800d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c6:	2400      	movs	r4, #0
 800d2c8:	2218      	movs	r2, #24
 800d2ca:	2111      	movs	r1, #17
 800d2cc:	f109 0010 	add.w	r0, r9, #16
 800d2d0:	f000 ffea 	bl	800e2a8 <core_set_error>
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	e7ef      	b.n	800d2b8 <ai_platform_outputs_get+0x22c>
 800d2d8:	4a1e      	ldr	r2, [pc, #120]	; (800d354 <ai_platform_outputs_get+0x2c8>)
 800d2da:	2301      	movs	r3, #1
 800d2dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d2e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1fb      	bne.n	800d2e0 <ai_platform_outputs_get+0x254>
 800d2e8:	4918      	ldr	r1, [pc, #96]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d2ea:	4b19      	ldr	r3, [pc, #100]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d2ec:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d2f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d0b2      	beq.n	800d25e <ai_platform_outputs_get+0x1d2>
 800d2f8:	e7fe      	b.n	800d2f8 <ai_platform_outputs_get+0x26c>
 800d2fa:	4a16      	ldr	r2, [pc, #88]	; (800d354 <ai_platform_outputs_get+0x2c8>)
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d302:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1fb      	bne.n	800d302 <ai_platform_outputs_get+0x276>
 800d30a:	4b10      	ldr	r3, [pc, #64]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d30c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d310:	4b0f      	ldr	r3, [pc, #60]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d312:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d316:	429a      	cmp	r2, r3
 800d318:	f43f aef3 	beq.w	800d102 <ai_platform_outputs_get+0x76>
 800d31c:	e7fe      	b.n	800d31c <ai_platform_outputs_get+0x290>
 800d31e:	4a0a      	ldr	r2, [pc, #40]	; (800d348 <ai_platform_outputs_get+0x2bc>)
 800d320:	2301      	movs	r3, #1
 800d322:	6093      	str	r3, [r2, #8]
 800d324:	6893      	ldr	r3, [r2, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d1fc      	bne.n	800d324 <ai_platform_outputs_get+0x298>
 800d32a:	4b08      	ldr	r3, [pc, #32]	; (800d34c <ai_platform_outputs_get+0x2c0>)
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	4b08      	ldr	r3, [pc, #32]	; (800d350 <ai_platform_outputs_get+0x2c4>)
 800d330:	6812      	ldr	r2, [r2, #0]
 800d332:	429a      	cmp	r2, r3
 800d334:	f43f aee5 	beq.w	800d102 <ai_platform_outputs_get+0x76>
 800d338:	e7fe      	b.n	800d338 <ai_platform_outputs_get+0x2ac>
 800d33a:	bf00      	nop
 800d33c:	a1c00100 	.word	0xa1c00100
 800d340:	e0042000 	.word	0xe0042000
 800d344:	5c001000 	.word	0x5c001000
 800d348:	40023000 	.word	0x40023000
 800d34c:	f407a5c2 	.word	0xf407a5c2
 800d350:	b5e8b5cd 	.word	0xb5e8b5cd
 800d354:	58024000 	.word	0x58024000
 800d358:	4a0d      	ldr	r2, [pc, #52]	; (800d390 <ai_platform_outputs_get+0x304>)
 800d35a:	2301      	movs	r3, #1
 800d35c:	6093      	str	r3, [r2, #8]
 800d35e:	6893      	ldr	r3, [r2, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1fc      	bne.n	800d35e <ai_platform_outputs_get+0x2d2>
 800d364:	490b      	ldr	r1, [pc, #44]	; (800d394 <ai_platform_outputs_get+0x308>)
 800d366:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <ai_platform_outputs_get+0x30c>)
 800d368:	6011      	str	r1, [r2, #0]
 800d36a:	6812      	ldr	r2, [r2, #0]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	f43f af76 	beq.w	800d25e <ai_platform_outputs_get+0x1d2>
 800d372:	e7fe      	b.n	800d372 <ai_platform_outputs_get+0x2e6>
 800d374:	4a06      	ldr	r2, [pc, #24]	; (800d390 <ai_platform_outputs_get+0x304>)
 800d376:	2301      	movs	r3, #1
 800d378:	6093      	str	r3, [r2, #8]
 800d37a:	6893      	ldr	r3, [r2, #8]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1fc      	bne.n	800d37a <ai_platform_outputs_get+0x2ee>
 800d380:	4b04      	ldr	r3, [pc, #16]	; (800d394 <ai_platform_outputs_get+0x308>)
 800d382:	6013      	str	r3, [r2, #0]
 800d384:	4b04      	ldr	r3, [pc, #16]	; (800d398 <ai_platform_outputs_get+0x30c>)
 800d386:	6812      	ldr	r2, [r2, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	f43f aeba 	beq.w	800d102 <ai_platform_outputs_get+0x76>
 800d38e:	e7fe      	b.n	800d38e <ai_platform_outputs_get+0x302>
 800d390:	40023000 	.word	0x40023000
 800d394:	f407a5c2 	.word	0xf407a5c2
 800d398:	b5e8b5cd 	.word	0xb5e8b5cd

0800d39c <ai_platform_network_create>:
 800d39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3a0:	b083      	sub	sp, #12
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	4615      	mov	r5, r2
 800d3a6:	461e      	mov	r6, r3
 800d3a8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800d3ac:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800d3b0:	f7ff fb1a 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	f000 80bd 	beq.w	800d534 <ai_platform_network_create+0x198>
 800d3ba:	4ba5      	ldr	r3, [pc, #660]	; (800d650 <ai_platform_network_create+0x2b4>)
 800d3bc:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800d3c0:	4601      	mov	r1, r0
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3c8:	eb03 020c 	add.w	r2, r3, ip
 800d3cc:	2a01      	cmp	r2, #1
 800d3ce:	f240 80a8 	bls.w	800d522 <ai_platform_network_create+0x186>
 800d3d2:	f240 4249 	movw	r2, #1097	; 0x449
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	f000 80a3 	beq.w	800d522 <ai_platform_network_create+0x186>
 800d3dc:	4a9d      	ldr	r2, [pc, #628]	; (800d654 <ai_platform_network_create+0x2b8>)
 800d3de:	6813      	ldr	r3, [r2, #0]
 800d3e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3e4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d3e8:	f000 80b9 	beq.w	800d55e <ai_platform_network_create+0x1c2>
 800d3ec:	6813      	ldr	r3, [r2, #0]
 800d3ee:	f240 4c83 	movw	ip, #1155	; 0x483
 800d3f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d3f6:	4563      	cmp	r3, ip
 800d3f8:	f000 80a1 	beq.w	800d53e <ai_platform_network_create+0x1a2>
 800d3fc:	6813      	ldr	r3, [r2, #0]
 800d3fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d402:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d406:	f000 8153 	beq.w	800d6b0 <ai_platform_network_create+0x314>
 800d40a:	6813      	ldr	r3, [r2, #0]
 800d40c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d410:	2b00      	cmp	r3, #0
 800d412:	f040 808d 	bne.w	800d530 <ai_platform_network_create+0x194>
 800d416:	4a90      	ldr	r2, [pc, #576]	; (800d658 <ai_platform_network_create+0x2bc>)
 800d418:	2318      	movs	r3, #24
 800d41a:	6093      	str	r3, [r2, #8]
 800d41c:	6893      	ldr	r3, [r2, #8]
 800d41e:	2b18      	cmp	r3, #24
 800d420:	f040 8086 	bne.w	800d530 <ai_platform_network_create+0x194>
 800d424:	2301      	movs	r3, #1
 800d426:	6093      	str	r3, [r2, #8]
 800d428:	6893      	ldr	r3, [r2, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1fc      	bne.n	800d428 <ai_platform_network_create+0x8c>
 800d42e:	4608      	mov	r0, r1
 800d430:	f7ff fadc 	bl	800c9ec <_ai_platform_release_crc>
 800d434:	f7ff fad8 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d438:	4b85      	ldr	r3, [pc, #532]	; (800d650 <ai_platform_network_create+0x2b4>)
 800d43a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d444:	189a      	adds	r2, r3, r2
 800d446:	2a01      	cmp	r2, #1
 800d448:	f240 809f 	bls.w	800d58a <ai_platform_network_create+0x1ee>
 800d44c:	f240 4249 	movw	r2, #1097	; 0x449
 800d450:	4293      	cmp	r3, r2
 800d452:	f000 809a 	beq.w	800d58a <ai_platform_network_create+0x1ee>
 800d456:	4a7f      	ldr	r2, [pc, #508]	; (800d654 <ai_platform_network_create+0x2b8>)
 800d458:	6813      	ldr	r3, [r2, #0]
 800d45a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d45e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d462:	f000 80a0 	beq.w	800d5a6 <ai_platform_network_create+0x20a>
 800d466:	6813      	ldr	r3, [r2, #0]
 800d468:	f240 4183 	movw	r1, #1155	; 0x483
 800d46c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d470:	428b      	cmp	r3, r1
 800d472:	f000 80bf 	beq.w	800d5f4 <ai_platform_network_create+0x258>
 800d476:	6813      	ldr	r3, [r2, #0]
 800d478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d47c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d480:	f000 8123 	beq.w	800d6ca <ai_platform_network_create+0x32e>
 800d484:	6813      	ldr	r3, [r2, #0]
 800d486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 80c4 	beq.w	800d618 <ai_platform_network_create+0x27c>
 800d490:	f7ff faac 	bl	800c9ec <_ai_platform_release_crc>
 800d494:	2c00      	cmp	r4, #0
 800d496:	f000 80aa 	beq.w	800d5ee <ai_platform_network_create+0x252>
 800d49a:	4b70      	ldr	r3, [pc, #448]	; (800d65c <ai_platform_network_create+0x2c0>)
 800d49c:	602b      	str	r3, [r5, #0]
 800d49e:	6025      	str	r5, [r4, #0]
 800d4a0:	f000 fefa 	bl	800e298 <core_init>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	f000 8090 	beq.w	800d5ca <ai_platform_network_create+0x22e>
 800d4aa:	f7ff fa9d 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d4ae:	4b68      	ldr	r3, [pc, #416]	; (800d650 <ai_platform_network_create+0x2b4>)
 800d4b0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4ba:	185a      	adds	r2, r3, r1
 800d4bc:	2a01      	cmp	r2, #1
 800d4be:	f240 80b9 	bls.w	800d634 <ai_platform_network_create+0x298>
 800d4c2:	f240 4249 	movw	r2, #1097	; 0x449
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	f000 80b4 	beq.w	800d634 <ai_platform_network_create+0x298>
 800d4cc:	4a61      	ldr	r2, [pc, #388]	; (800d654 <ai_platform_network_create+0x2b8>)
 800d4ce:	6813      	ldr	r3, [r2, #0]
 800d4d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d4d8:	f000 80c8 	beq.w	800d66c <ai_platform_network_create+0x2d0>
 800d4dc:	6813      	ldr	r3, [r2, #0]
 800d4de:	f240 4183 	movw	r1, #1155	; 0x483
 800d4e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4e6:	428b      	cmp	r3, r1
 800d4e8:	f000 8107 	beq.w	800d6fa <ai_platform_network_create+0x35e>
 800d4ec:	6813      	ldr	r3, [r2, #0]
 800d4ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d4f2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d4f6:	f000 8111 	beq.w	800d71c <ai_platform_network_create+0x380>
 800d4fa:	6813      	ldr	r3, [r2, #0]
 800d4fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d500:	2b00      	cmp	r3, #0
 800d502:	f040 80c3 	bne.w	800d68c <ai_platform_network_create+0x2f0>
 800d506:	4b54      	ldr	r3, [pc, #336]	; (800d658 <ai_platform_network_create+0x2bc>)
 800d508:	2201      	movs	r2, #1
 800d50a:	609a      	str	r2, [r3, #8]
 800d50c:	689a      	ldr	r2, [r3, #8]
 800d50e:	2a00      	cmp	r2, #0
 800d510:	d1fc      	bne.n	800d50c <ai_platform_network_create+0x170>
 800d512:	4a53      	ldr	r2, [pc, #332]	; (800d660 <ai_platform_network_create+0x2c4>)
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	4b52      	ldr	r3, [pc, #328]	; (800d664 <ai_platform_network_create+0x2c8>)
 800d51a:	429a      	cmp	r2, r3
 800d51c:	f000 80b6 	beq.w	800d68c <ai_platform_network_create+0x2f0>
 800d520:	e7fe      	b.n	800d520 <ai_platform_network_create+0x184>
 800d522:	4b4d      	ldr	r3, [pc, #308]	; (800d658 <ai_platform_network_create+0x2bc>)
 800d524:	2218      	movs	r2, #24
 800d526:	609a      	str	r2, [r3, #8]
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	2a18      	cmp	r2, #24
 800d52c:	d027      	beq.n	800d57e <ai_platform_network_create+0x1e2>
 800d52e:	4608      	mov	r0, r1
 800d530:	f7ff fa5c 	bl	800c9ec <_ai_platform_release_crc>
 800d534:	f244 1033 	movw	r0, #16691	; 0x4133
 800d538:	b003      	add	sp, #12
 800d53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d53e:	4a4a      	ldr	r2, [pc, #296]	; (800d668 <ai_platform_network_create+0x2cc>)
 800d540:	2318      	movs	r3, #24
 800d542:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d546:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d54a:	2b18      	cmp	r3, #24
 800d54c:	d1f0      	bne.n	800d530 <ai_platform_network_create+0x194>
 800d54e:	2301      	movs	r3, #1
 800d550:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d554:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1fb      	bne.n	800d554 <ai_platform_network_create+0x1b8>
 800d55c:	e767      	b.n	800d42e <ai_platform_network_create+0x92>
 800d55e:	4a42      	ldr	r2, [pc, #264]	; (800d668 <ai_platform_network_create+0x2cc>)
 800d560:	2318      	movs	r3, #24
 800d562:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d566:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d56a:	2b18      	cmp	r3, #24
 800d56c:	d1e0      	bne.n	800d530 <ai_platform_network_create+0x194>
 800d56e:	2301      	movs	r3, #1
 800d570:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d574:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1fb      	bne.n	800d574 <ai_platform_network_create+0x1d8>
 800d57c:	e757      	b.n	800d42e <ai_platform_network_create+0x92>
 800d57e:	2201      	movs	r2, #1
 800d580:	609a      	str	r2, [r3, #8]
 800d582:	689a      	ldr	r2, [r3, #8]
 800d584:	2a00      	cmp	r2, #0
 800d586:	d1fc      	bne.n	800d582 <ai_platform_network_create+0x1e6>
 800d588:	e751      	b.n	800d42e <ai_platform_network_create+0x92>
 800d58a:	4a33      	ldr	r2, [pc, #204]	; (800d658 <ai_platform_network_create+0x2bc>)
 800d58c:	2301      	movs	r3, #1
 800d58e:	6093      	str	r3, [r2, #8]
 800d590:	6891      	ldr	r1, [r2, #8]
 800d592:	2900      	cmp	r1, #0
 800d594:	d1fc      	bne.n	800d590 <ai_platform_network_create+0x1f4>
 800d596:	4b32      	ldr	r3, [pc, #200]	; (800d660 <ai_platform_network_create+0x2c4>)
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	4b32      	ldr	r3, [pc, #200]	; (800d664 <ai_platform_network_create+0x2c8>)
 800d59c:	6812      	ldr	r2, [r2, #0]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	f43f af76 	beq.w	800d490 <ai_platform_network_create+0xf4>
 800d5a4:	e7fe      	b.n	800d5a4 <ai_platform_network_create+0x208>
 800d5a6:	4a30      	ldr	r2, [pc, #192]	; (800d668 <ai_platform_network_create+0x2cc>)
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d5ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1fb      	bne.n	800d5ae <ai_platform_network_create+0x212>
 800d5b6:	4b2a      	ldr	r3, [pc, #168]	; (800d660 <ai_platform_network_create+0x2c4>)
 800d5b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d5bc:	4b29      	ldr	r3, [pc, #164]	; (800d664 <ai_platform_network_create+0x2c8>)
 800d5be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	f43f af64 	beq.w	800d490 <ai_platform_network_create+0xf4>
 800d5c8:	e7fe      	b.n	800d5c8 <ai_platform_network_create+0x22c>
 800d5ca:	f04f 0930 	mov.w	r9, #48	; 0x30
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	6023      	str	r3, [r4, #0]
 800d5d2:	2410      	movs	r4, #16
 800d5d4:	4642      	mov	r2, r8
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f002 fe95 	bl	8010308 <ai_version_get>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	64ab      	str	r3, [r5, #72]	; 0x48
 800d5e4:	f369 0007 	bfi	r0, r9, #0, #8
 800d5e8:	f364 201f 	bfi	r0, r4, #8, #24
 800d5ec:	e7a4      	b.n	800d538 <ai_platform_network_create+0x19c>
 800d5ee:	f241 0010 	movw	r0, #4112	; 0x1010
 800d5f2:	e7a1      	b.n	800d538 <ai_platform_network_create+0x19c>
 800d5f4:	4a1c      	ldr	r2, [pc, #112]	; (800d668 <ai_platform_network_create+0x2cc>)
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d5fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1fb      	bne.n	800d5fc <ai_platform_network_create+0x260>
 800d604:	4b16      	ldr	r3, [pc, #88]	; (800d660 <ai_platform_network_create+0x2c4>)
 800d606:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d60a:	4b16      	ldr	r3, [pc, #88]	; (800d664 <ai_platform_network_create+0x2c8>)
 800d60c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d610:	429a      	cmp	r2, r3
 800d612:	f43f af3d 	beq.w	800d490 <ai_platform_network_create+0xf4>
 800d616:	e7fe      	b.n	800d616 <ai_platform_network_create+0x27a>
 800d618:	4a0f      	ldr	r2, [pc, #60]	; (800d658 <ai_platform_network_create+0x2bc>)
 800d61a:	2301      	movs	r3, #1
 800d61c:	6093      	str	r3, [r2, #8]
 800d61e:	6893      	ldr	r3, [r2, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1fc      	bne.n	800d61e <ai_platform_network_create+0x282>
 800d624:	4b0e      	ldr	r3, [pc, #56]	; (800d660 <ai_platform_network_create+0x2c4>)
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	4b0e      	ldr	r3, [pc, #56]	; (800d664 <ai_platform_network_create+0x2c8>)
 800d62a:	6812      	ldr	r2, [r2, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	f43f af2f 	beq.w	800d490 <ai_platform_network_create+0xf4>
 800d632:	e7fe      	b.n	800d632 <ai_platform_network_create+0x296>
 800d634:	4a08      	ldr	r2, [pc, #32]	; (800d658 <ai_platform_network_create+0x2bc>)
 800d636:	2301      	movs	r3, #1
 800d638:	6093      	str	r3, [r2, #8]
 800d63a:	6893      	ldr	r3, [r2, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1fc      	bne.n	800d63a <ai_platform_network_create+0x29e>
 800d640:	4b07      	ldr	r3, [pc, #28]	; (800d660 <ai_platform_network_create+0x2c4>)
 800d642:	6013      	str	r3, [r2, #0]
 800d644:	4b07      	ldr	r3, [pc, #28]	; (800d664 <ai_platform_network_create+0x2c8>)
 800d646:	6812      	ldr	r2, [r2, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d01f      	beq.n	800d68c <ai_platform_network_create+0x2f0>
 800d64c:	e7fe      	b.n	800d64c <ai_platform_network_create+0x2b0>
 800d64e:	bf00      	nop
 800d650:	e0042000 	.word	0xe0042000
 800d654:	5c001000 	.word	0x5c001000
 800d658:	40023000 	.word	0x40023000
 800d65c:	a1c00100 	.word	0xa1c00100
 800d660:	f407a5c2 	.word	0xf407a5c2
 800d664:	b5e8b5cd 	.word	0xb5e8b5cd
 800d668:	58024000 	.word	0x58024000
 800d66c:	4a33      	ldr	r2, [pc, #204]	; (800d73c <ai_platform_network_create+0x3a0>)
 800d66e:	2301      	movs	r3, #1
 800d670:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d674:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1fb      	bne.n	800d674 <ai_platform_network_create+0x2d8>
 800d67c:	4b30      	ldr	r3, [pc, #192]	; (800d740 <ai_platform_network_create+0x3a4>)
 800d67e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d682:	4b30      	ldr	r3, [pc, #192]	; (800d744 <ai_platform_network_create+0x3a8>)
 800d684:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d688:	429a      	cmp	r2, r3
 800d68a:	d12c      	bne.n	800d6e6 <ai_platform_network_create+0x34a>
 800d68c:	f7ff f9ae 	bl	800c9ec <_ai_platform_release_crc>
 800d690:	2200      	movs	r2, #0
 800d692:	4639      	mov	r1, r7
 800d694:	4630      	mov	r0, r6
 800d696:	f002 fe37 	bl	8010308 <ai_version_get>
 800d69a:	4681      	mov	r9, r0
 800d69c:	2200      	movs	r2, #0
 800d69e:	2105      	movs	r1, #5
 800d6a0:	2001      	movs	r0, #1
 800d6a2:	f002 fe31 	bl	8010308 <ai_version_get>
 800d6a6:	4581      	cmp	r9, r0
 800d6a8:	d01e      	beq.n	800d6e8 <ai_platform_network_create+0x34c>
 800d6aa:	f04f 0901 	mov.w	r9, #1
 800d6ae:	e78e      	b.n	800d5ce <ai_platform_network_create+0x232>
 800d6b0:	4b25      	ldr	r3, [pc, #148]	; (800d748 <ai_platform_network_create+0x3ac>)
 800d6b2:	2218      	movs	r2, #24
 800d6b4:	609a      	str	r2, [r3, #8]
 800d6b6:	689a      	ldr	r2, [r3, #8]
 800d6b8:	2a18      	cmp	r2, #24
 800d6ba:	f47f af39 	bne.w	800d530 <ai_platform_network_create+0x194>
 800d6be:	2201      	movs	r2, #1
 800d6c0:	609a      	str	r2, [r3, #8]
 800d6c2:	689a      	ldr	r2, [r3, #8]
 800d6c4:	2a00      	cmp	r2, #0
 800d6c6:	d1fc      	bne.n	800d6c2 <ai_platform_network_create+0x326>
 800d6c8:	e6b1      	b.n	800d42e <ai_platform_network_create+0x92>
 800d6ca:	4a1f      	ldr	r2, [pc, #124]	; (800d748 <ai_platform_network_create+0x3ac>)
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	6093      	str	r3, [r2, #8]
 800d6d0:	6893      	ldr	r3, [r2, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1fc      	bne.n	800d6d0 <ai_platform_network_create+0x334>
 800d6d6:	4b1a      	ldr	r3, [pc, #104]	; (800d740 <ai_platform_network_create+0x3a4>)
 800d6d8:	6013      	str	r3, [r2, #0]
 800d6da:	4b1a      	ldr	r3, [pc, #104]	; (800d744 <ai_platform_network_create+0x3a8>)
 800d6dc:	6812      	ldr	r2, [r2, #0]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	f43f aed6 	beq.w	800d490 <ai_platform_network_create+0xf4>
 800d6e4:	e7fe      	b.n	800d6e4 <ai_platform_network_create+0x348>
 800d6e6:	e7fe      	b.n	800d6e6 <ai_platform_network_create+0x34a>
 800d6e8:	4b18      	ldr	r3, [pc, #96]	; (800d74c <ai_platform_network_create+0x3b0>)
 800d6ea:	a801      	add	r0, sp, #4
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	f002 fc51 	bl	800ff94 <ai_check_custom_types>
 800d6f2:	b300      	cbz	r0, 800d736 <ai_platform_network_create+0x39a>
 800d6f4:	2400      	movs	r4, #0
 800d6f6:	46a1      	mov	r9, r4
 800d6f8:	e76c      	b.n	800d5d4 <ai_platform_network_create+0x238>
 800d6fa:	4b10      	ldr	r3, [pc, #64]	; (800d73c <ai_platform_network_create+0x3a0>)
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800d702:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800d706:	2a00      	cmp	r2, #0
 800d708:	d1fb      	bne.n	800d702 <ai_platform_network_create+0x366>
 800d70a:	4a0d      	ldr	r2, [pc, #52]	; (800d740 <ai_platform_network_create+0x3a4>)
 800d70c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800d710:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800d714:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <ai_platform_network_create+0x3a8>)
 800d716:	429a      	cmp	r2, r3
 800d718:	d0b8      	beq.n	800d68c <ai_platform_network_create+0x2f0>
 800d71a:	e7fe      	b.n	800d71a <ai_platform_network_create+0x37e>
 800d71c:	4b0a      	ldr	r3, [pc, #40]	; (800d748 <ai_platform_network_create+0x3ac>)
 800d71e:	2201      	movs	r2, #1
 800d720:	609a      	str	r2, [r3, #8]
 800d722:	689a      	ldr	r2, [r3, #8]
 800d724:	2a00      	cmp	r2, #0
 800d726:	d1fc      	bne.n	800d722 <ai_platform_network_create+0x386>
 800d728:	4a05      	ldr	r2, [pc, #20]	; (800d740 <ai_platform_network_create+0x3a4>)
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	681a      	ldr	r2, [r3, #0]
 800d72e:	4b05      	ldr	r3, [pc, #20]	; (800d744 <ai_platform_network_create+0x3a8>)
 800d730:	429a      	cmp	r2, r3
 800d732:	d0ab      	beq.n	800d68c <ai_platform_network_create+0x2f0>
 800d734:	e7fe      	b.n	800d734 <ai_platform_network_create+0x398>
 800d736:	f04f 0902 	mov.w	r9, #2
 800d73a:	e748      	b.n	800d5ce <ai_platform_network_create+0x232>
 800d73c:	58024000 	.word	0x58024000
 800d740:	f407a5c2 	.word	0xf407a5c2
 800d744:	b5e8b5cd 	.word	0xb5e8b5cd
 800d748:	40023000 	.word	0x40023000
 800d74c:	84048403 	.word	0x84048403

0800d750 <ai_platform_network_init>:
 800d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d754:	2800      	cmp	r0, #0
 800d756:	d052      	beq.n	800d7fe <ai_platform_network_init+0xae>
 800d758:	4bab      	ldr	r3, [pc, #684]	; (800da08 <ai_platform_network_init+0x2b8>)
 800d75a:	4604      	mov	r4, r0
 800d75c:	6802      	ldr	r2, [r0, #0]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d14d      	bne.n	800d7fe <ai_platform_network_init+0xae>
 800d762:	460d      	mov	r5, r1
 800d764:	f7ff f940 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d768:	4ba8      	ldr	r3, [pc, #672]	; (800da0c <ai_platform_network_init+0x2bc>)
 800d76a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d774:	189a      	adds	r2, r3, r2
 800d776:	2a01      	cmp	r2, #1
 800d778:	f240 809b 	bls.w	800d8b2 <ai_platform_network_init+0x162>
 800d77c:	f240 4249 	movw	r2, #1097	; 0x449
 800d780:	4293      	cmp	r3, r2
 800d782:	f000 8096 	beq.w	800d8b2 <ai_platform_network_init+0x162>
 800d786:	4aa2      	ldr	r2, [pc, #648]	; (800da10 <ai_platform_network_init+0x2c0>)
 800d788:	6813      	ldr	r3, [r2, #0]
 800d78a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d78e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d792:	f000 809d 	beq.w	800d8d0 <ai_platform_network_init+0x180>
 800d796:	6813      	ldr	r3, [r2, #0]
 800d798:	f240 4183 	movw	r1, #1155	; 0x483
 800d79c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7a0:	428b      	cmp	r3, r1
 800d7a2:	f000 80e4 	beq.w	800d96e <ai_platform_network_init+0x21e>
 800d7a6:	6813      	ldr	r3, [r2, #0]
 800d7a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7ac:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d7b0:	f000 811b 	beq.w	800d9ea <ai_platform_network_init+0x29a>
 800d7b4:	6813      	ldr	r3, [r2, #0]
 800d7b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 80f9 	beq.w	800d9b2 <ai_platform_network_init+0x262>
 800d7c0:	f7ff f914 	bl	800c9ec <_ai_platform_release_crc>
 800d7c4:	2d00      	cmp	r5, #0
 800d7c6:	f000 8147 	beq.w	800da58 <ai_platform_network_init+0x308>
 800d7ca:	4b92      	ldr	r3, [pc, #584]	; (800da14 <ai_platform_network_init+0x2c4>)
 800d7cc:	682a      	ldr	r2, [r5, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	f040 8090 	bne.w	800d8f4 <ai_platform_network_init+0x1a4>
 800d7d4:	692b      	ldr	r3, [r5, #16]
 800d7d6:	89ae      	ldrh	r6, [r5, #12]
 800d7d8:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800d7dc:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800d7e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7e2:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	84a6      	strh	r6, [r4, #36]	; 0x24
 800d7ea:	4626      	mov	r6, r4
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800d7f2:	60e3      	str	r3, [r4, #12]
 800d7f4:	f002 fbf6 	bl	800ffe4 <ai_layers_init_all>
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7fe:	f7ff f8f3 	bl	800c9e8 <_ai_platform_acquire_crc>
 800d802:	4b82      	ldr	r3, [pc, #520]	; (800da0c <ai_platform_network_init+0x2bc>)
 800d804:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d80e:	185a      	adds	r2, r3, r1
 800d810:	2a01      	cmp	r2, #1
 800d812:	d92b      	bls.n	800d86c <ai_platform_network_init+0x11c>
 800d814:	f240 4249 	movw	r2, #1097	; 0x449
 800d818:	4293      	cmp	r3, r2
 800d81a:	d027      	beq.n	800d86c <ai_platform_network_init+0x11c>
 800d81c:	4a7c      	ldr	r2, [pc, #496]	; (800da10 <ai_platform_network_init+0x2c0>)
 800d81e:	6813      	ldr	r3, [r2, #0]
 800d820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d824:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800d828:	d02d      	beq.n	800d886 <ai_platform_network_init+0x136>
 800d82a:	6813      	ldr	r3, [r2, #0]
 800d82c:	f240 4183 	movw	r1, #1155	; 0x483
 800d830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d834:	428b      	cmp	r3, r1
 800d836:	f000 8089 	beq.w	800d94c <ai_platform_network_init+0x1fc>
 800d83a:	6813      	ldr	r3, [r2, #0]
 800d83c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d840:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800d844:	f000 80c3 	beq.w	800d9ce <ai_platform_network_init+0x27e>
 800d848:	6813      	ldr	r3, [r2, #0]
 800d84a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d129      	bne.n	800d8a6 <ai_platform_network_init+0x156>
 800d852:	4a71      	ldr	r2, [pc, #452]	; (800da18 <ai_platform_network_init+0x2c8>)
 800d854:	2301      	movs	r3, #1
 800d856:	6093      	str	r3, [r2, #8]
 800d858:	6893      	ldr	r3, [r2, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1fc      	bne.n	800d858 <ai_platform_network_init+0x108>
 800d85e:	496f      	ldr	r1, [pc, #444]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d860:	4b6f      	ldr	r3, [pc, #444]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d862:	6011      	str	r1, [r2, #0]
 800d864:	6812      	ldr	r2, [r2, #0]
 800d866:	429a      	cmp	r2, r3
 800d868:	d01d      	beq.n	800d8a6 <ai_platform_network_init+0x156>
 800d86a:	e7fe      	b.n	800d86a <ai_platform_network_init+0x11a>
 800d86c:	4a6a      	ldr	r2, [pc, #424]	; (800da18 <ai_platform_network_init+0x2c8>)
 800d86e:	2301      	movs	r3, #1
 800d870:	6093      	str	r3, [r2, #8]
 800d872:	6893      	ldr	r3, [r2, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1fc      	bne.n	800d872 <ai_platform_network_init+0x122>
 800d878:	4968      	ldr	r1, [pc, #416]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d87a:	4b69      	ldr	r3, [pc, #420]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d87c:	6011      	str	r1, [r2, #0]
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	429a      	cmp	r2, r3
 800d882:	d010      	beq.n	800d8a6 <ai_platform_network_init+0x156>
 800d884:	e7fe      	b.n	800d884 <ai_platform_network_init+0x134>
 800d886:	4a67      	ldr	r2, [pc, #412]	; (800da24 <ai_platform_network_init+0x2d4>)
 800d888:	2301      	movs	r3, #1
 800d88a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d88e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1fb      	bne.n	800d88e <ai_platform_network_init+0x13e>
 800d896:	4961      	ldr	r1, [pc, #388]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d898:	4b61      	ldr	r3, [pc, #388]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d89a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d89e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d113      	bne.n	800d8ce <ai_platform_network_init+0x17e>
 800d8a6:	2600      	movs	r6, #0
 800d8a8:	f7ff f8a0 	bl	800c9ec <_ai_platform_release_crc>
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8b2:	4a59      	ldr	r2, [pc, #356]	; (800da18 <ai_platform_network_init+0x2c8>)
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	6093      	str	r3, [r2, #8]
 800d8b8:	6893      	ldr	r3, [r2, #8]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1fc      	bne.n	800d8b8 <ai_platform_network_init+0x168>
 800d8be:	4b57      	ldr	r3, [pc, #348]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d8c0:	6013      	str	r3, [r2, #0]
 800d8c2:	4b57      	ldr	r3, [pc, #348]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d8c4:	6812      	ldr	r2, [r2, #0]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	f43f af7a 	beq.w	800d7c0 <ai_platform_network_init+0x70>
 800d8cc:	e7fe      	b.n	800d8cc <ai_platform_network_init+0x17c>
 800d8ce:	e7fe      	b.n	800d8ce <ai_platform_network_init+0x17e>
 800d8d0:	4a54      	ldr	r2, [pc, #336]	; (800da24 <ai_platform_network_init+0x2d4>)
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d8d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d1fb      	bne.n	800d8d8 <ai_platform_network_init+0x188>
 800d8e0:	4b4e      	ldr	r3, [pc, #312]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d8e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d8e6:	4b4e      	ldr	r3, [pc, #312]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d8e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	f43f af67 	beq.w	800d7c0 <ai_platform_network_init+0x70>
 800d8f2:	e7fe      	b.n	800d8f2 <ai_platform_network_init+0x1a2>
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	f105 081c 	add.w	r8, r5, #28
 800d8fc:	686e      	ldr	r6, [r5, #4]
 800d8fe:	f7ff f835 	bl	800c96c <ai_buffer_get_size>
 800d902:	4607      	mov	r7, r0
 800d904:	2101      	movs	r1, #1
 800d906:	4640      	mov	r0, r8
 800d908:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800d90c:	f7ff f82e 	bl	800c96c <ai_buffer_get_size>
 800d910:	2f00      	cmp	r7, #0
 800d912:	d13e      	bne.n	800d992 <ai_platform_network_init+0x242>
 800d914:	2800      	cmp	r0, #0
 800d916:	f000 808e 	beq.w	800da36 <ai_platform_network_init+0x2e6>
 800d91a:	f1b9 0f00 	cmp.w	r9, #0
 800d91e:	f000 8094 	beq.w	800da4a <ai_platform_network_init+0x2fa>
 800d922:	f04f 0c01 	mov.w	ip, #1
 800d926:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800d928:	2600      	movs	r6, #0
 800d92a:	83e7      	strh	r7, [r4, #30]
 800d92c:	4563      	cmp	r3, ip
 800d92e:	83a6      	strh	r6, [r4, #28]
 800d930:	d37a      	bcc.n	800da28 <ai_platform_network_init+0x2d8>
 800d932:	f1bc 0f00 	cmp.w	ip, #0
 800d936:	f000 809c 	beq.w	800da72 <ai_platform_network_init+0x322>
 800d93a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800d93c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800d940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d942:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800d946:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d94a:	e74c      	b.n	800d7e6 <ai_platform_network_init+0x96>
 800d94c:	4a35      	ldr	r2, [pc, #212]	; (800da24 <ai_platform_network_init+0x2d4>)
 800d94e:	2301      	movs	r3, #1
 800d950:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d954:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1fb      	bne.n	800d954 <ai_platform_network_init+0x204>
 800d95c:	492f      	ldr	r1, [pc, #188]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d95e:	4b30      	ldr	r3, [pc, #192]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d960:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800d964:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d968:	429a      	cmp	r2, r3
 800d96a:	d09c      	beq.n	800d8a6 <ai_platform_network_init+0x156>
 800d96c:	e7fe      	b.n	800d96c <ai_platform_network_init+0x21c>
 800d96e:	4a2d      	ldr	r2, [pc, #180]	; (800da24 <ai_platform_network_init+0x2d4>)
 800d970:	2301      	movs	r3, #1
 800d972:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800d976:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d1fb      	bne.n	800d976 <ai_platform_network_init+0x226>
 800d97e:	4b27      	ldr	r3, [pc, #156]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d980:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800d984:	4b26      	ldr	r3, [pc, #152]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d986:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800d98a:	429a      	cmp	r2, r3
 800d98c:	f43f af18 	beq.w	800d7c0 <ai_platform_network_init+0x70>
 800d990:	e7fe      	b.n	800d990 <ai_platform_network_init+0x240>
 800d992:	2800      	cmp	r0, #0
 800d994:	d153      	bne.n	800da3e <ai_platform_network_init+0x2ee>
 800d996:	4680      	mov	r8, r0
 800d998:	4684      	mov	ip, r0
 800d99a:	2e00      	cmp	r6, #0
 800d99c:	d063      	beq.n	800da66 <ai_platform_network_init+0x316>
 800d99e:	8be6      	ldrh	r6, [r4, #30]
 800d9a0:	2e00      	cmp	r6, #0
 800d9a2:	d168      	bne.n	800da76 <ai_platform_network_init+0x326>
 800d9a4:	2212      	movs	r2, #18
 800d9a6:	2116      	movs	r1, #22
 800d9a8:	f104 0010 	add.w	r0, r4, #16
 800d9ac:	f000 fc7c 	bl	800e2a8 <core_set_error>
 800d9b0:	e77c      	b.n	800d8ac <ai_platform_network_init+0x15c>
 800d9b2:	4a19      	ldr	r2, [pc, #100]	; (800da18 <ai_platform_network_init+0x2c8>)
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	6093      	str	r3, [r2, #8]
 800d9b8:	6893      	ldr	r3, [r2, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1fc      	bne.n	800d9b8 <ai_platform_network_init+0x268>
 800d9be:	4b17      	ldr	r3, [pc, #92]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d9c0:	6013      	str	r3, [r2, #0]
 800d9c2:	4b17      	ldr	r3, [pc, #92]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d9c4:	6812      	ldr	r2, [r2, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	f43f aefa 	beq.w	800d7c0 <ai_platform_network_init+0x70>
 800d9cc:	e7fe      	b.n	800d9cc <ai_platform_network_init+0x27c>
 800d9ce:	4a12      	ldr	r2, [pc, #72]	; (800da18 <ai_platform_network_init+0x2c8>)
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	6093      	str	r3, [r2, #8]
 800d9d4:	6893      	ldr	r3, [r2, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1fc      	bne.n	800d9d4 <ai_platform_network_init+0x284>
 800d9da:	4910      	ldr	r1, [pc, #64]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d9dc:	4b10      	ldr	r3, [pc, #64]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d9de:	6011      	str	r1, [r2, #0]
 800d9e0:	6812      	ldr	r2, [r2, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	f43f af5f 	beq.w	800d8a6 <ai_platform_network_init+0x156>
 800d9e8:	e7fe      	b.n	800d9e8 <ai_platform_network_init+0x298>
 800d9ea:	4a0b      	ldr	r2, [pc, #44]	; (800da18 <ai_platform_network_init+0x2c8>)
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	6093      	str	r3, [r2, #8]
 800d9f0:	6893      	ldr	r3, [r2, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1fc      	bne.n	800d9f0 <ai_platform_network_init+0x2a0>
 800d9f6:	4b09      	ldr	r3, [pc, #36]	; (800da1c <ai_platform_network_init+0x2cc>)
 800d9f8:	6013      	str	r3, [r2, #0]
 800d9fa:	4b09      	ldr	r3, [pc, #36]	; (800da20 <ai_platform_network_init+0x2d0>)
 800d9fc:	6812      	ldr	r2, [r2, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	f43f aede 	beq.w	800d7c0 <ai_platform_network_init+0x70>
 800da04:	e7fe      	b.n	800da04 <ai_platform_network_init+0x2b4>
 800da06:	bf00      	nop
 800da08:	a1c00100 	.word	0xa1c00100
 800da0c:	e0042000 	.word	0xe0042000
 800da10:	5c001000 	.word	0x5c001000
 800da14:	a1facade 	.word	0xa1facade
 800da18:	40023000 	.word	0x40023000
 800da1c:	f407a5c2 	.word	0xf407a5c2
 800da20:	b5e8b5cd 	.word	0xb5e8b5cd
 800da24:	58024000 	.word	0x58024000
 800da28:	2213      	movs	r2, #19
 800da2a:	2116      	movs	r1, #22
 800da2c:	f104 0010 	add.w	r0, r4, #16
 800da30:	f000 fc3a 	bl	800e2a8 <core_set_error>
 800da34:	e73a      	b.n	800d8ac <ai_platform_network_init+0x15c>
 800da36:	4607      	mov	r7, r0
 800da38:	4680      	mov	r8, r0
 800da3a:	4684      	mov	ip, r0
 800da3c:	e773      	b.n	800d926 <ai_platform_network_init+0x1d6>
 800da3e:	f1b9 0f00 	cmp.w	r9, #0
 800da42:	d002      	beq.n	800da4a <ai_platform_network_init+0x2fa>
 800da44:	f04f 0c01 	mov.w	ip, #1
 800da48:	e7a7      	b.n	800d99a <ai_platform_network_init+0x24a>
 800da4a:	2110      	movs	r1, #16
 800da4c:	2213      	movs	r2, #19
 800da4e:	2600      	movs	r6, #0
 800da50:	1860      	adds	r0, r4, r1
 800da52:	f000 fc29 	bl	800e2a8 <core_set_error>
 800da56:	e729      	b.n	800d8ac <ai_platform_network_init+0x15c>
 800da58:	2110      	movs	r1, #16
 800da5a:	2211      	movs	r2, #17
 800da5c:	462e      	mov	r6, r5
 800da5e:	1860      	adds	r0, r4, r1
 800da60:	f000 fc22 	bl	800e2a8 <core_set_error>
 800da64:	e722      	b.n	800d8ac <ai_platform_network_init+0x15c>
 800da66:	2110      	movs	r1, #16
 800da68:	2212      	movs	r2, #18
 800da6a:	1860      	adds	r0, r4, r1
 800da6c:	f000 fc1c 	bl	800e2a8 <core_set_error>
 800da70:	e71c      	b.n	800d8ac <ai_platform_network_init+0x15c>
 800da72:	4666      	mov	r6, ip
 800da74:	e6b7      	b.n	800d7e6 <ai_platform_network_init+0x96>
 800da76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da78:	6a26      	ldr	r6, [r4, #32]
 800da7a:	2701      	movs	r7, #1
 800da7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800da7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800da82:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800da86:	e74e      	b.n	800d926 <ai_platform_network_init+0x1d6>

0800da88 <ai_platform_network_post_init>:
 800da88:	b538      	push	{r3, r4, r5, lr}
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d04e      	beq.n	800db2c <ai_platform_network_post_init+0xa4>
 800da8e:	4b8c      	ldr	r3, [pc, #560]	; (800dcc0 <ai_platform_network_post_init+0x238>)
 800da90:	4604      	mov	r4, r0
 800da92:	6802      	ldr	r2, [r0, #0]
 800da94:	429a      	cmp	r2, r3
 800da96:	d149      	bne.n	800db2c <ai_platform_network_post_init+0xa4>
 800da98:	f7fe ffa6 	bl	800c9e8 <_ai_platform_acquire_crc>
 800da9c:	4b89      	ldr	r3, [pc, #548]	; (800dcc4 <ai_platform_network_post_init+0x23c>)
 800da9e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daa8:	189a      	adds	r2, r3, r2
 800daaa:	2a01      	cmp	r2, #1
 800daac:	f240 8095 	bls.w	800dbda <ai_platform_network_post_init+0x152>
 800dab0:	f240 4249 	movw	r2, #1097	; 0x449
 800dab4:	4293      	cmp	r3, r2
 800dab6:	f000 8090 	beq.w	800dbda <ai_platform_network_post_init+0x152>
 800daba:	4a83      	ldr	r2, [pc, #524]	; (800dcc8 <ai_platform_network_post_init+0x240>)
 800dabc:	6813      	ldr	r3, [r2, #0]
 800dabe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dac2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dac6:	f000 8096 	beq.w	800dbf6 <ai_platform_network_post_init+0x16e>
 800daca:	6813      	ldr	r3, [r2, #0]
 800dacc:	f240 4183 	movw	r1, #1155	; 0x483
 800dad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dad4:	428b      	cmp	r3, r1
 800dad6:	f000 80b8 	beq.w	800dc4a <ai_platform_network_post_init+0x1c2>
 800dada:	6813      	ldr	r3, [r2, #0]
 800dadc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dae0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dae4:	f000 80de 	beq.w	800dca4 <ai_platform_network_post_init+0x21c>
 800dae8:	6813      	ldr	r3, [r2, #0]
 800daea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f000 80bd 	beq.w	800dc6e <ai_platform_network_post_init+0x1e6>
 800daf4:	f7fe ff7a 	bl	800c9ec <_ai_platform_release_crc>
 800daf8:	68e3      	ldr	r3, [r4, #12]
 800dafa:	f013 0502 	ands.w	r5, r3, #2
 800dafe:	f000 808c 	beq.w	800dc1a <ai_platform_network_post_init+0x192>
 800db02:	4620      	mov	r0, r4
 800db04:	f002 fa7c 	bl	8010000 <ai_layers_post_init_all>
 800db08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db0a:	b16b      	cbz	r3, 800db28 <ai_platform_network_post_init+0xa0>
 800db0c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800db0e:	e007      	b.n	800db20 <ai_platform_network_post_init+0x98>
 800db10:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800db14:	4798      	blx	r3
 800db16:	692b      	ldr	r3, [r5, #16]
 800db18:	b133      	cbz	r3, 800db28 <ai_platform_network_post_init+0xa0>
 800db1a:	42ab      	cmp	r3, r5
 800db1c:	461d      	mov	r5, r3
 800db1e:	d003      	beq.n	800db28 <ai_platform_network_post_init+0xa0>
 800db20:	4629      	mov	r1, r5
 800db22:	2000      	movs	r0, #0
 800db24:	2d00      	cmp	r5, #0
 800db26:	d1f3      	bne.n	800db10 <ai_platform_network_post_init+0x88>
 800db28:	2001      	movs	r0, #1
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	f7fe ff5c 	bl	800c9e8 <_ai_platform_acquire_crc>
 800db30:	4b64      	ldr	r3, [pc, #400]	; (800dcc4 <ai_platform_network_post_init+0x23c>)
 800db32:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db3c:	185a      	adds	r2, r3, r1
 800db3e:	2a01      	cmp	r2, #1
 800db40:	d92a      	bls.n	800db98 <ai_platform_network_post_init+0x110>
 800db42:	f240 4249 	movw	r2, #1097	; 0x449
 800db46:	4293      	cmp	r3, r2
 800db48:	d026      	beq.n	800db98 <ai_platform_network_post_init+0x110>
 800db4a:	4a5f      	ldr	r2, [pc, #380]	; (800dcc8 <ai_platform_network_post_init+0x240>)
 800db4c:	6813      	ldr	r3, [r2, #0]
 800db4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800db56:	d02c      	beq.n	800dbb2 <ai_platform_network_post_init+0x12a>
 800db58:	6813      	ldr	r3, [r2, #0]
 800db5a:	f240 4183 	movw	r1, #1155	; 0x483
 800db5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db62:	428b      	cmp	r3, r1
 800db64:	d060      	beq.n	800dc28 <ai_platform_network_post_init+0x1a0>
 800db66:	6813      	ldr	r3, [r2, #0]
 800db68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db6c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800db70:	f000 808b 	beq.w	800dc8a <ai_platform_network_post_init+0x202>
 800db74:	6813      	ldr	r3, [r2, #0]
 800db76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d129      	bne.n	800dbd2 <ai_platform_network_post_init+0x14a>
 800db7e:	4a53      	ldr	r2, [pc, #332]	; (800dccc <ai_platform_network_post_init+0x244>)
 800db80:	2301      	movs	r3, #1
 800db82:	6093      	str	r3, [r2, #8]
 800db84:	6893      	ldr	r3, [r2, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1fc      	bne.n	800db84 <ai_platform_network_post_init+0xfc>
 800db8a:	4951      	ldr	r1, [pc, #324]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800db8c:	4b51      	ldr	r3, [pc, #324]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800db8e:	6011      	str	r1, [r2, #0]
 800db90:	6812      	ldr	r2, [r2, #0]
 800db92:	429a      	cmp	r2, r3
 800db94:	d01d      	beq.n	800dbd2 <ai_platform_network_post_init+0x14a>
 800db96:	e7fe      	b.n	800db96 <ai_platform_network_post_init+0x10e>
 800db98:	4a4c      	ldr	r2, [pc, #304]	; (800dccc <ai_platform_network_post_init+0x244>)
 800db9a:	2301      	movs	r3, #1
 800db9c:	6093      	str	r3, [r2, #8]
 800db9e:	6893      	ldr	r3, [r2, #8]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1fc      	bne.n	800db9e <ai_platform_network_post_init+0x116>
 800dba4:	494a      	ldr	r1, [pc, #296]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dba6:	4b4b      	ldr	r3, [pc, #300]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dba8:	6011      	str	r1, [r2, #0]
 800dbaa:	6812      	ldr	r2, [r2, #0]
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d010      	beq.n	800dbd2 <ai_platform_network_post_init+0x14a>
 800dbb0:	e7fe      	b.n	800dbb0 <ai_platform_network_post_init+0x128>
 800dbb2:	4a49      	ldr	r2, [pc, #292]	; (800dcd8 <ai_platform_network_post_init+0x250>)
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dbba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1fb      	bne.n	800dbba <ai_platform_network_post_init+0x132>
 800dbc2:	4943      	ldr	r1, [pc, #268]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dbc4:	4b43      	ldr	r3, [pc, #268]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dbc6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dbca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d110      	bne.n	800dbf4 <ai_platform_network_post_init+0x16c>
 800dbd2:	f7fe ff0b 	bl	800c9ec <_ai_platform_release_crc>
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	bd38      	pop	{r3, r4, r5, pc}
 800dbda:	4a3c      	ldr	r2, [pc, #240]	; (800dccc <ai_platform_network_post_init+0x244>)
 800dbdc:	2301      	movs	r3, #1
 800dbde:	6093      	str	r3, [r2, #8]
 800dbe0:	6893      	ldr	r3, [r2, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1fc      	bne.n	800dbe0 <ai_platform_network_post_init+0x158>
 800dbe6:	493a      	ldr	r1, [pc, #232]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dbe8:	4b3a      	ldr	r3, [pc, #232]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dbea:	6011      	str	r1, [r2, #0]
 800dbec:	6812      	ldr	r2, [r2, #0]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d080      	beq.n	800daf4 <ai_platform_network_post_init+0x6c>
 800dbf2:	e7fe      	b.n	800dbf2 <ai_platform_network_post_init+0x16a>
 800dbf4:	e7fe      	b.n	800dbf4 <ai_platform_network_post_init+0x16c>
 800dbf6:	4a38      	ldr	r2, [pc, #224]	; (800dcd8 <ai_platform_network_post_init+0x250>)
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dbfe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1fb      	bne.n	800dbfe <ai_platform_network_post_init+0x176>
 800dc06:	4932      	ldr	r1, [pc, #200]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dc08:	4b32      	ldr	r3, [pc, #200]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dc0a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dc0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dc12:	429a      	cmp	r2, r3
 800dc14:	f43f af6e 	beq.w	800daf4 <ai_platform_network_post_init+0x6c>
 800dc18:	e7fe      	b.n	800dc18 <ai_platform_network_post_init+0x190>
 800dc1a:	2210      	movs	r2, #16
 800dc1c:	2111      	movs	r1, #17
 800dc1e:	18a0      	adds	r0, r4, r2
 800dc20:	f000 fb42 	bl	800e2a8 <core_set_error>
 800dc24:	4628      	mov	r0, r5
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	4a2b      	ldr	r2, [pc, #172]	; (800dcd8 <ai_platform_network_post_init+0x250>)
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dc30:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1fb      	bne.n	800dc30 <ai_platform_network_post_init+0x1a8>
 800dc38:	4925      	ldr	r1, [pc, #148]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dc3a:	4b26      	ldr	r3, [pc, #152]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dc3c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dc40:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d0c4      	beq.n	800dbd2 <ai_platform_network_post_init+0x14a>
 800dc48:	e7fe      	b.n	800dc48 <ai_platform_network_post_init+0x1c0>
 800dc4a:	4a23      	ldr	r2, [pc, #140]	; (800dcd8 <ai_platform_network_post_init+0x250>)
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dc52:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1fb      	bne.n	800dc52 <ai_platform_network_post_init+0x1ca>
 800dc5a:	491d      	ldr	r1, [pc, #116]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dc5c:	4b1d      	ldr	r3, [pc, #116]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dc5e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800dc62:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800dc66:	429a      	cmp	r2, r3
 800dc68:	f43f af44 	beq.w	800daf4 <ai_platform_network_post_init+0x6c>
 800dc6c:	e7fe      	b.n	800dc6c <ai_platform_network_post_init+0x1e4>
 800dc6e:	4a17      	ldr	r2, [pc, #92]	; (800dccc <ai_platform_network_post_init+0x244>)
 800dc70:	2301      	movs	r3, #1
 800dc72:	6093      	str	r3, [r2, #8]
 800dc74:	6893      	ldr	r3, [r2, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1fc      	bne.n	800dc74 <ai_platform_network_post_init+0x1ec>
 800dc7a:	4915      	ldr	r1, [pc, #84]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dc7c:	4b15      	ldr	r3, [pc, #84]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dc7e:	6011      	str	r1, [r2, #0]
 800dc80:	6812      	ldr	r2, [r2, #0]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	f43f af36 	beq.w	800daf4 <ai_platform_network_post_init+0x6c>
 800dc88:	e7fe      	b.n	800dc88 <ai_platform_network_post_init+0x200>
 800dc8a:	4a10      	ldr	r2, [pc, #64]	; (800dccc <ai_platform_network_post_init+0x244>)
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	6093      	str	r3, [r2, #8]
 800dc90:	6893      	ldr	r3, [r2, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1fc      	bne.n	800dc90 <ai_platform_network_post_init+0x208>
 800dc96:	490e      	ldr	r1, [pc, #56]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dc98:	4b0e      	ldr	r3, [pc, #56]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dc9a:	6011      	str	r1, [r2, #0]
 800dc9c:	6812      	ldr	r2, [r2, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d097      	beq.n	800dbd2 <ai_platform_network_post_init+0x14a>
 800dca2:	e7fe      	b.n	800dca2 <ai_platform_network_post_init+0x21a>
 800dca4:	4a09      	ldr	r2, [pc, #36]	; (800dccc <ai_platform_network_post_init+0x244>)
 800dca6:	2301      	movs	r3, #1
 800dca8:	6093      	str	r3, [r2, #8]
 800dcaa:	6893      	ldr	r3, [r2, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d1fc      	bne.n	800dcaa <ai_platform_network_post_init+0x222>
 800dcb0:	4907      	ldr	r1, [pc, #28]	; (800dcd0 <ai_platform_network_post_init+0x248>)
 800dcb2:	4b08      	ldr	r3, [pc, #32]	; (800dcd4 <ai_platform_network_post_init+0x24c>)
 800dcb4:	6011      	str	r1, [r2, #0]
 800dcb6:	6812      	ldr	r2, [r2, #0]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	f43f af1b 	beq.w	800daf4 <ai_platform_network_post_init+0x6c>
 800dcbe:	e7fe      	b.n	800dcbe <ai_platform_network_post_init+0x236>
 800dcc0:	a1c00100 	.word	0xa1c00100
 800dcc4:	e0042000 	.word	0xe0042000
 800dcc8:	5c001000 	.word	0x5c001000
 800dccc:	40023000 	.word	0x40023000
 800dcd0:	f407a5c2 	.word	0xf407a5c2
 800dcd4:	b5e8b5cd 	.word	0xb5e8b5cd
 800dcd8:	58024000 	.word	0x58024000

0800dcdc <ai_platform_network_process>:
 800dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce0:	b085      	sub	sp, #20
 800dce2:	460e      	mov	r6, r1
 800dce4:	4605      	mov	r5, r0
 800dce6:	9201      	str	r2, [sp, #4]
 800dce8:	b120      	cbz	r0, 800dcf4 <ai_platform_network_process+0x18>
 800dcea:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <ai_platform_network_process+0xa0>)
 800dcec:	6802      	ldr	r2, [r0, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	bf18      	it	ne
 800dcf2:	2500      	movne	r5, #0
 800dcf4:	f7fe fe78 	bl	800c9e8 <_ai_platform_acquire_crc>
 800dcf8:	4b21      	ldr	r3, [pc, #132]	; (800dd80 <ai_platform_network_process+0xa4>)
 800dcfa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd04:	185a      	adds	r2, r3, r1
 800dd06:	2a01      	cmp	r2, #1
 800dd08:	d92b      	bls.n	800dd62 <ai_platform_network_process+0x86>
 800dd0a:	f240 4249 	movw	r2, #1097	; 0x449
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d027      	beq.n	800dd62 <ai_platform_network_process+0x86>
 800dd12:	4a1c      	ldr	r2, [pc, #112]	; (800dd84 <ai_platform_network_process+0xa8>)
 800dd14:	6813      	ldr	r3, [r2, #0]
 800dd16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800dd1e:	d039      	beq.n	800dd94 <ai_platform_network_process+0xb8>
 800dd20:	6813      	ldr	r3, [r2, #0]
 800dd22:	f240 4183 	movw	r1, #1155	; 0x483
 800dd26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd2a:	428b      	cmp	r3, r1
 800dd2c:	f000 819c 	beq.w	800e068 <ai_platform_network_process+0x38c>
 800dd30:	6813      	ldr	r3, [r2, #0]
 800dd32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd36:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800dd3a:	f000 8179 	beq.w	800e030 <ai_platform_network_process+0x354>
 800dd3e:	6813      	ldr	r3, [r2, #0]
 800dd40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d136      	bne.n	800ddb6 <ai_platform_network_process+0xda>
 800dd48:	4a0f      	ldr	r2, [pc, #60]	; (800dd88 <ai_platform_network_process+0xac>)
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	6093      	str	r3, [r2, #8]
 800dd4e:	6893      	ldr	r3, [r2, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1fc      	bne.n	800dd4e <ai_platform_network_process+0x72>
 800dd54:	4b0d      	ldr	r3, [pc, #52]	; (800dd8c <ai_platform_network_process+0xb0>)
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	4b0d      	ldr	r3, [pc, #52]	; (800dd90 <ai_platform_network_process+0xb4>)
 800dd5a:	6812      	ldr	r2, [r2, #0]
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d02a      	beq.n	800ddb6 <ai_platform_network_process+0xda>
 800dd60:	e7fe      	b.n	800dd60 <ai_platform_network_process+0x84>
 800dd62:	4a09      	ldr	r2, [pc, #36]	; (800dd88 <ai_platform_network_process+0xac>)
 800dd64:	2301      	movs	r3, #1
 800dd66:	6093      	str	r3, [r2, #8]
 800dd68:	6893      	ldr	r3, [r2, #8]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d1fc      	bne.n	800dd68 <ai_platform_network_process+0x8c>
 800dd6e:	4b07      	ldr	r3, [pc, #28]	; (800dd8c <ai_platform_network_process+0xb0>)
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	4b07      	ldr	r3, [pc, #28]	; (800dd90 <ai_platform_network_process+0xb4>)
 800dd74:	6812      	ldr	r2, [r2, #0]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d01d      	beq.n	800ddb6 <ai_platform_network_process+0xda>
 800dd7a:	e7fe      	b.n	800dd7a <ai_platform_network_process+0x9e>
 800dd7c:	a1c00100 	.word	0xa1c00100
 800dd80:	e0042000 	.word	0xe0042000
 800dd84:	5c001000 	.word	0x5c001000
 800dd88:	40023000 	.word	0x40023000
 800dd8c:	f407a5c2 	.word	0xf407a5c2
 800dd90:	b5e8b5cd 	.word	0xb5e8b5cd
 800dd94:	4ab0      	ldr	r2, [pc, #704]	; (800e058 <ai_platform_network_process+0x37c>)
 800dd96:	2301      	movs	r3, #1
 800dd98:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800dd9c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d1fb      	bne.n	800dd9c <ai_platform_network_process+0xc0>
 800dda4:	4bad      	ldr	r3, [pc, #692]	; (800e05c <ai_platform_network_process+0x380>)
 800dda6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ddaa:	4bad      	ldr	r3, [pc, #692]	; (800e060 <ai_platform_network_process+0x384>)
 800ddac:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	f040 812b 	bne.w	800e00c <ai_platform_network_process+0x330>
 800ddb6:	f7fe fe19 	bl	800c9ec <_ai_platform_release_crc>
 800ddba:	2d00      	cmp	r5, #0
 800ddbc:	f000 8172 	beq.w	800e0a4 <ai_platform_network_process+0x3c8>
 800ddc0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 8123 	beq.w	800e00e <ai_platform_network_process+0x332>
 800ddc8:	68eb      	ldr	r3, [r5, #12]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800ddd0:	f003 0303 	and.w	r3, r3, #3
 800ddd4:	616a      	str	r2, [r5, #20]
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	f040 811f 	bne.w	800e01a <ai_platform_network_process+0x33e>
 800dddc:	2e00      	cmp	r6, #0
 800ddde:	f000 8156 	beq.w	800e08e <ai_platform_network_process+0x3b2>
 800dde2:	fab8 f788 	clz	r7, r8
 800dde6:	097f      	lsrs	r7, r7, #5
 800dde8:	f1b8 0f00 	cmp.w	r8, #0
 800ddec:	f000 814f 	beq.w	800e08e <ai_platform_network_process+0x3b2>
 800ddf0:	f8b8 3000 	ldrh.w	r3, [r8]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f000 814a 	beq.w	800e08e <ai_platform_network_process+0x3b2>
 800ddfa:	69b3      	ldr	r3, [r6, #24]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800de02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d072      	beq.n	800def0 <ai_platform_network_process+0x214>
 800de0a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800de0e:	2c00      	cmp	r4, #0
 800de10:	d06e      	beq.n	800def0 <ai_platform_network_process+0x214>
 800de12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de16:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800de1a:	f8d3 a000 	ldr.w	sl, [r3]
 800de1e:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800de22:	f000 8133 	beq.w	800e08c <ai_platform_network_process+0x3b0>
 800de26:	69a3      	ldr	r3, [r4, #24]
 800de28:	2101      	movs	r1, #1
 800de2a:	4630      	mov	r0, r6
 800de2c:	685d      	ldr	r5, [r3, #4]
 800de2e:	f7fe fd9d 	bl	800c96c <ai_buffer_get_size>
 800de32:	4285      	cmp	r5, r0
 800de34:	f0c0 8138 	bcc.w	800e0a8 <ai_platform_network_process+0x3cc>
 800de38:	68e0      	ldr	r0, [r4, #12]
 800de3a:	69b1      	ldr	r1, [r6, #24]
 800de3c:	68c2      	ldr	r2, [r0, #12]
 800de3e:	68cb      	ldr	r3, [r1, #12]
 800de40:	429a      	cmp	r2, r3
 800de42:	f040 8131 	bne.w	800e0a8 <ai_platform_network_process+0x3cc>
 800de46:	6882      	ldr	r2, [r0, #8]
 800de48:	688b      	ldr	r3, [r1, #8]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	f040 812c 	bne.w	800e0a8 <ai_platform_network_process+0x3cc>
 800de50:	6842      	ldr	r2, [r0, #4]
 800de52:	684b      	ldr	r3, [r1, #4]
 800de54:	429a      	cmp	r2, r3
 800de56:	f040 8127 	bne.w	800e0a8 <ai_platform_network_process+0x3cc>
 800de5a:	69a3      	ldr	r3, [r4, #24]
 800de5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de60:	f002 fb02 	bl	8010468 <ai_array_get_data_byte_size>
 800de64:	4605      	mov	r5, r0
 800de66:	4620      	mov	r0, r4
 800de68:	f002 fa54 	bl	8010314 <get_tensor_byte_size>
 800de6c:	4285      	cmp	r5, r0
 800de6e:	f0c0 811b 	bcc.w	800e0a8 <ai_platform_network_process+0x3cc>
 800de72:	69a3      	ldr	r3, [r4, #24]
 800de74:	6818      	ldr	r0, [r3, #0]
 800de76:	f002 fa63 	bl	8010340 <ai_array_to_buffer_fmt>
 800de7a:	6833      	ldr	r3, [r6, #0]
 800de7c:	4058      	eors	r0, r3
 800de7e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800de82:	f040 81ca 	bne.w	800e21a <ai_platform_network_process+0x53e>
 800de86:	6873      	ldr	r3, [r6, #4]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f000 81bd 	beq.w	800e208 <ai_platform_network_process+0x52c>
 800de8e:	69b3      	ldr	r3, [r6, #24]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	f000 81ca 	beq.w	800e22c <ai_platform_network_process+0x550>
 800de98:	9a02      	ldr	r2, [sp, #8]
 800de9a:	4620      	mov	r0, r4
 800de9c:	3701      	adds	r7, #1
 800de9e:	361c      	adds	r6, #28
 800dea0:	429a      	cmp	r2, r3
 800dea2:	bf38      	it	cc
 800dea4:	461a      	movcc	r2, r3
 800dea6:	9202      	str	r2, [sp, #8]
 800dea8:	f002 fa34 	bl	8010314 <get_tensor_byte_size>
 800deac:	f8c9 0008 	str.w	r0, [r9, #8]
 800deb0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	fb00 f303 	mul.w	r3, r0, r3
 800deba:	f8c9 300c 	str.w	r3, [r9, #12]
 800debe:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800dec2:	440b      	add	r3, r1
 800dec4:	f8c9 1004 	str.w	r1, [r9, #4]
 800dec8:	f84a 300b 	str.w	r3, [sl, fp]
 800decc:	69a0      	ldr	r0, [r4, #24]
 800dece:	6803      	ldr	r3, [r0, #0]
 800ded0:	009a      	lsls	r2, r3, #2
 800ded2:	f100 80bb 	bmi.w	800e04c <ai_platform_network_process+0x370>
 800ded6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800deda:	1a9b      	subs	r3, r3, r2
 800dedc:	4419      	add	r1, r3
 800dede:	6081      	str	r1, [r0, #8]
 800dee0:	69a3      	ldr	r3, [r4, #24]
 800dee2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800dee6:	60da      	str	r2, [r3, #12]
 800dee8:	f8b8 3000 	ldrh.w	r3, [r8]
 800deec:	42bb      	cmp	r3, r7
 800deee:	d888      	bhi.n	800de02 <ai_platform_network_process+0x126>
 800def0:	9d03      	ldr	r5, [sp, #12]
 800def2:	9b01      	ldr	r3, [sp, #4]
 800def4:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 81a1 	beq.w	800e23e <ai_platform_network_process+0x562>
 800defc:	2a01      	cmp	r2, #1
 800defe:	f240 817b 	bls.w	800e1f8 <ai_platform_network_process+0x51c>
 800df02:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800df06:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 8174 	beq.w	800e1f8 <ai_platform_network_process+0x51c>
 800df10:	9e01      	ldr	r6, [sp, #4]
 800df12:	2700      	movs	r7, #0
 800df14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 80d3 	beq.w	800e0c4 <ai_platform_network_process+0x3e8>
 800df1e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800df22:	2c00      	cmp	r4, #0
 800df24:	f000 80ce 	beq.w	800e0c4 <ai_platform_network_process+0x3e8>
 800df28:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df2c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800df30:	f8d3 8000 	ldr.w	r8, [r3]
 800df34:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800df38:	f000 819f 	beq.w	800e27a <ai_platform_network_process+0x59e>
 800df3c:	69a3      	ldr	r3, [r4, #24]
 800df3e:	2101      	movs	r1, #1
 800df40:	4630      	mov	r0, r6
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	f7fe fd11 	bl	800c96c <ai_buffer_get_size>
 800df4a:	9b01      	ldr	r3, [sp, #4]
 800df4c:	4283      	cmp	r3, r0
 800df4e:	f0c0 8153 	bcc.w	800e1f8 <ai_platform_network_process+0x51c>
 800df52:	68e0      	ldr	r0, [r4, #12]
 800df54:	69b1      	ldr	r1, [r6, #24]
 800df56:	68c2      	ldr	r2, [r0, #12]
 800df58:	68cb      	ldr	r3, [r1, #12]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	f040 814c 	bne.w	800e1f8 <ai_platform_network_process+0x51c>
 800df60:	6882      	ldr	r2, [r0, #8]
 800df62:	688b      	ldr	r3, [r1, #8]
 800df64:	429a      	cmp	r2, r3
 800df66:	f040 8147 	bne.w	800e1f8 <ai_platform_network_process+0x51c>
 800df6a:	6842      	ldr	r2, [r0, #4]
 800df6c:	684b      	ldr	r3, [r1, #4]
 800df6e:	429a      	cmp	r2, r3
 800df70:	f040 8142 	bne.w	800e1f8 <ai_platform_network_process+0x51c>
 800df74:	69a3      	ldr	r3, [r4, #24]
 800df76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df7a:	f002 fa75 	bl	8010468 <ai_array_get_data_byte_size>
 800df7e:	9001      	str	r0, [sp, #4]
 800df80:	4620      	mov	r0, r4
 800df82:	f002 f9c7 	bl	8010314 <get_tensor_byte_size>
 800df86:	9b01      	ldr	r3, [sp, #4]
 800df88:	4283      	cmp	r3, r0
 800df8a:	f0c0 8135 	bcc.w	800e1f8 <ai_platform_network_process+0x51c>
 800df8e:	69a3      	ldr	r3, [r4, #24]
 800df90:	6818      	ldr	r0, [r3, #0]
 800df92:	f002 f9d5 	bl	8010340 <ai_array_to_buffer_fmt>
 800df96:	6833      	ldr	r3, [r6, #0]
 800df98:	4058      	eors	r0, r3
 800df9a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800df9e:	f040 815c 	bne.w	800e25a <ai_platform_network_process+0x57e>
 800dfa2:	6873      	ldr	r3, [r6, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 8150 	beq.w	800e24a <ai_platform_network_process+0x56e>
 800dfaa:	69b3      	ldr	r3, [r6, #24]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	f000 815b 	beq.w	800e26a <ai_platform_network_process+0x58e>
 800dfb4:	9a02      	ldr	r2, [sp, #8]
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	3701      	adds	r7, #1
 800dfba:	361c      	adds	r6, #28
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	bf38      	it	cc
 800dfc0:	461a      	movcc	r2, r3
 800dfc2:	9202      	str	r2, [sp, #8]
 800dfc4:	f002 f9a6 	bl	8010314 <get_tensor_byte_size>
 800dfc8:	f8ca 0008 	str.w	r0, [sl, #8]
 800dfcc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	fb00 f303 	mul.w	r3, r0, r3
 800dfd6:	f8ca 300c 	str.w	r3, [sl, #12]
 800dfda:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800dfde:	440b      	add	r3, r1
 800dfe0:	f8ca 1004 	str.w	r1, [sl, #4]
 800dfe4:	f848 300b 	str.w	r3, [r8, fp]
 800dfe8:	69a0      	ldr	r0, [r4, #24]
 800dfea:	6803      	ldr	r3, [r0, #0]
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	d464      	bmi.n	800e0ba <ai_platform_network_process+0x3de>
 800dff0:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800dff4:	1a9b      	subs	r3, r3, r2
 800dff6:	4419      	add	r1, r3
 800dff8:	6081      	str	r1, [r0, #8]
 800dffa:	69a3      	ldr	r3, [r4, #24]
 800dffc:	f8da 2004 	ldr.w	r2, [sl, #4]
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e006:	429f      	cmp	r7, r3
 800e008:	d384      	bcc.n	800df14 <ai_platform_network_process+0x238>
 800e00a:	e05b      	b.n	800e0c4 <ai_platform_network_process+0x3e8>
 800e00c:	e7fe      	b.n	800e00c <ai_platform_network_process+0x330>
 800e00e:	68ea      	ldr	r2, [r5, #12]
 800e010:	616b      	str	r3, [r5, #20]
 800e012:	f002 0203 	and.w	r2, r2, #3
 800e016:	2a03      	cmp	r2, #3
 800e018:	d039      	beq.n	800e08e <ai_platform_network_process+0x3b2>
 800e01a:	2230      	movs	r2, #48	; 0x30
 800e01c:	2111      	movs	r1, #17
 800e01e:	f105 0010 	add.w	r0, r5, #16
 800e022:	2400      	movs	r4, #0
 800e024:	f000 f940 	bl	800e2a8 <core_set_error>
 800e028:	4620      	mov	r0, r4
 800e02a:	b005      	add	sp, #20
 800e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e030:	4a0c      	ldr	r2, [pc, #48]	; (800e064 <ai_platform_network_process+0x388>)
 800e032:	2301      	movs	r3, #1
 800e034:	6093      	str	r3, [r2, #8]
 800e036:	6893      	ldr	r3, [r2, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1fc      	bne.n	800e036 <ai_platform_network_process+0x35a>
 800e03c:	4b07      	ldr	r3, [pc, #28]	; (800e05c <ai_platform_network_process+0x380>)
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	4b07      	ldr	r3, [pc, #28]	; (800e060 <ai_platform_network_process+0x384>)
 800e042:	6812      	ldr	r2, [r2, #0]
 800e044:	429a      	cmp	r2, r3
 800e046:	f43f aeb6 	beq.w	800ddb6 <ai_platform_network_process+0xda>
 800e04a:	e7fe      	b.n	800e04a <ai_platform_network_process+0x36e>
 800e04c:	f8b8 3000 	ldrh.w	r3, [r8]
 800e050:	429f      	cmp	r7, r3
 800e052:	f4ff aed6 	bcc.w	800de02 <ai_platform_network_process+0x126>
 800e056:	e74b      	b.n	800def0 <ai_platform_network_process+0x214>
 800e058:	58024000 	.word	0x58024000
 800e05c:	f407a5c2 	.word	0xf407a5c2
 800e060:	b5e8b5cd 	.word	0xb5e8b5cd
 800e064:	40023000 	.word	0x40023000
 800e068:	4a88      	ldr	r2, [pc, #544]	; (800e28c <ai_platform_network_process+0x5b0>)
 800e06a:	2301      	movs	r3, #1
 800e06c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800e070:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1fb      	bne.n	800e070 <ai_platform_network_process+0x394>
 800e078:	4b85      	ldr	r3, [pc, #532]	; (800e290 <ai_platform_network_process+0x5b4>)
 800e07a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800e07e:	4b85      	ldr	r3, [pc, #532]	; (800e294 <ai_platform_network_process+0x5b8>)
 800e080:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800e084:	429a      	cmp	r2, r3
 800e086:	f43f ae96 	beq.w	800ddb6 <ai_platform_network_process+0xda>
 800e08a:	e7fe      	b.n	800e08a <ai_platform_network_process+0x3ae>
 800e08c:	9d03      	ldr	r5, [sp, #12]
 800e08e:	2400      	movs	r4, #0
 800e090:	2217      	movs	r2, #23
 800e092:	2112      	movs	r1, #18
 800e094:	f105 0010 	add.w	r0, r5, #16
 800e098:	f000 f906 	bl	800e2a8 <core_set_error>
 800e09c:	4620      	mov	r0, r4
 800e09e:	b005      	add	sp, #20
 800e0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a4:	462c      	mov	r4, r5
 800e0a6:	e7bf      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e0a8:	9d03      	ldr	r5, [sp, #12]
 800e0aa:	2218      	movs	r2, #24
 800e0ac:	2112      	movs	r1, #18
 800e0ae:	2400      	movs	r4, #0
 800e0b0:	f105 0010 	add.w	r0, r5, #16
 800e0b4:	f000 f8f8 	bl	800e2a8 <core_set_error>
 800e0b8:	e7b6      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e0ba:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800e0be:	429f      	cmp	r7, r3
 800e0c0:	f4ff af28 	bcc.w	800df14 <ai_platform_network_process+0x238>
 800e0c4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e0c8:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800e0ca:	82ab      	strh	r3, [r5, #20]
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	f040 808d 	bne.w	800e1ec <ai_platform_network_process+0x510>
 800e0d2:	4616      	mov	r6, r2
 800e0d4:	4617      	mov	r7, r2
 800e0d6:	8aec      	ldrh	r4, [r5, #22]
 800e0d8:	429c      	cmp	r4, r3
 800e0da:	d2a5      	bcs.n	800e028 <ai_platform_network_process+0x34c>
 800e0dc:	46ab      	mov	fp, r5
 800e0de:	2e00      	cmp	r6, #0
 800e0e0:	d030      	beq.n	800e144 <ai_platform_network_process+0x468>
 800e0e2:	f04f 0800 	mov.w	r8, #0
 800e0e6:	e014      	b.n	800e112 <ai_platform_network_process+0x436>
 800e0e8:	6882      	ldr	r2, [r0, #8]
 800e0ea:	68c5      	ldr	r5, [r0, #12]
 800e0ec:	6863      	ldr	r3, [r4, #4]
 800e0ee:	1b52      	subs	r2, r2, r5
 800e0f0:	4413      	add	r3, r2
 800e0f2:	6083      	str	r3, [r0, #8]
 800e0f4:	698b      	ldr	r3, [r1, #24]
 800e0f6:	6862      	ldr	r2, [r4, #4]
 800e0f8:	60da      	str	r2, [r3, #12]
 800e0fa:	f859 200a 	ldr.w	r2, [r9, sl]
 800e0fe:	f108 0801 	add.w	r8, r8, #1
 800e102:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800e106:	440b      	add	r3, r1
 800e108:	4293      	cmp	r3, r2
 800e10a:	d301      	bcc.n	800e110 <ai_platform_network_process+0x434>
 800e10c:	68e3      	ldr	r3, [r4, #12]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	6063      	str	r3, [r4, #4]
 800e112:	8833      	ldrh	r3, [r6, #0]
 800e114:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800e118:	4543      	cmp	r3, r8
 800e11a:	d913      	bls.n	800e144 <ai_platform_network_process+0x468>
 800e11c:	6873      	ldr	r3, [r6, #4]
 800e11e:	b18b      	cbz	r3, 800e144 <ai_platform_network_process+0x468>
 800e120:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800e124:	b171      	cbz	r1, 800e144 <ai_platform_network_process+0x468>
 800e126:	6988      	ldr	r0, [r1, #24]
 800e128:	68b2      	ldr	r2, [r6, #8]
 800e12a:	6803      	ldr	r3, [r0, #0]
 800e12c:	f8d2 9000 	ldr.w	r9, [r2]
 800e130:	009d      	lsls	r5, r3, #2
 800e132:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800e136:	d5d7      	bpl.n	800e0e8 <ai_platform_network_process+0x40c>
 800e138:	6880      	ldr	r0, [r0, #8]
 800e13a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800e13e:	f003 fa75 	bl	801162c <memcpy>
 800e142:	e7da      	b.n	800e0fa <ai_platform_network_process+0x41e>
 800e144:	4658      	mov	r0, fp
 800e146:	f001 ff6f 	bl	8010028 <ai_layers_forward_all>
 800e14a:	2f00      	cmp	r7, #0
 800e14c:	d03f      	beq.n	800e1ce <ai_platform_network_process+0x4f2>
 800e14e:	2400      	movs	r4, #0
 800e150:	e016      	b.n	800e180 <ai_platform_network_process+0x4a4>
 800e152:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800e156:	f859 100a 	ldr.w	r1, [r9, sl]
 800e15a:	4413      	add	r3, r2
 800e15c:	428b      	cmp	r3, r1
 800e15e:	d302      	bcc.n	800e166 <ai_platform_network_process+0x48a>
 800e160:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e164:	1acb      	subs	r3, r1, r3
 800e166:	f8c8 3004 	str.w	r3, [r8, #4]
 800e16a:	6981      	ldr	r1, [r0, #24]
 800e16c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800e170:	1b52      	subs	r2, r2, r5
 800e172:	4413      	add	r3, r2
 800e174:	608b      	str	r3, [r1, #8]
 800e176:	6983      	ldr	r3, [r0, #24]
 800e178:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e17c:	60da      	str	r2, [r3, #12]
 800e17e:	3401      	adds	r4, #1
 800e180:	883b      	ldrh	r3, [r7, #0]
 800e182:	42a3      	cmp	r3, r4
 800e184:	d923      	bls.n	800e1ce <ai_platform_network_process+0x4f2>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	b30b      	cbz	r3, 800e1ce <ai_platform_network_process+0x4f2>
 800e18a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e18e:	b1f0      	cbz	r0, 800e1ce <ai_platform_network_process+0x4f2>
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800e196:	6983      	ldr	r3, [r0, #24]
 800e198:	f8d2 9000 	ldr.w	r9, [r2]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800e1a2:	0092      	lsls	r2, r2, #2
 800e1a4:	d5d5      	bpl.n	800e152 <ai_platform_network_process+0x476>
 800e1a6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e1aa:	6899      	ldr	r1, [r3, #8]
 800e1ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e1b0:	f003 fa3c 	bl	801162c <memcpy>
 800e1b4:	f859 200a 	ldr.w	r2, [r9, sl]
 800e1b8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800e1bc:	440b      	add	r3, r1
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d302      	bcc.n	800e1c8 <ai_platform_network_process+0x4ec>
 800e1c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e1c6:	1ad3      	subs	r3, r2, r3
 800e1c8:	f8c8 3004 	str.w	r3, [r8, #4]
 800e1cc:	e7d7      	b.n	800e17e <ai_platform_network_process+0x4a2>
 800e1ce:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800e1d2:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800e1d6:	3401      	adds	r4, #1
 800e1d8:	b2a4      	uxth	r4, r4
 800e1da:	42a3      	cmp	r3, r4
 800e1dc:	f8ab 4016 	strh.w	r4, [fp, #22]
 800e1e0:	f63f af7d 	bhi.w	800e0de <ai_platform_network_process+0x402>
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	b005      	add	sp, #20
 800e1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	2a01      	cmp	r2, #1
 800e1ee:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800e1f0:	d029      	beq.n	800e246 <ai_platform_network_process+0x56a>
 800e1f2:	f106 070c 	add.w	r7, r6, #12
 800e1f6:	e76e      	b.n	800e0d6 <ai_platform_network_process+0x3fa>
 800e1f8:	2218      	movs	r2, #24
 800e1fa:	2113      	movs	r1, #19
 800e1fc:	f105 0010 	add.w	r0, r5, #16
 800e200:	2400      	movs	r4, #0
 800e202:	f000 f851 	bl	800e2a8 <core_set_error>
 800e206:	e70f      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e208:	9d03      	ldr	r5, [sp, #12]
 800e20a:	4604      	mov	r4, r0
 800e20c:	2217      	movs	r2, #23
 800e20e:	2112      	movs	r1, #18
 800e210:	f105 0010 	add.w	r0, r5, #16
 800e214:	f000 f848 	bl	800e2a8 <core_set_error>
 800e218:	e706      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e21a:	9d03      	ldr	r5, [sp, #12]
 800e21c:	2219      	movs	r2, #25
 800e21e:	2112      	movs	r1, #18
 800e220:	2400      	movs	r4, #0
 800e222:	f105 0010 	add.w	r0, r5, #16
 800e226:	f000 f83f 	bl	800e2a8 <core_set_error>
 800e22a:	e6fd      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e22c:	9d03      	ldr	r5, [sp, #12]
 800e22e:	4604      	mov	r4, r0
 800e230:	2221      	movs	r2, #33	; 0x21
 800e232:	2112      	movs	r1, #18
 800e234:	f105 0010 	add.w	r0, r5, #16
 800e238:	f000 f836 	bl	800e2a8 <core_set_error>
 800e23c:	e6f4      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e23e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e242:	82ab      	strh	r3, [r5, #20]
 800e244:	e742      	b.n	800e0cc <ai_platform_network_process+0x3f0>
 800e246:	2700      	movs	r7, #0
 800e248:	e745      	b.n	800e0d6 <ai_platform_network_process+0x3fa>
 800e24a:	4604      	mov	r4, r0
 800e24c:	2217      	movs	r2, #23
 800e24e:	2113      	movs	r1, #19
 800e250:	f105 0010 	add.w	r0, r5, #16
 800e254:	f000 f828 	bl	800e2a8 <core_set_error>
 800e258:	e6e6      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e25a:	2219      	movs	r2, #25
 800e25c:	2113      	movs	r1, #19
 800e25e:	f105 0010 	add.w	r0, r5, #16
 800e262:	2400      	movs	r4, #0
 800e264:	f000 f820 	bl	800e2a8 <core_set_error>
 800e268:	e6de      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e26a:	4604      	mov	r4, r0
 800e26c:	2221      	movs	r2, #33	; 0x21
 800e26e:	2113      	movs	r1, #19
 800e270:	f105 0010 	add.w	r0, r5, #16
 800e274:	f000 f818 	bl	800e2a8 <core_set_error>
 800e278:	e6d6      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e27a:	2217      	movs	r2, #23
 800e27c:	2113      	movs	r1, #19
 800e27e:	f105 0010 	add.w	r0, r5, #16
 800e282:	4654      	mov	r4, sl
 800e284:	f000 f810 	bl	800e2a8 <core_set_error>
 800e288:	e6ce      	b.n	800e028 <ai_platform_network_process+0x34c>
 800e28a:	bf00      	nop
 800e28c:	58024000 	.word	0x58024000
 800e290:	f407a5c2 	.word	0xf407a5c2
 800e294:	b5e8b5cd 	.word	0xb5e8b5cd

0800e298 <core_init>:
 800e298:	2001      	movs	r0, #1
 800e29a:	4770      	bx	lr

0800e29c <core_get_error>:
 800e29c:	4603      	mov	r3, r0
 800e29e:	2200      	movs	r2, #0
 800e2a0:	6800      	ldr	r0, [r0, #0]
 800e2a2:	601a      	str	r2, [r3, #0]
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop

0800e2a8 <core_set_error>:
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	7800      	ldrb	r0, [r0, #0]
 800e2ac:	b108      	cbz	r0, 800e2b2 <core_set_error+0xa>
 800e2ae:	2000      	movs	r0, #0
 800e2b0:	4770      	bx	lr
 800e2b2:	7019      	strb	r1, [r3, #0]
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	6819      	ldr	r1, [r3, #0]
 800e2b8:	f362 211f 	bfi	r1, r2, #8, #24
 800e2bc:	6019      	str	r1, [r3, #0]
 800e2be:	4770      	bx	lr

0800e2c0 <func_dummy>:
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop

0800e2c4 <ai_conv2d_stripe_f32.constprop.0>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	ed2d 8b0e 	vpush	{d8-d14}
 800e2cc:	b09d      	sub	sp, #116	; 0x74
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800e2d4:	66f8      	str	r0, [r7, #108]	; 0x6c
 800e2d6:	f1b9 0f01 	cmp.w	r9, #1
 800e2da:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800e2de:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800e2e2:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800e2e6:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800e2ea:	6579      	str	r1, [r7, #84]	; 0x54
 800e2ec:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800e2f0:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800e2f4:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800e2f8:	663b      	str	r3, [r7, #96]	; 0x60
 800e2fa:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800e2fe:	f000 812f 	beq.w	800e560 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800e302:	45b1      	cmp	r9, r6
 800e304:	f000 8278 	beq.w	800e7f8 <ai_conv2d_stripe_f32.constprop.0+0x534>
 800e308:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800e30c:	2900      	cmp	r1, #0
 800e30e:	f000 8114 	beq.w	800e53a <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e312:	eba0 0803 	sub.w	r8, r0, r3
 800e316:	1898      	adds	r0, r3, r2
 800e318:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e55c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800e31c:	3801      	subs	r0, #1
 800e31e:	fb93 f1f2 	sdiv	r1, r3, r2
 800e322:	fb90 f0f2 	sdiv	r0, r0, r2
 800e326:	fb02 3111 	mls	r1, r2, r1, r3
 800e32a:	eba2 0a01 	sub.w	sl, r2, r1
 800e32e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800e332:	fb01 f100 	mul.w	r1, r1, r0
 800e336:	fb9a f0f2 	sdiv	r0, sl, r2
 800e33a:	fb02 a010 	mls	r0, r2, r0, sl
 800e33e:	62b9      	str	r1, [r7, #40]	; 0x28
 800e340:	4403      	add	r3, r0
 800e342:	eba8 0100 	sub.w	r1, r8, r0
 800e346:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e34a:	4463      	add	r3, ip
 800e34c:	4411      	add	r1, r2
 800e34e:	fb00 f303 	mul.w	r3, r0, r3
 800e352:	3901      	subs	r1, #1
 800e354:	fbb6 f4f9 	udiv	r4, r6, r9
 800e358:	623b      	str	r3, [r7, #32]
 800e35a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800e35e:	fb00 f302 	mul.w	r3, r0, r2
 800e362:	f8c7 a014 	str.w	sl, [r7, #20]
 800e366:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e368:	fb0e f306 	mul.w	r3, lr, r6
 800e36c:	1b1b      	subs	r3, r3, r4
 800e36e:	fb91 fbf2 	sdiv	fp, r1, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	eba5 020b 	sub.w	r2, r5, fp
 800e378:	00b1      	lsls	r1, r6, #2
 800e37a:	46dc      	mov	ip, fp
 800e37c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e37e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e382:	61f9      	str	r1, [r7, #28]
 800e384:	fb04 f303 	mul.w	r3, r4, r3
 800e388:	fb02 f303 	mul.w	r3, r2, r3
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24
 800e390:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e394:	fbb3 f3f9 	udiv	r3, r3, r9
 800e398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	633b      	str	r3, [r7, #48]	; 0x30
 800e3a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e3a6:	f1c3 0800 	rsb	r8, r3, #0
 800e3aa:	ebae 0303 	sub.w	r3, lr, r3
 800e3ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	653b      	str	r3, [r7, #80]	; 0x50
 800e3b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f2c0 80c4 	blt.w	800e546 <ai_conv2d_stripe_f32.constprop.0+0x282>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	4673      	mov	r3, lr
 800e3c2:	4672      	mov	r2, lr
 800e3c4:	4601      	mov	r1, r0
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800e3ca:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800e3ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3d2:	fb93 f3fe 	sdiv	r3, r3, lr
 800e3d6:	4423      	add	r3, r4
 800e3d8:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800e3da:	fb0a 4303 	mla	r3, sl, r3, r4
 800e3de:	fb92 f4fe 	sdiv	r4, r2, lr
 800e3e2:	fb0e 2214 	mls	r2, lr, r4, r2
 800e3e6:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800e3ea:	4444      	add	r4, r8
 800e3ec:	42ac      	cmp	r4, r5
 800e3ee:	bf94      	ite	ls
 800e3f0:	ebc1 0104 	rsbls	r1, r1, r4
 800e3f4:	ebc1 0105 	rsbhi	r1, r1, r5
 800e3f8:	6a3c      	ldr	r4, [r7, #32]
 800e3fa:	1a89      	subs	r1, r1, r2
 800e3fc:	4471      	add	r1, lr
 800e3fe:	3901      	subs	r1, #1
 800e400:	fb91 f6fe 	sdiv	r6, r1, lr
 800e404:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e408:	4421      	add	r1, r4
 800e40a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800e40c:	4401      	add	r1, r0
 800e40e:	69f8      	ldr	r0, [r7, #28]
 800e410:	4411      	add	r1, r2
 800e412:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e414:	fb00 2201 	mla	r2, r0, r1, r2
 800e418:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e41a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e41c:	460a      	mov	r2, r1
 800e41e:	2900      	cmp	r1, #0
 800e420:	bf08      	it	eq
 800e422:	4622      	moveq	r2, r4
 800e424:	42a2      	cmp	r2, r4
 800e426:	637a      	str	r2, [r7, #52]	; 0x34
 800e428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e42a:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800e42e:	fb0e 2116 	mls	r1, lr, r6, r2
 800e432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e436:	1b92      	subs	r2, r2, r6
 800e438:	f1b9 0f00 	cmp.w	r9, #0
 800e43c:	d066      	beq.n	800e50c <ai_conv2d_stripe_f32.constprop.0+0x248>
 800e43e:	fb0a f202 	mul.w	r2, sl, r2
 800e442:	fb00 f101 	mul.w	r1, r0, r1
 800e446:	643a      	str	r2, [r7, #64]	; 0x40
 800e448:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e44c:	6479      	str	r1, [r7, #68]	; 0x44
 800e44e:	4591      	cmp	r9, r2
 800e450:	d85c      	bhi.n	800e50c <ai_conv2d_stripe_f32.constprop.0+0x248>
 800e452:	2500      	movs	r5, #0
 800e454:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e456:	46ab      	mov	fp, r5
 800e458:	3a01      	subs	r2, #1
 800e45a:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800e45e:	61ba      	str	r2, [r7, #24]
 800e460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e462:	f04f 0800 	mov.w	r8, #0
 800e466:	f8c7 b008 	str.w	fp, [r7, #8]
 800e46a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e46e:	63ba      	str	r2, [r7, #56]	; 0x38
 800e470:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e472:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800e476:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e47a:	f1bc 0f00 	cmp.w	ip, #0
 800e47e:	ecf2 7a01 	vldmia	r2!, {s15}
 800e482:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e486:	63ba      	str	r2, [r7, #56]	; 0x38
 800e488:	dd21      	ble.n	800e4ce <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800e48a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e48c:	2100      	movs	r1, #0
 800e48e:	2e00      	cmp	r6, #0
 800e490:	dd16      	ble.n	800e4c0 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800e492:	2000      	movs	r0, #0
 800e494:	eb02 040a 	add.w	r4, r2, sl
 800e498:	4294      	cmp	r4, r2
 800e49a:	d90c      	bls.n	800e4b6 <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800e49c:	4696      	mov	lr, r2
 800e49e:	469b      	mov	fp, r3
 800e4a0:	ecbe 6a01 	vldmia	lr!, {s12}
 800e4a4:	ecfb 5a01 	vldmia	fp!, {s11}
 800e4a8:	4574      	cmp	r4, lr
 800e4aa:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e4ae:	d8f7      	bhi.n	800e4a0 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800e4b0:	697c      	ldr	r4, [r7, #20]
 800e4b2:	4423      	add	r3, r4
 800e4b4:	4422      	add	r2, r4
 800e4b6:	3001      	adds	r0, #1
 800e4b8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800e4ba:	4286      	cmp	r6, r0
 800e4bc:	4422      	add	r2, r4
 800e4be:	d1e9      	bne.n	800e494 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800e4c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e4c2:	3101      	adds	r1, #1
 800e4c4:	4402      	add	r2, r0
 800e4c6:	458c      	cmp	ip, r1
 800e4c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e4ca:	4403      	add	r3, r0
 800e4cc:	d1df      	bne.n	800e48e <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800e4ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4d0:	f108 0801 	add.w	r8, r8, #1
 800e4d4:	ece2 7a01 	vstmia	r2!, {s15}
 800e4d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4dc:	4413      	add	r3, r2
 800e4de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4e0:	4542      	cmp	r2, r8
 800e4e2:	d8c9      	bhi.n	800e478 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800e4e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4e6:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800e4ea:	4452      	add	r2, sl
 800e4ec:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800e4f0:	f10b 0b01 	add.w	fp, fp, #1
 800e4f4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e4f6:	69ba      	ldr	r2, [r7, #24]
 800e4f8:	4589      	cmp	r9, r1
 800e4fa:	bf88      	it	hi
 800e4fc:	2200      	movhi	r2, #0
 800e4fe:	45d9      	cmp	r9, fp
 800e500:	f102 0201 	add.w	r2, r2, #1
 800e504:	4415      	add	r5, r2
 800e506:	d1ab      	bne.n	800e460 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800e508:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800e50c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e50e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e512:	440a      	add	r2, r1
 800e514:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800e518:	3301      	adds	r3, #1
 800e51a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e51c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e51e:	653b      	str	r3, [r7, #80]	; 0x50
 800e520:	4411      	add	r1, r2
 800e522:	eba8 0802 	sub.w	r8, r8, r2
 800e526:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800e52a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e52c:	1a8a      	subs	r2, r1, r2
 800e52e:	65ba      	str	r2, [r7, #88]	; 0x58
 800e530:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e534:	429a      	cmp	r2, r3
 800e536:	f47f af3d 	bne.w	800e3b4 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800e53a:	3774      	adds	r7, #116	; 0x74
 800e53c:	46bd      	mov	sp, r7
 800e53e:	ecbd 8b0e 	vpop	{d8-d14}
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	fb98 f2fe 	sdiv	r2, r8, lr
 800e54a:	fb0e 8212 	mls	r2, lr, r2, r8
 800e54e:	4641      	mov	r1, r8
 800e550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e552:	4640      	mov	r0, r8
 800e554:	ebae 0202 	sub.w	r2, lr, r2
 800e558:	e735      	b.n	800e3c6 <ai_conv2d_stripe_f32.constprop.0+0x102>
 800e55a:	bf00      	nop
 800e55c:	00000000 	.word	0x00000000
 800e560:	fb0e f102 	mul.w	r1, lr, r2
 800e564:	2901      	cmp	r1, #1
 800e566:	f47f aecf 	bne.w	800e308 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800e56a:	1ac2      	subs	r2, r0, r3
 800e56c:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800e570:	00b0      	lsls	r0, r6, #2
 800e572:	eb0c 0103 	add.w	r1, ip, r3
 800e576:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e578:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e57a:	63b8      	str	r0, [r7, #56]	; 0x38
 800e57c:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800e580:	fb00 f004 	mul.w	r0, r0, r4
 800e584:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800e586:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800e58a:	fb00 4101 	mla	r1, r0, r1, r4
 800e58e:	65b9      	str	r1, [r7, #88]	; 0x58
 800e590:	f080 8263 	bcs.w	800ea5a <ai_conv2d_stripe_f32.constprop.0+0x796>
 800e594:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e598:	2a00      	cmp	r2, #0
 800e59a:	d0ce      	beq.n	800e53a <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e59c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e5a0:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800e5a4:	fb05 f202 	mul.w	r2, r5, r2
 800e5a8:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800e55c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800e5ac:	fb00 f303 	mul.w	r3, r0, r3
 800e5b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5b2:	fb06 f302 	mul.w	r3, r6, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	643b      	str	r3, [r7, #64]	; 0x40
 800e5ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5bc:	fb03 f306 	mul.w	r3, r3, r6
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e5c8:	fb03 f306 	mul.w	r3, r3, r6
 800e5cc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5de:	2300      	movs	r3, #0
 800e5e0:	653b      	str	r3, [r7, #80]	; 0x50
 800e5e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 8104 	beq.w	800e7f2 <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800e5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ec:	ecf3 6a01 	vldmia	r3!, {s13}
 800e5f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 80e8 	beq.w	800e7cc <ai_conv2d_stripe_f32.constprop.0+0x508>
 800e5fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e600:	f04f 0b00 	mov.w	fp, #0
 800e604:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800e608:	425d      	negs	r5, r3
 800e60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60c:	657b      	str	r3, [r7, #84]	; 0x54
 800e60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e610:	647b      	str	r3, [r7, #68]	; 0x44
 800e612:	f1b9 0f00 	cmp.w	r9, #0
 800e616:	f2c0 8219 	blt.w	800ea4c <ai_conv2d_stripe_f32.constprop.0+0x788>
 800e61a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e61c:	2300      	movs	r3, #0
 800e61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e620:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800e622:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800e624:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800e628:	fb02 0c06 	mla	ip, r2, r6, r0
 800e62c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e630:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e634:	4428      	add	r0, r5
 800e636:	42a0      	cmp	r0, r4
 800e638:	bf94      	ite	ls
 800e63a:	ebc3 0300 	rsbls	r3, r3, r0
 800e63e:	ebc3 0304 	rsbhi	r3, r3, r4
 800e642:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800e646:	1ac4      	subs	r4, r0, r3
 800e648:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800e64c:	1ac0      	subs	r0, r0, r3
 800e64e:	fb02 f303 	mul.w	r3, r2, r3
 800e652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e654:	2a00      	cmp	r2, #0
 800e656:	f340 81f6 	ble.w	800ea46 <ai_conv2d_stripe_f32.constprop.0+0x782>
 800e65a:	fb06 f204 	mul.w	r2, r6, r4
 800e65e:	f023 040f 	bic.w	r4, r3, #15
 800e662:	eeb0 7a66 	vmov.f32	s14, s13
 800e666:	637a      	str	r2, [r7, #52]	; 0x34
 800e668:	fb06 f200 	mul.w	r2, r6, r0
 800e66c:	1e60      	subs	r0, r4, #1
 800e66e:	2600      	movs	r6, #0
 800e670:	0900      	lsrs	r0, r0, #4
 800e672:	633a      	str	r2, [r7, #48]	; 0x30
 800e674:	3001      	adds	r0, #1
 800e676:	0102      	lsls	r2, r0, #4
 800e678:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e67c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e67e:	4662      	mov	r2, ip
 800e680:	2c00      	cmp	r4, #0
 800e682:	f340 81e8 	ble.w	800ea56 <ai_conv2d_stripe_f32.constprop.0+0x792>
 800e686:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e68a:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800e68e:	f04f 0800 	mov.w	r8, #0
 800e692:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800e696:	f108 0810 	add.w	r8, r8, #16
 800e69a:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e69e:	3040      	adds	r0, #64	; 0x40
 800e6a0:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800e6a4:	45a0      	cmp	r8, r4
 800e6a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e6aa:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800e6ae:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800e6b2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e6b6:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800e6ba:	eee3 7a84 	vfma.f32	s15, s7, s8
 800e6be:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800e6c2:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800e6c6:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800e6ca:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800e6ce:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800e6d2:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800e6d6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e6da:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800e6de:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800e6e2:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800e6e6:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800e6ea:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800e6ee:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800e6f2:	eeee 7a25 	vfma.f32	s15, s28, s11
 800e6f6:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800e6fa:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800e6fe:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800e702:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800e706:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800e70a:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800e70e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800e712:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800e716:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800e71a:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800e71e:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800e722:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800e726:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800e72a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e72e:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800e732:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800e736:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e73a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e73e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e742:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e746:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e74a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e74e:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e752:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e756:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e75a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e75e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e762:	db96      	blt.n	800e692 <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800e764:	4471      	add	r1, lr
 800e766:	4472      	add	r2, lr
 800e768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e76a:	4283      	cmp	r3, r0
 800e76c:	dd11      	ble.n	800e792 <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800e76e:	4684      	mov	ip, r0
 800e770:	468a      	mov	sl, r1
 800e772:	4690      	mov	r8, r2
 800e774:	f10c 0c01 	add.w	ip, ip, #1
 800e778:	ecf8 5a01 	vldmia	r8!, {s11}
 800e77c:	ecfa 7a01 	vldmia	sl!, {s15}
 800e780:	4563      	cmp	r3, ip
 800e782:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e786:	d1f5      	bne.n	800e774 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800e788:	1a18      	subs	r0, r3, r0
 800e78a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e78e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e792:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e794:	3601      	adds	r6, #1
 800e796:	4401      	add	r1, r0
 800e798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e79a:	4402      	add	r2, r0
 800e79c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e79e:	42b0      	cmp	r0, r6
 800e7a0:	f47f af6e 	bne.w	800e680 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800e7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7a6:	f10b 0b01 	add.w	fp, fp, #1
 800e7aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e7ae:	ed83 7a00 	vstr	s14, [r3]
 800e7b2:	440b      	add	r3, r1
 800e7b4:	4491      	add	r9, r2
 800e7b6:	1aad      	subs	r5, r5, r2
 800e7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800e7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7be:	4413      	add	r3, r2
 800e7c0:	657b      	str	r3, [r7, #84]	; 0x54
 800e7c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7c6:	455b      	cmp	r3, fp
 800e7c8:	f47f af23 	bne.w	800e612 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800e7cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7d2:	440a      	add	r2, r1
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	66ba      	str	r2, [r7, #104]	; 0x68
 800e7d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e7da:	653b      	str	r3, [r7, #80]	; 0x50
 800e7dc:	3204      	adds	r2, #4
 800e7de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e7e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	f43f aea8 	beq.w	800e53a <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e7ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f47f aefc 	bne.w	800e5ea <ai_conv2d_stripe_f32.constprop.0+0x326>
 800e7f2:	eef0 6a46 	vmov.f32	s13, s12
 800e7f6:	e6fc      	b.n	800e5f2 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800e7f8:	fb0e f102 	mul.w	r1, lr, r2
 800e7fc:	2901      	cmp	r1, #1
 800e7fe:	f47f ad83 	bne.w	800e308 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800e802:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e806:	2a00      	cmp	r2, #0
 800e808:	f43f ae97 	beq.w	800e53a <ai_conv2d_stripe_f32.constprop.0+0x276>
 800e80c:	eb0c 0203 	add.w	r2, ip, r3
 800e810:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800e814:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800e818:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800e55c <ai_conv2d_stripe_f32.constprop.0+0x298>
 800e81c:	fb01 f202 	mul.w	r2, r1, r2
 800e820:	1ac1      	subs	r1, r0, r3
 800e822:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800e826:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800e82a:	61fa      	str	r2, [r7, #28]
 800e82c:	1a1a      	subs	r2, r3, r0
 800e82e:	64f9      	str	r1, [r7, #76]	; 0x4c
 800e830:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800e834:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800e838:	442a      	add	r2, r5
 800e83a:	fb03 f301 	mul.w	r3, r3, r1
 800e83e:	fb01 f202 	mul.w	r2, r1, r2
 800e842:	64bb      	str	r3, [r7, #72]	; 0x48
 800e844:	0093      	lsls	r3, r2, #2
 800e846:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e84c:	fbb3 f3f6 	udiv	r3, r3, r6
 800e850:	61bb      	str	r3, [r7, #24]
 800e852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	63bb      	str	r3, [r7, #56]	; 0x38
 800e85a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e85e:	f1c3 0b00 	rsb	fp, r3, #0
 800e862:	00f3      	lsls	r3, r6, #3
 800e864:	623b      	str	r3, [r7, #32]
 800e866:	2300      	movs	r3, #0
 800e868:	653b      	str	r3, [r7, #80]	; 0x50
 800e86a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f2c0 80e3 	blt.w	800ea3a <ai_conv2d_stripe_f32.constprop.0+0x776>
 800e874:	2500      	movs	r5, #0
 800e876:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e878:	462b      	mov	r3, r5
 800e87a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800e87e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800e882:	445a      	add	r2, fp
 800e884:	69fc      	ldr	r4, [r7, #28]
 800e886:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800e888:	4282      	cmp	r2, r0
 800e88a:	bf28      	it	cs
 800e88c:	4602      	movcs	r2, r0
 800e88e:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800e892:	1ad2      	subs	r2, r2, r3
 800e894:	1904      	adds	r4, r0, r4
 800e896:	2e00      	cmp	r6, #0
 800e898:	f000 8228 	beq.w	800ecec <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800e89c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e89e:	647e      	str	r6, [r7, #68]	; 0x44
 800e8a0:	429e      	cmp	r6, r3
 800e8a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e8a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e8ac:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800e8b0:	1a98      	subs	r0, r3, r2
 800e8b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e8b6:	fb03 f000 	mul.w	r0, r3, r0
 800e8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8be:	1a9b      	subs	r3, r3, r2
 800e8c0:	442c      	add	r4, r5
 800e8c2:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800e8c4:	fb08 5e04 	mla	lr, r8, r4, r5
 800e8c8:	eb0e 0408 	add.w	r4, lr, r8
 800e8cc:	45a6      	cmp	lr, r4
 800e8ce:	62bc      	str	r4, [r7, #40]	; 0x28
 800e8d0:	f080 809a 	bcs.w	800ea08 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800e8d4:	0080      	lsls	r0, r0, #2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	6378      	str	r0, [r7, #52]	; 0x34
 800e8da:	633b      	str	r3, [r7, #48]	; 0x30
 800e8dc:	f022 0303 	bic.w	r3, r2, #3
 800e8e0:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800e8e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8e6:	42a0      	cmp	r0, r4
 800e8e8:	f200 808e 	bhi.w	800ea08 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800e8ec:	1e58      	subs	r0, r3, #1
 800e8ee:	f04f 0900 	mov.w	r9, #0
 800e8f2:	0880      	lsrs	r0, r0, #2
 800e8f4:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	fb00 a00a 	mla	r0, r0, sl, sl
 800e8fe:	6138      	str	r0, [r7, #16]
 800e900:	0118      	lsls	r0, r3, #4
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	6178      	str	r0, [r7, #20]
 800e906:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e90e:	4499      	add	r9, r3
 800e910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e912:	181c      	adds	r4, r3, r0
 800e914:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e918:	65bc      	str	r4, [r7, #88]	; 0x58
 800e91a:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24
 800e91e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800e922:	1820      	adds	r0, r4, r0
 800e924:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e926:	6438      	str	r0, [r7, #64]	; 0x40
 800e928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e92a:	ecb3 7a01 	vldmia	r3!, {s14}
 800e92e:	65bb      	str	r3, [r7, #88]	; 0x58
 800e930:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e936:	2b00      	cmp	r3, #0
 800e938:	dd55      	ble.n	800e9e6 <ai_conv2d_stripe_f32.constprop.0+0x722>
 800e93a:	4675      	mov	r5, lr
 800e93c:	f04f 0b00 	mov.w	fp, #0
 800e940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e942:	2b00      	cmp	r3, #0
 800e944:	f340 81d0 	ble.w	800ece8 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800e948:	6a38      	ldr	r0, [r7, #32]
 800e94a:	f101 0310 	add.w	r3, r1, #16
 800e94e:	2600      	movs	r6, #0
 800e950:	607a      	str	r2, [r7, #4]
 800e952:	182c      	adds	r4, r5, r0
 800e954:	4628      	mov	r0, r5
 800e956:	eb00 0c08 	add.w	ip, r0, r8
 800e95a:	ed13 4a03 	vldr	s8, [r3, #-12]
 800e95e:	ed53 4a04 	vldr	s9, [r3, #-16]
 800e962:	3604      	adds	r6, #4
 800e964:	eddc 7a00 	vldr	s15, [ip]
 800e968:	eb04 0c08 	add.w	ip, r4, r8
 800e96c:	ed90 5a00 	vldr	s10, [r0]
 800e970:	3310      	adds	r3, #16
 800e972:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e976:	edd4 6a00 	vldr	s13, [r4]
 800e97a:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800e97e:	4450      	add	r0, sl
 800e980:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800e984:	4454      	add	r4, sl
 800e986:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e98a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e98c:	4296      	cmp	r6, r2
 800e98e:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800e992:	eddc 6a00 	vldr	s13, [ip]
 800e996:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e99a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e99e:	dbda      	blt.n	800e956 <ai_conv2d_stripe_f32.constprop.0+0x692>
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	441d      	add	r5, r3
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	68fc      	ldr	r4, [r7, #12]
 800e9aa:	4419      	add	r1, r3
 800e9ac:	42a2      	cmp	r2, r4
 800e9ae:	dd11      	ble.n	800e9d4 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	462b      	mov	r3, r5
 800e9b4:	460e      	mov	r6, r1
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	edd3 7a00 	vldr	s15, [r3]
 800e9bc:	ecf6 6a01 	vldmia	r6!, {s13}
 800e9c0:	4443      	add	r3, r8
 800e9c2:	4290      	cmp	r0, r2
 800e9c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9c8:	d1f5      	bne.n	800e9b6 <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800e9ca:	1b14      	subs	r4, r2, r4
 800e9cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9d0:	fb04 5508 	mla	r5, r4, r8, r5
 800e9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d6:	f10b 0b01 	add.w	fp, fp, #1
 800e9da:	441d      	add	r5, r3
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	4419      	add	r1, r3
 800e9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9e2:	459b      	cmp	fp, r3
 800e9e4:	d1ac      	bne.n	800e940 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800e9e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e9ea:	eca3 7a01 	vstmia	r3!, {s14}
 800e9ee:	643b      	str	r3, [r7, #64]	; 0x40
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	4419      	add	r1, r3
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	4283      	cmp	r3, r0
 800e9f8:	d196      	bne.n	800e928 <ai_conv2d_stripe_f32.constprop.0+0x664>
 800e9fa:	f10e 0e04 	add.w	lr, lr, #4
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	459e      	cmp	lr, r3
 800ea02:	d382      	bcc.n	800e90a <ai_conv2d_stripe_f32.constprop.0+0x646>
 800ea04:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800ea08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ea0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea0e:	440a      	add	r2, r1
 800ea10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ea12:	3301      	adds	r3, #1
 800ea14:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ea16:	ebab 0b01 	sub.w	fp, fp, r1
 800ea1a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ea1e:	653b      	str	r3, [r7, #80]	; 0x50
 800ea20:	440a      	add	r2, r1
 800ea22:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800ea26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	f43f ad85 	beq.w	800e53a <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ea30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f6bf af1d 	bge.w	800e874 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800ea3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea3c:	465b      	mov	r3, fp
 800ea3e:	465d      	mov	r5, fp
 800ea40:	eb02 010b 	add.w	r1, r2, fp
 800ea44:	e719      	b.n	800e87a <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800ea46:	eeb0 7a66 	vmov.f32	s14, s13
 800ea4a:	e6ab      	b.n	800e7a4 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800ea4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea4e:	462b      	mov	r3, r5
 800ea50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea52:	442a      	add	r2, r5
 800ea54:	e5e4      	b.n	800e620 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800ea56:	2000      	movs	r0, #0
 800ea58:	e687      	b.n	800e76a <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800ea5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea5e:	4669      	mov	r1, sp
 800ea60:	fb05 f202 	mul.w	r2, r5, r2
 800ea64:	ee0e 1a90 	vmov	s29, r1
 800ea68:	fb06 f202 	mul.w	r2, r6, r2
 800ea6c:	0095      	lsls	r5, r2, #2
 800ea6e:	637a      	str	r2, [r7, #52]	; 0x34
 800ea70:	1dea      	adds	r2, r5, #7
 800ea72:	f022 0207 	bic.w	r2, r2, #7
 800ea76:	ebad 0d02 	sub.w	sp, sp, r2
 800ea7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ea7e:	46e9      	mov	r9, sp
 800ea80:	2a00      	cmp	r2, #0
 800ea82:	f000 812d 	beq.w	800ece0 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800ea86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea8a:	46ca      	mov	sl, r9
 800ea8c:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800ed2c <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800ea90:	46a9      	mov	r9, r5
 800ea92:	fb02 f303 	mul.w	r3, r2, r3
 800ea96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea98:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800ea9c:	647b      	str	r3, [r7, #68]	; 0x44
 800ea9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaa0:	fb03 f306 	mul.w	r3, r3, r6
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	623b      	str	r3, [r7, #32]
 800eaa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eaac:	fb03 f306 	mul.w	r3, r3, r6
 800eab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eab4:	627b      	str	r3, [r7, #36]	; 0x24
 800eab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eabe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eac0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eac2:	2300      	movs	r3, #0
 800eac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac8:	b123      	cbz	r3, 800ead4 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800eaca:	464a      	mov	r2, r9
 800eacc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eace:	4650      	mov	r0, sl
 800ead0:	f002 fdac 	bl	801162c <memcpy>
 800ead4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 811c 	beq.w	800ed14 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800eadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eade:	ecf3 6a01 	vldmia	r3!, {s13}
 800eae2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f000 80eb 	beq.w	800ecc4 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800eaee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eaf2:	f8c7 901c 	str.w	r9, [r7, #28]
 800eaf6:	425d      	negs	r5, r3
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafa:	653b      	str	r3, [r7, #80]	; 0x50
 800eafc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eafe:	643b      	str	r3, [r7, #64]	; 0x40
 800eb00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800eb04:	657b      	str	r3, [r7, #84]	; 0x54
 800eb06:	2300      	movs	r3, #0
 800eb08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f2c0 8107 	blt.w	800ed20 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800eb12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb14:	2300      	movs	r3, #0
 800eb16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb18:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800eb1c:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800eb20:	4428      	add	r0, r5
 800eb22:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800eb24:	42b0      	cmp	r0, r6
 800eb26:	bf94      	ite	ls
 800eb28:	ebc3 0300 	rsbls	r3, r3, r0
 800eb2c:	ebc3 0306 	rsbhi	r3, r3, r6
 800eb30:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800eb34:	fb02 a204 	mla	r2, r2, r4, sl
 800eb38:	eba0 0c03 	sub.w	ip, r0, r3
 800eb3c:	1af0      	subs	r0, r6, r3
 800eb3e:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800eb42:	fb06 f303 	mul.w	r3, r6, r3
 800eb46:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800eb48:	2e00      	cmp	r6, #0
 800eb4a:	f340 80e6 	ble.w	800ed1a <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800eb4e:	fb04 f000 	mul.w	r0, r4, r0
 800eb52:	eeb0 7a66 	vmov.f32	s14, s13
 800eb56:	fb04 fc0c 	mul.w	ip, r4, ip
 800eb5a:	f023 040f 	bic.w	r4, r3, #15
 800eb5e:	6338      	str	r0, [r7, #48]	; 0x30
 800eb60:	2600      	movs	r6, #0
 800eb62:	1e60      	subs	r0, r4, #1
 800eb64:	0900      	lsrs	r0, r0, #4
 800eb66:	3001      	adds	r0, #1
 800eb68:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800eb6c:	0100      	lsls	r0, r0, #4
 800eb6e:	62b8      	str	r0, [r7, #40]	; 0x28
 800eb70:	2c00      	cmp	r4, #0
 800eb72:	f340 80cd 	ble.w	800ed10 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800eb76:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800eb7a:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800eb7e:	f04f 0900 	mov.w	r9, #0
 800eb82:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800eb86:	f109 0910 	add.w	r9, r9, #16
 800eb8a:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800eb8e:	3040      	adds	r0, #64	; 0x40
 800eb90:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800eb94:	45a1      	cmp	r9, r4
 800eb96:	ee67 7a86 	vmul.f32	s15, s15, s12
 800eb9a:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800eb9e:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800eba2:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800eba6:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800ebaa:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ebae:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800ebb2:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800ebb6:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800ebba:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800ebbe:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800ebc2:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800ebc6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ebca:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800ebce:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800ebd2:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800ebd6:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800ebda:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800ebde:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800ebe2:	eeee 7a06 	vfma.f32	s15, s28, s12
 800ebe6:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800ebea:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800ebee:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800ebf2:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800ebf6:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800ebfa:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800ebfe:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ec02:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800ec06:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800ec0a:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800ec0e:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800ec12:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800ec16:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800ec1a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ec1e:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800ec22:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800ec26:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ec2a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ec2e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ec32:	eee8 7a80 	vfma.f32	s15, s17, s0
 800ec36:	eee0 7a81 	vfma.f32	s15, s1, s2
 800ec3a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800ec3e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800ec42:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ec46:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ec4a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800ec4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec52:	db96      	blt.n	800eb82 <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800ec54:	4441      	add	r1, r8
 800ec56:	4442      	add	r2, r8
 800ec58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec5a:	4283      	cmp	r3, r0
 800ec5c:	dd11      	ble.n	800ec82 <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800ec5e:	4686      	mov	lr, r0
 800ec60:	468b      	mov	fp, r1
 800ec62:	4691      	mov	r9, r2
 800ec64:	f10e 0e01 	add.w	lr, lr, #1
 800ec68:	ecb9 6a01 	vldmia	r9!, {s12}
 800ec6c:	ecfb 7a01 	vldmia	fp!, {s15}
 800ec70:	4573      	cmp	r3, lr
 800ec72:	eea6 7a27 	vfma.f32	s14, s12, s15
 800ec76:	d1f5      	bne.n	800ec64 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800ec78:	1a18      	subs	r0, r3, r0
 800ec7a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ec7e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ec82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec84:	3601      	adds	r6, #1
 800ec86:	4461      	add	r1, ip
 800ec88:	4402      	add	r2, r0
 800ec8a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ec8c:	42b0      	cmp	r0, r6
 800ec8e:	f47f af6f 	bne.w	800eb70 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800ec92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec94:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ec96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec98:	4401      	add	r1, r0
 800ec9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec9c:	ed82 7a00 	vstr	s14, [r2]
 800eca0:	1a2d      	subs	r5, r5, r0
 800eca2:	6579      	str	r1, [r7, #84]	; 0x54
 800eca4:	3301      	adds	r3, #1
 800eca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecaa:	440a      	add	r2, r1
 800ecac:	6a39      	ldr	r1, [r7, #32]
 800ecae:	643a      	str	r2, [r7, #64]	; 0x40
 800ecb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecb2:	440a      	add	r2, r1
 800ecb4:	653a      	str	r2, [r7, #80]	; 0x50
 800ecb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	f47f af25 	bne.w	800eb0a <ai_conv2d_stripe_f32.constprop.0+0x846>
 800ecc0:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800ecc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ecc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecc8:	444a      	add	r2, r9
 800ecca:	3301      	adds	r3, #1
 800eccc:	66ba      	str	r2, [r7, #104]	; 0x68
 800ecce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ecd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecd2:	3204      	adds	r2, #4
 800ecd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ecd6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	f47f aef3 	bne.w	800eac6 <ai_conv2d_stripe_f32.constprop.0+0x802>
 800ece0:	ee1e 3a90 	vmov	r3, s29
 800ece4:	469d      	mov	sp, r3
 800ece6:	e428      	b.n	800e53a <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ece8:	2400      	movs	r4, #0
 800ecea:	e65f      	b.n	800e9ac <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800ecec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ecee:	eeb0 3a63 	vmov.f32	s6, s7
 800ecf2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ecf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecf8:	647b      	str	r3, [r7, #68]	; 0x44
 800ecfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecfe:	1a98      	subs	r0, r3, r2
 800ed00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ed04:	fb03 f000 	mul.w	r0, r3, r0
 800ed08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed0c:	1a9b      	subs	r3, r3, r2
 800ed0e:	e5d7      	b.n	800e8c0 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800ed10:	2000      	movs	r0, #0
 800ed12:	e7a2      	b.n	800ec5a <ai_conv2d_stripe_f32.constprop.0+0x996>
 800ed14:	eef0 6a48 	vmov.f32	s13, s16
 800ed18:	e6e4      	b.n	800eae4 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800ed1a:	eeb0 7a66 	vmov.f32	s14, s13
 800ed1e:	e7b8      	b.n	800ec92 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800ed20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed22:	462b      	mov	r3, r5
 800ed24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed26:	442a      	add	r2, r5
 800ed28:	e6f6      	b.n	800eb18 <ai_conv2d_stripe_f32.constprop.0+0x854>
 800ed2a:	bf00      	nop
 800ed2c:	00000000 	.word	0x00000000

0800ed30 <ai_dict_decompress_f32>:
 800ed30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed34:	9d08      	ldr	r5, [sp, #32]
 800ed36:	2b04      	cmp	r3, #4
 800ed38:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800ed3c:	d00e      	beq.n	800ed5c <ai_dict_decompress_f32+0x2c>
 800ed3e:	2b08      	cmp	r3, #8
 800ed40:	d10a      	bne.n	800ed58 <ai_dict_decompress_f32+0x28>
 800ed42:	42a8      	cmp	r0, r5
 800ed44:	d208      	bcs.n	800ed58 <ai_dict_decompress_f32+0x28>
 800ed46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f840 3b04 	str.w	r3, [r0], #4
 800ed54:	4285      	cmp	r5, r0
 800ed56:	d8f6      	bhi.n	800ed46 <ai_dict_decompress_f32+0x16>
 800ed58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed5c:	9b07      	ldr	r3, [sp, #28]
 800ed5e:	085e      	lsrs	r6, r3, #1
 800ed60:	f003 0701 	and.w	r7, r3, #1
 800ed64:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800ed68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800ed6c:	42a8      	cmp	r0, r5
 800ed6e:	d2f3      	bcs.n	800ed58 <ai_dict_decompress_f32+0x28>
 800ed70:	b33e      	cbz	r6, 800edc2 <ai_dict_decompress_f32+0x92>
 800ed72:	f100 0e08 	add.w	lr, r0, #8
 800ed76:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800ed7a:	eb01 0408 	add.w	r4, r1, r8
 800ed7e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800ed82:	f10e 0e08 	add.w	lr, lr, #8
 800ed86:	091b      	lsrs	r3, r3, #4
 800ed88:	4564      	cmp	r4, ip
 800ed8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f84e 3c10 	str.w	r3, [lr, #-16]
 800ed94:	f89c 3000 	ldrb.w	r3, [ip]
 800ed98:	f003 030f 	and.w	r3, r3, #15
 800ed9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800eda6:	d1ea      	bne.n	800ed7e <ai_dict_decompress_f32+0x4e>
 800eda8:	4431      	add	r1, r6
 800edaa:	4448      	add	r0, r9
 800edac:	2f00      	cmp	r7, #0
 800edae:	d0dd      	beq.n	800ed6c <ai_dict_decompress_f32+0x3c>
 800edb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edb4:	091b      	lsrs	r3, r3, #4
 800edb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f840 3b04 	str.w	r3, [r0], #4
 800edc0:	e7d4      	b.n	800ed6c <ai_dict_decompress_f32+0x3c>
 800edc2:	2f00      	cmp	r7, #0
 800edc4:	d1f4      	bne.n	800edb0 <ai_dict_decompress_f32+0x80>
 800edc6:	42a8      	cmp	r0, r5
 800edc8:	d3fd      	bcc.n	800edc6 <ai_dict_decompress_f32+0x96>
 800edca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edce:	bf00      	nop

0800edd0 <forward_conv2d>:
 800edd0:	6982      	ldr	r2, [r0, #24]
 800edd2:	8813      	ldrh	r3, [r2, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 810f 	beq.w	800eff8 <forward_conv2d+0x228>
 800edda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edde:	ed2d 8b04 	vpush	{d8-d9}
 800ede2:	6852      	ldr	r2, [r2, #4]
 800ede4:	b0a9      	sub	sp, #164	; 0xa4
 800ede6:	4604      	mov	r4, r0
 800ede8:	6851      	ldr	r1, [r2, #4]
 800edea:	b101      	cbz	r1, 800edee <forward_conv2d+0x1e>
 800edec:	6809      	ldr	r1, [r1, #0]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	f000 8152 	beq.w	800f098 <forward_conv2d+0x2c8>
 800edf4:	6915      	ldr	r5, [r2, #16]
 800edf6:	b105      	cbz	r5, 800edfa <forward_conv2d+0x2a>
 800edf8:	682d      	ldr	r5, [r5, #0]
 800edfa:	2b02      	cmp	r3, #2
 800edfc:	f000 80fe 	beq.w	800effc <forward_conv2d+0x22c>
 800ee00:	69d3      	ldr	r3, [r2, #28]
 800ee02:	8b12      	ldrh	r2, [r2, #24]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	f000 8138 	beq.w	800f07a <forward_conv2d+0x2aa>
 800ee0a:	2a01      	cmp	r2, #1
 800ee0c:	681e      	ldr	r6, [r3, #0]
 800ee0e:	f240 813a 	bls.w	800f086 <forward_conv2d+0x2b6>
 800ee12:	685a      	ldr	r2, [r3, #4]
 800ee14:	ee08 2a10 	vmov	s16, r2
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	68ca      	ldr	r2, [r1, #12]
 800ee1c:	6989      	ldr	r1, [r1, #24]
 800ee1e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800ee22:	6889      	ldr	r1, [r1, #8]
 800ee24:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ee26:	ee09 1a10 	vmov	s18, r1
 800ee2a:	6851      	ldr	r1, [r2, #4]
 800ee2c:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800ee30:	911b      	str	r1, [sp, #108]	; 0x6c
 800ee32:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ee36:	69b7      	ldr	r7, [r6, #24]
 800ee38:	9118      	str	r1, [sp, #96]	; 0x60
 800ee3a:	68d1      	ldr	r1, [r2, #12]
 800ee3c:	6892      	ldr	r2, [r2, #8]
 800ee3e:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800ee42:	9223      	str	r2, [sp, #140]	; 0x8c
 800ee44:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ee46:	f8dc a008 	ldr.w	sl, [ip, #8]
 800ee4a:	9224      	str	r2, [sp, #144]	; 0x90
 800ee4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ee4e:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800ee52:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee54:	6802      	ldr	r2, [r0, #0]
 800ee56:	9122      	str	r1, [sp, #136]	; 0x88
 800ee58:	9211      	str	r2, [sp, #68]	; 0x44
 800ee5a:	6842      	ldr	r2, [r0, #4]
 800ee5c:	921e      	str	r2, [sp, #120]	; 0x78
 800ee5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ee60:	9210      	str	r2, [sp, #64]	; 0x40
 800ee62:	f8de 2008 	ldr.w	r2, [lr, #8]
 800ee66:	9219      	str	r2, [sp, #100]	; 0x64
 800ee68:	f8de 2004 	ldr.w	r2, [lr, #4]
 800ee6c:	921a      	str	r2, [sp, #104]	; 0x68
 800ee6e:	69e2      	ldr	r2, [r4, #28]
 800ee70:	9225      	str	r2, [sp, #148]	; 0x94
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	ee08 2a90 	vmov	s17, r2
 800ee78:	ee18 2a10 	vmov	r2, s16
 800ee7c:	b11a      	cbz	r2, 800ee86 <forward_conv2d+0xb6>
 800ee7e:	6992      	ldr	r2, [r2, #24]
 800ee80:	6892      	ldr	r2, [r2, #8]
 800ee82:	ee08 2a10 	vmov	s16, r2
 800ee86:	69aa      	ldr	r2, [r5, #24]
 800ee88:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800ee8c:	6892      	ldr	r2, [r2, #8]
 800ee8e:	9216      	str	r2, [sp, #88]	; 0x58
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 80df 	beq.w	800f054 <forward_conv2d+0x284>
 800ee96:	699a      	ldr	r2, [r3, #24]
 800ee98:	2a00      	cmp	r2, #0
 800ee9a:	f000 80e4 	beq.w	800f066 <forward_conv2d+0x296>
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800eeaa:	9327      	str	r3, [sp, #156]	; 0x9c
 800eeac:	f001 fab4 	bl	8010418 <ai_array_get_byte_size>
 800eeb0:	69b7      	ldr	r7, [r6, #24]
 800eeb2:	9013      	str	r0, [sp, #76]	; 0x4c
 800eeb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eeb6:	9312      	str	r3, [sp, #72]	; 0x48
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f000 80c8 	beq.w	800f04e <forward_conv2d+0x27e>
 800eebe:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800eec0:	fa1f f28b 	uxth.w	r2, fp
 800eec4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800eec8:	1e71      	subs	r1, r6, #1
 800eeca:	3a01      	subs	r2, #1
 800eecc:	3b01      	subs	r3, #1
 800eece:	6838      	ldr	r0, [r7, #0]
 800eed0:	fb01 6202 	mla	r2, r1, r2, r6
 800eed4:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eed6:	921c      	str	r2, [sp, #112]	; 0x70
 800eed8:	1e4a      	subs	r2, r1, #1
 800eeda:	fb02 1303 	mla	r3, r2, r3, r1
 800eede:	931d      	str	r3, [sp, #116]	; 0x74
 800eee0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800eee4:	2b04      	cmp	r3, #4
 800eee6:	f000 808c 	beq.w	800f002 <forward_conv2d+0x232>
 800eeea:	2b08      	cmp	r3, #8
 800eeec:	f000 8089 	beq.w	800f002 <forward_conv2d+0x232>
 800eef0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800eef4:	9315      	str	r3, [sp, #84]	; 0x54
 800eef6:	425b      	negs	r3, r3
 800eef8:	9314      	str	r3, [sp, #80]	; 0x50
 800eefa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d076      	beq.n	800efee <forward_conv2d+0x21e>
 800ef00:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800ef04:	4644      	mov	r4, r8
 800ef06:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800ef0a:	425b      	negs	r3, r3
 800ef0c:	921e      	str	r2, [sp, #120]	; 0x78
 800ef0e:	fa0f f28b 	sxth.w	r2, fp
 800ef12:	9321      	str	r3, [sp, #132]	; 0x84
 800ef14:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800ef18:	2300      	movs	r3, #0
 800ef1a:	921f      	str	r2, [sp, #124]	; 0x7c
 800ef1c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800ef20:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef22:	fb0a f30b 	mul.w	r3, sl, fp
 800ef26:	9220      	str	r2, [sp, #128]	; 0x80
 800ef28:	9326      	str	r3, [sp, #152]	; 0x98
 800ef2a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ef2c:	ee19 1a10 	vmov	r1, s18
 800ef30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef32:	920e      	str	r2, [sp, #56]	; 0x38
 800ef34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800ef3a:	920d      	str	r2, [sp, #52]	; 0x34
 800ef3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ef3e:	4638      	mov	r0, r7
 800ef40:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ef44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef46:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef48:	930a      	str	r3, [sp, #40]	; 0x28
 800ef4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ef4c:	9307      	str	r3, [sp, #28]
 800ef4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ef50:	9306      	str	r3, [sp, #24]
 800ef52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ef54:	9305      	str	r3, [sp, #20]
 800ef56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ef58:	e9cd a303 	strd	sl, r3, [sp, #12]
 800ef5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef5e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ef62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef68:	4413      	add	r3, r2
 800ef6a:	bfa8      	it	ge
 800ef6c:	2200      	movge	r2, #0
 800ef6e:	9208      	str	r2, [sp, #32]
 800ef70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ef72:	4293      	cmp	r3, r2
 800ef74:	bf28      	it	cs
 800ef76:	4613      	movcs	r3, r2
 800ef78:	ee18 2a90 	vmov	r2, s17
 800ef7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef7e:	ee18 3a10 	vmov	r3, s16
 800ef82:	f7ff f99f 	bl	800e2c4 <ai_conv2d_stripe_f32.constprop.0>
 800ef86:	f1ba 0f00 	cmp.w	sl, #0
 800ef8a:	d020      	beq.n	800efce <forward_conv2d+0x1fe>
 800ef8c:	2600      	movs	r6, #0
 800ef8e:	464a      	mov	r2, r9
 800ef90:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800ef94:	9610      	str	r6, [sp, #64]	; 0x40
 800ef96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef98:	4629      	mov	r1, r5
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ef9e:	3301      	adds	r3, #1
 800efa0:	9211      	str	r2, [sp, #68]	; 0x44
 800efa2:	9310      	str	r3, [sp, #64]	; 0x40
 800efa4:	69ab      	ldr	r3, [r5, #24]
 800efa6:	609f      	str	r7, [r3, #8]
 800efa8:	4623      	mov	r3, r4
 800efaa:	444c      	add	r4, r9
 800efac:	47b0      	blx	r6
 800efae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800efb0:	445f      	add	r7, fp
 800efb2:	eba4 0308 	sub.w	r3, r4, r8
 800efb6:	4293      	cmp	r3, r2
 800efb8:	bfa8      	it	ge
 800efba:	4644      	movge	r4, r8
 800efbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800efc0:	459a      	cmp	sl, r3
 800efc2:	d1e8      	bne.n	800ef96 <forward_conv2d+0x1c6>
 800efc4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800efc6:	4691      	mov	r9, r2
 800efc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800efca:	4413      	add	r3, r2
 800efcc:	9316      	str	r3, [sp, #88]	; 0x58
 800efce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800efd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efd2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800efd4:	4413      	add	r3, r2
 800efd6:	3101      	adds	r1, #1
 800efd8:	9314      	str	r3, [sp, #80]	; 0x50
 800efda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800efdc:	9117      	str	r1, [sp, #92]	; 0x5c
 800efde:	1a9b      	subs	r3, r3, r2
 800efe0:	9315      	str	r3, [sp, #84]	; 0x54
 800efe2:	69ab      	ldr	r3, [r5, #24]
 800efe4:	68da      	ldr	r2, [r3, #12]
 800efe6:	609a      	str	r2, [r3, #8]
 800efe8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efea:	428b      	cmp	r3, r1
 800efec:	d19d      	bne.n	800ef2a <forward_conv2d+0x15a>
 800efee:	b029      	add	sp, #164	; 0xa4
 800eff0:	ecbd 8b04 	vpop	{d8-d9}
 800eff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	deff      	udf	#255	; 0xff
 800effc:	2300      	movs	r3, #0
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	deff      	udf	#255	; 0xff
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	2a00      	cmp	r2, #0
 800f006:	f43f af73 	beq.w	800eef0 <forward_conv2d+0x120>
 800f00a:	69a3      	ldr	r3, [r4, #24]
 800f00c:	8819      	ldrh	r1, [r3, #0]
 800f00e:	2903      	cmp	r1, #3
 800f010:	d945      	bls.n	800f09e <forward_conv2d+0x2ce>
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f016:	2b00      	cmp	r3, #0
 800f018:	d039      	beq.n	800f08e <forward_conv2d+0x2be>
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d036      	beq.n	800f08e <forward_conv2d+0x2be>
 800f020:	699c      	ldr	r4, [r3, #24]
 800f022:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800f026:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800f02a:	68b9      	ldr	r1, [r7, #8]
 800f02c:	4103      	asrs	r3, r0
 800f02e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800f032:	b29b      	uxth	r3, r3
 800f034:	9401      	str	r4, [sp, #4]
 800f036:	ee18 4a90 	vmov	r4, s17
 800f03a:	2800      	cmp	r0, #0
 800f03c:	bf18      	it	ne
 800f03e:	4604      	movne	r4, r0
 800f040:	ee08 4a90 	vmov	s17, r4
 800f044:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800f046:	9400      	str	r4, [sp, #0]
 800f048:	f7ff fe72 	bl	800ed30 <ai_dict_decompress_f32>
 800f04c:	e750      	b.n	800eef0 <forward_conv2d+0x120>
 800f04e:	4b15      	ldr	r3, [pc, #84]	; (800f0a4 <forward_conv2d+0x2d4>)
 800f050:	9312      	str	r3, [sp, #72]	; 0x48
 800f052:	e734      	b.n	800eebe <forward_conv2d+0xee>
 800f054:	f1b8 0f00 	cmp.w	r8, #0
 800f058:	d00b      	beq.n	800f072 <forward_conv2d+0x2a2>
 800f05a:	9327      	str	r3, [sp, #156]	; 0x9c
 800f05c:	2301      	movs	r3, #1
 800f05e:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800f062:	9313      	str	r3, [sp, #76]	; 0x4c
 800f064:	e726      	b.n	800eeb4 <forward_conv2d+0xe4>
 800f066:	f1b8 0f00 	cmp.w	r8, #0
 800f06a:	d001      	beq.n	800f070 <forward_conv2d+0x2a0>
 800f06c:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800f070:	2300      	movs	r3, #0
 800f072:	9327      	str	r3, [sp, #156]	; 0x9c
 800f074:	2301      	movs	r3, #1
 800f076:	9313      	str	r3, [sp, #76]	; 0x4c
 800f078:	e71c      	b.n	800eeb4 <forward_conv2d+0xe4>
 800f07a:	2a01      	cmp	r2, #1
 800f07c:	d90a      	bls.n	800f094 <forward_conv2d+0x2c4>
 800f07e:	ee08 3a10 	vmov	s16, r3
 800f082:	461e      	mov	r6, r3
 800f084:	e6c9      	b.n	800ee1a <forward_conv2d+0x4a>
 800f086:	2200      	movs	r2, #0
 800f088:	ee08 2a10 	vmov	s16, r2
 800f08c:	e6c4      	b.n	800ee18 <forward_conv2d+0x48>
 800f08e:	2300      	movs	r3, #0
 800f090:	699b      	ldr	r3, [r3, #24]
 800f092:	deff      	udf	#255	; 0xff
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	deff      	udf	#255	; 0xff
 800f098:	2300      	movs	r3, #0
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	deff      	udf	#255	; 0xff
 800f09e:	2300      	movs	r3, #0
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	deff      	udf	#255	; 0xff
 800f0a4:	0800e2c1 	.word	0x0800e2c1

0800f0a8 <forward_dense>:
 800f0a8:	6983      	ldr	r3, [r0, #24]
 800f0aa:	881a      	ldrh	r2, [r3, #0]
 800f0ac:	2a00      	cmp	r2, #0
 800f0ae:	f000 80f0 	beq.w	800f292 <forward_dense+0x1ea>
 800f0b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b6:	ed2d 8b02 	vpush	{d8}
 800f0ba:	6858      	ldr	r0, [r3, #4]
 800f0bc:	b09b      	sub	sp, #108	; 0x6c
 800f0be:	6845      	ldr	r5, [r0, #4]
 800f0c0:	b105      	cbz	r5, 800f0c4 <forward_dense+0x1c>
 800f0c2:	682d      	ldr	r5, [r5, #0]
 800f0c4:	2a01      	cmp	r2, #1
 800f0c6:	f000 840a 	beq.w	800f8de <forward_dense+0x836>
 800f0ca:	6906      	ldr	r6, [r0, #16]
 800f0cc:	b106      	cbz	r6, 800f0d0 <forward_dense+0x28>
 800f0ce:	6836      	ldr	r6, [r6, #0]
 800f0d0:	2a02      	cmp	r2, #2
 800f0d2:	f000 80e0 	beq.w	800f296 <forward_dense+0x1ee>
 800f0d6:	69c3      	ldr	r3, [r0, #28]
 800f0d8:	930d      	str	r3, [sp, #52]	; 0x34
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	f000 83f1 	beq.w	800f8c2 <forward_dense+0x81a>
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	8b03      	ldrh	r3, [r0, #24]
 800f0e4:	6809      	ldr	r1, [r1, #0]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	910f      	str	r1, [sp, #60]	; 0x3c
 800f0ea:	f240 83ec 	bls.w	800f8c6 <forward_dense+0x81e>
 800f0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	930d      	str	r3, [sp, #52]	; 0x34
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800f0fa:	2a03      	cmp	r2, #3
 800f0fc:	68eb      	ldr	r3, [r5, #12]
 800f0fe:	68f7      	ldr	r7, [r6, #12]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	687c      	ldr	r4, [r7, #4]
 800f104:	9317      	str	r3, [sp, #92]	; 0x5c
 800f106:	f8d8 3000 	ldr.w	r3, [r8]
 800f10a:	4621      	mov	r1, r4
 800f10c:	9419      	str	r4, [sp, #100]	; 0x64
 800f10e:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800f112:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800f116:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800f11a:	fb01 f404 	mul.w	r4, r1, r4
 800f11e:	fa4e f10c 	asr.w	r1, lr, ip
 800f122:	9116      	str	r1, [sp, #88]	; 0x58
 800f124:	f000 83d8 	beq.w	800f8d8 <forward_dense+0x830>
 800f128:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800f12a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800f12e:	2a00      	cmp	r2, #0
 800f130:	f000 83c2 	beq.w	800f8b8 <forward_dense+0x810>
 800f134:	6812      	ldr	r2, [r2, #0]
 800f136:	2a00      	cmp	r2, #0
 800f138:	f000 83be 	beq.w	800f8b8 <forward_dense+0x810>
 800f13c:	2b04      	cmp	r3, #4
 800f13e:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800f142:	f000 83a8 	beq.w	800f896 <forward_dense+0x7ee>
 800f146:	2b08      	cmp	r3, #8
 800f148:	f000 83a5 	beq.w	800f896 <forward_dense+0x7ee>
 800f14c:	f04f 0a00 	mov.w	sl, #0
 800f150:	69ab      	ldr	r3, [r5, #24]
 800f152:	fb07 f404 	mul.w	r4, r7, r4
 800f156:	69b2      	ldr	r2, [r6, #24]
 800f158:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f15e:	6892      	ldr	r2, [r2, #8]
 800f160:	695b      	ldr	r3, [r3, #20]
 800f162:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800f166:	9206      	str	r2, [sp, #24]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	428a      	cmp	r2, r1
 800f16c:	9110      	str	r1, [sp, #64]	; 0x40
 800f16e:	9304      	str	r3, [sp, #16]
 800f170:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f172:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800f176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f17a:	900e      	str	r0, [sp, #56]	; 0x38
 800f17c:	9303      	str	r3, [sp, #12]
 800f17e:	f080 8380 	bcs.w	800f882 <forward_dense+0x7da>
 800f182:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f184:	4654      	mov	r4, sl
 800f186:	4bb9      	ldr	r3, [pc, #740]	; (800f46c <forward_dense+0x3c4>)
 800f188:	46ca      	mov	sl, r9
 800f18a:	08d0      	lsrs	r0, r2, #3
 800f18c:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800f470 <forward_dense+0x3c8>
 800f190:	4413      	add	r3, r2
 800f192:	9009      	str	r0, [sp, #36]	; 0x24
 800f194:	0099      	lsls	r1, r3, #2
 800f196:	f022 0301 	bic.w	r3, r2, #1
 800f19a:	f002 0201 	and.w	r2, r2, #1
 800f19e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f1a2:	9118      	str	r1, [sp, #96]	; 0x60
 800f1a4:	920a      	str	r2, [sp, #40]	; 0x28
 800f1a6:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800f1aa:	9305      	str	r3, [sp, #20]
 800f1ac:	f101 0320 	add.w	r3, r1, #32
 800f1b0:	9207      	str	r2, [sp, #28]
 800f1b2:	9311      	str	r3, [sp, #68]	; 0x44
 800f1b4:	444b      	add	r3, r9
 800f1b6:	469b      	mov	fp, r3
 800f1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1bc:	699b      	ldr	r3, [r3, #24]
 800f1be:	689a      	ldr	r2, [r3, #8]
 800f1c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1c2:	b10b      	cbz	r3, 800f1c8 <forward_dense+0x120>
 800f1c4:	699b      	ldr	r3, [r3, #24]
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	2c00      	cmp	r4, #0
 800f1ca:	f000 834b 	beq.w	800f864 <forward_dense+0x7bc>
 800f1ce:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f1d0:	2904      	cmp	r1, #4
 800f1d2:	f000 826a 	beq.w	800f6aa <forward_dense+0x602>
 800f1d6:	9903      	ldr	r1, [sp, #12]
 800f1d8:	9806      	ldr	r0, [sp, #24]
 800f1da:	4281      	cmp	r1, r0
 800f1dc:	f240 8356 	bls.w	800f88c <forward_dense+0x7e4>
 800f1e0:	4686      	mov	lr, r0
 800f1e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f1e4:	eb00 090a 	add.w	r9, r0, sl
 800f1e8:	0941      	lsrs	r1, r0, #5
 800f1ea:	f10a 0004 	add.w	r0, sl, #4
 800f1ee:	f8cd 9020 	str.w	r9, [sp, #32]
 800f1f2:	9012      	str	r0, [sp, #72]	; 0x48
 800f1f4:	1c48      	adds	r0, r1, #1
 800f1f6:	00c9      	lsls	r1, r1, #3
 800f1f8:	3110      	adds	r1, #16
 800f1fa:	9115      	str	r1, [sp, #84]	; 0x54
 800f1fc:	00c1      	lsls	r1, r0, #3
 800f1fe:	9113      	str	r1, [sp, #76]	; 0x4c
 800f200:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800f204:	9114      	str	r1, [sp, #80]	; 0x50
 800f206:	f1a9 0104 	sub.w	r1, r9, #4
 800f20a:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800f20e:	910c      	str	r1, [sp, #48]	; 0x30
 800f210:	2b00      	cmp	r3, #0
 800f212:	f000 8128 	beq.w	800f466 <forward_dense+0x3be>
 800f216:	ecb3 5a01 	vldmia	r3!, {s10}
 800f21a:	f1b9 0f07 	cmp.w	r9, #7
 800f21e:	d83d      	bhi.n	800f29c <forward_dense+0x1f4>
 800f220:	45da      	cmp	sl, fp
 800f222:	d211      	bcs.n	800f248 <forward_dense+0x1a0>
 800f224:	eddf 7a92 	vldr	s15, [pc, #584]	; 800f470 <forward_dense+0x3c8>
 800f228:	4650      	mov	r0, sl
 800f22a:	4615      	mov	r5, r2
 800f22c:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f230:	ecb0 7a01 	vldmia	r0!, {s14}
 800f234:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f238:	4558      	cmp	r0, fp
 800f23a:	edd1 6a00 	vldr	s13, [r1]
 800f23e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f242:	d3f3      	bcc.n	800f22c <forward_dense+0x184>
 800f244:	ee35 5a27 	vadd.f32	s10, s10, s15
 800f248:	9904      	ldr	r1, [sp, #16]
 800f24a:	ecae 5a01 	vstmia	lr!, {s10}
 800f24e:	440a      	add	r2, r1
 800f250:	9903      	ldr	r1, [sp, #12]
 800f252:	458e      	cmp	lr, r1
 800f254:	d3dc      	bcc.n	800f210 <forward_dense+0x168>
 800f256:	9a06      	ldr	r2, [sp, #24]
 800f258:	1a8b      	subs	r3, r1, r2
 800f25a:	3b01      	subs	r3, #1
 800f25c:	f023 0303 	bic.w	r3, r3, #3
 800f260:	3304      	adds	r3, #4
 800f262:	18d3      	adds	r3, r2, r3
 800f264:	4619      	mov	r1, r3
 800f266:	9306      	str	r3, [sp, #24]
 800f268:	9b03      	ldr	r3, [sp, #12]
 800f26a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f26c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f26e:	4413      	add	r3, r2
 800f270:	9a07      	ldr	r2, [sp, #28]
 800f272:	4281      	cmp	r1, r0
 800f274:	9303      	str	r3, [sp, #12]
 800f276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f278:	441a      	add	r2, r3
 800f27a:	449b      	add	fp, r3
 800f27c:	9207      	str	r2, [sp, #28]
 800f27e:	9a05      	ldr	r2, [sp, #20]
 800f280:	441a      	add	r2, r3
 800f282:	9205      	str	r2, [sp, #20]
 800f284:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f286:	4692      	mov	sl, r2
 800f288:	f080 82fb 	bcs.w	800f882 <forward_dense+0x7da>
 800f28c:	441a      	add	r2, r3
 800f28e:	920b      	str	r2, [sp, #44]	; 0x2c
 800f290:	e793      	b.n	800f1ba <forward_dense+0x112>
 800f292:	6853      	ldr	r3, [r2, #4]
 800f294:	deff      	udf	#255	; 0xff
 800f296:	2300      	movs	r3, #0
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	deff      	udf	#255	; 0xff
 800f29c:	f002 0103 	and.w	r1, r2, #3
 800f2a0:	2902      	cmp	r1, #2
 800f2a2:	f000 81e6 	beq.w	800f672 <forward_dense+0x5ca>
 800f2a6:	2903      	cmp	r1, #3
 800f2a8:	f000 80e4 	beq.w	800f474 <forward_dense+0x3cc>
 800f2ac:	2901      	cmp	r1, #1
 800f2ae:	f000 81ef 	beq.w	800f690 <forward_dense+0x5e8>
 800f2b2:	9908      	ldr	r1, [sp, #32]
 800f2b4:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800f470 <forward_dense+0x3c8>
 800f2b8:	458a      	cmp	sl, r1
 800f2ba:	f200 82e9 	bhi.w	800f890 <forward_dense+0x7e8>
 800f2be:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f2c0:	f102 0108 	add.w	r1, r2, #8
 800f2c4:	f10a 0020 	add.w	r0, sl, #32
 800f2c8:	18ae      	adds	r6, r5, r2
 800f2ca:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800f2ce:	3108      	adds	r1, #8
 800f2d0:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800f2d4:	3020      	adds	r0, #32
 800f2d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f2da:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800f2de:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800f2e2:	edd5 7a00 	vldr	s15, [r5]
 800f2e6:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800f2ea:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f2ee:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800f2f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f2f6:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800f2fa:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800f2fe:	edd5 2a00 	vldr	s5, [r5]
 800f302:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800f306:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f30a:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800f30e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f312:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800f316:	ed95 3a00 	vldr	s6, [r5]
 800f31a:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800f31e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f322:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f326:	edd5 3a00 	vldr	s7, [r5]
 800f32a:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800f32e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f332:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f336:	ed95 4a00 	vldr	s8, [r5]
 800f33a:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800f33e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f342:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f346:	edd5 4a00 	vldr	s9, [r5]
 800f34a:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800f34e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f352:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800f356:	edd5 5a00 	vldr	s11, [r5]
 800f35a:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800f35e:	428e      	cmp	r6, r1
 800f360:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f364:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f368:	ed95 6a00 	vldr	s12, [r5]
 800f36c:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f370:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f374:	d1a9      	bne.n	800f2ca <forward_dense+0x222>
 800f376:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f378:	1850      	adds	r0, r2, r1
 800f37a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f37c:	4559      	cmp	r1, fp
 800f37e:	d26f      	bcs.n	800f460 <forward_dense+0x3b8>
 800f380:	7805      	ldrb	r5, [r0, #0]
 800f382:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f386:	edd5 7a00 	vldr	s15, [r5]
 800f38a:	460d      	mov	r5, r1
 800f38c:	ecf5 6a01 	vldmia	r5!, {s13}
 800f390:	45ab      	cmp	fp, r5
 800f392:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f396:	d963      	bls.n	800f460 <forward_dense+0x3b8>
 800f398:	7845      	ldrb	r5, [r0, #1]
 800f39a:	edd1 6a01 	vldr	s13, [r1, #4]
 800f39e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3a2:	edd5 7a00 	vldr	s15, [r5]
 800f3a6:	f101 0508 	add.w	r5, r1, #8
 800f3aa:	45ab      	cmp	fp, r5
 800f3ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3b0:	d956      	bls.n	800f460 <forward_dense+0x3b8>
 800f3b2:	7885      	ldrb	r5, [r0, #2]
 800f3b4:	edd1 6a02 	vldr	s13, [r1, #8]
 800f3b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3bc:	edd5 7a00 	vldr	s15, [r5]
 800f3c0:	f101 050c 	add.w	r5, r1, #12
 800f3c4:	45ab      	cmp	fp, r5
 800f3c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3ca:	d949      	bls.n	800f460 <forward_dense+0x3b8>
 800f3cc:	78c5      	ldrb	r5, [r0, #3]
 800f3ce:	edd1 6a03 	vldr	s13, [r1, #12]
 800f3d2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3d6:	edd5 7a00 	vldr	s15, [r5]
 800f3da:	f101 0510 	add.w	r5, r1, #16
 800f3de:	45ab      	cmp	fp, r5
 800f3e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3e4:	d93c      	bls.n	800f460 <forward_dense+0x3b8>
 800f3e6:	7905      	ldrb	r5, [r0, #4]
 800f3e8:	edd1 6a04 	vldr	s13, [r1, #16]
 800f3ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f3f0:	edd5 7a00 	vldr	s15, [r5]
 800f3f4:	f101 0514 	add.w	r5, r1, #20
 800f3f8:	45ab      	cmp	fp, r5
 800f3fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f3fe:	d92f      	bls.n	800f460 <forward_dense+0x3b8>
 800f400:	7945      	ldrb	r5, [r0, #5]
 800f402:	edd1 6a05 	vldr	s13, [r1, #20]
 800f406:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f40a:	edd5 7a00 	vldr	s15, [r5]
 800f40e:	f101 0518 	add.w	r5, r1, #24
 800f412:	45ab      	cmp	fp, r5
 800f414:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f418:	d922      	bls.n	800f460 <forward_dense+0x3b8>
 800f41a:	7985      	ldrb	r5, [r0, #6]
 800f41c:	edd1 6a06 	vldr	s13, [r1, #24]
 800f420:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f424:	edd5 7a00 	vldr	s15, [r5]
 800f428:	f101 051c 	add.w	r5, r1, #28
 800f42c:	45ab      	cmp	fp, r5
 800f42e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f432:	d915      	bls.n	800f460 <forward_dense+0x3b8>
 800f434:	79c5      	ldrb	r5, [r0, #7]
 800f436:	edd1 6a07 	vldr	s13, [r1, #28]
 800f43a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f43e:	edd5 7a00 	vldr	s15, [r5]
 800f442:	f101 0520 	add.w	r5, r1, #32
 800f446:	45ab      	cmp	fp, r5
 800f448:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f44c:	d908      	bls.n	800f460 <forward_dense+0x3b8>
 800f44e:	edd1 7a08 	vldr	s15, [r1, #32]
 800f452:	7a01      	ldrb	r1, [r0, #8]
 800f454:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f458:	edd1 6a00 	vldr	s13, [r1]
 800f45c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f460:	ee35 5a07 	vadd.f32	s10, s10, s14
 800f464:	e6f0      	b.n	800f248 <forward_dense+0x1a0>
 800f466:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800f470 <forward_dense+0x3c8>
 800f46a:	e6d6      	b.n	800f21a <forward_dense+0x172>
 800f46c:	3ffffff8 	.word	0x3ffffff8
 800f470:	00000000 	.word	0x00000000
 800f474:	eeb0 7a48 	vmov.f32	s14, s16
 800f478:	4650      	mov	r0, sl
 800f47a:	4611      	mov	r1, r2
 800f47c:	468c      	mov	ip, r1
 800f47e:	4606      	mov	r6, r0
 800f480:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800f484:	ecf6 7a01 	vldmia	r6!, {s15}
 800f488:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f48c:	edd5 6a00 	vldr	s13, [r5]
 800f490:	9d08      	ldr	r5, [sp, #32]
 800f492:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f496:	42ae      	cmp	r6, r5
 800f498:	d866      	bhi.n	800f568 <forward_dense+0x4c0>
 800f49a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f49c:	f101 0711 	add.w	r7, r1, #17
 800f4a0:	3109      	adds	r1, #9
 800f4a2:	eba5 0800 	sub.w	r8, r5, r0
 800f4a6:	3024      	adds	r0, #36	; 0x24
 800f4a8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800f4ac:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800f4b0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800f4b4:	3108      	adds	r1, #8
 800f4b6:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800f4ba:	3020      	adds	r0, #32
 800f4bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4c0:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800f4c4:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800f4c8:	edd5 7a00 	vldr	s15, [r5]
 800f4cc:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800f4d0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800f4d4:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800f4d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4dc:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800f4e0:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800f4e4:	edd5 2a00 	vldr	s5, [r5]
 800f4e8:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800f4ec:	eee2 7a83 	vfma.f32	s15, s5, s6
 800f4f0:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800f4f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f4f8:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800f4fc:	ed95 3a00 	vldr	s6, [r5]
 800f500:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800f504:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f508:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f50c:	edd5 3a00 	vldr	s7, [r5]
 800f510:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800f514:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f518:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f51c:	ed95 4a00 	vldr	s8, [r5]
 800f520:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800f524:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f528:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f52c:	edd5 4a00 	vldr	s9, [r5]
 800f530:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800f534:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f538:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800f53c:	edd5 5a00 	vldr	s11, [r5]
 800f540:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800f544:	428f      	cmp	r7, r1
 800f546:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f54a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f54e:	ed95 6a00 	vldr	s12, [r5]
 800f552:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f55a:	d1a9      	bne.n	800f4b0 <forward_dense+0x408>
 800f55c:	f108 0801 	add.w	r8, r8, #1
 800f560:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800f564:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800f568:	455e      	cmp	r6, fp
 800f56a:	f4bf af79 	bcs.w	800f460 <forward_dense+0x3b8>
 800f56e:	f89c 1000 	ldrb.w	r1, [ip]
 800f572:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f576:	edd1 7a00 	vldr	s15, [r1]
 800f57a:	4631      	mov	r1, r6
 800f57c:	ecf1 6a01 	vldmia	r1!, {s13}
 800f580:	458b      	cmp	fp, r1
 800f582:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f586:	f67f af6b 	bls.w	800f460 <forward_dense+0x3b8>
 800f58a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800f58e:	edd6 6a01 	vldr	s13, [r6, #4]
 800f592:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f596:	edd1 7a00 	vldr	s15, [r1]
 800f59a:	f106 0108 	add.w	r1, r6, #8
 800f59e:	458b      	cmp	fp, r1
 800f5a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5a4:	f67f af5c 	bls.w	800f460 <forward_dense+0x3b8>
 800f5a8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800f5ac:	edd6 6a02 	vldr	s13, [r6, #8]
 800f5b0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f5b4:	edd1 7a00 	vldr	s15, [r1]
 800f5b8:	f106 010c 	add.w	r1, r6, #12
 800f5bc:	458b      	cmp	fp, r1
 800f5be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5c2:	f67f af4d 	bls.w	800f460 <forward_dense+0x3b8>
 800f5c6:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800f5ca:	edd6 6a03 	vldr	s13, [r6, #12]
 800f5ce:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f5d2:	edd1 7a00 	vldr	s15, [r1]
 800f5d6:	f106 0110 	add.w	r1, r6, #16
 800f5da:	458b      	cmp	fp, r1
 800f5dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5e0:	f67f af3e 	bls.w	800f460 <forward_dense+0x3b8>
 800f5e4:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800f5e8:	edd6 6a04 	vldr	s13, [r6, #16]
 800f5ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f5f0:	edd1 7a00 	vldr	s15, [r1]
 800f5f4:	f106 0114 	add.w	r1, r6, #20
 800f5f8:	458b      	cmp	fp, r1
 800f5fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f5fe:	f67f af2f 	bls.w	800f460 <forward_dense+0x3b8>
 800f602:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800f606:	edd6 6a05 	vldr	s13, [r6, #20]
 800f60a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f60e:	edd1 7a00 	vldr	s15, [r1]
 800f612:	f106 0118 	add.w	r1, r6, #24
 800f616:	458b      	cmp	fp, r1
 800f618:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f61c:	f67f af20 	bls.w	800f460 <forward_dense+0x3b8>
 800f620:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800f624:	edd6 6a06 	vldr	s13, [r6, #24]
 800f628:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f62c:	edd1 7a00 	vldr	s15, [r1]
 800f630:	f106 011c 	add.w	r1, r6, #28
 800f634:	458b      	cmp	fp, r1
 800f636:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f63a:	f67f af11 	bls.w	800f460 <forward_dense+0x3b8>
 800f63e:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800f642:	edd6 6a07 	vldr	s13, [r6, #28]
 800f646:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f64a:	edd1 7a00 	vldr	s15, [r1]
 800f64e:	f106 0120 	add.w	r1, r6, #32
 800f652:	458b      	cmp	fp, r1
 800f654:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f658:	f67f af02 	bls.w	800f460 <forward_dense+0x3b8>
 800f65c:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800f660:	edd6 7a08 	vldr	s15, [r6, #32]
 800f664:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f668:	edd1 6a00 	vldr	s13, [r1]
 800f66c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f670:	e6f6      	b.n	800f460 <forward_dense+0x3b8>
 800f672:	eeb0 7a48 	vmov.f32	s14, s16
 800f676:	4650      	mov	r0, sl
 800f678:	4611      	mov	r1, r2
 800f67a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f67e:	ecf0 7a01 	vldmia	r0!, {s15}
 800f682:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f686:	edd5 6a00 	vldr	s13, [r5]
 800f68a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f68e:	e6f5      	b.n	800f47c <forward_dense+0x3d4>
 800f690:	4611      	mov	r1, r2
 800f692:	edda 7a00 	vldr	s15, [sl]
 800f696:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f698:	f811 5b01 	ldrb.w	r5, [r1], #1
 800f69c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f6a0:	ed95 7a00 	vldr	s14, [r5]
 800f6a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f6a8:	e7e7      	b.n	800f67a <forward_dense+0x5d2>
 800f6aa:	9803      	ldr	r0, [sp, #12]
 800f6ac:	9906      	ldr	r1, [sp, #24]
 800f6ae:	4288      	cmp	r0, r1
 800f6b0:	f67f adda 	bls.w	800f268 <forward_dense+0x1c0>
 800f6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6b6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800f6ba:	468b      	mov	fp, r1
 800f6bc:	f100 0c01 	add.w	ip, r0, #1
 800f6c0:	9805      	ldr	r0, [sp, #20]
 800f6c2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800f6c6:	3801      	subs	r0, #1
 800f6c8:	9008      	str	r0, [sp, #32]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f000 80bf 	beq.w	800f84e <forward_dense+0x7a6>
 800f6d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6d2:	ecf3 2a01 	vldmia	r3!, {s5}
 800f6d6:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800f470 <forward_dense+0x3c8>
 800f6da:	2900      	cmp	r1, #0
 800f6dc:	f000 80bf 	beq.w	800f85e <forward_dense+0x7b6>
 800f6e0:	1d10      	adds	r0, r2, #4
 800f6e2:	f10a 0120 	add.w	r1, sl, #32
 800f6e6:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800f6ea:	3004      	adds	r0, #4
 800f6ec:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800f6f0:	3120      	adds	r1, #32
 800f6f2:	f007 0e0f 	and.w	lr, r7, #15
 800f6f6:	093f      	lsrs	r7, r7, #4
 800f6f8:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800f6fc:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800f700:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800f704:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f708:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800f70c:	edde 7a00 	vldr	s15, [lr]
 800f710:	ed97 3a00 	vldr	s6, [r7]
 800f714:	0937      	lsrs	r7, r6, #4
 800f716:	ee67 7a82 	vmul.f32	s15, s15, s4
 800f71a:	f006 060f 	and.w	r6, r6, #15
 800f71e:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800f722:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800f726:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f72a:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800f72e:	eee3 7a04 	vfma.f32	s15, s6, s8
 800f732:	ed97 3a00 	vldr	s6, [r7]
 800f736:	ed96 4a00 	vldr	s8, [r6]
 800f73a:	092e      	lsrs	r6, r5, #4
 800f73c:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800f740:	f005 050f 	and.w	r5, r5, #15
 800f744:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f748:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800f74c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f750:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800f754:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800f758:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f75c:	eee4 7a05 	vfma.f32	s15, s8, s10
 800f760:	ed96 4a00 	vldr	s8, [r6]
 800f764:	ed95 5a00 	vldr	s10, [r5]
 800f768:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800f76c:	4560      	cmp	r0, ip
 800f76e:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800f772:	f005 050f 	and.w	r5, r5, #15
 800f776:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f77a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f77e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f782:	eee5 7a06 	vfma.f32	s15, s10, s12
 800f786:	ed96 5a00 	vldr	s10, [r6]
 800f78a:	ed95 6a00 	vldr	s12, [r5]
 800f78e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f792:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f79a:	d1a4      	bne.n	800f6e6 <forward_dense+0x63e>
 800f79c:	f1ac 0804 	sub.w	r8, ip, #4
 800f7a0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800f7a4:	9905      	ldr	r1, [sp, #20]
 800f7a6:	458e      	cmp	lr, r1
 800f7a8:	d229      	bcs.n	800f7fe <forward_dense+0x756>
 800f7aa:	9908      	ldr	r1, [sp, #32]
 800f7ac:	f10e 0008 	add.w	r0, lr, #8
 800f7b0:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800f7b4:	eba1 070e 	sub.w	r7, r1, lr
 800f7b8:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800f7bc:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800f7c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7c4:	3008      	adds	r0, #8
 800f7c6:	ed50 5a03 	vldr	s11, [r0, #-12]
 800f7ca:	f001 050f 	and.w	r5, r1, #15
 800f7ce:	0909      	lsrs	r1, r1, #4
 800f7d0:	ed50 6a04 	vldr	s13, [r0, #-16]
 800f7d4:	42b7      	cmp	r7, r6
 800f7d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800f7da:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f7de:	edd5 7a00 	vldr	s15, [r5]
 800f7e2:	ed91 6a00 	vldr	s12, [r1]
 800f7e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f7ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f7ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7f2:	d1e5      	bne.n	800f7c0 <forward_dense+0x718>
 800f7f4:	f109 0901 	add.w	r9, r9, #1
 800f7f8:	44c8      	add	r8, r9
 800f7fa:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800f7fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f800:	b1c1      	cbz	r1, 800f834 <forward_dense+0x78c>
 800f802:	f898 1000 	ldrb.w	r1, [r8]
 800f806:	edde 7a00 	vldr	s15, [lr]
 800f80a:	0909      	lsrs	r1, r1, #4
 800f80c:	9804      	ldr	r0, [sp, #16]
 800f80e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800f812:	4402      	add	r2, r0
 800f814:	4484      	add	ip, r0
 800f816:	edd1 6a00 	vldr	s13, [r1]
 800f81a:	9903      	ldr	r1, [sp, #12]
 800f81c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f820:	ee72 2a87 	vadd.f32	s5, s5, s14
 800f824:	eceb 2a01 	vstmia	fp!, {s5}
 800f828:	4559      	cmp	r1, fp
 800f82a:	f63f af4e 	bhi.w	800f6ca <forward_dense+0x622>
 800f82e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800f832:	e510      	b.n	800f256 <forward_dense+0x1ae>
 800f834:	9904      	ldr	r1, [sp, #16]
 800f836:	ee32 7a87 	vadd.f32	s14, s5, s14
 800f83a:	440a      	add	r2, r1
 800f83c:	448c      	add	ip, r1
 800f83e:	9903      	ldr	r1, [sp, #12]
 800f840:	ecab 7a01 	vstmia	fp!, {s14}
 800f844:	458b      	cmp	fp, r1
 800f846:	d2f2      	bcs.n	800f82e <forward_dense+0x786>
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f47f af41 	bne.w	800f6d0 <forward_dense+0x628>
 800f84e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f850:	eef0 2a48 	vmov.f32	s5, s16
 800f854:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800f8e4 <forward_dense+0x83c>
 800f858:	2900      	cmp	r1, #0
 800f85a:	f47f af41 	bne.w	800f6e0 <forward_dense+0x638>
 800f85e:	46d6      	mov	lr, sl
 800f860:	4690      	mov	r8, r2
 800f862:	e79f      	b.n	800f7a4 <forward_dense+0x6fc>
 800f864:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f866:	4651      	mov	r1, sl
 800f868:	9d06      	ldr	r5, [sp, #24]
 800f86a:	9001      	str	r0, [sp, #4]
 800f86c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f86e:	9000      	str	r0, [sp, #0]
 800f870:	4628      	mov	r0, r5
 800f872:	f000 fc21 	bl	80100b8 <lite_dense_if32of32wf32>
 800f876:	462b      	mov	r3, r5
 800f878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f87a:	4413      	add	r3, r2
 800f87c:	4619      	mov	r1, r3
 800f87e:	9306      	str	r3, [sp, #24]
 800f880:	e4f2      	b.n	800f268 <forward_dense+0x1c0>
 800f882:	b01b      	add	sp, #108	; 0x6c
 800f884:	ecbd 8b02 	vpop	{d8}
 800f888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88c:	4601      	mov	r1, r0
 800f88e:	e4eb      	b.n	800f268 <forward_dense+0x1c0>
 800f890:	4651      	mov	r1, sl
 800f892:	4610      	mov	r0, r2
 800f894:	e572      	b.n	800f37c <forward_dense+0x2d4>
 800f896:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800f89a:	f1b9 0f00 	cmp.w	r9, #0
 800f89e:	d016      	beq.n	800f8ce <forward_dense+0x826>
 800f8a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f8a4:	f000 fdb8 	bl	8010418 <ai_array_get_byte_size>
 800f8a8:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	4641      	mov	r1, r8
 800f8b0:	4650      	mov	r0, sl
 800f8b2:	f001 febb 	bl	801162c <memcpy>
 800f8b6:	e44b      	b.n	800f150 <forward_dense+0xa8>
 800f8b8:	2b04      	cmp	r3, #4
 800f8ba:	d00a      	beq.n	800f8d2 <forward_dense+0x82a>
 800f8bc:	f04f 0900 	mov.w	r9, #0
 800f8c0:	e441      	b.n	800f146 <forward_dense+0x9e>
 800f8c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8c4:	e417      	b.n	800f0f6 <forward_dense+0x4e>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	930d      	str	r3, [sp, #52]	; 0x34
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	e413      	b.n	800f0f6 <forward_dense+0x4e>
 800f8ce:	46c2      	mov	sl, r8
 800f8d0:	e43e      	b.n	800f150 <forward_dense+0xa8>
 800f8d2:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800f8d6:	e43b      	b.n	800f150 <forward_dense+0xa8>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	deff      	udf	#255	; 0xff
 800f8de:	2300      	movs	r3, #0
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	deff      	udf	#255	; 0xff
 800f8e4:	00000000 	.word	0x00000000

0800f8e8 <forward_mp>:
 800f8e8:	6983      	ldr	r3, [r0, #24]
 800f8ea:	881a      	ldrh	r2, [r3, #0]
 800f8ec:	2a00      	cmp	r2, #0
 800f8ee:	f000 80bc 	beq.w	800fa6a <forward_mp+0x182>
 800f8f2:	6859      	ldr	r1, [r3, #4]
 800f8f4:	684b      	ldr	r3, [r1, #4]
 800f8f6:	b103      	cbz	r3, 800f8fa <forward_mp+0x12>
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2a01      	cmp	r2, #1
 800f8fc:	f000 80ba 	beq.w	800fa74 <forward_mp+0x18c>
 800f900:	690a      	ldr	r2, [r1, #16]
 800f902:	2a00      	cmp	r2, #0
 800f904:	f000 80b9 	beq.w	800fa7a <forward_mp+0x192>
 800f908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f90c:	6811      	ldr	r1, [r2, #0]
 800f90e:	b093      	sub	sp, #76	; 0x4c
 800f910:	68ca      	ldr	r2, [r1, #12]
 800f912:	6989      	ldr	r1, [r1, #24]
 800f914:	68d4      	ldr	r4, [r2, #12]
 800f916:	6895      	ldr	r5, [r2, #8]
 800f918:	688a      	ldr	r2, [r1, #8]
 800f91a:	68d9      	ldr	r1, [r3, #12]
 800f91c:	699b      	ldr	r3, [r3, #24]
 800f91e:	9200      	str	r2, [sp, #0]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800f924:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800f928:	930e      	str	r3, [sp, #56]	; 0x38
 800f92a:	9408      	str	r4, [sp, #32]
 800f92c:	9504      	str	r5, [sp, #16]
 800f92e:	e9d2 3600 	ldrd	r3, r6, [r2]
 800f932:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800f936:	69c1      	ldr	r1, [r0, #28]
 800f938:	f1c3 0a00 	rsb	sl, r3, #0
 800f93c:	960d      	str	r6, [sp, #52]	; 0x34
 800f93e:	9109      	str	r1, [sp, #36]	; 0x24
 800f940:	6a01      	ldr	r1, [r0, #32]
 800f942:	9705      	str	r7, [sp, #20]
 800f944:	910a      	str	r1, [sp, #40]	; 0x28
 800f946:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800f948:	910b      	str	r1, [sp, #44]	; 0x2c
 800f94a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f94c:	910c      	str	r1, [sp, #48]	; 0x30
 800f94e:	2c00      	cmp	r4, #0
 800f950:	f000 8088 	beq.w	800fa64 <forward_mp+0x17c>
 800f954:	441a      	add	r2, r3
 800f956:	9b05      	ldr	r3, [sp, #20]
 800f958:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800f95c:	f04f 0b00 	mov.w	fp, #0
 800f960:	fb09 f303 	mul.w	r3, r9, r3
 800f964:	9201      	str	r2, [sp, #4]
 800f966:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800f96a:	4273      	negs	r3, r6
 800f96c:	9310      	str	r3, [sp, #64]	; 0x40
 800f96e:	fb05 f307 	mul.w	r3, r5, r7
 800f972:	930f      	str	r3, [sp, #60]	; 0x3c
 800f974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f976:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800f97a:	9901      	ldr	r1, [sp, #4]
 800f97c:	9307      	str	r3, [sp, #28]
 800f97e:	428a      	cmp	r2, r1
 800f980:	bf94      	ite	ls
 800f982:	eb0a 0e02 	addls.w	lr, sl, r2
 800f986:	eb0a 0e01 	addhi.w	lr, sl, r1
 800f98a:	9a04      	ldr	r2, [sp, #16]
 800f98c:	2a00      	cmp	r2, #0
 800f98e:	d05f      	beq.n	800fa50 <forward_mp+0x168>
 800f990:	9a05      	ldr	r2, [sp, #20]
 800f992:	9d00      	ldr	r5, [sp, #0]
 800f994:	fb02 f303 	mul.w	r3, r2, r3
 800f998:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800f99c:	9303      	str	r3, [sp, #12]
 800f99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9a0:	18d3      	adds	r3, r2, r3
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	9302      	str	r3, [sp, #8]
 800f9a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9a8:	9206      	str	r2, [sp, #24]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	469b      	mov	fp, r3
 800f9ae:	db5e      	blt.n	800fa6e <forward_mp+0x186>
 800f9b0:	9a03      	ldr	r2, [sp, #12]
 800f9b2:	18d6      	adds	r6, r2, r3
 800f9b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9b6:	9902      	ldr	r1, [sp, #8]
 800f9b8:	fb06 2607 	mla	r6, r6, r7, r2
 800f9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9be:	428a      	cmp	r2, r1
 800f9c0:	bf94      	ite	ls
 800f9c2:	eb0b 0402 	addls.w	r4, fp, r2
 800f9c6:	eb0b 0401 	addhi.w	r4, fp, r1
 800f9ca:	1ae4      	subs	r4, r4, r3
 800f9cc:	f1b9 0f00 	cmp.w	r9, #0
 800f9d0:	d008      	beq.n	800f9e4 <forward_mp+0xfc>
 800f9d2:	4633      	mov	r3, r6
 800f9d4:	462a      	mov	r2, r5
 800f9d6:	19b9      	adds	r1, r7, r6
 800f9d8:	f853 0b04 	ldr.w	r0, [r3], #4
 800f9dc:	4299      	cmp	r1, r3
 800f9de:	f842 0b04 	str.w	r0, [r2], #4
 800f9e2:	d1f9      	bne.n	800f9d8 <forward_mp+0xf0>
 800f9e4:	9b07      	ldr	r3, [sp, #28]
 800f9e6:	459e      	cmp	lr, r3
 800f9e8:	dd1f      	ble.n	800fa2a <forward_mp+0x142>
 800f9ea:	469c      	mov	ip, r3
 800f9ec:	fb07 6404 	mla	r4, r7, r4, r6
 800f9f0:	42a6      	cmp	r6, r4
 800f9f2:	d214      	bcs.n	800fa1e <forward_mp+0x136>
 800f9f4:	f1b9 0f00 	cmp.w	r9, #0
 800f9f8:	d011      	beq.n	800fa1e <forward_mp+0x136>
 800f9fa:	19f1      	adds	r1, r6, r7
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	4602      	mov	r2, r0
 800fa00:	462b      	mov	r3, r5
 800fa02:	ecf2 7a01 	vldmia	r2!, {s15}
 800fa06:	ed93 7a00 	vldr	s14, [r3]
 800fa0a:	428a      	cmp	r2, r1
 800fa0c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fa10:	ece3 7a01 	vstmia	r3!, {s15}
 800fa14:	d1f5      	bne.n	800fa02 <forward_mp+0x11a>
 800fa16:	4438      	add	r0, r7
 800fa18:	4439      	add	r1, r7
 800fa1a:	42a0      	cmp	r0, r4
 800fa1c:	d3ef      	bcc.n	800f9fe <forward_mp+0x116>
 800fa1e:	f10c 0c01 	add.w	ip, ip, #1
 800fa22:	4446      	add	r6, r8
 800fa24:	4444      	add	r4, r8
 800fa26:	45e6      	cmp	lr, ip
 800fa28:	d1e2      	bne.n	800f9f0 <forward_mp+0x108>
 800fa2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa2c:	443d      	add	r5, r7
 800fa2e:	9802      	ldr	r0, [sp, #8]
 800fa30:	9a06      	ldr	r2, [sp, #24]
 800fa32:	eb01 030b 	add.w	r3, r1, fp
 800fa36:	1a41      	subs	r1, r0, r1
 800fa38:	3201      	adds	r2, #1
 800fa3a:	9102      	str	r1, [sp, #8]
 800fa3c:	9904      	ldr	r1, [sp, #16]
 800fa3e:	9206      	str	r2, [sp, #24]
 800fa40:	4291      	cmp	r1, r2
 800fa42:	d1b2      	bne.n	800f9aa <forward_mp+0xc2>
 800fa44:	9b00      	ldr	r3, [sp, #0]
 800fa46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa48:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800fa4c:	4413      	add	r3, r2
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa52:	f10b 0b01 	add.w	fp, fp, #1
 800fa56:	9a01      	ldr	r2, [sp, #4]
 800fa58:	449a      	add	sl, r3
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	9b08      	ldr	r3, [sp, #32]
 800fa60:	455b      	cmp	r3, fp
 800fa62:	d187      	bne.n	800f974 <forward_mp+0x8c>
 800fa64:	b013      	add	sp, #76	; 0x4c
 800fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6a:	6853      	ldr	r3, [r2, #4]
 800fa6c:	deff      	udf	#255	; 0xff
 800fa6e:	9e03      	ldr	r6, [sp, #12]
 800fa70:	2300      	movs	r3, #0
 800fa72:	e79f      	b.n	800f9b4 <forward_mp+0xcc>
 800fa74:	2300      	movs	r3, #0
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	deff      	udf	#255	; 0xff
 800fa7a:	68d3      	ldr	r3, [r2, #12]
 800fa7c:	deff      	udf	#255	; 0xff
 800fa7e:	bf00      	nop

0800fa80 <nl_func_relu_array_f32>:
 800fa80:	b410      	push	{r4}
 800fa82:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fa86:	698c      	ldr	r4, [r1, #24]
 800fa88:	6981      	ldr	r1, [r0, #24]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	68a0      	ldr	r0, [r4, #8]
 800fa8e:	6889      	ldr	r1, [r1, #8]
 800fa90:	009a      	lsls	r2, r3, #2
 800fa92:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fa96:	4298      	cmp	r0, r3
 800fa98:	d80f      	bhi.n	800faba <nl_func_relu_array_f32+0x3a>
 800fa9a:	3204      	adds	r2, #4
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800fac0 <nl_func_relu_array_f32+0x40>
 800faa2:	4411      	add	r1, r2
 800faa4:	461a      	mov	r2, r3
 800faa6:	ed73 7a01 	vldmdb	r3!, {s15}
 800faaa:	3a08      	subs	r2, #8
 800faac:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fab0:	ed61 7a01 	vstmdb	r1!, {s15}
 800fab4:	68a0      	ldr	r0, [r4, #8]
 800fab6:	4290      	cmp	r0, r2
 800fab8:	d9f4      	bls.n	800faa4 <nl_func_relu_array_f32+0x24>
 800faba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	00000000 	.word	0x00000000

0800fac4 <forward_relu>:
 800fac4:	6982      	ldr	r2, [r0, #24]
 800fac6:	8813      	ldrh	r3, [r2, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d05b      	beq.n	800fb84 <forward_relu+0xc0>
 800facc:	6851      	ldr	r1, [r2, #4]
 800face:	684a      	ldr	r2, [r1, #4]
 800fad0:	b102      	cbz	r2, 800fad4 <forward_relu+0x10>
 800fad2:	6812      	ldr	r2, [r2, #0]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	f000 8123 	beq.w	800fd20 <forward_relu+0x25c>
 800fada:	b470      	push	{r4, r5, r6}
 800fadc:	690b      	ldr	r3, [r1, #16]
 800fade:	b103      	cbz	r3, 800fae2 <forward_relu+0x1e>
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	69c6      	ldr	r6, [r0, #28]
 800fae4:	2e00      	cmp	r6, #0
 800fae6:	f000 809e 	beq.w	800fc26 <forward_relu+0x162>
 800faea:	6871      	ldr	r1, [r6, #4]
 800faec:	6998      	ldr	r0, [r3, #24]
 800faee:	2901      	cmp	r1, #1
 800faf0:	f000 80c3 	beq.w	800fc7a <forward_relu+0x1b6>
 800faf4:	6893      	ldr	r3, [r2, #8]
 800faf6:	6991      	ldr	r1, [r2, #24]
 800faf8:	0a1b      	lsrs	r3, r3, #8
 800fafa:	6880      	ldr	r0, [r0, #8]
 800fafc:	688d      	ldr	r5, [r1, #8]
 800fafe:	f000 80f2 	beq.w	800fce6 <forward_relu+0x222>
 800fb02:	68d4      	ldr	r4, [r2, #12]
 800fb04:	2201      	movs	r2, #1
 800fb06:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fb0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fb0e:	42a3      	cmp	r3, r4
 800fb10:	fb01 f202 	mul.w	r2, r1, r2
 800fb14:	d1f9      	bne.n	800fb0a <forward_relu+0x46>
 800fb16:	68b3      	ldr	r3, [r6, #8]
 800fb18:	ed93 7a02 	vldr	s14, [r3, #8]
 800fb1c:	edd3 6a00 	vldr	s13, [r3]
 800fb20:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fb24:	ed93 6a01 	vldr	s12, [r3, #4]
 800fb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb2c:	d42c      	bmi.n	800fb88 <forward_relu+0xc4>
 800fb2e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fb32:	4413      	add	r3, r2
 800fb34:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800fb38:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800fb3c:	4295      	cmp	r5, r2
 800fb3e:	d81f      	bhi.n	800fb80 <forward_relu+0xbc>
 800fb40:	3204      	adds	r2, #4
 800fb42:	1d01      	adds	r1, r0, #4
 800fb44:	e00d      	b.n	800fb62 <forward_relu+0x9e>
 800fb46:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb4e:	db03      	blt.n	800fb58 <forward_relu+0x94>
 800fb50:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fb54:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fb58:	3b08      	subs	r3, #8
 800fb5a:	ed61 7a01 	vstmdb	r1!, {s15}
 800fb5e:	429d      	cmp	r5, r3
 800fb60:	d80e      	bhi.n	800fb80 <forward_relu+0xbc>
 800fb62:	4613      	mov	r3, r2
 800fb64:	ed72 7a01 	vldmdb	r2!, {s15}
 800fb68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb70:	d9e9      	bls.n	800fb46 <forward_relu+0x82>
 800fb72:	3b08      	subs	r3, #8
 800fb74:	eef0 7a47 	vmov.f32	s15, s14
 800fb78:	429d      	cmp	r5, r3
 800fb7a:	ed61 7a01 	vstmdb	r1!, {s15}
 800fb7e:	d9f0      	bls.n	800fb62 <forward_relu+0x9e>
 800fb80:	bc70      	pop	{r4, r5, r6}
 800fb82:	4770      	bx	lr
 800fb84:	685b      	ldr	r3, [r3, #4]
 800fb86:	deff      	udf	#255	; 0xff
 800fb88:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fb8c:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800fb90:	4411      	add	r1, r2
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800fb9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800fb9e:	d11f      	bne.n	800fbe0 <forward_relu+0x11c>
 800fba0:	429d      	cmp	r5, r3
 800fba2:	d8ed      	bhi.n	800fb80 <forward_relu+0xbc>
 800fba4:	1b5d      	subs	r5, r3, r5
 800fba6:	1d1a      	adds	r2, r3, #4
 800fba8:	1d01      	adds	r1, r0, #4
 800fbaa:	2000      	movs	r0, #0
 800fbac:	f025 0503 	bic.w	r5, r5, #3
 800fbb0:	1b5b      	subs	r3, r3, r5
 800fbb2:	ed72 7a01 	vldmdb	r2!, {s15}
 800fbb6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbbe:	dc0a      	bgt.n	800fbd6 <forward_relu+0x112>
 800fbc0:	429a      	cmp	r2, r3
 800fbc2:	f841 0d04 	str.w	r0, [r1, #-4]!
 800fbc6:	d0db      	beq.n	800fb80 <forward_relu+0xbc>
 800fbc8:	ed72 7a01 	vldmdb	r2!, {s15}
 800fbcc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd4:	ddf4      	ble.n	800fbc0 <forward_relu+0xfc>
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	ed61 7a01 	vstmdb	r1!, {s15}
 800fbdc:	d1e9      	bne.n	800fbb2 <forward_relu+0xee>
 800fbde:	e7cf      	b.n	800fb80 <forward_relu+0xbc>
 800fbe0:	429d      	cmp	r5, r3
 800fbe2:	d8cd      	bhi.n	800fb80 <forward_relu+0xbc>
 800fbe4:	1b5d      	subs	r5, r3, r5
 800fbe6:	1d1a      	adds	r2, r3, #4
 800fbe8:	1d01      	adds	r1, r0, #4
 800fbea:	f025 0503 	bic.w	r5, r5, #3
 800fbee:	1b5b      	subs	r3, r3, r5
 800fbf0:	ed72 7a01 	vldmdb	r2!, {s15}
 800fbf4:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbfc:	db0e      	blt.n	800fc1c <forward_relu+0x158>
 800fbfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc02:	4293      	cmp	r3, r2
 800fc04:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fc08:	ed61 7a01 	vstmdb	r1!, {s15}
 800fc0c:	d0b8      	beq.n	800fb80 <forward_relu+0xbc>
 800fc0e:	ed72 7a01 	vldmdb	r2!, {s15}
 800fc12:	eef4 6ae7 	vcmpe.f32	s13, s15
 800fc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc1a:	daf0      	bge.n	800fbfe <forward_relu+0x13a>
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	ed61 7a01 	vstmdb	r1!, {s15}
 800fc22:	d1e5      	bne.n	800fbf0 <forward_relu+0x12c>
 800fc24:	e7ac      	b.n	800fb80 <forward_relu+0xbc>
 800fc26:	6999      	ldr	r1, [r3, #24]
 800fc28:	6893      	ldr	r3, [r2, #8]
 800fc2a:	6990      	ldr	r0, [r2, #24]
 800fc2c:	0a1b      	lsrs	r3, r3, #8
 800fc2e:	6889      	ldr	r1, [r1, #8]
 800fc30:	6884      	ldr	r4, [r0, #8]
 800fc32:	d06e      	beq.n	800fd12 <forward_relu+0x24e>
 800fc34:	68d5      	ldr	r5, [r2, #12]
 800fc36:	2201      	movs	r2, #1
 800fc38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fc3c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800fc40:	429d      	cmp	r5, r3
 800fc42:	fb00 f202 	mul.w	r2, r0, r2
 800fc46:	d1f9      	bne.n	800fc3c <forward_relu+0x178>
 800fc48:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fc4c:	4413      	add	r3, r2
 800fc4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fc52:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fc56:	4294      	cmp	r4, r2
 800fc58:	d892      	bhi.n	800fb80 <forward_relu+0xbc>
 800fc5a:	3204      	adds	r2, #4
 800fc5c:	3104      	adds	r1, #4
 800fc5e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fd28 <forward_relu+0x264>
 800fc62:	4613      	mov	r3, r2
 800fc64:	ed72 7a01 	vldmdb	r2!, {s15}
 800fc68:	3b08      	subs	r3, #8
 800fc6a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fc6e:	ed61 7a01 	vstmdb	r1!, {s15}
 800fc72:	429c      	cmp	r4, r3
 800fc74:	d9f5      	bls.n	800fc62 <forward_relu+0x19e>
 800fc76:	bc70      	pop	{r4, r5, r6}
 800fc78:	4770      	bx	lr
 800fc7a:	6993      	ldr	r3, [r2, #24]
 800fc7c:	6880      	ldr	r0, [r0, #8]
 800fc7e:	689c      	ldr	r4, [r3, #8]
 800fc80:	6893      	ldr	r3, [r2, #8]
 800fc82:	0a1b      	lsrs	r3, r3, #8
 800fc84:	d047      	beq.n	800fd16 <forward_relu+0x252>
 800fc86:	68d5      	ldr	r5, [r2, #12]
 800fc88:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fc8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fc90:	42ab      	cmp	r3, r5
 800fc92:	fb02 f101 	mul.w	r1, r2, r1
 800fc96:	d1f9      	bne.n	800fc8c <forward_relu+0x1c8>
 800fc98:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800fc9c:	68b3      	ldr	r3, [r6, #8]
 800fc9e:	440a      	add	r2, r1
 800fca0:	ed93 7a00 	vldr	s14, [r3]
 800fca4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fca8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800fcac:	429c      	cmp	r4, r3
 800fcae:	f63f af67 	bhi.w	800fb80 <forward_relu+0xbc>
 800fcb2:	1d02      	adds	r2, r0, #4
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	2000      	movs	r0, #0
 800fcb8:	ed53 7a01 	vldr	s15, [r3, #-4]
 800fcbc:	1f19      	subs	r1, r3, #4
 800fcbe:	3b08      	subs	r3, #8
 800fcc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc8:	d406      	bmi.n	800fcd8 <forward_relu+0x214>
 800fcca:	429c      	cmp	r4, r3
 800fccc:	f842 0d04 	str.w	r0, [r2, #-4]!
 800fcd0:	f63f af56 	bhi.w	800fb80 <forward_relu+0xbc>
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	e7ef      	b.n	800fcb8 <forward_relu+0x1f4>
 800fcd8:	429c      	cmp	r4, r3
 800fcda:	ed62 7a01 	vstmdb	r2!, {s15}
 800fcde:	f63f af4f 	bhi.w	800fb80 <forward_relu+0xbc>
 800fce2:	460b      	mov	r3, r1
 800fce4:	e7e8      	b.n	800fcb8 <forward_relu+0x1f4>
 800fce6:	68b3      	ldr	r3, [r6, #8]
 800fce8:	ed93 7a02 	vldr	s14, [r3, #8]
 800fcec:	edd3 6a00 	vldr	s13, [r3]
 800fcf0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fcf4:	ed93 6a01 	vldr	s12, [r3, #4]
 800fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfc:	d401      	bmi.n	800fd02 <forward_relu+0x23e>
 800fcfe:	462a      	mov	r2, r5
 800fd00:	e71e      	b.n	800fb40 <forward_relu+0x7c>
 800fd02:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800fd06:	462b      	mov	r3, r5
 800fd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0c:	f47f af6a 	bne.w	800fbe4 <forward_relu+0x120>
 800fd10:	e748      	b.n	800fba4 <forward_relu+0xe0>
 800fd12:	4622      	mov	r2, r4
 800fd14:	e7a1      	b.n	800fc5a <forward_relu+0x196>
 800fd16:	68b2      	ldr	r2, [r6, #8]
 800fd18:	4623      	mov	r3, r4
 800fd1a:	ed92 7a00 	vldr	s14, [r2]
 800fd1e:	e7c8      	b.n	800fcb2 <forward_relu+0x1ee>
 800fd20:	2300      	movs	r3, #0
 800fd22:	685b      	ldr	r3, [r3, #4]
 800fd24:	deff      	udf	#255	; 0xff
 800fd26:	bf00      	nop
 800fd28:	00000000 	.word	0x00000000

0800fd2c <forward_sm>:
 800fd2c:	6982      	ldr	r2, [r0, #24]
 800fd2e:	8813      	ldrh	r3, [r2, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d078      	beq.n	800fe26 <forward_sm+0xfa>
 800fd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd38:	ed2d 8b04 	vpush	{d8-d9}
 800fd3c:	6852      	ldr	r2, [r2, #4]
 800fd3e:	b085      	sub	sp, #20
 800fd40:	6854      	ldr	r4, [r2, #4]
 800fd42:	b104      	cbz	r4, 800fd46 <forward_sm+0x1a>
 800fd44:	6824      	ldr	r4, [r4, #0]
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d072      	beq.n	800fe30 <forward_sm+0x104>
 800fd4a:	6913      	ldr	r3, [r2, #16]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d072      	beq.n	800fe36 <forward_sm+0x10a>
 800fd50:	681e      	ldr	r6, [r3, #0]
 800fd52:	68a3      	ldr	r3, [r4, #8]
 800fd54:	68e0      	ldr	r0, [r4, #12]
 800fd56:	68f2      	ldr	r2, [r6, #12]
 800fd58:	0a1b      	lsrs	r3, r3, #8
 800fd5a:	6845      	ldr	r5, [r0, #4]
 800fd5c:	6857      	ldr	r7, [r2, #4]
 800fd5e:	d064      	beq.n	800fe2a <forward_sm+0xfe>
 800fd60:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800fd64:	2201      	movs	r2, #1
 800fd66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd6a:	4298      	cmp	r0, r3
 800fd6c:	fb01 f202 	mul.w	r2, r1, r2
 800fd70:	d1f9      	bne.n	800fd66 <forward_sm+0x3a>
 800fd72:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800fd76:	69a2      	ldr	r2, [r4, #24]
 800fd78:	69b3      	ldr	r3, [r6, #24]
 800fd7a:	6892      	ldr	r2, [r2, #8]
 800fd7c:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800fd80:	eb02 0309 	add.w	r3, r2, r9
 800fd84:	429a      	cmp	r2, r3
 800fd86:	9301      	str	r3, [sp, #4]
 800fd88:	d248      	bcs.n	800fe1c <forward_sm+0xf0>
 800fd8a:	00bb      	lsls	r3, r7, #2
 800fd8c:	2d01      	cmp	r5, #1
 800fd8e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800fd92:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800fd96:	9303      	str	r3, [sp, #12]
 800fd98:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800fd9c:	463e      	mov	r6, r7
 800fd9e:	ed92 8a00 	vldr	s16, [r2]
 800fda2:	9302      	str	r3, [sp, #8]
 800fda4:	d937      	bls.n	800fe16 <forward_sm+0xea>
 800fda6:	1d13      	adds	r3, r2, #4
 800fda8:	ecf3 7a01 	vldmia	r3!, {s15}
 800fdac:	429e      	cmp	r6, r3
 800fdae:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800fdb2:	d1f9      	bne.n	800fda8 <forward_sm+0x7c>
 800fdb4:	4692      	mov	sl, r2
 800fdb6:	46c3      	mov	fp, r8
 800fdb8:	46c1      	mov	r9, r8
 800fdba:	eddf 8a20 	vldr	s17, [pc, #128]	; 800fe3c <forward_sm+0x110>
 800fdbe:	2400      	movs	r4, #0
 800fdc0:	ecba 0a01 	vldmia	sl!, {s0}
 800fdc4:	3401      	adds	r4, #1
 800fdc6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800fdca:	f002 f939 	bl	8012040 <expf>
 800fdce:	42a5      	cmp	r5, r4
 800fdd0:	ee78 8a80 	vadd.f32	s17, s17, s0
 800fdd4:	eca9 0a01 	vstmia	r9!, {s0}
 800fdd8:	d8f2      	bhi.n	800fdc0 <forward_sm+0x94>
 800fdda:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fde2:	d00b      	beq.n	800fdfc <forward_sm+0xd0>
 800fde4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800fde8:	2300      	movs	r3, #0
 800fdea:	eddb 7a00 	vldr	s15, [fp]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	429d      	cmp	r5, r3
 800fdf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf6:	eceb 7a01 	vstmia	fp!, {s15}
 800fdfa:	d8f6      	bhi.n	800fdea <forward_sm+0xbe>
 800fdfc:	9b03      	ldr	r3, [sp, #12]
 800fdfe:	463a      	mov	r2, r7
 800fe00:	9901      	ldr	r1, [sp, #4]
 800fe02:	4498      	add	r8, r3
 800fe04:	9b02      	ldr	r3, [sp, #8]
 800fe06:	42b9      	cmp	r1, r7
 800fe08:	441e      	add	r6, r3
 800fe0a:	d907      	bls.n	800fe1c <forward_sm+0xf0>
 800fe0c:	2d01      	cmp	r5, #1
 800fe0e:	441f      	add	r7, r3
 800fe10:	ed92 8a00 	vldr	s16, [r2]
 800fe14:	d8c7      	bhi.n	800fda6 <forward_sm+0x7a>
 800fe16:	2d00      	cmp	r5, #0
 800fe18:	d0f0      	beq.n	800fdfc <forward_sm+0xd0>
 800fe1a:	e7cb      	b.n	800fdb4 <forward_sm+0x88>
 800fe1c:	b005      	add	sp, #20
 800fe1e:	ecbd 8b04 	vpop	{d8-d9}
 800fe22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	deff      	udf	#255	; 0xff
 800fe2a:	f04f 0904 	mov.w	r9, #4
 800fe2e:	e7a2      	b.n	800fd76 <forward_sm+0x4a>
 800fe30:	2300      	movs	r3, #0
 800fe32:	685b      	ldr	r3, [r3, #4]
 800fe34:	deff      	udf	#255	; 0xff
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	deff      	udf	#255	; 0xff
 800fe3a:	bf00      	nop
 800fe3c:	00000000 	.word	0x00000000

0800fe40 <forward_bn>:
 800fe40:	6982      	ldr	r2, [r0, #24]
 800fe42:	8813      	ldrh	r3, [r2, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d055      	beq.n	800fef4 <forward_bn+0xb4>
 800fe48:	6852      	ldr	r2, [r2, #4]
 800fe4a:	6850      	ldr	r0, [r2, #4]
 800fe4c:	b100      	cbz	r0, 800fe50 <forward_bn+0x10>
 800fe4e:	6800      	ldr	r0, [r0, #0]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	f000 809c 	beq.w	800ff8e <forward_bn+0x14e>
 800fe56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe5a:	6915      	ldr	r5, [r2, #16]
 800fe5c:	b105      	cbz	r5, 800fe60 <forward_bn+0x20>
 800fe5e:	682d      	ldr	r5, [r5, #0]
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d049      	beq.n	800fef8 <forward_bn+0xb8>
 800fe64:	69d1      	ldr	r1, [r2, #28]
 800fe66:	2900      	cmp	r1, #0
 800fe68:	d049      	beq.n	800fefe <forward_bn+0xbe>
 800fe6a:	8b13      	ldrh	r3, [r2, #24]
 800fe6c:	f8d1 c000 	ldr.w	ip, [r1]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d945      	bls.n	800ff00 <forward_bn+0xc0>
 800fe74:	6883      	ldr	r3, [r0, #8]
 800fe76:	684f      	ldr	r7, [r1, #4]
 800fe78:	0a1b      	lsrs	r3, r3, #8
 800fe7a:	d06c      	beq.n	800ff56 <forward_bn+0x116>
 800fe7c:	68c1      	ldr	r1, [r0, #12]
 800fe7e:	2401      	movs	r4, #1
 800fe80:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fe84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fe88:	428b      	cmp	r3, r1
 800fe8a:	fb02 f404 	mul.w	r4, r2, r4
 800fe8e:	d1f9      	bne.n	800fe84 <forward_bn+0x44>
 800fe90:	69aa      	ldr	r2, [r5, #24]
 800fe92:	6981      	ldr	r1, [r0, #24]
 800fe94:	685d      	ldr	r5, [r3, #4]
 800fe96:	6888      	ldr	r0, [r1, #8]
 800fe98:	6896      	ldr	r6, [r2, #8]
 800fe9a:	b3b7      	cbz	r7, 800ff0a <forward_bn+0xca>
 800fe9c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800fea6:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800feaa:	b30c      	cbz	r4, 800fef0 <forward_bn+0xb0>
 800feac:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800feb0:	f04f 0e00 	mov.w	lr, #0
 800feb4:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800feb8:	00bf      	lsls	r7, r7, #2
 800feba:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800febe:	4672      	mov	r2, lr
 800fec0:	44ae      	add	lr, r5
 800fec2:	4596      	cmp	lr, r2
 800fec4:	d911      	bls.n	800feea <forward_bn+0xaa>
 800fec6:	eb07 030c 	add.w	r3, r7, ip
 800feca:	4648      	mov	r0, r9
 800fecc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800fed0:	4641      	mov	r1, r8
 800fed2:	ecf3 6a01 	vldmia	r3!, {s13}
 800fed6:	ecb0 7a01 	vldmia	r0!, {s14}
 800feda:	ecf1 7a01 	vldmia	r1!, {s15}
 800fede:	4563      	cmp	r3, ip
 800fee0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fee4:	ece2 7a01 	vstmia	r2!, {s15}
 800fee8:	d1f3      	bne.n	800fed2 <forward_bn+0x92>
 800feea:	4574      	cmp	r4, lr
 800feec:	44d4      	add	ip, sl
 800feee:	d8e6      	bhi.n	800febe <forward_bn+0x7e>
 800fef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	deff      	udf	#255	; 0xff
 800fef8:	2300      	movs	r3, #0
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	deff      	udf	#255	; 0xff
 800fefe:	468c      	mov	ip, r1
 800ff00:	6883      	ldr	r3, [r0, #8]
 800ff02:	0a1b      	lsrs	r3, r3, #8
 800ff04:	d037      	beq.n	800ff76 <forward_bn+0x136>
 800ff06:	2700      	movs	r7, #0
 800ff08:	e7b8      	b.n	800fe7c <forward_bn+0x3c>
 800ff0a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800ff0e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ff12:	2c00      	cmp	r4, #0
 800ff14:	d0ec      	beq.n	800fef0 <forward_bn+0xb0>
 800ff16:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800ff1a:	46b6      	mov	lr, r6
 800ff1c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800ff20:	f04f 0c00 	mov.w	ip, #0
 800ff24:	00bf      	lsls	r7, r7, #2
 800ff26:	00ae      	lsls	r6, r5, #2
 800ff28:	4663      	mov	r3, ip
 800ff2a:	44ac      	add	ip, r5
 800ff2c:	4563      	cmp	r3, ip
 800ff2e:	d20c      	bcs.n	800ff4a <forward_bn+0x10a>
 800ff30:	19c3      	adds	r3, r0, r7
 800ff32:	4641      	mov	r1, r8
 800ff34:	4672      	mov	r2, lr
 800ff36:	ecf3 7a01 	vldmia	r3!, {s15}
 800ff3a:	ecb1 7a01 	vldmia	r1!, {s14}
 800ff3e:	4298      	cmp	r0, r3
 800ff40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff44:	ece2 7a01 	vstmia	r2!, {s15}
 800ff48:	d1f5      	bne.n	800ff36 <forward_bn+0xf6>
 800ff4a:	4564      	cmp	r4, ip
 800ff4c:	44b6      	add	lr, r6
 800ff4e:	4430      	add	r0, r6
 800ff50:	d8ea      	bhi.n	800ff28 <forward_bn+0xe8>
 800ff52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff56:	68c1      	ldr	r1, [r0, #12]
 800ff58:	69ab      	ldr	r3, [r5, #24]
 800ff5a:	6982      	ldr	r2, [r0, #24]
 800ff5c:	684d      	ldr	r5, [r1, #4]
 800ff5e:	6890      	ldr	r0, [r2, #8]
 800ff60:	689e      	ldr	r6, [r3, #8]
 800ff62:	b177      	cbz	r7, 800ff82 <forward_bn+0x142>
 800ff64:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800ff68:	2401      	movs	r4, #1
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800ff70:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ff74:	e79a      	b.n	800feac <forward_bn+0x6c>
 800ff76:	68c1      	ldr	r1, [r0, #12]
 800ff78:	69ab      	ldr	r3, [r5, #24]
 800ff7a:	6982      	ldr	r2, [r0, #24]
 800ff7c:	684d      	ldr	r5, [r1, #4]
 800ff7e:	6890      	ldr	r0, [r2, #8]
 800ff80:	689e      	ldr	r6, [r3, #8]
 800ff82:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800ff86:	2401      	movs	r4, #1
 800ff88:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800ff8c:	e7c3      	b.n	800ff16 <forward_bn+0xd6>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	deff      	udf	#255	; 0xff

0800ff94 <ai_check_custom_types>:
 800ff94:	b082      	sub	sp, #8
 800ff96:	4b12      	ldr	r3, [pc, #72]	; (800ffe0 <ai_check_custom_types+0x4c>)
 800ff98:	9301      	str	r3, [sp, #4]
 800ff9a:	b118      	cbz	r0, 800ffa4 <ai_check_custom_types+0x10>
 800ff9c:	7803      	ldrb	r3, [r0, #0]
 800ff9e:	2b03      	cmp	r3, #3
 800ffa0:	d002      	beq.n	800ffa8 <ai_check_custom_types+0x14>
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	b002      	add	sp, #8
 800ffa6:	4770      	bx	lr
 800ffa8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d004      	beq.n	800ffba <ai_check_custom_types+0x26>
 800ffb0:	2001      	movs	r0, #1
 800ffb2:	f080 0001 	eor.w	r0, r0, #1
 800ffb6:	b002      	add	sp, #8
 800ffb8:	4770      	bx	lr
 800ffba:	7842      	ldrb	r2, [r0, #1]
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d1f4      	bne.n	800ffb0 <ai_check_custom_types+0x1c>
 800ffc6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ffca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d1ee      	bne.n	800ffb0 <ai_check_custom_types+0x1c>
 800ffd2:	7842      	ldrb	r2, [r0, #1]
 800ffd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d1e9      	bne.n	800ffb0 <ai_check_custom_types+0x1c>
 800ffdc:	2000      	movs	r0, #0
 800ffde:	e7e8      	b.n	800ffb2 <ai_check_custom_types+0x1e>
 800ffe0:	84048403 	.word	0x84048403

0800ffe4 <ai_layers_init_all>:
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ffe8:	b13b      	cbz	r3, 800fffa <ai_layers_init_all+0x16>
 800ffea:	691a      	ldr	r2, [r3, #16]
 800ffec:	3101      	adds	r1, #1
 800ffee:	60d8      	str	r0, [r3, #12]
 800fff0:	429a      	cmp	r2, r3
 800fff2:	4613      	mov	r3, r2
 800fff4:	d001      	beq.n	800fffa <ai_layers_init_all+0x16>
 800fff6:	2a00      	cmp	r2, #0
 800fff8:	d1f6      	bne.n	800ffe8 <ai_layers_init_all+0x4>
 800fffa:	4608      	mov	r0, r1
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop

08010000 <ai_layers_post_init_all>:
 8010000:	b538      	push	{r3, r4, r5, lr}
 8010002:	2500      	movs	r5, #0
 8010004:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8010006:	b16c      	cbz	r4, 8010024 <ai_layers_post_init_all+0x24>
 8010008:	6863      	ldr	r3, [r4, #4]
 801000a:	07db      	lsls	r3, r3, #31
 801000c:	d504      	bpl.n	8010018 <ai_layers_post_init_all+0x18>
 801000e:	6a23      	ldr	r3, [r4, #32]
 8010010:	4620      	mov	r0, r4
 8010012:	b10b      	cbz	r3, 8010018 <ai_layers_post_init_all+0x18>
 8010014:	3501      	adds	r5, #1
 8010016:	4798      	blx	r3
 8010018:	6923      	ldr	r3, [r4, #16]
 801001a:	42a3      	cmp	r3, r4
 801001c:	461c      	mov	r4, r3
 801001e:	d001      	beq.n	8010024 <ai_layers_post_init_all+0x24>
 8010020:	2b00      	cmp	r3, #0
 8010022:	d1f0      	bne.n	8010006 <ai_layers_post_init_all+0x6>
 8010024:	4628      	mov	r0, r5
 8010026:	bd38      	pop	{r3, r4, r5, pc}

08010028 <ai_layers_forward_all>:
 8010028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8010030:	4604      	mov	r4, r0
 8010032:	f1b8 0f00 	cmp.w	r8, #0
 8010036:	d02a      	beq.n	801008e <ai_layers_forward_all+0x66>
 8010038:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801003a:	6381      	str	r1, [r0, #56]	; 0x38
 801003c:	b319      	cbz	r1, 8010086 <ai_layers_forward_all+0x5e>
 801003e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8010040:	2001      	movs	r0, #1
 8010042:	47c0      	blx	r8
 8010044:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010046:	b1f6      	cbz	r6, 8010086 <ai_layers_forward_all+0x5e>
 8010048:	2700      	movs	r7, #0
 801004a:	4631      	mov	r1, r6
 801004c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801004e:	2002      	movs	r0, #2
 8010050:	47c0      	blx	r8
 8010052:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010054:	4628      	mov	r0, r5
 8010056:	696b      	ldr	r3, [r5, #20]
 8010058:	4798      	blx	r3
 801005a:	692e      	ldr	r6, [r5, #16]
 801005c:	2003      	movs	r0, #3
 801005e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010060:	42b5      	cmp	r5, r6
 8010062:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010064:	d007      	beq.n	8010076 <ai_layers_forward_all+0x4e>
 8010066:	47c0      	blx	r8
 8010068:	3701      	adds	r7, #1
 801006a:	63a6      	str	r6, [r4, #56]	; 0x38
 801006c:	2e00      	cmp	r6, #0
 801006e:	d1ec      	bne.n	801004a <ai_layers_forward_all+0x22>
 8010070:	4638      	mov	r0, r7
 8010072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010076:	2003      	movs	r0, #3
 8010078:	3701      	adds	r7, #1
 801007a:	47c0      	blx	r8
 801007c:	2300      	movs	r3, #0
 801007e:	4638      	mov	r0, r7
 8010080:	63a3      	str	r3, [r4, #56]	; 0x38
 8010082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010086:	2700      	movs	r7, #0
 8010088:	4638      	mov	r0, r7
 801008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801008e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8010090:	6385      	str	r5, [r0, #56]	; 0x38
 8010092:	2d00      	cmp	r5, #0
 8010094:	d0f7      	beq.n	8010086 <ai_layers_forward_all+0x5e>
 8010096:	4647      	mov	r7, r8
 8010098:	696b      	ldr	r3, [r5, #20]
 801009a:	4628      	mov	r0, r5
 801009c:	4798      	blx	r3
 801009e:	462b      	mov	r3, r5
 80100a0:	692d      	ldr	r5, [r5, #16]
 80100a2:	429d      	cmp	r5, r3
 80100a4:	d004      	beq.n	80100b0 <ai_layers_forward_all+0x88>
 80100a6:	3701      	adds	r7, #1
 80100a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80100aa:	2d00      	cmp	r5, #0
 80100ac:	d1f4      	bne.n	8010098 <ai_layers_forward_all+0x70>
 80100ae:	e7df      	b.n	8010070 <ai_layers_forward_all+0x48>
 80100b0:	2300      	movs	r3, #0
 80100b2:	3701      	adds	r7, #1
 80100b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80100b6:	e7db      	b.n	8010070 <ai_layers_forward_all+0x48>

080100b8 <lite_dense_if32of32wf32>:
 80100b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100bc:	ed2d 8b0c 	vpush	{d8-d13}
 80100c0:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 80100c4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80100c8:	4287      	cmp	r7, r0
 80100ca:	f240 8105 	bls.w	80102d8 <lite_dense_if32of32wf32+0x220>
 80100ce:	f1a6 0810 	sub.w	r8, r6, #16
 80100d2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80100d6:	4605      	mov	r5, r0
 80100d8:	f006 0b0f 	and.w	fp, r6, #15
 80100dc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80100e0:	f108 0801 	add.w	r8, r8, #1
 80100e4:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80100e8:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80100ec:	2e0f      	cmp	r6, #15
 80100ee:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8010304 <lite_dense_if32of32wf32+0x24c>
 80100f2:	f240 8102 	bls.w	80102fa <lite_dense_if32of32wf32+0x242>
 80100f6:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80100fa:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80100fe:	46b6      	mov	lr, r6
 8010100:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8010104:	f1ae 0e10 	sub.w	lr, lr, #16
 8010108:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 801010c:	3440      	adds	r4, #64	; 0x40
 801010e:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8010112:	f1be 0f0f 	cmp.w	lr, #15
 8010116:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801011a:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 801011e:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8010122:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8010126:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 801012a:	eee4 7a85 	vfma.f32	s15, s9, s10
 801012e:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8010132:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8010136:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 801013a:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 801013e:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8010142:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8010146:	eee5 7a86 	vfma.f32	s15, s11, s12
 801014a:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 801014e:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8010152:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8010156:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 801015a:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 801015e:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8010162:	eeed 7a26 	vfma.f32	s15, s26, s13
 8010166:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 801016a:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 801016e:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8010172:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8010176:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 801017a:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 801017e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010182:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8010186:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 801018a:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 801018e:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8010192:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8010196:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 801019a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801019e:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80101a2:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80101a6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80101aa:	eee9 7a89 	vfma.f32	s15, s19, s18
 80101ae:	eee8 7a88 	vfma.f32	s15, s17, s16
 80101b2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80101b6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80101ba:	eee2 7a22 	vfma.f32	s15, s4, s5
 80101be:	eee3 7a23 	vfma.f32	s15, s6, s7
 80101c2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80101c6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80101ca:	eee6 7a26 	vfma.f32	s15, s12, s13
 80101ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80101d2:	d895      	bhi.n	8010100 <lite_dense_if32of32wf32+0x48>
 80101d4:	eb02 0e0a 	add.w	lr, r2, sl
 80101d8:	465c      	mov	r4, fp
 80101da:	46c4      	mov	ip, r8
 80101dc:	2c00      	cmp	r4, #0
 80101de:	d075      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 80101e0:	eddc 6a00 	vldr	s13, [ip]
 80101e4:	2c01      	cmp	r4, #1
 80101e6:	edde 7a00 	vldr	s15, [lr]
 80101ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101ee:	d06d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 80101f0:	eddc 6a01 	vldr	s13, [ip, #4]
 80101f4:	2c02      	cmp	r4, #2
 80101f6:	edde 7a01 	vldr	s15, [lr, #4]
 80101fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80101fe:	d065      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010200:	eddc 6a02 	vldr	s13, [ip, #8]
 8010204:	2c03      	cmp	r4, #3
 8010206:	edde 7a02 	vldr	s15, [lr, #8]
 801020a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801020e:	d05d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010210:	eddc 6a03 	vldr	s13, [ip, #12]
 8010214:	2c04      	cmp	r4, #4
 8010216:	edde 7a03 	vldr	s15, [lr, #12]
 801021a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801021e:	d055      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010220:	eddc 6a04 	vldr	s13, [ip, #16]
 8010224:	2c05      	cmp	r4, #5
 8010226:	edde 7a04 	vldr	s15, [lr, #16]
 801022a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801022e:	d04d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010230:	eddc 6a05 	vldr	s13, [ip, #20]
 8010234:	2c06      	cmp	r4, #6
 8010236:	edde 7a05 	vldr	s15, [lr, #20]
 801023a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801023e:	d045      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010240:	eddc 6a06 	vldr	s13, [ip, #24]
 8010244:	2c07      	cmp	r4, #7
 8010246:	edde 7a06 	vldr	s15, [lr, #24]
 801024a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801024e:	d03d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010250:	eddc 6a07 	vldr	s13, [ip, #28]
 8010254:	2c08      	cmp	r4, #8
 8010256:	edde 7a07 	vldr	s15, [lr, #28]
 801025a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801025e:	d035      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010260:	eddc 6a08 	vldr	s13, [ip, #32]
 8010264:	2c09      	cmp	r4, #9
 8010266:	edde 7a08 	vldr	s15, [lr, #32]
 801026a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801026e:	d02d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010270:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8010274:	2c0a      	cmp	r4, #10
 8010276:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 801027a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801027e:	d025      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010280:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8010284:	2c0b      	cmp	r4, #11
 8010286:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 801028a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801028e:	d01d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 8010290:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8010294:	2c0c      	cmp	r4, #12
 8010296:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 801029a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801029e:	d015      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 80102a0:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80102a4:	3c0d      	subs	r4, #13
 80102a6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80102aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102ae:	d00d      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 80102b0:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80102b4:	2c01      	cmp	r4, #1
 80102b6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80102ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102be:	d005      	beq.n	80102cc <lite_dense_if32of32wf32+0x214>
 80102c0:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80102c4:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80102c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80102cc:	eca5 7a01 	vstmia	r5!, {s14}
 80102d0:	42af      	cmp	r7, r5
 80102d2:	444a      	add	r2, r9
 80102d4:	f63f af0a 	bhi.w	80100ec <lite_dense_if32of32wf32+0x34>
 80102d8:	b15b      	cbz	r3, 80102f2 <lite_dense_if32of32wf32+0x23a>
 80102da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80102dc:	b14a      	cbz	r2, 80102f2 <lite_dense_if32of32wf32+0x23a>
 80102de:	edd0 7a00 	vldr	s15, [r0]
 80102e2:	ecb3 7a01 	vldmia	r3!, {s14}
 80102e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102ea:	ece0 7a01 	vstmia	r0!, {s15}
 80102ee:	4287      	cmp	r7, r0
 80102f0:	d1f5      	bne.n	80102de <lite_dense_if32of32wf32+0x226>
 80102f2:	ecbd 8b0c 	vpop	{d8-d13}
 80102f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102fa:	4634      	mov	r4, r6
 80102fc:	4696      	mov	lr, r2
 80102fe:	468c      	mov	ip, r1
 8010300:	e76c      	b.n	80101dc <lite_dense_if32of32wf32+0x124>
 8010302:	bf00      	nop
 8010304:	00000000 	.word	0x00000000

08010308 <ai_version_get>:
 8010308:	0212      	lsls	r2, r2, #8
 801030a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801030e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8010312:	4770      	bx	lr

08010314 <get_tensor_byte_size>:
 8010314:	b430      	push	{r4, r5}
 8010316:	6985      	ldr	r5, [r0, #24]
 8010318:	68c4      	ldr	r4, [r0, #12]
 801031a:	6941      	ldr	r1, [r0, #20]
 801031c:	4b06      	ldr	r3, [pc, #24]	; (8010338 <get_tensor_byte_size+0x24>)
 801031e:	6828      	ldr	r0, [r5, #0]
 8010320:	4a06      	ldr	r2, [pc, #24]	; (801033c <get_tensor_byte_size+0x28>)
 8010322:	4003      	ands	r3, r0
 8010324:	68c9      	ldr	r1, [r1, #12]
 8010326:	68e0      	ldr	r0, [r4, #12]
 8010328:	4293      	cmp	r3, r2
 801032a:	fb01 f000 	mul.w	r0, r1, r0
 801032e:	d101      	bne.n	8010334 <get_tensor_byte_size+0x20>
 8010330:	3007      	adds	r0, #7
 8010332:	08c0      	lsrs	r0, r0, #3
 8010334:	bc30      	pop	{r4, r5}
 8010336:	4770      	bx	lr
 8010338:	017fffff 	.word	0x017fffff
 801033c:	000400c0 	.word	0x000400c0

08010340 <ai_array_to_buffer_fmt>:
 8010340:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8010344:	2b02      	cmp	r3, #2
 8010346:	d050      	beq.n	80103ea <ai_array_to_buffer_fmt+0xaa>
 8010348:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 801034c:	4b29      	ldr	r3, [pc, #164]	; (80103f4 <ai_array_to_buffer_fmt+0xb4>)
 801034e:	429a      	cmp	r2, r3
 8010350:	d00b      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 8010352:	dc1c      	bgt.n	801038e <ai_array_to_buffer_fmt+0x4e>
 8010354:	4b28      	ldr	r3, [pc, #160]	; (80103f8 <ai_array_to_buffer_fmt+0xb8>)
 8010356:	429a      	cmp	r2, r3
 8010358:	d007      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 801035a:	dd0b      	ble.n	8010374 <ai_array_to_buffer_fmt+0x34>
 801035c:	4b27      	ldr	r3, [pc, #156]	; (80103fc <ai_array_to_buffer_fmt+0xbc>)
 801035e:	429a      	cmp	r2, r3
 8010360:	d003      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 8010362:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8010366:	429a      	cmp	r2, r3
 8010368:	d131      	bne.n	80103ce <ai_array_to_buffer_fmt+0x8e>
 801036a:	4613      	mov	r3, r2
 801036c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010370:	4318      	orrs	r0, r3
 8010372:	4770      	bx	lr
 8010374:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8010378:	429a      	cmp	r2, r3
 801037a:	d0f6      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 801037c:	dd2c      	ble.n	80103d8 <ai_array_to_buffer_fmt+0x98>
 801037e:	4b20      	ldr	r3, [pc, #128]	; (8010400 <ai_array_to_buffer_fmt+0xc0>)
 8010380:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8010384:	429a      	cmp	r2, r3
 8010386:	bf18      	it	ne
 8010388:	2340      	movne	r3, #64	; 0x40
 801038a:	4318      	orrs	r0, r3
 801038c:	4770      	bx	lr
 801038e:	4b1d      	ldr	r3, [pc, #116]	; (8010404 <ai_array_to_buffer_fmt+0xc4>)
 8010390:	429a      	cmp	r2, r3
 8010392:	d0ea      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 8010394:	dd0e      	ble.n	80103b4 <ai_array_to_buffer_fmt+0x74>
 8010396:	4b1c      	ldr	r3, [pc, #112]	; (8010408 <ai_array_to_buffer_fmt+0xc8>)
 8010398:	429a      	cmp	r2, r3
 801039a:	d0e6      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 801039c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d0e2      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 80103a4:	4b19      	ldr	r3, [pc, #100]	; (801040c <ai_array_to_buffer_fmt+0xcc>)
 80103a6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80103aa:	429a      	cmp	r2, r3
 80103ac:	bf18      	it	ne
 80103ae:	2340      	movne	r3, #64	; 0x40
 80103b0:	4318      	orrs	r0, r3
 80103b2:	4770      	bx	lr
 80103b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d0d6      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 80103bc:	3307      	adds	r3, #7
 80103be:	429a      	cmp	r2, r3
 80103c0:	d0d3      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 80103c2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80103c6:	429a      	cmp	r2, r3
 80103c8:	bf18      	it	ne
 80103ca:	2340      	movne	r3, #64	; 0x40
 80103cc:	e7ce      	b.n	801036c <ai_array_to_buffer_fmt+0x2c>
 80103ce:	4b10      	ldr	r3, [pc, #64]	; (8010410 <ai_array_to_buffer_fmt+0xd0>)
 80103d0:	429a      	cmp	r2, r3
 80103d2:	bf18      	it	ne
 80103d4:	2340      	movne	r3, #64	; 0x40
 80103d6:	e7c9      	b.n	801036c <ai_array_to_buffer_fmt+0x2c>
 80103d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80103dc:	429a      	cmp	r2, r3
 80103de:	d0c4      	beq.n	801036a <ai_array_to_buffer_fmt+0x2a>
 80103e0:	3380      	adds	r3, #128	; 0x80
 80103e2:	429a      	cmp	r2, r3
 80103e4:	bf18      	it	ne
 80103e6:	2340      	movne	r3, #64	; 0x40
 80103e8:	e7c0      	b.n	801036c <ai_array_to_buffer_fmt+0x2c>
 80103ea:	4b0a      	ldr	r3, [pc, #40]	; (8010414 <ai_array_to_buffer_fmt+0xd4>)
 80103ec:	4003      	ands	r3, r0
 80103ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80103f2:	e7bb      	b.n	801036c <ai_array_to_buffer_fmt+0x2c>
 80103f4:	00840040 	.word	0x00840040
 80103f8:	00040840 	.word	0x00040840
 80103fc:	00041040 	.word	0x00041040
 8010400:	00040447 	.word	0x00040447
 8010404:	00840840 	.word	0x00840840
 8010408:	00841040 	.word	0x00841040
 801040c:	0084084f 	.word	0x0084084f
 8010410:	0004084f 	.word	0x0004084f
 8010414:	00803fff 	.word	0x00803fff

08010418 <ai_array_get_byte_size>:
 8010418:	b319      	cbz	r1, 8010462 <ai_array_get_byte_size+0x4a>
 801041a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801041e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8010422:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8010426:	11c0      	asrs	r0, r0, #7
 8010428:	fb03 f101 	mul.w	r1, r3, r1
 801042c:	2a04      	cmp	r2, #4
 801042e:	f101 0107 	add.w	r1, r1, #7
 8010432:	f021 0107 	bic.w	r1, r1, #7
 8010436:	fa21 f10c 	lsr.w	r1, r1, ip
 801043a:	d00b      	beq.n	8010454 <ai_array_get_byte_size+0x3c>
 801043c:	2a08      	cmp	r2, #8
 801043e:	d002      	beq.n	8010446 <ai_array_get_byte_size+0x2e>
 8010440:	3107      	adds	r1, #7
 8010442:	08c8      	lsrs	r0, r1, #3
 8010444:	4770      	bx	lr
 8010446:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801044a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801044e:	3107      	adds	r1, #7
 8010450:	08c8      	lsrs	r0, r1, #3
 8010452:	4770      	bx	lr
 8010454:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010458:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 801045c:	3107      	adds	r1, #7
 801045e:	08c8      	lsrs	r0, r1, #3
 8010460:	4770      	bx	lr
 8010462:	4608      	mov	r0, r1
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop

08010468 <ai_array_get_data_byte_size>:
 8010468:	b161      	cbz	r1, 8010484 <ai_array_get_data_byte_size+0x1c>
 801046a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801046e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8010472:	fb03 f101 	mul.w	r1, r3, r1
 8010476:	1dc8      	adds	r0, r1, #7
 8010478:	f020 0007 	bic.w	r0, r0, #7
 801047c:	40d0      	lsrs	r0, r2
 801047e:	3007      	adds	r0, #7
 8010480:	08c0      	lsrs	r0, r0, #3
 8010482:	4770      	bx	lr
 8010484:	4608      	mov	r0, r1
 8010486:	4770      	bx	lr

08010488 <arm_rfft_fast_init_f32>:
 8010488:	084b      	lsrs	r3, r1, #1
 801048a:	2b80      	cmp	r3, #128	; 0x80
 801048c:	b430      	push	{r4, r5}
 801048e:	8201      	strh	r1, [r0, #16]
 8010490:	8003      	strh	r3, [r0, #0]
 8010492:	d070      	beq.n	8010576 <arm_rfft_fast_init_f32+0xee>
 8010494:	d916      	bls.n	80104c4 <arm_rfft_fast_init_f32+0x3c>
 8010496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801049a:	d05f      	beq.n	801055c <arm_rfft_fast_init_f32+0xd4>
 801049c:	d936      	bls.n	801050c <arm_rfft_fast_init_f32+0x84>
 801049e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80104a2:	d026      	beq.n	80104f2 <arm_rfft_fast_init_f32+0x6a>
 80104a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80104a8:	d112      	bne.n	80104d0 <arm_rfft_fast_init_f32+0x48>
 80104aa:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 80104ae:	4c38      	ldr	r4, [pc, #224]	; (8010590 <arm_rfft_fast_init_f32+0x108>)
 80104b0:	4938      	ldr	r1, [pc, #224]	; (8010594 <arm_rfft_fast_init_f32+0x10c>)
 80104b2:	2300      	movs	r3, #0
 80104b4:	4a38      	ldr	r2, [pc, #224]	; (8010598 <arm_rfft_fast_init_f32+0x110>)
 80104b6:	8185      	strh	r5, [r0, #12]
 80104b8:	6084      	str	r4, [r0, #8]
 80104ba:	6041      	str	r1, [r0, #4]
 80104bc:	6142      	str	r2, [r0, #20]
 80104be:	4618      	mov	r0, r3
 80104c0:	bc30      	pop	{r4, r5}
 80104c2:	4770      	bx	lr
 80104c4:	2b20      	cmp	r3, #32
 80104c6:	d031      	beq.n	801052c <arm_rfft_fast_init_f32+0xa4>
 80104c8:	2b40      	cmp	r3, #64	; 0x40
 80104ca:	d006      	beq.n	80104da <arm_rfft_fast_init_f32+0x52>
 80104cc:	2b10      	cmp	r3, #16
 80104ce:	d039      	beq.n	8010544 <arm_rfft_fast_init_f32+0xbc>
 80104d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104d4:	bc30      	pop	{r4, r5}
 80104d6:	4618      	mov	r0, r3
 80104d8:	4770      	bx	lr
 80104da:	2538      	movs	r5, #56	; 0x38
 80104dc:	4c2f      	ldr	r4, [pc, #188]	; (801059c <arm_rfft_fast_init_f32+0x114>)
 80104de:	4930      	ldr	r1, [pc, #192]	; (80105a0 <arm_rfft_fast_init_f32+0x118>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4a30      	ldr	r2, [pc, #192]	; (80105a4 <arm_rfft_fast_init_f32+0x11c>)
 80104e4:	8185      	strh	r5, [r0, #12]
 80104e6:	6084      	str	r4, [r0, #8]
 80104e8:	6041      	str	r1, [r0, #4]
 80104ea:	6142      	str	r2, [r0, #20]
 80104ec:	4618      	mov	r0, r3
 80104ee:	bc30      	pop	{r4, r5}
 80104f0:	4770      	bx	lr
 80104f2:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 80104f6:	4c2c      	ldr	r4, [pc, #176]	; (80105a8 <arm_rfft_fast_init_f32+0x120>)
 80104f8:	492c      	ldr	r1, [pc, #176]	; (80105ac <arm_rfft_fast_init_f32+0x124>)
 80104fa:	2300      	movs	r3, #0
 80104fc:	4a2c      	ldr	r2, [pc, #176]	; (80105b0 <arm_rfft_fast_init_f32+0x128>)
 80104fe:	8185      	strh	r5, [r0, #12]
 8010500:	6084      	str	r4, [r0, #8]
 8010502:	6041      	str	r1, [r0, #4]
 8010504:	6142      	str	r2, [r0, #20]
 8010506:	4618      	mov	r0, r3
 8010508:	bc30      	pop	{r4, r5}
 801050a:	4770      	bx	lr
 801050c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010510:	d1de      	bne.n	80104d0 <arm_rfft_fast_init_f32+0x48>
 8010512:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8010516:	4c27      	ldr	r4, [pc, #156]	; (80105b4 <arm_rfft_fast_init_f32+0x12c>)
 8010518:	4927      	ldr	r1, [pc, #156]	; (80105b8 <arm_rfft_fast_init_f32+0x130>)
 801051a:	2300      	movs	r3, #0
 801051c:	4a27      	ldr	r2, [pc, #156]	; (80105bc <arm_rfft_fast_init_f32+0x134>)
 801051e:	8185      	strh	r5, [r0, #12]
 8010520:	6084      	str	r4, [r0, #8]
 8010522:	6041      	str	r1, [r0, #4]
 8010524:	6142      	str	r2, [r0, #20]
 8010526:	4618      	mov	r0, r3
 8010528:	bc30      	pop	{r4, r5}
 801052a:	4770      	bx	lr
 801052c:	2530      	movs	r5, #48	; 0x30
 801052e:	4c24      	ldr	r4, [pc, #144]	; (80105c0 <arm_rfft_fast_init_f32+0x138>)
 8010530:	4924      	ldr	r1, [pc, #144]	; (80105c4 <arm_rfft_fast_init_f32+0x13c>)
 8010532:	2300      	movs	r3, #0
 8010534:	4a24      	ldr	r2, [pc, #144]	; (80105c8 <arm_rfft_fast_init_f32+0x140>)
 8010536:	8185      	strh	r5, [r0, #12]
 8010538:	6084      	str	r4, [r0, #8]
 801053a:	6041      	str	r1, [r0, #4]
 801053c:	6142      	str	r2, [r0, #20]
 801053e:	4618      	mov	r0, r3
 8010540:	bc30      	pop	{r4, r5}
 8010542:	4770      	bx	lr
 8010544:	2514      	movs	r5, #20
 8010546:	4c21      	ldr	r4, [pc, #132]	; (80105cc <arm_rfft_fast_init_f32+0x144>)
 8010548:	4921      	ldr	r1, [pc, #132]	; (80105d0 <arm_rfft_fast_init_f32+0x148>)
 801054a:	2300      	movs	r3, #0
 801054c:	4a21      	ldr	r2, [pc, #132]	; (80105d4 <arm_rfft_fast_init_f32+0x14c>)
 801054e:	8185      	strh	r5, [r0, #12]
 8010550:	6084      	str	r4, [r0, #8]
 8010552:	6041      	str	r1, [r0, #4]
 8010554:	6142      	str	r2, [r0, #20]
 8010556:	4618      	mov	r0, r3
 8010558:	bc30      	pop	{r4, r5}
 801055a:	4770      	bx	lr
 801055c:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 8010560:	4c1d      	ldr	r4, [pc, #116]	; (80105d8 <arm_rfft_fast_init_f32+0x150>)
 8010562:	491e      	ldr	r1, [pc, #120]	; (80105dc <arm_rfft_fast_init_f32+0x154>)
 8010564:	2300      	movs	r3, #0
 8010566:	4a1e      	ldr	r2, [pc, #120]	; (80105e0 <arm_rfft_fast_init_f32+0x158>)
 8010568:	8185      	strh	r5, [r0, #12]
 801056a:	6084      	str	r4, [r0, #8]
 801056c:	6041      	str	r1, [r0, #4]
 801056e:	6142      	str	r2, [r0, #20]
 8010570:	4618      	mov	r0, r3
 8010572:	bc30      	pop	{r4, r5}
 8010574:	4770      	bx	lr
 8010576:	25d0      	movs	r5, #208	; 0xd0
 8010578:	4c1a      	ldr	r4, [pc, #104]	; (80105e4 <arm_rfft_fast_init_f32+0x15c>)
 801057a:	491b      	ldr	r1, [pc, #108]	; (80105e8 <arm_rfft_fast_init_f32+0x160>)
 801057c:	2300      	movs	r3, #0
 801057e:	4a1b      	ldr	r2, [pc, #108]	; (80105ec <arm_rfft_fast_init_f32+0x164>)
 8010580:	8185      	strh	r5, [r0, #12]
 8010582:	6084      	str	r4, [r0, #8]
 8010584:	6041      	str	r1, [r0, #4]
 8010586:	6142      	str	r2, [r0, #20]
 8010588:	4618      	mov	r0, r3
 801058a:	bc30      	pop	{r4, r5}
 801058c:	4770      	bx	lr
 801058e:	bf00      	nop
 8010590:	08180530 	.word	0x08180530
 8010594:	08171728 	.word	0x08171728
 8010598:	08177898 	.word	0x08177898
 801059c:	08175828 	.word	0x08175828
 80105a0:	081822f0 	.word	0x081822f0
 80105a4:	081847e0 	.word	0x081847e0
 80105a8:	0817e218 	.word	0x0817e218
 80105ac:	0817c118 	.word	0x0817c118
 80105b0:	08175898 	.word	0x08175898
 80105b4:	08184470 	.word	0x08184470
 80105b8:	0817b898 	.word	0x0817b898
 80105bc:	081824f0 	.word	0x081824f0
 80105c0:	0817f0d0 	.word	0x0817f0d0
 80105c4:	0817e118 	.word	0x0817e118
 80105c8:	08175728 	.word	0x08175728
 80105cc:	0817f028 	.word	0x0817f028
 80105d0:	0817c098 	.word	0x0817c098
 80105d4:	0817f050 	.word	0x0817f050
 80105d8:	08182cf0 	.word	0x08182cf0
 80105dc:	0817f530 	.word	0x0817f530
 80105e0:	08183070 	.word	0x08183070
 80105e4:	081849e0 	.word	0x081849e0
 80105e8:	0817f130 	.word	0x0817f130
 80105ec:	08184070 	.word	0x08184070

080105f0 <arm_rfft_fast_f32>:
 80105f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105f4:	8a05      	ldrh	r5, [r0, #16]
 80105f6:	4606      	mov	r6, r0
 80105f8:	4617      	mov	r7, r2
 80105fa:	460c      	mov	r4, r1
 80105fc:	086d      	lsrs	r5, r5, #1
 80105fe:	8005      	strh	r5, [r0, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d15e      	bne.n	80106c2 <arm_rfft_fast_f32+0xd2>
 8010604:	461a      	mov	r2, r3
 8010606:	2301      	movs	r3, #1
 8010608:	f000 fbde 	bl	8010dc8 <arm_cfft_f32>
 801060c:	edd4 7a00 	vldr	s15, [r4]
 8010610:	ed94 7a01 	vldr	s14, [r4, #4]
 8010614:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010618:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801061c:	8832      	ldrh	r2, [r6, #0]
 801061e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010622:	6975      	ldr	r5, [r6, #20]
 8010624:	3a01      	subs	r2, #1
 8010626:	eeb0 3a46 	vmov.f32	s6, s12
 801062a:	3510      	adds	r5, #16
 801062c:	f107 0610 	add.w	r6, r7, #16
 8010630:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010634:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8010638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801063c:	f104 0310 	add.w	r3, r4, #16
 8010640:	3808      	subs	r0, #8
 8010642:	ee26 7a86 	vmul.f32	s14, s13, s12
 8010646:	ee67 7a86 	vmul.f32	s15, s15, s12
 801064a:	ed87 7a00 	vstr	s14, [r7]
 801064e:	edc7 7a01 	vstr	s15, [r7, #4]
 8010652:	ed90 7a02 	vldr	s14, [r0, #8]
 8010656:	3a01      	subs	r2, #1
 8010658:	ed53 6a02 	vldr	s13, [r3, #-8]
 801065c:	f1a0 0008 	sub.w	r0, r0, #8
 8010660:	ed15 6a02 	vldr	s12, [r5, #-8]
 8010664:	f103 0308 	add.w	r3, r3, #8
 8010668:	ee77 7a66 	vsub.f32	s15, s14, s13
 801066c:	edd0 3a05 	vldr	s7, [r0, #20]
 8010670:	ed13 5a03 	vldr	s10, [r3, #-12]
 8010674:	ee77 4a26 	vadd.f32	s9, s14, s13
 8010678:	ed55 5a01 	vldr	s11, [r5, #-4]
 801067c:	f106 0608 	add.w	r6, r6, #8
 8010680:	ee66 6a27 	vmul.f32	s13, s12, s15
 8010684:	f105 0508 	add.w	r5, r5, #8
 8010688:	ee33 4a85 	vadd.f32	s8, s7, s10
 801068c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8010690:	ee35 5a63 	vsub.f32	s10, s10, s7
 8010694:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010698:	ee26 6a04 	vmul.f32	s12, s12, s8
 801069c:	ee77 7a05 	vadd.f32	s15, s14, s10
 80106a0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80106a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80106a8:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80106ac:	ee67 7a83 	vmul.f32	s15, s15, s6
 80106b0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80106b4:	ed46 7a03 	vstr	s15, [r6, #-12]
 80106b8:	ed06 7a04 	vstr	s14, [r6, #-16]
 80106bc:	d1c9      	bne.n	8010652 <arm_rfft_fast_f32+0x62>
 80106be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c2:	edd1 7a00 	vldr	s15, [r1]
 80106c6:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80106ca:	edd1 6a01 	vldr	s13, [r1, #4]
 80106ce:	1e68      	subs	r0, r5, #1
 80106d0:	6975      	ldr	r5, [r6, #20]
 80106d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80106d6:	00c1      	lsls	r1, r0, #3
 80106d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80106dc:	ee27 7a23 	vmul.f32	s14, s14, s7
 80106e0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80106e4:	ed82 7a00 	vstr	s14, [r2]
 80106e8:	edc2 7a01 	vstr	s15, [r2, #4]
 80106ec:	b3e0      	cbz	r0, 8010768 <arm_rfft_fast_f32+0x178>
 80106ee:	3908      	subs	r1, #8
 80106f0:	f104 0210 	add.w	r2, r4, #16
 80106f4:	3510      	adds	r5, #16
 80106f6:	440c      	add	r4, r1
 80106f8:	f107 0110 	add.w	r1, r7, #16
 80106fc:	ed94 7a02 	vldr	s14, [r4, #8]
 8010700:	3801      	subs	r0, #1
 8010702:	ed52 6a02 	vldr	s13, [r2, #-8]
 8010706:	f1a4 0408 	sub.w	r4, r4, #8
 801070a:	ed15 6a02 	vldr	s12, [r5, #-8]
 801070e:	f102 0208 	add.w	r2, r2, #8
 8010712:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8010716:	ed94 4a05 	vldr	s8, [r4, #20]
 801071a:	ed12 5a03 	vldr	s10, [r2, #-12]
 801071e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8010722:	ed55 5a01 	vldr	s11, [r5, #-4]
 8010726:	f101 0108 	add.w	r1, r1, #8
 801072a:	ee26 3a27 	vmul.f32	s6, s12, s15
 801072e:	f105 0508 	add.w	r5, r5, #8
 8010732:	ee74 4a05 	vadd.f32	s9, s8, s10
 8010736:	ee25 7aa7 	vmul.f32	s14, s11, s15
 801073a:	ee35 5a44 	vsub.f32	s10, s10, s8
 801073e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8010742:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010746:	ee77 7a05 	vadd.f32	s15, s14, s10
 801074a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801074e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010752:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8010756:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801075a:	ee27 7a23 	vmul.f32	s14, s14, s7
 801075e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010762:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010766:	d1c9      	bne.n	80106fc <arm_rfft_fast_f32+0x10c>
 8010768:	461a      	mov	r2, r3
 801076a:	4639      	mov	r1, r7
 801076c:	4630      	mov	r0, r6
 801076e:	2301      	movs	r3, #1
 8010770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010774:	f000 bb28 	b.w	8010dc8 <arm_cfft_f32>

08010778 <arm_cfft_radix8by2_f32>:
 8010778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801077c:	4607      	mov	r7, r0
 801077e:	4608      	mov	r0, r1
 8010780:	ed2d 8b06 	vpush	{d8-d10}
 8010784:	f8b7 e000 	ldrh.w	lr, [r7]
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801078e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8010792:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8010796:	f000 80b0 	beq.w	80108fa <arm_cfft_radix8by2_f32+0x182>
 801079a:	008b      	lsls	r3, r1, #2
 801079c:	3210      	adds	r2, #16
 801079e:	f100 0610 	add.w	r6, r0, #16
 80107a2:	f108 0510 	add.w	r5, r8, #16
 80107a6:	3310      	adds	r3, #16
 80107a8:	18c4      	adds	r4, r0, r3
 80107aa:	4443      	add	r3, r8
 80107ac:	ed55 6a04 	vldr	s13, [r5, #-16]
 80107b0:	f1be 0e01 	subs.w	lr, lr, #1
 80107b4:	ed56 4a04 	vldr	s9, [r6, #-16]
 80107b8:	f104 0410 	add.w	r4, r4, #16
 80107bc:	ed15 7a03 	vldr	s14, [r5, #-12]
 80107c0:	f106 0610 	add.w	r6, r6, #16
 80107c4:	ee74 9aa6 	vadd.f32	s19, s9, s13
 80107c8:	ed55 7a02 	vldr	s15, [r5, #-8]
 80107cc:	ed55 2a01 	vldr	s5, [r5, #-4]
 80107d0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80107d4:	ed53 0a04 	vldr	s1, [r3, #-16]
 80107d8:	f102 0210 	add.w	r2, r2, #16
 80107dc:	ed13 5a03 	vldr	s10, [r3, #-12]
 80107e0:	f105 0510 	add.w	r5, r5, #16
 80107e4:	ed13 3a02 	vldr	s6, [r3, #-8]
 80107e8:	f103 0310 	add.w	r3, r3, #16
 80107ec:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 80107f0:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 80107f4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 80107f8:	ee33 8a83 	vadd.f32	s16, s7, s6
 80107fc:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8010800:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8010804:	ee34 0a06 	vadd.f32	s0, s8, s12
 8010808:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 801080c:	ee76 aa87 	vadd.f32	s21, s13, s14
 8010810:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8010814:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010818:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 801081c:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8010820:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8010824:	ee71 8a05 	vadd.f32	s17, s2, s10
 8010828:	ee31 aaa7 	vadd.f32	s20, s3, s15
 801082c:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8010830:	ee72 9a22 	vadd.f32	s19, s4, s5
 8010834:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8010838:	ee35 5a41 	vsub.f32	s10, s10, s2
 801083c:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8010840:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8010844:	ee36 6a44 	vsub.f32	s12, s12, s8
 8010848:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 801084c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8010850:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8010854:	ee72 7a62 	vsub.f32	s15, s4, s5
 8010858:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 801085c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8010860:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8010864:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8010868:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 801086c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8010870:	ee27 2a26 	vmul.f32	s4, s14, s13
 8010874:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8010878:	ee65 3aa6 	vmul.f32	s7, s11, s13
 801087c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8010880:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010884:	ee65 6a26 	vmul.f32	s13, s10, s13
 8010888:	ee25 5a04 	vmul.f32	s10, s10, s8
 801088c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8010890:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010894:	ee33 4a02 	vadd.f32	s8, s6, s4
 8010898:	ee33 5ac5 	vsub.f32	s10, s7, s10
 801089c:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 80108a0:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 80108a4:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80108a8:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80108ac:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80108b0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80108b4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 80108b8:	ee27 4a87 	vmul.f32	s8, s15, s14
 80108bc:	ee61 5a87 	vmul.f32	s11, s3, s14
 80108c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80108c4:	ee22 5a87 	vmul.f32	s10, s5, s14
 80108c8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80108cc:	ee26 6a26 	vmul.f32	s12, s12, s13
 80108d0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80108d4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80108d8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80108dc:	ee35 6a46 	vsub.f32	s12, s10, s12
 80108e0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80108e4:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 80108e8:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 80108ec:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 80108f0:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80108f4:	f47f af5a 	bne.w	80107ac <arm_cfft_radix8by2_f32+0x34>
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	b28c      	uxth	r4, r1
 80108fc:	2302      	movs	r3, #2
 80108fe:	4621      	mov	r1, r4
 8010900:	f000 fb78 	bl	8010ff4 <arm_radix8_butterfly_f32>
 8010904:	4621      	mov	r1, r4
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	4640      	mov	r0, r8
 801090a:	2302      	movs	r3, #2
 801090c:	ecbd 8b06 	vpop	{d8-d10}
 8010910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010914:	f000 bb6e 	b.w	8010ff4 <arm_radix8_butterfly_f32>

08010918 <arm_cfft_radix8by4_f32>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	ed2d 8b06 	vpush	{d8-d10}
 8010920:	8804      	ldrh	r4, [r0, #0]
 8010922:	b08f      	sub	sp, #60	; 0x3c
 8010924:	ed91 6a00 	vldr	s12, [r1]
 8010928:	460a      	mov	r2, r1
 801092a:	0864      	lsrs	r4, r4, #1
 801092c:	ed91 7a01 	vldr	s14, [r1, #4]
 8010930:	9101      	str	r1, [sp, #4]
 8010932:	00a3      	lsls	r3, r4, #2
 8010934:	6841      	ldr	r1, [r0, #4]
 8010936:	0864      	lsrs	r4, r4, #1
 8010938:	900c      	str	r0, [sp, #48]	; 0x30
 801093a:	9205      	str	r2, [sp, #20]
 801093c:	f101 0610 	add.w	r6, r1, #16
 8010940:	4625      	mov	r5, r4
 8010942:	940b      	str	r4, [sp, #44]	; 0x2c
 8010944:	f101 0408 	add.w	r4, r1, #8
 8010948:	9602      	str	r6, [sp, #8]
 801094a:	9407      	str	r4, [sp, #28]
 801094c:	18d4      	adds	r4, r2, r3
 801094e:	1eaa      	subs	r2, r5, #2
 8010950:	f101 0518 	add.w	r5, r1, #24
 8010954:	18e0      	adds	r0, r4, r3
 8010956:	edd4 4a00 	vldr	s9, [r4]
 801095a:	ed94 4a01 	vldr	s8, [r4, #4]
 801095e:	46a6      	mov	lr, r4
 8010960:	edd0 6a00 	vldr	s13, [r0]
 8010964:	18c7      	adds	r7, r0, r3
 8010966:	edd0 7a01 	vldr	s15, [r0, #4]
 801096a:	46a0      	mov	r8, r4
 801096c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8010970:	ed97 5a00 	vldr	s10, [r7]
 8010974:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010978:	4604      	mov	r4, r0
 801097a:	9506      	str	r5, [sp, #24]
 801097c:	4605      	mov	r5, r0
 801097e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8010982:	900a      	str	r0, [sp, #40]	; 0x28
 8010984:	9801      	ldr	r0, [sp, #4]
 8010986:	ee37 6a27 	vadd.f32	s12, s14, s15
 801098a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801098e:	ed97 3a01 	vldr	s6, [r7, #4]
 8010992:	ee72 2a85 	vadd.f32	s5, s5, s10
 8010996:	46bc      	mov	ip, r7
 8010998:	ee76 3a84 	vadd.f32	s7, s13, s8
 801099c:	9704      	str	r7, [sp, #16]
 801099e:	ee36 7a44 	vsub.f32	s14, s12, s8
 80109a2:	f8cd e00c 	str.w	lr, [sp, #12]
 80109a6:	ee12 9a90 	vmov	r9, s5
 80109aa:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80109ae:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80109b2:	1f3e      	subs	r6, r7, #4
 80109b4:	f840 9b08 	str.w	r9, [r0], #8
 80109b8:	ee37 4ae4 	vsub.f32	s8, s15, s9
 80109bc:	edde 2a01 	vldr	s5, [lr, #4]
 80109c0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80109c4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80109c8:	eddc 4a01 	vldr	s9, [ip, #4]
 80109cc:	ee36 6a22 	vadd.f32	s12, s12, s5
 80109d0:	9001      	str	r0, [sp, #4]
 80109d2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80109d6:	9805      	ldr	r0, [sp, #20]
 80109d8:	ee13 9a90 	vmov	r9, s7
 80109dc:	ee37 7a43 	vsub.f32	s14, s14, s6
 80109e0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80109e4:	f1ae 0704 	sub.w	r7, lr, #4
 80109e8:	ee74 4a05 	vadd.f32	s9, s8, s10
 80109ec:	ee76 6a83 	vadd.f32	s13, s13, s6
 80109f0:	ed80 6a01 	vstr	s12, [r0, #4]
 80109f4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80109f8:	f848 9b08 	str.w	r9, [r8], #8
 80109fc:	edce 4a01 	vstr	s9, [lr, #4]
 8010a00:	ee15 ea90 	vmov	lr, s11
 8010a04:	f844 eb08 	str.w	lr, [r4], #8
 8010a08:	ee16 ea90 	vmov	lr, s13
 8010a0c:	9408      	str	r4, [sp, #32]
 8010a0e:	462c      	mov	r4, r5
 8010a10:	ed85 7a01 	vstr	s14, [r5, #4]
 8010a14:	9d04      	ldr	r5, [sp, #16]
 8010a16:	f84c eb08 	str.w	lr, [ip], #8
 8010a1a:	edc5 7a01 	vstr	s15, [r5, #4]
 8010a1e:	0855      	lsrs	r5, r2, #1
 8010a20:	9509      	str	r5, [sp, #36]	; 0x24
 8010a22:	f000 8130 	beq.w	8010c86 <arm_cfft_radix8by4_f32+0x36e>
 8010a26:	9805      	ldr	r0, [sp, #20]
 8010a28:	3b08      	subs	r3, #8
 8010a2a:	46ab      	mov	fp, r5
 8010a2c:	f1a4 020c 	sub.w	r2, r4, #12
 8010a30:	f100 0510 	add.w	r5, r0, #16
 8010a34:	f101 0920 	add.w	r9, r1, #32
 8010a38:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8010a3c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8010a40:	4433      	add	r3, r6
 8010a42:	3410      	adds	r4, #16
 8010a44:	4660      	mov	r0, ip
 8010a46:	4641      	mov	r1, r8
 8010a48:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8010a4c:	ed54 6a02 	vldr	s13, [r4, #-8]
 8010a50:	f1bb 0b01 	subs.w	fp, fp, #1
 8010a54:	ed55 5a02 	vldr	s11, [r5, #-8]
 8010a58:	f10a 0a08 	add.w	sl, sl, #8
 8010a5c:	edd1 7a00 	vldr	s15, [r1]
 8010a60:	f105 0508 	add.w	r5, r5, #8
 8010a64:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8010a68:	edd0 2a00 	vldr	s5, [r0]
 8010a6c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8010a70:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8010a74:	ed55 6a03 	vldr	s13, [r5, #-12]
 8010a78:	f1a2 0208 	sub.w	r2, r2, #8
 8010a7c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8010a80:	ed90 2a01 	vldr	s4, [r0, #4]
 8010a84:	ee36 5a87 	vadd.f32	s10, s13, s14
 8010a88:	ed91 6a01 	vldr	s12, [r1, #4]
 8010a8c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010a90:	f109 0910 	add.w	r9, r9, #16
 8010a94:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8010a98:	f104 0408 	add.w	r4, r4, #8
 8010a9c:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8010aa0:	f10e 0e18 	add.w	lr, lr, #24
 8010aa4:	ee37 3a67 	vsub.f32	s6, s14, s15
 8010aa8:	f1a3 0308 	sub.w	r3, r3, #8
 8010aac:	ed45 6a04 	vstr	s13, [r5, #-16]
 8010ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ab4:	edd1 6a01 	vldr	s13, [r1, #4]
 8010ab8:	ee75 1a86 	vadd.f32	s3, s11, s12
 8010abc:	edd0 4a01 	vldr	s9, [r0, #4]
 8010ac0:	ee33 3a22 	vadd.f32	s6, s6, s5
 8010ac4:	ee75 6a26 	vadd.f32	s13, s10, s13
 8010ac8:	ee35 5a46 	vsub.f32	s10, s10, s12
 8010acc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8010ad0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010ad4:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8010ad8:	ee35 5a42 	vsub.f32	s10, s10, s4
 8010adc:	ed45 6a03 	vstr	s13, [r5, #-12]
 8010ae0:	ee36 2a02 	vadd.f32	s4, s12, s4
 8010ae4:	edd6 7a00 	vldr	s15, [r6]
 8010ae8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8010aec:	ed97 1a00 	vldr	s2, [r7]
 8010af0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8010af4:	ed92 8a04 	vldr	s16, [r2, #16]
 8010af8:	ee71 8a27 	vadd.f32	s17, s2, s15
 8010afc:	ed93 aa04 	vldr	s20, [r3, #16]
 8010b00:	ed16 7a01 	vldr	s14, [r6, #-4]
 8010b04:	ee71 7a67 	vsub.f32	s15, s2, s15
 8010b08:	ed57 0a01 	vldr	s1, [r7, #-4]
 8010b0c:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8010b10:	ee38 6a88 	vadd.f32	s12, s17, s16
 8010b14:	edd3 9a03 	vldr	s19, [r3, #12]
 8010b18:	ee30 0a87 	vadd.f32	s0, s1, s14
 8010b1c:	ed92 9a03 	vldr	s18, [r2, #12]
 8010b20:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8010b24:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8010b28:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8010b2c:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8010b30:	ee16 ca10 	vmov	ip, s12
 8010b34:	ee30 6a49 	vsub.f32	s12, s0, s18
 8010b38:	ee77 4a01 	vadd.f32	s9, s14, s2
 8010b3c:	f847 c908 	str.w	ip, [r7], #-8
 8010b40:	ee34 4a29 	vadd.f32	s8, s8, s19
 8010b44:	edd2 8a03 	vldr	s17, [r2, #12]
 8010b48:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8010b4c:	ed93 8a03 	vldr	s16, [r3, #12]
 8010b50:	ee71 0a47 	vsub.f32	s1, s2, s14
 8010b54:	ee30 0a28 	vadd.f32	s0, s0, s17
 8010b58:	ee39 1a67 	vsub.f32	s2, s18, s15
 8010b5c:	ee36 6a69 	vsub.f32	s12, s12, s19
 8010b60:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010b64:	ee75 5aca 	vsub.f32	s11, s11, s20
 8010b68:	ed87 0a01 	vstr	s0, [r7, #4]
 8010b6c:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8010b70:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8010b74:	ee21 8a80 	vmul.f32	s16, s3, s0
 8010b78:	ee23 7a26 	vmul.f32	s14, s6, s13
 8010b7c:	ee64 7a26 	vmul.f32	s15, s8, s13
 8010b80:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8010b84:	ee24 4a00 	vmul.f32	s8, s8, s0
 8010b88:	ee23 3a00 	vmul.f32	s6, s6, s0
 8010b8c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8010b90:	ee24 0a80 	vmul.f32	s0, s9, s0
 8010b94:	ee38 7a07 	vadd.f32	s14, s16, s14
 8010b98:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010b9c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010ba0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8010ba4:	ee17 ca10 	vmov	ip, s14
 8010ba8:	f841 cb08 	str.w	ip, [r1], #8
 8010bac:	ed01 3a01 	vstr	s6, [r1, #-4]
 8010bb0:	ed82 0a04 	vstr	s0, [r2, #16]
 8010bb4:	edc2 6a03 	vstr	s13, [r2, #12]
 8010bb8:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 8010bbc:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8010bc0:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8010bc4:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8010bc8:	ee65 4a27 	vmul.f32	s9, s10, s15
 8010bcc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8010bd0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8010bd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010bd8:	ee25 5a26 	vmul.f32	s10, s10, s13
 8010bdc:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010be4:	ee34 6a24 	vadd.f32	s12, s8, s9
 8010be8:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8010bec:	ee35 5a63 	vsub.f32	s10, s10, s7
 8010bf0:	ee17 ca90 	vmov	ip, s15
 8010bf4:	ed04 6a04 	vstr	s12, [r4, #-16]
 8010bf8:	ed04 5a03 	vstr	s10, [r4, #-12]
 8010bfc:	f846 c908 	str.w	ip, [r6], #-8
 8010c00:	edc6 6a01 	vstr	s13, [r6, #4]
 8010c04:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8010c08:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 8010c0c:	ee62 5a27 	vmul.f32	s11, s4, s15
 8010c10:	ee22 6a87 	vmul.f32	s12, s5, s14
 8010c14:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010c18:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8010c1c:	ee61 6a07 	vmul.f32	s13, s2, s14
 8010c20:	ee20 7a87 	vmul.f32	s14, s1, s14
 8010c24:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010c28:	ee61 7a27 	vmul.f32	s15, s2, s15
 8010c2c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8010c30:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8010c34:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8010c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c3c:	ee16 ca10 	vmov	ip, s12
 8010c40:	f840 cb08 	str.w	ip, [r0], #8
 8010c44:	ed40 2a01 	vstr	s5, [r0, #-4]
 8010c48:	edc3 0a04 	vstr	s1, [r3, #16]
 8010c4c:	edc3 7a03 	vstr	s15, [r3, #12]
 8010c50:	f47f aefc 	bne.w	8010a4c <arm_cfft_radix8by4_f32+0x134>
 8010c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c56:	9802      	ldr	r0, [sp, #8]
 8010c58:	00cb      	lsls	r3, r1, #3
 8010c5a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8010c5e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8010c62:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8010c66:	4498      	add	r8, r3
 8010c68:	449c      	add	ip, r3
 8010c6a:	9102      	str	r1, [sp, #8]
 8010c6c:	9901      	ldr	r1, [sp, #4]
 8010c6e:	4419      	add	r1, r3
 8010c70:	9101      	str	r1, [sp, #4]
 8010c72:	9907      	ldr	r1, [sp, #28]
 8010c74:	4419      	add	r1, r3
 8010c76:	9107      	str	r1, [sp, #28]
 8010c78:	9908      	ldr	r1, [sp, #32]
 8010c7a:	4419      	add	r1, r3
 8010c7c:	9b06      	ldr	r3, [sp, #24]
 8010c7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c82:	9108      	str	r1, [sp, #32]
 8010c84:	9306      	str	r3, [sp, #24]
 8010c86:	9a01      	ldr	r2, [sp, #4]
 8010c88:	2304      	movs	r3, #4
 8010c8a:	9e08      	ldr	r6, [sp, #32]
 8010c8c:	edd2 7a00 	vldr	s15, [r2]
 8010c90:	ed96 7a00 	vldr	s14, [r6]
 8010c94:	edd8 2a00 	vldr	s5, [r8]
 8010c98:	ee77 5a87 	vadd.f32	s11, s15, s14
 8010c9c:	ed9c 3a00 	vldr	s6, [ip]
 8010ca0:	ed92 6a01 	vldr	s12, [r2, #4]
 8010ca4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010ca8:	edd6 6a01 	vldr	s13, [r6, #4]
 8010cac:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8010cb0:	ed9c 2a01 	vldr	s4, [ip, #4]
 8010cb4:	ee36 5a26 	vadd.f32	s10, s12, s13
 8010cb8:	edd8 7a01 	vldr	s15, [r8, #4]
 8010cbc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8010cc0:	9d02      	ldr	r5, [sp, #8]
 8010cc2:	ee34 6a83 	vadd.f32	s12, s9, s6
 8010cc6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8010cca:	ee37 4a27 	vadd.f32	s8, s14, s15
 8010cce:	9805      	ldr	r0, [sp, #20]
 8010cd0:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8010cd4:	4621      	mov	r1, r4
 8010cd6:	ed82 6a00 	vstr	s12, [r2]
 8010cda:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8010cde:	edd8 3a01 	vldr	s7, [r8, #4]
 8010ce2:	ee75 5a67 	vsub.f32	s11, s10, s15
 8010ce6:	eddc 1a01 	vldr	s3, [ip, #4]
 8010cea:	ee34 4a42 	vsub.f32	s8, s8, s4
 8010cee:	ee75 3a23 	vadd.f32	s7, s10, s7
 8010cf2:	ee74 4a83 	vadd.f32	s9, s9, s6
 8010cf6:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8010cfa:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8010cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010d02:	ee36 6a43 	vsub.f32	s12, s12, s6
 8010d06:	ed82 5a01 	vstr	s10, [r2, #4]
 8010d0a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8010d0e:	9a07      	ldr	r2, [sp, #28]
 8010d10:	ee77 7a02 	vadd.f32	s15, s14, s4
 8010d14:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8010d18:	edd2 2a00 	vldr	s5, [r2]
 8010d1c:	ed92 5a01 	vldr	s10, [r2, #4]
 8010d20:	ee64 3a22 	vmul.f32	s7, s8, s5
 8010d24:	ee24 4a05 	vmul.f32	s8, s8, s10
 8010d28:	ee24 5a85 	vmul.f32	s10, s9, s10
 8010d2c:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8010d30:	ee33 5a85 	vadd.f32	s10, s7, s10
 8010d34:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010d38:	ed88 5a00 	vstr	s10, [r8]
 8010d3c:	edc8 4a01 	vstr	s9, [r8, #4]
 8010d40:	edd5 4a01 	vldr	s9, [r5, #4]
 8010d44:	edd5 6a00 	vldr	s13, [r5]
 8010d48:	9d06      	ldr	r5, [sp, #24]
 8010d4a:	ee26 5a26 	vmul.f32	s10, s12, s13
 8010d4e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8010d52:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8010d56:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8010d5a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8010d5e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010d62:	ed86 6a01 	vstr	s12, [r6, #4]
 8010d66:	edc6 5a00 	vstr	s11, [r6]
 8010d6a:	edd5 5a01 	vldr	s11, [r5, #4]
 8010d6e:	edd5 6a00 	vldr	s13, [r5]
 8010d72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010d74:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8010d78:	ee67 6a26 	vmul.f32	s13, s14, s13
 8010d7c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8010d80:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010d84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010d88:	ee36 7a07 	vadd.f32	s14, s12, s14
 8010d8c:	edcc 7a01 	vstr	s15, [ip, #4]
 8010d90:	ed8c 7a00 	vstr	s14, [ip]
 8010d94:	6872      	ldr	r2, [r6, #4]
 8010d96:	f000 f92d 	bl	8010ff4 <arm_radix8_butterfly_f32>
 8010d9a:	9803      	ldr	r0, [sp, #12]
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	6872      	ldr	r2, [r6, #4]
 8010da0:	2304      	movs	r3, #4
 8010da2:	f000 f927 	bl	8010ff4 <arm_radix8_butterfly_f32>
 8010da6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010da8:	4621      	mov	r1, r4
 8010daa:	6872      	ldr	r2, [r6, #4]
 8010dac:	2304      	movs	r3, #4
 8010dae:	f000 f921 	bl	8010ff4 <arm_radix8_butterfly_f32>
 8010db2:	4621      	mov	r1, r4
 8010db4:	6872      	ldr	r2, [r6, #4]
 8010db6:	2304      	movs	r3, #4
 8010db8:	9804      	ldr	r0, [sp, #16]
 8010dba:	b00f      	add	sp, #60	; 0x3c
 8010dbc:	ecbd 8b06 	vpop	{d8-d10}
 8010dc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dc4:	f000 b916 	b.w	8010ff4 <arm_radix8_butterfly_f32>

08010dc8 <arm_cfft_f32>:
 8010dc8:	2a01      	cmp	r2, #1
 8010dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dce:	4606      	mov	r6, r0
 8010dd0:	4617      	mov	r7, r2
 8010dd2:	460c      	mov	r4, r1
 8010dd4:	4698      	mov	r8, r3
 8010dd6:	8805      	ldrh	r5, [r0, #0]
 8010dd8:	d053      	beq.n	8010e82 <arm_cfft_f32+0xba>
 8010dda:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010dde:	d04b      	beq.n	8010e78 <arm_cfft_f32+0xb0>
 8010de0:	d916      	bls.n	8010e10 <arm_cfft_f32+0x48>
 8010de2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8010de6:	d01a      	beq.n	8010e1e <arm_cfft_f32+0x56>
 8010de8:	d95a      	bls.n	8010ea0 <arm_cfft_f32+0xd8>
 8010dea:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8010dee:	d043      	beq.n	8010e78 <arm_cfft_f32+0xb0>
 8010df0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8010df4:	d105      	bne.n	8010e02 <arm_cfft_f32+0x3a>
 8010df6:	2301      	movs	r3, #1
 8010df8:	6872      	ldr	r2, [r6, #4]
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	4620      	mov	r0, r4
 8010dfe:	f000 f8f9 	bl	8010ff4 <arm_radix8_butterfly_f32>
 8010e02:	f1b8 0f00 	cmp.w	r8, #0
 8010e06:	d111      	bne.n	8010e2c <arm_cfft_f32+0x64>
 8010e08:	2f01      	cmp	r7, #1
 8010e0a:	d016      	beq.n	8010e3a <arm_cfft_f32+0x72>
 8010e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e10:	2d20      	cmp	r5, #32
 8010e12:	d031      	beq.n	8010e78 <arm_cfft_f32+0xb0>
 8010e14:	d948      	bls.n	8010ea8 <arm_cfft_f32+0xe0>
 8010e16:	2d40      	cmp	r5, #64	; 0x40
 8010e18:	d0ed      	beq.n	8010df6 <arm_cfft_f32+0x2e>
 8010e1a:	2d80      	cmp	r5, #128	; 0x80
 8010e1c:	d1f1      	bne.n	8010e02 <arm_cfft_f32+0x3a>
 8010e1e:	4621      	mov	r1, r4
 8010e20:	4630      	mov	r0, r6
 8010e22:	f7ff fca9 	bl	8010778 <arm_cfft_radix8by2_f32>
 8010e26:	f1b8 0f00 	cmp.w	r8, #0
 8010e2a:	d0ed      	beq.n	8010e08 <arm_cfft_f32+0x40>
 8010e2c:	68b2      	ldr	r2, [r6, #8]
 8010e2e:	4620      	mov	r0, r4
 8010e30:	89b1      	ldrh	r1, [r6, #12]
 8010e32:	f7ef fa05 	bl	8000240 <arm_bitreversal_32>
 8010e36:	2f01      	cmp	r7, #1
 8010e38:	d1e8      	bne.n	8010e0c <arm_cfft_f32+0x44>
 8010e3a:	ee07 5a90 	vmov	s15, r5
 8010e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010e4a:	2d00      	cmp	r5, #0
 8010e4c:	d0de      	beq.n	8010e0c <arm_cfft_f32+0x44>
 8010e4e:	f104 0108 	add.w	r1, r4, #8
 8010e52:	2300      	movs	r3, #0
 8010e54:	ed11 7a02 	vldr	s14, [r1, #-8]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8010e5e:	3108      	adds	r1, #8
 8010e60:	429d      	cmp	r5, r3
 8010e62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010e66:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010e6a:	ed01 7a04 	vstr	s14, [r1, #-16]
 8010e6e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8010e72:	d1ef      	bne.n	8010e54 <arm_cfft_f32+0x8c>
 8010e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e78:	4621      	mov	r1, r4
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	f7ff fd4c 	bl	8010918 <arm_cfft_radix8by4_f32>
 8010e80:	e7bf      	b.n	8010e02 <arm_cfft_f32+0x3a>
 8010e82:	b1a5      	cbz	r5, 8010eae <arm_cfft_f32+0xe6>
 8010e84:	f101 030c 	add.w	r3, r1, #12
 8010e88:	2200      	movs	r2, #0
 8010e8a:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010e8e:	3201      	adds	r2, #1
 8010e90:	3308      	adds	r3, #8
 8010e92:	eef1 7a67 	vneg.f32	s15, s15
 8010e96:	4295      	cmp	r5, r2
 8010e98:	ed43 7a04 	vstr	s15, [r3, #-16]
 8010e9c:	d1f5      	bne.n	8010e8a <arm_cfft_f32+0xc2>
 8010e9e:	e79c      	b.n	8010dda <arm_cfft_f32+0x12>
 8010ea0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8010ea4:	d0a7      	beq.n	8010df6 <arm_cfft_f32+0x2e>
 8010ea6:	e7ac      	b.n	8010e02 <arm_cfft_f32+0x3a>
 8010ea8:	2d10      	cmp	r5, #16
 8010eaa:	d0b8      	beq.n	8010e1e <arm_cfft_f32+0x56>
 8010eac:	e7a9      	b.n	8010e02 <arm_cfft_f32+0x3a>
 8010eae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8010eb2:	d896      	bhi.n	8010de2 <arm_cfft_f32+0x1a>
 8010eb4:	e7ac      	b.n	8010e10 <arm_cfft_f32+0x48>
 8010eb6:	bf00      	nop

08010eb8 <arm_cmplx_mag_squared_f32>:
 8010eb8:	b470      	push	{r4, r5, r6}
 8010eba:	0896      	lsrs	r6, r2, #2
 8010ebc:	d03e      	beq.n	8010f3c <arm_cmplx_mag_squared_f32+0x84>
 8010ebe:	f100 0320 	add.w	r3, r0, #32
 8010ec2:	f101 0410 	add.w	r4, r1, #16
 8010ec6:	4635      	mov	r5, r6
 8010ec8:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8010ecc:	3d01      	subs	r5, #1
 8010ece:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 8010ed2:	f104 0410 	add.w	r4, r4, #16
 8010ed6:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 8010eda:	ee27 5a07 	vmul.f32	s10, s14, s14
 8010ede:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 8010ee2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010ee6:	ed13 7a04 	vldr	s14, [r3, #-16]
 8010eea:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8010eee:	ed13 4a03 	vldr	s8, [r3, #-12]
 8010ef2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010ef6:	ed53 7a02 	vldr	s15, [r3, #-8]
 8010efa:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010efe:	ed53 4a01 	vldr	s9, [r3, #-4]
 8010f02:	ee24 4a04 	vmul.f32	s8, s8, s8
 8010f06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f0a:	f103 0320 	add.w	r3, r3, #32
 8010f0e:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8010f12:	ee75 5a25 	vadd.f32	s11, s10, s11
 8010f16:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010f1a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010f1e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8010f22:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 8010f26:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 8010f2a:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 8010f2e:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010f32:	d1c9      	bne.n	8010ec8 <arm_cmplx_mag_squared_f32+0x10>
 8010f34:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8010f38:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8010f3c:	f012 0203 	ands.w	r2, r2, #3
 8010f40:	d010      	beq.n	8010f64 <arm_cmplx_mag_squared_f32+0xac>
 8010f42:	3008      	adds	r0, #8
 8010f44:	ed50 7a02 	vldr	s15, [r0, #-8]
 8010f48:	3a01      	subs	r2, #1
 8010f4a:	ed10 7a01 	vldr	s14, [r0, #-4]
 8010f4e:	f100 0008 	add.w	r0, r0, #8
 8010f52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f56:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f5e:	ece1 7a01 	vstmia	r1!, {s15}
 8010f62:	d1ef      	bne.n	8010f44 <arm_cmplx_mag_squared_f32+0x8c>
 8010f64:	bc70      	pop	{r4, r5, r6}
 8010f66:	4770      	bx	lr

08010f68 <arm_mult_f32>:
 8010f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f6a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8010f6e:	d033      	beq.n	8010fd8 <arm_mult_f32+0x70>
 8010f70:	f100 0610 	add.w	r6, r0, #16
 8010f74:	f101 0510 	add.w	r5, r1, #16
 8010f78:	f102 0410 	add.w	r4, r2, #16
 8010f7c:	4677      	mov	r7, lr
 8010f7e:	ed16 7a04 	vldr	s14, [r6, #-16]
 8010f82:	3f01      	subs	r7, #1
 8010f84:	ed15 6a04 	vldr	s12, [r5, #-16]
 8010f88:	f106 0610 	add.w	r6, r6, #16
 8010f8c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8010f90:	f105 0510 	add.w	r5, r5, #16
 8010f94:	ee27 6a06 	vmul.f32	s12, s14, s12
 8010f98:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 8010f9c:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 8010fa0:	f104 0410 	add.w	r4, r4, #16
 8010fa4:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 8010fa8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010fac:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8010fb0:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 8010fb4:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010fb8:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8010fbc:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 8010fc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010fc4:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 8010fc8:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8010fcc:	d1d7      	bne.n	8010f7e <arm_mult_f32+0x16>
 8010fce:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8010fd2:	4420      	add	r0, r4
 8010fd4:	4421      	add	r1, r4
 8010fd6:	4422      	add	r2, r4
 8010fd8:	f013 0303 	ands.w	r3, r3, #3
 8010fdc:	d009      	beq.n	8010ff2 <arm_mult_f32+0x8a>
 8010fde:	ecf0 7a01 	vldmia	r0!, {s15}
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	ecb1 7a01 	vldmia	r1!, {s14}
 8010fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010fec:	ece2 7a01 	vstmia	r2!, {s15}
 8010ff0:	d1f5      	bne.n	8010fde <arm_mult_f32+0x76>
 8010ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ff4 <arm_radix8_butterfly_f32>:
 8010ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff8:	469e      	mov	lr, r3
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	468a      	mov	sl, r1
 8010ffe:	468b      	mov	fp, r1
 8011000:	3304      	adds	r3, #4
 8011002:	ed2d 8b10 	vpush	{d8-d15}
 8011006:	469c      	mov	ip, r3
 8011008:	b09d      	sub	sp, #116	; 0x74
 801100a:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 8011318 <arm_radix8_butterfly_f32+0x324>
 801100e:	9019      	str	r0, [sp, #100]	; 0x64
 8011010:	921a      	str	r2, [sp, #104]	; 0x68
 8011012:	931b      	str	r3, [sp, #108]	; 0x6c
 8011014:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8011018:	f04f 0800 	mov.w	r8, #0
 801101c:	461a      	mov	r2, r3
 801101e:	9311      	str	r3, [sp, #68]	; 0x44
 8011020:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011024:	4611      	mov	r1, r2
 8011026:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	0053      	lsls	r3, r2, #1
 801102e:	18d5      	adds	r5, r2, r3
 8011030:	9301      	str	r3, [sp, #4]
 8011032:	0113      	lsls	r3, r2, #4
 8011034:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011036:	194c      	adds	r4, r1, r5
 8011038:	eb02 0609 	add.w	r6, r2, r9
 801103c:	9302      	str	r3, [sp, #8]
 801103e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011042:	4613      	mov	r3, r2
 8011044:	190a      	adds	r2, r1, r4
 8011046:	eb06 0709 	add.w	r7, r6, r9
 801104a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801104e:	1888      	adds	r0, r1, r2
 8011050:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011054:	4401      	add	r1, r0
 8011056:	3204      	adds	r2, #4
 8011058:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801105c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011060:	9b00      	ldr	r3, [sp, #0]
 8011062:	3104      	adds	r1, #4
 8011064:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8011068:	44d8      	add	r8, fp
 801106a:	ed90 7a00 	vldr	s14, [r0]
 801106e:	ed94 5a00 	vldr	s10, [r4]
 8011072:	45c2      	cmp	sl, r8
 8011074:	edd7 3a00 	vldr	s7, [r7]
 8011078:	ed96 6a00 	vldr	s12, [r6]
 801107c:	ee37 1a85 	vadd.f32	s2, s15, s10
 8011080:	ed52 6a01 	vldr	s13, [r2, #-4]
 8011084:	ee73 4a87 	vadd.f32	s9, s7, s14
 8011088:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801108c:	edd5 7a00 	vldr	s15, [r5]
 8011090:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8011094:	ed11 7a01 	vldr	s14, [r1, #-4]
 8011098:	ee36 2a26 	vadd.f32	s4, s12, s13
 801109c:	ee37 4a87 	vadd.f32	s8, s15, s14
 80110a0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80110a4:	ee71 5a24 	vadd.f32	s11, s2, s9
 80110a8:	ee32 6a04 	vadd.f32	s12, s4, s8
 80110ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80110b0:	ee31 1a64 	vsub.f32	s2, s2, s9
 80110b4:	ee75 4a86 	vadd.f32	s9, s11, s12
 80110b8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80110bc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80110c0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80110c4:	ee32 2a44 	vsub.f32	s4, s4, s8
 80110c8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80110cc:	ed94 0a01 	vldr	s0, [r4, #4]
 80110d0:	edc4 5a00 	vstr	s11, [r4]
 80110d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80110d8:	edd6 5a01 	vldr	s11, [r6, #4]
 80110dc:	edd5 2a01 	vldr	s5, [r5, #4]
 80110e0:	ee75 1a27 	vadd.f32	s3, s10, s15
 80110e4:	ed92 4a00 	vldr	s8, [r2]
 80110e8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80110ec:	edd1 4a00 	vldr	s9, [r1]
 80110f0:	ee27 7a09 	vmul.f32	s14, s14, s18
 80110f4:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80110f8:	ed9c 6a00 	vldr	s12, [ip]
 80110fc:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8011100:	edd0 0a01 	vldr	s1, [r0, #4]
 8011104:	ed97 5a01 	vldr	s10, [r7, #4]
 8011108:	ee35 4a84 	vadd.f32	s8, s11, s8
 801110c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8011110:	ee73 5a26 	vadd.f32	s11, s6, s13
 8011114:	ee76 2a00 	vadd.f32	s5, s12, s0
 8011118:	ee73 6a66 	vsub.f32	s13, s6, s13
 801111c:	ee36 6a40 	vsub.f32	s12, s12, s0
 8011120:	ee35 0a20 	vadd.f32	s0, s10, s1
 8011124:	ee65 5a89 	vmul.f32	s11, s11, s18
 8011128:	ee35 5a60 	vsub.f32	s10, s10, s1
 801112c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8011130:	ee74 0a24 	vadd.f32	s1, s8, s9
 8011134:	ee66 6a89 	vmul.f32	s13, s13, s18
 8011138:	ee74 4a64 	vsub.f32	s9, s8, s9
 801113c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8011140:	ee75 2a25 	vadd.f32	s5, s10, s11
 8011144:	ee33 0a20 	vadd.f32	s0, s6, s1
 8011148:	ee75 5a65 	vsub.f32	s11, s10, s11
 801114c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8011150:	ee36 5a26 	vadd.f32	s10, s12, s13
 8011154:	ed8c 0a00 	vstr	s0, [ip]
 8011158:	ee76 6a66 	vsub.f32	s13, s12, s13
 801115c:	449c      	add	ip, r3
 801115e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8011162:	ed84 3a01 	vstr	s6, [r4, #4]
 8011166:	ee33 7ac7 	vsub.f32	s14, s7, s14
 801116a:	441c      	add	r4, r3
 801116c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8011170:	ee71 4a64 	vsub.f32	s9, s2, s9
 8011174:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8011178:	edc7 3a00 	vstr	s7, [r7]
 801117c:	ee34 1a42 	vsub.f32	s2, s8, s4
 8011180:	edc0 4a00 	vstr	s9, [r0]
 8011184:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8011188:	ee75 4a46 	vsub.f32	s9, s10, s12
 801118c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011190:	ed87 1a01 	vstr	s2, [r7, #4]
 8011194:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8011198:	441f      	add	r7, r3
 801119a:	ee32 4a04 	vadd.f32	s8, s4, s8
 801119e:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80111a2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80111a6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80111aa:	ed80 4a01 	vstr	s8, [r0, #4]
 80111ae:	ed86 3a00 	vstr	s6, [r6]
 80111b2:	4418      	add	r0, r3
 80111b4:	ed41 1a01 	vstr	s3, [r1, #-4]
 80111b8:	ed42 3a01 	vstr	s7, [r2, #-4]
 80111bc:	edc5 7a00 	vstr	s15, [r5]
 80111c0:	edc6 4a01 	vstr	s9, [r6, #4]
 80111c4:	441e      	add	r6, r3
 80111c6:	ed81 6a00 	vstr	s12, [r1]
 80111ca:	4419      	add	r1, r3
 80111cc:	edc2 5a00 	vstr	s11, [r2]
 80111d0:	441a      	add	r2, r3
 80111d2:	ed85 7a01 	vstr	s14, [r5, #4]
 80111d6:	441d      	add	r5, r3
 80111d8:	f63f af44 	bhi.w	8011064 <arm_radix8_butterfly_f32+0x70>
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111e0:	2b07      	cmp	r3, #7
 80111e2:	f240 81f4 	bls.w	80115ce <arm_radix8_butterfly_f32+0x5da>
 80111e6:	9901      	ldr	r1, [sp, #4]
 80111e8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80111ec:	9d02      	ldr	r5, [sp, #8]
 80111ee:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80111f2:	3101      	adds	r1, #1
 80111f4:	eb04 000e 	add.w	r0, r4, lr
 80111f8:	00e4      	lsls	r4, r4, #3
 80111fa:	3508      	adds	r5, #8
 80111fc:	4419      	add	r1, r3
 80111fe:	eb00 0c0e 	add.w	ip, r0, lr
 8011202:	9413      	str	r4, [sp, #76]	; 0x4c
 8011204:	00c0      	lsls	r0, r0, #3
 8011206:	185e      	adds	r6, r3, r1
 8011208:	4617      	mov	r7, r2
 801120a:	9218      	str	r2, [sp, #96]	; 0x60
 801120c:	f109 0908 	add.w	r9, r9, #8
 8011210:	199c      	adds	r4, r3, r6
 8011212:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011214:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011216:	9012      	str	r0, [sp, #72]	; 0x48
 8011218:	195d      	adds	r5, r3, r5
 801121a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801121c:	443a      	add	r2, r7
 801121e:	950c      	str	r5, [sp, #48]	; 0x30
 8011220:	4698      	mov	r8, r3
 8011222:	4420      	add	r0, r4
 8011224:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011226:	19d7      	adds	r7, r2, r7
 8011228:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801122c:	4405      	add	r5, r0
 801122e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011232:	9710      	str	r7, [sp, #64]	; 0x40
 8011234:	eb0c 070e 	add.w	r7, ip, lr
 8011238:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801123c:	3404      	adds	r4, #4
 801123e:	3004      	adds	r0, #4
 8011240:	44c8      	add	r8, r9
 8011242:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8011246:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011248:	940a      	str	r4, [sp, #40]	; 0x28
 801124a:	9009      	str	r0, [sp, #36]	; 0x24
 801124c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8011250:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8011252:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011256:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011258:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 801125c:	eb07 080e 	add.w	r8, r7, lr
 8011260:	eb04 0900 	add.w	r9, r4, r0
 8011264:	00f8      	lsls	r0, r7, #3
 8011266:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 801126a:	3504      	adds	r5, #4
 801126c:	4607      	mov	r7, r0
 801126e:	9017      	str	r0, [sp, #92]	; 0x5c
 8011270:	910b      	str	r1, [sp, #44]	; 0x2c
 8011272:	4618      	mov	r0, r3
 8011274:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8011278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801127a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 801127e:	18e3      	adds	r3, r4, r3
 8011280:	9508      	str	r5, [sp, #32]
 8011282:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8011284:	910e      	str	r1, [sp, #56]	; 0x38
 8011286:	4621      	mov	r1, r4
 8011288:	eb04 0805 	add.w	r8, r4, r5
 801128c:	9304      	str	r3, [sp, #16]
 801128e:	19e5      	adds	r5, r4, r7
 8011290:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8011294:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011296:	9316      	str	r3, [sp, #88]	; 0x58
 8011298:	190b      	adds	r3, r1, r4
 801129a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801129c:	9505      	str	r5, [sp, #20]
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	f100 0308 	add.w	r3, r0, #8
 80112a4:	9707      	str	r7, [sp, #28]
 80112a6:	4638      	mov	r0, r7
 80112a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80112aa:	2301      	movs	r3, #1
 80112ac:	9306      	str	r3, [sp, #24]
 80112ae:	9b00      	ldr	r3, [sp, #0]
 80112b0:	ed90 fa00 	vldr	s30, [r0]
 80112b4:	edd0 ba01 	vldr	s23, [r0, #4]
 80112b8:	9803      	ldr	r0, [sp, #12]
 80112ba:	9903      	ldr	r1, [sp, #12]
 80112bc:	ed90 ba01 	vldr	s22, [r0, #4]
 80112c0:	9804      	ldr	r0, [sp, #16]
 80112c2:	edd1 ea00 	vldr	s29, [r1]
 80112c6:	edd0 aa01 	vldr	s21, [r0, #4]
 80112ca:	9805      	ldr	r0, [sp, #20]
 80112cc:	9905      	ldr	r1, [sp, #20]
 80112ce:	edd0 7a01 	vldr	s15, [r0, #4]
 80112d2:	ed91 da00 	vldr	s26, [r1]
 80112d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80112d8:	9c04      	ldr	r4, [sp, #16]
 80112da:	edcd 7a01 	vstr	s15, [sp, #4]
 80112de:	edd8 7a01 	vldr	s15, [r8, #4]
 80112e2:	9100      	str	r1, [sp, #0]
 80112e4:	edd2 fa00 	vldr	s31, [r2]
 80112e8:	ed94 ea00 	vldr	s28, [r4]
 80112ec:	ed92 ca01 	vldr	s24, [r2, #4]
 80112f0:	f8dd e020 	ldr.w	lr, [sp, #32]
 80112f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80112f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80112f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80112fa:	edd9 da00 	vldr	s27, [r9]
 80112fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011300:	edd8 ca00 	vldr	s25, [r8]
 8011304:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011306:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011308:	f8dd c018 	ldr.w	ip, [sp, #24]
 801130c:	ed99 aa01 	vldr	s20, [r9, #4]
 8011310:	edcd 7a02 	vstr	s15, [sp, #8]
 8011314:	9800      	ldr	r0, [sp, #0]
 8011316:	e001      	b.n	801131c <arm_radix8_butterfly_f32+0x328>
 8011318:	3f3504f3 	.word	0x3f3504f3
 801131c:	edd5 3a00 	vldr	s7, [r5]
 8011320:	44dc      	add	ip, fp
 8011322:	ed91 7a00 	vldr	s14, [r1]
 8011326:	edd4 8a00 	vldr	s17, [r4]
 801132a:	45e2      	cmp	sl, ip
 801132c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8011330:	ed90 5a00 	vldr	s10, [r0]
 8011334:	ed56 5a01 	vldr	s11, [r6, #-4]
 8011338:	ee38 6aa7 	vadd.f32	s12, s17, s15
 801133c:	ed92 1a00 	vldr	s2, [r2]
 8011340:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8011344:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8011348:	ee75 9a25 	vadd.f32	s19, s10, s11
 801134c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8011350:	ed92 8a01 	vldr	s16, [r2, #4]
 8011354:	ee73 6a84 	vadd.f32	s13, s7, s8
 8011358:	ee75 5a65 	vsub.f32	s11, s10, s11
 801135c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8011360:	ee73 1a06 	vadd.f32	s3, s6, s12
 8011364:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8011368:	ee75 7a84 	vadd.f32	s15, s11, s8
 801136c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8011370:	ee31 7a85 	vadd.f32	s14, s3, s10
 8011374:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011378:	ee33 3a46 	vsub.f32	s6, s6, s12
 801137c:	ed82 7a00 	vstr	s14, [r2]
 8011380:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8011384:	ed96 6a00 	vldr	s12, [r6]
 8011388:	ee34 2aa7 	vadd.f32	s4, s9, s15
 801138c:	edd5 3a01 	vldr	s7, [r5, #4]
 8011390:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8011394:	ed90 7a01 	vldr	s14, [r0, #4]
 8011398:	ee35 4ac4 	vsub.f32	s8, s11, s8
 801139c:	edde 4a00 	vldr	s9, [lr]
 80113a0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80113a4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80113a8:	edd1 6a01 	vldr	s13, [r1, #4]
 80113ac:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80113b0:	edd7 0a00 	vldr	s1, [r7]
 80113b4:	ee77 5a06 	vadd.f32	s11, s14, s12
 80113b8:	ed94 7a01 	vldr	s14, [r4, #4]
 80113bc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80113c0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80113c4:	ee78 4a66 	vsub.f32	s9, s16, s13
 80113c8:	ee78 3a26 	vadd.f32	s7, s16, s13
 80113cc:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80113d0:	ee77 6a20 	vadd.f32	s13, s14, s1
 80113d4:	ee24 4a09 	vmul.f32	s8, s8, s18
 80113d8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80113dc:	ee20 8a09 	vmul.f32	s16, s0, s18
 80113e0:	ee75 0a86 	vadd.f32	s1, s11, s12
 80113e4:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80113e8:	ee62 2a89 	vmul.f32	s5, s5, s18
 80113ec:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80113f0:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80113f4:	ee77 7a62 	vsub.f32	s15, s14, s5
 80113f8:	ee74 5a88 	vadd.f32	s11, s9, s16
 80113fc:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8011400:	ee77 4a22 	vadd.f32	s9, s14, s5
 8011404:	ee71 2a04 	vadd.f32	s5, s2, s8
 8011408:	ee31 7a44 	vsub.f32	s14, s2, s8
 801140c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8011410:	ee73 1a06 	vadd.f32	s3, s6, s12
 8011414:	ee33 6a46 	vsub.f32	s12, s6, s12
 8011418:	ee33 3ae9 	vsub.f32	s6, s7, s19
 801141c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8011420:	ee38 4a68 	vsub.f32	s8, s16, s17
 8011424:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8011428:	ee72 5a25 	vadd.f32	s11, s4, s11
 801142c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8011430:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8011434:	ee77 2a27 	vadd.f32	s5, s14, s15
 8011438:	ee37 7a67 	vsub.f32	s14, s14, s15
 801143c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8011440:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8011444:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8011448:	ee2a 5a85 	vmul.f32	s10, s21, s10
 801144c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8011450:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8011454:	ee70 0a20 	vadd.f32	s1, s0, s1
 8011458:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 801145c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8011460:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8011464:	edc2 0a01 	vstr	s1, [r2, #4]
 8011468:	ee38 8a88 	vadd.f32	s16, s17, s16
 801146c:	441a      	add	r2, r3
 801146e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8011472:	ee31 5a45 	vsub.f32	s10, s2, s10
 8011476:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 801147a:	ed81 8a00 	vstr	s16, [r1]
 801147e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8011482:	ee33 3a61 	vsub.f32	s6, s6, s3
 8011486:	ed81 5a01 	vstr	s10, [r1, #4]
 801148a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 801148e:	edcd 3a00 	vstr	s7, [sp]
 8011492:	ed9d 5a02 	vldr	s10, [sp, #8]
 8011496:	ee2d 8a06 	vmul.f32	s16, s26, s12
 801149a:	eddd 3a01 	vldr	s7, [sp, #4]
 801149e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80114a2:	ed84 0a00 	vstr	s0, [r4]
 80114a6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80114aa:	ed84 3a01 	vstr	s6, [r4, #4]
 80114ae:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80114b2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80114b6:	eddd 3a00 	vldr	s7, [sp]
 80114ba:	ee25 5a25 	vmul.f32	s10, s10, s11
 80114be:	4419      	add	r1, r3
 80114c0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80114c4:	441c      	add	r4, r3
 80114c6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80114ca:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80114ce:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80114d2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80114d6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80114da:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80114de:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80114e2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80114e6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80114ea:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80114ee:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80114f2:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80114f6:	ee38 8a01 	vadd.f32	s16, s16, s2
 80114fa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80114fe:	ee39 5a85 	vadd.f32	s10, s19, s10
 8011502:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8011506:	ed07 8a01 	vstr	s16, [r7, #-4]
 801150a:	ee30 0a21 	vadd.f32	s0, s0, s3
 801150e:	ed87 6a00 	vstr	s12, [r7]
 8011512:	ee74 2a62 	vsub.f32	s5, s8, s5
 8011516:	edc0 0a00 	vstr	s1, [r0]
 801151a:	ee33 3a28 	vadd.f32	s6, s6, s17
 801151e:	edc0 3a01 	vstr	s7, [r0, #4]
 8011522:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011526:	ed0e 5a01 	vstr	s10, [lr, #-4]
 801152a:	edce 4a00 	vstr	s9, [lr]
 801152e:	4418      	add	r0, r3
 8011530:	ed06 0a01 	vstr	s0, [r6, #-4]
 8011534:	441f      	add	r7, r3
 8011536:	edc6 2a00 	vstr	s5, [r6]
 801153a:	449e      	add	lr, r3
 801153c:	ed85 3a00 	vstr	s6, [r5]
 8011540:	441e      	add	r6, r3
 8011542:	ed85 7a01 	vstr	s14, [r5, #4]
 8011546:	441d      	add	r5, r3
 8011548:	f63f aee8 	bhi.w	801131c <arm_radix8_butterfly_f32+0x328>
 801154c:	9a06      	ldr	r2, [sp, #24]
 801154e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8011550:	3201      	adds	r2, #1
 8011552:	4611      	mov	r1, r2
 8011554:	9206      	str	r2, [sp, #24]
 8011556:	9a07      	ldr	r2, [sp, #28]
 8011558:	4402      	add	r2, r0
 801155a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801155c:	9207      	str	r2, [sp, #28]
 801155e:	9a03      	ldr	r2, [sp, #12]
 8011560:	4402      	add	r2, r0
 8011562:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011564:	9203      	str	r2, [sp, #12]
 8011566:	9a04      	ldr	r2, [sp, #16]
 8011568:	4402      	add	r2, r0
 801156a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801156c:	9204      	str	r2, [sp, #16]
 801156e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011570:	4491      	add	r9, r2
 8011572:	9a05      	ldr	r2, [sp, #20]
 8011574:	4402      	add	r2, r0
 8011576:	9205      	str	r2, [sp, #20]
 8011578:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801157a:	4490      	add	r8, r2
 801157c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801157e:	3208      	adds	r2, #8
 8011580:	920f      	str	r2, [sp, #60]	; 0x3c
 8011582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011584:	3208      	adds	r2, #8
 8011586:	920e      	str	r2, [sp, #56]	; 0x38
 8011588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801158a:	3208      	adds	r2, #8
 801158c:	920d      	str	r2, [sp, #52]	; 0x34
 801158e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011590:	3208      	adds	r2, #8
 8011592:	920c      	str	r2, [sp, #48]	; 0x30
 8011594:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011596:	3208      	adds	r2, #8
 8011598:	920b      	str	r2, [sp, #44]	; 0x2c
 801159a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801159c:	3208      	adds	r2, #8
 801159e:	920a      	str	r2, [sp, #40]	; 0x28
 80115a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115a2:	3208      	adds	r2, #8
 80115a4:	9209      	str	r2, [sp, #36]	; 0x24
 80115a6:	9a08      	ldr	r2, [sp, #32]
 80115a8:	3208      	adds	r2, #8
 80115aa:	9208      	str	r2, [sp, #32]
 80115ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80115ae:	9811      	ldr	r0, [sp, #68]	; 0x44
 80115b0:	4622      	mov	r2, r4
 80115b2:	4288      	cmp	r0, r1
 80115b4:	d005      	beq.n	80115c2 <arm_radix8_butterfly_f32+0x5ce>
 80115b6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80115b8:	4621      	mov	r1, r4
 80115ba:	4401      	add	r1, r0
 80115bc:	9807      	ldr	r0, [sp, #28]
 80115be:	9110      	str	r1, [sp, #64]	; 0x40
 80115c0:	e676      	b.n	80112b0 <arm_radix8_butterfly_f32+0x2bc>
 80115c2:	4683      	mov	fp, r0
 80115c4:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 80115c8:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 80115cc:	e522      	b.n	8011014 <arm_radix8_butterfly_f32+0x20>
 80115ce:	b01d      	add	sp, #116	; 0x74
 80115d0:	ecbd 8b10 	vpop	{d8-d15}
 80115d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080115d8 <__errno>:
 80115d8:	4b01      	ldr	r3, [pc, #4]	; (80115e0 <__errno+0x8>)
 80115da:	6818      	ldr	r0, [r3, #0]
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop
 80115e0:	200013b8 	.word	0x200013b8

080115e4 <__libc_init_array>:
 80115e4:	b570      	push	{r4, r5, r6, lr}
 80115e6:	4d0d      	ldr	r5, [pc, #52]	; (801161c <__libc_init_array+0x38>)
 80115e8:	4c0d      	ldr	r4, [pc, #52]	; (8011620 <__libc_init_array+0x3c>)
 80115ea:	1b64      	subs	r4, r4, r5
 80115ec:	10a4      	asrs	r4, r4, #2
 80115ee:	2600      	movs	r6, #0
 80115f0:	42a6      	cmp	r6, r4
 80115f2:	d109      	bne.n	8011608 <__libc_init_array+0x24>
 80115f4:	4d0b      	ldr	r5, [pc, #44]	; (8011624 <__libc_init_array+0x40>)
 80115f6:	4c0c      	ldr	r4, [pc, #48]	; (8011628 <__libc_init_array+0x44>)
 80115f8:	f001 fc56 	bl	8012ea8 <_init>
 80115fc:	1b64      	subs	r4, r4, r5
 80115fe:	10a4      	asrs	r4, r4, #2
 8011600:	2600      	movs	r6, #0
 8011602:	42a6      	cmp	r6, r4
 8011604:	d105      	bne.n	8011612 <__libc_init_array+0x2e>
 8011606:	bd70      	pop	{r4, r5, r6, pc}
 8011608:	f855 3b04 	ldr.w	r3, [r5], #4
 801160c:	4798      	blx	r3
 801160e:	3601      	adds	r6, #1
 8011610:	e7ee      	b.n	80115f0 <__libc_init_array+0xc>
 8011612:	f855 3b04 	ldr.w	r3, [r5], #4
 8011616:	4798      	blx	r3
 8011618:	3601      	adds	r6, #1
 801161a:	e7f2      	b.n	8011602 <__libc_init_array+0x1e>
 801161c:	08185000 	.word	0x08185000
 8011620:	08185000 	.word	0x08185000
 8011624:	08185000 	.word	0x08185000
 8011628:	08185004 	.word	0x08185004

0801162c <memcpy>:
 801162c:	440a      	add	r2, r1
 801162e:	4291      	cmp	r1, r2
 8011630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011634:	d100      	bne.n	8011638 <memcpy+0xc>
 8011636:	4770      	bx	lr
 8011638:	b510      	push	{r4, lr}
 801163a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801163e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011642:	4291      	cmp	r1, r2
 8011644:	d1f9      	bne.n	801163a <memcpy+0xe>
 8011646:	bd10      	pop	{r4, pc}

08011648 <memset>:
 8011648:	4402      	add	r2, r0
 801164a:	4603      	mov	r3, r0
 801164c:	4293      	cmp	r3, r2
 801164e:	d100      	bne.n	8011652 <memset+0xa>
 8011650:	4770      	bx	lr
 8011652:	f803 1b01 	strb.w	r1, [r3], #1
 8011656:	e7f9      	b.n	801164c <memset+0x4>

08011658 <_free_r>:
 8011658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801165a:	2900      	cmp	r1, #0
 801165c:	d044      	beq.n	80116e8 <_free_r+0x90>
 801165e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011662:	9001      	str	r0, [sp, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	f1a1 0404 	sub.w	r4, r1, #4
 801166a:	bfb8      	it	lt
 801166c:	18e4      	addlt	r4, r4, r3
 801166e:	f000 f903 	bl	8011878 <__malloc_lock>
 8011672:	4a1e      	ldr	r2, [pc, #120]	; (80116ec <_free_r+0x94>)
 8011674:	9801      	ldr	r0, [sp, #4]
 8011676:	6813      	ldr	r3, [r2, #0]
 8011678:	b933      	cbnz	r3, 8011688 <_free_r+0x30>
 801167a:	6063      	str	r3, [r4, #4]
 801167c:	6014      	str	r4, [r2, #0]
 801167e:	b003      	add	sp, #12
 8011680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011684:	f000 b8fe 	b.w	8011884 <__malloc_unlock>
 8011688:	42a3      	cmp	r3, r4
 801168a:	d908      	bls.n	801169e <_free_r+0x46>
 801168c:	6825      	ldr	r5, [r4, #0]
 801168e:	1961      	adds	r1, r4, r5
 8011690:	428b      	cmp	r3, r1
 8011692:	bf01      	itttt	eq
 8011694:	6819      	ldreq	r1, [r3, #0]
 8011696:	685b      	ldreq	r3, [r3, #4]
 8011698:	1949      	addeq	r1, r1, r5
 801169a:	6021      	streq	r1, [r4, #0]
 801169c:	e7ed      	b.n	801167a <_free_r+0x22>
 801169e:	461a      	mov	r2, r3
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	b10b      	cbz	r3, 80116a8 <_free_r+0x50>
 80116a4:	42a3      	cmp	r3, r4
 80116a6:	d9fa      	bls.n	801169e <_free_r+0x46>
 80116a8:	6811      	ldr	r1, [r2, #0]
 80116aa:	1855      	adds	r5, r2, r1
 80116ac:	42a5      	cmp	r5, r4
 80116ae:	d10b      	bne.n	80116c8 <_free_r+0x70>
 80116b0:	6824      	ldr	r4, [r4, #0]
 80116b2:	4421      	add	r1, r4
 80116b4:	1854      	adds	r4, r2, r1
 80116b6:	42a3      	cmp	r3, r4
 80116b8:	6011      	str	r1, [r2, #0]
 80116ba:	d1e0      	bne.n	801167e <_free_r+0x26>
 80116bc:	681c      	ldr	r4, [r3, #0]
 80116be:	685b      	ldr	r3, [r3, #4]
 80116c0:	6053      	str	r3, [r2, #4]
 80116c2:	4421      	add	r1, r4
 80116c4:	6011      	str	r1, [r2, #0]
 80116c6:	e7da      	b.n	801167e <_free_r+0x26>
 80116c8:	d902      	bls.n	80116d0 <_free_r+0x78>
 80116ca:	230c      	movs	r3, #12
 80116cc:	6003      	str	r3, [r0, #0]
 80116ce:	e7d6      	b.n	801167e <_free_r+0x26>
 80116d0:	6825      	ldr	r5, [r4, #0]
 80116d2:	1961      	adds	r1, r4, r5
 80116d4:	428b      	cmp	r3, r1
 80116d6:	bf04      	itt	eq
 80116d8:	6819      	ldreq	r1, [r3, #0]
 80116da:	685b      	ldreq	r3, [r3, #4]
 80116dc:	6063      	str	r3, [r4, #4]
 80116de:	bf04      	itt	eq
 80116e0:	1949      	addeq	r1, r1, r5
 80116e2:	6021      	streq	r1, [r4, #0]
 80116e4:	6054      	str	r4, [r2, #4]
 80116e6:	e7ca      	b.n	801167e <_free_r+0x26>
 80116e8:	b003      	add	sp, #12
 80116ea:	bd30      	pop	{r4, r5, pc}
 80116ec:	2001a124 	.word	0x2001a124

080116f0 <sbrk_aligned>:
 80116f0:	b570      	push	{r4, r5, r6, lr}
 80116f2:	4e0e      	ldr	r6, [pc, #56]	; (801172c <sbrk_aligned+0x3c>)
 80116f4:	460c      	mov	r4, r1
 80116f6:	6831      	ldr	r1, [r6, #0]
 80116f8:	4605      	mov	r5, r0
 80116fa:	b911      	cbnz	r1, 8011702 <sbrk_aligned+0x12>
 80116fc:	f000 f88c 	bl	8011818 <_sbrk_r>
 8011700:	6030      	str	r0, [r6, #0]
 8011702:	4621      	mov	r1, r4
 8011704:	4628      	mov	r0, r5
 8011706:	f000 f887 	bl	8011818 <_sbrk_r>
 801170a:	1c43      	adds	r3, r0, #1
 801170c:	d00a      	beq.n	8011724 <sbrk_aligned+0x34>
 801170e:	1cc4      	adds	r4, r0, #3
 8011710:	f024 0403 	bic.w	r4, r4, #3
 8011714:	42a0      	cmp	r0, r4
 8011716:	d007      	beq.n	8011728 <sbrk_aligned+0x38>
 8011718:	1a21      	subs	r1, r4, r0
 801171a:	4628      	mov	r0, r5
 801171c:	f000 f87c 	bl	8011818 <_sbrk_r>
 8011720:	3001      	adds	r0, #1
 8011722:	d101      	bne.n	8011728 <sbrk_aligned+0x38>
 8011724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011728:	4620      	mov	r0, r4
 801172a:	bd70      	pop	{r4, r5, r6, pc}
 801172c:	2001a128 	.word	0x2001a128

08011730 <_malloc_r>:
 8011730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011734:	1ccd      	adds	r5, r1, #3
 8011736:	f025 0503 	bic.w	r5, r5, #3
 801173a:	3508      	adds	r5, #8
 801173c:	2d0c      	cmp	r5, #12
 801173e:	bf38      	it	cc
 8011740:	250c      	movcc	r5, #12
 8011742:	2d00      	cmp	r5, #0
 8011744:	4607      	mov	r7, r0
 8011746:	db01      	blt.n	801174c <_malloc_r+0x1c>
 8011748:	42a9      	cmp	r1, r5
 801174a:	d905      	bls.n	8011758 <_malloc_r+0x28>
 801174c:	230c      	movs	r3, #12
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	2600      	movs	r6, #0
 8011752:	4630      	mov	r0, r6
 8011754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011758:	4e2e      	ldr	r6, [pc, #184]	; (8011814 <_malloc_r+0xe4>)
 801175a:	f000 f88d 	bl	8011878 <__malloc_lock>
 801175e:	6833      	ldr	r3, [r6, #0]
 8011760:	461c      	mov	r4, r3
 8011762:	bb34      	cbnz	r4, 80117b2 <_malloc_r+0x82>
 8011764:	4629      	mov	r1, r5
 8011766:	4638      	mov	r0, r7
 8011768:	f7ff ffc2 	bl	80116f0 <sbrk_aligned>
 801176c:	1c43      	adds	r3, r0, #1
 801176e:	4604      	mov	r4, r0
 8011770:	d14d      	bne.n	801180e <_malloc_r+0xde>
 8011772:	6834      	ldr	r4, [r6, #0]
 8011774:	4626      	mov	r6, r4
 8011776:	2e00      	cmp	r6, #0
 8011778:	d140      	bne.n	80117fc <_malloc_r+0xcc>
 801177a:	6823      	ldr	r3, [r4, #0]
 801177c:	4631      	mov	r1, r6
 801177e:	4638      	mov	r0, r7
 8011780:	eb04 0803 	add.w	r8, r4, r3
 8011784:	f000 f848 	bl	8011818 <_sbrk_r>
 8011788:	4580      	cmp	r8, r0
 801178a:	d13a      	bne.n	8011802 <_malloc_r+0xd2>
 801178c:	6821      	ldr	r1, [r4, #0]
 801178e:	3503      	adds	r5, #3
 8011790:	1a6d      	subs	r5, r5, r1
 8011792:	f025 0503 	bic.w	r5, r5, #3
 8011796:	3508      	adds	r5, #8
 8011798:	2d0c      	cmp	r5, #12
 801179a:	bf38      	it	cc
 801179c:	250c      	movcc	r5, #12
 801179e:	4629      	mov	r1, r5
 80117a0:	4638      	mov	r0, r7
 80117a2:	f7ff ffa5 	bl	80116f0 <sbrk_aligned>
 80117a6:	3001      	adds	r0, #1
 80117a8:	d02b      	beq.n	8011802 <_malloc_r+0xd2>
 80117aa:	6823      	ldr	r3, [r4, #0]
 80117ac:	442b      	add	r3, r5
 80117ae:	6023      	str	r3, [r4, #0]
 80117b0:	e00e      	b.n	80117d0 <_malloc_r+0xa0>
 80117b2:	6822      	ldr	r2, [r4, #0]
 80117b4:	1b52      	subs	r2, r2, r5
 80117b6:	d41e      	bmi.n	80117f6 <_malloc_r+0xc6>
 80117b8:	2a0b      	cmp	r2, #11
 80117ba:	d916      	bls.n	80117ea <_malloc_r+0xba>
 80117bc:	1961      	adds	r1, r4, r5
 80117be:	42a3      	cmp	r3, r4
 80117c0:	6025      	str	r5, [r4, #0]
 80117c2:	bf18      	it	ne
 80117c4:	6059      	strne	r1, [r3, #4]
 80117c6:	6863      	ldr	r3, [r4, #4]
 80117c8:	bf08      	it	eq
 80117ca:	6031      	streq	r1, [r6, #0]
 80117cc:	5162      	str	r2, [r4, r5]
 80117ce:	604b      	str	r3, [r1, #4]
 80117d0:	4638      	mov	r0, r7
 80117d2:	f104 060b 	add.w	r6, r4, #11
 80117d6:	f000 f855 	bl	8011884 <__malloc_unlock>
 80117da:	f026 0607 	bic.w	r6, r6, #7
 80117de:	1d23      	adds	r3, r4, #4
 80117e0:	1af2      	subs	r2, r6, r3
 80117e2:	d0b6      	beq.n	8011752 <_malloc_r+0x22>
 80117e4:	1b9b      	subs	r3, r3, r6
 80117e6:	50a3      	str	r3, [r4, r2]
 80117e8:	e7b3      	b.n	8011752 <_malloc_r+0x22>
 80117ea:	6862      	ldr	r2, [r4, #4]
 80117ec:	42a3      	cmp	r3, r4
 80117ee:	bf0c      	ite	eq
 80117f0:	6032      	streq	r2, [r6, #0]
 80117f2:	605a      	strne	r2, [r3, #4]
 80117f4:	e7ec      	b.n	80117d0 <_malloc_r+0xa0>
 80117f6:	4623      	mov	r3, r4
 80117f8:	6864      	ldr	r4, [r4, #4]
 80117fa:	e7b2      	b.n	8011762 <_malloc_r+0x32>
 80117fc:	4634      	mov	r4, r6
 80117fe:	6876      	ldr	r6, [r6, #4]
 8011800:	e7b9      	b.n	8011776 <_malloc_r+0x46>
 8011802:	230c      	movs	r3, #12
 8011804:	603b      	str	r3, [r7, #0]
 8011806:	4638      	mov	r0, r7
 8011808:	f000 f83c 	bl	8011884 <__malloc_unlock>
 801180c:	e7a1      	b.n	8011752 <_malloc_r+0x22>
 801180e:	6025      	str	r5, [r4, #0]
 8011810:	e7de      	b.n	80117d0 <_malloc_r+0xa0>
 8011812:	bf00      	nop
 8011814:	2001a124 	.word	0x2001a124

08011818 <_sbrk_r>:
 8011818:	b538      	push	{r3, r4, r5, lr}
 801181a:	4d06      	ldr	r5, [pc, #24]	; (8011834 <_sbrk_r+0x1c>)
 801181c:	2300      	movs	r3, #0
 801181e:	4604      	mov	r4, r0
 8011820:	4608      	mov	r0, r1
 8011822:	602b      	str	r3, [r5, #0]
 8011824:	f7f0 f8de 	bl	80019e4 <_sbrk>
 8011828:	1c43      	adds	r3, r0, #1
 801182a:	d102      	bne.n	8011832 <_sbrk_r+0x1a>
 801182c:	682b      	ldr	r3, [r5, #0]
 801182e:	b103      	cbz	r3, 8011832 <_sbrk_r+0x1a>
 8011830:	6023      	str	r3, [r4, #0]
 8011832:	bd38      	pop	{r3, r4, r5, pc}
 8011834:	2001a12c 	.word	0x2001a12c

08011838 <siprintf>:
 8011838:	b40e      	push	{r1, r2, r3}
 801183a:	b500      	push	{lr}
 801183c:	b09c      	sub	sp, #112	; 0x70
 801183e:	ab1d      	add	r3, sp, #116	; 0x74
 8011840:	9002      	str	r0, [sp, #8]
 8011842:	9006      	str	r0, [sp, #24]
 8011844:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011848:	4809      	ldr	r0, [pc, #36]	; (8011870 <siprintf+0x38>)
 801184a:	9107      	str	r1, [sp, #28]
 801184c:	9104      	str	r1, [sp, #16]
 801184e:	4909      	ldr	r1, [pc, #36]	; (8011874 <siprintf+0x3c>)
 8011850:	f853 2b04 	ldr.w	r2, [r3], #4
 8011854:	9105      	str	r1, [sp, #20]
 8011856:	6800      	ldr	r0, [r0, #0]
 8011858:	9301      	str	r3, [sp, #4]
 801185a:	a902      	add	r1, sp, #8
 801185c:	f000 f8a2 	bl	80119a4 <_svfiprintf_r>
 8011860:	9b02      	ldr	r3, [sp, #8]
 8011862:	2200      	movs	r2, #0
 8011864:	701a      	strb	r2, [r3, #0]
 8011866:	b01c      	add	sp, #112	; 0x70
 8011868:	f85d eb04 	ldr.w	lr, [sp], #4
 801186c:	b003      	add	sp, #12
 801186e:	4770      	bx	lr
 8011870:	200013b8 	.word	0x200013b8
 8011874:	ffff0208 	.word	0xffff0208

08011878 <__malloc_lock>:
 8011878:	4801      	ldr	r0, [pc, #4]	; (8011880 <__malloc_lock+0x8>)
 801187a:	f000 bb27 	b.w	8011ecc <__retarget_lock_acquire_recursive>
 801187e:	bf00      	nop
 8011880:	2001a130 	.word	0x2001a130

08011884 <__malloc_unlock>:
 8011884:	4801      	ldr	r0, [pc, #4]	; (801188c <__malloc_unlock+0x8>)
 8011886:	f000 bb22 	b.w	8011ece <__retarget_lock_release_recursive>
 801188a:	bf00      	nop
 801188c:	2001a130 	.word	0x2001a130

08011890 <_realloc_r>:
 8011890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011894:	4680      	mov	r8, r0
 8011896:	4614      	mov	r4, r2
 8011898:	460e      	mov	r6, r1
 801189a:	b921      	cbnz	r1, 80118a6 <_realloc_r+0x16>
 801189c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80118a0:	4611      	mov	r1, r2
 80118a2:	f7ff bf45 	b.w	8011730 <_malloc_r>
 80118a6:	b92a      	cbnz	r2, 80118b4 <_realloc_r+0x24>
 80118a8:	f7ff fed6 	bl	8011658 <_free_r>
 80118ac:	4625      	mov	r5, r4
 80118ae:	4628      	mov	r0, r5
 80118b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118b4:	f000 fb26 	bl	8011f04 <_malloc_usable_size_r>
 80118b8:	4284      	cmp	r4, r0
 80118ba:	4607      	mov	r7, r0
 80118bc:	d802      	bhi.n	80118c4 <_realloc_r+0x34>
 80118be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80118c2:	d812      	bhi.n	80118ea <_realloc_r+0x5a>
 80118c4:	4621      	mov	r1, r4
 80118c6:	4640      	mov	r0, r8
 80118c8:	f7ff ff32 	bl	8011730 <_malloc_r>
 80118cc:	4605      	mov	r5, r0
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d0ed      	beq.n	80118ae <_realloc_r+0x1e>
 80118d2:	42bc      	cmp	r4, r7
 80118d4:	4622      	mov	r2, r4
 80118d6:	4631      	mov	r1, r6
 80118d8:	bf28      	it	cs
 80118da:	463a      	movcs	r2, r7
 80118dc:	f7ff fea6 	bl	801162c <memcpy>
 80118e0:	4631      	mov	r1, r6
 80118e2:	4640      	mov	r0, r8
 80118e4:	f7ff feb8 	bl	8011658 <_free_r>
 80118e8:	e7e1      	b.n	80118ae <_realloc_r+0x1e>
 80118ea:	4635      	mov	r5, r6
 80118ec:	e7df      	b.n	80118ae <_realloc_r+0x1e>

080118ee <__ssputs_r>:
 80118ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118f2:	688e      	ldr	r6, [r1, #8]
 80118f4:	429e      	cmp	r6, r3
 80118f6:	4682      	mov	sl, r0
 80118f8:	460c      	mov	r4, r1
 80118fa:	4690      	mov	r8, r2
 80118fc:	461f      	mov	r7, r3
 80118fe:	d838      	bhi.n	8011972 <__ssputs_r+0x84>
 8011900:	898a      	ldrh	r2, [r1, #12]
 8011902:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011906:	d032      	beq.n	801196e <__ssputs_r+0x80>
 8011908:	6825      	ldr	r5, [r4, #0]
 801190a:	6909      	ldr	r1, [r1, #16]
 801190c:	eba5 0901 	sub.w	r9, r5, r1
 8011910:	6965      	ldr	r5, [r4, #20]
 8011912:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801191a:	3301      	adds	r3, #1
 801191c:	444b      	add	r3, r9
 801191e:	106d      	asrs	r5, r5, #1
 8011920:	429d      	cmp	r5, r3
 8011922:	bf38      	it	cc
 8011924:	461d      	movcc	r5, r3
 8011926:	0553      	lsls	r3, r2, #21
 8011928:	d531      	bpl.n	801198e <__ssputs_r+0xa0>
 801192a:	4629      	mov	r1, r5
 801192c:	f7ff ff00 	bl	8011730 <_malloc_r>
 8011930:	4606      	mov	r6, r0
 8011932:	b950      	cbnz	r0, 801194a <__ssputs_r+0x5c>
 8011934:	230c      	movs	r3, #12
 8011936:	f8ca 3000 	str.w	r3, [sl]
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011940:	81a3      	strh	r3, [r4, #12]
 8011942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801194a:	6921      	ldr	r1, [r4, #16]
 801194c:	464a      	mov	r2, r9
 801194e:	f7ff fe6d 	bl	801162c <memcpy>
 8011952:	89a3      	ldrh	r3, [r4, #12]
 8011954:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	6126      	str	r6, [r4, #16]
 8011960:	6165      	str	r5, [r4, #20]
 8011962:	444e      	add	r6, r9
 8011964:	eba5 0509 	sub.w	r5, r5, r9
 8011968:	6026      	str	r6, [r4, #0]
 801196a:	60a5      	str	r5, [r4, #8]
 801196c:	463e      	mov	r6, r7
 801196e:	42be      	cmp	r6, r7
 8011970:	d900      	bls.n	8011974 <__ssputs_r+0x86>
 8011972:	463e      	mov	r6, r7
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	4632      	mov	r2, r6
 8011978:	4641      	mov	r1, r8
 801197a:	f000 faa9 	bl	8011ed0 <memmove>
 801197e:	68a3      	ldr	r3, [r4, #8]
 8011980:	1b9b      	subs	r3, r3, r6
 8011982:	60a3      	str	r3, [r4, #8]
 8011984:	6823      	ldr	r3, [r4, #0]
 8011986:	4433      	add	r3, r6
 8011988:	6023      	str	r3, [r4, #0]
 801198a:	2000      	movs	r0, #0
 801198c:	e7db      	b.n	8011946 <__ssputs_r+0x58>
 801198e:	462a      	mov	r2, r5
 8011990:	f7ff ff7e 	bl	8011890 <_realloc_r>
 8011994:	4606      	mov	r6, r0
 8011996:	2800      	cmp	r0, #0
 8011998:	d1e1      	bne.n	801195e <__ssputs_r+0x70>
 801199a:	6921      	ldr	r1, [r4, #16]
 801199c:	4650      	mov	r0, sl
 801199e:	f7ff fe5b 	bl	8011658 <_free_r>
 80119a2:	e7c7      	b.n	8011934 <__ssputs_r+0x46>

080119a4 <_svfiprintf_r>:
 80119a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119a8:	4698      	mov	r8, r3
 80119aa:	898b      	ldrh	r3, [r1, #12]
 80119ac:	061b      	lsls	r3, r3, #24
 80119ae:	b09d      	sub	sp, #116	; 0x74
 80119b0:	4607      	mov	r7, r0
 80119b2:	460d      	mov	r5, r1
 80119b4:	4614      	mov	r4, r2
 80119b6:	d50e      	bpl.n	80119d6 <_svfiprintf_r+0x32>
 80119b8:	690b      	ldr	r3, [r1, #16]
 80119ba:	b963      	cbnz	r3, 80119d6 <_svfiprintf_r+0x32>
 80119bc:	2140      	movs	r1, #64	; 0x40
 80119be:	f7ff feb7 	bl	8011730 <_malloc_r>
 80119c2:	6028      	str	r0, [r5, #0]
 80119c4:	6128      	str	r0, [r5, #16]
 80119c6:	b920      	cbnz	r0, 80119d2 <_svfiprintf_r+0x2e>
 80119c8:	230c      	movs	r3, #12
 80119ca:	603b      	str	r3, [r7, #0]
 80119cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80119d0:	e0d1      	b.n	8011b76 <_svfiprintf_r+0x1d2>
 80119d2:	2340      	movs	r3, #64	; 0x40
 80119d4:	616b      	str	r3, [r5, #20]
 80119d6:	2300      	movs	r3, #0
 80119d8:	9309      	str	r3, [sp, #36]	; 0x24
 80119da:	2320      	movs	r3, #32
 80119dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80119e4:	2330      	movs	r3, #48	; 0x30
 80119e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011b90 <_svfiprintf_r+0x1ec>
 80119ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119ee:	f04f 0901 	mov.w	r9, #1
 80119f2:	4623      	mov	r3, r4
 80119f4:	469a      	mov	sl, r3
 80119f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119fa:	b10a      	cbz	r2, 8011a00 <_svfiprintf_r+0x5c>
 80119fc:	2a25      	cmp	r2, #37	; 0x25
 80119fe:	d1f9      	bne.n	80119f4 <_svfiprintf_r+0x50>
 8011a00:	ebba 0b04 	subs.w	fp, sl, r4
 8011a04:	d00b      	beq.n	8011a1e <_svfiprintf_r+0x7a>
 8011a06:	465b      	mov	r3, fp
 8011a08:	4622      	mov	r2, r4
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	4638      	mov	r0, r7
 8011a0e:	f7ff ff6e 	bl	80118ee <__ssputs_r>
 8011a12:	3001      	adds	r0, #1
 8011a14:	f000 80aa 	beq.w	8011b6c <_svfiprintf_r+0x1c8>
 8011a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a1a:	445a      	add	r2, fp
 8011a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8011a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f000 80a2 	beq.w	8011b6c <_svfiprintf_r+0x1c8>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a32:	f10a 0a01 	add.w	sl, sl, #1
 8011a36:	9304      	str	r3, [sp, #16]
 8011a38:	9307      	str	r3, [sp, #28]
 8011a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8011a40:	4654      	mov	r4, sl
 8011a42:	2205      	movs	r2, #5
 8011a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a48:	4851      	ldr	r0, [pc, #324]	; (8011b90 <_svfiprintf_r+0x1ec>)
 8011a4a:	f7ee fc61 	bl	8000310 <memchr>
 8011a4e:	9a04      	ldr	r2, [sp, #16]
 8011a50:	b9d8      	cbnz	r0, 8011a8a <_svfiprintf_r+0xe6>
 8011a52:	06d0      	lsls	r0, r2, #27
 8011a54:	bf44      	itt	mi
 8011a56:	2320      	movmi	r3, #32
 8011a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a5c:	0711      	lsls	r1, r2, #28
 8011a5e:	bf44      	itt	mi
 8011a60:	232b      	movmi	r3, #43	; 0x2b
 8011a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a66:	f89a 3000 	ldrb.w	r3, [sl]
 8011a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8011a6c:	d015      	beq.n	8011a9a <_svfiprintf_r+0xf6>
 8011a6e:	9a07      	ldr	r2, [sp, #28]
 8011a70:	4654      	mov	r4, sl
 8011a72:	2000      	movs	r0, #0
 8011a74:	f04f 0c0a 	mov.w	ip, #10
 8011a78:	4621      	mov	r1, r4
 8011a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a7e:	3b30      	subs	r3, #48	; 0x30
 8011a80:	2b09      	cmp	r3, #9
 8011a82:	d94e      	bls.n	8011b22 <_svfiprintf_r+0x17e>
 8011a84:	b1b0      	cbz	r0, 8011ab4 <_svfiprintf_r+0x110>
 8011a86:	9207      	str	r2, [sp, #28]
 8011a88:	e014      	b.n	8011ab4 <_svfiprintf_r+0x110>
 8011a8a:	eba0 0308 	sub.w	r3, r0, r8
 8011a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8011a92:	4313      	orrs	r3, r2
 8011a94:	9304      	str	r3, [sp, #16]
 8011a96:	46a2      	mov	sl, r4
 8011a98:	e7d2      	b.n	8011a40 <_svfiprintf_r+0x9c>
 8011a9a:	9b03      	ldr	r3, [sp, #12]
 8011a9c:	1d19      	adds	r1, r3, #4
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	9103      	str	r1, [sp, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	bfbb      	ittet	lt
 8011aa6:	425b      	neglt	r3, r3
 8011aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8011aac:	9307      	strge	r3, [sp, #28]
 8011aae:	9307      	strlt	r3, [sp, #28]
 8011ab0:	bfb8      	it	lt
 8011ab2:	9204      	strlt	r2, [sp, #16]
 8011ab4:	7823      	ldrb	r3, [r4, #0]
 8011ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8011ab8:	d10c      	bne.n	8011ad4 <_svfiprintf_r+0x130>
 8011aba:	7863      	ldrb	r3, [r4, #1]
 8011abc:	2b2a      	cmp	r3, #42	; 0x2a
 8011abe:	d135      	bne.n	8011b2c <_svfiprintf_r+0x188>
 8011ac0:	9b03      	ldr	r3, [sp, #12]
 8011ac2:	1d1a      	adds	r2, r3, #4
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	9203      	str	r2, [sp, #12]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	bfb8      	it	lt
 8011acc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ad0:	3402      	adds	r4, #2
 8011ad2:	9305      	str	r3, [sp, #20]
 8011ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011ba0 <_svfiprintf_r+0x1fc>
 8011ad8:	7821      	ldrb	r1, [r4, #0]
 8011ada:	2203      	movs	r2, #3
 8011adc:	4650      	mov	r0, sl
 8011ade:	f7ee fc17 	bl	8000310 <memchr>
 8011ae2:	b140      	cbz	r0, 8011af6 <_svfiprintf_r+0x152>
 8011ae4:	2340      	movs	r3, #64	; 0x40
 8011ae6:	eba0 000a 	sub.w	r0, r0, sl
 8011aea:	fa03 f000 	lsl.w	r0, r3, r0
 8011aee:	9b04      	ldr	r3, [sp, #16]
 8011af0:	4303      	orrs	r3, r0
 8011af2:	3401      	adds	r4, #1
 8011af4:	9304      	str	r3, [sp, #16]
 8011af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011afa:	4826      	ldr	r0, [pc, #152]	; (8011b94 <_svfiprintf_r+0x1f0>)
 8011afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b00:	2206      	movs	r2, #6
 8011b02:	f7ee fc05 	bl	8000310 <memchr>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d038      	beq.n	8011b7c <_svfiprintf_r+0x1d8>
 8011b0a:	4b23      	ldr	r3, [pc, #140]	; (8011b98 <_svfiprintf_r+0x1f4>)
 8011b0c:	bb1b      	cbnz	r3, 8011b56 <_svfiprintf_r+0x1b2>
 8011b0e:	9b03      	ldr	r3, [sp, #12]
 8011b10:	3307      	adds	r3, #7
 8011b12:	f023 0307 	bic.w	r3, r3, #7
 8011b16:	3308      	adds	r3, #8
 8011b18:	9303      	str	r3, [sp, #12]
 8011b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b1c:	4433      	add	r3, r6
 8011b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b20:	e767      	b.n	80119f2 <_svfiprintf_r+0x4e>
 8011b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b26:	460c      	mov	r4, r1
 8011b28:	2001      	movs	r0, #1
 8011b2a:	e7a5      	b.n	8011a78 <_svfiprintf_r+0xd4>
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	3401      	adds	r4, #1
 8011b30:	9305      	str	r3, [sp, #20]
 8011b32:	4619      	mov	r1, r3
 8011b34:	f04f 0c0a 	mov.w	ip, #10
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b3e:	3a30      	subs	r2, #48	; 0x30
 8011b40:	2a09      	cmp	r2, #9
 8011b42:	d903      	bls.n	8011b4c <_svfiprintf_r+0x1a8>
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d0c5      	beq.n	8011ad4 <_svfiprintf_r+0x130>
 8011b48:	9105      	str	r1, [sp, #20]
 8011b4a:	e7c3      	b.n	8011ad4 <_svfiprintf_r+0x130>
 8011b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b50:	4604      	mov	r4, r0
 8011b52:	2301      	movs	r3, #1
 8011b54:	e7f0      	b.n	8011b38 <_svfiprintf_r+0x194>
 8011b56:	ab03      	add	r3, sp, #12
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	462a      	mov	r2, r5
 8011b5c:	4b0f      	ldr	r3, [pc, #60]	; (8011b9c <_svfiprintf_r+0x1f8>)
 8011b5e:	a904      	add	r1, sp, #16
 8011b60:	4638      	mov	r0, r7
 8011b62:	f3af 8000 	nop.w
 8011b66:	1c42      	adds	r2, r0, #1
 8011b68:	4606      	mov	r6, r0
 8011b6a:	d1d6      	bne.n	8011b1a <_svfiprintf_r+0x176>
 8011b6c:	89ab      	ldrh	r3, [r5, #12]
 8011b6e:	065b      	lsls	r3, r3, #25
 8011b70:	f53f af2c 	bmi.w	80119cc <_svfiprintf_r+0x28>
 8011b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b76:	b01d      	add	sp, #116	; 0x74
 8011b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b7c:	ab03      	add	r3, sp, #12
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	462a      	mov	r2, r5
 8011b82:	4b06      	ldr	r3, [pc, #24]	; (8011b9c <_svfiprintf_r+0x1f8>)
 8011b84:	a904      	add	r1, sp, #16
 8011b86:	4638      	mov	r0, r7
 8011b88:	f000 f87a 	bl	8011c80 <_printf_i>
 8011b8c:	e7eb      	b.n	8011b66 <_svfiprintf_r+0x1c2>
 8011b8e:	bf00      	nop
 8011b90:	08184b80 	.word	0x08184b80
 8011b94:	08184b8a 	.word	0x08184b8a
 8011b98:	00000000 	.word	0x00000000
 8011b9c:	080118ef 	.word	0x080118ef
 8011ba0:	08184b86 	.word	0x08184b86

08011ba4 <_printf_common>:
 8011ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba8:	4616      	mov	r6, r2
 8011baa:	4699      	mov	r9, r3
 8011bac:	688a      	ldr	r2, [r1, #8]
 8011bae:	690b      	ldr	r3, [r1, #16]
 8011bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	bfb8      	it	lt
 8011bb8:	4613      	movlt	r3, r2
 8011bba:	6033      	str	r3, [r6, #0]
 8011bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011bc0:	4607      	mov	r7, r0
 8011bc2:	460c      	mov	r4, r1
 8011bc4:	b10a      	cbz	r2, 8011bca <_printf_common+0x26>
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	6033      	str	r3, [r6, #0]
 8011bca:	6823      	ldr	r3, [r4, #0]
 8011bcc:	0699      	lsls	r1, r3, #26
 8011bce:	bf42      	ittt	mi
 8011bd0:	6833      	ldrmi	r3, [r6, #0]
 8011bd2:	3302      	addmi	r3, #2
 8011bd4:	6033      	strmi	r3, [r6, #0]
 8011bd6:	6825      	ldr	r5, [r4, #0]
 8011bd8:	f015 0506 	ands.w	r5, r5, #6
 8011bdc:	d106      	bne.n	8011bec <_printf_common+0x48>
 8011bde:	f104 0a19 	add.w	sl, r4, #25
 8011be2:	68e3      	ldr	r3, [r4, #12]
 8011be4:	6832      	ldr	r2, [r6, #0]
 8011be6:	1a9b      	subs	r3, r3, r2
 8011be8:	42ab      	cmp	r3, r5
 8011bea:	dc26      	bgt.n	8011c3a <_printf_common+0x96>
 8011bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bf0:	1e13      	subs	r3, r2, #0
 8011bf2:	6822      	ldr	r2, [r4, #0]
 8011bf4:	bf18      	it	ne
 8011bf6:	2301      	movne	r3, #1
 8011bf8:	0692      	lsls	r2, r2, #26
 8011bfa:	d42b      	bmi.n	8011c54 <_printf_common+0xb0>
 8011bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c00:	4649      	mov	r1, r9
 8011c02:	4638      	mov	r0, r7
 8011c04:	47c0      	blx	r8
 8011c06:	3001      	adds	r0, #1
 8011c08:	d01e      	beq.n	8011c48 <_printf_common+0xa4>
 8011c0a:	6823      	ldr	r3, [r4, #0]
 8011c0c:	68e5      	ldr	r5, [r4, #12]
 8011c0e:	6832      	ldr	r2, [r6, #0]
 8011c10:	f003 0306 	and.w	r3, r3, #6
 8011c14:	2b04      	cmp	r3, #4
 8011c16:	bf08      	it	eq
 8011c18:	1aad      	subeq	r5, r5, r2
 8011c1a:	68a3      	ldr	r3, [r4, #8]
 8011c1c:	6922      	ldr	r2, [r4, #16]
 8011c1e:	bf0c      	ite	eq
 8011c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c24:	2500      	movne	r5, #0
 8011c26:	4293      	cmp	r3, r2
 8011c28:	bfc4      	itt	gt
 8011c2a:	1a9b      	subgt	r3, r3, r2
 8011c2c:	18ed      	addgt	r5, r5, r3
 8011c2e:	2600      	movs	r6, #0
 8011c30:	341a      	adds	r4, #26
 8011c32:	42b5      	cmp	r5, r6
 8011c34:	d11a      	bne.n	8011c6c <_printf_common+0xc8>
 8011c36:	2000      	movs	r0, #0
 8011c38:	e008      	b.n	8011c4c <_printf_common+0xa8>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	4652      	mov	r2, sl
 8011c3e:	4649      	mov	r1, r9
 8011c40:	4638      	mov	r0, r7
 8011c42:	47c0      	blx	r8
 8011c44:	3001      	adds	r0, #1
 8011c46:	d103      	bne.n	8011c50 <_printf_common+0xac>
 8011c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c50:	3501      	adds	r5, #1
 8011c52:	e7c6      	b.n	8011be2 <_printf_common+0x3e>
 8011c54:	18e1      	adds	r1, r4, r3
 8011c56:	1c5a      	adds	r2, r3, #1
 8011c58:	2030      	movs	r0, #48	; 0x30
 8011c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c5e:	4422      	add	r2, r4
 8011c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c68:	3302      	adds	r3, #2
 8011c6a:	e7c7      	b.n	8011bfc <_printf_common+0x58>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	4622      	mov	r2, r4
 8011c70:	4649      	mov	r1, r9
 8011c72:	4638      	mov	r0, r7
 8011c74:	47c0      	blx	r8
 8011c76:	3001      	adds	r0, #1
 8011c78:	d0e6      	beq.n	8011c48 <_printf_common+0xa4>
 8011c7a:	3601      	adds	r6, #1
 8011c7c:	e7d9      	b.n	8011c32 <_printf_common+0x8e>
	...

08011c80 <_printf_i>:
 8011c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c84:	7e0f      	ldrb	r7, [r1, #24]
 8011c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c88:	2f78      	cmp	r7, #120	; 0x78
 8011c8a:	4691      	mov	r9, r2
 8011c8c:	4680      	mov	r8, r0
 8011c8e:	460c      	mov	r4, r1
 8011c90:	469a      	mov	sl, r3
 8011c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c96:	d807      	bhi.n	8011ca8 <_printf_i+0x28>
 8011c98:	2f62      	cmp	r7, #98	; 0x62
 8011c9a:	d80a      	bhi.n	8011cb2 <_printf_i+0x32>
 8011c9c:	2f00      	cmp	r7, #0
 8011c9e:	f000 80d8 	beq.w	8011e52 <_printf_i+0x1d2>
 8011ca2:	2f58      	cmp	r7, #88	; 0x58
 8011ca4:	f000 80a3 	beq.w	8011dee <_printf_i+0x16e>
 8011ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011cb0:	e03a      	b.n	8011d28 <_printf_i+0xa8>
 8011cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011cb6:	2b15      	cmp	r3, #21
 8011cb8:	d8f6      	bhi.n	8011ca8 <_printf_i+0x28>
 8011cba:	a101      	add	r1, pc, #4	; (adr r1, 8011cc0 <_printf_i+0x40>)
 8011cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011cc0:	08011d19 	.word	0x08011d19
 8011cc4:	08011d2d 	.word	0x08011d2d
 8011cc8:	08011ca9 	.word	0x08011ca9
 8011ccc:	08011ca9 	.word	0x08011ca9
 8011cd0:	08011ca9 	.word	0x08011ca9
 8011cd4:	08011ca9 	.word	0x08011ca9
 8011cd8:	08011d2d 	.word	0x08011d2d
 8011cdc:	08011ca9 	.word	0x08011ca9
 8011ce0:	08011ca9 	.word	0x08011ca9
 8011ce4:	08011ca9 	.word	0x08011ca9
 8011ce8:	08011ca9 	.word	0x08011ca9
 8011cec:	08011e39 	.word	0x08011e39
 8011cf0:	08011d5d 	.word	0x08011d5d
 8011cf4:	08011e1b 	.word	0x08011e1b
 8011cf8:	08011ca9 	.word	0x08011ca9
 8011cfc:	08011ca9 	.word	0x08011ca9
 8011d00:	08011e5b 	.word	0x08011e5b
 8011d04:	08011ca9 	.word	0x08011ca9
 8011d08:	08011d5d 	.word	0x08011d5d
 8011d0c:	08011ca9 	.word	0x08011ca9
 8011d10:	08011ca9 	.word	0x08011ca9
 8011d14:	08011e23 	.word	0x08011e23
 8011d18:	682b      	ldr	r3, [r5, #0]
 8011d1a:	1d1a      	adds	r2, r3, #4
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	602a      	str	r2, [r5, #0]
 8011d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e0a3      	b.n	8011e74 <_printf_i+0x1f4>
 8011d2c:	6820      	ldr	r0, [r4, #0]
 8011d2e:	6829      	ldr	r1, [r5, #0]
 8011d30:	0606      	lsls	r6, r0, #24
 8011d32:	f101 0304 	add.w	r3, r1, #4
 8011d36:	d50a      	bpl.n	8011d4e <_printf_i+0xce>
 8011d38:	680e      	ldr	r6, [r1, #0]
 8011d3a:	602b      	str	r3, [r5, #0]
 8011d3c:	2e00      	cmp	r6, #0
 8011d3e:	da03      	bge.n	8011d48 <_printf_i+0xc8>
 8011d40:	232d      	movs	r3, #45	; 0x2d
 8011d42:	4276      	negs	r6, r6
 8011d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d48:	485e      	ldr	r0, [pc, #376]	; (8011ec4 <_printf_i+0x244>)
 8011d4a:	230a      	movs	r3, #10
 8011d4c:	e019      	b.n	8011d82 <_printf_i+0x102>
 8011d4e:	680e      	ldr	r6, [r1, #0]
 8011d50:	602b      	str	r3, [r5, #0]
 8011d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011d56:	bf18      	it	ne
 8011d58:	b236      	sxthne	r6, r6
 8011d5a:	e7ef      	b.n	8011d3c <_printf_i+0xbc>
 8011d5c:	682b      	ldr	r3, [r5, #0]
 8011d5e:	6820      	ldr	r0, [r4, #0]
 8011d60:	1d19      	adds	r1, r3, #4
 8011d62:	6029      	str	r1, [r5, #0]
 8011d64:	0601      	lsls	r1, r0, #24
 8011d66:	d501      	bpl.n	8011d6c <_printf_i+0xec>
 8011d68:	681e      	ldr	r6, [r3, #0]
 8011d6a:	e002      	b.n	8011d72 <_printf_i+0xf2>
 8011d6c:	0646      	lsls	r6, r0, #25
 8011d6e:	d5fb      	bpl.n	8011d68 <_printf_i+0xe8>
 8011d70:	881e      	ldrh	r6, [r3, #0]
 8011d72:	4854      	ldr	r0, [pc, #336]	; (8011ec4 <_printf_i+0x244>)
 8011d74:	2f6f      	cmp	r7, #111	; 0x6f
 8011d76:	bf0c      	ite	eq
 8011d78:	2308      	moveq	r3, #8
 8011d7a:	230a      	movne	r3, #10
 8011d7c:	2100      	movs	r1, #0
 8011d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d82:	6865      	ldr	r5, [r4, #4]
 8011d84:	60a5      	str	r5, [r4, #8]
 8011d86:	2d00      	cmp	r5, #0
 8011d88:	bfa2      	ittt	ge
 8011d8a:	6821      	ldrge	r1, [r4, #0]
 8011d8c:	f021 0104 	bicge.w	r1, r1, #4
 8011d90:	6021      	strge	r1, [r4, #0]
 8011d92:	b90e      	cbnz	r6, 8011d98 <_printf_i+0x118>
 8011d94:	2d00      	cmp	r5, #0
 8011d96:	d04d      	beq.n	8011e34 <_printf_i+0x1b4>
 8011d98:	4615      	mov	r5, r2
 8011d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8011da2:	5dc7      	ldrb	r7, [r0, r7]
 8011da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011da8:	4637      	mov	r7, r6
 8011daa:	42bb      	cmp	r3, r7
 8011dac:	460e      	mov	r6, r1
 8011dae:	d9f4      	bls.n	8011d9a <_printf_i+0x11a>
 8011db0:	2b08      	cmp	r3, #8
 8011db2:	d10b      	bne.n	8011dcc <_printf_i+0x14c>
 8011db4:	6823      	ldr	r3, [r4, #0]
 8011db6:	07de      	lsls	r6, r3, #31
 8011db8:	d508      	bpl.n	8011dcc <_printf_i+0x14c>
 8011dba:	6923      	ldr	r3, [r4, #16]
 8011dbc:	6861      	ldr	r1, [r4, #4]
 8011dbe:	4299      	cmp	r1, r3
 8011dc0:	bfde      	ittt	le
 8011dc2:	2330      	movle	r3, #48	; 0x30
 8011dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011dc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011dcc:	1b52      	subs	r2, r2, r5
 8011dce:	6122      	str	r2, [r4, #16]
 8011dd0:	f8cd a000 	str.w	sl, [sp]
 8011dd4:	464b      	mov	r3, r9
 8011dd6:	aa03      	add	r2, sp, #12
 8011dd8:	4621      	mov	r1, r4
 8011dda:	4640      	mov	r0, r8
 8011ddc:	f7ff fee2 	bl	8011ba4 <_printf_common>
 8011de0:	3001      	adds	r0, #1
 8011de2:	d14c      	bne.n	8011e7e <_printf_i+0x1fe>
 8011de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011de8:	b004      	add	sp, #16
 8011dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dee:	4835      	ldr	r0, [pc, #212]	; (8011ec4 <_printf_i+0x244>)
 8011df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011df4:	6829      	ldr	r1, [r5, #0]
 8011df6:	6823      	ldr	r3, [r4, #0]
 8011df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011dfc:	6029      	str	r1, [r5, #0]
 8011dfe:	061d      	lsls	r5, r3, #24
 8011e00:	d514      	bpl.n	8011e2c <_printf_i+0x1ac>
 8011e02:	07df      	lsls	r7, r3, #31
 8011e04:	bf44      	itt	mi
 8011e06:	f043 0320 	orrmi.w	r3, r3, #32
 8011e0a:	6023      	strmi	r3, [r4, #0]
 8011e0c:	b91e      	cbnz	r6, 8011e16 <_printf_i+0x196>
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	f023 0320 	bic.w	r3, r3, #32
 8011e14:	6023      	str	r3, [r4, #0]
 8011e16:	2310      	movs	r3, #16
 8011e18:	e7b0      	b.n	8011d7c <_printf_i+0xfc>
 8011e1a:	6823      	ldr	r3, [r4, #0]
 8011e1c:	f043 0320 	orr.w	r3, r3, #32
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	2378      	movs	r3, #120	; 0x78
 8011e24:	4828      	ldr	r0, [pc, #160]	; (8011ec8 <_printf_i+0x248>)
 8011e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e2a:	e7e3      	b.n	8011df4 <_printf_i+0x174>
 8011e2c:	0659      	lsls	r1, r3, #25
 8011e2e:	bf48      	it	mi
 8011e30:	b2b6      	uxthmi	r6, r6
 8011e32:	e7e6      	b.n	8011e02 <_printf_i+0x182>
 8011e34:	4615      	mov	r5, r2
 8011e36:	e7bb      	b.n	8011db0 <_printf_i+0x130>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	6826      	ldr	r6, [r4, #0]
 8011e3c:	6961      	ldr	r1, [r4, #20]
 8011e3e:	1d18      	adds	r0, r3, #4
 8011e40:	6028      	str	r0, [r5, #0]
 8011e42:	0635      	lsls	r5, r6, #24
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	d501      	bpl.n	8011e4c <_printf_i+0x1cc>
 8011e48:	6019      	str	r1, [r3, #0]
 8011e4a:	e002      	b.n	8011e52 <_printf_i+0x1d2>
 8011e4c:	0670      	lsls	r0, r6, #25
 8011e4e:	d5fb      	bpl.n	8011e48 <_printf_i+0x1c8>
 8011e50:	8019      	strh	r1, [r3, #0]
 8011e52:	2300      	movs	r3, #0
 8011e54:	6123      	str	r3, [r4, #16]
 8011e56:	4615      	mov	r5, r2
 8011e58:	e7ba      	b.n	8011dd0 <_printf_i+0x150>
 8011e5a:	682b      	ldr	r3, [r5, #0]
 8011e5c:	1d1a      	adds	r2, r3, #4
 8011e5e:	602a      	str	r2, [r5, #0]
 8011e60:	681d      	ldr	r5, [r3, #0]
 8011e62:	6862      	ldr	r2, [r4, #4]
 8011e64:	2100      	movs	r1, #0
 8011e66:	4628      	mov	r0, r5
 8011e68:	f7ee fa52 	bl	8000310 <memchr>
 8011e6c:	b108      	cbz	r0, 8011e72 <_printf_i+0x1f2>
 8011e6e:	1b40      	subs	r0, r0, r5
 8011e70:	6060      	str	r0, [r4, #4]
 8011e72:	6863      	ldr	r3, [r4, #4]
 8011e74:	6123      	str	r3, [r4, #16]
 8011e76:	2300      	movs	r3, #0
 8011e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e7c:	e7a8      	b.n	8011dd0 <_printf_i+0x150>
 8011e7e:	6923      	ldr	r3, [r4, #16]
 8011e80:	462a      	mov	r2, r5
 8011e82:	4649      	mov	r1, r9
 8011e84:	4640      	mov	r0, r8
 8011e86:	47d0      	blx	sl
 8011e88:	3001      	adds	r0, #1
 8011e8a:	d0ab      	beq.n	8011de4 <_printf_i+0x164>
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	079b      	lsls	r3, r3, #30
 8011e90:	d413      	bmi.n	8011eba <_printf_i+0x23a>
 8011e92:	68e0      	ldr	r0, [r4, #12]
 8011e94:	9b03      	ldr	r3, [sp, #12]
 8011e96:	4298      	cmp	r0, r3
 8011e98:	bfb8      	it	lt
 8011e9a:	4618      	movlt	r0, r3
 8011e9c:	e7a4      	b.n	8011de8 <_printf_i+0x168>
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	4632      	mov	r2, r6
 8011ea2:	4649      	mov	r1, r9
 8011ea4:	4640      	mov	r0, r8
 8011ea6:	47d0      	blx	sl
 8011ea8:	3001      	adds	r0, #1
 8011eaa:	d09b      	beq.n	8011de4 <_printf_i+0x164>
 8011eac:	3501      	adds	r5, #1
 8011eae:	68e3      	ldr	r3, [r4, #12]
 8011eb0:	9903      	ldr	r1, [sp, #12]
 8011eb2:	1a5b      	subs	r3, r3, r1
 8011eb4:	42ab      	cmp	r3, r5
 8011eb6:	dcf2      	bgt.n	8011e9e <_printf_i+0x21e>
 8011eb8:	e7eb      	b.n	8011e92 <_printf_i+0x212>
 8011eba:	2500      	movs	r5, #0
 8011ebc:	f104 0619 	add.w	r6, r4, #25
 8011ec0:	e7f5      	b.n	8011eae <_printf_i+0x22e>
 8011ec2:	bf00      	nop
 8011ec4:	08184b91 	.word	0x08184b91
 8011ec8:	08184ba2 	.word	0x08184ba2

08011ecc <__retarget_lock_acquire_recursive>:
 8011ecc:	4770      	bx	lr

08011ece <__retarget_lock_release_recursive>:
 8011ece:	4770      	bx	lr

08011ed0 <memmove>:
 8011ed0:	4288      	cmp	r0, r1
 8011ed2:	b510      	push	{r4, lr}
 8011ed4:	eb01 0402 	add.w	r4, r1, r2
 8011ed8:	d902      	bls.n	8011ee0 <memmove+0x10>
 8011eda:	4284      	cmp	r4, r0
 8011edc:	4623      	mov	r3, r4
 8011ede:	d807      	bhi.n	8011ef0 <memmove+0x20>
 8011ee0:	1e43      	subs	r3, r0, #1
 8011ee2:	42a1      	cmp	r1, r4
 8011ee4:	d008      	beq.n	8011ef8 <memmove+0x28>
 8011ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011eee:	e7f8      	b.n	8011ee2 <memmove+0x12>
 8011ef0:	4402      	add	r2, r0
 8011ef2:	4601      	mov	r1, r0
 8011ef4:	428a      	cmp	r2, r1
 8011ef6:	d100      	bne.n	8011efa <memmove+0x2a>
 8011ef8:	bd10      	pop	{r4, pc}
 8011efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f02:	e7f7      	b.n	8011ef4 <memmove+0x24>

08011f04 <_malloc_usable_size_r>:
 8011f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f08:	1f18      	subs	r0, r3, #4
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	bfbc      	itt	lt
 8011f0e:	580b      	ldrlt	r3, [r1, r0]
 8011f10:	18c0      	addlt	r0, r0, r3
 8011f12:	4770      	bx	lr

08011f14 <with_errnof>:
 8011f14:	b513      	push	{r0, r1, r4, lr}
 8011f16:	4604      	mov	r4, r0
 8011f18:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011f1c:	f7ff fb5c 	bl	80115d8 <__errno>
 8011f20:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011f24:	6004      	str	r4, [r0, #0]
 8011f26:	b002      	add	sp, #8
 8011f28:	bd10      	pop	{r4, pc}

08011f2a <xflowf>:
 8011f2a:	b130      	cbz	r0, 8011f3a <xflowf+0x10>
 8011f2c:	eef1 7a40 	vneg.f32	s15, s0
 8011f30:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011f34:	2022      	movs	r0, #34	; 0x22
 8011f36:	f7ff bfed 	b.w	8011f14 <with_errnof>
 8011f3a:	eef0 7a40 	vmov.f32	s15, s0
 8011f3e:	e7f7      	b.n	8011f30 <xflowf+0x6>

08011f40 <__math_uflowf>:
 8011f40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f48 <__math_uflowf+0x8>
 8011f44:	f7ff bff1 	b.w	8011f2a <xflowf>
 8011f48:	10000000 	.word	0x10000000

08011f4c <__math_may_uflowf>:
 8011f4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f54 <__math_may_uflowf+0x8>
 8011f50:	f7ff bfeb 	b.w	8011f2a <xflowf>
 8011f54:	1a200000 	.word	0x1a200000

08011f58 <__math_oflowf>:
 8011f58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011f60 <__math_oflowf+0x8>
 8011f5c:	f7ff bfe5 	b.w	8011f2a <xflowf>
 8011f60:	70000000 	.word	0x70000000

08011f64 <__math_divzerof>:
 8011f64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011f68:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	fe40 7a27 	vseleq.f32	s15, s0, s15
 8011f72:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011f80 <__math_divzerof+0x1c>
 8011f76:	2022      	movs	r0, #34	; 0x22
 8011f78:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011f7c:	f7ff bfca 	b.w	8011f14 <with_errnof>
 8011f80:	00000000 	.word	0x00000000

08011f84 <__math_invalidf>:
 8011f84:	eef0 7a40 	vmov.f32	s15, s0
 8011f88:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011f8c:	eef4 7a67 	vcmp.f32	s15, s15
 8011f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f94:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8011f98:	d602      	bvs.n	8011fa0 <__math_invalidf+0x1c>
 8011f9a:	2021      	movs	r0, #33	; 0x21
 8011f9c:	f7ff bfba 	b.w	8011f14 <with_errnof>
 8011fa0:	4770      	bx	lr
 8011fa2:	0000      	movs	r0, r0
 8011fa4:	0000      	movs	r0, r0
	...

08011fa8 <cos>:
 8011fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011faa:	eeb0 7b40 	vmov.f64	d7, d0
 8011fae:	ee17 3a90 	vmov	r3, s15
 8011fb2:	4a21      	ldr	r2, [pc, #132]	; (8012038 <cos+0x90>)
 8011fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	dc06      	bgt.n	8011fca <cos+0x22>
 8011fbc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8012030 <cos+0x88>
 8011fc0:	b005      	add	sp, #20
 8011fc2:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fc6:	f000 bb03 	b.w	80125d0 <__kernel_cos>
 8011fca:	4a1c      	ldr	r2, [pc, #112]	; (801203c <cos+0x94>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	dd04      	ble.n	8011fda <cos+0x32>
 8011fd0:	ee30 0b40 	vsub.f64	d0, d0, d0
 8011fd4:	b005      	add	sp, #20
 8011fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fda:	4668      	mov	r0, sp
 8011fdc:	f000 f958 	bl	8012290 <__ieee754_rem_pio2>
 8011fe0:	f000 0003 	and.w	r0, r0, #3
 8011fe4:	2801      	cmp	r0, #1
 8011fe6:	d009      	beq.n	8011ffc <cos+0x54>
 8011fe8:	2802      	cmp	r0, #2
 8011fea:	d010      	beq.n	801200e <cos+0x66>
 8011fec:	b9b0      	cbnz	r0, 801201c <cos+0x74>
 8011fee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ff2:	ed9d 0b00 	vldr	d0, [sp]
 8011ff6:	f000 faeb 	bl	80125d0 <__kernel_cos>
 8011ffa:	e7eb      	b.n	8011fd4 <cos+0x2c>
 8011ffc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012000:	ed9d 0b00 	vldr	d0, [sp]
 8012004:	f000 fde8 	bl	8012bd8 <__kernel_sin>
 8012008:	eeb1 0b40 	vneg.f64	d0, d0
 801200c:	e7e2      	b.n	8011fd4 <cos+0x2c>
 801200e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012012:	ed9d 0b00 	vldr	d0, [sp]
 8012016:	f000 fadb 	bl	80125d0 <__kernel_cos>
 801201a:	e7f5      	b.n	8012008 <cos+0x60>
 801201c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012020:	ed9d 0b00 	vldr	d0, [sp]
 8012024:	2001      	movs	r0, #1
 8012026:	f000 fdd7 	bl	8012bd8 <__kernel_sin>
 801202a:	e7d3      	b.n	8011fd4 <cos+0x2c>
 801202c:	f3af 8000 	nop.w
	...
 8012038:	3fe921fb 	.word	0x3fe921fb
 801203c:	7fefffff 	.word	0x7fefffff

08012040 <expf>:
 8012040:	ee10 2a10 	vmov	r2, s0
 8012044:	f240 412a 	movw	r1, #1066	; 0x42a
 8012048:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801204c:	428b      	cmp	r3, r1
 801204e:	b430      	push	{r4, r5}
 8012050:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8012054:	d92a      	bls.n	80120ac <expf+0x6c>
 8012056:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801205a:	d058      	beq.n	801210e <expf+0xce>
 801205c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8012060:	d303      	bcc.n	801206a <expf+0x2a>
 8012062:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012066:	bc30      	pop	{r4, r5}
 8012068:	4770      	bx	lr
 801206a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8012114 <expf+0xd4>
 801206e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012076:	dd03      	ble.n	8012080 <expf+0x40>
 8012078:	bc30      	pop	{r4, r5}
 801207a:	2000      	movs	r0, #0
 801207c:	f7ff bf6c 	b.w	8011f58 <__math_oflowf>
 8012080:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012118 <expf+0xd8>
 8012084:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801208c:	d503      	bpl.n	8012096 <expf+0x56>
 801208e:	bc30      	pop	{r4, r5}
 8012090:	2000      	movs	r0, #0
 8012092:	f7ff bf55 	b.w	8011f40 <__math_uflowf>
 8012096:	eddf 7a21 	vldr	s15, [pc, #132]	; 801211c <expf+0xdc>
 801209a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a2:	d503      	bpl.n	80120ac <expf+0x6c>
 80120a4:	bc30      	pop	{r4, r5}
 80120a6:	2000      	movs	r0, #0
 80120a8:	f7ff bf50 	b.w	8011f4c <__math_may_uflowf>
 80120ac:	4b1c      	ldr	r3, [pc, #112]	; (8012120 <expf+0xe0>)
 80120ae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80120b2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 80120b6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 80120ba:	eeb0 7b44 	vmov.f64	d7, d4
 80120be:	eea5 7b06 	vfma.f64	d7, d5, d6
 80120c2:	ee17 0a10 	vmov	r0, s14
 80120c6:	ee37 7b44 	vsub.f64	d7, d7, d4
 80120ca:	f000 021f 	and.w	r2, r0, #31
 80120ce:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80120d2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 80120d6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80120da:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 80120de:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80120e2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80120e6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 80120ea:	684d      	ldr	r5, [r1, #4]
 80120ec:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 80120f0:	2100      	movs	r1, #0
 80120f2:	190a      	adds	r2, r1, r4
 80120f4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80120f8:	eea5 0b07 	vfma.f64	d0, d5, d7
 80120fc:	ec43 2b17 	vmov	d7, r2, r3
 8012100:	eea6 0b04 	vfma.f64	d0, d6, d4
 8012104:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012108:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801210c:	e7ab      	b.n	8012066 <expf+0x26>
 801210e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8012124 <expf+0xe4>
 8012112:	e7a8      	b.n	8012066 <expf+0x26>
 8012114:	42b17217 	.word	0x42b17217
 8012118:	c2cff1b4 	.word	0xc2cff1b4
 801211c:	c2ce8ecf 	.word	0xc2ce8ecf
 8012120:	08184bb8 	.word	0x08184bb8
 8012124:	00000000 	.word	0x00000000

08012128 <logf>:
 8012128:	ee10 3a10 	vmov	r3, s0
 801212c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8012130:	b410      	push	{r4}
 8012132:	d055      	beq.n	80121e0 <logf+0xb8>
 8012134:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8012138:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801213c:	d31a      	bcc.n	8012174 <logf+0x4c>
 801213e:	005a      	lsls	r2, r3, #1
 8012140:	d104      	bne.n	801214c <logf+0x24>
 8012142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012146:	2001      	movs	r0, #1
 8012148:	f7ff bf0c 	b.w	8011f64 <__math_divzerof>
 801214c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012150:	d043      	beq.n	80121da <logf+0xb2>
 8012152:	2b00      	cmp	r3, #0
 8012154:	db02      	blt.n	801215c <logf+0x34>
 8012156:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801215a:	d303      	bcc.n	8012164 <logf+0x3c>
 801215c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012160:	f7ff bf10 	b.w	8011f84 <__math_invalidf>
 8012164:	eddf 7a20 	vldr	s15, [pc, #128]	; 80121e8 <logf+0xc0>
 8012168:	ee20 0a27 	vmul.f32	s0, s0, s15
 801216c:	ee10 3a10 	vmov	r3, s0
 8012170:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8012174:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8012178:	491c      	ldr	r1, [pc, #112]	; (80121ec <logf+0xc4>)
 801217a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801217e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8012182:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8012186:	0dd4      	lsrs	r4, r2, #23
 8012188:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801218c:	05e4      	lsls	r4, r4, #23
 801218e:	ed90 6b00 	vldr	d6, [r0]
 8012192:	1b1b      	subs	r3, r3, r4
 8012194:	ee07 3a90 	vmov	s15, r3
 8012198:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801219c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80121a0:	15d2      	asrs	r2, r2, #23
 80121a2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80121a6:	ed90 6b02 	vldr	d6, [r0, #8]
 80121aa:	ee20 4b00 	vmul.f64	d4, d0, d0
 80121ae:	ee07 2a90 	vmov	s15, r2
 80121b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80121b6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80121ba:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 80121be:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 80121c2:	eea5 7b00 	vfma.f64	d7, d5, d0
 80121c6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80121ca:	ee30 0b06 	vadd.f64	d0, d0, d6
 80121ce:	eea5 7b04 	vfma.f64	d7, d5, d4
 80121d2:	eea4 0b07 	vfma.f64	d0, d4, d7
 80121d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80121da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121de:	4770      	bx	lr
 80121e0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80121f0 <logf+0xc8>
 80121e4:	e7f9      	b.n	80121da <logf+0xb2>
 80121e6:	bf00      	nop
 80121e8:	4b000000 	.word	0x4b000000
 80121ec:	08184d00 	.word	0x08184d00
 80121f0:	00000000 	.word	0x00000000

080121f4 <log10f>:
 80121f4:	b508      	push	{r3, lr}
 80121f6:	ed2d 8b02 	vpush	{d8}
 80121fa:	eeb0 8a40 	vmov.f32	s16, s0
 80121fe:	f000 f98b 	bl	8012518 <__ieee754_log10f>
 8012202:	eeb4 8a48 	vcmp.f32	s16, s16
 8012206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220a:	d60f      	bvs.n	801222c <log10f+0x38>
 801220c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012214:	d80a      	bhi.n	801222c <log10f+0x38>
 8012216:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221e:	d108      	bne.n	8012232 <log10f+0x3e>
 8012220:	f7ff f9da 	bl	80115d8 <__errno>
 8012224:	2322      	movs	r3, #34	; 0x22
 8012226:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012248 <log10f+0x54>
 801222a:	6003      	str	r3, [r0, #0]
 801222c:	ecbd 8b02 	vpop	{d8}
 8012230:	bd08      	pop	{r3, pc}
 8012232:	f7ff f9d1 	bl	80115d8 <__errno>
 8012236:	ecbd 8b02 	vpop	{d8}
 801223a:	2321      	movs	r3, #33	; 0x21
 801223c:	6003      	str	r3, [r0, #0]
 801223e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012242:	4802      	ldr	r0, [pc, #8]	; (801224c <log10f+0x58>)
 8012244:	f000 be2a 	b.w	8012e9c <nanf>
 8012248:	ff800000 	.word	0xff800000
 801224c:	08184b85 	.word	0x08184b85

08012250 <sqrtf>:
 8012250:	b508      	push	{r3, lr}
 8012252:	ed2d 8b02 	vpush	{d8}
 8012256:	eeb0 8a40 	vmov.f32	s16, s0
 801225a:	f000 f9b5 	bl	80125c8 <__ieee754_sqrtf>
 801225e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012266:	d60c      	bvs.n	8012282 <sqrtf+0x32>
 8012268:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012288 <sqrtf+0x38>
 801226c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012274:	d505      	bpl.n	8012282 <sqrtf+0x32>
 8012276:	f7ff f9af 	bl	80115d8 <__errno>
 801227a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801227e:	2321      	movs	r3, #33	; 0x21
 8012280:	6003      	str	r3, [r0, #0]
 8012282:	ecbd 8b02 	vpop	{d8}
 8012286:	bd08      	pop	{r3, pc}
	...

08012290 <__ieee754_rem_pio2>:
 8012290:	b570      	push	{r4, r5, r6, lr}
 8012292:	eeb0 7b40 	vmov.f64	d7, d0
 8012296:	ee17 5a90 	vmov	r5, s15
 801229a:	4b99      	ldr	r3, [pc, #612]	; (8012500 <__ieee754_rem_pio2+0x270>)
 801229c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122a0:	429e      	cmp	r6, r3
 80122a2:	b088      	sub	sp, #32
 80122a4:	4604      	mov	r4, r0
 80122a6:	dc07      	bgt.n	80122b8 <__ieee754_rem_pio2+0x28>
 80122a8:	2200      	movs	r2, #0
 80122aa:	2300      	movs	r3, #0
 80122ac:	ed84 0b00 	vstr	d0, [r4]
 80122b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80122b4:	2000      	movs	r0, #0
 80122b6:	e01b      	b.n	80122f0 <__ieee754_rem_pio2+0x60>
 80122b8:	4b92      	ldr	r3, [pc, #584]	; (8012504 <__ieee754_rem_pio2+0x274>)
 80122ba:	429e      	cmp	r6, r3
 80122bc:	dc3b      	bgt.n	8012336 <__ieee754_rem_pio2+0xa6>
 80122be:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80122c2:	2d00      	cmp	r5, #0
 80122c4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80124c0 <__ieee754_rem_pio2+0x230>
 80122c8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80122cc:	dd19      	ble.n	8012302 <__ieee754_rem_pio2+0x72>
 80122ce:	ee30 7b46 	vsub.f64	d7, d0, d6
 80122d2:	429e      	cmp	r6, r3
 80122d4:	d00e      	beq.n	80122f4 <__ieee754_rem_pio2+0x64>
 80122d6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80124c8 <__ieee754_rem_pio2+0x238>
 80122da:	ee37 5b46 	vsub.f64	d5, d7, d6
 80122de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80122e2:	ed84 5b00 	vstr	d5, [r4]
 80122e6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80122ee:	2001      	movs	r0, #1
 80122f0:	b008      	add	sp, #32
 80122f2:	bd70      	pop	{r4, r5, r6, pc}
 80122f4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80124d0 <__ieee754_rem_pio2+0x240>
 80122f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80124d8 <__ieee754_rem_pio2+0x248>
 8012300:	e7eb      	b.n	80122da <__ieee754_rem_pio2+0x4a>
 8012302:	429e      	cmp	r6, r3
 8012304:	ee30 7b06 	vadd.f64	d7, d0, d6
 8012308:	d00e      	beq.n	8012328 <__ieee754_rem_pio2+0x98>
 801230a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80124c8 <__ieee754_rem_pio2+0x238>
 801230e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8012312:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012316:	ed84 5b00 	vstr	d5, [r4]
 801231a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801231e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012322:	ed84 7b02 	vstr	d7, [r4, #8]
 8012326:	e7e3      	b.n	80122f0 <__ieee754_rem_pio2+0x60>
 8012328:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80124d0 <__ieee754_rem_pio2+0x240>
 801232c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012330:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80124d8 <__ieee754_rem_pio2+0x248>
 8012334:	e7eb      	b.n	801230e <__ieee754_rem_pio2+0x7e>
 8012336:	4b74      	ldr	r3, [pc, #464]	; (8012508 <__ieee754_rem_pio2+0x278>)
 8012338:	429e      	cmp	r6, r3
 801233a:	dc70      	bgt.n	801241e <__ieee754_rem_pio2+0x18e>
 801233c:	f000 fca4 	bl	8012c88 <fabs>
 8012340:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012344:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80124e0 <__ieee754_rem_pio2+0x250>
 8012348:	eea0 7b06 	vfma.f64	d7, d0, d6
 801234c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8012350:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012354:	ee17 0a90 	vmov	r0, s15
 8012358:	eeb1 4b45 	vneg.f64	d4, d5
 801235c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80124c0 <__ieee754_rem_pio2+0x230>
 8012360:	eea5 0b47 	vfms.f64	d0, d5, d7
 8012364:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80124c8 <__ieee754_rem_pio2+0x238>
 8012368:	281f      	cmp	r0, #31
 801236a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801236e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012372:	dc08      	bgt.n	8012386 <__ieee754_rem_pio2+0xf6>
 8012374:	4b65      	ldr	r3, [pc, #404]	; (801250c <__ieee754_rem_pio2+0x27c>)
 8012376:	1e42      	subs	r2, r0, #1
 8012378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801237c:	42b3      	cmp	r3, r6
 801237e:	d002      	beq.n	8012386 <__ieee754_rem_pio2+0xf6>
 8012380:	ed84 6b00 	vstr	d6, [r4]
 8012384:	e026      	b.n	80123d4 <__ieee754_rem_pio2+0x144>
 8012386:	ee16 3a90 	vmov	r3, s13
 801238a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801238e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8012392:	2b10      	cmp	r3, #16
 8012394:	ea4f 5226 	mov.w	r2, r6, asr #20
 8012398:	ddf2      	ble.n	8012380 <__ieee754_rem_pio2+0xf0>
 801239a:	eeb0 6b40 	vmov.f64	d6, d0
 801239e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80124d0 <__ieee754_rem_pio2+0x240>
 80123a2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80124d8 <__ieee754_rem_pio2+0x248>
 80123a6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80123aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 80123ae:	eea4 0b07 	vfma.f64	d0, d4, d7
 80123b2:	eeb0 7b40 	vmov.f64	d7, d0
 80123b6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80123ba:	ee36 3b47 	vsub.f64	d3, d6, d7
 80123be:	ee13 3a90 	vmov	r3, s7
 80123c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	2b31      	cmp	r3, #49	; 0x31
 80123ca:	dc17      	bgt.n	80123fc <__ieee754_rem_pio2+0x16c>
 80123cc:	eeb0 0b46 	vmov.f64	d0, d6
 80123d0:	ed84 3b00 	vstr	d3, [r4]
 80123d4:	ed94 6b00 	vldr	d6, [r4]
 80123d8:	2d00      	cmp	r5, #0
 80123da:	ee30 0b46 	vsub.f64	d0, d0, d6
 80123de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80123e2:	ed84 0b02 	vstr	d0, [r4, #8]
 80123e6:	da83      	bge.n	80122f0 <__ieee754_rem_pio2+0x60>
 80123e8:	eeb1 6b46 	vneg.f64	d6, d6
 80123ec:	eeb1 0b40 	vneg.f64	d0, d0
 80123f0:	ed84 6b00 	vstr	d6, [r4]
 80123f4:	ed84 0b02 	vstr	d0, [r4, #8]
 80123f8:	4240      	negs	r0, r0
 80123fa:	e779      	b.n	80122f0 <__ieee754_rem_pio2+0x60>
 80123fc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80124e8 <__ieee754_rem_pio2+0x258>
 8012400:	eeb0 0b46 	vmov.f64	d0, d6
 8012404:	eea4 0b03 	vfma.f64	d0, d4, d3
 8012408:	ee36 7b40 	vsub.f64	d7, d6, d0
 801240c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80124f0 <__ieee754_rem_pio2+0x260>
 8012410:	eea4 7b03 	vfma.f64	d7, d4, d3
 8012414:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8012418:	ee30 6b47 	vsub.f64	d6, d0, d7
 801241c:	e7b0      	b.n	8012380 <__ieee754_rem_pio2+0xf0>
 801241e:	4b3c      	ldr	r3, [pc, #240]	; (8012510 <__ieee754_rem_pio2+0x280>)
 8012420:	429e      	cmp	r6, r3
 8012422:	dd06      	ble.n	8012432 <__ieee754_rem_pio2+0x1a2>
 8012424:	ee30 7b40 	vsub.f64	d7, d0, d0
 8012428:	ed80 7b02 	vstr	d7, [r0, #8]
 801242c:	ed80 7b00 	vstr	d7, [r0]
 8012430:	e740      	b.n	80122b4 <__ieee754_rem_pio2+0x24>
 8012432:	1532      	asrs	r2, r6, #20
 8012434:	ee10 0a10 	vmov	r0, s0
 8012438:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801243c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8012440:	ec41 0b17 	vmov	d7, r0, r1
 8012444:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012448:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80124f8 <__ieee754_rem_pio2+0x268>
 801244c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012450:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012454:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012458:	ee27 7b05 	vmul.f64	d7, d7, d5
 801245c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8012460:	a902      	add	r1, sp, #8
 8012462:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8012466:	ee37 7b46 	vsub.f64	d7, d7, d6
 801246a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801246e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012472:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012476:	2603      	movs	r6, #3
 8012478:	4608      	mov	r0, r1
 801247a:	ed91 7b04 	vldr	d7, [r1, #16]
 801247e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012486:	4633      	mov	r3, r6
 8012488:	f1a1 0108 	sub.w	r1, r1, #8
 801248c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8012490:	d0f3      	beq.n	801247a <__ieee754_rem_pio2+0x1ea>
 8012492:	4920      	ldr	r1, [pc, #128]	; (8012514 <__ieee754_rem_pio2+0x284>)
 8012494:	9101      	str	r1, [sp, #4]
 8012496:	2102      	movs	r1, #2
 8012498:	9100      	str	r1, [sp, #0]
 801249a:	4621      	mov	r1, r4
 801249c:	f000 f904 	bl	80126a8 <__kernel_rem_pio2>
 80124a0:	2d00      	cmp	r5, #0
 80124a2:	f6bf af25 	bge.w	80122f0 <__ieee754_rem_pio2+0x60>
 80124a6:	ed94 7b00 	vldr	d7, [r4]
 80124aa:	eeb1 7b47 	vneg.f64	d7, d7
 80124ae:	ed84 7b00 	vstr	d7, [r4]
 80124b2:	ed94 7b02 	vldr	d7, [r4, #8]
 80124b6:	eeb1 7b47 	vneg.f64	d7, d7
 80124ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80124be:	e79b      	b.n	80123f8 <__ieee754_rem_pio2+0x168>
 80124c0:	54400000 	.word	0x54400000
 80124c4:	3ff921fb 	.word	0x3ff921fb
 80124c8:	1a626331 	.word	0x1a626331
 80124cc:	3dd0b461 	.word	0x3dd0b461
 80124d0:	1a600000 	.word	0x1a600000
 80124d4:	3dd0b461 	.word	0x3dd0b461
 80124d8:	2e037073 	.word	0x2e037073
 80124dc:	3ba3198a 	.word	0x3ba3198a
 80124e0:	6dc9c883 	.word	0x6dc9c883
 80124e4:	3fe45f30 	.word	0x3fe45f30
 80124e8:	2e000000 	.word	0x2e000000
 80124ec:	3ba3198a 	.word	0x3ba3198a
 80124f0:	252049c1 	.word	0x252049c1
 80124f4:	397b839a 	.word	0x397b839a
 80124f8:	00000000 	.word	0x00000000
 80124fc:	41700000 	.word	0x41700000
 8012500:	3fe921fb 	.word	0x3fe921fb
 8012504:	4002d97b 	.word	0x4002d97b
 8012508:	413921fb 	.word	0x413921fb
 801250c:	08184e20 	.word	0x08184e20
 8012510:	7fefffff 	.word	0x7fefffff
 8012514:	08184ea0 	.word	0x08184ea0

08012518 <__ieee754_log10f>:
 8012518:	b508      	push	{r3, lr}
 801251a:	ee10 2a10 	vmov	r2, s0
 801251e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8012522:	ed2d 8b02 	vpush	{d8}
 8012526:	d108      	bne.n	801253a <__ieee754_log10f+0x22>
 8012528:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80125b0 <__ieee754_log10f+0x98>
 801252c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80125b4 <__ieee754_log10f+0x9c>
 8012530:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012534:	ecbd 8b02 	vpop	{d8}
 8012538:	bd08      	pop	{r3, pc}
 801253a:	2a00      	cmp	r2, #0
 801253c:	da02      	bge.n	8012544 <__ieee754_log10f+0x2c>
 801253e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012542:	e7f3      	b.n	801252c <__ieee754_log10f+0x14>
 8012544:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012548:	db02      	blt.n	8012550 <__ieee754_log10f+0x38>
 801254a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801254e:	e7f1      	b.n	8012534 <__ieee754_log10f+0x1c>
 8012550:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8012554:	bfbf      	itttt	lt
 8012556:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80125b8 <__ieee754_log10f+0xa0>
 801255a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801255e:	f06f 0118 	mvnlt.w	r1, #24
 8012562:	ee17 2a90 	vmovlt	r2, s15
 8012566:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801256a:	bfa8      	it	ge
 801256c:	2100      	movge	r1, #0
 801256e:	3b7f      	subs	r3, #127	; 0x7f
 8012570:	440b      	add	r3, r1
 8012572:	0fd9      	lsrs	r1, r3, #31
 8012574:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012578:	ee07 3a90 	vmov	s15, r3
 801257c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012580:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8012584:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012588:	ee00 3a10 	vmov	s0, r3
 801258c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8012590:	f7ff fdca 	bl	8012128 <logf>
 8012594:	eddf 7a09 	vldr	s15, [pc, #36]	; 80125bc <__ieee754_log10f+0xa4>
 8012598:	ee20 0a27 	vmul.f32	s0, s0, s15
 801259c:	eddf 7a08 	vldr	s15, [pc, #32]	; 80125c0 <__ieee754_log10f+0xa8>
 80125a0:	eea8 0a27 	vfma.f32	s0, s16, s15
 80125a4:	eddf 7a07 	vldr	s15, [pc, #28]	; 80125c4 <__ieee754_log10f+0xac>
 80125a8:	eea8 0a27 	vfma.f32	s0, s16, s15
 80125ac:	e7c2      	b.n	8012534 <__ieee754_log10f+0x1c>
 80125ae:	bf00      	nop
 80125b0:	cc000000 	.word	0xcc000000
 80125b4:	00000000 	.word	0x00000000
 80125b8:	4c000000 	.word	0x4c000000
 80125bc:	3ede5bd9 	.word	0x3ede5bd9
 80125c0:	355427db 	.word	0x355427db
 80125c4:	3e9a2080 	.word	0x3e9a2080

080125c8 <__ieee754_sqrtf>:
 80125c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80125cc:	4770      	bx	lr
	...

080125d0 <__kernel_cos>:
 80125d0:	ee10 1a90 	vmov	r1, s1
 80125d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80125d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80125dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80125e0:	da05      	bge.n	80125ee <__kernel_cos+0x1e>
 80125e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80125e6:	ee17 3a90 	vmov	r3, s15
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d03d      	beq.n	801266a <__kernel_cos+0x9a>
 80125ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 80125f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8012670 <__kernel_cos+0xa0>
 80125f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012678 <__kernel_cos+0xa8>
 80125fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80125fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012680 <__kernel_cos+0xb0>
 8012602:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012606:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8012688 <__kernel_cos+0xb8>
 801260a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801260e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012690 <__kernel_cos+0xc0>
 8012612:	4b23      	ldr	r3, [pc, #140]	; (80126a0 <__kernel_cos+0xd0>)
 8012614:	eea6 7b03 	vfma.f64	d7, d6, d3
 8012618:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8012698 <__kernel_cos+0xc8>
 801261c:	4299      	cmp	r1, r3
 801261e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8012622:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8012626:	ee26 5b03 	vmul.f64	d5, d6, d3
 801262a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801262e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8012632:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012636:	dc04      	bgt.n	8012642 <__kernel_cos+0x72>
 8012638:	ee37 6b46 	vsub.f64	d6, d7, d6
 801263c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8012640:	4770      	bx	lr
 8012642:	4b18      	ldr	r3, [pc, #96]	; (80126a4 <__kernel_cos+0xd4>)
 8012644:	4299      	cmp	r1, r3
 8012646:	dc0d      	bgt.n	8012664 <__kernel_cos+0x94>
 8012648:	2200      	movs	r2, #0
 801264a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801264e:	ec43 2b15 	vmov	d5, r2, r3
 8012652:	ee34 0b45 	vsub.f64	d0, d4, d5
 8012656:	ee37 7b45 	vsub.f64	d7, d7, d5
 801265a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801265e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8012662:	4770      	bx	lr
 8012664:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8012668:	e7f3      	b.n	8012652 <__kernel_cos+0x82>
 801266a:	eeb0 0b44 	vmov.f64	d0, d4
 801266e:	4770      	bx	lr
 8012670:	be8838d4 	.word	0xbe8838d4
 8012674:	bda8fae9 	.word	0xbda8fae9
 8012678:	bdb4b1c4 	.word	0xbdb4b1c4
 801267c:	3e21ee9e 	.word	0x3e21ee9e
 8012680:	809c52ad 	.word	0x809c52ad
 8012684:	be927e4f 	.word	0xbe927e4f
 8012688:	19cb1590 	.word	0x19cb1590
 801268c:	3efa01a0 	.word	0x3efa01a0
 8012690:	16c15177 	.word	0x16c15177
 8012694:	bf56c16c 	.word	0xbf56c16c
 8012698:	5555554c 	.word	0x5555554c
 801269c:	3fa55555 	.word	0x3fa55555
 80126a0:	3fd33332 	.word	0x3fd33332
 80126a4:	3fe90000 	.word	0x3fe90000

080126a8 <__kernel_rem_pio2>:
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	ed2d 8b06 	vpush	{d8-d10}
 80126b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80126b4:	460f      	mov	r7, r1
 80126b6:	9002      	str	r0, [sp, #8]
 80126b8:	49c5      	ldr	r1, [pc, #788]	; (80129d0 <__kernel_rem_pio2+0x328>)
 80126ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80126bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80126c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80126c4:	9301      	str	r3, [sp, #4]
 80126c6:	f112 0f14 	cmn.w	r2, #20
 80126ca:	bfa8      	it	ge
 80126cc:	2018      	movge	r0, #24
 80126ce:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80126d2:	bfb8      	it	lt
 80126d4:	2000      	movlt	r0, #0
 80126d6:	f06f 0417 	mvn.w	r4, #23
 80126da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80129b8 <__kernel_rem_pio2+0x310>
 80126de:	bfa4      	itt	ge
 80126e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80126e4:	fb9a f0f0 	sdivge	r0, sl, r0
 80126e8:	fb00 4404 	mla	r4, r0, r4, r4
 80126ec:	1a46      	subs	r6, r0, r1
 80126ee:	4414      	add	r4, r2
 80126f0:	eb09 0c01 	add.w	ip, r9, r1
 80126f4:	ad1a      	add	r5, sp, #104	; 0x68
 80126f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80126fa:	2200      	movs	r2, #0
 80126fc:	4562      	cmp	r2, ip
 80126fe:	dd10      	ble.n	8012722 <__kernel_rem_pio2+0x7a>
 8012700:	9a01      	ldr	r2, [sp, #4]
 8012702:	ab1a      	add	r3, sp, #104	; 0x68
 8012704:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012708:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801270c:	f04f 0c00 	mov.w	ip, #0
 8012710:	45cc      	cmp	ip, r9
 8012712:	dc26      	bgt.n	8012762 <__kernel_rem_pio2+0xba>
 8012714:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80129b8 <__kernel_rem_pio2+0x310>
 8012718:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801271c:	4616      	mov	r6, r2
 801271e:	2500      	movs	r5, #0
 8012720:	e015      	b.n	801274e <__kernel_rem_pio2+0xa6>
 8012722:	42d6      	cmn	r6, r2
 8012724:	d409      	bmi.n	801273a <__kernel_rem_pio2+0x92>
 8012726:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801272a:	ee07 3a90 	vmov	s15, r3
 801272e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012732:	eca5 7b02 	vstmia	r5!, {d7}
 8012736:	3201      	adds	r2, #1
 8012738:	e7e0      	b.n	80126fc <__kernel_rem_pio2+0x54>
 801273a:	eeb0 7b46 	vmov.f64	d7, d6
 801273e:	e7f8      	b.n	8012732 <__kernel_rem_pio2+0x8a>
 8012740:	ecb8 5b02 	vldmia	r8!, {d5}
 8012744:	ed96 6b00 	vldr	d6, [r6]
 8012748:	3501      	adds	r5, #1
 801274a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801274e:	428d      	cmp	r5, r1
 8012750:	f1a6 0608 	sub.w	r6, r6, #8
 8012754:	ddf4      	ble.n	8012740 <__kernel_rem_pio2+0x98>
 8012756:	ecaa 7b02 	vstmia	sl!, {d7}
 801275a:	f10c 0c01 	add.w	ip, ip, #1
 801275e:	3208      	adds	r2, #8
 8012760:	e7d6      	b.n	8012710 <__kernel_rem_pio2+0x68>
 8012762:	ab06      	add	r3, sp, #24
 8012764:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80129c0 <__kernel_rem_pio2+0x318>
 8012768:	ed9f ab97 	vldr	d10, [pc, #604]	; 80129c8 <__kernel_rem_pio2+0x320>
 801276c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8012770:	9303      	str	r3, [sp, #12]
 8012772:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8012776:	464d      	mov	r5, r9
 8012778:	00eb      	lsls	r3, r5, #3
 801277a:	9304      	str	r3, [sp, #16]
 801277c:	ab92      	add	r3, sp, #584	; 0x248
 801277e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012782:	f10d 0b18 	add.w	fp, sp, #24
 8012786:	ab6a      	add	r3, sp, #424	; 0x1a8
 8012788:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801278c:	465e      	mov	r6, fp
 801278e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8012792:	4628      	mov	r0, r5
 8012794:	2800      	cmp	r0, #0
 8012796:	f1a2 0208 	sub.w	r2, r2, #8
 801279a:	dc4c      	bgt.n	8012836 <__kernel_rem_pio2+0x18e>
 801279c:	4620      	mov	r0, r4
 801279e:	9105      	str	r1, [sp, #20]
 80127a0:	f000 faf2 	bl	8012d88 <scalbn>
 80127a4:	eeb0 8b40 	vmov.f64	d8, d0
 80127a8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80127ac:	ee28 0b00 	vmul.f64	d0, d8, d0
 80127b0:	f000 fa76 	bl	8012ca0 <floor>
 80127b4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80127b8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80127bc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80127c0:	2c00      	cmp	r4, #0
 80127c2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80127c6:	ee17 8a90 	vmov	r8, s15
 80127ca:	ee38 8b40 	vsub.f64	d8, d8, d0
 80127ce:	9905      	ldr	r1, [sp, #20]
 80127d0:	dd43      	ble.n	801285a <__kernel_rem_pio2+0x1b2>
 80127d2:	1e68      	subs	r0, r5, #1
 80127d4:	ab06      	add	r3, sp, #24
 80127d6:	f1c4 0c18 	rsb	ip, r4, #24
 80127da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80127de:	fa46 f20c 	asr.w	r2, r6, ip
 80127e2:	4490      	add	r8, r2
 80127e4:	fa02 f20c 	lsl.w	r2, r2, ip
 80127e8:	1ab6      	subs	r6, r6, r2
 80127ea:	f1c4 0217 	rsb	r2, r4, #23
 80127ee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80127f2:	4116      	asrs	r6, r2
 80127f4:	2e00      	cmp	r6, #0
 80127f6:	dd3f      	ble.n	8012878 <__kernel_rem_pio2+0x1d0>
 80127f8:	f04f 0c00 	mov.w	ip, #0
 80127fc:	f108 0801 	add.w	r8, r8, #1
 8012800:	4660      	mov	r0, ip
 8012802:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8012806:	4565      	cmp	r5, ip
 8012808:	dc6e      	bgt.n	80128e8 <__kernel_rem_pio2+0x240>
 801280a:	2c00      	cmp	r4, #0
 801280c:	dd04      	ble.n	8012818 <__kernel_rem_pio2+0x170>
 801280e:	2c01      	cmp	r4, #1
 8012810:	d07f      	beq.n	8012912 <__kernel_rem_pio2+0x26a>
 8012812:	2c02      	cmp	r4, #2
 8012814:	f000 8087 	beq.w	8012926 <__kernel_rem_pio2+0x27e>
 8012818:	2e02      	cmp	r6, #2
 801281a:	d12d      	bne.n	8012878 <__kernel_rem_pio2+0x1d0>
 801281c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012820:	ee30 8b48 	vsub.f64	d8, d0, d8
 8012824:	b340      	cbz	r0, 8012878 <__kernel_rem_pio2+0x1d0>
 8012826:	4620      	mov	r0, r4
 8012828:	9105      	str	r1, [sp, #20]
 801282a:	f000 faad 	bl	8012d88 <scalbn>
 801282e:	9905      	ldr	r1, [sp, #20]
 8012830:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012834:	e020      	b.n	8012878 <__kernel_rem_pio2+0x1d0>
 8012836:	ee20 7b09 	vmul.f64	d7, d0, d9
 801283a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801283e:	3801      	subs	r0, #1
 8012840:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8012844:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8012848:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801284c:	eca6 0a01 	vstmia	r6!, {s0}
 8012850:	ed92 0b00 	vldr	d0, [r2]
 8012854:	ee37 0b00 	vadd.f64	d0, d7, d0
 8012858:	e79c      	b.n	8012794 <__kernel_rem_pio2+0xec>
 801285a:	d105      	bne.n	8012868 <__kernel_rem_pio2+0x1c0>
 801285c:	1e6a      	subs	r2, r5, #1
 801285e:	ab06      	add	r3, sp, #24
 8012860:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8012864:	15f6      	asrs	r6, r6, #23
 8012866:	e7c5      	b.n	80127f4 <__kernel_rem_pio2+0x14c>
 8012868:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801286c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012874:	da36      	bge.n	80128e4 <__kernel_rem_pio2+0x23c>
 8012876:	2600      	movs	r6, #0
 8012878:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801287c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012880:	f040 80aa 	bne.w	80129d8 <__kernel_rem_pio2+0x330>
 8012884:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8012888:	4658      	mov	r0, fp
 801288a:	2200      	movs	r2, #0
 801288c:	4548      	cmp	r0, r9
 801288e:	da52      	bge.n	8012936 <__kernel_rem_pio2+0x28e>
 8012890:	2a00      	cmp	r2, #0
 8012892:	f000 8081 	beq.w	8012998 <__kernel_rem_pio2+0x2f0>
 8012896:	ab06      	add	r3, sp, #24
 8012898:	3c18      	subs	r4, #24
 801289a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	f000 8087 	beq.w	80129b2 <__kernel_rem_pio2+0x30a>
 80128a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80128a8:	4620      	mov	r0, r4
 80128aa:	f000 fa6d 	bl	8012d88 <scalbn>
 80128ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80128b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80129c0 <__kernel_rem_pio2+0x318>
 80128b6:	a96a      	add	r1, sp, #424	; 0x1a8
 80128b8:	f103 0208 	add.w	r2, r3, #8
 80128bc:	1888      	adds	r0, r1, r2
 80128be:	4659      	mov	r1, fp
 80128c0:	2900      	cmp	r1, #0
 80128c2:	f280 80b7 	bge.w	8012a34 <__kernel_rem_pio2+0x38c>
 80128c6:	4659      	mov	r1, fp
 80128c8:	2900      	cmp	r1, #0
 80128ca:	f2c0 80d5 	blt.w	8012a78 <__kernel_rem_pio2+0x3d0>
 80128ce:	a86a      	add	r0, sp, #424	; 0x1a8
 80128d0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80128d4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80129b8 <__kernel_rem_pio2+0x310>
 80128d8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80129d4 <__kernel_rem_pio2+0x32c>
 80128dc:	2400      	movs	r4, #0
 80128de:	ebab 0001 	sub.w	r0, fp, r1
 80128e2:	e0be      	b.n	8012a62 <__kernel_rem_pio2+0x3ba>
 80128e4:	2602      	movs	r6, #2
 80128e6:	e787      	b.n	80127f8 <__kernel_rem_pio2+0x150>
 80128e8:	f8db 2000 	ldr.w	r2, [fp]
 80128ec:	b958      	cbnz	r0, 8012906 <__kernel_rem_pio2+0x25e>
 80128ee:	b122      	cbz	r2, 80128fa <__kernel_rem_pio2+0x252>
 80128f0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80128f4:	f8cb 2000 	str.w	r2, [fp]
 80128f8:	2201      	movs	r2, #1
 80128fa:	f10c 0c01 	add.w	ip, ip, #1
 80128fe:	f10b 0b04 	add.w	fp, fp, #4
 8012902:	4610      	mov	r0, r2
 8012904:	e77f      	b.n	8012806 <__kernel_rem_pio2+0x15e>
 8012906:	ebae 0202 	sub.w	r2, lr, r2
 801290a:	f8cb 2000 	str.w	r2, [fp]
 801290e:	4602      	mov	r2, r0
 8012910:	e7f3      	b.n	80128fa <__kernel_rem_pio2+0x252>
 8012912:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8012916:	ab06      	add	r3, sp, #24
 8012918:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801291c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012920:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8012924:	e778      	b.n	8012818 <__kernel_rem_pio2+0x170>
 8012926:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801292a:	ab06      	add	r3, sp, #24
 801292c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8012930:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8012934:	e7f4      	b.n	8012920 <__kernel_rem_pio2+0x278>
 8012936:	ab06      	add	r3, sp, #24
 8012938:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801293c:	3801      	subs	r0, #1
 801293e:	431a      	orrs	r2, r3
 8012940:	e7a4      	b.n	801288c <__kernel_rem_pio2+0x1e4>
 8012942:	f10c 0c01 	add.w	ip, ip, #1
 8012946:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801294a:	2800      	cmp	r0, #0
 801294c:	d0f9      	beq.n	8012942 <__kernel_rem_pio2+0x29a>
 801294e:	9b04      	ldr	r3, [sp, #16]
 8012950:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8012954:	eb0d 0203 	add.w	r2, sp, r3
 8012958:	9b01      	ldr	r3, [sp, #4]
 801295a:	18e8      	adds	r0, r5, r3
 801295c:	ab1a      	add	r3, sp, #104	; 0x68
 801295e:	1c6e      	adds	r6, r5, #1
 8012960:	3a98      	subs	r2, #152	; 0x98
 8012962:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8012966:	4465      	add	r5, ip
 8012968:	42b5      	cmp	r5, r6
 801296a:	f6ff af05 	blt.w	8012778 <__kernel_rem_pio2+0xd0>
 801296e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8012972:	f8dd e008 	ldr.w	lr, [sp, #8]
 8012976:	ee07 3a90 	vmov	s15, r3
 801297a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801297e:	f04f 0c00 	mov.w	ip, #0
 8012982:	eca0 7b02 	vstmia	r0!, {d7}
 8012986:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80129b8 <__kernel_rem_pio2+0x310>
 801298a:	4680      	mov	r8, r0
 801298c:	458c      	cmp	ip, r1
 801298e:	dd07      	ble.n	80129a0 <__kernel_rem_pio2+0x2f8>
 8012990:	eca2 7b02 	vstmia	r2!, {d7}
 8012994:	3601      	adds	r6, #1
 8012996:	e7e7      	b.n	8012968 <__kernel_rem_pio2+0x2c0>
 8012998:	9a03      	ldr	r2, [sp, #12]
 801299a:	f04f 0c01 	mov.w	ip, #1
 801299e:	e7d2      	b.n	8012946 <__kernel_rem_pio2+0x29e>
 80129a0:	ecbe 5b02 	vldmia	lr!, {d5}
 80129a4:	ed38 6b02 	vldmdb	r8!, {d6}
 80129a8:	f10c 0c01 	add.w	ip, ip, #1
 80129ac:	eea5 7b06 	vfma.f64	d7, d5, d6
 80129b0:	e7ec      	b.n	801298c <__kernel_rem_pio2+0x2e4>
 80129b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80129b6:	e76e      	b.n	8012896 <__kernel_rem_pio2+0x1ee>
	...
 80129c4:	3e700000 	.word	0x3e700000
 80129c8:	00000000 	.word	0x00000000
 80129cc:	41700000 	.word	0x41700000
 80129d0:	08184fe8 	.word	0x08184fe8
 80129d4:	08184fa8 	.word	0x08184fa8
 80129d8:	4260      	negs	r0, r4
 80129da:	eeb0 0b48 	vmov.f64	d0, d8
 80129de:	f000 f9d3 	bl	8012d88 <scalbn>
 80129e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8012bc0 <__kernel_rem_pio2+0x518>
 80129e6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	db18      	blt.n	8012a22 <__kernel_rem_pio2+0x37a>
 80129f0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8012bc8 <__kernel_rem_pio2+0x520>
 80129f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80129f8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80129fc:	aa06      	add	r2, sp, #24
 80129fe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8012a02:	eea5 0b46 	vfms.f64	d0, d5, d6
 8012a06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012a0a:	f105 0b01 	add.w	fp, r5, #1
 8012a0e:	ee10 3a10 	vmov	r3, s0
 8012a12:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012a16:	ee17 3a10 	vmov	r3, s14
 8012a1a:	3418      	adds	r4, #24
 8012a1c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8012a20:	e740      	b.n	80128a4 <__kernel_rem_pio2+0x1fc>
 8012a22:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8012a26:	aa06      	add	r2, sp, #24
 8012a28:	ee10 3a10 	vmov	r3, s0
 8012a2c:	46ab      	mov	fp, r5
 8012a2e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8012a32:	e737      	b.n	80128a4 <__kernel_rem_pio2+0x1fc>
 8012a34:	ac06      	add	r4, sp, #24
 8012a36:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8012a3a:	9401      	str	r4, [sp, #4]
 8012a3c:	ee07 4a90 	vmov	s15, r4
 8012a40:	3901      	subs	r1, #1
 8012a42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012a46:	ee27 7b00 	vmul.f64	d7, d7, d0
 8012a4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8012a4e:	ed20 7b02 	vstmdb	r0!, {d7}
 8012a52:	e735      	b.n	80128c0 <__kernel_rem_pio2+0x218>
 8012a54:	ecbc 5b02 	vldmia	ip!, {d5}
 8012a58:	ecb5 6b02 	vldmia	r5!, {d6}
 8012a5c:	3401      	adds	r4, #1
 8012a5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012a62:	454c      	cmp	r4, r9
 8012a64:	dc01      	bgt.n	8012a6a <__kernel_rem_pio2+0x3c2>
 8012a66:	4284      	cmp	r4, r0
 8012a68:	ddf4      	ble.n	8012a54 <__kernel_rem_pio2+0x3ac>
 8012a6a:	ac42      	add	r4, sp, #264	; 0x108
 8012a6c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8012a70:	ed80 7b00 	vstr	d7, [r0]
 8012a74:	3901      	subs	r1, #1
 8012a76:	e727      	b.n	80128c8 <__kernel_rem_pio2+0x220>
 8012a78:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8012a7a:	2902      	cmp	r1, #2
 8012a7c:	dc0a      	bgt.n	8012a94 <__kernel_rem_pio2+0x3ec>
 8012a7e:	2900      	cmp	r1, #0
 8012a80:	dc2c      	bgt.n	8012adc <__kernel_rem_pio2+0x434>
 8012a82:	d045      	beq.n	8012b10 <__kernel_rem_pio2+0x468>
 8012a84:	f008 0007 	and.w	r0, r8, #7
 8012a88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8012a8c:	ecbd 8b06 	vpop	{d8-d10}
 8012a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a94:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8012a96:	2a03      	cmp	r2, #3
 8012a98:	d1f4      	bne.n	8012a84 <__kernel_rem_pio2+0x3dc>
 8012a9a:	aa42      	add	r2, sp, #264	; 0x108
 8012a9c:	4413      	add	r3, r2
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	4658      	mov	r0, fp
 8012aa4:	2800      	cmp	r0, #0
 8012aa6:	f1a1 0108 	sub.w	r1, r1, #8
 8012aaa:	dc54      	bgt.n	8012b56 <__kernel_rem_pio2+0x4ae>
 8012aac:	4659      	mov	r1, fp
 8012aae:	2901      	cmp	r1, #1
 8012ab0:	f1a2 0208 	sub.w	r2, r2, #8
 8012ab4:	dc5f      	bgt.n	8012b76 <__kernel_rem_pio2+0x4ce>
 8012ab6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8012bd0 <__kernel_rem_pio2+0x528>
 8012aba:	3308      	adds	r3, #8
 8012abc:	f1bb 0f01 	cmp.w	fp, #1
 8012ac0:	dc69      	bgt.n	8012b96 <__kernel_rem_pio2+0x4ee>
 8012ac2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8012ac6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8012aca:	2e00      	cmp	r6, #0
 8012acc:	d16a      	bne.n	8012ba4 <__kernel_rem_pio2+0x4fc>
 8012ace:	ed87 5b00 	vstr	d5, [r7]
 8012ad2:	ed87 6b02 	vstr	d6, [r7, #8]
 8012ad6:	ed87 7b04 	vstr	d7, [r7, #16]
 8012ada:	e7d3      	b.n	8012a84 <__kernel_rem_pio2+0x3dc>
 8012adc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012bd0 <__kernel_rem_pio2+0x528>
 8012ae0:	ab42      	add	r3, sp, #264	; 0x108
 8012ae2:	441a      	add	r2, r3
 8012ae4:	465b      	mov	r3, fp
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	da26      	bge.n	8012b38 <__kernel_rem_pio2+0x490>
 8012aea:	b35e      	cbz	r6, 8012b44 <__kernel_rem_pio2+0x49c>
 8012aec:	eeb1 7b46 	vneg.f64	d7, d6
 8012af0:	ed87 7b00 	vstr	d7, [r7]
 8012af4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8012af8:	aa44      	add	r2, sp, #272	; 0x110
 8012afa:	2301      	movs	r3, #1
 8012afc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b00:	459b      	cmp	fp, r3
 8012b02:	da22      	bge.n	8012b4a <__kernel_rem_pio2+0x4a2>
 8012b04:	b10e      	cbz	r6, 8012b0a <__kernel_rem_pio2+0x462>
 8012b06:	eeb1 7b47 	vneg.f64	d7, d7
 8012b0a:	ed87 7b02 	vstr	d7, [r7, #8]
 8012b0e:	e7b9      	b.n	8012a84 <__kernel_rem_pio2+0x3dc>
 8012b10:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8012bd0 <__kernel_rem_pio2+0x528>
 8012b14:	ab42      	add	r3, sp, #264	; 0x108
 8012b16:	441a      	add	r2, r3
 8012b18:	f1bb 0f00 	cmp.w	fp, #0
 8012b1c:	da05      	bge.n	8012b2a <__kernel_rem_pio2+0x482>
 8012b1e:	b10e      	cbz	r6, 8012b24 <__kernel_rem_pio2+0x47c>
 8012b20:	eeb1 7b47 	vneg.f64	d7, d7
 8012b24:	ed87 7b00 	vstr	d7, [r7]
 8012b28:	e7ac      	b.n	8012a84 <__kernel_rem_pio2+0x3dc>
 8012b2a:	ed32 6b02 	vldmdb	r2!, {d6}
 8012b2e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012b32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b36:	e7ef      	b.n	8012b18 <__kernel_rem_pio2+0x470>
 8012b38:	ed32 7b02 	vldmdb	r2!, {d7}
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8012b42:	e7d0      	b.n	8012ae6 <__kernel_rem_pio2+0x43e>
 8012b44:	eeb0 7b46 	vmov.f64	d7, d6
 8012b48:	e7d2      	b.n	8012af0 <__kernel_rem_pio2+0x448>
 8012b4a:	ecb2 6b02 	vldmia	r2!, {d6}
 8012b4e:	3301      	adds	r3, #1
 8012b50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012b54:	e7d4      	b.n	8012b00 <__kernel_rem_pio2+0x458>
 8012b56:	ed91 7b00 	vldr	d7, [r1]
 8012b5a:	ed91 5b02 	vldr	d5, [r1, #8]
 8012b5e:	3801      	subs	r0, #1
 8012b60:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012b64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b68:	ed81 6b00 	vstr	d6, [r1]
 8012b6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012b70:	ed81 7b02 	vstr	d7, [r1, #8]
 8012b74:	e796      	b.n	8012aa4 <__kernel_rem_pio2+0x3fc>
 8012b76:	ed92 7b00 	vldr	d7, [r2]
 8012b7a:	ed92 5b02 	vldr	d5, [r2, #8]
 8012b7e:	3901      	subs	r1, #1
 8012b80:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012b84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b88:	ed82 6b00 	vstr	d6, [r2]
 8012b8c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012b90:	ed82 7b02 	vstr	d7, [r2, #8]
 8012b94:	e78b      	b.n	8012aae <__kernel_rem_pio2+0x406>
 8012b96:	ed33 6b02 	vldmdb	r3!, {d6}
 8012b9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012b9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8012ba2:	e78b      	b.n	8012abc <__kernel_rem_pio2+0x414>
 8012ba4:	eeb1 5b45 	vneg.f64	d5, d5
 8012ba8:	eeb1 6b46 	vneg.f64	d6, d6
 8012bac:	ed87 5b00 	vstr	d5, [r7]
 8012bb0:	eeb1 7b47 	vneg.f64	d7, d7
 8012bb4:	ed87 6b02 	vstr	d6, [r7, #8]
 8012bb8:	e78d      	b.n	8012ad6 <__kernel_rem_pio2+0x42e>
 8012bba:	bf00      	nop
 8012bbc:	f3af 8000 	nop.w
 8012bc0:	00000000 	.word	0x00000000
 8012bc4:	41700000 	.word	0x41700000
 8012bc8:	00000000 	.word	0x00000000
 8012bcc:	3e700000 	.word	0x3e700000
	...

08012bd8 <__kernel_sin>:
 8012bd8:	ee10 3a90 	vmov	r3, s1
 8012bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012be0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012be4:	da04      	bge.n	8012bf0 <__kernel_sin+0x18>
 8012be6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8012bea:	ee17 3a90 	vmov	r3, s15
 8012bee:	b35b      	cbz	r3, 8012c48 <__kernel_sin+0x70>
 8012bf0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8012bf4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8012bf8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8012c50 <__kernel_sin+0x78>
 8012bfc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c58 <__kernel_sin+0x80>
 8012c00:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012c04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012c60 <__kernel_sin+0x88>
 8012c08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012c0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c68 <__kernel_sin+0x90>
 8012c10:	eea7 4b06 	vfma.f64	d4, d7, d6
 8012c14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012c70 <__kernel_sin+0x98>
 8012c18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8012c1c:	b930      	cbnz	r0, 8012c2c <__kernel_sin+0x54>
 8012c1e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8012c78 <__kernel_sin+0xa0>
 8012c22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8012c26:	eea4 0b05 	vfma.f64	d0, d4, d5
 8012c2a:	4770      	bx	lr
 8012c2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8012c30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012c34:	eea1 7b04 	vfma.f64	d7, d1, d4
 8012c38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8012c3c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8012c80 <__kernel_sin+0xa8>
 8012c40:	eea5 1b07 	vfma.f64	d1, d5, d7
 8012c44:	ee30 0b41 	vsub.f64	d0, d0, d1
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	f3af 8000 	nop.w
 8012c50:	5acfd57c 	.word	0x5acfd57c
 8012c54:	3de5d93a 	.word	0x3de5d93a
 8012c58:	8a2b9ceb 	.word	0x8a2b9ceb
 8012c5c:	be5ae5e6 	.word	0xbe5ae5e6
 8012c60:	57b1fe7d 	.word	0x57b1fe7d
 8012c64:	3ec71de3 	.word	0x3ec71de3
 8012c68:	19c161d5 	.word	0x19c161d5
 8012c6c:	bf2a01a0 	.word	0xbf2a01a0
 8012c70:	1110f8a6 	.word	0x1110f8a6
 8012c74:	3f811111 	.word	0x3f811111
 8012c78:	55555549 	.word	0x55555549
 8012c7c:	bfc55555 	.word	0xbfc55555
 8012c80:	55555549 	.word	0x55555549
 8012c84:	3fc55555 	.word	0x3fc55555

08012c88 <fabs>:
 8012c88:	ec51 0b10 	vmov	r0, r1, d0
 8012c8c:	ee10 2a10 	vmov	r2, s0
 8012c90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012c94:	ec43 2b10 	vmov	d0, r2, r3
 8012c98:	4770      	bx	lr
 8012c9a:	0000      	movs	r0, r0
 8012c9c:	0000      	movs	r0, r0
	...

08012ca0 <floor>:
 8012ca0:	ee10 1a90 	vmov	r1, s1
 8012ca4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012ca8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8012cac:	2b13      	cmp	r3, #19
 8012cae:	b530      	push	{r4, r5, lr}
 8012cb0:	ee10 0a10 	vmov	r0, s0
 8012cb4:	ee10 5a10 	vmov	r5, s0
 8012cb8:	dc31      	bgt.n	8012d1e <floor+0x7e>
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	da15      	bge.n	8012cea <floor+0x4a>
 8012cbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012d78 <floor+0xd8>
 8012cc2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012cc6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cce:	dd07      	ble.n	8012ce0 <floor+0x40>
 8012cd0:	2900      	cmp	r1, #0
 8012cd2:	da4e      	bge.n	8012d72 <floor+0xd2>
 8012cd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012cd8:	4318      	orrs	r0, r3
 8012cda:	d001      	beq.n	8012ce0 <floor+0x40>
 8012cdc:	4928      	ldr	r1, [pc, #160]	; (8012d80 <floor+0xe0>)
 8012cde:	2000      	movs	r0, #0
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	ec43 2b10 	vmov	d0, r2, r3
 8012ce8:	e020      	b.n	8012d2c <floor+0x8c>
 8012cea:	4a26      	ldr	r2, [pc, #152]	; (8012d84 <floor+0xe4>)
 8012cec:	411a      	asrs	r2, r3
 8012cee:	ea01 0402 	and.w	r4, r1, r2
 8012cf2:	4304      	orrs	r4, r0
 8012cf4:	d01a      	beq.n	8012d2c <floor+0x8c>
 8012cf6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012d78 <floor+0xd8>
 8012cfa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012cfe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d06:	ddeb      	ble.n	8012ce0 <floor+0x40>
 8012d08:	2900      	cmp	r1, #0
 8012d0a:	bfbe      	ittt	lt
 8012d0c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8012d10:	fa40 f303 	asrlt.w	r3, r0, r3
 8012d14:	18c9      	addlt	r1, r1, r3
 8012d16:	ea21 0102 	bic.w	r1, r1, r2
 8012d1a:	2000      	movs	r0, #0
 8012d1c:	e7e0      	b.n	8012ce0 <floor+0x40>
 8012d1e:	2b33      	cmp	r3, #51	; 0x33
 8012d20:	dd05      	ble.n	8012d2e <floor+0x8e>
 8012d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012d26:	d101      	bne.n	8012d2c <floor+0x8c>
 8012d28:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012d2c:	bd30      	pop	{r4, r5, pc}
 8012d2e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8012d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d36:	40e2      	lsrs	r2, r4
 8012d38:	4202      	tst	r2, r0
 8012d3a:	d0f7      	beq.n	8012d2c <floor+0x8c>
 8012d3c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012d78 <floor+0xd8>
 8012d40:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012d44:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4c:	ddc8      	ble.n	8012ce0 <floor+0x40>
 8012d4e:	2900      	cmp	r1, #0
 8012d50:	da02      	bge.n	8012d58 <floor+0xb8>
 8012d52:	2b14      	cmp	r3, #20
 8012d54:	d103      	bne.n	8012d5e <floor+0xbe>
 8012d56:	3101      	adds	r1, #1
 8012d58:	ea20 0002 	bic.w	r0, r0, r2
 8012d5c:	e7c0      	b.n	8012ce0 <floor+0x40>
 8012d5e:	2401      	movs	r4, #1
 8012d60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012d64:	fa04 f303 	lsl.w	r3, r4, r3
 8012d68:	4418      	add	r0, r3
 8012d6a:	42a8      	cmp	r0, r5
 8012d6c:	bf38      	it	cc
 8012d6e:	1909      	addcc	r1, r1, r4
 8012d70:	e7f2      	b.n	8012d58 <floor+0xb8>
 8012d72:	2000      	movs	r0, #0
 8012d74:	4601      	mov	r1, r0
 8012d76:	e7b3      	b.n	8012ce0 <floor+0x40>
 8012d78:	8800759c 	.word	0x8800759c
 8012d7c:	7e37e43c 	.word	0x7e37e43c
 8012d80:	bff00000 	.word	0xbff00000
 8012d84:	000fffff 	.word	0x000fffff

08012d88 <scalbn>:
 8012d88:	ee10 1a90 	vmov	r1, s1
 8012d8c:	b510      	push	{r4, lr}
 8012d8e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012d92:	b98c      	cbnz	r4, 8012db8 <scalbn+0x30>
 8012d94:	ee10 3a10 	vmov	r3, s0
 8012d98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d9c:	430b      	orrs	r3, r1
 8012d9e:	d011      	beq.n	8012dc4 <scalbn+0x3c>
 8012da0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012e68 <scalbn+0xe0>
 8012da4:	4b3c      	ldr	r3, [pc, #240]	; (8012e98 <scalbn+0x110>)
 8012da6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012daa:	4298      	cmp	r0, r3
 8012dac:	da0b      	bge.n	8012dc6 <scalbn+0x3e>
 8012dae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012e70 <scalbn+0xe8>
 8012db2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012db6:	e005      	b.n	8012dc4 <scalbn+0x3c>
 8012db8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012dbc:	429c      	cmp	r4, r3
 8012dbe:	d107      	bne.n	8012dd0 <scalbn+0x48>
 8012dc0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8012dc4:	bd10      	pop	{r4, pc}
 8012dc6:	ee10 1a90 	vmov	r1, s1
 8012dca:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012dce:	3c36      	subs	r4, #54	; 0x36
 8012dd0:	4404      	add	r4, r0
 8012dd2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8012dd6:	429c      	cmp	r4, r3
 8012dd8:	dd0d      	ble.n	8012df6 <scalbn+0x6e>
 8012dda:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012e78 <scalbn+0xf0>
 8012dde:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012e80 <scalbn+0xf8>
 8012de2:	eeb0 6b47 	vmov.f64	d6, d7
 8012de6:	ee10 3a90 	vmov	r3, s1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012df0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8012df4:	e7e6      	b.n	8012dc4 <scalbn+0x3c>
 8012df6:	2c00      	cmp	r4, #0
 8012df8:	dd0a      	ble.n	8012e10 <scalbn+0x88>
 8012dfa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012dfe:	ec53 2b10 	vmov	r2, r3, d0
 8012e02:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012e06:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012e0a:	ec43 2b10 	vmov	d0, r2, r3
 8012e0e:	e7d9      	b.n	8012dc4 <scalbn+0x3c>
 8012e10:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8012e14:	da19      	bge.n	8012e4a <scalbn+0xc2>
 8012e16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e1a:	4298      	cmp	r0, r3
 8012e1c:	ee10 3a90 	vmov	r3, s1
 8012e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012e24:	dd09      	ble.n	8012e3a <scalbn+0xb2>
 8012e26:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012e78 <scalbn+0xf0>
 8012e2a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012e80 <scalbn+0xf8>
 8012e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8012e38:	e7bb      	b.n	8012db2 <scalbn+0x2a>
 8012e3a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012e70 <scalbn+0xe8>
 8012e3e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012e88 <scalbn+0x100>
 8012e42:	eeb0 7b40 	vmov.f64	d7, d0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	e7f4      	b.n	8012e34 <scalbn+0xac>
 8012e4a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8012e4e:	ec53 2b10 	vmov	r2, r3, d0
 8012e52:	3436      	adds	r4, #54	; 0x36
 8012e54:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012e58:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012e5c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012e90 <scalbn+0x108>
 8012e60:	ec43 2b10 	vmov	d0, r2, r3
 8012e64:	e7a5      	b.n	8012db2 <scalbn+0x2a>
 8012e66:	bf00      	nop
 8012e68:	00000000 	.word	0x00000000
 8012e6c:	43500000 	.word	0x43500000
 8012e70:	c2f8f359 	.word	0xc2f8f359
 8012e74:	01a56e1f 	.word	0x01a56e1f
 8012e78:	8800759c 	.word	0x8800759c
 8012e7c:	7e37e43c 	.word	0x7e37e43c
 8012e80:	8800759c 	.word	0x8800759c
 8012e84:	fe37e43c 	.word	0xfe37e43c
 8012e88:	c2f8f359 	.word	0xc2f8f359
 8012e8c:	81a56e1f 	.word	0x81a56e1f
 8012e90:	00000000 	.word	0x00000000
 8012e94:	3c900000 	.word	0x3c900000
 8012e98:	ffff3cb0 	.word	0xffff3cb0

08012e9c <nanf>:
 8012e9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012ea4 <nanf+0x8>
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	7fc00000 	.word	0x7fc00000

08012ea8 <_init>:
 8012ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eaa:	bf00      	nop
 8012eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eae:	bc08      	pop	{r3}
 8012eb0:	469e      	mov	lr, r3
 8012eb2:	4770      	bx	lr

08012eb4 <_fini>:
 8012eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eb6:	bf00      	nop
 8012eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eba:	bc08      	pop	{r3}
 8012ebc:	469e      	mov	lr, r3
 8012ebe:	4770      	bx	lr
