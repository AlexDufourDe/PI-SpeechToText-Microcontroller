
IA-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  08009f20  08009f20  00019f20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a57c  0800a57c  00020704  2**0
                  CONTENTS
  4 .ARM          00000008  0800a57c  0800a57c  0001a57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a584  0800a584  00020704  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a584  0800a584  0001a584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000704  20000000  0800a58c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea8  20000704  0800ac90  00020704  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200015ac  0800ac90  000215ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020704  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002302a  00000000  00000000  00020732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004064  00000000  00000000  0004375c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  000477c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001940  00000000  00000000  000492b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003597d  00000000  00000000  0004abf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022d5b  00000000  00000000  00080575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00142255  00000000  00000000  000a32d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e5525  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007700  00000000  00000000  001e5578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000704 	.word	0x20000704
 800021c:	00000000 	.word	0x00000000
 8000220:	08009ef4 	.word	0x08009ef4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000708 	.word	0x20000708
 800023c:	08009ef4 	.word	0x08009ef4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0ca      	sub	sp, #296	; 0x128
 80006bc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	__HAL_RCC_CRC_CLK_ENABLE();
 80006be:	4b77      	ldr	r3, [pc, #476]	; (800089c <main+0x1e4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a76      	ldr	r2, [pc, #472]	; (800089c <main+0x1e4>)
 80006c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b74      	ldr	r3, [pc, #464]	; (800089c <main+0x1e4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80006d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006d6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80006e4:	681b      	ldr	r3, [r3, #0]
	char buf[50];
	  int buf_len = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  // Pointer to our model
	  ai_handle sine_model;

	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
	    AI_SINE_MODEL_DATA_WEIGHTS(ai_sine_model_data_weights_get()),
 80006ec:	f006 fbf4 	bl	8006ed8 <ai_sine_model_data_weights_get>
 80006f0:	4602      	mov	r2, r0
 80006f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f006 fbb7 	bl	8006e70 <ai_sine_model_data_weights_buffer_get>
	    AI_SINE_MODEL_DATA_ACTIVATIONS(activations)
 8000702:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000706:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800070a:	331c      	adds	r3, #28
 800070c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f006 fb78 	bl	8006e08 <ai_sine_model_data_activations_buffer_get>
	  };

	  // Create instance of neural network
	  ai_err = ai_sine_model_create(&sine_model, AI_SINE_MODEL_DATA_CONFIG);
 8000718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 fadc 	bl	8006cdc <ai_sine_model_create>
 8000724:	4603      	mov	r3, r0
 8000726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  if (ai_err.type != AI_ERROR_NONE)
 800072a:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 800072e:	2b00      	cmp	r3, #0
 8000730:	d008      	beq.n	8000744 <main+0x8c>
	  {
	    buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000732:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000736:	495a      	ldr	r1, [pc, #360]	; (80008a0 <main+0x1e8>)
 8000738:	4618      	mov	r0, r3
 800073a:	f009 f86d 	bl	8009818 <siprintf>
 800073e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	    while(1);
 8000742:	e7fe      	b.n	8000742 <main+0x8a>
	  }

	    // Initialize neural network
	    if (!ai_sine_model_init(sine_model, &ai_params))
 8000744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000746:	f107 0208 	add.w	r2, r7, #8
 800074a:	4611      	mov	r1, r2
 800074c:	4618      	mov	r0, r3
 800074e:	f006 fb0f 	bl	8006d70 <ai_sine_model_init>
 8000752:	4603      	mov	r3, r0
 8000754:	f083 0301 	eor.w	r3, r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d008      	beq.n	8000770 <main+0xb8>
	    {
	      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800075e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000762:	4950      	ldr	r1, [pc, #320]	; (80008a4 <main+0x1ec>)
 8000764:	4618      	mov	r0, r3
 8000766:	f009 f857 	bl	8009818 <siprintf>
 800076a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	      while(1);
 800076e:	e7fe      	b.n	800076e <main+0xb6>
	    }
	  // Initialize wrapper structs that hold pointers to data and info about the
	  // data (tensor height, width, channels)
	  ai_buffer* ai_input  = ai_sine_model_inputs_get(sine_model, 0);
 8000770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f006 fac7 	bl	8006d08 <ai_sine_model_inputs_get>
 800077a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	  ai_buffer* ai_output = AI_SINE_MODEL_OUT;
 800077e:	2100      	movs	r1, #0
 8000780:	2000      	movs	r0, #0
 8000782:	f006 fadb 	bl	8006d3c <ai_sine_model_outputs_get>
 8000786:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110


	  // Set pointers wrapper structs to our data buffers
	  //ai_input[0].n_batches = 1;
	  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800078a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800078e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000792:	605a      	str	r2, [r3, #4]
	  //ai_output[0].n_batches = 1;
	  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000794:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000798:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800079c:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800079e:	f7ff ff21 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80007a2:	f7ff ff45 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f001 fc5e 	bl	8002066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f885 	bl	80008b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ae:	f000 f8f5 	bl	800099c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 fcdd 	bl	8001170 <MX_GPIO_Init>
  MX_ADC3_Init();
 80007b6:	f000 f91b 	bl	80009f0 <MX_ADC3_Init>
  MX_DSIHOST_DSI_Init();
 80007ba:	f000 f98d 	bl	8000ad8 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80007be:	f000 fbdb 	bl	8000f78 <MX_FMC_Init>
  MX_QUADSPI_Init();
 80007c2:	f000 fa41 	bl	8000c48 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80007c6:	f000 fa6b 	bl	8000ca0 <MX_SAI1_Init>
  MX_SAI2_Init();
 80007ca:	f000 fa95 	bl	8000cf8 <MX_SAI2_Init>
  //MX_SDMMC1_MMC_Init();
  MX_SPDIFRX_Init();
 80007ce:	f000 faed 	bl	8000dac <MX_SPDIFRX_Init>
  MX_USART1_UART_Init();
 80007d2:	f000 fb41 	bl	8000e58 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d6:	f000 fb6f 	bl	8000eb8 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007da:	f000 fb9b 	bl	8000f14 <MX_USB_OTG_HS_PCD_Init>
  MX_CRC_Init();
 80007de:	f000 f959 	bl	8000a94 <MX_CRC_Init>
  MX_TIM14_Init();
 80007e2:	f000 fb15 	bl	8000e10 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim14);
 80007e6:	4830      	ldr	r0, [pc, #192]	; (80008a8 <main+0x1f0>)
 80007e8:	f004 ff30 	bl	800564c <HAL_TIM_Base_Start>

  // Greetings!
  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 80007ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007f0:	492e      	ldr	r1, [pc, #184]	; (80008ac <main+0x1f4>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f009 f810 	bl	8009818 <siprintf>
 80007f8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Fill input buffer (use test value)
	      for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000802:	e00d      	b.n	8000820 <main+0x168>
	      {
	        ((ai_float *)in_data)[i] = (ai_float)2.0f;
 8000804:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800080e:	4413      	add	r3, r2
 8000810:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000814:	601a      	str	r2, [r3, #0]
	      for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800081a:	3301      	adds	r3, #1
 800081c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0ed      	beq.n	8000804 <main+0x14c>
	      }

	      // Get current timestamp
	      timestamp = htim14.Instance->CNT;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <main+0x1f0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	      // Perform inference
	      nbatch = ai_sine_model_run(sine_model, &ai_input[0], &ai_output[0]);
 8000832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000834:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000838:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800083c:	4618      	mov	r0, r3
 800083e:	f006 fad3 	bl	8006de8 <ai_sine_model_run>
 8000842:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	      if (nbatch != 1) {
 8000846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800084a:	2b01      	cmp	r3, #1
 800084c:	d007      	beq.n	800085e <main+0x1a6>
	        buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800084e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000852:	4917      	ldr	r1, [pc, #92]	; (80008b0 <main+0x1f8>)
 8000854:	4618      	mov	r0, r3
 8000856:	f008 ffdf 	bl	8009818 <siprintf>
 800085a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
	      }

	      // Read output (predicted y) of neural network
	      y_val = ((float *)out_data)[0];
 800085e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	      // Print output of neural network along with inference time (microseconds)
	      buf_len = sprintf(buf,
 8000868:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 800086c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
	                        "Output: %d | Duration: %u\r\n",
	                        y_val,
	                        htim14.Instance->CNT - timestamp);
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <main+0x1f0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	      buf_len = sprintf(buf,
 8000876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	ec53 2b17 	vmov	r2, r3, d7
 8000886:	490b      	ldr	r1, [pc, #44]	; (80008b4 <main+0x1fc>)
 8000888:	f008 ffc6 	bl	8009818 <siprintf>
 800088c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

	      // Wait before doing it again
	      HAL_Delay(500);
 8000890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000894:	f001 fc44 	bl	8002120 <HAL_Delay>
	      for (uint32_t i = 0; i < AI_SINE_MODEL_IN_1_SIZE; i++)
 8000898:	e7b0      	b.n	80007fc <main+0x144>
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	08009f20 	.word	0x08009f20
 80008a4:	08009f48 	.word	0x08009f48
 80008a8:	20000948 	.word	0x20000948
 80008ac:	08009f6c 	.word	0x08009f6c
 80008b0:	08009f88 	.word	0x08009f88
 80008b4:	08009fac 	.word	0x08009fac

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2234      	movs	r2, #52	; 0x34
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 feae 	bl	8009628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008dc:	f003 f880 	bl	80039e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <SystemClock_Config+0xdc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <SystemClock_Config+0xdc>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <SystemClock_Config+0xdc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <SystemClock_Config+0xe0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a26      	ldr	r2, [pc, #152]	; (8000998 <SystemClock_Config+0xe0>)
 80008fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <SystemClock_Config+0xe0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000924:	2319      	movs	r3, #25
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000928:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800092c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000932:	2309      	movs	r3, #9
 8000934:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000936:	2302      	movs	r3, #2
 8000938:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4618      	mov	r0, r3
 8000940:	f003 f970 	bl	8003c24 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800094a:	f000 fe0b 	bl	8001564 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800094e:	f003 f857 	bl	8003a00 <HAL_PWREx_EnableOverDrive>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000958:	f000 fe04 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	2107      	movs	r1, #7
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fc00 	bl	8004180 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000986:	f000 fded 	bl	8001564 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	; 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0a4      	sub	sp, #144	; 0x90
 80009a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2290      	movs	r2, #144	; 0x90
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f008 fe3d 	bl	8009628 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80009ae:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009b2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009b4:	23c0      	movs	r3, #192	; 0xc0
 80009b6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80009bc:	2303      	movs	r3, #3
 80009be:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80009d0:	2300      	movs	r3, #0
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fdb8 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <PeriphCommonClock_Config+0x4a>
  {
    Error_Handler();
 80009e2:	f000 fdbf 	bl	8001564 <Error_Handler>
  }
}
 80009e6:	bf00      	nop
 80009e8:	3790      	adds	r7, #144	; 0x90
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <MX_ADC3_Init+0x9c>)
 8000a06:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a32:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <MX_ADC3_Init+0xa0>)
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a52:	f001 fb89 	bl	8002168 <HAL_ADC_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000a5c:	f000 fd82 	bl	8001564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_ADC3_Init+0x98>)
 8000a72:	f001 fbbd 	bl	80021f0 <HAL_ADC_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a7c:	f000 fd72 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000720 	.word	0x20000720
 8000a8c:	40012200 	.word	0x40012200
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <MX_CRC_Init+0x40>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_CRC_Init+0x3c>)
 8000abe:	f001 fecd 	bl	800285c <HAL_CRC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000ac8:	f000 fd4c 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000768 	.word	0x20000768
 8000ad4:	40023000 	.word	0x40023000

08000ad8 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0a0      	sub	sp, #128	; 0x80
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000ade:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000aea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000aee:	2224      	movs	r2, #36	; 0x24
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fd98 	bl	8009628 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2234      	movs	r2, #52	; 0x34
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 fd89 	bl	8009628 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000b18:	4a4a      	ldr	r2, [pc, #296]	; (8000c44 <MX_DSIHOST_DSI_Init+0x16c>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b1c:	4b48      	ldr	r3, [pc, #288]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000b22:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000b28:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000b2e:	2314      	movs	r3, #20
 8000b30:	677b      	str	r3, [r7, #116]	; 0x74
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	67bb      	str	r3, [r7, #120]	; 0x78
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b3a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483f      	ldr	r0, [pc, #252]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000b42:	f001 ff75 	bl	8002a30 <HAL_DSI_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_DSIHOST_DSI_Init+0x78>
  {
    Error_Handler();
 8000b4c:	f000 fd0a 	bl	8001564 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	653b      	str	r3, [r7, #80]	; 0x50
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	657b      	str	r3, [r7, #84]	; 0x54
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	65bb      	str	r3, [r7, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  HostTimeouts.LowPowerReadTimeout = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66bb      	str	r3, [r7, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  HostTimeouts.BTATimeout = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4831      	ldr	r0, [pc, #196]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000b7c:	f002 fa20 	bl	8002fc0 <HAL_DSI_ConfigHostTimeouts>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_DSIHOST_DSI_Init+0xb2>
  {
    Error_Handler();
 8000b86:	f000 fced 	bl	8001564 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000b8a:	231c      	movs	r3, #28
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000b8e:	2321      	movs	r3, #33	; 0x21
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  PhyTimings.DataLaneHS2LPTime = 15;
 8000b92:	230f      	movs	r3, #15
 8000b94:	643b      	str	r3, [r7, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b96:	2319      	movs	r3, #25
 8000b98:	647b      	str	r3, [r7, #68]	; 0x44
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  PhyTimings.StopWaitTime = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000ba2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4825      	ldr	r0, [pc, #148]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000baa:	f002 f99f 	bl	8002eec <HAL_DSI_ConfigPhyTimer>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DSIHOST_DSI_Init+0xe0>
  {
    Error_Handler();
 8000bb4:	f000 fcd6 	bl	8001564 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000bbc:	f002 f96e 	bl	8002e9c <HAL_DSI_ConfigFlowControl>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_DSIHOST_DSI_Init+0xf2>
  {
    Error_Handler();
 8000bc6:	f000 fccd 	bl	8001564 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000bca:	f242 7110 	movw	r1, #10000	; 0x2710
 8000bce:	481c      	ldr	r0, [pc, #112]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000bd0:	f002 fabe 	bl	8003150 <HAL_DSI_SetLowPowerRXFilter>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_DSIHOST_DSI_Init+0x106>
  {
    Error_Handler();
 8000bda:	f000 fcc3 	bl	8001564 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000bde:	2100      	movs	r1, #0
 8000be0:	4817      	ldr	r0, [pc, #92]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000be2:	f002 f841 	bl	8002c68 <HAL_DSI_ConfigErrorMonitor>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_DSIHOST_DSI_Init+0x118>
  {
    Error_Handler();
 8000bec:	f000 fcba 	bl	8001564 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_DSIHOST_DSI_Init+0x168>)
 8000c2a:	f002 f8d9 	bl	8002de0 <HAL_DSI_ConfigCommand>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000c34:	f000 fc96 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	3780      	adds	r7, #128	; 0x80
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2000078c 	.word	0x2000078c
 8000c44:	40016c00 	.word	0x40016c00

08000c48 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <MX_QUADSPI_Init+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c60:	2210      	movs	r2, #16
 8000c62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c66:	221a      	movs	r2, #26
 8000c68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c6c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c70:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c72:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c86:	f002 ff0b 	bl	8003aa0 <HAL_QSPI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000c90:	f000 fc68 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200007a8 	.word	0x200007a8
 8000c9c:	a0001000 	.word	0xa0001000

08000ca0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000ca6:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <MX_SAI1_Init+0x54>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cca:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000cce:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000cdc:	4804      	ldr	r0, [pc, #16]	; (8000cf0 <MX_SAI1_Init+0x50>)
 8000cde:	f004 f9cf 	bl	8005080 <HAL_SAI_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_SAI1_Init+0x4c>
  {
    Error_Handler();
 8000ce8:	f000 fc3c 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200007f4 	.word	0x200007f4
 8000cf4:	40015804 	.word	0x40015804

08000cf8 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000cfe:	4a29      	ldr	r2, [pc, #164]	; (8000da4 <MX_SAI2_Init+0xac>)
 8000d00:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d02:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d08:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000d0e:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d10:	2240      	movs	r2, #64	; 0x40
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d3a:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <MX_SAI2_Init+0xb0>)
 8000d3c:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_SAI2_Init+0xa8>)
 8000d8e:	f004 f977 	bl	8005080 <HAL_SAI_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d98:	f000 fbe4 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000878 	.word	0x20000878
 8000da4:	40015c24 	.word	0x40015c24
 8000da8:	0002ee00 	.word	0x0002ee00

08000dac <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000db2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000db6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dbe:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_SPDIFRX_Init+0x60>)
 8000df8:	f004 fb2c 	bl	8005454 <HAL_SPDIFRX_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8000e02:	f000 fbaf 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200008fc 	.word	0x200008fc

08000e10 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MX_TIM14_Init+0x44>)
 8000e18:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 80-1;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e1c:	224f      	movs	r2, #79	; 0x4f
 8000e1e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_TIM14_Init+0x40>)
 8000e3c:	f004 fbae 	bl	800559c <HAL_TIM_Base_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000e46:	f000 fb8d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000948 	.word	0x20000948
 8000e54:	40002000 	.word	0x40002000

08000e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MX_USART1_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART1_UART_Init+0x58>)
 8000e9c:	f004 fce6 	bl	800586c <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 fb5d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000994 	.word	0x20000994
 8000eb4:	40011000 	.word	0x40011000

08000eb8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ebe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ec2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	2206      	movs	r2, #6
 8000ec8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efc:	f002 fc28 	bl	8003750 <HAL_PCD_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f06:	f000 fb2d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000a1c 	.word	0x20000a1c

08000f14 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f20:	2209      	movs	r2, #9
 8000f22:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000f5c:	f002 fbf8 	bl	8003750 <HAL_PCD_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000f66:	f000 fafd 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000f24 	.word	0x20000f24
 8000f74:	40040000 	.word	0x40040000

08000f78 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08e      	sub	sp, #56	; 0x38
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000fa4:	4b6d      	ldr	r3, [pc, #436]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fa6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000faa:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000fac:	4b6b      	ldr	r3, [pc, #428]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fae:	4a6c      	ldr	r2, [pc, #432]	; (8001160 <MX_FMC_Init+0x1e8>)
 8000fb0:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000fb2:	4b6a      	ldr	r3, [pc, #424]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000fb8:	4b68      	ldr	r3, [pc, #416]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fc4:	4b65      	ldr	r3, [pc, #404]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fca:	4b64      	ldr	r3, [pc, #400]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fd0:	4b62      	ldr	r3, [pc, #392]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fd6:	4b61      	ldr	r3, [pc, #388]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000fdc:	4b5f      	ldr	r3, [pc, #380]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fe8:	4b5c      	ldr	r3, [pc, #368]	; (800115c <MX_FMC_Init+0x1e4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000fee:	4b5b      	ldr	r3, [pc, #364]	; (800115c <MX_FMC_Init+0x1e4>)
 8000ff0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000ff6:	4b59      	ldr	r3, [pc, #356]	; (800115c <MX_FMC_Init+0x1e4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ffc:	4b57      	ldr	r3, [pc, #348]	; (800115c <MX_FMC_Init+0x1e4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001002:	4b56      	ldr	r3, [pc, #344]	; (800115c <MX_FMC_Init+0x1e4>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001008:	4b54      	ldr	r3, [pc, #336]	; (800115c <MX_FMC_Init+0x1e4>)
 800100a:	2200      	movs	r2, #0
 800100c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800100e:	230f      	movs	r3, #15
 8001010:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001012:	230f      	movs	r3, #15
 8001014:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800101a:	230f      	movs	r3, #15
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800101e:	2310      	movs	r3, #16
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001022:	2311      	movs	r3, #17
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	484a      	ldr	r0, [pc, #296]	; (800115c <MX_FMC_Init+0x1e4>)
 8001034:	f002 fa80 	bl	8003538 <HAL_NOR_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_FMC_Init+0xca>
  {
    Error_Handler( );
 800103e:	f000 fa91 	bl	8001564 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001044:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001048:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <MX_FMC_Init+0x1ec>)
 800104c:	4a44      	ldr	r2, [pc, #272]	; (8001160 <MX_FMC_Init+0x1e8>)
 800104e:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001052:	2204      	movs	r2, #4
 8001054:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <MX_FMC_Init+0x1ec>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001064:	2210      	movs	r2, #16
 8001066:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001068:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <MX_FMC_Init+0x1ec>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800106e:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001074:	4b3b      	ldr	r3, [pc, #236]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <MX_FMC_Init+0x1ec>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001088:	2200      	movs	r2, #0
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <MX_FMC_Init+0x1ec>)
 800108e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001092:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <MX_FMC_Init+0x1ec>)
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <MX_FMC_Init+0x1ec>)
 800109c:	2200      	movs	r2, #0
 800109e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <MX_FMC_Init+0x1ec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <MX_FMC_Init+0x1ec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010ac:	230f      	movs	r3, #15
 80010ae:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010b0:	230f      	movs	r3, #15
 80010b2:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80010b8:	230f      	movs	r3, #15
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010bc:	2310      	movs	r3, #16
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010c0:	2311      	movs	r3, #17
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4824      	ldr	r0, [pc, #144]	; (8001164 <MX_FMC_Init+0x1ec>)
 80010d2:	f004 fa1b 	bl	800550c <HAL_SRAM_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_FMC_Init+0x168>
  {
    Error_Handler( );
 80010dc:	f000 fa42 	bl	8001564 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_FMC_Init+0x1f0>)
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <MX_FMC_Init+0x1f4>)
 80010e4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_FMC_Init+0x1f0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_FMC_Init+0x1f0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_FMC_Init+0x1f0>)
 80010f4:	2208      	movs	r2, #8
 80010f6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_FMC_Init+0x1f0>)
 80010fa:	2220      	movs	r2, #32
 80010fc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_FMC_Init+0x1f0>)
 8001100:	2240      	movs	r2, #64	; 0x40
 8001102:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_FMC_Init+0x1f0>)
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_FMC_Init+0x1f0>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_FMC_Init+0x1f0>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_FMC_Init+0x1f0>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_FMC_Init+0x1f0>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001122:	2310      	movs	r3, #16
 8001124:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001126:	2310      	movs	r3, #16
 8001128:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 800112a:	2310      	movs	r3, #16
 800112c:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 800112e:	2310      	movs	r3, #16
 8001130:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8001132:	2310      	movs	r3, #16
 8001134:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 8001136:	2310      	movs	r3, #16
 8001138:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 800113a:	2310      	movs	r3, #16
 800113c:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <MX_FMC_Init+0x1f0>)
 8001144:	f004 f952 	bl	80053ec <HAL_SDRAM_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_FMC_Init+0x1da>
  {
    Error_Handler( );
 800114e:	f000 fa09 	bl	8001564 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	; 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000142c 	.word	0x2000142c
 8001160:	a0000104 	.word	0xa0000104
 8001164:	20001478 	.word	0x20001478
 8001168:	200014c4 	.word	0x200014c4
 800116c:	a0000140 	.word	0xa0000140

08001170 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b090      	sub	sp, #64	; 0x40
 8001174:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001186:	4bad      	ldr	r3, [pc, #692]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4aac      	ldr	r2, [pc, #688]	; (800143c <MX_GPIO_Init+0x2cc>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4baa      	ldr	r3, [pc, #680]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800119e:	4ba7      	ldr	r3, [pc, #668]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4aa6      	ldr	r2, [pc, #664]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4ba4      	ldr	r3, [pc, #656]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4ba1      	ldr	r3, [pc, #644]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4aa0      	ldr	r2, [pc, #640]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b9e      	ldr	r3, [pc, #632]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
 80011cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b9b      	ldr	r3, [pc, #620]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a9a      	ldr	r2, [pc, #616]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b98      	ldr	r3, [pc, #608]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b95      	ldr	r3, [pc, #596]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a94      	ldr	r2, [pc, #592]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b92      	ldr	r3, [pc, #584]	; (800143c <MX_GPIO_Init+0x2cc>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0304 	and.w	r3, r3, #4
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b8f      	ldr	r3, [pc, #572]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a8e      	ldr	r2, [pc, #568]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b8c      	ldr	r3, [pc, #560]	; (800143c <MX_GPIO_Init+0x2cc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001216:	4b89      	ldr	r3, [pc, #548]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a88      	ldr	r2, [pc, #544]	; (800143c <MX_GPIO_Init+0x2cc>)
 800121c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b86      	ldr	r3, [pc, #536]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800122e:	4b83      	ldr	r3, [pc, #524]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a82      	ldr	r2, [pc, #520]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b80      	ldr	r3, [pc, #512]	; (800143c <MX_GPIO_Init+0x2cc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001246:	4b7d      	ldr	r3, [pc, #500]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a7c      	ldr	r2, [pc, #496]	; (800143c <MX_GPIO_Init+0x2cc>)
 800124c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b7a      	ldr	r3, [pc, #488]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125e:	4b77      	ldr	r3, [pc, #476]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a76      	ldr	r2, [pc, #472]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001264:	f043 0320 	orr.w	r3, r3, #32
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <MX_GPIO_Init+0x2cc>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	4b71      	ldr	r3, [pc, #452]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a70      	ldr	r2, [pc, #448]	; (800143c <MX_GPIO_Init+0x2cc>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b6e      	ldr	r3, [pc, #440]	; (800143c <MX_GPIO_Init+0x2cc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 800128e:	2200      	movs	r2, #0
 8001290:	f243 010b 	movw	r1, #12299	; 0x300b
 8001294:	486a      	ldr	r0, [pc, #424]	; (8001440 <MX_GPIO_Init+0x2d0>)
 8001296:	f002 f935 	bl	8003504 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4868      	ldr	r0, [pc, #416]	; (8001444 <MX_GPIO_Init+0x2d4>)
 80012a2:	f002 f92f 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80012a6:	2304      	movs	r3, #4
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012b6:	230b      	movs	r3, #11
 80012b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012be:	4619      	mov	r1, r3
 80012c0:	4861      	ldr	r0, [pc, #388]	; (8001448 <MX_GPIO_Init+0x2d8>)
 80012c2:	f001 ff73 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 80012c6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d8:	230b      	movs	r3, #11
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	485a      	ldr	r0, [pc, #360]	; (800144c <MX_GPIO_Init+0x2dc>)
 80012e4:	f001 ff62 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80012e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ee:	2312      	movs	r3, #18
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fa:	2304      	movs	r3, #4
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	4852      	ldr	r0, [pc, #328]	; (8001450 <MX_GPIO_Init+0x2e0>)
 8001306:	f001 ff51 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_D3_Pin SD2_D2_Pin */
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 800130a:	2318      	movs	r3, #24
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800131a:	230a      	movs	r3, #10
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	484a      	ldr	r0, [pc, #296]	; (8001450 <MX_GPIO_Init+0x2e0>)
 8001326:	f001 ff41 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_CMD_Pin SD2_CLK_Pin */
  GPIO_InitStruct.Pin = SD2_CMD_Pin|SD2_CLK_Pin;
 800132a:	23c0      	movs	r3, #192	; 0xc0
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800133a:	230b      	movs	r3, #11
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4843      	ldr	r0, [pc, #268]	; (8001454 <MX_GPIO_Init+0x2e4>)
 8001346:	f001 ff31 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_VSYNC_Pin */
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800135a:	230d      	movs	r3, #13
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	4619      	mov	r1, r3
 8001364:	483a      	ldr	r0, [pc, #232]	; (8001450 <MX_GPIO_Init+0x2e0>)
 8001366:	f001 ff21 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_GPIO_Pin MII_MDIO_GPIO_Pin LED3_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 800136a:	f243 030b 	movw	r3, #12299	; 0x300b
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800137c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001380:	4619      	mov	r1, r3
 8001382:	482f      	ldr	r0, [pc, #188]	; (8001440 <MX_GPIO_Init+0x2d0>)
 8001384:	f001 ff12 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : EXPANDER_INT_Pin */
  GPIO_InitStruct.Pin = EXPANDER_INT_Pin;
 8001388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800139c:	4619      	mov	r1, r3
 800139e:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_GPIO_Init+0x2d4>)
 80013a0:	f001 ff04 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80013a4:	23f8      	movs	r3, #248	; 0xf8
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b4:	230e      	movs	r3, #14
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80013b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013bc:	4619      	mov	r1, r3
 80013be:	4826      	ldr	r0, [pc, #152]	; (8001458 <MX_GPIO_Init+0x2e8>)
 80013c0:	f001 fef4 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_D1_Pin */
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 80013c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80013d6:	230b      	movs	r3, #11
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013de:	4619      	mov	r1, r3
 80013e0:	481a      	ldr	r0, [pc, #104]	; (800144c <MX_GPIO_Init+0x2dc>)
 80013e2:	f001 fee3 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B2_Pin LCD_B3_Pin LCD_R5_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 80013e6:	f24c 0330 	movw	r3, #49200	; 0xc030
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f8:	230e      	movs	r3, #14
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001400:	4619      	mov	r1, r3
 8001402:	480f      	ldr	r0, [pc, #60]	; (8001440 <MX_GPIO_Init+0x2d0>)
 8001404:	f001 fed2 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_D5_Pin */
  GPIO_InitStruct.Pin = PAR_D5_Pin;
 8001408:	2308      	movs	r3, #8
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001418:	230d      	movs	r3, #13
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001420:	4619      	mov	r1, r3
 8001422:	480c      	ldr	r0, [pc, #48]	; (8001454 <MX_GPIO_Init+0x2e4>)
 8001424:	f001 fec2 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_WKUP_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_WKUP_KEY_Pin;
 8001428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
 8001438:	e010      	b.n	800145c <MX_GPIO_Init+0x2ec>
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40022400 	.word	0x40022400
 8001444:	40022000 	.word	0x40022000
 8001448:	40021000 	.word	0x40021000
 800144c:	40021800 	.word	0x40021800
 8001450:	40020400 	.word	0x40020400
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40022800 	.word	0x40022800
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001460:	4619      	mov	r1, r3
 8001462:	483c      	ldr	r0, [pc, #240]	; (8001554 <MX_GPIO_Init+0x3e4>)
 8001464:	f001 fea2 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 8001468:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800147a:	230e      	movs	r3, #14
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800147e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001482:	4619      	mov	r1, r3
 8001484:	4834      	ldr	r0, [pc, #208]	; (8001558 <MX_GPIO_Init+0x3e8>)
 8001486:	f001 fe91 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_MCO_Pin */
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 800148a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800149c:	2300      	movs	r3, #0
 800149e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a4:	4619      	mov	r1, r3
 80014a6:	482d      	ldr	r0, [pc, #180]	; (800155c <MX_GPIO_Init+0x3ec>)
 80014a8:	f001 fe80 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80014ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	4824      	ldr	r0, [pc, #144]	; (8001558 <MX_GPIO_Init+0x3e8>)
 80014c6:	f001 fe71 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_CLK_Pin MII_TXD2_Pin MII_RXD0_Pin MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 80014ca:	233c      	movs	r3, #60	; 0x3c
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014da:	230b      	movs	r3, #11
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014e2:	4619      	mov	r1, r3
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <MX_GPIO_Init+0x3e4>)
 80014e6:	f001 fe61 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80014ea:	2382      	movs	r3, #130	; 0x82
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f6:	2303      	movs	r3, #3
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fa:	230b      	movs	r3, #11
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001502:	4619      	mov	r1, r3
 8001504:	4815      	ldr	r0, [pc, #84]	; (800155c <MX_GPIO_Init+0x3ec>)
 8001506:	f001 fe51 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAR_HSYNC_Pin PAR_PCLK_Pin */
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 800150a:	2350      	movs	r3, #80	; 0x50
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800151a:	230d      	movs	r3, #13
 800151c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001522:	4619      	mov	r1, r3
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_GPIO_Init+0x3ec>)
 8001526:	f001 fe41 	bl	80031ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RXD3_Pin MII_RXD2_Pin */
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800153a:	230b      	movs	r3, #11
 800153c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800153e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001542:	4619      	mov	r1, r3
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_GPIO_Init+0x3f0>)
 8001546:	f001 fe31 	bl	80031ac <HAL_GPIO_Init>

}
 800154a:	bf00      	nop
 800154c:	3740      	adds	r7, #64	; 0x40
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800
 8001558:	40022000 	.word	0x40022000
 800155c:	40020000 	.word	0x40020000
 8001560:	40021c00 	.word	0x40021c00

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x44>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x44>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x44>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x44>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x44>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x44>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <HAL_ADC_MspInit+0x74>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d124      	bne.n	8001624 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_ADC_MspInit+0x78>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_ADC_MspInit+0x78>)
 80015e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_ADC_MspInit+0x78>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_ADC_MspInit+0x78>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_ADC_MspInit+0x78>)
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_ADC_MspInit+0x78>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 800160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001610:	2303      	movs	r3, #3
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <HAL_ADC_MspInit+0x7c>)
 8001620:	f001 fdc4 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40012200 	.word	0x40012200
 8001630:	40023800 	.word	0x40023800
 8001634:	40021400 	.word	0x40021400

08001638 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <HAL_CRC_MspInit+0x38>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10b      	bne.n	8001662 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_CRC_MspInit+0x3c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a09      	ldr	r2, [pc, #36]	; (8001674 <HAL_CRC_MspInit+0x3c>)
 8001650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <HAL_CRC_MspInit+0x3c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023000 	.word	0x40023000
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	; 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a17      	ldr	r2, [pc, #92]	; (80016f4 <HAL_DSI_MspInit+0x7c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d127      	bne.n	80016ea <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_DSI_MspInit+0x80>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a16      	ldr	r2, [pc, #88]	; (80016f8 <HAL_DSI_MspInit+0x80>)
 80016a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_DSI_MspInit+0x80>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_DSI_MspInit+0x80>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_DSI_MspInit+0x80>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_DSI_MspInit+0x80>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80016ca:	2304      	movs	r3, #4
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80016da:	230d      	movs	r3, #13
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_DSI_MspInit+0x84>)
 80016e6:	f001 fd61 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80016ea:	bf00      	nop
 80016ec:	3728      	adds	r7, #40	; 0x28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40016c00 	.word	0x40016c00
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40022400 	.word	0x40022400

08001700 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a35      	ldr	r2, [pc, #212]	; (80017f4 <HAL_QSPI_MspInit+0xf4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d164      	bne.n	80017ec <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001722:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001726:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6393      	str	r3, [r2, #56]	; 0x38
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	6313      	str	r3, [r2, #48]	; 0x30
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_QSPI_MspInit+0xf8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800177a:	230a      	movs	r3, #10
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	481d      	ldr	r0, [pc, #116]	; (80017fc <HAL_QSPI_MspInit+0xfc>)
 8001786:	f001 fd11 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin;
 800178a:	23c0      	movs	r3, #192	; 0xc0
 800178c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001796:	2303      	movs	r3, #3
 8001798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800179a:	2309      	movs	r3, #9
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4619      	mov	r1, r3
 80017a4:	4816      	ldr	r0, [pc, #88]	; (8001800 <HAL_QSPI_MspInit+0x100>)
 80017a6:	f001 fd01 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80017aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017bc:	230a      	movs	r3, #10
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <HAL_QSPI_MspInit+0x100>)
 80017c8:	f001 fcf0 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80017cc:	2304      	movs	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017dc:	2309      	movs	r3, #9
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <HAL_QSPI_MspInit+0xfc>)
 80017e8:	f001 fce0 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	a0001000 	.word	0xa0001000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020400 	.word	0x40020400
 8001800:	40021400 	.word	0x40021400

08001804 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0ae      	sub	sp, #184	; 0xb8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2290      	movs	r2, #144	; 0x90
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f007 feff 	bl	8009628 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001832:	d144      	bne.n	80018be <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800183a:	23c0      	movs	r3, #192	; 0xc0
 800183c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800183e:	2302      	movs	r3, #2
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001842:	2302      	movs	r3, #2
 8001844:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001846:	2302      	movs	r3, #2
 8001848:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800184a:	2301      	movs	r3, #1
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fe7a 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800185e:	f7ff fe81 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_SPDIFRX_MspInit+0xc4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX1_Pin;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80018ac:	2307      	movs	r3, #7
 80018ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b6:	4619      	mov	r1, r3
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <HAL_SPDIFRX_MspInit+0xc8>)
 80018ba:	f001 fc77 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	37b8      	adds	r7, #184	; 0xb8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40021800 	.word	0x40021800

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0a      	ldr	r2, [pc, #40]	; (8001908 <HAL_TIM_Base_MspInit+0x38>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10b      	bne.n	80018fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_TIM_Base_MspInit+0x3c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_TIM_Base_MspInit+0x3c>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <HAL_TIM_Base_MspInit+0x3c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40002000 	.word	0x40002000
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b0ae      	sub	sp, #184	; 0xb8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2290      	movs	r2, #144	; 0x90
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f007 fe79 	bl	8009628 <memset>
  if(huart->Instance==USART1)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <HAL_UART_MspInit+0xb0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d13b      	bne.n	80019b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001940:	2340      	movs	r3, #64	; 0x40
 8001942:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001944:	2300      	movs	r3, #0
 8001946:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4618      	mov	r0, r3
 800194e:	f002 fdfd 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001958:	f7ff fe04 	bl	8001564 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_UART_MspInit+0xb4>)
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	4a18      	ldr	r2, [pc, #96]	; (80019c4 <HAL_UART_MspInit+0xb4>)
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	6453      	str	r3, [r2, #68]	; 0x44
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <HAL_UART_MspInit+0xb4>)
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_UART_MspInit+0xb4>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <HAL_UART_MspInit+0xb4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6313      	str	r3, [r2, #48]	; 0x30
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_UART_MspInit+0xb4>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS2320IrDA0T_Pin;
 800198c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a6:	2307      	movs	r3, #7
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_UART_MspInit+0xb8>)
 80019b4:	f001 fbfa 	bl	80031ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019b8:	bf00      	nop
 80019ba:	37b8      	adds	r7, #184	; 0xb8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b0b6      	sub	sp, #216	; 0xd8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e8:	2290      	movs	r2, #144	; 0x90
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f007 fe1b 	bl	8009628 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019fa:	d14a      	bne.n	8001a92 <HAL_PCD_MspInit+0xc6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80019fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f002 fd9d 	bl	800454c <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001a18:	f7ff fda4 	bl	8001564 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4a8b      	ldr	r2, [pc, #556]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6313      	str	r3, [r2, #48]	; 0x30
 8001a28:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001a34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a4e:	230a      	movs	r3, #10
 8001a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	487e      	ldr	r0, [pc, #504]	; (8001c54 <HAL_PCD_MspInit+0x288>)
 8001a5c:	f001 fba6 	bl	80031ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a60:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a64:	4a7a      	ldr	r2, [pc, #488]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a6c:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	4b75      	ldr	r3, [pc, #468]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	4a74      	ldr	r2, [pc, #464]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a82:	6453      	str	r3, [r2, #68]	; 0x44
 8001a84:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001a90:	e0da      	b.n	8001c48 <HAL_PCD_MspInit+0x27c>
  else if(hpcd->Instance==USB_OTG_HS)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a70      	ldr	r2, [pc, #448]	; (8001c58 <HAL_PCD_MspInit+0x28c>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f040 80d5 	bne.w	8001c48 <HAL_PCD_MspInit+0x27c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a6b      	ldr	r2, [pc, #428]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	623b      	str	r3, [r7, #32]
 8001acc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a5f      	ldr	r2, [pc, #380]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae2:	61fb      	str	r3, [r7, #28]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a59      	ldr	r2, [pc, #356]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	4b54      	ldr	r3, [pc, #336]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b51      	ldr	r3, [pc, #324]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001b16:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b30:	230a      	movs	r3, #10
 8001b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4847      	ldr	r0, [pc, #284]	; (8001c5c <HAL_PCD_MspInit+0x290>)
 8001b3e:	f001 fb35 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b66:	4619      	mov	r1, r3
 8001b68:	483d      	ldr	r0, [pc, #244]	; (8001c60 <HAL_PCD_MspInit+0x294>)
 8001b6a:	f001 fb1f 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b6e:	2310      	movs	r3, #16
 8001b70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b86:	230a      	movs	r3, #10
 8001b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4834      	ldr	r0, [pc, #208]	; (8001c64 <HAL_PCD_MspInit+0x298>)
 8001b94:	f001 fb0a 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001bba:	4619      	mov	r1, r3
 8001bbc:	482a      	ldr	r0, [pc, #168]	; (8001c68 <HAL_PCD_MspInit+0x29c>)
 8001bbe:	f001 faf5 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001bc2:	2328      	movs	r3, #40	; 0x28
 8001bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bda:	230a      	movs	r3, #10
 8001bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be4:	4619      	mov	r1, r3
 8001be6:	481b      	ldr	r0, [pc, #108]	; (8001c54 <HAL_PCD_MspInit+0x288>)
 8001be8:	f001 fae0 	bl	80031ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_FS2_DM_Pin|USB_FS2_DP_Pin;
 8001bec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001c06:	230c      	movs	r3, #12
 8001c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4812      	ldr	r0, [pc, #72]	; (8001c5c <HAL_PCD_MspInit+0x290>)
 8001c14:	f001 faca 	bl	80031ac <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001c18:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c22:	6313      	str	r3, [r2, #48]	; 0x30
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <HAL_PCD_MspInit+0x284>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	37d8      	adds	r7, #216	; 0xd8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	40040000 	.word	0x40040000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40020800 	.word	0x40020800

08001c6c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_FMC_MspInit+0x124>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d17e      	bne.n	8001d86 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_FMC_MspInit+0x124>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <HAL_FMC_MspInit+0x128>)
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	4a40      	ldr	r2, [pc, #256]	; (8001d94 <HAL_FMC_MspInit+0x128>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6393      	str	r3, [r2, #56]	; 0x38
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	; (8001d94 <HAL_FMC_MspInit+0x128>)
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = A20_Pin|A19_Pin|FMC_NBL1_Pin|FMC_NBL0_Pin
 8001ca6:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001caa:	607b      	str	r3, [r7, #4]
                          |A21_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cb8:	230c      	movs	r3, #12
 8001cba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4835      	ldr	r0, [pc, #212]	; (8001d98 <HAL_FMC_MspInit+0x12c>)
 8001cc2:	f001 fa73 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|NAND_INT_Pin|FMC_NE3_Pin
 8001cc6:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8001cca:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A13_Pin|A12_Pin|A10_Pin
                          |A15_Pin|A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cd8:	230c      	movs	r3, #12
 8001cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4619      	mov	r1, r3
 8001ce0:	482e      	ldr	r0, [pc, #184]	; (8001d9c <HAL_FMC_MspInit+0x130>)
 8001ce2:	f001 fa63 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|FMC_NWE_Pin|D3_Pin|FMC_NOE_Pin
 8001ce6:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001cea:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D15_Pin|D0_Pin|D14_Pin
                          |D13_Pin|A17_Pin|A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cf8:	230c      	movs	r3, #12
 8001cfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4827      	ldr	r0, [pc, #156]	; (8001da0 <HAL_FMC_MspInit+0x134>)
 8001d02:	f001 fa53 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001d06:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001d0a:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4820      	ldr	r0, [pc, #128]	; (8001da4 <HAL_FMC_MspInit+0x138>)
 8001d22:	f001 fa43 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001d26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d2a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d38:	230c      	movs	r3, #12
 8001d3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4819      	ldr	r0, [pc, #100]	; (8001da8 <HAL_FMC_MspInit+0x13c>)
 8001d42:	f001 fa33 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8001d46:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001d4a:	607b      	str	r3, [r7, #4]
                          |SDNE0_Pin|SDCKE0_Pin|D20_Pin|D17_Pin
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d54:	2303      	movs	r3, #3
 8001d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d58:	230c      	movs	r3, #12
 8001d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4812      	ldr	r0, [pc, #72]	; (8001dac <HAL_FMC_MspInit+0x140>)
 8001d62:	f001 fa23 	bl	80031ac <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001d76:	2309      	movs	r3, #9
 8001d78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480c      	ldr	r0, [pc, #48]	; (8001db0 <HAL_FMC_MspInit+0x144>)
 8001d80:	f001 fa14 	bl	80031ac <HAL_GPIO_Init>
 8001d84:	e000      	b.n	8001d88 <HAL_FMC_MspInit+0x11c>
    return;
 8001d86:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200014f8 	.word	0x200014f8
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40020c00 	.word	0x40020c00
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40021c00 	.word	0x40021c00
 8001db0:	40020800 	.word	0x40020800

08001db4 <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001dbc:	f7ff ff56 	bl	8001c6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001dd0:	f7ff ff4c 	bl	8001c6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001de4:	f7ff ff42 	bl	8001c6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	; 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a43      	ldr	r2, [pc, #268]	; (8001f0c <HAL_SAI_MspInit+0x11c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d124      	bne.n	8001e4c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_SAI_MspInit+0x120>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10b      	bne.n	8001e22 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_SAI_MspInit+0x124>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a41      	ldr	r2, [pc, #260]	; (8001f14 <HAL_SAI_MspInit+0x124>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_SAI_MspInit+0x124>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_SAI_MspInit+0x120>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <HAL_SAI_MspInit+0x120>)
 8001e2a:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e3c:	2306      	movs	r3, #6
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	4619      	mov	r1, r3
 8001e46:	4834      	ldr	r0, [pc, #208]	; (8001f18 <HAL_SAI_MspInit+0x128>)
 8001e48:	f001 f9b0 	bl	80031ac <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_SAI_MspInit+0x12c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d155      	bne.n	8001f02 <HAL_SAI_MspInit+0x112>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8001e56:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_SAI_MspInit+0x130>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_SAI_MspInit+0x124>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <HAL_SAI_MspInit+0x124>)
 8001e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_SAI_MspInit+0x124>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <HAL_SAI_MspInit+0x130>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_SAI_MspInit+0x130>)
 8001e7e:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001e90:	230a      	movs	r3, #10
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4822      	ldr	r0, [pc, #136]	; (8001f24 <HAL_SAI_MspInit+0x134>)
 8001e9c:	f001 f986 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 8001ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481a      	ldr	r0, [pc, #104]	; (8001f28 <HAL_SAI_MspInit+0x138>)
 8001ebe:	f001 f975 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	4619      	mov	r1, r3
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <HAL_SAI_MspInit+0x13c>)
 8001ede:	f001 f965 	bl	80031ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001ef2:	2308      	movs	r3, #8
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <HAL_SAI_MspInit+0x13c>)
 8001efe:	f001 f955 	bl	80031ac <HAL_GPIO_Init>

    }
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40015804 	.word	0x40015804
 8001f10:	200014fc 	.word	0x200014fc
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40015c24 	.word	0x40015c24
 8001f20:	20001500 	.word	0x20001500
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021800 	.word	0x40021800
 8001f2c:	40020000 	.word	0x40020000

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 f8b0 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f007 fb00 	bl	80095b8 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20080000 	.word	0x20080000
 8001fe4:	00000800 	.word	0x00000800
 8001fe8:	20001504 	.word	0x20001504
 8001fec:	200015b0 	.word	0x200015b0

08001ff0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	; (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f007 fabf 	bl	80095c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7fe fb37 	bl	80006b8 <main>
  bx  lr    
 800204a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800204c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000704 	.word	0x20000704
  ldr r2, =_sidata
 8002058:	0800a58c 	.word	0x0800a58c
  ldr r2, =_sbss
 800205c:	20000704 	.word	0x20000704
  ldr r4, =_ebss
 8002060:	200015ac 	.word	0x200015ac

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>

08002066 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206a:	2003      	movs	r0, #3
 800206c:	f000 fbc2 	bl	80027f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002070:	2000      	movs	r0, #0
 8002072:	f000 f805 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002076:	f7ff fa7b 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fbcf 	bl	8002842 <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020bc:	f000 fba5 	bl	800280a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	20001508 	.word	0x20001508

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20001508 	.word	0x20001508

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e031      	b.n	80021e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fa16 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_ADC_Init+0x84>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	f043 0202 	orr.w	r2, r3, #2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f970 	bl	800249c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
 80021d2:	e001      	b.n	80021d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	ffffeefd 	.word	0xffffeefd

080021f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1c>
 8002208:	2302      	movs	r3, #2
 800220a:	e136      	b.n	800247a <HAL_ADC_ConfigChannel+0x28a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b09      	cmp	r3, #9
 800221a:	d93a      	bls.n	8002292 <HAL_ADC_ConfigChannel+0xa2>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002224:	d035      	beq.n	8002292 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68d9      	ldr	r1, [r3, #12]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	3b1e      	subs	r3, #30
 800223c:	2207      	movs	r2, #7
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	400a      	ands	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a8d      	ldr	r2, [pc, #564]	; (8002488 <HAL_ADC_ConfigChannel+0x298>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10a      	bne.n	800226c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68d9      	ldr	r1, [r3, #12]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	061a      	lsls	r2, r3, #24
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800226a:	e035      	b.n	80022d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	4618      	mov	r0, r3
 800227e:	4603      	mov	r3, r0
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4403      	add	r3, r0
 8002284:	3b1e      	subs	r3, #30
 8002286:	409a      	lsls	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002290:	e022      	b.n	80022d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6919      	ldr	r1, [r3, #16]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4403      	add	r3, r0
 80022ce:	409a      	lsls	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d824      	bhi.n	800232a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b05      	subs	r3, #5
 80022f2:	221f      	movs	r2, #31
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43da      	mvns	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	400a      	ands	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	3b05      	subs	r3, #5
 800231c:	fa00 f203 	lsl.w	r2, r0, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	635a      	str	r2, [r3, #52]	; 0x34
 8002328:	e04c      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d824      	bhi.n	800237c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b23      	subs	r3, #35	; 0x23
 8002344:	221f      	movs	r2, #31
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b23      	subs	r3, #35	; 0x23
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
 800237a:	e023      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b41      	subs	r3, #65	; 0x41
 800238e:	221f      	movs	r2, #31
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b41      	subs	r3, #65	; 0x41
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_ADC_ConfigChannel+0x29c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1f4>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d6:	d105      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80023d8:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 80023de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_ADC_ConfigChannel+0x29c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10f      	bne.n	800240e <HAL_ADC_ConfigChannel+0x21e>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b12      	cmp	r3, #18
 80023f4:	d10b      	bne.n	800240e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023f6:	4b26      	ldr	r3, [pc, #152]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 80023fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002400:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002402:	4b23      	ldr	r3, [pc, #140]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a22      	ldr	r2, [pc, #136]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 8002408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800240c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_ADC_ConfigChannel+0x29c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d12b      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x280>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_ADC_ConfigChannel+0x298>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d003      	beq.n	800242a <HAL_ADC_ConfigChannel+0x23a>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b11      	cmp	r3, #17
 8002428:	d122      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800242a:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 8002430:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002434:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_ADC_ConfigChannel+0x2a0>)
 800243c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002440:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a10      	ldr	r2, [pc, #64]	; (8002488 <HAL_ADC_ConfigChannel+0x298>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d111      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_ADC_ConfigChannel+0x2a4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a11      	ldr	r2, [pc, #68]	; (8002498 <HAL_ADC_ConfigChannel+0x2a8>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9a      	lsrs	r2, r3, #18
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002462:	e002      	b.n	800246a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3b01      	subs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	10000012 	.word	0x10000012
 800248c:	40012000 	.word	0x40012000
 8002490:	40012300 	.word	0x40012300
 8002494:	20000000 	.word	0x20000000
 8002498:	431bde83 	.word	0x431bde83

0800249c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80024a4:	4b78      	ldr	r3, [pc, #480]	; (8002688 <ADC_Init+0x1ec>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4a77      	ldr	r2, [pc, #476]	; (8002688 <ADC_Init+0x1ec>)
 80024aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80024b0:	4b75      	ldr	r3, [pc, #468]	; (8002688 <ADC_Init+0x1ec>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4973      	ldr	r1, [pc, #460]	; (8002688 <ADC_Init+0x1ec>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6859      	ldr	r1, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	021a      	lsls	r2, r3, #8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6859      	ldr	r1, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <ADC_Init+0x1f0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d022      	beq.n	8002576 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800253e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e00f      	b.n	8002596 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002594:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0202 	bic.w	r2, r2, #2
 80025a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	005a      	lsls	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	3b01      	subs	r3, #1
 80025f0:	035a      	lsls	r2, r3, #13
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	e007      	b.n	800260c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	3b01      	subs	r3, #1
 8002628:	051a      	lsls	r2, r3, #20
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800264e:	025a      	lsls	r2, r3, #9
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	029a      	lsls	r2, r3, #10
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40012300 	.word	0x40012300
 800268c:	0f000001 	.word	0x0f000001

08002690 <__NVIC_SetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <__NVIC_SetPriorityGrouping+0x40>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <__NVIC_SetPriorityGrouping+0x40>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	05fa0000 	.word	0x05fa0000

080026d8 <__NVIC_GetPriorityGrouping>:
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_SetPriority>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	db0a      	blt.n	800271e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	490c      	ldr	r1, [pc, #48]	; (8002740 <__NVIC_SetPriority+0x4c>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	0112      	lsls	r2, r2, #4
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	440b      	add	r3, r1
 8002718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800271c:	e00a      	b.n	8002734 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4908      	ldr	r1, [pc, #32]	; (8002744 <__NVIC_SetPriority+0x50>)
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3b04      	subs	r3, #4
 800272c:	0112      	lsls	r2, r2, #4
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	440b      	add	r3, r1
 8002732:	761a      	strb	r2, [r3, #24]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <NVIC_EncodePriority>:
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	; 0x24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f1c3 0307 	rsb	r3, r3, #7
 8002762:	2b04      	cmp	r3, #4
 8002764:	bf28      	it	cs
 8002766:	2304      	movcs	r3, #4
 8002768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3304      	adds	r3, #4
 800276e:	2b06      	cmp	r3, #6
 8002770:	d902      	bls.n	8002778 <NVIC_EncodePriority+0x30>
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b03      	subs	r3, #3
 8002776:	e000      	b.n	800277a <NVIC_EncodePriority+0x32>
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43da      	mvns	r2, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	401a      	ands	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	43d9      	mvns	r1, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	4313      	orrs	r3, r2
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c0:	d301      	bcc.n	80027c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c2:	2301      	movs	r3, #1
 80027c4:	e00f      	b.n	80027e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <SysTick_Config+0x40>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ce:	210f      	movs	r1, #15
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d4:	f7ff ff8e 	bl	80026f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SysTick_Config+0x40>)
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027de:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <SysTick_Config+0x40>)
 80027e0:	2207      	movs	r2, #7
 80027e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	e000e010 	.word	0xe000e010

080027f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff47 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280a:	b580      	push	{r7, lr}
 800280c:	b086      	sub	sp, #24
 800280e:	af00      	add	r7, sp, #0
 8002810:	4603      	mov	r3, r0
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281c:	f7ff ff5c 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 8002820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff ff8e 	bl	8002748 <NVIC_EncodePriority>
 800282c:	4602      	mov	r2, r0
 800282e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5d 	bl	80026f4 <__NVIC_SetPriority>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffb0 	bl	80027b0 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e054      	b.n	8002918 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7f5b      	ldrb	r3, [r3, #29]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe feda 	bl	8001638 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	791b      	ldrb	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a22      	ldr	r2, [pc, #136]	; (8002920 <HAL_CRC_Init+0xc4>)
 8002898:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0218 	bic.w	r2, r2, #24
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	e00c      	b.n	80028c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	461a      	mov	r2, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f834 	bl	8002924 <HAL_CRCEx_Polynomial_Set>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e028      	b.n	8002918 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	795b      	ldrb	r3, [r3, #5]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d6:	611a      	str	r2, [r3, #16]
 80028d8:	e004      	b.n	80028e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6912      	ldr	r2, [r2, #16]
 80028e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699a      	ldr	r2, [r3, #24]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	04c11db7 	.word	0x04c11db7

08002924 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002934:	231f      	movs	r3, #31
 8002936:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002938:	bf00      	nop
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1e5a      	subs	r2, r3, #1
 800293e:	613a      	str	r2, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_CRCEx_Polynomial_Set+0x34>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b18      	cmp	r3, #24
 800295c:	d846      	bhi.n	80029ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	080029f3 	.word	0x080029f3
 8002968:	080029ed 	.word	0x080029ed
 800296c:	080029ed 	.word	0x080029ed
 8002970:	080029ed 	.word	0x080029ed
 8002974:	080029ed 	.word	0x080029ed
 8002978:	080029ed 	.word	0x080029ed
 800297c:	080029ed 	.word	0x080029ed
 8002980:	080029ed 	.word	0x080029ed
 8002984:	080029e1 	.word	0x080029e1
 8002988:	080029ed 	.word	0x080029ed
 800298c:	080029ed 	.word	0x080029ed
 8002990:	080029ed 	.word	0x080029ed
 8002994:	080029ed 	.word	0x080029ed
 8002998:	080029ed 	.word	0x080029ed
 800299c:	080029ed 	.word	0x080029ed
 80029a0:	080029ed 	.word	0x080029ed
 80029a4:	080029d5 	.word	0x080029d5
 80029a8:	080029ed 	.word	0x080029ed
 80029ac:	080029ed 	.word	0x080029ed
 80029b0:	080029ed 	.word	0x080029ed
 80029b4:	080029ed 	.word	0x080029ed
 80029b8:	080029ed 	.word	0x080029ed
 80029bc:	080029ed 	.word	0x080029ed
 80029c0:	080029ed 	.word	0x080029ed
 80029c4:	080029c9 	.word	0x080029c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d913      	bls.n	80029f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029d2:	e010      	b.n	80029f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	d90f      	bls.n	80029fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029de:	e00c      	b.n	80029fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	d90b      	bls.n	80029fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029ea:	e008      	b.n	80029fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75fb      	strb	r3, [r7, #23]
      break;
 80029f0:	e006      	b.n	8002a00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029f2:	bf00      	nop
 80029f4:	e004      	b.n	8002a00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f023 0118 	bic.w	r1, r3, #24
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e109      	b.n	8002c58 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7c5b      	ldrb	r3, [r3, #17]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fe12 	bl	8001678 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2203      	movs	r2, #3
 8002a58:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a6e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a82:	f7ff fb41 	bl	8002108 <HAL_GetTick>
 8002a86:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002a88:	e009      	b.n	8002a9e <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002a8a:	f7ff fb3d 	bl	8002108 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a98:	d901      	bls.n	8002a9e <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e0dc      	b.n	8002c58 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ed      	beq.n	8002a8a <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_DSI_Init+0x230>)
 8002abc:	400b      	ands	r3, r1
 8002abe:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002ad6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002ade:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff fb04 	bl	8002120 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b18:	f7ff faf6 	bl	8002108 <HAL_GetTick>
 8002b1c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002b1e:	e009      	b.n	8002b34 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b20:	f7ff faf2 	bl	8002108 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b2e:	d901      	bls.n	8002b34 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e091      	b.n	8002c58 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ed      	beq.n	8002b20 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0206 	orr.w	r2, r2, #6
 8002b54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0203 	bic.w	r2, r2, #3
 8002b68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0203 	bic.w	r2, r2, #3
 8002b96:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bbe:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_DSI_Init+0x1b0>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	e000      	b.n	8002be2 <HAL_DSI_Init+0x1b2>
 8002be0:	2301      	movs	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4a1f      	ldr	r2, [pc, #124]	; (8002c64 <HAL_DSI_Init+0x234>)
 8002be8:	fb03 f202 	mul.w	r2, r3, r2
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0303 	and.w	r3, r3, #3
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c18:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fffc8603 	.word	0xfffc8603
 8002c64:	003d0900 	.word	0x003d0900

08002c68 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7c1b      	ldrb	r3, [r3, #16]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_DSI_ConfigErrorMonitor+0x16>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e0aa      	b.n	8002dd4 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8002cd8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d009      	beq.n	8002d18 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0202 	orr.w	r2, r2, #2
 8002d14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 020c 	orr.w	r2, r2, #12
 8002d32:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d009      	beq.n	8002d54 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0210 	orr.w	r2, r2, #16
 8002d50:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002daa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d009      	beq.n	8002dcc <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8002dc8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7c1b      	ldrb	r3, [r3, #16]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_DSI_ConfigCommand+0x16>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e049      	b.n	8002e8a <HAL_DSI_ConfigCommand+0xaa>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <HAL_DSI_ConfigCommand+0xb8>)
 8002e08:	400b      	ands	r3, r1
 8002e0a:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002e1a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8002e20:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002e26:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002e2c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8002e32:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8002e38:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8002e3e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8002e44:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8002e4a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8002e50:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8002e56:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0202 	bic.w	r2, r2, #2
 8002e6e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	fef080ff 	.word	0xfef080ff

08002e9c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7c1b      	ldrb	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_DSI_ConfigFlowControl+0x16>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e016      	b.n	8002ee0 <HAL_DSI_ConfigFlowControl+0x44>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 021f 	bic.w	r2, r2, #31
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7c1b      	ldrb	r3, [r3, #16]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_DSI_ConfigPhyTimer+0x16>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e058      	b.n	8002fb4 <HAL_DSI_ConfigPhyTimer+0xc8>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf38      	it	cc
 8002f14:	4613      	movcc	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8002f28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	041a      	lsls	r2, r3, #16
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8002f56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f90:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7c1b      	ldrb	r3, [r3, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_DSI_ConfigHostTimeouts+0x16>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0b4      	b.n	8003140 <HAL_DSI_ConfigHostTimeouts+0x180>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002fea:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	021a      	lsls	r2, r3, #8
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	b292      	uxth	r2, r2
 800300c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800302e:	400b      	ands	r3, r1
 8003030:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003050:	400b      	ands	r3, r1
 8003052:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003074:	400b      	ands	r3, r1
 8003076:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800309e:	400b      	ands	r3, r1
 80030a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80030ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800311c:	400b      	ands	r3, r1
 800311e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	ffff0000 	.word	0xffff0000

08003150 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7c1b      	ldrb	r3, [r3, #16]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003162:	2302      	movs	r3, #2
 8003164:	e01b      	b.n	800319e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800317c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	065a      	lsls	r2, r3, #25
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	e175      	b.n	80034b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031cc:	2201      	movs	r2, #1
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	f040 8164 	bne.w	80034b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d005      	beq.n	8003202 <HAL_GPIO_Init+0x56>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b03      	cmp	r3, #3
 800326e:	d017      	beq.n	80032a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d123      	bne.n	80032f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	08da      	lsrs	r2, r3, #3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3208      	adds	r2, #8
 80032b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	220f      	movs	r2, #15
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3208      	adds	r2, #8
 80032ee:	69b9      	ldr	r1, [r7, #24]
 80032f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	2203      	movs	r2, #3
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0203 	and.w	r2, r3, #3
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80be 	beq.w	80034b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <HAL_GPIO_Init+0x324>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_GPIO_Init+0x324>)
 800333c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <HAL_GPIO_Init+0x324>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800334e:	4a61      	ldr	r2, [pc, #388]	; (80034d4 <HAL_GPIO_Init+0x328>)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	3302      	adds	r3, #2
 8003356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	220f      	movs	r2, #15
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_GPIO_Init+0x32c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d037      	beq.n	80033ea <HAL_GPIO_Init+0x23e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a57      	ldr	r2, [pc, #348]	; (80034dc <HAL_GPIO_Init+0x330>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_GPIO_Init+0x23a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a56      	ldr	r2, [pc, #344]	; (80034e0 <HAL_GPIO_Init+0x334>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <HAL_GPIO_Init+0x236>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_GPIO_Init+0x338>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d025      	beq.n	80033de <HAL_GPIO_Init+0x232>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_GPIO_Init+0x33c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01f      	beq.n	80033da <HAL_GPIO_Init+0x22e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a53      	ldr	r2, [pc, #332]	; (80034ec <HAL_GPIO_Init+0x340>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x22a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_GPIO_Init+0x344>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x226>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a51      	ldr	r2, [pc, #324]	; (80034f4 <HAL_GPIO_Init+0x348>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x222>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a50      	ldr	r2, [pc, #320]	; (80034f8 <HAL_GPIO_Init+0x34c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x21e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a4f      	ldr	r2, [pc, #316]	; (80034fc <HAL_GPIO_Init+0x350>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x21a>
 80033c2:	2309      	movs	r3, #9
 80033c4:	e012      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033c6:	230a      	movs	r3, #10
 80033c8:	e010      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ca:	2308      	movs	r3, #8
 80033cc:	e00e      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ce:	2307      	movs	r3, #7
 80033d0:	e00c      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033d2:	2306      	movs	r3, #6
 80033d4:	e00a      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033d6:	2305      	movs	r3, #5
 80033d8:	e008      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033da:	2304      	movs	r3, #4
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033de:	2303      	movs	r3, #3
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x240>
 80033ea:	2300      	movs	r3, #0
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033fc:	4935      	ldr	r1, [pc, #212]	; (80034d4 <HAL_GPIO_Init+0x328>)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_GPIO_Init+0x354>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342e:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003434:	4b32      	ldr	r3, [pc, #200]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_GPIO_Init+0x354>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_GPIO_Init+0x354>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_GPIO_Init+0x354>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <HAL_GPIO_Init+0x354>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	f67f ae86 	bls.w	80031cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40020400 	.word	0x40020400
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40021400 	.word	0x40021400
 80034f0:	40021800 	.word	0x40021800
 80034f4:	40021c00 	.word	0x40021c00
 80034f8:	40022000 	.word	0x40022000
 80034fc:	40022400 	.word	0x40022400
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e090      	b.n	8003674 <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7fe fc24 	bl	8001db4 <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3308      	adds	r3, #8
 8003574:	4619      	mov	r1, r3
 8003576:	4610      	mov	r0, r2
 8003578:	f002 fde0 	bl	800613c <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	461a      	mov	r2, r3
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	f002 fe68 	bl	800625c <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6858      	ldr	r0, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	f002 feaf 	bl	80062fc <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6892      	ldr	r2, [r2, #8]
 80035a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	6892      	ldr	r2, [r2, #8]
 80035b2:	f041 0101 	orr.w	r1, r1, #1
 80035b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 80035c2:	4b2e      	ldr	r3, [pc, #184]	; (800367c <HAL_NOR_Init+0x144>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e002      	b.n	80035d0 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <HAL_NOR_Init+0x144>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d103      	bne.n	80035e8 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 80035e0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e012      	b.n	800360e <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d103      	bne.n	80035f8 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 80035f0:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	e00a      	b.n	800360e <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d103      	bne.n	8003608 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8003600:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e002      	b.n	800360e <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8003608:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800360c:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f002 fea3 	bl	800636c <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2204      	movs	r2, #4
 800362a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800362e:	e020      	b.n	8003672 <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_NOR_Init+0x144>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d102      	bne.n	800363e <HAL_NOR_Init+0x106>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	33aa      	adds	r3, #170	; 0xaa
 800363c:	e001      	b.n	8003642 <HAL_NOR_Init+0x10a>
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	3355      	adds	r3, #85	; 0x55
 8003642:	2298      	movs	r2, #152	; 0x98
 8003644:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003646:	f3bf 8f4f 	dsb	sy
}
 800364a:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_NOR_Init+0x144>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_NOR_Init+0x122>
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3326      	adds	r3, #38	; 0x26
 8003658:	e001      	b.n	800365e <HAL_NOR_Init+0x126>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	3313      	adds	r3, #19
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 f809 	bl	8003680 <HAL_NOR_ReturnToReadMode>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8003672:	7cfb      	ldrb	r3, [r7, #19]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2000150c 	.word	0x2000150c

08003680 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003692:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8003694:	7abb      	ldrb	r3, [r7, #10]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d101      	bne.n	800369e <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	e052      	b.n	8003744 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 800369e:	7abb      	ldrb	r3, [r7, #10]
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d101      	bne.n	80036a8 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e04d      	b.n	8003744 <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 80036a8:	7abb      	ldrb	r3, [r7, #10]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d149      	bne.n	8003742 <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_NOR_ReturnToReadMode+0x3c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e043      	b.n	8003744 <HAL_NOR_ReturnToReadMode+0xc4>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 80036d4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e012      	b.n	8003702 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d103      	bne.n	80036ec <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 80036e4:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e00a      	b.n	8003702 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d103      	bne.n	80036fc <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 80036f4:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e002      	b.n	8003702 <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 80036fc:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003700:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003706:	2b02      	cmp	r3, #2
 8003708:	d105      	bne.n	8003716 <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	22f0      	movs	r2, #240	; 0xf0
 800370e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003710:	f3bf 8f4f 	dsb	sy
}
 8003714:	e00b      	b.n	800372e <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	22ff      	movs	r2, #255	; 0xff
 8003722:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003724:	f3bf 8f4f 	dsb	sy
}
 8003728:	e001      	b.n	800372e <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7aba      	ldrb	r2, [r7, #10]
 8003732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	e000      	b.n	8003744 <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b08f      	sub	sp, #60	; 0x3c
 8003754:	af0a      	add	r7, sp, #40	; 0x28
 8003756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e116      	b.n	8003990 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fe f925 	bl	80019cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2203      	movs	r2, #3
 8003786:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d102      	bne.n	800379c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 ff17 	bl	80065d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	687e      	ldr	r6, [r7, #4]
 80037ae:	466d      	mov	r5, sp
 80037b0:	f106 0410 	add.w	r4, r6, #16
 80037b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80037c4:	1d33      	adds	r3, r6, #4
 80037c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c8:	6838      	ldr	r0, [r7, #0]
 80037ca:	f002 feab 	bl	8006524 <USB_CoreInit>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d7      	b.n	8003990 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 ff05 	bl	80065f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e04a      	b.n	8003888 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	333d      	adds	r3, #61	; 0x3d
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	333c      	adds	r3, #60	; 0x3c
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	b298      	uxth	r0, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3344      	adds	r3, #68	; 0x44
 800382e:	4602      	mov	r2, r0
 8003830:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3340      	adds	r3, #64	; 0x40
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3348      	adds	r3, #72	; 0x48
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334c      	adds	r3, #76	; 0x4c
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3354      	adds	r3, #84	; 0x54
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	3301      	adds	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d3af      	bcc.n	80037f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e044      	b.n	8003922 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3b5      	bcc.n	8003898 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	687e      	ldr	r6, [r7, #4]
 8003934:	466d      	mov	r5, sp
 8003936:	f106 0410 	add.w	r4, r6, #16
 800393a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800393c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003942:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003946:	e885 0003 	stmia.w	r5, {r0, r1}
 800394a:	1d33      	adds	r3, r6, #4
 800394c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	f002 fe9e 	bl	8006690 <USB_DevInit>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e014      	b.n	8003990 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f80a 	bl	8003998 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f003 f85c 	bl	8006a46 <USB_DevDisconnect>

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003998 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HAL_PCDEx_ActivateLPM+0x44>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	10000003 	.word	0x10000003

080039e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a04      	ldr	r2, [pc, #16]	; (80039fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40007000 	.word	0x40007000

08003a00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a2e:	f7fe fb6b 	bl	8002108 <HAL_GetTick>
 8003a32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a34:	e009      	b.n	8003a4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a36:	f7fe fb67 	bl	8002108 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a44:	d901      	bls.n	8003a4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e022      	b.n	8003a90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003a4a:	4b14      	ldr	r3, [pc, #80]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a56:	d1ee      	bne.n	8003a36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a58:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a64:	f7fe fb50 	bl	8002108 <HAL_GetTick>
 8003a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a6a:	e009      	b.n	8003a80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a6c:	f7fe fb4c 	bl	8002108 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7a:	d901      	bls.n	8003a80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e007      	b.n	8003a90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40007000 	.word	0x40007000

08003aa0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7fe fb2e 	bl	8002108 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e067      	b.n	8003b88 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fd fe17 	bl	8001700 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003ad2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f85e 	bl	8003b98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2120      	movs	r1, #32
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f856 	bl	8003bb4 <QSPI_WaitFlagStateUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003b0c:	7afb      	ldrb	r3, [r7, #11]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d135      	bne.n	8003b7e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_QSPI_Init+0xf0>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6852      	ldr	r2, [r2, #4]
 8003b20:	0611      	lsls	r1, r2, #24
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68d2      	ldr	r2, [r2, #12]
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69d2      	ldr	r2, [r2, #28]
 8003b2c:	4311      	orrs	r1, r2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6a12      	ldr	r2, [r2, #32]
 8003b32:	4311      	orrs	r1, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <HAL_QSPI_Init+0xf4>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6912      	ldr	r2, [r2, #16]
 8003b4a:	0411      	lsls	r1, r2, #16
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6952      	ldr	r2, [r2, #20]
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6992      	ldr	r2, [r2, #24]
 8003b56:	4311      	orrs	r1, r2
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b86:	7afb      	ldrb	r3, [r7, #11]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	00ffff2f 	.word	0x00ffff2f
 8003b94:	ffe0f8fe 	.word	0xffe0f8fe

08003b98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bc4:	e01a      	b.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bcc:	d016      	beq.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bce:	f7fe fa9b 	bl	8002108 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d302      	bcc.n	8003be4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2204      	movs	r2, #4
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e00e      	b.n	8003c1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	bf14      	ite	ne
 8003c0a:	2301      	movne	r3, #1
 8003c0c:	2300      	moveq	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1d6      	bne.n	8003bc6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e29b      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8087 	beq.w	8003d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c48:	4b96      	ldr	r3, [pc, #600]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d00c      	beq.n	8003c6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c54:	4b93      	ldr	r3, [pc, #588]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d112      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62>
 8003c60:	4b90      	ldr	r3, [pc, #576]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x130>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d168      	bne.n	8003d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e275      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x7a>
 8003c90:	4b84      	ldr	r3, [pc, #528]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a83      	ldr	r2, [pc, #524]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	e02e      	b.n	8003cfc <HAL_RCC_OscConfig+0xd8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x9c>
 8003ca6:	4b7f      	ldr	r3, [pc, #508]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7e      	ldr	r2, [pc, #504]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b7c      	ldr	r3, [pc, #496]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7b      	ldr	r2, [pc, #492]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01d      	b.n	8003cfc <HAL_RCC_OscConfig+0xd8>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xc0>
 8003cca:	4b76      	ldr	r3, [pc, #472]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a75      	ldr	r2, [pc, #468]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b73      	ldr	r3, [pc, #460]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a72      	ldr	r2, [pc, #456]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0xd8>
 8003ce4:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b6c      	ldr	r3, [pc, #432]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a6b      	ldr	r2, [pc, #428]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe fa00 	bl	8002108 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe f9fc 	bl	8002108 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e229      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0xe8>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fe f9ec 	bl	8002108 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe f9e8 	bl	8002108 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e215      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x110>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d069      	beq.n	8003e36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d62:	4b50      	ldr	r3, [pc, #320]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b4d      	ldr	r3, [pc, #308]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x190>
 8003d7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x17a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1e9      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	493d      	ldr	r1, [pc, #244]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e040      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d023      	beq.n	8003e04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe f99e 	bl	8002108 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7fe f99a 	bl	8002108 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e1c7      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dee:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4929      	ldr	r1, [pc, #164]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
 8003e02:	e018      	b.n	8003e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	f023 0301 	bic.w	r3, r3, #1
 8003e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e10:	f7fe f97a 	bl	8002108 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e18:	f7fe f976 	bl	8002108 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1a3      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d038      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d019      	beq.n	8003e7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4a:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4e:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fe f957 	bl	8002108 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fe f953 	bl	8002108 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e180      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d0f0      	beq.n	8003e5e <HAL_RCC_OscConfig+0x23a>
 8003e7c:	e01a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_RCC_OscConfig+0x280>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fe f93d 	bl	8002108 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e92:	f7fe f939 	bl	8002108 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d903      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e166      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
 8003ea4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b92      	ldr	r3, [pc, #584]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ee      	bne.n	8003e92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a4 	beq.w	800400a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b8c      	ldr	r3, [pc, #560]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10d      	bne.n	8003eea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a88      	ldr	r2, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b86      	ldr	r3, [pc, #536]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eea:	4b83      	ldr	r3, [pc, #524]	; (80040f8 <HAL_RCC_OscConfig+0x4d4>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d118      	bne.n	8003f28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ef6:	4b80      	ldr	r3, [pc, #512]	; (80040f8 <HAL_RCC_OscConfig+0x4d4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a7f      	ldr	r2, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x4d4>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f02:	f7fe f901 	bl	8002108 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0a:	f7fe f8fd 	bl	8002108 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b64      	cmp	r3, #100	; 0x64
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e12a      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1c:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x4d4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x31a>
 8003f30:	4b70      	ldr	r3, [pc, #448]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a6f      	ldr	r2, [pc, #444]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3c:	e02d      	b.n	8003f9a <HAL_RCC_OscConfig+0x376>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x33c>
 8003f46:	4b6b      	ldr	r3, [pc, #428]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4a:	4a6a      	ldr	r2, [pc, #424]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6713      	str	r3, [r2, #112]	; 0x70
 8003f52:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	4a67      	ldr	r2, [pc, #412]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f58:	f023 0304 	bic.w	r3, r3, #4
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5e:	e01c      	b.n	8003f9a <HAL_RCC_OscConfig+0x376>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d10c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x35e>
 8003f68:	4b62      	ldr	r3, [pc, #392]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a61      	ldr	r2, [pc, #388]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f7a:	f043 0301 	orr.w	r3, r3, #1
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f80:	e00b      	b.n	8003f9a <HAL_RCC_OscConfig+0x376>
 8003f82:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f86:	4a5b      	ldr	r2, [pc, #364]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8e:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	4a58      	ldr	r2, [pc, #352]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d015      	beq.n	8003fce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f8b1 	bl	8002108 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe f8ad 	bl	8002108 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e0d8      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ee      	beq.n	8003faa <HAL_RCC_OscConfig+0x386>
 8003fcc:	e014      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fe f89b 	bl	8002108 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fe f897 	bl	8002108 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0c2      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fec:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ee      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d105      	bne.n	800400a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffe:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	4a3c      	ldr	r2, [pc, #240]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8004004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80ae 	beq.w	8004170 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004014:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b08      	cmp	r3, #8
 800401e:	d06d      	beq.n	80040fc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d14b      	bne.n	80040c0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe f868 	bl	8002108 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe f864 	bl	8002108 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e091      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	071b      	lsls	r3, r3, #28
 8004086:	491b      	ldr	r1, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 8004092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe f836 	bl	8002108 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fe f832 	bl	8002108 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e05f      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x47c>
 80040be:	e057      	b.n	8004170 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe f81c 	bl	8002108 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe f818 	bl	8002108 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e045      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4b0>
 80040f2:	e03d      	b.n	8004170 <HAL_RCC_OscConfig+0x54c>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80040fc:	4b1f      	ldr	r3, [pc, #124]	; (800417c <HAL_RCC_OscConfig+0x558>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d030      	beq.n	800416c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d129      	bne.n	800416c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d122      	bne.n	800416c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800412c:	4013      	ands	r3, r2
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004132:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004134:	4293      	cmp	r3, r2
 8004136:	d119      	bne.n	800416c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	085b      	lsrs	r3, r3, #1
 8004144:	3b01      	subs	r3, #1
 8004146:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d10f      	bne.n	800416c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d107      	bne.n	800416c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800

08004180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0d0      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004198:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d910      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b67      	ldr	r3, [pc, #412]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f023 020f 	bic.w	r2, r3, #15
 80041ae:	4965      	ldr	r1, [pc, #404]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b63      	ldr	r3, [pc, #396]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b8      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e0:	4b59      	ldr	r3, [pc, #356]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a58      	ldr	r2, [pc, #352]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 80041e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f8:	4b53      	ldr	r3, [pc, #332]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a52      	ldr	r2, [pc, #328]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004202:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004204:	4b50      	ldr	r3, [pc, #320]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	494d      	ldr	r1, [pc, #308]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d040      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b47      	ldr	r3, [pc, #284]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d115      	bne.n	8004262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e07f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e073      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e06b      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004262:	4b39      	ldr	r3, [pc, #228]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 0203 	bic.w	r2, r3, #3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4936      	ldr	r1, [pc, #216]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004274:	f7fd ff48 	bl	8002108 <HAL_GetTick>
 8004278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	e00a      	b.n	8004292 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800427c:	f7fd ff44 	bl	8002108 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e053      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004292:	4b2d      	ldr	r3, [pc, #180]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 020c 	and.w	r2, r3, #12
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d1eb      	bne.n	800427c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d210      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b24      	ldr	r3, [pc, #144]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 020f 	bic.w	r2, r3, #15
 80042ba:	4922      	ldr	r1, [pc, #136]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e032      	b.n	800433a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4916      	ldr	r1, [pc, #88]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	490e      	ldr	r1, [pc, #56]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004312:	f000 f821 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004316:	4602      	mov	r2, r0
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_ClockConfig+0x1c8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	490a      	ldr	r1, [pc, #40]	; (800434c <HAL_RCC_ClockConfig+0x1cc>)
 8004324:	5ccb      	ldrb	r3, [r1, r3]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RCC_ClockConfig+0x1d0>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1d4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd fea4 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023c00 	.word	0x40023c00
 8004348:	40023800 	.word	0x40023800
 800434c:	08009ff8 	.word	0x08009ff8
 8004350:	20000000 	.word	0x20000000
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800435c:	b090      	sub	sp, #64	; 0x40
 800435e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
 8004364:	2300      	movs	r3, #0
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004370:	4b59      	ldr	r3, [pc, #356]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d00d      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x40>
 800437c:	2b08      	cmp	r3, #8
 800437e:	f200 80a1 	bhi.w	80044c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x3a>
 800438a:	e09b      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b53      	ldr	r3, [pc, #332]	; (80044dc <HAL_RCC_GetSysClockFreq+0x184>)
 800438e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004390:	e09b      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004392:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004396:	e098      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043a2:	4b4d      	ldr	r3, [pc, #308]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d028      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	2200      	movs	r2, #0
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	627a      	str	r2, [r7, #36]	; 0x24
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043c0:	2100      	movs	r1, #0
 80043c2:	4b47      	ldr	r3, [pc, #284]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80043c4:	fb03 f201 	mul.w	r2, r3, r1
 80043c8:	2300      	movs	r3, #0
 80043ca:	fb00 f303 	mul.w	r3, r0, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80043d2:	fba0 1202 	umull	r1, r2, r0, r2
 80043d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043d8:	460a      	mov	r2, r1
 80043da:	62ba      	str	r2, [r7, #40]	; 0x28
 80043dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043de:	4413      	add	r3, r2
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e4:	2200      	movs	r2, #0
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	61fa      	str	r2, [r7, #28]
 80043ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f2:	f7fb ff75 	bl	80002e0 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4613      	mov	r3, r2
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fe:	e053      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004400:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	2200      	movs	r2, #0
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	617a      	str	r2, [r7, #20]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004412:	f04f 0b00 	mov.w	fp, #0
 8004416:	4652      	mov	r2, sl
 8004418:	465b      	mov	r3, fp
 800441a:	f04f 0000 	mov.w	r0, #0
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	0159      	lsls	r1, r3, #5
 8004424:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004428:	0150      	lsls	r0, r2, #5
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	ebb2 080a 	subs.w	r8, r2, sl
 8004432:	eb63 090b 	sbc.w	r9, r3, fp
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004442:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004446:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800444a:	ebb2 0408 	subs.w	r4, r2, r8
 800444e:	eb63 0509 	sbc.w	r5, r3, r9
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	00eb      	lsls	r3, r5, #3
 800445c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004460:	00e2      	lsls	r2, r4, #3
 8004462:	4614      	mov	r4, r2
 8004464:	461d      	mov	r5, r3
 8004466:	eb14 030a 	adds.w	r3, r4, sl
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	eb45 030b 	adc.w	r3, r5, fp
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800447e:	4629      	mov	r1, r5
 8004480:	028b      	lsls	r3, r1, #10
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004488:	4621      	mov	r1, r4
 800448a:	028a      	lsls	r2, r1, #10
 800448c:	4610      	mov	r0, r2
 800448e:	4619      	mov	r1, r3
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	2200      	movs	r2, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	60fa      	str	r2, [r7, #12]
 8004498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800449c:	f7fb ff20 	bl	80002e0 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80044b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044c2:	e002      	b.n	80044ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_GetSysClockFreq+0x184>)
 80044c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3740      	adds	r7, #64	; 0x40
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800
 80044dc:	00f42400 	.word	0x00f42400
 80044e0:	017d7840 	.word	0x017d7840

080044e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000000 	.word	0x20000000

080044fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004500:	f7ff fff0 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0a9b      	lsrs	r3, r3, #10
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4903      	ldr	r1, [pc, #12]	; (8004520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40023800 	.word	0x40023800
 8004520:	0800a008 	.word	0x0800a008

08004524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004528:	f7ff ffdc 	bl	80044e4 <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0b5b      	lsrs	r3, r3, #13
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	; (8004548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	0800a008 	.word	0x0800a008

0800454c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d012      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004574:	4b69      	ldr	r3, [pc, #420]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4a68      	ldr	r2, [pc, #416]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800457e:	6093      	str	r3, [r2, #8]
 8004580:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	4964      	ldr	r1, [pc, #400]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	4959      	ldr	r1, [pc, #356]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045e2:	4b4e      	ldr	r3, [pc, #312]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	494a      	ldr	r1, [pc, #296]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 808b 	beq.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b3a      	ldr	r3, [pc, #232]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	4a39      	ldr	r2, [pc, #228]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	; 0x40
 800463c:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a34      	ldr	r2, [pc, #208]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004652:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004654:	f7fd fd58 	bl	8002108 <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fd fd54 	bl	8002108 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e38f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d035      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d02e      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004698:	4b20      	ldr	r3, [pc, #128]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a2:	4b1e      	ldr	r3, [pc, #120]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	4a1d      	ldr	r2, [pc, #116]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ae:	4b1b      	ldr	r3, [pc, #108]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a1a      	ldr	r2, [pc, #104]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ba:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d114      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fd fd1c 	bl	8002108 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d2:	e00a      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d4:	f7fd fd18 	bl	8002108 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e351      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ee      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d111      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004704:	4b05      	ldr	r3, [pc, #20]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004712:	400b      	ands	r3, r1
 8004714:	4901      	ldr	r1, [pc, #4]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
 800471a:	e00b      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
 8004724:	0ffffcff 	.word	0x0ffffcff
 8004728:	4bac      	ldr	r3, [pc, #688]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4aab      	ldr	r2, [pc, #684]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004732:	6093      	str	r3, [r2, #8]
 8004734:	4ba9      	ldr	r3, [pc, #676]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	49a6      	ldr	r1, [pc, #664]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	4313      	orrs	r3, r2
 8004744:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004752:	4ba2      	ldr	r3, [pc, #648]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	4aa0      	ldr	r2, [pc, #640]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004762:	4b9e      	ldr	r3, [pc, #632]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004764:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	499b      	ldr	r1, [pc, #620]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004780:	4b96      	ldr	r3, [pc, #600]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800478e:	4993      	ldr	r1, [pc, #588]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047a2:	4b8e      	ldr	r3, [pc, #568]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b0:	498a      	ldr	r1, [pc, #552]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047c4:	4b85      	ldr	r3, [pc, #532]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d2:	4982      	ldr	r1, [pc, #520]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047e6:	4b7d      	ldr	r3, [pc, #500]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4979      	ldr	r1, [pc, #484]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004808:	4b74      	ldr	r3, [pc, #464]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480e:	f023 0203 	bic.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004816:	4971      	ldr	r1, [pc, #452]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800482a:	4b6c      	ldr	r3, [pc, #432]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800482c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004830:	f023 020c 	bic.w	r2, r3, #12
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004838:	4968      	ldr	r1, [pc, #416]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800484c:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	4960      	ldr	r1, [pc, #384]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487c:	4957      	ldr	r1, [pc, #348]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004890:	4b52      	ldr	r3, [pc, #328]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	494f      	ldr	r1, [pc, #316]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048b2:	4b4a      	ldr	r3, [pc, #296]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	4946      	ldr	r1, [pc, #280]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048d4:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	493e      	ldr	r1, [pc, #248]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	4935      	ldr	r1, [pc, #212]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004926:	492d      	ldr	r1, [pc, #180]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d011      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800493c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004940:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004948:	4924      	ldr	r1, [pc, #144]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004954:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004980:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004988:	4914      	ldr	r1, [pc, #80]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00b      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ac:	490b      	ldr	r1, [pc, #44]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00f      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	4902      	ldr	r1, [pc, #8]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ec:	4b8a      	ldr	r3, [pc, #552]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	4986      	ldr	r1, [pc, #536]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a10:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a20:	497d      	ldr	r1, [pc, #500]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d006      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 80d6 	beq.w	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a3c:	4b76      	ldr	r3, [pc, #472]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a75      	ldr	r2, [pc, #468]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a48:	f7fd fb5e 	bl	8002108 <HAL_GetTick>
 8004a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a50:	f7fd fb5a 	bl	8002108 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	; 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e195      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11d      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a90:	4b61      	ldr	r3, [pc, #388]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a96:	0e1b      	lsrs	r3, r3, #24
 8004a98:	f003 030f 	and.w	r3, r3, #15
 8004a9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	019a      	lsls	r2, r3, #6
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	4958      	ldr	r1, [pc, #352]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d004      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02e      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae8:	d129      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004aea:	4b4b      	ldr	r3, [pc, #300]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004af8:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afe:	0f1b      	lsrs	r3, r3, #28
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	019a      	lsls	r2, r3, #6
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	061b      	lsls	r3, r3, #24
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	071b      	lsls	r3, r3, #28
 8004b1e:	493e      	ldr	r1, [pc, #248]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b26:	4b3c      	ldr	r3, [pc, #240]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b2c:	f023 021f 	bic.w	r2, r3, #31
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4938      	ldr	r1, [pc, #224]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01d      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b4a:	4b33      	ldr	r3, [pc, #204]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b50:	0e1b      	lsrs	r3, r3, #24
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b58:	4b2f      	ldr	r3, [pc, #188]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5e:	0f1b      	lsrs	r3, r3, #28
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	019a      	lsls	r2, r3, #6
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	431a      	orrs	r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	071b      	lsls	r3, r3, #28
 8004b7e:	4926      	ldr	r1, [pc, #152]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	019a      	lsls	r2, r3, #6
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	041b      	lsls	r3, r3, #16
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	071b      	lsls	r3, r3, #28
 8004bae:	491a      	ldr	r1, [pc, #104]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc2:	f7fd faa1 	bl	8002108 <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bca:	f7fd fa9d 	bl	8002108 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b64      	cmp	r3, #100	; 0x64
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e0d8      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	f040 80ce 	bne.w	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfc:	f7fd fa84 	bl	8002108 <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c02:	e00b      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c04:	f7fd fa80 	bl	8002108 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d904      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0bb      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c1c:	4b5e      	ldr	r3, [pc, #376]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c28:	d0ec      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02e      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d12a      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c52:	4b51      	ldr	r3, [pc, #324]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c60:	4b4d      	ldr	r3, [pc, #308]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	0f1b      	lsrs	r3, r3, #28
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	019a      	lsls	r2, r3, #6
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	061b      	lsls	r3, r3, #24
 8004c80:	431a      	orrs	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	071b      	lsls	r3, r3, #28
 8004c86:	4944      	ldr	r1, [pc, #272]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c8e:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	493d      	ldr	r1, [pc, #244]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cbc:	d11d      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cbe:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	0e1b      	lsrs	r3, r3, #24
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ccc:	4b32      	ldr	r3, [pc, #200]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	0f1b      	lsrs	r3, r3, #28
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	4929      	ldr	r1, [pc, #164]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d028      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d06:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	0e1b      	lsrs	r3, r3, #24
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	019a      	lsls	r2, r3, #6
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	071b      	lsls	r3, r3, #28
 8004d3a:	4917      	ldr	r1, [pc, #92]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	4911      	ldr	r1, [pc, #68]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fd f9d0 	bl	8002108 <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d6c:	f7fd f9cc 	bl	8002108 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e007      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8a:	d1ef      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023800 	.word	0x40023800

08004d9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dba:	f040 80a3 	bne.w	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004dbe:	4ba8      	ldr	r3, [pc, #672]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dc4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004dcc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dd4:	f000 808a 	beq.w	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dde:	f200 8093 	bhi.w	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004de8:	d07d      	beq.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df0:	f200 808a 	bhi.w	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e00:	d039      	beq.n	8004e76 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004e02:	e081      	b.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e04:	4b96      	ldr	r3, [pc, #600]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d108      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e10:	4b93      	ldr	r3, [pc, #588]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e18:	4a92      	ldr	r2, [pc, #584]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	e007      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e22:	4b8f      	ldr	r3, [pc, #572]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e2a:	4a8f      	ldr	r2, [pc, #572]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004e32:	4b8b      	ldr	r3, [pc, #556]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	0e1b      	lsrs	r3, r3, #24
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004e40:	4b87      	ldr	r3, [pc, #540]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	fb03 f202 	mul.w	r2, r3, r2
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004e5a:	4b81      	ldr	r3, [pc, #516]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e60:	0a1b      	lsrs	r3, r3, #8
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	617b      	str	r3, [r7, #20]
        break;
 8004e74:	e049      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e76:	4b7a      	ldr	r3, [pc, #488]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e82:	4b77      	ldr	r3, [pc, #476]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e8a:	4a76      	ldr	r2, [pc, #472]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	613b      	str	r3, [r7, #16]
 8004e92:	e007      	b.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e94:	4b72      	ldr	r3, [pc, #456]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	4a72      	ldr	r2, [pc, #456]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004ea4:	4b6e      	ldr	r3, [pc, #440]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eaa:	0e1b      	lsrs	r3, r3, #24
 8004eac:	f003 030f 	and.w	r3, r3, #15
 8004eb0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004eb2:	4b6b      	ldr	r3, [pc, #428]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	fb03 f202 	mul.w	r2, r3, r2
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004ecc:	4b64      	ldr	r3, [pc, #400]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	617b      	str	r3, [r7, #20]
        break;
 8004ee4:	e011      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ee6:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004ee8:	617b      	str	r3, [r7, #20]
        break;
 8004eea:	e00e      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004eec:	4b5c      	ldr	r3, [pc, #368]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d102      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004ef8:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004efa:	617b      	str	r3, [r7, #20]
        break;
 8004efc:	e005      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004efe:	4b5a      	ldr	r3, [pc, #360]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f00:	617b      	str	r3, [r7, #20]
        break;
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004f08:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f10:	f040 80a3 	bne.w	800505a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004f14:	4b52      	ldr	r3, [pc, #328]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004f22:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f2a:	f000 808a 	beq.w	8005042 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f34:	f200 809c 	bhi.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f3e:	d07d      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f46:	f200 8093 	bhi.w	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f56:	d039      	beq.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004f58:	e08a      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f66:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f6e:	4a3d      	ldr	r2, [pc, #244]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	e007      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004f78:	4b39      	ldr	r3, [pc, #228]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f80:	4a39      	ldr	r2, [pc, #228]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004f88:	4b35      	ldr	r3, [pc, #212]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	0e1b      	lsrs	r3, r3, #24
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004f96:	4b32      	ldr	r3, [pc, #200]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	099b      	lsrs	r3, r3, #6
 8004f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	fb03 f202 	mul.w	r2, r3, r2
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
        break;
 8004fca:	e052      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004fcc:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe0:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	e007      	b.n	8004ffa <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff2:	4a1d      	ldr	r2, [pc, #116]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004ffa:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005000:	0e1b      	lsrs	r3, r3, #24
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	fb03 f202 	mul.w	r2, r3, r2
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]
        break;
 800503a:	e01a      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800503e:	617b      	str	r3, [r7, #20]
        break;
 8005040:	e017      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d102      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005050:	617b      	str	r3, [r7, #20]
        break;
 8005052:	e00e      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005056:	617b      	str	r3, [r7, #20]
        break;
 8005058:	e00b      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 800505a:	bf00      	nop
 800505c:	e009      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
 8005064:	00f42400 	.word	0x00f42400
 8005068:	017d7840 	.word	0x017d7840
 800506c:	00bb8000 	.word	0x00bb8000
        break;
 8005070:	bf00      	nop

  return frequency;
 8005072:	697b      	ldr	r3, [r7, #20]
}
 8005074:	4618      	mov	r0, r3
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e156      	b.n	800534c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fc fe9c 	bl	8001df0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f95b 	bl	800537c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d00c      	beq.n	80050e8 <HAL_SAI_Init+0x68>
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d80d      	bhi.n	80050ee <HAL_SAI_Init+0x6e>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_SAI_Init+0x5c>
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d003      	beq.n	80050e2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80050da:	e008      	b.n	80050ee <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
      break;
 80050e0:	e006      	b.n	80050f0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80050e2:	2310      	movs	r3, #16
 80050e4:	61fb      	str	r3, [r7, #28]
      break;
 80050e6:	e003      	b.n	80050f0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80050e8:	2320      	movs	r3, #32
 80050ea:	61fb      	str	r3, [r7, #28]
      break;
 80050ec:	e000      	b.n	80050f0 <HAL_SAI_Init+0x70>
      break;
 80050ee:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d81e      	bhi.n	8005136 <HAL_SAI_Init+0xb6>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <HAL_SAI_Init+0x80>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005111 	.word	0x08005111
 8005104:	08005117 	.word	0x08005117
 8005108:	0800511f 	.word	0x0800511f
 800510c:	08005127 	.word	0x08005127
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
    }
    break;
 8005114:	e010      	b.n	8005138 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800511a:	617b      	str	r3, [r7, #20]
    }
    break;
 800511c:	e00c      	b.n	8005138 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800511e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005122:	617b      	str	r3, [r7, #20]
    }
    break;
 8005124:	e008      	b.n	8005138 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800512a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005134:	e000      	b.n	8005138 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005136:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a85      	ldr	r2, [pc, #532]	; (8005354 <HAL_SAI_Init+0x2d4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_SAI_Init+0xcc>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a84      	ldr	r2, [pc, #528]	; (8005358 <HAL_SAI_Init+0x2d8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d103      	bne.n	8005154 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800514c:	4a83      	ldr	r2, [pc, #524]	; (800535c <HAL_SAI_Init+0x2dc>)
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e002      	b.n	800515a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005154:	4a82      	ldr	r2, [pc, #520]	; (8005360 <HAL_SAI_Init+0x2e0>)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d04c      	beq.n	80051fc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a7a      	ldr	r2, [pc, #488]	; (8005354 <HAL_SAI_Init+0x2d4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_SAI_Init+0xfa>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a78      	ldr	r2, [pc, #480]	; (8005358 <HAL_SAI_Init+0x2d8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d104      	bne.n	8005184 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800517a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800517e:	f7ff fe0d 	bl	8004d9c <HAL_RCCEx_GetPeriphCLKFreq>
 8005182:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a76      	ldr	r2, [pc, #472]	; (8005364 <HAL_SAI_Init+0x2e4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d004      	beq.n	8005198 <HAL_SAI_Init+0x118>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a75      	ldr	r2, [pc, #468]	; (8005368 <HAL_SAI_Init+0x2e8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d104      	bne.n	80051a2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005198:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800519c:	f7ff fdfe 	bl	8004d9c <HAL_RCCEx_GetPeriphCLKFreq>
 80051a0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	461a      	mov	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a6b      	ldr	r2, [pc, #428]	; (800536c <HAL_SAI_Init+0x2ec>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	08da      	lsrs	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	4b68      	ldr	r3, [pc, #416]	; (800536c <HAL_SAI_Init+0x2ec>)
 80051cc:	fba3 2301 	umull	r2, r3, r3, r1
 80051d0:	08da      	lsrs	r2, r3, #3
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	1aca      	subs	r2, r1, r3
 80051dc:	2a08      	cmp	r2, #8
 80051de:	d904      	bls.n	80051ea <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d104      	bne.n	80051fc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	085a      	lsrs	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_SAI_Init+0x18c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d109      	bne.n	8005220 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_SAI_Init+0x198>
 8005214:	2300      	movs	r3, #0
 8005216:	e001      	b.n	800521c <HAL_SAI_Init+0x19c>
 8005218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	e008      	b.n	8005232 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_SAI_Init+0x1ae>
 8005228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522c:	e000      	b.n	8005230 <HAL_SAI_Init+0x1b0>
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b4c      	ldr	r3, [pc, #304]	; (8005370 <HAL_SAI_Init+0x2f0>)
 800523e:	400b      	ands	r3, r1
 8005240:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005256:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	431a      	orrs	r2, r3
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800526a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005276:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	051b      	lsls	r3, r3, #20
 800527e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6859      	ldr	r1, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <HAL_SAI_Init+0x2f4>)
 8005294:	400b      	ands	r3, r1
 8005296:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	431a      	orrs	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b2d      	ldr	r3, [pc, #180]	; (8005378 <HAL_SAI_Init+0x2f8>)
 80052c2:	400b      	ands	r3, r1
 80052c4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6899      	ldr	r1, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80052d6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80052dc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 80052e2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	3b01      	subs	r3, #1
 80052ea:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80052ec:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68d9      	ldr	r1, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005304:	400b      	ands	r3, r1
 8005306:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68d9      	ldr	r1, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005316:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800531c:	041b      	lsls	r3, r3, #16
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005324:	3b01      	subs	r3, #1
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3720      	adds	r7, #32
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40015804 	.word	0x40015804
 8005358:	40015824 	.word	0x40015824
 800535c:	40015800 	.word	0x40015800
 8005360:	40015c00 	.word	0x40015c00
 8005364:	40015c04 	.word	0x40015c04
 8005368:	40015c24 	.word	0x40015c24
 800536c:	cccccccd 	.word	0xcccccccd
 8005370:	ff05c010 	.word	0xff05c010
 8005374:	ffff1ff0 	.word	0xffff1ff0
 8005378:	fff88000 	.word	0xfff88000

0800537c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005384:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <SAI_Disable+0x68>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <SAI_Disable+0x6c>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0b1b      	lsrs	r3, r3, #12
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053a6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1e5a      	subs	r2, r3, #1
 80053ac:	60fa      	str	r2, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	72fb      	strb	r3, [r7, #11]
      break;
 80053c6:	e006      	b.n	80053d6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e8      	bne.n	80053a8 <SAI_Disable+0x2c>

  return status;
 80053d6:	7afb      	ldrb	r3, [r7, #11]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000000 	.word	0x20000000
 80053e8:	95cbec1b 	.word	0x95cbec1b

080053ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e025      	b.n	800544c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc fce1 	bl	8001ddc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2202      	movs	r2, #2
 800541e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 ffb3 	bl	8006398 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	461a      	mov	r2, r3
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	f001 f807 	bl	8006450 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e04c      	b.n	8005500 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fc f9c2 	bl	8001804 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0203 	bic.w	r2, r2, #3
 8005496:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_SPDIFRX_Init+0xb4>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80054b0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80054b6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80054bc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80054c2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80054c8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80054ce:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80054d4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80054da:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80054e0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	fff88407 	.word	0xfff88407

0800550c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e038      	b.n	8005594 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7fc fc46 	bl	8001dc8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3308      	adds	r3, #8
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f000 fdf8 	bl	800613c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	461a      	mov	r2, r3
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	f000 fe80 	bl	800625c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6858      	ldr	r0, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	f000 fec7 	bl	80062fc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	6892      	ldr	r2, [r2, #8]
 8005582:	f041 0101 	orr.w	r1, r1, #1
 8005586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e049      	b.n	8005642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc f984 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f000 f8a6 	bl	800572c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b01      	cmp	r3, #1
 800565e:	d001      	beq.n	8005664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e04c      	b.n	80056fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a26      	ldr	r2, [pc, #152]	; (800570c <HAL_TIM_Base_Start+0xc0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d01d      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <HAL_TIM_Base_Start+0xc4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d018      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a21      	ldr	r2, [pc, #132]	; (8005714 <HAL_TIM_Base_Start+0xc8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1f      	ldr	r2, [pc, #124]	; (8005718 <HAL_TIM_Base_Start+0xcc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00e      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1e      	ldr	r2, [pc, #120]	; (800571c <HAL_TIM_Base_Start+0xd0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_TIM_Base_Start+0xd4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIM_Base_Start+0x70>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <HAL_TIM_Base_Start+0xd8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d115      	bne.n	80056e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	4b19      	ldr	r3, [pc, #100]	; (8005728 <HAL_TIM_Base_Start+0xdc>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d015      	beq.n	80056fa <HAL_TIM_Base_Start+0xae>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d4:	d011      	beq.n	80056fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0201 	orr.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e6:	e008      	b.n	80056fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	e000      	b.n	80056fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40010000 	.word	0x40010000
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800
 8005718:	40000c00 	.word	0x40000c00
 800571c:	40010400 	.word	0x40010400
 8005720:	40014000 	.word	0x40014000
 8005724:	40001800 	.word	0x40001800
 8005728:	00010007 	.word	0x00010007

0800572c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a40      	ldr	r2, [pc, #256]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d00f      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3d      	ldr	r2, [pc, #244]	; (8005844 <TIM_Base_SetConfig+0x118>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00b      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3c      	ldr	r2, [pc, #240]	; (8005848 <TIM_Base_SetConfig+0x11c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d007      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3b      	ldr	r2, [pc, #236]	; (800584c <TIM_Base_SetConfig+0x120>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3a      	ldr	r2, [pc, #232]	; (8005850 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d108      	bne.n	800577e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2f      	ldr	r2, [pc, #188]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d02b      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d027      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <TIM_Base_SetConfig+0x118>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d023      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2b      	ldr	r2, [pc, #172]	; (8005848 <TIM_Base_SetConfig+0x11c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01f      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <TIM_Base_SetConfig+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d01b      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a29      	ldr	r2, [pc, #164]	; (8005850 <TIM_Base_SetConfig+0x124>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d017      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <TIM_Base_SetConfig+0x128>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d013      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <TIM_Base_SetConfig+0x12c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00f      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a26      	ldr	r2, [pc, #152]	; (800585c <TIM_Base_SetConfig+0x130>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00b      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <TIM_Base_SetConfig+0x134>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a24      	ldr	r2, [pc, #144]	; (8005864 <TIM_Base_SetConfig+0x138>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a23      	ldr	r2, [pc, #140]	; (8005868 <TIM_Base_SetConfig+0x13c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d108      	bne.n	80057f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <TIM_Base_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_Base_SetConfig+0xf8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0c      	ldr	r2, [pc, #48]	; (8005850 <TIM_Base_SetConfig+0x124>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d103      	bne.n	800582c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	615a      	str	r2, [r3, #20]
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40010400 	.word	0x40010400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800
 8005860:	40001800 	.word	0x40001800
 8005864:	40001c00 	.word	0x40001c00
 8005868:	40002000 	.word	0x40002000

0800586c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e040      	b.n	8005900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc f83e 	bl	8001910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2224      	movs	r2, #36	; 0x24
 8005898:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f82c 	bl	8005908 <UART_SetConfig>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e022      	b.n	8005900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa84 	bl	8005dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fb0b 	bl	8005f14 <UART_CheckIdleState>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	69db      	ldr	r3, [r3, #28]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4ba6      	ldr	r3, [pc, #664]	; (8005bcc <UART_SetConfig+0x2c4>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	6979      	ldr	r1, [r7, #20]
 800593c:	430b      	orrs	r3, r1
 800593e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a1b      	ldr	r3, [r3, #32]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a94      	ldr	r2, [pc, #592]	; (8005bd0 <UART_SetConfig+0x2c8>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d120      	bne.n	80059c6 <UART_SetConfig+0xbe>
 8005984:	4b93      	ldr	r3, [pc, #588]	; (8005bd4 <UART_SetConfig+0x2cc>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b03      	cmp	r3, #3
 8005990:	d816      	bhi.n	80059c0 <UART_SetConfig+0xb8>
 8005992:	a201      	add	r2, pc, #4	; (adr r2, 8005998 <UART_SetConfig+0x90>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059b5 	.word	0x080059b5
 80059a0:	080059af 	.word	0x080059af
 80059a4:	080059bb 	.word	0x080059bb
 80059a8:	2301      	movs	r3, #1
 80059aa:	77fb      	strb	r3, [r7, #31]
 80059ac:	e150      	b.n	8005c50 <UART_SetConfig+0x348>
 80059ae:	2302      	movs	r3, #2
 80059b0:	77fb      	strb	r3, [r7, #31]
 80059b2:	e14d      	b.n	8005c50 <UART_SetConfig+0x348>
 80059b4:	2304      	movs	r3, #4
 80059b6:	77fb      	strb	r3, [r7, #31]
 80059b8:	e14a      	b.n	8005c50 <UART_SetConfig+0x348>
 80059ba:	2308      	movs	r3, #8
 80059bc:	77fb      	strb	r3, [r7, #31]
 80059be:	e147      	b.n	8005c50 <UART_SetConfig+0x348>
 80059c0:	2310      	movs	r3, #16
 80059c2:	77fb      	strb	r3, [r7, #31]
 80059c4:	e144      	b.n	8005c50 <UART_SetConfig+0x348>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <UART_SetConfig+0x2d0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d132      	bne.n	8005a36 <UART_SetConfig+0x12e>
 80059d0:	4b80      	ldr	r3, [pc, #512]	; (8005bd4 <UART_SetConfig+0x2cc>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	2b0c      	cmp	r3, #12
 80059dc:	d828      	bhi.n	8005a30 <UART_SetConfig+0x128>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <UART_SetConfig+0xdc>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a19 	.word	0x08005a19
 80059e8:	08005a31 	.word	0x08005a31
 80059ec:	08005a31 	.word	0x08005a31
 80059f0:	08005a31 	.word	0x08005a31
 80059f4:	08005a25 	.word	0x08005a25
 80059f8:	08005a31 	.word	0x08005a31
 80059fc:	08005a31 	.word	0x08005a31
 8005a00:	08005a31 	.word	0x08005a31
 8005a04:	08005a1f 	.word	0x08005a1f
 8005a08:	08005a31 	.word	0x08005a31
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a31 	.word	0x08005a31
 8005a14:	08005a2b 	.word	0x08005a2b
 8005a18:	2300      	movs	r3, #0
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e118      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	77fb      	strb	r3, [r7, #31]
 8005a22:	e115      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a24:	2304      	movs	r3, #4
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e112      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a2a:	2308      	movs	r3, #8
 8005a2c:	77fb      	strb	r3, [r7, #31]
 8005a2e:	e10f      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a30:	2310      	movs	r3, #16
 8005a32:	77fb      	strb	r3, [r7, #31]
 8005a34:	e10c      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a68      	ldr	r2, [pc, #416]	; (8005bdc <UART_SetConfig+0x2d4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d120      	bne.n	8005a82 <UART_SetConfig+0x17a>
 8005a40:	4b64      	ldr	r3, [pc, #400]	; (8005bd4 <UART_SetConfig+0x2cc>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a4a:	2b30      	cmp	r3, #48	; 0x30
 8005a4c:	d013      	beq.n	8005a76 <UART_SetConfig+0x16e>
 8005a4e:	2b30      	cmp	r3, #48	; 0x30
 8005a50:	d814      	bhi.n	8005a7c <UART_SetConfig+0x174>
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d009      	beq.n	8005a6a <UART_SetConfig+0x162>
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d810      	bhi.n	8005a7c <UART_SetConfig+0x174>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d002      	beq.n	8005a64 <UART_SetConfig+0x15c>
 8005a5e:	2b10      	cmp	r3, #16
 8005a60:	d006      	beq.n	8005a70 <UART_SetConfig+0x168>
 8005a62:	e00b      	b.n	8005a7c <UART_SetConfig+0x174>
 8005a64:	2300      	movs	r3, #0
 8005a66:	77fb      	strb	r3, [r7, #31]
 8005a68:	e0f2      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
 8005a6e:	e0ef      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a70:	2304      	movs	r3, #4
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e0ec      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a76:	2308      	movs	r3, #8
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e0e9      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e0e6      	b.n	8005c50 <UART_SetConfig+0x348>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a56      	ldr	r2, [pc, #344]	; (8005be0 <UART_SetConfig+0x2d8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d120      	bne.n	8005ace <UART_SetConfig+0x1c6>
 8005a8c:	4b51      	ldr	r3, [pc, #324]	; (8005bd4 <UART_SetConfig+0x2cc>)
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a96:	2bc0      	cmp	r3, #192	; 0xc0
 8005a98:	d013      	beq.n	8005ac2 <UART_SetConfig+0x1ba>
 8005a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005a9c:	d814      	bhi.n	8005ac8 <UART_SetConfig+0x1c0>
 8005a9e:	2b80      	cmp	r3, #128	; 0x80
 8005aa0:	d009      	beq.n	8005ab6 <UART_SetConfig+0x1ae>
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d810      	bhi.n	8005ac8 <UART_SetConfig+0x1c0>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <UART_SetConfig+0x1a8>
 8005aaa:	2b40      	cmp	r3, #64	; 0x40
 8005aac:	d006      	beq.n	8005abc <UART_SetConfig+0x1b4>
 8005aae:	e00b      	b.n	8005ac8 <UART_SetConfig+0x1c0>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	e0cc      	b.n	8005c50 <UART_SetConfig+0x348>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	77fb      	strb	r3, [r7, #31]
 8005aba:	e0c9      	b.n	8005c50 <UART_SetConfig+0x348>
 8005abc:	2304      	movs	r3, #4
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e0c6      	b.n	8005c50 <UART_SetConfig+0x348>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e0c3      	b.n	8005c50 <UART_SetConfig+0x348>
 8005ac8:	2310      	movs	r3, #16
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e0c0      	b.n	8005c50 <UART_SetConfig+0x348>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a44      	ldr	r2, [pc, #272]	; (8005be4 <UART_SetConfig+0x2dc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d125      	bne.n	8005b24 <UART_SetConfig+0x21c>
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	; (8005bd4 <UART_SetConfig+0x2cc>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae6:	d017      	beq.n	8005b18 <UART_SetConfig+0x210>
 8005ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aec:	d817      	bhi.n	8005b1e <UART_SetConfig+0x216>
 8005aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af2:	d00b      	beq.n	8005b0c <UART_SetConfig+0x204>
 8005af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005af8:	d811      	bhi.n	8005b1e <UART_SetConfig+0x216>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <UART_SetConfig+0x1fe>
 8005afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b02:	d006      	beq.n	8005b12 <UART_SetConfig+0x20a>
 8005b04:	e00b      	b.n	8005b1e <UART_SetConfig+0x216>
 8005b06:	2300      	movs	r3, #0
 8005b08:	77fb      	strb	r3, [r7, #31]
 8005b0a:	e0a1      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e09e      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b12:	2304      	movs	r3, #4
 8005b14:	77fb      	strb	r3, [r7, #31]
 8005b16:	e09b      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b18:	2308      	movs	r3, #8
 8005b1a:	77fb      	strb	r3, [r7, #31]
 8005b1c:	e098      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b1e:	2310      	movs	r3, #16
 8005b20:	77fb      	strb	r3, [r7, #31]
 8005b22:	e095      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2f      	ldr	r2, [pc, #188]	; (8005be8 <UART_SetConfig+0x2e0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d125      	bne.n	8005b7a <UART_SetConfig+0x272>
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <UART_SetConfig+0x2cc>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b3c:	d017      	beq.n	8005b6e <UART_SetConfig+0x266>
 8005b3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b42:	d817      	bhi.n	8005b74 <UART_SetConfig+0x26c>
 8005b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b48:	d00b      	beq.n	8005b62 <UART_SetConfig+0x25a>
 8005b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4e:	d811      	bhi.n	8005b74 <UART_SetConfig+0x26c>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <UART_SetConfig+0x254>
 8005b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b58:	d006      	beq.n	8005b68 <UART_SetConfig+0x260>
 8005b5a:	e00b      	b.n	8005b74 <UART_SetConfig+0x26c>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e076      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e073      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e070      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e06d      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b74:	2310      	movs	r3, #16
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e06a      	b.n	8005c50 <UART_SetConfig+0x348>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a1b      	ldr	r2, [pc, #108]	; (8005bec <UART_SetConfig+0x2e4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d138      	bne.n	8005bf6 <UART_SetConfig+0x2ee>
 8005b84:	4b13      	ldr	r3, [pc, #76]	; (8005bd4 <UART_SetConfig+0x2cc>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b92:	d017      	beq.n	8005bc4 <UART_SetConfig+0x2bc>
 8005b94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b98:	d82a      	bhi.n	8005bf0 <UART_SetConfig+0x2e8>
 8005b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b9e:	d00b      	beq.n	8005bb8 <UART_SetConfig+0x2b0>
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba4:	d824      	bhi.n	8005bf0 <UART_SetConfig+0x2e8>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <UART_SetConfig+0x2aa>
 8005baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bae:	d006      	beq.n	8005bbe <UART_SetConfig+0x2b6>
 8005bb0:	e01e      	b.n	8005bf0 <UART_SetConfig+0x2e8>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e04b      	b.n	8005c50 <UART_SetConfig+0x348>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e048      	b.n	8005c50 <UART_SetConfig+0x348>
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e045      	b.n	8005c50 <UART_SetConfig+0x348>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e042      	b.n	8005c50 <UART_SetConfig+0x348>
 8005bca:	bf00      	nop
 8005bcc:	efff69f3 	.word	0xefff69f3
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40004400 	.word	0x40004400
 8005bdc:	40004800 	.word	0x40004800
 8005be0:	40004c00 	.word	0x40004c00
 8005be4:	40005000 	.word	0x40005000
 8005be8:	40011400 	.word	0x40011400
 8005bec:	40007800 	.word	0x40007800
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	77fb      	strb	r3, [r7, #31]
 8005bf4:	e02c      	b.n	8005c50 <UART_SetConfig+0x348>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a72      	ldr	r2, [pc, #456]	; (8005dc4 <UART_SetConfig+0x4bc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d125      	bne.n	8005c4c <UART_SetConfig+0x344>
 8005c00:	4b71      	ldr	r3, [pc, #452]	; (8005dc8 <UART_SetConfig+0x4c0>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c0e:	d017      	beq.n	8005c40 <UART_SetConfig+0x338>
 8005c10:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c14:	d817      	bhi.n	8005c46 <UART_SetConfig+0x33e>
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1a:	d00b      	beq.n	8005c34 <UART_SetConfig+0x32c>
 8005c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c20:	d811      	bhi.n	8005c46 <UART_SetConfig+0x33e>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <UART_SetConfig+0x326>
 8005c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2a:	d006      	beq.n	8005c3a <UART_SetConfig+0x332>
 8005c2c:	e00b      	b.n	8005c46 <UART_SetConfig+0x33e>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	77fb      	strb	r3, [r7, #31]
 8005c32:	e00d      	b.n	8005c50 <UART_SetConfig+0x348>
 8005c34:	2302      	movs	r3, #2
 8005c36:	77fb      	strb	r3, [r7, #31]
 8005c38:	e00a      	b.n	8005c50 <UART_SetConfig+0x348>
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	e007      	b.n	8005c50 <UART_SetConfig+0x348>
 8005c40:	2308      	movs	r3, #8
 8005c42:	77fb      	strb	r3, [r7, #31]
 8005c44:	e004      	b.n	8005c50 <UART_SetConfig+0x348>
 8005c46:	2310      	movs	r3, #16
 8005c48:	77fb      	strb	r3, [r7, #31]
 8005c4a:	e001      	b.n	8005c50 <UART_SetConfig+0x348>
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	d15b      	bne.n	8005d12 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005c5a:	7ffb      	ldrb	r3, [r7, #31]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d828      	bhi.n	8005cb2 <UART_SetConfig+0x3aa>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x360>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c8d 	.word	0x08005c8d
 8005c6c:	08005c95 	.word	0x08005c95
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005cb3 	.word	0x08005cb3
 8005c78:	08005ca3 	.word	0x08005ca3
 8005c7c:	08005cb3 	.word	0x08005cb3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cab 	.word	0x08005cab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c8c:	f7fe fc36 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8005c90:	61b8      	str	r0, [r7, #24]
        break;
 8005c92:	e013      	b.n	8005cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c94:	f7fe fc46 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 8005c98:	61b8      	str	r0, [r7, #24]
        break;
 8005c9a:	e00f      	b.n	8005cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <UART_SetConfig+0x4c4>)
 8005c9e:	61bb      	str	r3, [r7, #24]
        break;
 8005ca0:	e00c      	b.n	8005cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe fb59 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8005ca6:	61b8      	str	r0, [r7, #24]
        break;
 8005ca8:	e008      	b.n	8005cbc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cae:	61bb      	str	r3, [r7, #24]
        break;
 8005cb0:	e004      	b.n	8005cbc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	77bb      	strb	r3, [r7, #30]
        break;
 8005cba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d074      	beq.n	8005dac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	005a      	lsls	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	085b      	lsrs	r3, r3, #1
 8005ccc:	441a      	add	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d916      	bls.n	8005d0c <UART_SetConfig+0x404>
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce4:	d212      	bcs.n	8005d0c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	f023 030f 	bic.w	r3, r3, #15
 8005cee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	89fb      	ldrh	r3, [r7, #14]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	89fa      	ldrh	r2, [r7, #14]
 8005d08:	60da      	str	r2, [r3, #12]
 8005d0a:	e04f      	b.n	8005dac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	77bb      	strb	r3, [r7, #30]
 8005d10:	e04c      	b.n	8005dac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d12:	7ffb      	ldrb	r3, [r7, #31]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d828      	bhi.n	8005d6a <UART_SetConfig+0x462>
 8005d18:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x418>)
 8005d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1e:	bf00      	nop
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d6b 	.word	0x08005d6b
 8005d30:	08005d5b 	.word	0x08005d5b
 8005d34:	08005d6b 	.word	0x08005d6b
 8005d38:	08005d6b 	.word	0x08005d6b
 8005d3c:	08005d6b 	.word	0x08005d6b
 8005d40:	08005d63 	.word	0x08005d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fe fbda 	bl	80044fc <HAL_RCC_GetPCLK1Freq>
 8005d48:	61b8      	str	r0, [r7, #24]
        break;
 8005d4a:	e013      	b.n	8005d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d4c:	f7fe fbea 	bl	8004524 <HAL_RCC_GetPCLK2Freq>
 8005d50:	61b8      	str	r0, [r7, #24]
        break;
 8005d52:	e00f      	b.n	8005d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <UART_SetConfig+0x4c4>)
 8005d56:	61bb      	str	r3, [r7, #24]
        break;
 8005d58:	e00c      	b.n	8005d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5a:	f7fe fafd 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8005d5e:	61b8      	str	r0, [r7, #24]
        break;
 8005d60:	e008      	b.n	8005d74 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	61bb      	str	r3, [r7, #24]
        break;
 8005d68:	e004      	b.n	8005d74 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	77bb      	strb	r3, [r7, #30]
        break;
 8005d72:	bf00      	nop
    }

    if (pclk != 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d018      	beq.n	8005dac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	085a      	lsrs	r2, r3, #1
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	441a      	add	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	2b0f      	cmp	r3, #15
 8005d92:	d909      	bls.n	8005da8 <UART_SetConfig+0x4a0>
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9a:	d205      	bcs.n	8005da8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	e001      	b.n	8005dac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3720      	adds	r7, #32
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40007c00 	.word	0x40007c00
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	00f42400 	.word	0x00f42400

08005dd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	f003 0310 	and.w	r3, r3, #16
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01a      	beq.n	8005ee6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ece:	d10a      	bne.n	8005ee6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	605a      	str	r2, [r3, #4]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f24:	f7fc f8f0 	bl	8002108 <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10e      	bne.n	8005f56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f831 	bl	8005fae <UART_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e027      	b.n	8005fa6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d10e      	bne.n	8005f82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f81b 	bl	8005fae <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d001      	beq.n	8005f82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e011      	b.n	8005fa6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b09c      	sub	sp, #112	; 0x70
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	603b      	str	r3, [r7, #0]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fbe:	e0a7      	b.n	8006110 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc6:	f000 80a3 	beq.w	8006110 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fca:	f7fc f89d 	bl	8002108 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d302      	bcc.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d13f      	bne.n	8006060 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006000:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800600c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e6      	bne.n	8005fe0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3308      	adds	r3, #8
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	663b      	str	r3, [r7, #96]	; 0x60
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3308      	adds	r3, #8
 8006030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006032:	64ba      	str	r2, [r7, #72]	; 0x48
 8006034:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e5      	bne.n	8006012 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2220      	movs	r2, #32
 800604a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e068      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d050      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607c:	d148      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006086:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800609c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
 80060a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e6      	bne.n	8006088 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3308      	adds	r3, #8
 80060c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3308      	adds	r3, #8
 80060d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060da:	623a      	str	r2, [r7, #32]
 80060dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	69f9      	ldr	r1, [r7, #28]
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e5      	bne.n	80060ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e010      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	429a      	cmp	r2, r3
 800612c:	f43f af48 	beq.w	8005fc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3770      	adds	r7, #112	; 0x70
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	f023 0101 	bic.w	r1, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d102      	bne.n	800616c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006166:	2340      	movs	r3, #64	; 0x40
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	e001      	b.n	8006170 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800617c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006182:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006188:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800618e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8006194:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800619a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80061a0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80061a6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80061ac:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80061d4:	4b20      	ldr	r3, [pc, #128]	; (8006258 <FMC_NORSRAM_Init+0x11c>)
 80061d6:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061de:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061e6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80061ee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	43db      	mvns	r3, r3
 80061fe:	ea02 0103 	and.w	r1, r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	4319      	orrs	r1, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006218:	d10c      	bne.n	8006234 <FMC_NORSRAM_Init+0xf8>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d008      	beq.n	8006234 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	0008fb7f 	.word	0x0008fb7f

0800625c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	431a      	orrs	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	431a      	orrs	r2, r3
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	041b      	lsls	r3, r3, #16
 8006290:	431a      	orrs	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	3b01      	subs	r3, #1
 8006298:	051b      	lsls	r3, r3, #20
 800629a:	431a      	orrs	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	3b02      	subs	r3, #2
 80062a2:	061b      	lsls	r3, r3, #24
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	3201      	adds	r2, #1
 80062b0:	4319      	orrs	r1, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c4:	d113      	bne.n	80062ee <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ce:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	051b      	lsls	r3, r3, #20
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	4313      	orrs	r3, r2
 80062dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006310:	d11d      	bne.n	800634e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800631a:	4b13      	ldr	r3, [pc, #76]	; (8006368 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800631c:	4013      	ands	r3, r2
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	6811      	ldr	r1, [r2, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	6852      	ldr	r2, [r2, #4]
 8006326:	0112      	lsls	r2, r2, #4
 8006328:	4311      	orrs	r1, r2
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	6892      	ldr	r2, [r2, #8]
 800632e:	0212      	lsls	r2, r2, #8
 8006330:	4311      	orrs	r1, r2
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	6992      	ldr	r2, [r2, #24]
 8006336:	4311      	orrs	r1, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	68d2      	ldr	r2, [r2, #12]
 800633c:	0412      	lsls	r2, r2, #16
 800633e:	430a      	orrs	r2, r1
 8006340:	ea43 0102 	orr.w	r1, r3, r2
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800634c:	e005      	b.n	800635a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	cff00000 	.word	0xcff00000

0800636c <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d121      	bne.n	80063ee <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b27      	ldr	r3, [pc, #156]	; (800644c <FMC_SDRAM_Init+0xb4>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	6851      	ldr	r1, [r2, #4]
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	4311      	orrs	r1, r2
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	68d2      	ldr	r2, [r2, #12]
 80063c0:	4311      	orrs	r1, r2
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	6912      	ldr	r2, [r2, #16]
 80063c6:	4311      	orrs	r1, r2
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	6952      	ldr	r2, [r2, #20]
 80063cc:	4311      	orrs	r1, r2
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	6992      	ldr	r2, [r2, #24]
 80063d2:	4311      	orrs	r1, r2
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	69d2      	ldr	r2, [r2, #28]
 80063d8:	4311      	orrs	r1, r2
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	6a12      	ldr	r2, [r2, #32]
 80063de:	4311      	orrs	r1, r2
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063e4:	430a      	orrs	r2, r1
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	e026      	b.n	800643c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	69d9      	ldr	r1, [r3, #28]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	4319      	orrs	r1, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	430b      	orrs	r3, r1
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <FMC_SDRAM_Init+0xb4>)
 8006412:	4013      	ands	r3, r2
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	6851      	ldr	r1, [r2, #4]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	4311      	orrs	r1, r2
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	4311      	orrs	r1, r2
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	6912      	ldr	r2, [r2, #16]
 8006428:	4311      	orrs	r1, r2
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	6952      	ldr	r2, [r2, #20]
 800642e:	4311      	orrs	r1, r2
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	6992      	ldr	r2, [r2, #24]
 8006434:	430a      	orrs	r2, r1
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	ffff8000 	.word	0xffff8000

08006450 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d128      	bne.n	80064b4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	1e59      	subs	r1, r3, #1
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	3b01      	subs	r3, #1
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	4319      	orrs	r1, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	3b01      	subs	r3, #1
 8006480:	021b      	lsls	r3, r3, #8
 8006482:	4319      	orrs	r1, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	3b01      	subs	r3, #1
 800648a:	031b      	lsls	r3, r3, #12
 800648c:	4319      	orrs	r1, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	3b01      	subs	r3, #1
 8006494:	041b      	lsls	r3, r3, #16
 8006496:	4319      	orrs	r1, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	3b01      	subs	r3, #1
 800649e:	051b      	lsls	r3, r3, #20
 80064a0:	4319      	orrs	r1, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	061b      	lsls	r3, r3, #24
 80064aa:	430b      	orrs	r3, r1
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	609a      	str	r2, [r3, #8]
 80064b2:	e02d      	b.n	8006510 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	4b19      	ldr	r3, [pc, #100]	; (8006520 <FMC_SDRAM_Timing_Init+0xd0>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	68d2      	ldr	r2, [r2, #12]
 80064c0:	3a01      	subs	r2, #1
 80064c2:	0311      	lsls	r1, r2, #12
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	6952      	ldr	r2, [r2, #20]
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0512      	lsls	r2, r2, #20
 80064cc:	430a      	orrs	r2, r1
 80064ce:	431a      	orrs	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	1e59      	subs	r1, r3, #1
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	011b      	lsls	r3, r3, #4
 80064ea:	4319      	orrs	r1, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	4319      	orrs	r1, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	4319      	orrs	r1, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	3b01      	subs	r3, #1
 8006506:	061b      	lsls	r3, r3, #24
 8006508:	430b      	orrs	r3, r1
 800650a:	431a      	orrs	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	ff0f0fff 	.word	0xff0f0fff

08006524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006524:	b084      	sub	sp, #16
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	f107 001c 	add.w	r0, r7, #28
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	2b01      	cmp	r3, #1
 800653a:	d120      	bne.n	800657e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <USB_CoreInit+0xac>)
 800654e:	4013      	ands	r3, r2
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d105      	bne.n	8006572 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fa96 	bl	8006aa4 <USB_CoreReset>
 8006578:	4603      	mov	r3, r0
 800657a:	73fb      	strb	r3, [r7, #15]
 800657c:	e010      	b.n	80065a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa8a 	bl	8006aa4 <USB_CoreReset>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10b      	bne.n	80065be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f043 0206 	orr.w	r2, r3, #6
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ca:	b004      	add	sp, #16
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	ffbdffbf 	.word	0xffbdffbf

080065d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f023 0201 	bic.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d115      	bne.n	8006644 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006624:	2001      	movs	r0, #1
 8006626:	f7fb fd7b 	bl	8002120 <HAL_Delay>
      ms++;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3301      	adds	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fa29 	bl	8006a88 <USB_GetMode>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d01e      	beq.n	800667a <USB_SetCurrentMode+0x84>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b31      	cmp	r3, #49	; 0x31
 8006640:	d9f0      	bls.n	8006624 <USB_SetCurrentMode+0x2e>
 8006642:	e01a      	b.n	800667a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d115      	bne.n	8006676 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006656:	2001      	movs	r0, #1
 8006658:	f7fb fd62 	bl	8002120 <HAL_Delay>
      ms++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3301      	adds	r3, #1
 8006660:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa10 	bl	8006a88 <USB_GetMode>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <USB_SetCurrentMode+0x84>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b31      	cmp	r3, #49	; 0x31
 8006672:	d9f0      	bls.n	8006656 <USB_SetCurrentMode+0x60>
 8006674:	e001      	b.n	800667a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e005      	b.n	8006686 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b32      	cmp	r3, #50	; 0x32
 800667e:	d101      	bne.n	8006684 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006690:	b084      	sub	sp, #16
 8006692:	b580      	push	{r7, lr}
 8006694:	b086      	sub	sp, #24
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800669e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e009      	b.n	80066c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3340      	adds	r3, #64	; 0x40
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	2200      	movs	r2, #0
 80066bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	3301      	adds	r3, #1
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b0e      	cmp	r3, #14
 80066c8:	d9f2      	bls.n	80066b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11c      	bne.n	800670a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066de:	f043 0302 	orr.w	r3, r3, #2
 80066e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	e005      	b.n	8006716 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	4619      	mov	r1, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006730:	461a      	mov	r2, r3
 8006732:	680b      	ldr	r3, [r1, #0]
 8006734:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	2b01      	cmp	r3, #1
 800673a:	d10c      	bne.n	8006756 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d104      	bne.n	800674c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006742:	2100      	movs	r1, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 f965 	bl	8006a14 <USB_SetDevSpeed>
 800674a:	e008      	b.n	800675e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800674c:	2101      	movs	r1, #1
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f960 	bl	8006a14 <USB_SetDevSpeed>
 8006754:	e003      	b.n	800675e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006756:	2103      	movs	r1, #3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f95b 	bl	8006a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800675e:	2110      	movs	r1, #16
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8f3 	bl	800694c <USB_FlushTxFifo>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f91f 	bl	80069b4 <USB_FlushRxFifo>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006786:	461a      	mov	r2, r3
 8006788:	2300      	movs	r3, #0
 800678a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006792:	461a      	mov	r2, r3
 8006794:	2300      	movs	r3, #0
 8006796:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679e:	461a      	mov	r2, r3
 80067a0:	2300      	movs	r3, #0
 80067a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	e043      	b.n	8006832 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c0:	d118      	bne.n	80067f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10a      	bne.n	80067de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	461a      	mov	r2, r3
 80067d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	e013      	b.n	8006806 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	461a      	mov	r2, r3
 80067ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e008      	b.n	8006806 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	461a      	mov	r2, r3
 8006802:	2300      	movs	r3, #0
 8006804:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	461a      	mov	r2, r3
 8006814:	2300      	movs	r3, #0
 8006816:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	461a      	mov	r2, r3
 8006826:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800682a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3301      	adds	r3, #1
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	429a      	cmp	r2, r3
 8006838:	d3b7      	bcc.n	80067aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	e043      	b.n	80068c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006856:	d118      	bne.n	800688a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686a:	461a      	mov	r2, r3
 800686c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e013      	b.n	800689c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	461a      	mov	r2, r3
 8006882:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e008      	b.n	800689c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	461a      	mov	r2, r3
 8006898:	2300      	movs	r3, #0
 800689a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	461a      	mov	r2, r3
 80068aa:	2300      	movs	r3, #0
 80068ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	461a      	mov	r2, r3
 80068bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	3301      	adds	r3, #1
 80068c6:	613b      	str	r3, [r7, #16]
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d3b7      	bcc.n	8006840 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80068f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	f043 0210 	orr.w	r2, r3, #16
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699a      	ldr	r2, [r3, #24]
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <USB_DevInit+0x2b4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f043 0208 	orr.w	r2, r3, #8
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006924:	2b01      	cmp	r3, #1
 8006926:	d105      	bne.n	8006934 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <USB_DevInit+0x2b8>)
 800692e:	4313      	orrs	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006934:	7dfb      	ldrb	r3, [r7, #23]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006940:	b004      	add	sp, #16
 8006942:	4770      	bx	lr
 8006944:	803c3800 	.word	0x803c3800
 8006948:	40000004 	.word	0x40000004

0800694c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <USB_FlushTxFifo+0x64>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d901      	bls.n	800696c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e01b      	b.n	80069a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	daf2      	bge.n	800695a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	019b      	lsls	r3, r3, #6
 800697c:	f043 0220 	orr.w	r2, r3, #32
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	3301      	adds	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a08      	ldr	r2, [pc, #32]	; (80069b0 <USB_FlushTxFifo+0x64>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d901      	bls.n	8006996 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e006      	b.n	80069a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0320 	and.w	r3, r3, #32
 800699e:	2b20      	cmp	r3, #32
 80069a0:	d0f0      	beq.n	8006984 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	00030d40 	.word	0x00030d40

080069b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	4a11      	ldr	r2, [pc, #68]	; (8006a10 <USB_FlushRxFifo+0x5c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e018      	b.n	8006a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	daf2      	bge.n	80069c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2210      	movs	r2, #16
 80069e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a08      	ldr	r2, [pc, #32]	; (8006a10 <USB_FlushRxFifo+0x5c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d901      	bls.n	80069f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e006      	b.n	8006a04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b10      	cmp	r3, #16
 8006a00:	d0f0      	beq.n	80069e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	00030d40 	.word	0x00030d40

08006a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a34:	4313      	orrs	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a60:	f023 0303 	bic.w	r3, r3, #3
 8006a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a74:	f043 0302 	orr.w	r3, r3, #2
 8006a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	f003 0301 	and.w	r3, r3, #1
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <USB_CoreReset+0x64>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d901      	bls.n	8006ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e01b      	b.n	8006afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	daf2      	bge.n	8006ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f043 0201 	orr.w	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <USB_CoreReset+0x64>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d901      	bls.n	8006aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e006      	b.n	8006afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d0f0      	beq.n	8006ada <USB_CoreReset+0x36>

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	00030d40 	.word	0x00030d40

08006b0c <sine_model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_sine_model_activations_map, 1, params)) {
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4825      	ldr	r0, [pc, #148]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b1c:	f000 fa80 	bl	8007020 <ai_platform_get_activations_map>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d039      	beq.n	8006b9a <sine_model_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    serving_default_dense_input0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 60);
 8006b26:	4b22      	ldr	r3, [pc, #136]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	333c      	adds	r3, #60	; 0x3c
 8006b2c:	4a21      	ldr	r2, [pc, #132]	; (8006bb4 <sine_model_configure_activations+0xa8>)
 8006b2e:	6093      	str	r3, [r2, #8]
    serving_default_dense_input0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 60);
 8006b30:	4b1f      	ldr	r3, [pc, #124]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	333c      	adds	r3, #60	; 0x3c
 8006b36:	4a1f      	ldr	r2, [pc, #124]	; (8006bb4 <sine_model_configure_activations+0xa8>)
 8006b38:	60d3      	str	r3, [r2, #12]
    
    dense_0_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8006b3a:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3340      	adds	r3, #64	; 0x40
 8006b40:	4a1d      	ldr	r2, [pc, #116]	; (8006bb8 <sine_model_configure_activations+0xac>)
 8006b42:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8006b44:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3340      	adds	r3, #64	; 0x40
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <sine_model_configure_activations+0xac>)
 8006b4c:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3340      	adds	r3, #64	; 0x40
 8006b54:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <sine_model_configure_activations+0xb0>)
 8006b56:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8006b58:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3340      	adds	r3, #64	; 0x40
 8006b5e:	4a17      	ldr	r2, [pc, #92]	; (8006bbc <sine_model_configure_activations+0xb0>)
 8006b60:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a16      	ldr	r2, [pc, #88]	; (8006bc0 <sine_model_configure_activations+0xb4>)
 8006b68:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a14      	ldr	r2, [pc, #80]	; (8006bc0 <sine_model_configure_activations+0xb4>)
 8006b70:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 64);
 8006b72:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3340      	adds	r3, #64	; 0x40
 8006b78:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <sine_model_configure_activations+0xb8>)
 8006b7a:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 64);
 8006b7c:	4b0c      	ldr	r3, [pc, #48]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3340      	adds	r3, #64	; 0x40
 8006b82:	4a10      	ldr	r2, [pc, #64]	; (8006bc4 <sine_model_configure_activations+0xb8>)
 8006b84:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_sine_model_activations_map[0] + 0);
 8006b86:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <sine_model_configure_activations+0xbc>)
 8006b8c:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_sine_model_activations_map[0] + 0);
 8006b8e:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <sine_model_configure_activations+0xa4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a0d      	ldr	r2, [pc, #52]	; (8006bc8 <sine_model_configure_activations+0xbc>)
 8006b94:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e005      	b.n	8006ba6 <sine_model_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006b9a:	2213      	movs	r2, #19
 8006b9c:	2130      	movs	r1, #48	; 0x30
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa96 	bl	80070d0 <ai_platform_network_set_error>
  return false;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20001510 	.word	0x20001510
 8006bb4:	2000000c 	.word	0x2000000c
 8006bb8:	2000002c 	.word	0x2000002c
 8006bbc:	2000003c 	.word	0x2000003c
 8006bc0:	2000005c 	.word	0x2000005c
 8006bc4:	2000006c 	.word	0x2000006c
 8006bc8:	2000007c 	.word	0x2000007c

08006bcc <sine_model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool sine_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_sine_model_weights_map, 1, params)) {
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4839      	ldr	r0, [pc, #228]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006bdc:	f000 f9c8 	bl	8006f70 <ai_platform_get_weights_map>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d061      	beq.n	8006caa <sine_model_configure_weights+0xde>
    /* Updating weights (byte) offsets */
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8006be6:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <sine_model_configure_weights+0xf8>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bee:	4a35      	ldr	r2, [pc, #212]	; (8006cc4 <sine_model_configure_weights+0xf8>)
 8006bf0:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 0);
 8006bf2:	4b33      	ldr	r3, [pc, #204]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a33      	ldr	r2, [pc, #204]	; (8006cc4 <sine_model_configure_weights+0xf8>)
 8006bf8:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 0);
 8006bfa:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a31      	ldr	r2, [pc, #196]	; (8006cc4 <sine_model_configure_weights+0xf8>)
 8006c00:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c02:	4b31      	ldr	r3, [pc, #196]	; (8006cc8 <sine_model_configure_weights+0xfc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c0a:	4a2f      	ldr	r2, [pc, #188]	; (8006cc8 <sine_model_configure_weights+0xfc>)
 8006c0c:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 64);
 8006c0e:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3340      	adds	r3, #64	; 0x40
 8006c14:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <sine_model_configure_weights+0xfc>)
 8006c16:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 64);
 8006c18:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3340      	adds	r3, #64	; 0x40
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <sine_model_configure_weights+0xfc>)
 8006c20:	60d3      	str	r3, [r2, #12]
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8006c22:	4b2a      	ldr	r3, [pc, #168]	; (8006ccc <sine_model_configure_weights+0x100>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2a:	4a28      	ldr	r2, [pc, #160]	; (8006ccc <sine_model_configure_weights+0x100>)
 8006c2c:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 68);
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3344      	adds	r3, #68	; 0x44
 8006c34:	4a25      	ldr	r2, [pc, #148]	; (8006ccc <sine_model_configure_weights+0x100>)
 8006c36:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 68);
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3344      	adds	r3, #68	; 0x44
 8006c3e:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <sine_model_configure_weights+0x100>)
 8006c40:	60d3      	str	r3, [r2, #12]
    
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c42:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <sine_model_configure_weights+0x104>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c4a:	4a21      	ldr	r2, [pc, #132]	; (8006cd0 <sine_model_configure_weights+0x104>)
 8006c4c:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 132);
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3384      	adds	r3, #132	; 0x84
 8006c54:	4a1e      	ldr	r2, [pc, #120]	; (8006cd0 <sine_model_configure_weights+0x104>)
 8006c56:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 132);
 8006c58:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	3384      	adds	r3, #132	; 0x84
 8006c5e:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <sine_model_configure_weights+0x104>)
 8006c60:	60d3      	str	r3, [r2, #12]
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006c62:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <sine_model_configure_weights+0x108>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c6a:	4a1a      	ldr	r2, [pc, #104]	; (8006cd4 <sine_model_configure_weights+0x108>)
 8006c6c:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_sine_model_weights_map[0] + 196);
 8006c6e:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	33c4      	adds	r3, #196	; 0xc4
 8006c74:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <sine_model_configure_weights+0x108>)
 8006c76:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 196);
 8006c78:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	33c4      	adds	r3, #196	; 0xc4
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <sine_model_configure_weights+0x108>)
 8006c80:	60d3      	str	r3, [r2, #12]
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006c82:	4b15      	ldr	r3, [pc, #84]	; (8006cd8 <sine_model_configure_weights+0x10c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8a:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <sine_model_configure_weights+0x10c>)
 8006c8c:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_sine_model_weights_map[0] + 1220);
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c96:	4a10      	ldr	r2, [pc, #64]	; (8006cd8 <sine_model_configure_weights+0x10c>)
 8006c98:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_sine_model_weights_map[0] + 1220);
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <sine_model_configure_weights+0xf4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ca2:	4a0d      	ldr	r2, [pc, #52]	; (8006cd8 <sine_model_configure_weights+0x10c>)
 8006ca4:	60d3      	str	r3, [r2, #12]
    
    return true;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e005      	b.n	8006cb6 <sine_model_configure_weights+0xea>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006caa:	2212      	movs	r2, #18
 8006cac:	2130      	movs	r1, #48	; 0x30
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fa0e 	bl	80070d0 <ai_platform_network_set_error>
  return false;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20001514 	.word	0x20001514
 8006cc4:	2000001c 	.word	0x2000001c
 8006cc8:	2000004c 	.word	0x2000004c
 8006ccc:	2000008c 	.word	0x2000008c
 8006cd0:	2000009c 	.word	0x2000009c
 8006cd4:	200000ac 	.word	0x200000ac
 8006cd8:	200000bc 	.word	0x200000bc

08006cdc <ai_sine_model_create>:
}

AI_API_ENTRY
ai_error ai_sine_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9301      	str	r3, [sp, #4]
 8006cea:	2305      	movs	r3, #5
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4a04      	ldr	r2, [pc, #16]	; (8006d04 <ai_sine_model_create+0x28>)
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 fd05 	bl	8007704 <ai_platform_network_create>
 8006cfa:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	200005f0 	.word	0x200005f0

08006d08 <ai_sine_model_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_sine_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <ai_sine_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006d18:	4b06      	ldr	r3, [pc, #24]	; (8006d34 <ai_sine_model_inputs_get+0x2c>)
 8006d1a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a06      	ldr	r2, [pc, #24]	; (8006d38 <ai_sine_model_inputs_get+0x30>)
 8006d20:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9d9 	bl	80070dc <ai_platform_inputs_get>
 8006d2a:	4603      	mov	r3, r0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	200005f0 	.word	0x200005f0
 8006d38:	a1c00100 	.word	0xa1c00100

08006d3c <ai_sine_model_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_sine_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <ai_sine_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <ai_sine_model_outputs_get+0x2c>)
 8006d4e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <ai_sine_model_outputs_get+0x30>)
 8006d54:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb4b 	bl	80073f4 <ai_platform_outputs_get>
 8006d5e:	4603      	mov	r3, r0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200005f0 	.word	0x200005f0
 8006d6c:	a1c00100 	.word	0xa1c00100

08006d70 <ai_sine_model_init>:
}

AI_API_ENTRY
ai_bool ai_sine_model_init(
  ai_handle network, const ai_network_params* params)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fe9b 	bl	8007ab8 <ai_platform_network_init>
 8006d82:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <ai_sine_model_init+0x1e>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e028      	b.n	8006de0 <ai_sine_model_init+0x70>

  ai_bool ok = true;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_weights(net_ctx, params);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff ff19 	bl	8006bcc <sine_model_configure_weights>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	7afb      	ldrb	r3, [r7, #11]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bf14      	ite	ne
 8006da6:	2301      	movne	r3, #1
 8006da8:	2300      	moveq	r3, #0
 8006daa:	72fb      	strb	r3, [r7, #11]
  ok &= sine_model_configure_activations(net_ctx, params);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7ff feac 	bl	8006b0c <sine_model_configure_activations>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bf14      	ite	ne
 8006dc0:	2301      	movne	r3, #1
 8006dc2:	2300      	moveq	r3, #0
 8006dc4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 f812 	bl	8007df0 <ai_platform_network_post_init>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf14      	ite	ne
 8006dd8:	2301      	movne	r3, #1
 8006dda:	2300      	moveq	r3, #0
 8006ddc:	72fb      	strb	r3, [r7, #11]

  return ok;
 8006dde:	7afb      	ldrb	r3, [r7, #11]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3710      	adds	r7, #16
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <ai_sine_model_run>:


AI_API_ENTRY
ai_i32 ai_sine_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	68b9      	ldr	r1, [r7, #8]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f001 f923 	bl	8008044 <ai_platform_network_process>
 8006dfe:	4603      	mov	r3, r0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <ai_sine_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_activations_buffer_get(const ai_handle ptr)
{
 8006e08:	b4b0      	push	{r4, r5, r7}
 8006e0a:	b08f      	sub	sp, #60	; 0x3c
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <ai_sine_model_data_activations_buffer_get+0x60>)
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1e:	2300      	movs	r3, #0
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e22:	2380      	movs	r3, #128	; 0x80
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e26:	2301      	movs	r3, #1
 8006e28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	2204      	movs	r2, #4
 8006e30:	f362 231f 	bfi	r3, r2, #8, #24
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <ai_sine_model_data_activations_buffer_get+0x64>)
 8006e38:	f107 040c 	add.w	r4, r7, #12
 8006e3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_SINE_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_SINE_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	f107 041c 	add.w	r4, r7, #28
 8006e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006e54:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006e58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	373c      	adds	r7, #60	; 0x3c
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bcb0      	pop	{r4, r5, r7}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	00040440 	.word	0x00040440
 8006e6c:	08009fc8 	.word	0x08009fc8

08006e70 <ai_sine_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_sine_model_data_weights_buffer_get(const ai_handle ptr)
{
 8006e70:	b4b0      	push	{r4, r5, r7}
 8006e72:	b08f      	sub	sp, #60	; 0x3c
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <ai_sine_model_data_weights_buffer_get+0x60>)
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	623b      	str	r3, [r7, #32]
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
 8006e86:	2300      	movs	r3, #0
 8006e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e8a:	f240 5304 	movw	r3, #1284	; 0x504
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e90:	2301      	movs	r3, #1
 8006e92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2204      	movs	r2, #4
 8006e9a:	f362 231f 	bfi	r3, r2, #8, #24
 8006e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	; (8006ed4 <ai_sine_model_data_weights_buffer_get+0x64>)
 8006ea2:	f107 040c 	add.w	r4, r7, #12
 8006ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ea8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_SINE_MODEL_DATA_WEIGHTS_SIZE, 1, AI_SINE_MODEL_DATA_WEIGHTS_COUNT),
    AI_SINE_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	461d      	mov	r5, r3
 8006eb6:	f107 041c 	add.w	r4, r7, #28
 8006eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ebe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006ec2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	373c      	adds	r7, #60	; 0x3c
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bcb0      	pop	{r4, r5, r7}
 8006ece:	4770      	bx	lr
 8006ed0:	40040440 	.word	0x40040440
 8006ed4:	08009fd8 	.word	0x08009fd8

08006ed8 <ai_sine_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_sine_model_data_weights_get(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_sine_model_weights_table);
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <ai_sine_model_data_weights_get+0x10>)

}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	20000694 	.word	0x20000694

08006eec <ai_buffer_get_size>:
 8006eec:	b368      	cbz	r0, 8006f4a <ai_buffer_get_size+0x5e>
 8006eee:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <ai_buffer_get_size+0x60>)
 8006ef0:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <ai_buffer_get_size+0x64>)
 8006ef2:	b410      	push	{r4}
 8006ef4:	6804      	ldr	r4, [r0, #0]
 8006ef6:	4023      	ands	r3, r4
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d123      	bne.n	8006f44 <ai_buffer_get_size+0x58>
 8006efc:	b311      	cbz	r1, 8006f44 <ai_buffer_get_size+0x58>
 8006efe:	6984      	ldr	r4, [r0, #24]
 8006f00:	6862      	ldr	r2, [r4, #4]
 8006f02:	321f      	adds	r2, #31
 8006f04:	f022 021f 	bic.w	r2, r2, #31
 8006f08:	7d03      	ldrb	r3, [r0, #20]
 8006f0a:	6941      	ldr	r1, [r0, #20]
 8006f0c:	f1a3 0301 	sub.w	r3, r3, #1
 8006f10:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006f14:	fab3 f383 	clz	r3, r3
 8006f18:	095b      	lsrs	r3, r3, #5
 8006f1a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8006f1e:	da0c      	bge.n	8006f3a <ai_buffer_get_size+0x4e>
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d103      	bne.n	8006f2c <ai_buffer_get_size+0x40>
 8006f24:	2802      	cmp	r0, #2
 8006f26:	f04f 0302 	mov.w	r3, #2
 8006f2a:	d006      	beq.n	8006f3a <ai_buffer_get_size+0x4e>
 8006f2c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4298      	cmp	r0, r3
 8006f34:	fb01 f202 	mul.w	r2, r1, r2
 8006f38:	d1f2      	bne.n	8006f20 <ai_buffer_get_size+0x34>
 8006f3a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	6984      	ldr	r4, [r0, #24]
 8006f46:	6862      	ldr	r2, [r4, #4]
 8006f48:	e7de      	b.n	8006f08 <ai_buffer_get_size+0x1c>
 8006f4a:	4770      	bx	lr
 8006f4c:	017fffff 	.word	0x017fffff
 8006f50:	000400c0 	.word	0x000400c0

08006f54 <ai_buffer_array_sane>:
 8006f54:	b138      	cbz	r0, 8006f66 <ai_buffer_array_sane+0x12>
 8006f56:	6843      	ldr	r3, [r0, #4]
 8006f58:	b123      	cbz	r3, 8006f64 <ai_buffer_array_sane+0x10>
 8006f5a:	8840      	ldrh	r0, [r0, #2]
 8006f5c:	3800      	subs	r0, #0
 8006f5e:	bf18      	it	ne
 8006f60:	2001      	movne	r0, #1
 8006f62:	4770      	bx	lr
 8006f64:	4618      	mov	r0, r3
 8006f66:	4770      	bx	lr

08006f68 <_ai_platform_acquire_crc>:
 8006f68:	2001      	movs	r0, #1
 8006f6a:	4770      	bx	lr

08006f6c <_ai_platform_release_crc>:
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop

08006f70 <ai_platform_get_weights_map>:
 8006f70:	2900      	cmp	r1, #0
 8006f72:	bf18      	it	ne
 8006f74:	2800      	cmpne	r0, #0
 8006f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f78:	bf0c      	ite	eq
 8006f7a:	2401      	moveq	r4, #1
 8006f7c:	2400      	movne	r4, #0
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	bf08      	it	eq
 8006f82:	f044 0401 	orreq.w	r4, r4, #1
 8006f86:	b114      	cbz	r4, 8006f8e <ai_platform_get_weights_map+0x1e>
 8006f88:	2400      	movs	r4, #0
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8e:	4616      	mov	r6, r2
 8006f90:	4b22      	ldr	r3, [pc, #136]	; (800701c <ai_platform_get_weights_map+0xac>)
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	4605      	mov	r5, r0
 8006f96:	460f      	mov	r7, r1
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d022      	beq.n	8006fe2 <ai_platform_get_weights_map+0x72>
 8006f9c:	6870      	ldr	r0, [r6, #4]
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d0f2      	beq.n	8006f88 <ai_platform_get_weights_map+0x18>
 8006fa2:	6806      	ldr	r6, [r0, #0]
 8006fa4:	429e      	cmp	r6, r3
 8006fa6:	d006      	beq.n	8006fb6 <ai_platform_get_weights_map+0x46>
 8006fa8:	f1a1 0401 	sub.w	r4, r1, #1
 8006fac:	6028      	str	r0, [r5, #0]
 8006fae:	fab4 f484 	clz	r4, r4
 8006fb2:	0964      	lsrs	r4, r4, #5
 8006fb4:	e7e9      	b.n	8006f8a <ai_platform_get_weights_map+0x1a>
 8006fb6:	3d04      	subs	r5, #4
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4621      	mov	r1, r4
 8006fbc:	e000      	b.n	8006fc0 <ai_platform_get_weights_map+0x50>
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006fc4:	42b3      	cmp	r3, r6
 8006fc6:	d025      	beq.n	8007014 <ai_platform_get_weights_map+0xa4>
 8006fc8:	f845 3f04 	str.w	r3, [r5, #4]!
 8006fcc:	1c4b      	adds	r3, r1, #1
 8006fce:	429f      	cmp	r7, r3
 8006fd0:	d8f5      	bhi.n	8006fbe <ai_platform_get_weights_map+0x4e>
 8006fd2:	d1da      	bne.n	8006f8a <ai_platform_get_weights_map+0x1a>
 8006fd4:	3102      	adds	r1, #2
 8006fd6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006fda:	42b3      	cmp	r3, r6
 8006fdc:	d1d5      	bne.n	8006f8a <ai_platform_get_weights_map+0x1a>
 8006fde:	2401      	movs	r4, #1
 8006fe0:	e7d3      	b.n	8006f8a <ai_platform_get_weights_map+0x1a>
 8006fe2:	1d30      	adds	r0, r6, #4
 8006fe4:	f7ff ffb6 	bl	8006f54 <ai_buffer_array_sane>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d0cd      	beq.n	8006f88 <ai_platform_get_weights_map+0x18>
 8006fec:	88f3      	ldrh	r3, [r6, #6]
 8006fee:	429f      	cmp	r7, r3
 8006ff0:	d1ca      	bne.n	8006f88 <ai_platform_get_weights_map+0x18>
 8006ff2:	3d04      	subs	r5, #4
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	68b3      	ldr	r3, [r6, #8]
 8006ff8:	4423      	add	r3, r4
 8006ffa:	341c      	adds	r4, #28
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b123      	cbz	r3, 800700a <ai_platform_get_weights_map+0x9a>
 8007000:	3201      	adds	r2, #1
 8007002:	f845 3f04 	str.w	r3, [r5, #4]!
 8007006:	4297      	cmp	r7, r2
 8007008:	d8f5      	bhi.n	8006ff6 <ai_platform_get_weights_map+0x86>
 800700a:	1abc      	subs	r4, r7, r2
 800700c:	fab4 f484 	clz	r4, r4
 8007010:	0964      	lsrs	r4, r4, #5
 8007012:	e7ba      	b.n	8006f8a <ai_platform_get_weights_map+0x1a>
 8007014:	428f      	cmp	r7, r1
 8007016:	d1b8      	bne.n	8006f8a <ai_platform_get_weights_map+0x1a>
 8007018:	e7e1      	b.n	8006fde <ai_platform_get_weights_map+0x6e>
 800701a:	bf00      	nop
 800701c:	a1facade 	.word	0xa1facade

08007020 <ai_platform_get_activations_map>:
 8007020:	2900      	cmp	r1, #0
 8007022:	bf18      	it	ne
 8007024:	2800      	cmpne	r0, #0
 8007026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007028:	bf0c      	ite	eq
 800702a:	2401      	moveq	r4, #1
 800702c:	2400      	movne	r4, #0
 800702e:	2a00      	cmp	r2, #0
 8007030:	bf08      	it	eq
 8007032:	f044 0401 	orreq.w	r4, r4, #1
 8007036:	b114      	cbz	r4, 800703e <ai_platform_get_activations_map+0x1e>
 8007038:	2400      	movs	r4, #0
 800703a:	4620      	mov	r0, r4
 800703c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800703e:	4616      	mov	r6, r2
 8007040:	4b22      	ldr	r3, [pc, #136]	; (80070cc <ai_platform_get_activations_map+0xac>)
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	4605      	mov	r5, r0
 8007046:	460f      	mov	r7, r1
 8007048:	429a      	cmp	r2, r3
 800704a:	d022      	beq.n	8007092 <ai_platform_get_activations_map+0x72>
 800704c:	6a30      	ldr	r0, [r6, #32]
 800704e:	2800      	cmp	r0, #0
 8007050:	d0f2      	beq.n	8007038 <ai_platform_get_activations_map+0x18>
 8007052:	6806      	ldr	r6, [r0, #0]
 8007054:	429e      	cmp	r6, r3
 8007056:	d006      	beq.n	8007066 <ai_platform_get_activations_map+0x46>
 8007058:	f1a1 0401 	sub.w	r4, r1, #1
 800705c:	6028      	str	r0, [r5, #0]
 800705e:	fab4 f484 	clz	r4, r4
 8007062:	0964      	lsrs	r4, r4, #5
 8007064:	e7e9      	b.n	800703a <ai_platform_get_activations_map+0x1a>
 8007066:	3d04      	subs	r5, #4
 8007068:	4602      	mov	r2, r0
 800706a:	4621      	mov	r1, r4
 800706c:	e000      	b.n	8007070 <ai_platform_get_activations_map+0x50>
 800706e:	4619      	mov	r1, r3
 8007070:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007074:	42b3      	cmp	r3, r6
 8007076:	d026      	beq.n	80070c6 <ai_platform_get_activations_map+0xa6>
 8007078:	f845 3f04 	str.w	r3, [r5, #4]!
 800707c:	1c4b      	adds	r3, r1, #1
 800707e:	429f      	cmp	r7, r3
 8007080:	d8f5      	bhi.n	800706e <ai_platform_get_activations_map+0x4e>
 8007082:	d1da      	bne.n	800703a <ai_platform_get_activations_map+0x1a>
 8007084:	3102      	adds	r1, #2
 8007086:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800708a:	42b3      	cmp	r3, r6
 800708c:	d1d5      	bne.n	800703a <ai_platform_get_activations_map+0x1a>
 800708e:	2401      	movs	r4, #1
 8007090:	e7d3      	b.n	800703a <ai_platform_get_activations_map+0x1a>
 8007092:	f106 000c 	add.w	r0, r6, #12
 8007096:	f7ff ff5d 	bl	8006f54 <ai_buffer_array_sane>
 800709a:	2800      	cmp	r0, #0
 800709c:	d0cc      	beq.n	8007038 <ai_platform_get_activations_map+0x18>
 800709e:	89f3      	ldrh	r3, [r6, #14]
 80070a0:	429f      	cmp	r7, r3
 80070a2:	d1c9      	bne.n	8007038 <ai_platform_get_activations_map+0x18>
 80070a4:	3d04      	subs	r5, #4
 80070a6:	4622      	mov	r2, r4
 80070a8:	6933      	ldr	r3, [r6, #16]
 80070aa:	4423      	add	r3, r4
 80070ac:	341c      	adds	r4, #28
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	b123      	cbz	r3, 80070bc <ai_platform_get_activations_map+0x9c>
 80070b2:	3201      	adds	r2, #1
 80070b4:	f845 3f04 	str.w	r3, [r5, #4]!
 80070b8:	4297      	cmp	r7, r2
 80070ba:	d8f5      	bhi.n	80070a8 <ai_platform_get_activations_map+0x88>
 80070bc:	1abc      	subs	r4, r7, r2
 80070be:	fab4 f484 	clz	r4, r4
 80070c2:	0964      	lsrs	r4, r4, #5
 80070c4:	e7b9      	b.n	800703a <ai_platform_get_activations_map+0x1a>
 80070c6:	428f      	cmp	r7, r1
 80070c8:	d1b7      	bne.n	800703a <ai_platform_get_activations_map+0x1a>
 80070ca:	e7e0      	b.n	800708e <ai_platform_get_activations_map+0x6e>
 80070cc:	a1facade 	.word	0xa1facade

080070d0 <ai_platform_network_set_error>:
 80070d0:	b110      	cbz	r0, 80070d8 <ai_platform_network_set_error+0x8>
 80070d2:	3010      	adds	r0, #16
 80070d4:	f001 ba96 	b.w	8008604 <core_set_error>
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop

080070dc <ai_platform_inputs_get>:
 80070dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e0:	b085      	sub	sp, #20
 80070e2:	9102      	str	r1, [sp, #8]
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f000 8093 	beq.w	8007210 <ai_platform_inputs_get+0x134>
 80070ea:	4baa      	ldr	r3, [pc, #680]	; (8007394 <ai_platform_inputs_get+0x2b8>)
 80070ec:	4681      	mov	r9, r0
 80070ee:	6802      	ldr	r2, [r0, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	f040 808d 	bne.w	8007210 <ai_platform_inputs_get+0x134>
 80070f6:	f7ff ff37 	bl	8006f68 <_ai_platform_acquire_crc>
 80070fa:	4ba7      	ldr	r3, [pc, #668]	; (8007398 <ai_platform_inputs_get+0x2bc>)
 80070fc:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007106:	189a      	adds	r2, r3, r2
 8007108:	2a01      	cmp	r2, #1
 800710a:	f240 80da 	bls.w	80072c2 <ai_platform_inputs_get+0x1e6>
 800710e:	f240 4249 	movw	r2, #1097	; 0x449
 8007112:	4293      	cmp	r3, r2
 8007114:	f000 80d5 	beq.w	80072c2 <ai_platform_inputs_get+0x1e6>
 8007118:	4aa0      	ldr	r2, [pc, #640]	; (800739c <ai_platform_inputs_get+0x2c0>)
 800711a:	6813      	ldr	r3, [r2, #0]
 800711c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007120:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007124:	f000 80dc 	beq.w	80072e0 <ai_platform_inputs_get+0x204>
 8007128:	6813      	ldr	r3, [r2, #0]
 800712a:	f240 4183 	movw	r1, #1155	; 0x483
 800712e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007132:	428b      	cmp	r3, r1
 8007134:	f000 810e 	beq.w	8007354 <ai_platform_inputs_get+0x278>
 8007138:	6813      	ldr	r3, [r2, #0]
 800713a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800713e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007142:	f000 8143 	beq.w	80073cc <ai_platform_inputs_get+0x2f0>
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8113 	beq.w	8007378 <ai_platform_inputs_get+0x29c>
 8007152:	f7ff ff0b 	bl	8006f6c <_ai_platform_release_crc>
 8007156:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 80d2 	beq.w	8007304 <ai_platform_inputs_get+0x228>
 8007160:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8007164:	f1ba 0f00 	cmp.w	sl, #0
 8007168:	f000 80cc 	beq.w	8007304 <ai_platform_inputs_get+0x228>
 800716c:	2100      	movs	r1, #0
 800716e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007172:	460d      	mov	r5, r1
 8007174:	4689      	mov	r9, r1
 8007176:	e016      	b.n	80071a6 <ai_platform_inputs_get+0xca>
 8007178:	9a01      	ldr	r2, [sp, #4]
 800717a:	2301      	movs	r3, #1
 800717c:	f848 3002 	str.w	r3, [r8, r2]
 8007180:	69b2      	ldr	r2, [r6, #24]
 8007182:	f04f 0301 	mov.w	r3, #1
 8007186:	6856      	ldr	r6, [r2, #4]
 8007188:	3501      	adds	r5, #1
 800718a:	f109 091c 	add.w	r9, r9, #28
 800718e:	7523      	strb	r3, [r4, #20]
 8007190:	2300      	movs	r3, #0
 8007192:	6962      	ldr	r2, [r4, #20]
 8007194:	60a7      	str	r7, [r4, #8]
 8007196:	f36b 221f 	bfi	r2, fp, #8, #24
 800719a:	6126      	str	r6, [r4, #16]
 800719c:	61a1      	str	r1, [r4, #24]
 800719e:	60e3      	str	r3, [r4, #12]
 80071a0:	6162      	str	r2, [r4, #20]
 80071a2:	e9c4 0c00 	strd	r0, ip, [r4]
 80071a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80071aa:	b2ac      	uxth	r4, r5
 80071ac:	42ab      	cmp	r3, r5
 80071ae:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	f240 80b5 	bls.w	8007322 <ai_platform_inputs_get+0x246>
 80071b8:	f8da 3004 	ldr.w	r3, [sl, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80b0 	beq.w	8007322 <ai_platform_inputs_get+0x246>
 80071c2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80071c6:	2e00      	cmp	r6, #0
 80071c8:	f000 80ab 	beq.w	8007322 <ai_platform_inputs_get+0x246>
 80071cc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80071d0:	69b2      	ldr	r2, [r6, #24]
 80071d2:	68f1      	ldr	r1, [r6, #12]
 80071d4:	6810      	ldr	r0, [r2, #0]
 80071d6:	9100      	str	r1, [sp, #0]
 80071d8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80071dc:	68b3      	ldr	r3, [r6, #8]
 80071de:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80071e2:	444c      	add	r4, r9
 80071e4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80071e8:	f002 f942 	bl	8009470 <ai_array_to_buffer_fmt>
 80071ec:	69b2      	ldr	r2, [r6, #24]
 80071ee:	9900      	ldr	r1, [sp, #0]
 80071f0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80071f4:	2f00      	cmp	r7, #0
 80071f6:	d0c4      	beq.n	8007182 <ai_platform_inputs_get+0xa6>
 80071f8:	2200      	movs	r2, #0
 80071fa:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80071fe:	6832      	ldr	r2, [r6, #0]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	b112      	cbz	r2, 800720a <ai_platform_inputs_get+0x12e>
 8007204:	8852      	ldrh	r2, [r2, #2]
 8007206:	2a00      	cmp	r2, #0
 8007208:	d1b6      	bne.n	8007178 <ai_platform_inputs_get+0x9c>
 800720a:	69b2      	ldr	r2, [r6, #24]
 800720c:	2700      	movs	r7, #0
 800720e:	e7b8      	b.n	8007182 <ai_platform_inputs_get+0xa6>
 8007210:	f7ff feaa 	bl	8006f68 <_ai_platform_acquire_crc>
 8007214:	4b60      	ldr	r3, [pc, #384]	; (8007398 <ai_platform_inputs_get+0x2bc>)
 8007216:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007220:	185a      	adds	r2, r3, r1
 8007222:	2a01      	cmp	r2, #1
 8007224:	d92a      	bls.n	800727c <ai_platform_inputs_get+0x1a0>
 8007226:	f240 4249 	movw	r2, #1097	; 0x449
 800722a:	4293      	cmp	r3, r2
 800722c:	d026      	beq.n	800727c <ai_platform_inputs_get+0x1a0>
 800722e:	4a5b      	ldr	r2, [pc, #364]	; (800739c <ai_platform_inputs_get+0x2c0>)
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007236:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800723a:	d02c      	beq.n	8007296 <ai_platform_inputs_get+0x1ba>
 800723c:	6813      	ldr	r3, [r2, #0]
 800723e:	f240 4183 	movw	r1, #1155	; 0x483
 8007242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007246:	428b      	cmp	r3, r1
 8007248:	d073      	beq.n	8007332 <ai_platform_inputs_get+0x256>
 800724a:	6813      	ldr	r3, [r2, #0]
 800724c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007250:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007254:	f000 80ac 	beq.w	80073b0 <ai_platform_inputs_get+0x2d4>
 8007258:	6813      	ldr	r3, [r2, #0]
 800725a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800725e:	2b00      	cmp	r3, #0
 8007260:	d129      	bne.n	80072b6 <ai_platform_inputs_get+0x1da>
 8007262:	4a4f      	ldr	r2, [pc, #316]	; (80073a0 <ai_platform_inputs_get+0x2c4>)
 8007264:	2301      	movs	r3, #1
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	6893      	ldr	r3, [r2, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1fc      	bne.n	8007268 <ai_platform_inputs_get+0x18c>
 800726e:	494d      	ldr	r1, [pc, #308]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 8007270:	4b4d      	ldr	r3, [pc, #308]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 8007272:	6011      	str	r1, [r2, #0]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d01d      	beq.n	80072b6 <ai_platform_inputs_get+0x1da>
 800727a:	e7fe      	b.n	800727a <ai_platform_inputs_get+0x19e>
 800727c:	4a48      	ldr	r2, [pc, #288]	; (80073a0 <ai_platform_inputs_get+0x2c4>)
 800727e:	2301      	movs	r3, #1
 8007280:	6093      	str	r3, [r2, #8]
 8007282:	6893      	ldr	r3, [r2, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1fc      	bne.n	8007282 <ai_platform_inputs_get+0x1a6>
 8007288:	4946      	ldr	r1, [pc, #280]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 800728a:	4b47      	ldr	r3, [pc, #284]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 800728c:	6011      	str	r1, [r2, #0]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d010      	beq.n	80072b6 <ai_platform_inputs_get+0x1da>
 8007294:	e7fe      	b.n	8007294 <ai_platform_inputs_get+0x1b8>
 8007296:	4a45      	ldr	r2, [pc, #276]	; (80073ac <ai_platform_inputs_get+0x2d0>)
 8007298:	2301      	movs	r3, #1
 800729a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800729e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1fb      	bne.n	800729e <ai_platform_inputs_get+0x1c2>
 80072a6:	493f      	ldr	r1, [pc, #252]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 80072a8:	4b3f      	ldr	r3, [pc, #252]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 80072aa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80072ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d113      	bne.n	80072de <ai_platform_inputs_get+0x202>
 80072b6:	f7ff fe59 	bl	8006f6c <_ai_platform_release_crc>
 80072ba:	2000      	movs	r0, #0
 80072bc:	b005      	add	sp, #20
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	4a37      	ldr	r2, [pc, #220]	; (80073a0 <ai_platform_inputs_get+0x2c4>)
 80072c4:	2301      	movs	r3, #1
 80072c6:	6093      	str	r3, [r2, #8]
 80072c8:	6893      	ldr	r3, [r2, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1fc      	bne.n	80072c8 <ai_platform_inputs_get+0x1ec>
 80072ce:	4b35      	ldr	r3, [pc, #212]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4b35      	ldr	r3, [pc, #212]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 80072d4:	6812      	ldr	r2, [r2, #0]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	f43f af3b 	beq.w	8007152 <ai_platform_inputs_get+0x76>
 80072dc:	e7fe      	b.n	80072dc <ai_platform_inputs_get+0x200>
 80072de:	e7fe      	b.n	80072de <ai_platform_inputs_get+0x202>
 80072e0:	4a32      	ldr	r2, [pc, #200]	; (80073ac <ai_platform_inputs_get+0x2d0>)
 80072e2:	2301      	movs	r3, #1
 80072e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1fb      	bne.n	80072e8 <ai_platform_inputs_get+0x20c>
 80072f0:	4b2c      	ldr	r3, [pc, #176]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 80072f2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80072f6:	4b2c      	ldr	r3, [pc, #176]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 80072f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072fc:	429a      	cmp	r2, r3
 80072fe:	f43f af28 	beq.w	8007152 <ai_platform_inputs_get+0x76>
 8007302:	e7fe      	b.n	8007302 <ai_platform_inputs_get+0x226>
 8007304:	2400      	movs	r4, #0
 8007306:	2218      	movs	r2, #24
 8007308:	2111      	movs	r1, #17
 800730a:	f109 0010 	add.w	r0, r9, #16
 800730e:	f001 f979 	bl	8008604 <core_set_error>
 8007312:	4620      	mov	r0, r4
 8007314:	9b02      	ldr	r3, [sp, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0d0      	beq.n	80072bc <ai_platform_inputs_get+0x1e0>
 800731a:	801c      	strh	r4, [r3, #0]
 800731c:	b005      	add	sp, #20
 800731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007322:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007326:	2c00      	cmp	r4, #0
 8007328:	d0ec      	beq.n	8007304 <ai_platform_inputs_get+0x228>
 800732a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800732e:	6858      	ldr	r0, [r3, #4]
 8007330:	e7f0      	b.n	8007314 <ai_platform_inputs_get+0x238>
 8007332:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <ai_platform_inputs_get+0x2d0>)
 8007334:	2301      	movs	r3, #1
 8007336:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800733a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1fb      	bne.n	800733a <ai_platform_inputs_get+0x25e>
 8007342:	4918      	ldr	r1, [pc, #96]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 8007344:	4b18      	ldr	r3, [pc, #96]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 8007346:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800734a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800734e:	429a      	cmp	r2, r3
 8007350:	d0b1      	beq.n	80072b6 <ai_platform_inputs_get+0x1da>
 8007352:	e7fe      	b.n	8007352 <ai_platform_inputs_get+0x276>
 8007354:	4a15      	ldr	r2, [pc, #84]	; (80073ac <ai_platform_inputs_get+0x2d0>)
 8007356:	2301      	movs	r3, #1
 8007358:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800735c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1fb      	bne.n	800735c <ai_platform_inputs_get+0x280>
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 8007366:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800736a:	4b0f      	ldr	r3, [pc, #60]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 800736c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007370:	429a      	cmp	r2, r3
 8007372:	f43f aeee 	beq.w	8007152 <ai_platform_inputs_get+0x76>
 8007376:	e7fe      	b.n	8007376 <ai_platform_inputs_get+0x29a>
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <ai_platform_inputs_get+0x2c4>)
 800737a:	2301      	movs	r3, #1
 800737c:	6093      	str	r3, [r2, #8]
 800737e:	6893      	ldr	r3, [r2, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1fc      	bne.n	800737e <ai_platform_inputs_get+0x2a2>
 8007384:	4b07      	ldr	r3, [pc, #28]	; (80073a4 <ai_platform_inputs_get+0x2c8>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <ai_platform_inputs_get+0x2cc>)
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	f43f aee0 	beq.w	8007152 <ai_platform_inputs_get+0x76>
 8007392:	e7fe      	b.n	8007392 <ai_platform_inputs_get+0x2b6>
 8007394:	a1c00100 	.word	0xa1c00100
 8007398:	e0042000 	.word	0xe0042000
 800739c:	5c001000 	.word	0x5c001000
 80073a0:	40023000 	.word	0x40023000
 80073a4:	f407a5c2 	.word	0xf407a5c2
 80073a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80073ac:	58024000 	.word	0x58024000
 80073b0:	4a0d      	ldr	r2, [pc, #52]	; (80073e8 <ai_platform_inputs_get+0x30c>)
 80073b2:	2301      	movs	r3, #1
 80073b4:	6093      	str	r3, [r2, #8]
 80073b6:	6893      	ldr	r3, [r2, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1fc      	bne.n	80073b6 <ai_platform_inputs_get+0x2da>
 80073bc:	490b      	ldr	r1, [pc, #44]	; (80073ec <ai_platform_inputs_get+0x310>)
 80073be:	4b0c      	ldr	r3, [pc, #48]	; (80073f0 <ai_platform_inputs_get+0x314>)
 80073c0:	6011      	str	r1, [r2, #0]
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	f43f af76 	beq.w	80072b6 <ai_platform_inputs_get+0x1da>
 80073ca:	e7fe      	b.n	80073ca <ai_platform_inputs_get+0x2ee>
 80073cc:	4a06      	ldr	r2, [pc, #24]	; (80073e8 <ai_platform_inputs_get+0x30c>)
 80073ce:	2301      	movs	r3, #1
 80073d0:	6093      	str	r3, [r2, #8]
 80073d2:	6893      	ldr	r3, [r2, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1fc      	bne.n	80073d2 <ai_platform_inputs_get+0x2f6>
 80073d8:	4b04      	ldr	r3, [pc, #16]	; (80073ec <ai_platform_inputs_get+0x310>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	4b04      	ldr	r3, [pc, #16]	; (80073f0 <ai_platform_inputs_get+0x314>)
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	f43f aeb6 	beq.w	8007152 <ai_platform_inputs_get+0x76>
 80073e6:	e7fe      	b.n	80073e6 <ai_platform_inputs_get+0x30a>
 80073e8:	40023000 	.word	0x40023000
 80073ec:	f407a5c2 	.word	0xf407a5c2
 80073f0:	b5e8b5cd 	.word	0xb5e8b5cd

080073f4 <ai_platform_outputs_get>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	b085      	sub	sp, #20
 80073fa:	9102      	str	r1, [sp, #8]
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f000 808f 	beq.w	8007520 <ai_platform_outputs_get+0x12c>
 8007402:	4ba8      	ldr	r3, [pc, #672]	; (80076a4 <ai_platform_outputs_get+0x2b0>)
 8007404:	4681      	mov	r9, r0
 8007406:	6802      	ldr	r2, [r0, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	f040 8089 	bne.w	8007520 <ai_platform_outputs_get+0x12c>
 800740e:	f7ff fdab 	bl	8006f68 <_ai_platform_acquire_crc>
 8007412:	4ba5      	ldr	r3, [pc, #660]	; (80076a8 <ai_platform_outputs_get+0x2b4>)
 8007414:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800741e:	189a      	adds	r2, r3, r2
 8007420:	2a01      	cmp	r2, #1
 8007422:	f240 80d6 	bls.w	80075d2 <ai_platform_outputs_get+0x1de>
 8007426:	f240 4249 	movw	r2, #1097	; 0x449
 800742a:	4293      	cmp	r3, r2
 800742c:	f000 80d1 	beq.w	80075d2 <ai_platform_outputs_get+0x1de>
 8007430:	4a9e      	ldr	r2, [pc, #632]	; (80076ac <ai_platform_outputs_get+0x2b8>)
 8007432:	6813      	ldr	r3, [r2, #0]
 8007434:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007438:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800743c:	f000 80d8 	beq.w	80075f0 <ai_platform_outputs_get+0x1fc>
 8007440:	6813      	ldr	r3, [r2, #0]
 8007442:	f240 4183 	movw	r1, #1155	; 0x483
 8007446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744a:	428b      	cmp	r3, r1
 800744c:	f000 8109 	beq.w	8007662 <ai_platform_outputs_get+0x26e>
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007456:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800745a:	f000 813f 	beq.w	80076dc <ai_platform_outputs_get+0x2e8>
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 810e 	beq.w	8007686 <ai_platform_outputs_get+0x292>
 800746a:	f7ff fd7f 	bl	8006f6c <_ai_platform_release_crc>
 800746e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8007472:	2b01      	cmp	r3, #1
 8007474:	f240 80db 	bls.w	800762e <ai_platform_outputs_get+0x23a>
 8007478:	2100      	movs	r1, #0
 800747a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800747e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007482:	460d      	mov	r5, r1
 8007484:	4689      	mov	r9, r1
 8007486:	e016      	b.n	80074b6 <ai_platform_outputs_get+0xc2>
 8007488:	9a01      	ldr	r2, [sp, #4]
 800748a:	2301      	movs	r3, #1
 800748c:	f848 3002 	str.w	r3, [r8, r2]
 8007490:	69b2      	ldr	r2, [r6, #24]
 8007492:	f04f 0301 	mov.w	r3, #1
 8007496:	6856      	ldr	r6, [r2, #4]
 8007498:	3501      	adds	r5, #1
 800749a:	f109 091c 	add.w	r9, r9, #28
 800749e:	7523      	strb	r3, [r4, #20]
 80074a0:	2300      	movs	r3, #0
 80074a2:	6962      	ldr	r2, [r4, #20]
 80074a4:	60a7      	str	r7, [r4, #8]
 80074a6:	f36b 221f 	bfi	r2, fp, #8, #24
 80074aa:	6126      	str	r6, [r4, #16]
 80074ac:	61a1      	str	r1, [r4, #24]
 80074ae:	60e3      	str	r3, [r4, #12]
 80074b0:	6162      	str	r2, [r4, #20]
 80074b2:	e9c4 0c00 	strd	r0, ip, [r4]
 80074b6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80074ba:	b2ac      	uxth	r4, r5
 80074bc:	42ab      	cmp	r3, r5
 80074be:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80074c2:	9301      	str	r3, [sp, #4]
 80074c4:	f240 80a6 	bls.w	8007614 <ai_platform_outputs_get+0x220>
 80074c8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80a1 	beq.w	8007614 <ai_platform_outputs_get+0x220>
 80074d2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	f000 809c 	beq.w	8007614 <ai_platform_outputs_get+0x220>
 80074dc:	f8da 3014 	ldr.w	r3, [sl, #20]
 80074e0:	69b2      	ldr	r2, [r6, #24]
 80074e2:	68f1      	ldr	r1, [r6, #12]
 80074e4:	6810      	ldr	r0, [r2, #0]
 80074e6:	9100      	str	r1, [sp, #0]
 80074e8:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80074ec:	68b3      	ldr	r3, [r6, #8]
 80074ee:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80074f2:	444c      	add	r4, r9
 80074f4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80074f8:	f001 ffba 	bl	8009470 <ai_array_to_buffer_fmt>
 80074fc:	69b2      	ldr	r2, [r6, #24]
 80074fe:	9900      	ldr	r1, [sp, #0]
 8007500:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007504:	2f00      	cmp	r7, #0
 8007506:	d0c4      	beq.n	8007492 <ai_platform_outputs_get+0x9e>
 8007508:	2200      	movs	r2, #0
 800750a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800750e:	6832      	ldr	r2, [r6, #0]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	b112      	cbz	r2, 800751a <ai_platform_outputs_get+0x126>
 8007514:	8852      	ldrh	r2, [r2, #2]
 8007516:	2a00      	cmp	r2, #0
 8007518:	d1b6      	bne.n	8007488 <ai_platform_outputs_get+0x94>
 800751a:	69b2      	ldr	r2, [r6, #24]
 800751c:	2700      	movs	r7, #0
 800751e:	e7b8      	b.n	8007492 <ai_platform_outputs_get+0x9e>
 8007520:	f7ff fd22 	bl	8006f68 <_ai_platform_acquire_crc>
 8007524:	4b60      	ldr	r3, [pc, #384]	; (80076a8 <ai_platform_outputs_get+0x2b4>)
 8007526:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007530:	185a      	adds	r2, r3, r1
 8007532:	2a01      	cmp	r2, #1
 8007534:	d92a      	bls.n	800758c <ai_platform_outputs_get+0x198>
 8007536:	f240 4249 	movw	r2, #1097	; 0x449
 800753a:	4293      	cmp	r3, r2
 800753c:	d026      	beq.n	800758c <ai_platform_outputs_get+0x198>
 800753e:	4a5b      	ldr	r2, [pc, #364]	; (80076ac <ai_platform_outputs_get+0x2b8>)
 8007540:	6813      	ldr	r3, [r2, #0]
 8007542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007546:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800754a:	d02c      	beq.n	80075a6 <ai_platform_outputs_get+0x1b2>
 800754c:	6813      	ldr	r3, [r2, #0]
 800754e:	f240 4183 	movw	r1, #1155	; 0x483
 8007552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007556:	428b      	cmp	r3, r1
 8007558:	d072      	beq.n	8007640 <ai_platform_outputs_get+0x24c>
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007560:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007564:	f000 80ac 	beq.w	80076c0 <ai_platform_outputs_get+0x2cc>
 8007568:	6813      	ldr	r3, [r2, #0]
 800756a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800756e:	2b00      	cmp	r3, #0
 8007570:	d129      	bne.n	80075c6 <ai_platform_outputs_get+0x1d2>
 8007572:	4a4f      	ldr	r2, [pc, #316]	; (80076b0 <ai_platform_outputs_get+0x2bc>)
 8007574:	2301      	movs	r3, #1
 8007576:	6093      	str	r3, [r2, #8]
 8007578:	6893      	ldr	r3, [r2, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1fc      	bne.n	8007578 <ai_platform_outputs_get+0x184>
 800757e:	494d      	ldr	r1, [pc, #308]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 8007580:	4b4d      	ldr	r3, [pc, #308]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 8007582:	6011      	str	r1, [r2, #0]
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d01d      	beq.n	80075c6 <ai_platform_outputs_get+0x1d2>
 800758a:	e7fe      	b.n	800758a <ai_platform_outputs_get+0x196>
 800758c:	4a48      	ldr	r2, [pc, #288]	; (80076b0 <ai_platform_outputs_get+0x2bc>)
 800758e:	2301      	movs	r3, #1
 8007590:	6093      	str	r3, [r2, #8]
 8007592:	6893      	ldr	r3, [r2, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1fc      	bne.n	8007592 <ai_platform_outputs_get+0x19e>
 8007598:	4946      	ldr	r1, [pc, #280]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 800759a:	4b47      	ldr	r3, [pc, #284]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 800759c:	6011      	str	r1, [r2, #0]
 800759e:	6812      	ldr	r2, [r2, #0]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d010      	beq.n	80075c6 <ai_platform_outputs_get+0x1d2>
 80075a4:	e7fe      	b.n	80075a4 <ai_platform_outputs_get+0x1b0>
 80075a6:	4a45      	ldr	r2, [pc, #276]	; (80076bc <ai_platform_outputs_get+0x2c8>)
 80075a8:	2301      	movs	r3, #1
 80075aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1fb      	bne.n	80075ae <ai_platform_outputs_get+0x1ba>
 80075b6:	493f      	ldr	r1, [pc, #252]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 80075b8:	4b3f      	ldr	r3, [pc, #252]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 80075ba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80075be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d113      	bne.n	80075ee <ai_platform_outputs_get+0x1fa>
 80075c6:	f7ff fcd1 	bl	8006f6c <_ai_platform_release_crc>
 80075ca:	2000      	movs	r0, #0
 80075cc:	b005      	add	sp, #20
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	4a37      	ldr	r2, [pc, #220]	; (80076b0 <ai_platform_outputs_get+0x2bc>)
 80075d4:	2301      	movs	r3, #1
 80075d6:	6093      	str	r3, [r2, #8]
 80075d8:	6893      	ldr	r3, [r2, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1fc      	bne.n	80075d8 <ai_platform_outputs_get+0x1e4>
 80075de:	4b35      	ldr	r3, [pc, #212]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	4b35      	ldr	r3, [pc, #212]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	f43f af3f 	beq.w	800746a <ai_platform_outputs_get+0x76>
 80075ec:	e7fe      	b.n	80075ec <ai_platform_outputs_get+0x1f8>
 80075ee:	e7fe      	b.n	80075ee <ai_platform_outputs_get+0x1fa>
 80075f0:	4a32      	ldr	r2, [pc, #200]	; (80076bc <ai_platform_outputs_get+0x2c8>)
 80075f2:	2301      	movs	r3, #1
 80075f4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075f8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1fb      	bne.n	80075f8 <ai_platform_outputs_get+0x204>
 8007600:	4b2c      	ldr	r3, [pc, #176]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 8007602:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007606:	4b2c      	ldr	r3, [pc, #176]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 8007608:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800760c:	429a      	cmp	r2, r3
 800760e:	f43f af2c 	beq.w	800746a <ai_platform_outputs_get+0x76>
 8007612:	e7fe      	b.n	8007612 <ai_platform_outputs_get+0x21e>
 8007614:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007618:	b14c      	cbz	r4, 800762e <ai_platform_outputs_get+0x23a>
 800761a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800761e:	6858      	ldr	r0, [r3, #4]
 8007620:	9b02      	ldr	r3, [sp, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0d2      	beq.n	80075cc <ai_platform_outputs_get+0x1d8>
 8007626:	801c      	strh	r4, [r3, #0]
 8007628:	b005      	add	sp, #20
 800762a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762e:	2400      	movs	r4, #0
 8007630:	2218      	movs	r2, #24
 8007632:	2111      	movs	r1, #17
 8007634:	f109 0010 	add.w	r0, r9, #16
 8007638:	f000 ffe4 	bl	8008604 <core_set_error>
 800763c:	4620      	mov	r0, r4
 800763e:	e7ef      	b.n	8007620 <ai_platform_outputs_get+0x22c>
 8007640:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <ai_platform_outputs_get+0x2c8>)
 8007642:	2301      	movs	r3, #1
 8007644:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007648:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1fb      	bne.n	8007648 <ai_platform_outputs_get+0x254>
 8007650:	4918      	ldr	r1, [pc, #96]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 8007652:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 8007654:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007658:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800765c:	429a      	cmp	r2, r3
 800765e:	d0b2      	beq.n	80075c6 <ai_platform_outputs_get+0x1d2>
 8007660:	e7fe      	b.n	8007660 <ai_platform_outputs_get+0x26c>
 8007662:	4a16      	ldr	r2, [pc, #88]	; (80076bc <ai_platform_outputs_get+0x2c8>)
 8007664:	2301      	movs	r3, #1
 8007666:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800766a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1fb      	bne.n	800766a <ai_platform_outputs_get+0x276>
 8007672:	4b10      	ldr	r3, [pc, #64]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 8007674:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 800767a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800767e:	429a      	cmp	r2, r3
 8007680:	f43f aef3 	beq.w	800746a <ai_platform_outputs_get+0x76>
 8007684:	e7fe      	b.n	8007684 <ai_platform_outputs_get+0x290>
 8007686:	4a0a      	ldr	r2, [pc, #40]	; (80076b0 <ai_platform_outputs_get+0x2bc>)
 8007688:	2301      	movs	r3, #1
 800768a:	6093      	str	r3, [r2, #8]
 800768c:	6893      	ldr	r3, [r2, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1fc      	bne.n	800768c <ai_platform_outputs_get+0x298>
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <ai_platform_outputs_get+0x2c0>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <ai_platform_outputs_get+0x2c4>)
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	f43f aee5 	beq.w	800746a <ai_platform_outputs_get+0x76>
 80076a0:	e7fe      	b.n	80076a0 <ai_platform_outputs_get+0x2ac>
 80076a2:	bf00      	nop
 80076a4:	a1c00100 	.word	0xa1c00100
 80076a8:	e0042000 	.word	0xe0042000
 80076ac:	5c001000 	.word	0x5c001000
 80076b0:	40023000 	.word	0x40023000
 80076b4:	f407a5c2 	.word	0xf407a5c2
 80076b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80076bc:	58024000 	.word	0x58024000
 80076c0:	4a0d      	ldr	r2, [pc, #52]	; (80076f8 <ai_platform_outputs_get+0x304>)
 80076c2:	2301      	movs	r3, #1
 80076c4:	6093      	str	r3, [r2, #8]
 80076c6:	6893      	ldr	r3, [r2, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1fc      	bne.n	80076c6 <ai_platform_outputs_get+0x2d2>
 80076cc:	490b      	ldr	r1, [pc, #44]	; (80076fc <ai_platform_outputs_get+0x308>)
 80076ce:	4b0c      	ldr	r3, [pc, #48]	; (8007700 <ai_platform_outputs_get+0x30c>)
 80076d0:	6011      	str	r1, [r2, #0]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	f43f af76 	beq.w	80075c6 <ai_platform_outputs_get+0x1d2>
 80076da:	e7fe      	b.n	80076da <ai_platform_outputs_get+0x2e6>
 80076dc:	4a06      	ldr	r2, [pc, #24]	; (80076f8 <ai_platform_outputs_get+0x304>)
 80076de:	2301      	movs	r3, #1
 80076e0:	6093      	str	r3, [r2, #8]
 80076e2:	6893      	ldr	r3, [r2, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1fc      	bne.n	80076e2 <ai_platform_outputs_get+0x2ee>
 80076e8:	4b04      	ldr	r3, [pc, #16]	; (80076fc <ai_platform_outputs_get+0x308>)
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	4b04      	ldr	r3, [pc, #16]	; (8007700 <ai_platform_outputs_get+0x30c>)
 80076ee:	6812      	ldr	r2, [r2, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	f43f aeba 	beq.w	800746a <ai_platform_outputs_get+0x76>
 80076f6:	e7fe      	b.n	80076f6 <ai_platform_outputs_get+0x302>
 80076f8:	40023000 	.word	0x40023000
 80076fc:	f407a5c2 	.word	0xf407a5c2
 8007700:	b5e8b5cd 	.word	0xb5e8b5cd

08007704 <ai_platform_network_create>:
 8007704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007708:	b083      	sub	sp, #12
 800770a:	4604      	mov	r4, r0
 800770c:	4615      	mov	r5, r2
 800770e:	461e      	mov	r6, r3
 8007710:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8007714:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8007718:	f7ff fc26 	bl	8006f68 <_ai_platform_acquire_crc>
 800771c:	2800      	cmp	r0, #0
 800771e:	f000 80bd 	beq.w	800789c <ai_platform_network_create+0x198>
 8007722:	4ba5      	ldr	r3, [pc, #660]	; (80079b8 <ai_platform_network_create+0x2b4>)
 8007724:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8007728:	4601      	mov	r1, r0
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007730:	eb03 020c 	add.w	r2, r3, ip
 8007734:	2a01      	cmp	r2, #1
 8007736:	f240 80a8 	bls.w	800788a <ai_platform_network_create+0x186>
 800773a:	f240 4249 	movw	r2, #1097	; 0x449
 800773e:	4293      	cmp	r3, r2
 8007740:	f000 80a3 	beq.w	800788a <ai_platform_network_create+0x186>
 8007744:	4a9d      	ldr	r2, [pc, #628]	; (80079bc <ai_platform_network_create+0x2b8>)
 8007746:	6813      	ldr	r3, [r2, #0]
 8007748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800774c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007750:	f000 80b9 	beq.w	80078c6 <ai_platform_network_create+0x1c2>
 8007754:	6813      	ldr	r3, [r2, #0]
 8007756:	f240 4c83 	movw	ip, #1155	; 0x483
 800775a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800775e:	4563      	cmp	r3, ip
 8007760:	f000 80a1 	beq.w	80078a6 <ai_platform_network_create+0x1a2>
 8007764:	6813      	ldr	r3, [r2, #0]
 8007766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800776a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800776e:	f000 8153 	beq.w	8007a18 <ai_platform_network_create+0x314>
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007778:	2b00      	cmp	r3, #0
 800777a:	f040 808d 	bne.w	8007898 <ai_platform_network_create+0x194>
 800777e:	4a90      	ldr	r2, [pc, #576]	; (80079c0 <ai_platform_network_create+0x2bc>)
 8007780:	2318      	movs	r3, #24
 8007782:	6093      	str	r3, [r2, #8]
 8007784:	6893      	ldr	r3, [r2, #8]
 8007786:	2b18      	cmp	r3, #24
 8007788:	f040 8086 	bne.w	8007898 <ai_platform_network_create+0x194>
 800778c:	2301      	movs	r3, #1
 800778e:	6093      	str	r3, [r2, #8]
 8007790:	6893      	ldr	r3, [r2, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1fc      	bne.n	8007790 <ai_platform_network_create+0x8c>
 8007796:	4608      	mov	r0, r1
 8007798:	f7ff fbe8 	bl	8006f6c <_ai_platform_release_crc>
 800779c:	f7ff fbe4 	bl	8006f68 <_ai_platform_acquire_crc>
 80077a0:	4b85      	ldr	r3, [pc, #532]	; (80079b8 <ai_platform_network_create+0x2b4>)
 80077a2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077ac:	189a      	adds	r2, r3, r2
 80077ae:	2a01      	cmp	r2, #1
 80077b0:	f240 809f 	bls.w	80078f2 <ai_platform_network_create+0x1ee>
 80077b4:	f240 4249 	movw	r2, #1097	; 0x449
 80077b8:	4293      	cmp	r3, r2
 80077ba:	f000 809a 	beq.w	80078f2 <ai_platform_network_create+0x1ee>
 80077be:	4a7f      	ldr	r2, [pc, #508]	; (80079bc <ai_platform_network_create+0x2b8>)
 80077c0:	6813      	ldr	r3, [r2, #0]
 80077c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077c6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80077ca:	f000 80a0 	beq.w	800790e <ai_platform_network_create+0x20a>
 80077ce:	6813      	ldr	r3, [r2, #0]
 80077d0:	f240 4183 	movw	r1, #1155	; 0x483
 80077d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077d8:	428b      	cmp	r3, r1
 80077da:	f000 80bf 	beq.w	800795c <ai_platform_network_create+0x258>
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077e4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80077e8:	f000 8123 	beq.w	8007a32 <ai_platform_network_create+0x32e>
 80077ec:	6813      	ldr	r3, [r2, #0]
 80077ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80c4 	beq.w	8007980 <ai_platform_network_create+0x27c>
 80077f8:	f7ff fbb8 	bl	8006f6c <_ai_platform_release_crc>
 80077fc:	2c00      	cmp	r4, #0
 80077fe:	f000 80aa 	beq.w	8007956 <ai_platform_network_create+0x252>
 8007802:	4b70      	ldr	r3, [pc, #448]	; (80079c4 <ai_platform_network_create+0x2c0>)
 8007804:	602b      	str	r3, [r5, #0]
 8007806:	6025      	str	r5, [r4, #0]
 8007808:	f000 fefa 	bl	8008600 <core_init>
 800780c:	2800      	cmp	r0, #0
 800780e:	f000 8090 	beq.w	8007932 <ai_platform_network_create+0x22e>
 8007812:	f7ff fba9 	bl	8006f68 <_ai_platform_acquire_crc>
 8007816:	4b68      	ldr	r3, [pc, #416]	; (80079b8 <ai_platform_network_create+0x2b4>)
 8007818:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007822:	185a      	adds	r2, r3, r1
 8007824:	2a01      	cmp	r2, #1
 8007826:	f240 80b9 	bls.w	800799c <ai_platform_network_create+0x298>
 800782a:	f240 4249 	movw	r2, #1097	; 0x449
 800782e:	4293      	cmp	r3, r2
 8007830:	f000 80b4 	beq.w	800799c <ai_platform_network_create+0x298>
 8007834:	4a61      	ldr	r2, [pc, #388]	; (80079bc <ai_platform_network_create+0x2b8>)
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800783c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007840:	f000 80c8 	beq.w	80079d4 <ai_platform_network_create+0x2d0>
 8007844:	6813      	ldr	r3, [r2, #0]
 8007846:	f240 4183 	movw	r1, #1155	; 0x483
 800784a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800784e:	428b      	cmp	r3, r1
 8007850:	f000 8107 	beq.w	8007a62 <ai_platform_network_create+0x35e>
 8007854:	6813      	ldr	r3, [r2, #0]
 8007856:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800785a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800785e:	f000 8111 	beq.w	8007a84 <ai_platform_network_create+0x380>
 8007862:	6813      	ldr	r3, [r2, #0]
 8007864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007868:	2b00      	cmp	r3, #0
 800786a:	f040 80c3 	bne.w	80079f4 <ai_platform_network_create+0x2f0>
 800786e:	4b54      	ldr	r3, [pc, #336]	; (80079c0 <ai_platform_network_create+0x2bc>)
 8007870:	2201      	movs	r2, #1
 8007872:	609a      	str	r2, [r3, #8]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	2a00      	cmp	r2, #0
 8007878:	d1fc      	bne.n	8007874 <ai_platform_network_create+0x170>
 800787a:	4a53      	ldr	r2, [pc, #332]	; (80079c8 <ai_platform_network_create+0x2c4>)
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b52      	ldr	r3, [pc, #328]	; (80079cc <ai_platform_network_create+0x2c8>)
 8007882:	429a      	cmp	r2, r3
 8007884:	f000 80b6 	beq.w	80079f4 <ai_platform_network_create+0x2f0>
 8007888:	e7fe      	b.n	8007888 <ai_platform_network_create+0x184>
 800788a:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <ai_platform_network_create+0x2bc>)
 800788c:	2218      	movs	r2, #24
 800788e:	609a      	str	r2, [r3, #8]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	2a18      	cmp	r2, #24
 8007894:	d027      	beq.n	80078e6 <ai_platform_network_create+0x1e2>
 8007896:	4608      	mov	r0, r1
 8007898:	f7ff fb68 	bl	8006f6c <_ai_platform_release_crc>
 800789c:	f244 1033 	movw	r0, #16691	; 0x4133
 80078a0:	b003      	add	sp, #12
 80078a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078a6:	4a4a      	ldr	r2, [pc, #296]	; (80079d0 <ai_platform_network_create+0x2cc>)
 80078a8:	2318      	movs	r3, #24
 80078aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078b2:	2b18      	cmp	r3, #24
 80078b4:	d1f0      	bne.n	8007898 <ai_platform_network_create+0x194>
 80078b6:	2301      	movs	r3, #1
 80078b8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078bc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1fb      	bne.n	80078bc <ai_platform_network_create+0x1b8>
 80078c4:	e767      	b.n	8007796 <ai_platform_network_create+0x92>
 80078c6:	4a42      	ldr	r2, [pc, #264]	; (80079d0 <ai_platform_network_create+0x2cc>)
 80078c8:	2318      	movs	r3, #24
 80078ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078d2:	2b18      	cmp	r3, #24
 80078d4:	d1e0      	bne.n	8007898 <ai_platform_network_create+0x194>
 80078d6:	2301      	movs	r3, #1
 80078d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80078dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1fb      	bne.n	80078dc <ai_platform_network_create+0x1d8>
 80078e4:	e757      	b.n	8007796 <ai_platform_network_create+0x92>
 80078e6:	2201      	movs	r2, #1
 80078e8:	609a      	str	r2, [r3, #8]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	d1fc      	bne.n	80078ea <ai_platform_network_create+0x1e6>
 80078f0:	e751      	b.n	8007796 <ai_platform_network_create+0x92>
 80078f2:	4a33      	ldr	r2, [pc, #204]	; (80079c0 <ai_platform_network_create+0x2bc>)
 80078f4:	2301      	movs	r3, #1
 80078f6:	6093      	str	r3, [r2, #8]
 80078f8:	6891      	ldr	r1, [r2, #8]
 80078fa:	2900      	cmp	r1, #0
 80078fc:	d1fc      	bne.n	80078f8 <ai_platform_network_create+0x1f4>
 80078fe:	4b32      	ldr	r3, [pc, #200]	; (80079c8 <ai_platform_network_create+0x2c4>)
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	4b32      	ldr	r3, [pc, #200]	; (80079cc <ai_platform_network_create+0x2c8>)
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	429a      	cmp	r2, r3
 8007908:	f43f af76 	beq.w	80077f8 <ai_platform_network_create+0xf4>
 800790c:	e7fe      	b.n	800790c <ai_platform_network_create+0x208>
 800790e:	4a30      	ldr	r2, [pc, #192]	; (80079d0 <ai_platform_network_create+0x2cc>)
 8007910:	2301      	movs	r3, #1
 8007912:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007916:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1fb      	bne.n	8007916 <ai_platform_network_create+0x212>
 800791e:	4b2a      	ldr	r3, [pc, #168]	; (80079c8 <ai_platform_network_create+0x2c4>)
 8007920:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007924:	4b29      	ldr	r3, [pc, #164]	; (80079cc <ai_platform_network_create+0x2c8>)
 8007926:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800792a:	429a      	cmp	r2, r3
 800792c:	f43f af64 	beq.w	80077f8 <ai_platform_network_create+0xf4>
 8007930:	e7fe      	b.n	8007930 <ai_platform_network_create+0x22c>
 8007932:	f04f 0930 	mov.w	r9, #48	; 0x30
 8007936:	2300      	movs	r3, #0
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	2410      	movs	r4, #16
 800793c:	4642      	mov	r2, r8
 800793e:	4639      	mov	r1, r7
 8007940:	4630      	mov	r0, r6
 8007942:	f001 fd79 	bl	8009438 <ai_version_get>
 8007946:	4603      	mov	r3, r0
 8007948:	2000      	movs	r0, #0
 800794a:	64ab      	str	r3, [r5, #72]	; 0x48
 800794c:	f369 0007 	bfi	r0, r9, #0, #8
 8007950:	f364 201f 	bfi	r0, r4, #8, #24
 8007954:	e7a4      	b.n	80078a0 <ai_platform_network_create+0x19c>
 8007956:	f241 0010 	movw	r0, #4112	; 0x1010
 800795a:	e7a1      	b.n	80078a0 <ai_platform_network_create+0x19c>
 800795c:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <ai_platform_network_create+0x2cc>)
 800795e:	2301      	movs	r3, #1
 8007960:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007964:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1fb      	bne.n	8007964 <ai_platform_network_create+0x260>
 800796c:	4b16      	ldr	r3, [pc, #88]	; (80079c8 <ai_platform_network_create+0x2c4>)
 800796e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007972:	4b16      	ldr	r3, [pc, #88]	; (80079cc <ai_platform_network_create+0x2c8>)
 8007974:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007978:	429a      	cmp	r2, r3
 800797a:	f43f af3d 	beq.w	80077f8 <ai_platform_network_create+0xf4>
 800797e:	e7fe      	b.n	800797e <ai_platform_network_create+0x27a>
 8007980:	4a0f      	ldr	r2, [pc, #60]	; (80079c0 <ai_platform_network_create+0x2bc>)
 8007982:	2301      	movs	r3, #1
 8007984:	6093      	str	r3, [r2, #8]
 8007986:	6893      	ldr	r3, [r2, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1fc      	bne.n	8007986 <ai_platform_network_create+0x282>
 800798c:	4b0e      	ldr	r3, [pc, #56]	; (80079c8 <ai_platform_network_create+0x2c4>)
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <ai_platform_network_create+0x2c8>)
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	f43f af2f 	beq.w	80077f8 <ai_platform_network_create+0xf4>
 800799a:	e7fe      	b.n	800799a <ai_platform_network_create+0x296>
 800799c:	4a08      	ldr	r2, [pc, #32]	; (80079c0 <ai_platform_network_create+0x2bc>)
 800799e:	2301      	movs	r3, #1
 80079a0:	6093      	str	r3, [r2, #8]
 80079a2:	6893      	ldr	r3, [r2, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1fc      	bne.n	80079a2 <ai_platform_network_create+0x29e>
 80079a8:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <ai_platform_network_create+0x2c4>)
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	4b07      	ldr	r3, [pc, #28]	; (80079cc <ai_platform_network_create+0x2c8>)
 80079ae:	6812      	ldr	r2, [r2, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d01f      	beq.n	80079f4 <ai_platform_network_create+0x2f0>
 80079b4:	e7fe      	b.n	80079b4 <ai_platform_network_create+0x2b0>
 80079b6:	bf00      	nop
 80079b8:	e0042000 	.word	0xe0042000
 80079bc:	5c001000 	.word	0x5c001000
 80079c0:	40023000 	.word	0x40023000
 80079c4:	a1c00100 	.word	0xa1c00100
 80079c8:	f407a5c2 	.word	0xf407a5c2
 80079cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80079d0:	58024000 	.word	0x58024000
 80079d4:	4a33      	ldr	r2, [pc, #204]	; (8007aa4 <ai_platform_network_create+0x3a0>)
 80079d6:	2301      	movs	r3, #1
 80079d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80079dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1fb      	bne.n	80079dc <ai_platform_network_create+0x2d8>
 80079e4:	4b30      	ldr	r3, [pc, #192]	; (8007aa8 <ai_platform_network_create+0x3a4>)
 80079e6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80079ea:	4b30      	ldr	r3, [pc, #192]	; (8007aac <ai_platform_network_create+0x3a8>)
 80079ec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d12c      	bne.n	8007a4e <ai_platform_network_create+0x34a>
 80079f4:	f7ff faba 	bl	8006f6c <_ai_platform_release_crc>
 80079f8:	2200      	movs	r2, #0
 80079fa:	4639      	mov	r1, r7
 80079fc:	4630      	mov	r0, r6
 80079fe:	f001 fd1b 	bl	8009438 <ai_version_get>
 8007a02:	4681      	mov	r9, r0
 8007a04:	2200      	movs	r2, #0
 8007a06:	2105      	movs	r1, #5
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f001 fd15 	bl	8009438 <ai_version_get>
 8007a0e:	4581      	cmp	r9, r0
 8007a10:	d01e      	beq.n	8007a50 <ai_platform_network_create+0x34c>
 8007a12:	f04f 0901 	mov.w	r9, #1
 8007a16:	e78e      	b.n	8007936 <ai_platform_network_create+0x232>
 8007a18:	4b25      	ldr	r3, [pc, #148]	; (8007ab0 <ai_platform_network_create+0x3ac>)
 8007a1a:	2218      	movs	r2, #24
 8007a1c:	609a      	str	r2, [r3, #8]
 8007a1e:	689a      	ldr	r2, [r3, #8]
 8007a20:	2a18      	cmp	r2, #24
 8007a22:	f47f af39 	bne.w	8007898 <ai_platform_network_create+0x194>
 8007a26:	2201      	movs	r2, #1
 8007a28:	609a      	str	r2, [r3, #8]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	d1fc      	bne.n	8007a2a <ai_platform_network_create+0x326>
 8007a30:	e6b1      	b.n	8007796 <ai_platform_network_create+0x92>
 8007a32:	4a1f      	ldr	r2, [pc, #124]	; (8007ab0 <ai_platform_network_create+0x3ac>)
 8007a34:	2301      	movs	r3, #1
 8007a36:	6093      	str	r3, [r2, #8]
 8007a38:	6893      	ldr	r3, [r2, #8]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1fc      	bne.n	8007a38 <ai_platform_network_create+0x334>
 8007a3e:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <ai_platform_network_create+0x3a4>)
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <ai_platform_network_create+0x3a8>)
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	f43f aed6 	beq.w	80077f8 <ai_platform_network_create+0xf4>
 8007a4c:	e7fe      	b.n	8007a4c <ai_platform_network_create+0x348>
 8007a4e:	e7fe      	b.n	8007a4e <ai_platform_network_create+0x34a>
 8007a50:	4b18      	ldr	r3, [pc, #96]	; (8007ab4 <ai_platform_network_create+0x3b0>)
 8007a52:	a801      	add	r0, sp, #4
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	f001 fb35 	bl	80090c4 <ai_check_custom_types>
 8007a5a:	b300      	cbz	r0, 8007a9e <ai_platform_network_create+0x39a>
 8007a5c:	2400      	movs	r4, #0
 8007a5e:	46a1      	mov	r9, r4
 8007a60:	e76c      	b.n	800793c <ai_platform_network_create+0x238>
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <ai_platform_network_create+0x3a0>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8007a6a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d1fb      	bne.n	8007a6a <ai_platform_network_create+0x366>
 8007a72:	4a0d      	ldr	r2, [pc, #52]	; (8007aa8 <ai_platform_network_create+0x3a4>)
 8007a74:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007a78:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <ai_platform_network_create+0x3a8>)
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d0b8      	beq.n	80079f4 <ai_platform_network_create+0x2f0>
 8007a82:	e7fe      	b.n	8007a82 <ai_platform_network_create+0x37e>
 8007a84:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <ai_platform_network_create+0x3ac>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	609a      	str	r2, [r3, #8]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d1fc      	bne.n	8007a8a <ai_platform_network_create+0x386>
 8007a90:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <ai_platform_network_create+0x3a4>)
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <ai_platform_network_create+0x3a8>)
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d0ab      	beq.n	80079f4 <ai_platform_network_create+0x2f0>
 8007a9c:	e7fe      	b.n	8007a9c <ai_platform_network_create+0x398>
 8007a9e:	f04f 0902 	mov.w	r9, #2
 8007aa2:	e748      	b.n	8007936 <ai_platform_network_create+0x232>
 8007aa4:	58024000 	.word	0x58024000
 8007aa8:	f407a5c2 	.word	0xf407a5c2
 8007aac:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ab0:	40023000 	.word	0x40023000
 8007ab4:	84048403 	.word	0x84048403

08007ab8 <ai_platform_network_init>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d052      	beq.n	8007b66 <ai_platform_network_init+0xae>
 8007ac0:	4bab      	ldr	r3, [pc, #684]	; (8007d70 <ai_platform_network_init+0x2b8>)
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	6802      	ldr	r2, [r0, #0]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d14d      	bne.n	8007b66 <ai_platform_network_init+0xae>
 8007aca:	460d      	mov	r5, r1
 8007acc:	f7ff fa4c 	bl	8006f68 <_ai_platform_acquire_crc>
 8007ad0:	4ba8      	ldr	r3, [pc, #672]	; (8007d74 <ai_platform_network_init+0x2bc>)
 8007ad2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007adc:	189a      	adds	r2, r3, r2
 8007ade:	2a01      	cmp	r2, #1
 8007ae0:	f240 809b 	bls.w	8007c1a <ai_platform_network_init+0x162>
 8007ae4:	f240 4249 	movw	r2, #1097	; 0x449
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	f000 8096 	beq.w	8007c1a <ai_platform_network_init+0x162>
 8007aee:	4aa2      	ldr	r2, [pc, #648]	; (8007d78 <ai_platform_network_init+0x2c0>)
 8007af0:	6813      	ldr	r3, [r2, #0]
 8007af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007af6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007afa:	f000 809d 	beq.w	8007c38 <ai_platform_network_init+0x180>
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	f240 4183 	movw	r1, #1155	; 0x483
 8007b04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	f000 80e4 	beq.w	8007cd6 <ai_platform_network_init+0x21e>
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b14:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007b18:	f000 811b 	beq.w	8007d52 <ai_platform_network_init+0x29a>
 8007b1c:	6813      	ldr	r3, [r2, #0]
 8007b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80f9 	beq.w	8007d1a <ai_platform_network_init+0x262>
 8007b28:	f7ff fa20 	bl	8006f6c <_ai_platform_release_crc>
 8007b2c:	2d00      	cmp	r5, #0
 8007b2e:	f000 8147 	beq.w	8007dc0 <ai_platform_network_init+0x308>
 8007b32:	4b92      	ldr	r3, [pc, #584]	; (8007d7c <ai_platform_network_init+0x2c4>)
 8007b34:	682a      	ldr	r2, [r5, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	f040 8090 	bne.w	8007c5c <ai_platform_network_init+0x1a4>
 8007b3c:	692b      	ldr	r3, [r5, #16]
 8007b3e:	89ae      	ldrh	r6, [r5, #12]
 8007b40:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8007b44:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8007b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b4a:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8007b4e:	2303      	movs	r3, #3
 8007b50:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007b52:	4626      	mov	r6, r4
 8007b54:	4620      	mov	r0, r4
 8007b56:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8007b5a:	60e3      	str	r3, [r4, #12]
 8007b5c:	f001 fada 	bl	8009114 <ai_layers_init_all>
 8007b60:	4630      	mov	r0, r6
 8007b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b66:	f7ff f9ff 	bl	8006f68 <_ai_platform_acquire_crc>
 8007b6a:	4b82      	ldr	r3, [pc, #520]	; (8007d74 <ai_platform_network_init+0x2bc>)
 8007b6c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b76:	185a      	adds	r2, r3, r1
 8007b78:	2a01      	cmp	r2, #1
 8007b7a:	d92b      	bls.n	8007bd4 <ai_platform_network_init+0x11c>
 8007b7c:	f240 4249 	movw	r2, #1097	; 0x449
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d027      	beq.n	8007bd4 <ai_platform_network_init+0x11c>
 8007b84:	4a7c      	ldr	r2, [pc, #496]	; (8007d78 <ai_platform_network_init+0x2c0>)
 8007b86:	6813      	ldr	r3, [r2, #0]
 8007b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b8c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007b90:	d02d      	beq.n	8007bee <ai_platform_network_init+0x136>
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	f240 4183 	movw	r1, #1155	; 0x483
 8007b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b9c:	428b      	cmp	r3, r1
 8007b9e:	f000 8089 	beq.w	8007cb4 <ai_platform_network_init+0x1fc>
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ba8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007bac:	f000 80c3 	beq.w	8007d36 <ai_platform_network_init+0x27e>
 8007bb0:	6813      	ldr	r3, [r2, #0]
 8007bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d129      	bne.n	8007c0e <ai_platform_network_init+0x156>
 8007bba:	4a71      	ldr	r2, [pc, #452]	; (8007d80 <ai_platform_network_init+0x2c8>)
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	6093      	str	r3, [r2, #8]
 8007bc0:	6893      	ldr	r3, [r2, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1fc      	bne.n	8007bc0 <ai_platform_network_init+0x108>
 8007bc6:	496f      	ldr	r1, [pc, #444]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007bc8:	4b6f      	ldr	r3, [pc, #444]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007bca:	6011      	str	r1, [r2, #0]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d01d      	beq.n	8007c0e <ai_platform_network_init+0x156>
 8007bd2:	e7fe      	b.n	8007bd2 <ai_platform_network_init+0x11a>
 8007bd4:	4a6a      	ldr	r2, [pc, #424]	; (8007d80 <ai_platform_network_init+0x2c8>)
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6093      	str	r3, [r2, #8]
 8007bda:	6893      	ldr	r3, [r2, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1fc      	bne.n	8007bda <ai_platform_network_init+0x122>
 8007be0:	4968      	ldr	r1, [pc, #416]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007be2:	4b69      	ldr	r3, [pc, #420]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d010      	beq.n	8007c0e <ai_platform_network_init+0x156>
 8007bec:	e7fe      	b.n	8007bec <ai_platform_network_init+0x134>
 8007bee:	4a67      	ldr	r2, [pc, #412]	; (8007d8c <ai_platform_network_init+0x2d4>)
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007bf6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1fb      	bne.n	8007bf6 <ai_platform_network_init+0x13e>
 8007bfe:	4961      	ldr	r1, [pc, #388]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007c00:	4b61      	ldr	r3, [pc, #388]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007c02:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007c06:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d113      	bne.n	8007c36 <ai_platform_network_init+0x17e>
 8007c0e:	2600      	movs	r6, #0
 8007c10:	f7ff f9ac 	bl	8006f6c <_ai_platform_release_crc>
 8007c14:	4630      	mov	r0, r6
 8007c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c1a:	4a59      	ldr	r2, [pc, #356]	; (8007d80 <ai_platform_network_init+0x2c8>)
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	6093      	str	r3, [r2, #8]
 8007c20:	6893      	ldr	r3, [r2, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1fc      	bne.n	8007c20 <ai_platform_network_init+0x168>
 8007c26:	4b57      	ldr	r3, [pc, #348]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	4b57      	ldr	r3, [pc, #348]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	f43f af7a 	beq.w	8007b28 <ai_platform_network_init+0x70>
 8007c34:	e7fe      	b.n	8007c34 <ai_platform_network_init+0x17c>
 8007c36:	e7fe      	b.n	8007c36 <ai_platform_network_init+0x17e>
 8007c38:	4a54      	ldr	r2, [pc, #336]	; (8007d8c <ai_platform_network_init+0x2d4>)
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007c40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1fb      	bne.n	8007c40 <ai_platform_network_init+0x188>
 8007c48:	4b4e      	ldr	r3, [pc, #312]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007c4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007c4e:	4b4e      	ldr	r3, [pc, #312]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007c50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007c54:	429a      	cmp	r2, r3
 8007c56:	f43f af67 	beq.w	8007b28 <ai_platform_network_init+0x70>
 8007c5a:	e7fe      	b.n	8007c5a <ai_platform_network_init+0x1a2>
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f105 081c 	add.w	r8, r5, #28
 8007c64:	686e      	ldr	r6, [r5, #4]
 8007c66:	f7ff f941 	bl	8006eec <ai_buffer_get_size>
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	4640      	mov	r0, r8
 8007c70:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8007c74:	f7ff f93a 	bl	8006eec <ai_buffer_get_size>
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	d13e      	bne.n	8007cfa <ai_platform_network_init+0x242>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	f000 808e 	beq.w	8007d9e <ai_platform_network_init+0x2e6>
 8007c82:	f1b9 0f00 	cmp.w	r9, #0
 8007c86:	f000 8094 	beq.w	8007db2 <ai_platform_network_init+0x2fa>
 8007c8a:	f04f 0c01 	mov.w	ip, #1
 8007c8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007c90:	2600      	movs	r6, #0
 8007c92:	83e7      	strh	r7, [r4, #30]
 8007c94:	4563      	cmp	r3, ip
 8007c96:	83a6      	strh	r6, [r4, #28]
 8007c98:	d37a      	bcc.n	8007d90 <ai_platform_network_init+0x2d8>
 8007c9a:	f1bc 0f00 	cmp.w	ip, #0
 8007c9e:	f000 809c 	beq.w	8007dda <ai_platform_network_init+0x322>
 8007ca2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007ca4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8007ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007caa:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007cae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007cb2:	e74c      	b.n	8007b4e <ai_platform_network_init+0x96>
 8007cb4:	4a35      	ldr	r2, [pc, #212]	; (8007d8c <ai_platform_network_init+0x2d4>)
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007cbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1fb      	bne.n	8007cbc <ai_platform_network_init+0x204>
 8007cc4:	492f      	ldr	r1, [pc, #188]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007cc6:	4b30      	ldr	r3, [pc, #192]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007cc8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007ccc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d09c      	beq.n	8007c0e <ai_platform_network_init+0x156>
 8007cd4:	e7fe      	b.n	8007cd4 <ai_platform_network_init+0x21c>
 8007cd6:	4a2d      	ldr	r2, [pc, #180]	; (8007d8c <ai_platform_network_init+0x2d4>)
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007cde:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1fb      	bne.n	8007cde <ai_platform_network_init+0x226>
 8007ce6:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007ce8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007cec:	4b26      	ldr	r3, [pc, #152]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007cee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	f43f af18 	beq.w	8007b28 <ai_platform_network_init+0x70>
 8007cf8:	e7fe      	b.n	8007cf8 <ai_platform_network_init+0x240>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d153      	bne.n	8007da6 <ai_platform_network_init+0x2ee>
 8007cfe:	4680      	mov	r8, r0
 8007d00:	4684      	mov	ip, r0
 8007d02:	2e00      	cmp	r6, #0
 8007d04:	d063      	beq.n	8007dce <ai_platform_network_init+0x316>
 8007d06:	8be6      	ldrh	r6, [r4, #30]
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	d168      	bne.n	8007dde <ai_platform_network_init+0x326>
 8007d0c:	2212      	movs	r2, #18
 8007d0e:	2116      	movs	r1, #22
 8007d10:	f104 0010 	add.w	r0, r4, #16
 8007d14:	f000 fc76 	bl	8008604 <core_set_error>
 8007d18:	e77c      	b.n	8007c14 <ai_platform_network_init+0x15c>
 8007d1a:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <ai_platform_network_init+0x2c8>)
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	6093      	str	r3, [r2, #8]
 8007d20:	6893      	ldr	r3, [r2, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1fc      	bne.n	8007d20 <ai_platform_network_init+0x268>
 8007d26:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007d2c:	6812      	ldr	r2, [r2, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	f43f aefa 	beq.w	8007b28 <ai_platform_network_init+0x70>
 8007d34:	e7fe      	b.n	8007d34 <ai_platform_network_init+0x27c>
 8007d36:	4a12      	ldr	r2, [pc, #72]	; (8007d80 <ai_platform_network_init+0x2c8>)
 8007d38:	2301      	movs	r3, #1
 8007d3a:	6093      	str	r3, [r2, #8]
 8007d3c:	6893      	ldr	r3, [r2, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1fc      	bne.n	8007d3c <ai_platform_network_init+0x284>
 8007d42:	4910      	ldr	r1, [pc, #64]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007d44:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007d46:	6011      	str	r1, [r2, #0]
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	f43f af5f 	beq.w	8007c0e <ai_platform_network_init+0x156>
 8007d50:	e7fe      	b.n	8007d50 <ai_platform_network_init+0x298>
 8007d52:	4a0b      	ldr	r2, [pc, #44]	; (8007d80 <ai_platform_network_init+0x2c8>)
 8007d54:	2301      	movs	r3, #1
 8007d56:	6093      	str	r3, [r2, #8]
 8007d58:	6893      	ldr	r3, [r2, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1fc      	bne.n	8007d58 <ai_platform_network_init+0x2a0>
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <ai_platform_network_init+0x2cc>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <ai_platform_network_init+0x2d0>)
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	f43f aede 	beq.w	8007b28 <ai_platform_network_init+0x70>
 8007d6c:	e7fe      	b.n	8007d6c <ai_platform_network_init+0x2b4>
 8007d6e:	bf00      	nop
 8007d70:	a1c00100 	.word	0xa1c00100
 8007d74:	e0042000 	.word	0xe0042000
 8007d78:	5c001000 	.word	0x5c001000
 8007d7c:	a1facade 	.word	0xa1facade
 8007d80:	40023000 	.word	0x40023000
 8007d84:	f407a5c2 	.word	0xf407a5c2
 8007d88:	b5e8b5cd 	.word	0xb5e8b5cd
 8007d8c:	58024000 	.word	0x58024000
 8007d90:	2213      	movs	r2, #19
 8007d92:	2116      	movs	r1, #22
 8007d94:	f104 0010 	add.w	r0, r4, #16
 8007d98:	f000 fc34 	bl	8008604 <core_set_error>
 8007d9c:	e73a      	b.n	8007c14 <ai_platform_network_init+0x15c>
 8007d9e:	4607      	mov	r7, r0
 8007da0:	4680      	mov	r8, r0
 8007da2:	4684      	mov	ip, r0
 8007da4:	e773      	b.n	8007c8e <ai_platform_network_init+0x1d6>
 8007da6:	f1b9 0f00 	cmp.w	r9, #0
 8007daa:	d002      	beq.n	8007db2 <ai_platform_network_init+0x2fa>
 8007dac:	f04f 0c01 	mov.w	ip, #1
 8007db0:	e7a7      	b.n	8007d02 <ai_platform_network_init+0x24a>
 8007db2:	2110      	movs	r1, #16
 8007db4:	2213      	movs	r2, #19
 8007db6:	2600      	movs	r6, #0
 8007db8:	1860      	adds	r0, r4, r1
 8007dba:	f000 fc23 	bl	8008604 <core_set_error>
 8007dbe:	e729      	b.n	8007c14 <ai_platform_network_init+0x15c>
 8007dc0:	2110      	movs	r1, #16
 8007dc2:	2211      	movs	r2, #17
 8007dc4:	462e      	mov	r6, r5
 8007dc6:	1860      	adds	r0, r4, r1
 8007dc8:	f000 fc1c 	bl	8008604 <core_set_error>
 8007dcc:	e722      	b.n	8007c14 <ai_platform_network_init+0x15c>
 8007dce:	2110      	movs	r1, #16
 8007dd0:	2212      	movs	r2, #18
 8007dd2:	1860      	adds	r0, r4, r1
 8007dd4:	f000 fc16 	bl	8008604 <core_set_error>
 8007dd8:	e71c      	b.n	8007c14 <ai_platform_network_init+0x15c>
 8007dda:	4666      	mov	r6, ip
 8007ddc:	e6b7      	b.n	8007b4e <ai_platform_network_init+0x96>
 8007dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007de0:	6a26      	ldr	r6, [r4, #32]
 8007de2:	2701      	movs	r7, #1
 8007de4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007dea:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007dee:	e74e      	b.n	8007c8e <ai_platform_network_init+0x1d6>

08007df0 <ai_platform_network_post_init>:
 8007df0:	b538      	push	{r3, r4, r5, lr}
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d04e      	beq.n	8007e94 <ai_platform_network_post_init+0xa4>
 8007df6:	4b8c      	ldr	r3, [pc, #560]	; (8008028 <ai_platform_network_post_init+0x238>)
 8007df8:	4604      	mov	r4, r0
 8007dfa:	6802      	ldr	r2, [r0, #0]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d149      	bne.n	8007e94 <ai_platform_network_post_init+0xa4>
 8007e00:	f7ff f8b2 	bl	8006f68 <_ai_platform_acquire_crc>
 8007e04:	4b89      	ldr	r3, [pc, #548]	; (800802c <ai_platform_network_post_init+0x23c>)
 8007e06:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e10:	189a      	adds	r2, r3, r2
 8007e12:	2a01      	cmp	r2, #1
 8007e14:	f240 8095 	bls.w	8007f42 <ai_platform_network_post_init+0x152>
 8007e18:	f240 4249 	movw	r2, #1097	; 0x449
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	f000 8090 	beq.w	8007f42 <ai_platform_network_post_init+0x152>
 8007e22:	4a83      	ldr	r2, [pc, #524]	; (8008030 <ai_platform_network_post_init+0x240>)
 8007e24:	6813      	ldr	r3, [r2, #0]
 8007e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e2a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007e2e:	f000 8096 	beq.w	8007f5e <ai_platform_network_post_init+0x16e>
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	f240 4183 	movw	r1, #1155	; 0x483
 8007e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e3c:	428b      	cmp	r3, r1
 8007e3e:	f000 80b8 	beq.w	8007fb2 <ai_platform_network_post_init+0x1c2>
 8007e42:	6813      	ldr	r3, [r2, #0]
 8007e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e48:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007e4c:	f000 80de 	beq.w	800800c <ai_platform_network_post_init+0x21c>
 8007e50:	6813      	ldr	r3, [r2, #0]
 8007e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80bd 	beq.w	8007fd6 <ai_platform_network_post_init+0x1e6>
 8007e5c:	f7ff f886 	bl	8006f6c <_ai_platform_release_crc>
 8007e60:	68e3      	ldr	r3, [r4, #12]
 8007e62:	f013 0502 	ands.w	r5, r3, #2
 8007e66:	f000 808c 	beq.w	8007f82 <ai_platform_network_post_init+0x192>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f001 f960 	bl	8009130 <ai_layers_post_init_all>
 8007e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007e72:	b16b      	cbz	r3, 8007e90 <ai_platform_network_post_init+0xa0>
 8007e74:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007e76:	e007      	b.n	8007e88 <ai_platform_network_post_init+0x98>
 8007e78:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8007e7c:	4798      	blx	r3
 8007e7e:	692b      	ldr	r3, [r5, #16]
 8007e80:	b133      	cbz	r3, 8007e90 <ai_platform_network_post_init+0xa0>
 8007e82:	42ab      	cmp	r3, r5
 8007e84:	461d      	mov	r5, r3
 8007e86:	d003      	beq.n	8007e90 <ai_platform_network_post_init+0xa0>
 8007e88:	4629      	mov	r1, r5
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	d1f3      	bne.n	8007e78 <ai_platform_network_post_init+0x88>
 8007e90:	2001      	movs	r0, #1
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	f7ff f868 	bl	8006f68 <_ai_platform_acquire_crc>
 8007e98:	4b64      	ldr	r3, [pc, #400]	; (800802c <ai_platform_network_post_init+0x23c>)
 8007e9a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ea4:	185a      	adds	r2, r3, r1
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	d92a      	bls.n	8007f00 <ai_platform_network_post_init+0x110>
 8007eaa:	f240 4249 	movw	r2, #1097	; 0x449
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d026      	beq.n	8007f00 <ai_platform_network_post_init+0x110>
 8007eb2:	4a5f      	ldr	r2, [pc, #380]	; (8008030 <ai_platform_network_post_init+0x240>)
 8007eb4:	6813      	ldr	r3, [r2, #0]
 8007eb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007ebe:	d02c      	beq.n	8007f1a <ai_platform_network_post_init+0x12a>
 8007ec0:	6813      	ldr	r3, [r2, #0]
 8007ec2:	f240 4183 	movw	r1, #1155	; 0x483
 8007ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007eca:	428b      	cmp	r3, r1
 8007ecc:	d060      	beq.n	8007f90 <ai_platform_network_post_init+0x1a0>
 8007ece:	6813      	ldr	r3, [r2, #0]
 8007ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ed4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007ed8:	f000 808b 	beq.w	8007ff2 <ai_platform_network_post_init+0x202>
 8007edc:	6813      	ldr	r3, [r2, #0]
 8007ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d129      	bne.n	8007f3a <ai_platform_network_post_init+0x14a>
 8007ee6:	4a53      	ldr	r2, [pc, #332]	; (8008034 <ai_platform_network_post_init+0x244>)
 8007ee8:	2301      	movs	r3, #1
 8007eea:	6093      	str	r3, [r2, #8]
 8007eec:	6893      	ldr	r3, [r2, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1fc      	bne.n	8007eec <ai_platform_network_post_init+0xfc>
 8007ef2:	4951      	ldr	r1, [pc, #324]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007ef4:	4b51      	ldr	r3, [pc, #324]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007ef6:	6011      	str	r1, [r2, #0]
 8007ef8:	6812      	ldr	r2, [r2, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d01d      	beq.n	8007f3a <ai_platform_network_post_init+0x14a>
 8007efe:	e7fe      	b.n	8007efe <ai_platform_network_post_init+0x10e>
 8007f00:	4a4c      	ldr	r2, [pc, #304]	; (8008034 <ai_platform_network_post_init+0x244>)
 8007f02:	2301      	movs	r3, #1
 8007f04:	6093      	str	r3, [r2, #8]
 8007f06:	6893      	ldr	r3, [r2, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1fc      	bne.n	8007f06 <ai_platform_network_post_init+0x116>
 8007f0c:	494a      	ldr	r1, [pc, #296]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007f0e:	4b4b      	ldr	r3, [pc, #300]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007f10:	6011      	str	r1, [r2, #0]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d010      	beq.n	8007f3a <ai_platform_network_post_init+0x14a>
 8007f18:	e7fe      	b.n	8007f18 <ai_platform_network_post_init+0x128>
 8007f1a:	4a49      	ldr	r2, [pc, #292]	; (8008040 <ai_platform_network_post_init+0x250>)
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1fb      	bne.n	8007f22 <ai_platform_network_post_init+0x132>
 8007f2a:	4943      	ldr	r1, [pc, #268]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007f2c:	4b43      	ldr	r3, [pc, #268]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007f2e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007f32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d110      	bne.n	8007f5c <ai_platform_network_post_init+0x16c>
 8007f3a:	f7ff f817 	bl	8006f6c <_ai_platform_release_crc>
 8007f3e:	2000      	movs	r0, #0
 8007f40:	bd38      	pop	{r3, r4, r5, pc}
 8007f42:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <ai_platform_network_post_init+0x244>)
 8007f44:	2301      	movs	r3, #1
 8007f46:	6093      	str	r3, [r2, #8]
 8007f48:	6893      	ldr	r3, [r2, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1fc      	bne.n	8007f48 <ai_platform_network_post_init+0x158>
 8007f4e:	493a      	ldr	r1, [pc, #232]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007f50:	4b3a      	ldr	r3, [pc, #232]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007f52:	6011      	str	r1, [r2, #0]
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d080      	beq.n	8007e5c <ai_platform_network_post_init+0x6c>
 8007f5a:	e7fe      	b.n	8007f5a <ai_platform_network_post_init+0x16a>
 8007f5c:	e7fe      	b.n	8007f5c <ai_platform_network_post_init+0x16c>
 8007f5e:	4a38      	ldr	r2, [pc, #224]	; (8008040 <ai_platform_network_post_init+0x250>)
 8007f60:	2301      	movs	r3, #1
 8007f62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1fb      	bne.n	8007f66 <ai_platform_network_post_init+0x176>
 8007f6e:	4932      	ldr	r1, [pc, #200]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007f70:	4b32      	ldr	r3, [pc, #200]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007f72:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007f76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	f43f af6e 	beq.w	8007e5c <ai_platform_network_post_init+0x6c>
 8007f80:	e7fe      	b.n	8007f80 <ai_platform_network_post_init+0x190>
 8007f82:	2210      	movs	r2, #16
 8007f84:	2111      	movs	r1, #17
 8007f86:	18a0      	adds	r0, r4, r2
 8007f88:	f000 fb3c 	bl	8008604 <core_set_error>
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	4a2b      	ldr	r2, [pc, #172]	; (8008040 <ai_platform_network_post_init+0x250>)
 8007f92:	2301      	movs	r3, #1
 8007f94:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007f98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1fb      	bne.n	8007f98 <ai_platform_network_post_init+0x1a8>
 8007fa0:	4925      	ldr	r1, [pc, #148]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007fa4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007fa8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d0c4      	beq.n	8007f3a <ai_platform_network_post_init+0x14a>
 8007fb0:	e7fe      	b.n	8007fb0 <ai_platform_network_post_init+0x1c0>
 8007fb2:	4a23      	ldr	r2, [pc, #140]	; (8008040 <ai_platform_network_post_init+0x250>)
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007fba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1fb      	bne.n	8007fba <ai_platform_network_post_init+0x1ca>
 8007fc2:	491d      	ldr	r1, [pc, #116]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007fc6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007fca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	f43f af44 	beq.w	8007e5c <ai_platform_network_post_init+0x6c>
 8007fd4:	e7fe      	b.n	8007fd4 <ai_platform_network_post_init+0x1e4>
 8007fd6:	4a17      	ldr	r2, [pc, #92]	; (8008034 <ai_platform_network_post_init+0x244>)
 8007fd8:	2301      	movs	r3, #1
 8007fda:	6093      	str	r3, [r2, #8]
 8007fdc:	6893      	ldr	r3, [r2, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1fc      	bne.n	8007fdc <ai_platform_network_post_init+0x1ec>
 8007fe2:	4915      	ldr	r1, [pc, #84]	; (8008038 <ai_platform_network_post_init+0x248>)
 8007fe4:	4b15      	ldr	r3, [pc, #84]	; (800803c <ai_platform_network_post_init+0x24c>)
 8007fe6:	6011      	str	r1, [r2, #0]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	f43f af36 	beq.w	8007e5c <ai_platform_network_post_init+0x6c>
 8007ff0:	e7fe      	b.n	8007ff0 <ai_platform_network_post_init+0x200>
 8007ff2:	4a10      	ldr	r2, [pc, #64]	; (8008034 <ai_platform_network_post_init+0x244>)
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	6093      	str	r3, [r2, #8]
 8007ff8:	6893      	ldr	r3, [r2, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d1fc      	bne.n	8007ff8 <ai_platform_network_post_init+0x208>
 8007ffe:	490e      	ldr	r1, [pc, #56]	; (8008038 <ai_platform_network_post_init+0x248>)
 8008000:	4b0e      	ldr	r3, [pc, #56]	; (800803c <ai_platform_network_post_init+0x24c>)
 8008002:	6011      	str	r1, [r2, #0]
 8008004:	6812      	ldr	r2, [r2, #0]
 8008006:	429a      	cmp	r2, r3
 8008008:	d097      	beq.n	8007f3a <ai_platform_network_post_init+0x14a>
 800800a:	e7fe      	b.n	800800a <ai_platform_network_post_init+0x21a>
 800800c:	4a09      	ldr	r2, [pc, #36]	; (8008034 <ai_platform_network_post_init+0x244>)
 800800e:	2301      	movs	r3, #1
 8008010:	6093      	str	r3, [r2, #8]
 8008012:	6893      	ldr	r3, [r2, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1fc      	bne.n	8008012 <ai_platform_network_post_init+0x222>
 8008018:	4907      	ldr	r1, [pc, #28]	; (8008038 <ai_platform_network_post_init+0x248>)
 800801a:	4b08      	ldr	r3, [pc, #32]	; (800803c <ai_platform_network_post_init+0x24c>)
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	6812      	ldr	r2, [r2, #0]
 8008020:	429a      	cmp	r2, r3
 8008022:	f43f af1b 	beq.w	8007e5c <ai_platform_network_post_init+0x6c>
 8008026:	e7fe      	b.n	8008026 <ai_platform_network_post_init+0x236>
 8008028:	a1c00100 	.word	0xa1c00100
 800802c:	e0042000 	.word	0xe0042000
 8008030:	5c001000 	.word	0x5c001000
 8008034:	40023000 	.word	0x40023000
 8008038:	f407a5c2 	.word	0xf407a5c2
 800803c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008040:	58024000 	.word	0x58024000

08008044 <ai_platform_network_process>:
 8008044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	b085      	sub	sp, #20
 800804a:	460e      	mov	r6, r1
 800804c:	4605      	mov	r5, r0
 800804e:	9201      	str	r2, [sp, #4]
 8008050:	b120      	cbz	r0, 800805c <ai_platform_network_process+0x18>
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <ai_platform_network_process+0xa0>)
 8008054:	6802      	ldr	r2, [r0, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	bf18      	it	ne
 800805a:	2500      	movne	r5, #0
 800805c:	f7fe ff84 	bl	8006f68 <_ai_platform_acquire_crc>
 8008060:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <ai_platform_network_process+0xa4>)
 8008062:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800806c:	185a      	adds	r2, r3, r1
 800806e:	2a01      	cmp	r2, #1
 8008070:	d92b      	bls.n	80080ca <ai_platform_network_process+0x86>
 8008072:	f240 4249 	movw	r2, #1097	; 0x449
 8008076:	4293      	cmp	r3, r2
 8008078:	d027      	beq.n	80080ca <ai_platform_network_process+0x86>
 800807a:	4a1c      	ldr	r2, [pc, #112]	; (80080ec <ai_platform_network_process+0xa8>)
 800807c:	6813      	ldr	r3, [r2, #0]
 800807e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008082:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008086:	d039      	beq.n	80080fc <ai_platform_network_process+0xb8>
 8008088:	6813      	ldr	r3, [r2, #0]
 800808a:	f240 4183 	movw	r1, #1155	; 0x483
 800808e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008092:	428b      	cmp	r3, r1
 8008094:	f000 819c 	beq.w	80083d0 <ai_platform_network_process+0x38c>
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800809e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80080a2:	f000 8179 	beq.w	8008398 <ai_platform_network_process+0x354>
 80080a6:	6813      	ldr	r3, [r2, #0]
 80080a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d136      	bne.n	800811e <ai_platform_network_process+0xda>
 80080b0:	4a0f      	ldr	r2, [pc, #60]	; (80080f0 <ai_platform_network_process+0xac>)
 80080b2:	2301      	movs	r3, #1
 80080b4:	6093      	str	r3, [r2, #8]
 80080b6:	6893      	ldr	r3, [r2, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1fc      	bne.n	80080b6 <ai_platform_network_process+0x72>
 80080bc:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <ai_platform_network_process+0xb0>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <ai_platform_network_process+0xb4>)
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d02a      	beq.n	800811e <ai_platform_network_process+0xda>
 80080c8:	e7fe      	b.n	80080c8 <ai_platform_network_process+0x84>
 80080ca:	4a09      	ldr	r2, [pc, #36]	; (80080f0 <ai_platform_network_process+0xac>)
 80080cc:	2301      	movs	r3, #1
 80080ce:	6093      	str	r3, [r2, #8]
 80080d0:	6893      	ldr	r3, [r2, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1fc      	bne.n	80080d0 <ai_platform_network_process+0x8c>
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <ai_platform_network_process+0xb0>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <ai_platform_network_process+0xb4>)
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d01d      	beq.n	800811e <ai_platform_network_process+0xda>
 80080e2:	e7fe      	b.n	80080e2 <ai_platform_network_process+0x9e>
 80080e4:	a1c00100 	.word	0xa1c00100
 80080e8:	e0042000 	.word	0xe0042000
 80080ec:	5c001000 	.word	0x5c001000
 80080f0:	40023000 	.word	0x40023000
 80080f4:	f407a5c2 	.word	0xf407a5c2
 80080f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80080fc:	4ab0      	ldr	r2, [pc, #704]	; (80083c0 <ai_platform_network_process+0x37c>)
 80080fe:	2301      	movs	r3, #1
 8008100:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008104:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1fb      	bne.n	8008104 <ai_platform_network_process+0xc0>
 800810c:	4bad      	ldr	r3, [pc, #692]	; (80083c4 <ai_platform_network_process+0x380>)
 800810e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008112:	4bad      	ldr	r3, [pc, #692]	; (80083c8 <ai_platform_network_process+0x384>)
 8008114:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008118:	429a      	cmp	r2, r3
 800811a:	f040 812b 	bne.w	8008374 <ai_platform_network_process+0x330>
 800811e:	f7fe ff25 	bl	8006f6c <_ai_platform_release_crc>
 8008122:	2d00      	cmp	r5, #0
 8008124:	f000 8172 	beq.w	800840c <ai_platform_network_process+0x3c8>
 8008128:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8123 	beq.w	8008376 <ai_platform_network_process+0x332>
 8008130:	68eb      	ldr	r3, [r5, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8008138:	f003 0303 	and.w	r3, r3, #3
 800813c:	616a      	str	r2, [r5, #20]
 800813e:	2b03      	cmp	r3, #3
 8008140:	f040 811f 	bne.w	8008382 <ai_platform_network_process+0x33e>
 8008144:	2e00      	cmp	r6, #0
 8008146:	f000 8156 	beq.w	80083f6 <ai_platform_network_process+0x3b2>
 800814a:	fab8 f788 	clz	r7, r8
 800814e:	097f      	lsrs	r7, r7, #5
 8008150:	f1b8 0f00 	cmp.w	r8, #0
 8008154:	f000 814f 	beq.w	80083f6 <ai_platform_network_process+0x3b2>
 8008158:	f8b8 3000 	ldrh.w	r3, [r8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 814a 	beq.w	80083f6 <ai_platform_network_process+0x3b2>
 8008162:	69b3      	ldr	r3, [r6, #24]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800816a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d072      	beq.n	8008258 <ai_platform_network_process+0x214>
 8008172:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8008176:	2c00      	cmp	r4, #0
 8008178:	d06e      	beq.n	8008258 <ai_platform_network_process+0x214>
 800817a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800817e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8008182:	f8d3 a000 	ldr.w	sl, [r3]
 8008186:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800818a:	f000 8133 	beq.w	80083f4 <ai_platform_network_process+0x3b0>
 800818e:	69a3      	ldr	r3, [r4, #24]
 8008190:	2101      	movs	r1, #1
 8008192:	4630      	mov	r0, r6
 8008194:	685d      	ldr	r5, [r3, #4]
 8008196:	f7fe fea9 	bl	8006eec <ai_buffer_get_size>
 800819a:	4285      	cmp	r5, r0
 800819c:	f0c0 8138 	bcc.w	8008410 <ai_platform_network_process+0x3cc>
 80081a0:	68e0      	ldr	r0, [r4, #12]
 80081a2:	69b1      	ldr	r1, [r6, #24]
 80081a4:	68c2      	ldr	r2, [r0, #12]
 80081a6:	68cb      	ldr	r3, [r1, #12]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	f040 8131 	bne.w	8008410 <ai_platform_network_process+0x3cc>
 80081ae:	6882      	ldr	r2, [r0, #8]
 80081b0:	688b      	ldr	r3, [r1, #8]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	f040 812c 	bne.w	8008410 <ai_platform_network_process+0x3cc>
 80081b8:	6842      	ldr	r2, [r0, #4]
 80081ba:	684b      	ldr	r3, [r1, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	f040 8127 	bne.w	8008410 <ai_platform_network_process+0x3cc>
 80081c2:	69a3      	ldr	r3, [r4, #24]
 80081c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081c8:	f001 f9e6 	bl	8009598 <ai_array_get_data_byte_size>
 80081cc:	4605      	mov	r5, r0
 80081ce:	4620      	mov	r0, r4
 80081d0:	f001 f938 	bl	8009444 <get_tensor_byte_size>
 80081d4:	4285      	cmp	r5, r0
 80081d6:	f0c0 811b 	bcc.w	8008410 <ai_platform_network_process+0x3cc>
 80081da:	69a3      	ldr	r3, [r4, #24]
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	f001 f947 	bl	8009470 <ai_array_to_buffer_fmt>
 80081e2:	6833      	ldr	r3, [r6, #0]
 80081e4:	4058      	eors	r0, r3
 80081e6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80081ea:	f040 81ca 	bne.w	8008582 <ai_platform_network_process+0x53e>
 80081ee:	6873      	ldr	r3, [r6, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 81bd 	beq.w	8008570 <ai_platform_network_process+0x52c>
 80081f6:	69b3      	ldr	r3, [r6, #24]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 81ca 	beq.w	8008594 <ai_platform_network_process+0x550>
 8008200:	9a02      	ldr	r2, [sp, #8]
 8008202:	4620      	mov	r0, r4
 8008204:	3701      	adds	r7, #1
 8008206:	361c      	adds	r6, #28
 8008208:	429a      	cmp	r2, r3
 800820a:	bf38      	it	cc
 800820c:	461a      	movcc	r2, r3
 800820e:	9202      	str	r2, [sp, #8]
 8008210:	f001 f918 	bl	8009444 <get_tensor_byte_size>
 8008214:	f8c9 0008 	str.w	r0, [r9, #8]
 8008218:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	fb00 f303 	mul.w	r3, r0, r3
 8008222:	f8c9 300c 	str.w	r3, [r9, #12]
 8008226:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800822a:	440b      	add	r3, r1
 800822c:	f8c9 1004 	str.w	r1, [r9, #4]
 8008230:	f84a 300b 	str.w	r3, [sl, fp]
 8008234:	69a0      	ldr	r0, [r4, #24]
 8008236:	6803      	ldr	r3, [r0, #0]
 8008238:	009a      	lsls	r2, r3, #2
 800823a:	f100 80bb 	bmi.w	80083b4 <ai_platform_network_process+0x370>
 800823e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	4419      	add	r1, r3
 8008246:	6081      	str	r1, [r0, #8]
 8008248:	69a3      	ldr	r3, [r4, #24]
 800824a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800824e:	60da      	str	r2, [r3, #12]
 8008250:	f8b8 3000 	ldrh.w	r3, [r8]
 8008254:	42bb      	cmp	r3, r7
 8008256:	d888      	bhi.n	800816a <ai_platform_network_process+0x126>
 8008258:	9d03      	ldr	r5, [sp, #12]
 800825a:	9b01      	ldr	r3, [sp, #4]
 800825c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 81a1 	beq.w	80085a6 <ai_platform_network_process+0x562>
 8008264:	2a01      	cmp	r2, #1
 8008266:	f240 817b 	bls.w	8008560 <ai_platform_network_process+0x51c>
 800826a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800826e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 8174 	beq.w	8008560 <ai_platform_network_process+0x51c>
 8008278:	9e01      	ldr	r6, [sp, #4]
 800827a:	2700      	movs	r7, #0
 800827c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80d3 	beq.w	800842c <ai_platform_network_process+0x3e8>
 8008286:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800828a:	2c00      	cmp	r4, #0
 800828c:	f000 80ce 	beq.w	800842c <ai_platform_network_process+0x3e8>
 8008290:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008294:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8008298:	f8d3 8000 	ldr.w	r8, [r3]
 800829c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80082a0:	f000 819f 	beq.w	80085e2 <ai_platform_network_process+0x59e>
 80082a4:	69a3      	ldr	r3, [r4, #24]
 80082a6:	2101      	movs	r1, #1
 80082a8:	4630      	mov	r0, r6
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	9301      	str	r3, [sp, #4]
 80082ae:	f7fe fe1d 	bl	8006eec <ai_buffer_get_size>
 80082b2:	9b01      	ldr	r3, [sp, #4]
 80082b4:	4283      	cmp	r3, r0
 80082b6:	f0c0 8153 	bcc.w	8008560 <ai_platform_network_process+0x51c>
 80082ba:	68e0      	ldr	r0, [r4, #12]
 80082bc:	69b1      	ldr	r1, [r6, #24]
 80082be:	68c2      	ldr	r2, [r0, #12]
 80082c0:	68cb      	ldr	r3, [r1, #12]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	f040 814c 	bne.w	8008560 <ai_platform_network_process+0x51c>
 80082c8:	6882      	ldr	r2, [r0, #8]
 80082ca:	688b      	ldr	r3, [r1, #8]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	f040 8147 	bne.w	8008560 <ai_platform_network_process+0x51c>
 80082d2:	6842      	ldr	r2, [r0, #4]
 80082d4:	684b      	ldr	r3, [r1, #4]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	f040 8142 	bne.w	8008560 <ai_platform_network_process+0x51c>
 80082dc:	69a3      	ldr	r3, [r4, #24]
 80082de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082e2:	f001 f959 	bl	8009598 <ai_array_get_data_byte_size>
 80082e6:	9001      	str	r0, [sp, #4]
 80082e8:	4620      	mov	r0, r4
 80082ea:	f001 f8ab 	bl	8009444 <get_tensor_byte_size>
 80082ee:	9b01      	ldr	r3, [sp, #4]
 80082f0:	4283      	cmp	r3, r0
 80082f2:	f0c0 8135 	bcc.w	8008560 <ai_platform_network_process+0x51c>
 80082f6:	69a3      	ldr	r3, [r4, #24]
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	f001 f8b9 	bl	8009470 <ai_array_to_buffer_fmt>
 80082fe:	6833      	ldr	r3, [r6, #0]
 8008300:	4058      	eors	r0, r3
 8008302:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8008306:	f040 815c 	bne.w	80085c2 <ai_platform_network_process+0x57e>
 800830a:	6873      	ldr	r3, [r6, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8150 	beq.w	80085b2 <ai_platform_network_process+0x56e>
 8008312:	69b3      	ldr	r3, [r6, #24]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 815b 	beq.w	80085d2 <ai_platform_network_process+0x58e>
 800831c:	9a02      	ldr	r2, [sp, #8]
 800831e:	4620      	mov	r0, r4
 8008320:	3701      	adds	r7, #1
 8008322:	361c      	adds	r6, #28
 8008324:	429a      	cmp	r2, r3
 8008326:	bf38      	it	cc
 8008328:	461a      	movcc	r2, r3
 800832a:	9202      	str	r2, [sp, #8]
 800832c:	f001 f88a 	bl	8009444 <get_tensor_byte_size>
 8008330:	f8ca 0008 	str.w	r0, [sl, #8]
 8008334:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	fb00 f303 	mul.w	r3, r0, r3
 800833e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008342:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8008346:	440b      	add	r3, r1
 8008348:	f8ca 1004 	str.w	r1, [sl, #4]
 800834c:	f848 300b 	str.w	r3, [r8, fp]
 8008350:	69a0      	ldr	r0, [r4, #24]
 8008352:	6803      	ldr	r3, [r0, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	d464      	bmi.n	8008422 <ai_platform_network_process+0x3de>
 8008358:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	4419      	add	r1, r3
 8008360:	6081      	str	r1, [r0, #8]
 8008362:	69a3      	ldr	r3, [r4, #24]
 8008364:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800836e:	429f      	cmp	r7, r3
 8008370:	d384      	bcc.n	800827c <ai_platform_network_process+0x238>
 8008372:	e05b      	b.n	800842c <ai_platform_network_process+0x3e8>
 8008374:	e7fe      	b.n	8008374 <ai_platform_network_process+0x330>
 8008376:	68ea      	ldr	r2, [r5, #12]
 8008378:	616b      	str	r3, [r5, #20]
 800837a:	f002 0203 	and.w	r2, r2, #3
 800837e:	2a03      	cmp	r2, #3
 8008380:	d039      	beq.n	80083f6 <ai_platform_network_process+0x3b2>
 8008382:	2230      	movs	r2, #48	; 0x30
 8008384:	2111      	movs	r1, #17
 8008386:	f105 0010 	add.w	r0, r5, #16
 800838a:	2400      	movs	r4, #0
 800838c:	f000 f93a 	bl	8008604 <core_set_error>
 8008390:	4620      	mov	r0, r4
 8008392:	b005      	add	sp, #20
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	4a0c      	ldr	r2, [pc, #48]	; (80083cc <ai_platform_network_process+0x388>)
 800839a:	2301      	movs	r3, #1
 800839c:	6093      	str	r3, [r2, #8]
 800839e:	6893      	ldr	r3, [r2, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1fc      	bne.n	800839e <ai_platform_network_process+0x35a>
 80083a4:	4b07      	ldr	r3, [pc, #28]	; (80083c4 <ai_platform_network_process+0x380>)
 80083a6:	6013      	str	r3, [r2, #0]
 80083a8:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <ai_platform_network_process+0x384>)
 80083aa:	6812      	ldr	r2, [r2, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	f43f aeb6 	beq.w	800811e <ai_platform_network_process+0xda>
 80083b2:	e7fe      	b.n	80083b2 <ai_platform_network_process+0x36e>
 80083b4:	f8b8 3000 	ldrh.w	r3, [r8]
 80083b8:	429f      	cmp	r7, r3
 80083ba:	f4ff aed6 	bcc.w	800816a <ai_platform_network_process+0x126>
 80083be:	e74b      	b.n	8008258 <ai_platform_network_process+0x214>
 80083c0:	58024000 	.word	0x58024000
 80083c4:	f407a5c2 	.word	0xf407a5c2
 80083c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80083cc:	40023000 	.word	0x40023000
 80083d0:	4a88      	ldr	r2, [pc, #544]	; (80085f4 <ai_platform_network_process+0x5b0>)
 80083d2:	2301      	movs	r3, #1
 80083d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80083d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1fb      	bne.n	80083d8 <ai_platform_network_process+0x394>
 80083e0:	4b85      	ldr	r3, [pc, #532]	; (80085f8 <ai_platform_network_process+0x5b4>)
 80083e2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80083e6:	4b85      	ldr	r3, [pc, #532]	; (80085fc <ai_platform_network_process+0x5b8>)
 80083e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80083ec:	429a      	cmp	r2, r3
 80083ee:	f43f ae96 	beq.w	800811e <ai_platform_network_process+0xda>
 80083f2:	e7fe      	b.n	80083f2 <ai_platform_network_process+0x3ae>
 80083f4:	9d03      	ldr	r5, [sp, #12]
 80083f6:	2400      	movs	r4, #0
 80083f8:	2217      	movs	r2, #23
 80083fa:	2112      	movs	r1, #18
 80083fc:	f105 0010 	add.w	r0, r5, #16
 8008400:	f000 f900 	bl	8008604 <core_set_error>
 8008404:	4620      	mov	r0, r4
 8008406:	b005      	add	sp, #20
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	462c      	mov	r4, r5
 800840e:	e7bf      	b.n	8008390 <ai_platform_network_process+0x34c>
 8008410:	9d03      	ldr	r5, [sp, #12]
 8008412:	2218      	movs	r2, #24
 8008414:	2112      	movs	r1, #18
 8008416:	2400      	movs	r4, #0
 8008418:	f105 0010 	add.w	r0, r5, #16
 800841c:	f000 f8f2 	bl	8008604 <core_set_error>
 8008420:	e7b6      	b.n	8008390 <ai_platform_network_process+0x34c>
 8008422:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008426:	429f      	cmp	r7, r3
 8008428:	f4ff af28 	bcc.w	800827c <ai_platform_network_process+0x238>
 800842c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008430:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8008432:	82ab      	strh	r3, [r5, #20]
 8008434:	2a00      	cmp	r2, #0
 8008436:	f040 808d 	bne.w	8008554 <ai_platform_network_process+0x510>
 800843a:	4616      	mov	r6, r2
 800843c:	4617      	mov	r7, r2
 800843e:	8aec      	ldrh	r4, [r5, #22]
 8008440:	429c      	cmp	r4, r3
 8008442:	d2a5      	bcs.n	8008390 <ai_platform_network_process+0x34c>
 8008444:	46ab      	mov	fp, r5
 8008446:	2e00      	cmp	r6, #0
 8008448:	d030      	beq.n	80084ac <ai_platform_network_process+0x468>
 800844a:	f04f 0800 	mov.w	r8, #0
 800844e:	e014      	b.n	800847a <ai_platform_network_process+0x436>
 8008450:	6882      	ldr	r2, [r0, #8]
 8008452:	68c5      	ldr	r5, [r0, #12]
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	1b52      	subs	r2, r2, r5
 8008458:	4413      	add	r3, r2
 800845a:	6083      	str	r3, [r0, #8]
 800845c:	698b      	ldr	r3, [r1, #24]
 800845e:	6862      	ldr	r2, [r4, #4]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	f859 200a 	ldr.w	r2, [r9, sl]
 8008466:	f108 0801 	add.w	r8, r8, #1
 800846a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800846e:	440b      	add	r3, r1
 8008470:	4293      	cmp	r3, r2
 8008472:	d301      	bcc.n	8008478 <ai_platform_network_process+0x434>
 8008474:	68e3      	ldr	r3, [r4, #12]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	8833      	ldrh	r3, [r6, #0]
 800847c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8008480:	4543      	cmp	r3, r8
 8008482:	d913      	bls.n	80084ac <ai_platform_network_process+0x468>
 8008484:	6873      	ldr	r3, [r6, #4]
 8008486:	b18b      	cbz	r3, 80084ac <ai_platform_network_process+0x468>
 8008488:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800848c:	b171      	cbz	r1, 80084ac <ai_platform_network_process+0x468>
 800848e:	6988      	ldr	r0, [r1, #24]
 8008490:	68b2      	ldr	r2, [r6, #8]
 8008492:	6803      	ldr	r3, [r0, #0]
 8008494:	f8d2 9000 	ldr.w	r9, [r2]
 8008498:	009d      	lsls	r5, r3, #2
 800849a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800849e:	d5d7      	bpl.n	8008450 <ai_platform_network_process+0x40c>
 80084a0:	6880      	ldr	r0, [r0, #8]
 80084a2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80084a6:	f001 f8b1 	bl	800960c <memcpy>
 80084aa:	e7da      	b.n	8008462 <ai_platform_network_process+0x41e>
 80084ac:	4658      	mov	r0, fp
 80084ae:	f000 fe53 	bl	8009158 <ai_layers_forward_all>
 80084b2:	2f00      	cmp	r7, #0
 80084b4:	d03f      	beq.n	8008536 <ai_platform_network_process+0x4f2>
 80084b6:	2400      	movs	r4, #0
 80084b8:	e016      	b.n	80084e8 <ai_platform_network_process+0x4a4>
 80084ba:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80084be:	f859 100a 	ldr.w	r1, [r9, sl]
 80084c2:	4413      	add	r3, r2
 80084c4:	428b      	cmp	r3, r1
 80084c6:	d302      	bcc.n	80084ce <ai_platform_network_process+0x48a>
 80084c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084cc:	1acb      	subs	r3, r1, r3
 80084ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80084d2:	6981      	ldr	r1, [r0, #24]
 80084d4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80084d8:	1b52      	subs	r2, r2, r5
 80084da:	4413      	add	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]
 80084de:	6983      	ldr	r3, [r0, #24]
 80084e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80084e4:	60da      	str	r2, [r3, #12]
 80084e6:	3401      	adds	r4, #1
 80084e8:	883b      	ldrh	r3, [r7, #0]
 80084ea:	42a3      	cmp	r3, r4
 80084ec:	d923      	bls.n	8008536 <ai_platform_network_process+0x4f2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	b30b      	cbz	r3, 8008536 <ai_platform_network_process+0x4f2>
 80084f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80084f6:	b1f0      	cbz	r0, 8008536 <ai_platform_network_process+0x4f2>
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80084fe:	6983      	ldr	r3, [r0, #24]
 8008500:	f8d2 9000 	ldr.w	r9, [r2]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800850a:	0092      	lsls	r2, r2, #2
 800850c:	d5d5      	bpl.n	80084ba <ai_platform_network_process+0x476>
 800850e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008512:	6899      	ldr	r1, [r3, #8]
 8008514:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008518:	f001 f878 	bl	800960c <memcpy>
 800851c:	f859 200a 	ldr.w	r2, [r9, sl]
 8008520:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8008524:	440b      	add	r3, r1
 8008526:	4293      	cmp	r3, r2
 8008528:	d302      	bcc.n	8008530 <ai_platform_network_process+0x4ec>
 800852a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800852e:	1ad3      	subs	r3, r2, r3
 8008530:	f8c8 3004 	str.w	r3, [r8, #4]
 8008534:	e7d7      	b.n	80084e6 <ai_platform_network_process+0x4a2>
 8008536:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800853a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800853e:	3401      	adds	r4, #1
 8008540:	b2a4      	uxth	r4, r4
 8008542:	42a3      	cmp	r3, r4
 8008544:	f8ab 4016 	strh.w	r4, [fp, #22]
 8008548:	f63f af7d 	bhi.w	8008446 <ai_platform_network_process+0x402>
 800854c:	4620      	mov	r0, r4
 800854e:	b005      	add	sp, #20
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	2a01      	cmp	r2, #1
 8008556:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8008558:	d029      	beq.n	80085ae <ai_platform_network_process+0x56a>
 800855a:	f106 070c 	add.w	r7, r6, #12
 800855e:	e76e      	b.n	800843e <ai_platform_network_process+0x3fa>
 8008560:	2218      	movs	r2, #24
 8008562:	2113      	movs	r1, #19
 8008564:	f105 0010 	add.w	r0, r5, #16
 8008568:	2400      	movs	r4, #0
 800856a:	f000 f84b 	bl	8008604 <core_set_error>
 800856e:	e70f      	b.n	8008390 <ai_platform_network_process+0x34c>
 8008570:	9d03      	ldr	r5, [sp, #12]
 8008572:	4604      	mov	r4, r0
 8008574:	2217      	movs	r2, #23
 8008576:	2112      	movs	r1, #18
 8008578:	f105 0010 	add.w	r0, r5, #16
 800857c:	f000 f842 	bl	8008604 <core_set_error>
 8008580:	e706      	b.n	8008390 <ai_platform_network_process+0x34c>
 8008582:	9d03      	ldr	r5, [sp, #12]
 8008584:	2219      	movs	r2, #25
 8008586:	2112      	movs	r1, #18
 8008588:	2400      	movs	r4, #0
 800858a:	f105 0010 	add.w	r0, r5, #16
 800858e:	f000 f839 	bl	8008604 <core_set_error>
 8008592:	e6fd      	b.n	8008390 <ai_platform_network_process+0x34c>
 8008594:	9d03      	ldr	r5, [sp, #12]
 8008596:	4604      	mov	r4, r0
 8008598:	2221      	movs	r2, #33	; 0x21
 800859a:	2112      	movs	r1, #18
 800859c:	f105 0010 	add.w	r0, r5, #16
 80085a0:	f000 f830 	bl	8008604 <core_set_error>
 80085a4:	e6f4      	b.n	8008390 <ai_platform_network_process+0x34c>
 80085a6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80085aa:	82ab      	strh	r3, [r5, #20]
 80085ac:	e742      	b.n	8008434 <ai_platform_network_process+0x3f0>
 80085ae:	2700      	movs	r7, #0
 80085b0:	e745      	b.n	800843e <ai_platform_network_process+0x3fa>
 80085b2:	4604      	mov	r4, r0
 80085b4:	2217      	movs	r2, #23
 80085b6:	2113      	movs	r1, #19
 80085b8:	f105 0010 	add.w	r0, r5, #16
 80085bc:	f000 f822 	bl	8008604 <core_set_error>
 80085c0:	e6e6      	b.n	8008390 <ai_platform_network_process+0x34c>
 80085c2:	2219      	movs	r2, #25
 80085c4:	2113      	movs	r1, #19
 80085c6:	f105 0010 	add.w	r0, r5, #16
 80085ca:	2400      	movs	r4, #0
 80085cc:	f000 f81a 	bl	8008604 <core_set_error>
 80085d0:	e6de      	b.n	8008390 <ai_platform_network_process+0x34c>
 80085d2:	4604      	mov	r4, r0
 80085d4:	2221      	movs	r2, #33	; 0x21
 80085d6:	2113      	movs	r1, #19
 80085d8:	f105 0010 	add.w	r0, r5, #16
 80085dc:	f000 f812 	bl	8008604 <core_set_error>
 80085e0:	e6d6      	b.n	8008390 <ai_platform_network_process+0x34c>
 80085e2:	2217      	movs	r2, #23
 80085e4:	2113      	movs	r1, #19
 80085e6:	f105 0010 	add.w	r0, r5, #16
 80085ea:	4654      	mov	r4, sl
 80085ec:	f000 f80a 	bl	8008604 <core_set_error>
 80085f0:	e6ce      	b.n	8008390 <ai_platform_network_process+0x34c>
 80085f2:	bf00      	nop
 80085f4:	58024000 	.word	0x58024000
 80085f8:	f407a5c2 	.word	0xf407a5c2
 80085fc:	b5e8b5cd 	.word	0xb5e8b5cd

08008600 <core_init>:
 8008600:	2001      	movs	r0, #1
 8008602:	4770      	bx	lr

08008604 <core_set_error>:
 8008604:	4603      	mov	r3, r0
 8008606:	7800      	ldrb	r0, [r0, #0]
 8008608:	b108      	cbz	r0, 800860e <core_set_error+0xa>
 800860a:	2000      	movs	r0, #0
 800860c:	4770      	bx	lr
 800860e:	7019      	strb	r1, [r3, #0]
 8008610:	2001      	movs	r0, #1
 8008612:	6819      	ldr	r1, [r3, #0]
 8008614:	f362 211f 	bfi	r1, r2, #8, #24
 8008618:	6019      	str	r1, [r3, #0]
 800861a:	4770      	bx	lr

0800861c <forward_dense>:
 800861c:	6983      	ldr	r3, [r0, #24]
 800861e:	881a      	ldrh	r2, [r3, #0]
 8008620:	2a00      	cmp	r2, #0
 8008622:	f000 80f0 	beq.w	8008806 <forward_dense+0x1ea>
 8008626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	ed2d 8b02 	vpush	{d8}
 800862e:	6858      	ldr	r0, [r3, #4]
 8008630:	b09b      	sub	sp, #108	; 0x6c
 8008632:	6845      	ldr	r5, [r0, #4]
 8008634:	b105      	cbz	r5, 8008638 <forward_dense+0x1c>
 8008636:	682d      	ldr	r5, [r5, #0]
 8008638:	2a01      	cmp	r2, #1
 800863a:	f000 840a 	beq.w	8008e52 <forward_dense+0x836>
 800863e:	6906      	ldr	r6, [r0, #16]
 8008640:	b106      	cbz	r6, 8008644 <forward_dense+0x28>
 8008642:	6836      	ldr	r6, [r6, #0]
 8008644:	2a02      	cmp	r2, #2
 8008646:	f000 80e0 	beq.w	800880a <forward_dense+0x1ee>
 800864a:	69c3      	ldr	r3, [r0, #28]
 800864c:	930d      	str	r3, [sp, #52]	; 0x34
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 83f1 	beq.w	8008e36 <forward_dense+0x81a>
 8008654:	4619      	mov	r1, r3
 8008656:	8b03      	ldrh	r3, [r0, #24]
 8008658:	6809      	ldr	r1, [r1, #0]
 800865a:	2b01      	cmp	r3, #1
 800865c:	910f      	str	r1, [sp, #60]	; 0x3c
 800865e:	f240 83ec 	bls.w	8008e3a <forward_dense+0x81e>
 8008662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	930d      	str	r3, [sp, #52]	; 0x34
 8008668:	460b      	mov	r3, r1
 800866a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800866e:	2a03      	cmp	r2, #3
 8008670:	68eb      	ldr	r3, [r5, #12]
 8008672:	68f7      	ldr	r7, [r6, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	687c      	ldr	r4, [r7, #4]
 8008678:	9317      	str	r3, [sp, #92]	; 0x5c
 800867a:	f8d8 3000 	ldr.w	r3, [r8]
 800867e:	4621      	mov	r1, r4
 8008680:	9419      	str	r4, [sp, #100]	; 0x64
 8008682:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8008686:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800868a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800868e:	fb01 f404 	mul.w	r4, r1, r4
 8008692:	fa4e f10c 	asr.w	r1, lr, ip
 8008696:	9116      	str	r1, [sp, #88]	; 0x58
 8008698:	f000 83d8 	beq.w	8008e4c <forward_dense+0x830>
 800869c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800869e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	f000 83c2 	beq.w	8008e2c <forward_dense+0x810>
 80086a8:	6812      	ldr	r2, [r2, #0]
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	f000 83be 	beq.w	8008e2c <forward_dense+0x810>
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80086b6:	f000 83a8 	beq.w	8008e0a <forward_dense+0x7ee>
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	f000 83a5 	beq.w	8008e0a <forward_dense+0x7ee>
 80086c0:	f04f 0a00 	mov.w	sl, #0
 80086c4:	69ab      	ldr	r3, [r5, #24]
 80086c6:	fb07 f404 	mul.w	r4, r7, r4
 80086ca:	69b2      	ldr	r2, [r6, #24]
 80086cc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80086d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d2:	6892      	ldr	r2, [r2, #8]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80086da:	9206      	str	r2, [sp, #24]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	428a      	cmp	r2, r1
 80086e0:	9110      	str	r1, [sp, #64]	; 0x40
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086e6:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80086ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086ee:	900e      	str	r0, [sp, #56]	; 0x38
 80086f0:	9303      	str	r3, [sp, #12]
 80086f2:	f080 8380 	bcs.w	8008df6 <forward_dense+0x7da>
 80086f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086f8:	4654      	mov	r4, sl
 80086fa:	4bb9      	ldr	r3, [pc, #740]	; (80089e0 <forward_dense+0x3c4>)
 80086fc:	46ca      	mov	sl, r9
 80086fe:	08d0      	lsrs	r0, r2, #3
 8008700:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80089e4 <forward_dense+0x3c8>
 8008704:	4413      	add	r3, r2
 8008706:	9009      	str	r0, [sp, #36]	; 0x24
 8008708:	0099      	lsls	r1, r3, #2
 800870a:	f022 0301 	bic.w	r3, r2, #1
 800870e:	f002 0201 	and.w	r2, r2, #1
 8008712:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8008716:	9118      	str	r1, [sp, #96]	; 0x60
 8008718:	920a      	str	r2, [sp, #40]	; 0x28
 800871a:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800871e:	9305      	str	r3, [sp, #20]
 8008720:	f101 0320 	add.w	r3, r1, #32
 8008724:	9207      	str	r2, [sp, #28]
 8008726:	9311      	str	r3, [sp, #68]	; 0x44
 8008728:	444b      	add	r3, r9
 800872a:	469b      	mov	fp, r3
 800872c:	930b      	str	r3, [sp, #44]	; 0x2c
 800872e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008736:	b10b      	cbz	r3, 800873c <forward_dense+0x120>
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	2c00      	cmp	r4, #0
 800873e:	f000 834b 	beq.w	8008dd8 <forward_dense+0x7bc>
 8008742:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008744:	2904      	cmp	r1, #4
 8008746:	f000 826a 	beq.w	8008c1e <forward_dense+0x602>
 800874a:	9903      	ldr	r1, [sp, #12]
 800874c:	9806      	ldr	r0, [sp, #24]
 800874e:	4281      	cmp	r1, r0
 8008750:	f240 8356 	bls.w	8008e00 <forward_dense+0x7e4>
 8008754:	4686      	mov	lr, r0
 8008756:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008758:	eb00 090a 	add.w	r9, r0, sl
 800875c:	0941      	lsrs	r1, r0, #5
 800875e:	f10a 0004 	add.w	r0, sl, #4
 8008762:	f8cd 9020 	str.w	r9, [sp, #32]
 8008766:	9012      	str	r0, [sp, #72]	; 0x48
 8008768:	1c48      	adds	r0, r1, #1
 800876a:	00c9      	lsls	r1, r1, #3
 800876c:	3110      	adds	r1, #16
 800876e:	9115      	str	r1, [sp, #84]	; 0x54
 8008770:	00c1      	lsls	r1, r0, #3
 8008772:	9113      	str	r1, [sp, #76]	; 0x4c
 8008774:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8008778:	9114      	str	r1, [sp, #80]	; 0x50
 800877a:	f1a9 0104 	sub.w	r1, r9, #4
 800877e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8008782:	910c      	str	r1, [sp, #48]	; 0x30
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 8128 	beq.w	80089da <forward_dense+0x3be>
 800878a:	ecb3 5a01 	vldmia	r3!, {s10}
 800878e:	f1b9 0f07 	cmp.w	r9, #7
 8008792:	d83d      	bhi.n	8008810 <forward_dense+0x1f4>
 8008794:	45da      	cmp	sl, fp
 8008796:	d211      	bcs.n	80087bc <forward_dense+0x1a0>
 8008798:	eddf 7a92 	vldr	s15, [pc, #584]	; 80089e4 <forward_dense+0x3c8>
 800879c:	4650      	mov	r0, sl
 800879e:	4615      	mov	r5, r2
 80087a0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80087a4:	ecb0 7a01 	vldmia	r0!, {s14}
 80087a8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80087ac:	4558      	cmp	r0, fp
 80087ae:	edd1 6a00 	vldr	s13, [r1]
 80087b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80087b6:	d3f3      	bcc.n	80087a0 <forward_dense+0x184>
 80087b8:	ee35 5a27 	vadd.f32	s10, s10, s15
 80087bc:	9904      	ldr	r1, [sp, #16]
 80087be:	ecae 5a01 	vstmia	lr!, {s10}
 80087c2:	440a      	add	r2, r1
 80087c4:	9903      	ldr	r1, [sp, #12]
 80087c6:	458e      	cmp	lr, r1
 80087c8:	d3dc      	bcc.n	8008784 <forward_dense+0x168>
 80087ca:	9a06      	ldr	r2, [sp, #24]
 80087cc:	1a8b      	subs	r3, r1, r2
 80087ce:	3b01      	subs	r3, #1
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	3304      	adds	r3, #4
 80087d6:	18d3      	adds	r3, r2, r3
 80087d8:	4619      	mov	r1, r3
 80087da:	9306      	str	r3, [sp, #24]
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80087e2:	4413      	add	r3, r2
 80087e4:	9a07      	ldr	r2, [sp, #28]
 80087e6:	4281      	cmp	r1, r0
 80087e8:	9303      	str	r3, [sp, #12]
 80087ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ec:	441a      	add	r2, r3
 80087ee:	449b      	add	fp, r3
 80087f0:	9207      	str	r2, [sp, #28]
 80087f2:	9a05      	ldr	r2, [sp, #20]
 80087f4:	441a      	add	r2, r3
 80087f6:	9205      	str	r2, [sp, #20]
 80087f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087fa:	4692      	mov	sl, r2
 80087fc:	f080 82fb 	bcs.w	8008df6 <forward_dense+0x7da>
 8008800:	441a      	add	r2, r3
 8008802:	920b      	str	r2, [sp, #44]	; 0x2c
 8008804:	e793      	b.n	800872e <forward_dense+0x112>
 8008806:	6853      	ldr	r3, [r2, #4]
 8008808:	deff      	udf	#255	; 0xff
 800880a:	2300      	movs	r3, #0
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	deff      	udf	#255	; 0xff
 8008810:	f002 0103 	and.w	r1, r2, #3
 8008814:	2902      	cmp	r1, #2
 8008816:	f000 81e6 	beq.w	8008be6 <forward_dense+0x5ca>
 800881a:	2903      	cmp	r1, #3
 800881c:	f000 80e4 	beq.w	80089e8 <forward_dense+0x3cc>
 8008820:	2901      	cmp	r1, #1
 8008822:	f000 81ef 	beq.w	8008c04 <forward_dense+0x5e8>
 8008826:	9908      	ldr	r1, [sp, #32]
 8008828:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80089e4 <forward_dense+0x3c8>
 800882c:	458a      	cmp	sl, r1
 800882e:	f200 82e9 	bhi.w	8008e04 <forward_dense+0x7e8>
 8008832:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008834:	f102 0108 	add.w	r1, r2, #8
 8008838:	f10a 0020 	add.w	r0, sl, #32
 800883c:	18ae      	adds	r6, r5, r2
 800883e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8008842:	3108      	adds	r1, #8
 8008844:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8008848:	3020      	adds	r0, #32
 800884a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800884e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8008852:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8008856:	edd5 7a00 	vldr	s15, [r5]
 800885a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800885e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008862:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8008866:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800886a:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800886e:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8008872:	edd5 2a00 	vldr	s5, [r5]
 8008876:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800887a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800887e:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8008882:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008886:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800888a:	ed95 3a00 	vldr	s6, [r5]
 800888e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8008892:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008896:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800889a:	edd5 3a00 	vldr	s7, [r5]
 800889e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80088a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088a6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80088aa:	ed95 4a00 	vldr	s8, [r5]
 80088ae:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80088b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088b6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088ba:	edd5 4a00 	vldr	s9, [r5]
 80088be:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80088c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088c6:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80088ca:	edd5 5a00 	vldr	s11, [r5]
 80088ce:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80088d2:	428e      	cmp	r6, r1
 80088d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088d8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80088dc:	ed95 6a00 	vldr	s12, [r5]
 80088e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088e8:	d1a9      	bne.n	800883e <forward_dense+0x222>
 80088ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80088ec:	1850      	adds	r0, r2, r1
 80088ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80088f0:	4559      	cmp	r1, fp
 80088f2:	d26f      	bcs.n	80089d4 <forward_dense+0x3b8>
 80088f4:	7805      	ldrb	r5, [r0, #0]
 80088f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088fa:	edd5 7a00 	vldr	s15, [r5]
 80088fe:	460d      	mov	r5, r1
 8008900:	ecf5 6a01 	vldmia	r5!, {s13}
 8008904:	45ab      	cmp	fp, r5
 8008906:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800890a:	d963      	bls.n	80089d4 <forward_dense+0x3b8>
 800890c:	7845      	ldrb	r5, [r0, #1]
 800890e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008912:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008916:	edd5 7a00 	vldr	s15, [r5]
 800891a:	f101 0508 	add.w	r5, r1, #8
 800891e:	45ab      	cmp	fp, r5
 8008920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008924:	d956      	bls.n	80089d4 <forward_dense+0x3b8>
 8008926:	7885      	ldrb	r5, [r0, #2]
 8008928:	edd1 6a02 	vldr	s13, [r1, #8]
 800892c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008930:	edd5 7a00 	vldr	s15, [r5]
 8008934:	f101 050c 	add.w	r5, r1, #12
 8008938:	45ab      	cmp	fp, r5
 800893a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800893e:	d949      	bls.n	80089d4 <forward_dense+0x3b8>
 8008940:	78c5      	ldrb	r5, [r0, #3]
 8008942:	edd1 6a03 	vldr	s13, [r1, #12]
 8008946:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800894a:	edd5 7a00 	vldr	s15, [r5]
 800894e:	f101 0510 	add.w	r5, r1, #16
 8008952:	45ab      	cmp	fp, r5
 8008954:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008958:	d93c      	bls.n	80089d4 <forward_dense+0x3b8>
 800895a:	7905      	ldrb	r5, [r0, #4]
 800895c:	edd1 6a04 	vldr	s13, [r1, #16]
 8008960:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008964:	edd5 7a00 	vldr	s15, [r5]
 8008968:	f101 0514 	add.w	r5, r1, #20
 800896c:	45ab      	cmp	fp, r5
 800896e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008972:	d92f      	bls.n	80089d4 <forward_dense+0x3b8>
 8008974:	7945      	ldrb	r5, [r0, #5]
 8008976:	edd1 6a05 	vldr	s13, [r1, #20]
 800897a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800897e:	edd5 7a00 	vldr	s15, [r5]
 8008982:	f101 0518 	add.w	r5, r1, #24
 8008986:	45ab      	cmp	fp, r5
 8008988:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800898c:	d922      	bls.n	80089d4 <forward_dense+0x3b8>
 800898e:	7985      	ldrb	r5, [r0, #6]
 8008990:	edd1 6a06 	vldr	s13, [r1, #24]
 8008994:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008998:	edd5 7a00 	vldr	s15, [r5]
 800899c:	f101 051c 	add.w	r5, r1, #28
 80089a0:	45ab      	cmp	fp, r5
 80089a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089a6:	d915      	bls.n	80089d4 <forward_dense+0x3b8>
 80089a8:	79c5      	ldrb	r5, [r0, #7]
 80089aa:	edd1 6a07 	vldr	s13, [r1, #28]
 80089ae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80089b2:	edd5 7a00 	vldr	s15, [r5]
 80089b6:	f101 0520 	add.w	r5, r1, #32
 80089ba:	45ab      	cmp	fp, r5
 80089bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089c0:	d908      	bls.n	80089d4 <forward_dense+0x3b8>
 80089c2:	edd1 7a08 	vldr	s15, [r1, #32]
 80089c6:	7a01      	ldrb	r1, [r0, #8]
 80089c8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089cc:	edd1 6a00 	vldr	s13, [r1]
 80089d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089d4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80089d8:	e6f0      	b.n	80087bc <forward_dense+0x1a0>
 80089da:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80089e4 <forward_dense+0x3c8>
 80089de:	e6d6      	b.n	800878e <forward_dense+0x172>
 80089e0:	3ffffff8 	.word	0x3ffffff8
 80089e4:	00000000 	.word	0x00000000
 80089e8:	eeb0 7a48 	vmov.f32	s14, s16
 80089ec:	4650      	mov	r0, sl
 80089ee:	4611      	mov	r1, r2
 80089f0:	468c      	mov	ip, r1
 80089f2:	4606      	mov	r6, r0
 80089f4:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80089f8:	ecf6 7a01 	vldmia	r6!, {s15}
 80089fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a00:	edd5 6a00 	vldr	s13, [r5]
 8008a04:	9d08      	ldr	r5, [sp, #32]
 8008a06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a0a:	42ae      	cmp	r6, r5
 8008a0c:	d866      	bhi.n	8008adc <forward_dense+0x4c0>
 8008a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a10:	f101 0711 	add.w	r7, r1, #17
 8008a14:	3109      	adds	r1, #9
 8008a16:	eba5 0800 	sub.w	r8, r5, r0
 8008a1a:	3024      	adds	r0, #36	; 0x24
 8008a1c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8008a20:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8008a24:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8008a28:	3108      	adds	r1, #8
 8008a2a:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8008a2e:	3020      	adds	r0, #32
 8008a30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a34:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8008a38:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8008a3c:	edd5 7a00 	vldr	s15, [r5]
 8008a40:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8008a44:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008a48:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8008a4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a50:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8008a54:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8008a58:	edd5 2a00 	vldr	s5, [r5]
 8008a5c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8008a60:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008a64:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8008a68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a6c:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8008a70:	ed95 3a00 	vldr	s6, [r5]
 8008a74:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8008a78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008a7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a80:	edd5 3a00 	vldr	s7, [r5]
 8008a84:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8008a88:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a8c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008a90:	ed95 4a00 	vldr	s8, [r5]
 8008a94:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8008a98:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a9c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008aa0:	edd5 4a00 	vldr	s9, [r5]
 8008aa4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008aa8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008aac:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8008ab0:	edd5 5a00 	vldr	s11, [r5]
 8008ab4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008ab8:	428f      	cmp	r7, r1
 8008aba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008abe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008ac2:	ed95 6a00 	vldr	s12, [r5]
 8008ac6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008aca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ace:	d1a9      	bne.n	8008a24 <forward_dense+0x408>
 8008ad0:	f108 0801 	add.w	r8, r8, #1
 8008ad4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8008ad8:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8008adc:	455e      	cmp	r6, fp
 8008ade:	f4bf af79 	bcs.w	80089d4 <forward_dense+0x3b8>
 8008ae2:	f89c 1000 	ldrb.w	r1, [ip]
 8008ae6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008aea:	edd1 7a00 	vldr	s15, [r1]
 8008aee:	4631      	mov	r1, r6
 8008af0:	ecf1 6a01 	vldmia	r1!, {s13}
 8008af4:	458b      	cmp	fp, r1
 8008af6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008afa:	f67f af6b 	bls.w	80089d4 <forward_dense+0x3b8>
 8008afe:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8008b02:	edd6 6a01 	vldr	s13, [r6, #4]
 8008b06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b0a:	edd1 7a00 	vldr	s15, [r1]
 8008b0e:	f106 0108 	add.w	r1, r6, #8
 8008b12:	458b      	cmp	fp, r1
 8008b14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b18:	f67f af5c 	bls.w	80089d4 <forward_dense+0x3b8>
 8008b1c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8008b20:	edd6 6a02 	vldr	s13, [r6, #8]
 8008b24:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b28:	edd1 7a00 	vldr	s15, [r1]
 8008b2c:	f106 010c 	add.w	r1, r6, #12
 8008b30:	458b      	cmp	fp, r1
 8008b32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b36:	f67f af4d 	bls.w	80089d4 <forward_dense+0x3b8>
 8008b3a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8008b3e:	edd6 6a03 	vldr	s13, [r6, #12]
 8008b42:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b46:	edd1 7a00 	vldr	s15, [r1]
 8008b4a:	f106 0110 	add.w	r1, r6, #16
 8008b4e:	458b      	cmp	fp, r1
 8008b50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b54:	f67f af3e 	bls.w	80089d4 <forward_dense+0x3b8>
 8008b58:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8008b5c:	edd6 6a04 	vldr	s13, [r6, #16]
 8008b60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b64:	edd1 7a00 	vldr	s15, [r1]
 8008b68:	f106 0114 	add.w	r1, r6, #20
 8008b6c:	458b      	cmp	fp, r1
 8008b6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b72:	f67f af2f 	bls.w	80089d4 <forward_dense+0x3b8>
 8008b76:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8008b7a:	edd6 6a05 	vldr	s13, [r6, #20]
 8008b7e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b82:	edd1 7a00 	vldr	s15, [r1]
 8008b86:	f106 0118 	add.w	r1, r6, #24
 8008b8a:	458b      	cmp	fp, r1
 8008b8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b90:	f67f af20 	bls.w	80089d4 <forward_dense+0x3b8>
 8008b94:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8008b98:	edd6 6a06 	vldr	s13, [r6, #24]
 8008b9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008ba0:	edd1 7a00 	vldr	s15, [r1]
 8008ba4:	f106 011c 	add.w	r1, r6, #28
 8008ba8:	458b      	cmp	fp, r1
 8008baa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bae:	f67f af11 	bls.w	80089d4 <forward_dense+0x3b8>
 8008bb2:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8008bb6:	edd6 6a07 	vldr	s13, [r6, #28]
 8008bba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008bbe:	edd1 7a00 	vldr	s15, [r1]
 8008bc2:	f106 0120 	add.w	r1, r6, #32
 8008bc6:	458b      	cmp	fp, r1
 8008bc8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bcc:	f67f af02 	bls.w	80089d4 <forward_dense+0x3b8>
 8008bd0:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8008bd4:	edd6 7a08 	vldr	s15, [r6, #32]
 8008bd8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008bdc:	edd1 6a00 	vldr	s13, [r1]
 8008be0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008be4:	e6f6      	b.n	80089d4 <forward_dense+0x3b8>
 8008be6:	eeb0 7a48 	vmov.f32	s14, s16
 8008bea:	4650      	mov	r0, sl
 8008bec:	4611      	mov	r1, r2
 8008bee:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008bf2:	ecf0 7a01 	vldmia	r0!, {s15}
 8008bf6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008bfa:	edd5 6a00 	vldr	s13, [r5]
 8008bfe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c02:	e6f5      	b.n	80089f0 <forward_dense+0x3d4>
 8008c04:	4611      	mov	r1, r2
 8008c06:	edda 7a00 	vldr	s15, [sl]
 8008c0a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c0c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008c10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008c14:	ed95 7a00 	vldr	s14, [r5]
 8008c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c1c:	e7e7      	b.n	8008bee <forward_dense+0x5d2>
 8008c1e:	9803      	ldr	r0, [sp, #12]
 8008c20:	9906      	ldr	r1, [sp, #24]
 8008c22:	4288      	cmp	r0, r1
 8008c24:	f67f adda 	bls.w	80087dc <forward_dense+0x1c0>
 8008c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c2a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8008c2e:	468b      	mov	fp, r1
 8008c30:	f100 0c01 	add.w	ip, r0, #1
 8008c34:	9805      	ldr	r0, [sp, #20]
 8008c36:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8008c3a:	3801      	subs	r0, #1
 8008c3c:	9008      	str	r0, [sp, #32]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 80bf 	beq.w	8008dc2 <forward_dense+0x7a6>
 8008c44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c46:	ecf3 2a01 	vldmia	r3!, {s5}
 8008c4a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80089e4 <forward_dense+0x3c8>
 8008c4e:	2900      	cmp	r1, #0
 8008c50:	f000 80bf 	beq.w	8008dd2 <forward_dense+0x7b6>
 8008c54:	1d10      	adds	r0, r2, #4
 8008c56:	f10a 0120 	add.w	r1, sl, #32
 8008c5a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8008c5e:	3004      	adds	r0, #4
 8008c60:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8008c64:	3120      	adds	r1, #32
 8008c66:	f007 0e0f 	and.w	lr, r7, #15
 8008c6a:	093f      	lsrs	r7, r7, #4
 8008c6c:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8008c70:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8008c74:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8008c78:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008c7c:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8008c80:	edde 7a00 	vldr	s15, [lr]
 8008c84:	ed97 3a00 	vldr	s6, [r7]
 8008c88:	0937      	lsrs	r7, r6, #4
 8008c8a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008c8e:	f006 060f 	and.w	r6, r6, #15
 8008c92:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008c96:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8008c9a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008c9e:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8008ca2:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008ca6:	ed97 3a00 	vldr	s6, [r7]
 8008caa:	ed96 4a00 	vldr	s8, [r6]
 8008cae:	092e      	lsrs	r6, r5, #4
 8008cb0:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8008cb4:	f005 050f 	and.w	r5, r5, #15
 8008cb8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008cbc:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 8008cc0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008cc4:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8008cc8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8008ccc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008cd0:	eee4 7a05 	vfma.f32	s15, s8, s10
 8008cd4:	ed96 4a00 	vldr	s8, [r6]
 8008cd8:	ed95 5a00 	vldr	s10, [r5]
 8008cdc:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8008ce0:	4560      	cmp	r0, ip
 8008ce2:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8008ce6:	f005 050f 	and.w	r5, r5, #15
 8008cea:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008cee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008cf2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008cf6:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008cfa:	ed96 5a00 	vldr	s10, [r6]
 8008cfe:	ed95 6a00 	vldr	s12, [r5]
 8008d02:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008d06:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d0e:	d1a4      	bne.n	8008c5a <forward_dense+0x63e>
 8008d10:	f1ac 0804 	sub.w	r8, ip, #4
 8008d14:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008d18:	9905      	ldr	r1, [sp, #20]
 8008d1a:	458e      	cmp	lr, r1
 8008d1c:	d229      	bcs.n	8008d72 <forward_dense+0x756>
 8008d1e:	9908      	ldr	r1, [sp, #32]
 8008d20:	f10e 0008 	add.w	r0, lr, #8
 8008d24:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8008d28:	eba1 070e 	sub.w	r7, r1, lr
 8008d2c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8008d30:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008d34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d38:	3008      	adds	r0, #8
 8008d3a:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008d3e:	f001 050f 	and.w	r5, r1, #15
 8008d42:	0909      	lsrs	r1, r1, #4
 8008d44:	ed50 6a04 	vldr	s13, [r0, #-16]
 8008d48:	42b7      	cmp	r7, r6
 8008d4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008d4e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008d52:	edd5 7a00 	vldr	s15, [r5]
 8008d56:	ed91 6a00 	vldr	s12, [r1]
 8008d5a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008d5e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d66:	d1e5      	bne.n	8008d34 <forward_dense+0x718>
 8008d68:	f109 0901 	add.w	r9, r9, #1
 8008d6c:	44c8      	add	r8, r9
 8008d6e:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8008d72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d74:	b1c1      	cbz	r1, 8008da8 <forward_dense+0x78c>
 8008d76:	f898 1000 	ldrb.w	r1, [r8]
 8008d7a:	edde 7a00 	vldr	s15, [lr]
 8008d7e:	0909      	lsrs	r1, r1, #4
 8008d80:	9804      	ldr	r0, [sp, #16]
 8008d82:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008d86:	4402      	add	r2, r0
 8008d88:	4484      	add	ip, r0
 8008d8a:	edd1 6a00 	vldr	s13, [r1]
 8008d8e:	9903      	ldr	r1, [sp, #12]
 8008d90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d94:	ee72 2a87 	vadd.f32	s5, s5, s14
 8008d98:	eceb 2a01 	vstmia	fp!, {s5}
 8008d9c:	4559      	cmp	r1, fp
 8008d9e:	f63f af4e 	bhi.w	8008c3e <forward_dense+0x622>
 8008da2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8008da6:	e510      	b.n	80087ca <forward_dense+0x1ae>
 8008da8:	9904      	ldr	r1, [sp, #16]
 8008daa:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008dae:	440a      	add	r2, r1
 8008db0:	448c      	add	ip, r1
 8008db2:	9903      	ldr	r1, [sp, #12]
 8008db4:	ecab 7a01 	vstmia	fp!, {s14}
 8008db8:	458b      	cmp	fp, r1
 8008dba:	d2f2      	bcs.n	8008da2 <forward_dense+0x786>
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f47f af41 	bne.w	8008c44 <forward_dense+0x628>
 8008dc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dc4:	eef0 2a48 	vmov.f32	s5, s16
 8008dc8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008e58 <forward_dense+0x83c>
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	f47f af41 	bne.w	8008c54 <forward_dense+0x638>
 8008dd2:	46d6      	mov	lr, sl
 8008dd4:	4690      	mov	r8, r2
 8008dd6:	e79f      	b.n	8008d18 <forward_dense+0x6fc>
 8008dd8:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008dda:	4651      	mov	r1, sl
 8008ddc:	9d06      	ldr	r5, [sp, #24]
 8008dde:	9001      	str	r0, [sp, #4]
 8008de0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008de2:	9000      	str	r0, [sp, #0]
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 f9ff 	bl	80091e8 <lite_dense_if32of32wf32>
 8008dea:	462b      	mov	r3, r5
 8008dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dee:	4413      	add	r3, r2
 8008df0:	4619      	mov	r1, r3
 8008df2:	9306      	str	r3, [sp, #24]
 8008df4:	e4f2      	b.n	80087dc <forward_dense+0x1c0>
 8008df6:	b01b      	add	sp, #108	; 0x6c
 8008df8:	ecbd 8b02 	vpop	{d8}
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	4601      	mov	r1, r0
 8008e02:	e4eb      	b.n	80087dc <forward_dense+0x1c0>
 8008e04:	4651      	mov	r1, sl
 8008e06:	4610      	mov	r0, r2
 8008e08:	e572      	b.n	80088f0 <forward_dense+0x2d4>
 8008e0a:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8008e0e:	f1b9 0f00 	cmp.w	r9, #0
 8008e12:	d016      	beq.n	8008e42 <forward_dense+0x826>
 8008e14:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e18:	f000 fb96 	bl	8009548 <ai_array_get_byte_size>
 8008e1c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008e20:	4602      	mov	r2, r0
 8008e22:	4641      	mov	r1, r8
 8008e24:	4650      	mov	r0, sl
 8008e26:	f000 fbf1 	bl	800960c <memcpy>
 8008e2a:	e44b      	b.n	80086c4 <forward_dense+0xa8>
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d00a      	beq.n	8008e46 <forward_dense+0x82a>
 8008e30:	f04f 0900 	mov.w	r9, #0
 8008e34:	e441      	b.n	80086ba <forward_dense+0x9e>
 8008e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e38:	e417      	b.n	800866a <forward_dense+0x4e>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8008e3e:	460b      	mov	r3, r1
 8008e40:	e413      	b.n	800866a <forward_dense+0x4e>
 8008e42:	46c2      	mov	sl, r8
 8008e44:	e43e      	b.n	80086c4 <forward_dense+0xa8>
 8008e46:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8008e4a:	e43b      	b.n	80086c4 <forward_dense+0xa8>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	deff      	udf	#255	; 0xff
 8008e52:	2300      	movs	r3, #0
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	deff      	udf	#255	; 0xff
 8008e58:	00000000 	.word	0x00000000

08008e5c <forward_relu>:
 8008e5c:	6982      	ldr	r2, [r0, #24]
 8008e5e:	8813      	ldrh	r3, [r2, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d05b      	beq.n	8008f1c <forward_relu+0xc0>
 8008e64:	6851      	ldr	r1, [r2, #4]
 8008e66:	684a      	ldr	r2, [r1, #4]
 8008e68:	b102      	cbz	r2, 8008e6c <forward_relu+0x10>
 8008e6a:	6812      	ldr	r2, [r2, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	f000 8123 	beq.w	80090b8 <forward_relu+0x25c>
 8008e72:	b470      	push	{r4, r5, r6}
 8008e74:	690b      	ldr	r3, [r1, #16]
 8008e76:	b103      	cbz	r3, 8008e7a <forward_relu+0x1e>
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69c6      	ldr	r6, [r0, #28]
 8008e7c:	2e00      	cmp	r6, #0
 8008e7e:	f000 809e 	beq.w	8008fbe <forward_relu+0x162>
 8008e82:	6871      	ldr	r1, [r6, #4]
 8008e84:	6998      	ldr	r0, [r3, #24]
 8008e86:	2901      	cmp	r1, #1
 8008e88:	f000 80c3 	beq.w	8009012 <forward_relu+0x1b6>
 8008e8c:	6893      	ldr	r3, [r2, #8]
 8008e8e:	6991      	ldr	r1, [r2, #24]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	6880      	ldr	r0, [r0, #8]
 8008e94:	688d      	ldr	r5, [r1, #8]
 8008e96:	f000 80f2 	beq.w	800907e <forward_relu+0x222>
 8008e9a:	68d4      	ldr	r4, [r2, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	fb01 f202 	mul.w	r2, r1, r2
 8008eac:	d1f9      	bne.n	8008ea2 <forward_relu+0x46>
 8008eae:	68b3      	ldr	r3, [r6, #8]
 8008eb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8008eb4:	edd3 6a00 	vldr	s13, [r3]
 8008eb8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ebc:	ed93 6a01 	vldr	s12, [r3, #4]
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	d42c      	bmi.n	8008f20 <forward_relu+0xc4>
 8008ec6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008eca:	4413      	add	r3, r2
 8008ecc:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8008ed0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008ed4:	4295      	cmp	r5, r2
 8008ed6:	d81f      	bhi.n	8008f18 <forward_relu+0xbc>
 8008ed8:	3204      	adds	r2, #4
 8008eda:	1d01      	adds	r1, r0, #4
 8008edc:	e00d      	b.n	8008efa <forward_relu+0x9e>
 8008ede:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee6:	db03      	blt.n	8008ef0 <forward_relu+0x94>
 8008ee8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008eec:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008ef0:	3b08      	subs	r3, #8
 8008ef2:	ed61 7a01 	vstmdb	r1!, {s15}
 8008ef6:	429d      	cmp	r5, r3
 8008ef8:	d80e      	bhi.n	8008f18 <forward_relu+0xbc>
 8008efa:	4613      	mov	r3, r2
 8008efc:	ed72 7a01 	vldmdb	r2!, {s15}
 8008f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f08:	d9e9      	bls.n	8008ede <forward_relu+0x82>
 8008f0a:	3b08      	subs	r3, #8
 8008f0c:	eef0 7a47 	vmov.f32	s15, s14
 8008f10:	429d      	cmp	r5, r3
 8008f12:	ed61 7a01 	vstmdb	r1!, {s15}
 8008f16:	d9f0      	bls.n	8008efa <forward_relu+0x9e>
 8008f18:	bc70      	pop	{r4, r5, r6}
 8008f1a:	4770      	bx	lr
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	deff      	udf	#255	; 0xff
 8008f20:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008f24:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8008f28:	4411      	add	r1, r2
 8008f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008f32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008f36:	d11f      	bne.n	8008f78 <forward_relu+0x11c>
 8008f38:	429d      	cmp	r5, r3
 8008f3a:	d8ed      	bhi.n	8008f18 <forward_relu+0xbc>
 8008f3c:	1b5d      	subs	r5, r3, r5
 8008f3e:	1d1a      	adds	r2, r3, #4
 8008f40:	1d01      	adds	r1, r0, #4
 8008f42:	2000      	movs	r0, #0
 8008f44:	f025 0503 	bic.w	r5, r5, #3
 8008f48:	1b5b      	subs	r3, r3, r5
 8008f4a:	ed72 7a01 	vldmdb	r2!, {s15}
 8008f4e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f56:	dc0a      	bgt.n	8008f6e <forward_relu+0x112>
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8008f5e:	d0db      	beq.n	8008f18 <forward_relu+0xbc>
 8008f60:	ed72 7a01 	vldmdb	r2!, {s15}
 8008f64:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6c:	ddf4      	ble.n	8008f58 <forward_relu+0xfc>
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	ed61 7a01 	vstmdb	r1!, {s15}
 8008f74:	d1e9      	bne.n	8008f4a <forward_relu+0xee>
 8008f76:	e7cf      	b.n	8008f18 <forward_relu+0xbc>
 8008f78:	429d      	cmp	r5, r3
 8008f7a:	d8cd      	bhi.n	8008f18 <forward_relu+0xbc>
 8008f7c:	1b5d      	subs	r5, r3, r5
 8008f7e:	1d1a      	adds	r2, r3, #4
 8008f80:	1d01      	adds	r1, r0, #4
 8008f82:	f025 0503 	bic.w	r5, r5, #3
 8008f86:	1b5b      	subs	r3, r3, r5
 8008f88:	ed72 7a01 	vldmdb	r2!, {s15}
 8008f8c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f94:	db0e      	blt.n	8008fb4 <forward_relu+0x158>
 8008f96:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008fa0:	ed61 7a01 	vstmdb	r1!, {s15}
 8008fa4:	d0b8      	beq.n	8008f18 <forward_relu+0xbc>
 8008fa6:	ed72 7a01 	vldmdb	r2!, {s15}
 8008faa:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb2:	daf0      	bge.n	8008f96 <forward_relu+0x13a>
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	ed61 7a01 	vstmdb	r1!, {s15}
 8008fba:	d1e5      	bne.n	8008f88 <forward_relu+0x12c>
 8008fbc:	e7ac      	b.n	8008f18 <forward_relu+0xbc>
 8008fbe:	6999      	ldr	r1, [r3, #24]
 8008fc0:	6893      	ldr	r3, [r2, #8]
 8008fc2:	6990      	ldr	r0, [r2, #24]
 8008fc4:	0a1b      	lsrs	r3, r3, #8
 8008fc6:	6889      	ldr	r1, [r1, #8]
 8008fc8:	6884      	ldr	r4, [r0, #8]
 8008fca:	d06e      	beq.n	80090aa <forward_relu+0x24e>
 8008fcc:	68d5      	ldr	r5, [r2, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008fd4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008fd8:	429d      	cmp	r5, r3
 8008fda:	fb00 f202 	mul.w	r2, r0, r2
 8008fde:	d1f9      	bne.n	8008fd4 <forward_relu+0x178>
 8008fe0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008fe4:	4413      	add	r3, r2
 8008fe6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008fea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008fee:	4294      	cmp	r4, r2
 8008ff0:	d892      	bhi.n	8008f18 <forward_relu+0xbc>
 8008ff2:	3204      	adds	r2, #4
 8008ff4:	3104      	adds	r1, #4
 8008ff6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80090c0 <forward_relu+0x264>
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	ed72 7a01 	vldmdb	r2!, {s15}
 8009000:	3b08      	subs	r3, #8
 8009002:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8009006:	ed61 7a01 	vstmdb	r1!, {s15}
 800900a:	429c      	cmp	r4, r3
 800900c:	d9f5      	bls.n	8008ffa <forward_relu+0x19e>
 800900e:	bc70      	pop	{r4, r5, r6}
 8009010:	4770      	bx	lr
 8009012:	6993      	ldr	r3, [r2, #24]
 8009014:	6880      	ldr	r0, [r0, #8]
 8009016:	689c      	ldr	r4, [r3, #8]
 8009018:	6893      	ldr	r3, [r2, #8]
 800901a:	0a1b      	lsrs	r3, r3, #8
 800901c:	d047      	beq.n	80090ae <forward_relu+0x252>
 800901e:	68d5      	ldr	r5, [r2, #12]
 8009020:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009024:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009028:	42ab      	cmp	r3, r5
 800902a:	fb02 f101 	mul.w	r1, r2, r1
 800902e:	d1f9      	bne.n	8009024 <forward_relu+0x1c8>
 8009030:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8009034:	68b3      	ldr	r3, [r6, #8]
 8009036:	440a      	add	r2, r1
 8009038:	ed93 7a00 	vldr	s14, [r3]
 800903c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009040:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8009044:	429c      	cmp	r4, r3
 8009046:	f63f af67 	bhi.w	8008f18 <forward_relu+0xbc>
 800904a:	1d02      	adds	r2, r0, #4
 800904c:	3304      	adds	r3, #4
 800904e:	2000      	movs	r0, #0
 8009050:	ed53 7a01 	vldr	s15, [r3, #-4]
 8009054:	1f19      	subs	r1, r3, #4
 8009056:	3b08      	subs	r3, #8
 8009058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800905c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009060:	d406      	bmi.n	8009070 <forward_relu+0x214>
 8009062:	429c      	cmp	r4, r3
 8009064:	f842 0d04 	str.w	r0, [r2, #-4]!
 8009068:	f63f af56 	bhi.w	8008f18 <forward_relu+0xbc>
 800906c:	460b      	mov	r3, r1
 800906e:	e7ef      	b.n	8009050 <forward_relu+0x1f4>
 8009070:	429c      	cmp	r4, r3
 8009072:	ed62 7a01 	vstmdb	r2!, {s15}
 8009076:	f63f af4f 	bhi.w	8008f18 <forward_relu+0xbc>
 800907a:	460b      	mov	r3, r1
 800907c:	e7e8      	b.n	8009050 <forward_relu+0x1f4>
 800907e:	68b3      	ldr	r3, [r6, #8]
 8009080:	ed93 7a02 	vldr	s14, [r3, #8]
 8009084:	edd3 6a00 	vldr	s13, [r3]
 8009088:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800908c:	ed93 6a01 	vldr	s12, [r3, #4]
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	d401      	bmi.n	800909a <forward_relu+0x23e>
 8009096:	462a      	mov	r2, r5
 8009098:	e71e      	b.n	8008ed8 <forward_relu+0x7c>
 800909a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800909e:	462b      	mov	r3, r5
 80090a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a4:	f47f af6a 	bne.w	8008f7c <forward_relu+0x120>
 80090a8:	e748      	b.n	8008f3c <forward_relu+0xe0>
 80090aa:	4622      	mov	r2, r4
 80090ac:	e7a1      	b.n	8008ff2 <forward_relu+0x196>
 80090ae:	68b2      	ldr	r2, [r6, #8]
 80090b0:	4623      	mov	r3, r4
 80090b2:	ed92 7a00 	vldr	s14, [r2]
 80090b6:	e7c8      	b.n	800904a <forward_relu+0x1ee>
 80090b8:	2300      	movs	r3, #0
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	deff      	udf	#255	; 0xff
 80090be:	bf00      	nop
 80090c0:	00000000 	.word	0x00000000

080090c4 <ai_check_custom_types>:
 80090c4:	b082      	sub	sp, #8
 80090c6:	4b12      	ldr	r3, [pc, #72]	; (8009110 <ai_check_custom_types+0x4c>)
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	b118      	cbz	r0, 80090d4 <ai_check_custom_types+0x10>
 80090cc:	7803      	ldrb	r3, [r0, #0]
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d002      	beq.n	80090d8 <ai_check_custom_types+0x14>
 80090d2:	2000      	movs	r0, #0
 80090d4:	b002      	add	sp, #8
 80090d6:	4770      	bx	lr
 80090d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <ai_check_custom_types+0x26>
 80090e0:	2001      	movs	r0, #1
 80090e2:	f080 0001 	eor.w	r0, r0, #1
 80090e6:	b002      	add	sp, #8
 80090e8:	4770      	bx	lr
 80090ea:	7842      	ldrb	r2, [r0, #1]
 80090ec:	3001      	adds	r0, #1
 80090ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d1f4      	bne.n	80090e0 <ai_check_custom_types+0x1c>
 80090f6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80090fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d1ee      	bne.n	80090e0 <ai_check_custom_types+0x1c>
 8009102:	7842      	ldrb	r2, [r0, #1]
 8009104:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009108:	429a      	cmp	r2, r3
 800910a:	d1e9      	bne.n	80090e0 <ai_check_custom_types+0x1c>
 800910c:	2000      	movs	r0, #0
 800910e:	e7e8      	b.n	80090e2 <ai_check_custom_types+0x1e>
 8009110:	84048403 	.word	0x84048403

08009114 <ai_layers_init_all>:
 8009114:	2100      	movs	r1, #0
 8009116:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009118:	b13b      	cbz	r3, 800912a <ai_layers_init_all+0x16>
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	3101      	adds	r1, #1
 800911e:	60d8      	str	r0, [r3, #12]
 8009120:	429a      	cmp	r2, r3
 8009122:	4613      	mov	r3, r2
 8009124:	d001      	beq.n	800912a <ai_layers_init_all+0x16>
 8009126:	2a00      	cmp	r2, #0
 8009128:	d1f6      	bne.n	8009118 <ai_layers_init_all+0x4>
 800912a:	4608      	mov	r0, r1
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop

08009130 <ai_layers_post_init_all>:
 8009130:	b538      	push	{r3, r4, r5, lr}
 8009132:	2500      	movs	r5, #0
 8009134:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009136:	b16c      	cbz	r4, 8009154 <ai_layers_post_init_all+0x24>
 8009138:	6863      	ldr	r3, [r4, #4]
 800913a:	07db      	lsls	r3, r3, #31
 800913c:	d504      	bpl.n	8009148 <ai_layers_post_init_all+0x18>
 800913e:	6a23      	ldr	r3, [r4, #32]
 8009140:	4620      	mov	r0, r4
 8009142:	b10b      	cbz	r3, 8009148 <ai_layers_post_init_all+0x18>
 8009144:	3501      	adds	r5, #1
 8009146:	4798      	blx	r3
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	42a3      	cmp	r3, r4
 800914c:	461c      	mov	r4, r3
 800914e:	d001      	beq.n	8009154 <ai_layers_post_init_all+0x24>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1f0      	bne.n	8009136 <ai_layers_post_init_all+0x6>
 8009154:	4628      	mov	r0, r5
 8009156:	bd38      	pop	{r3, r4, r5, pc}

08009158 <ai_layers_forward_all>:
 8009158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8009160:	4604      	mov	r4, r0
 8009162:	f1b8 0f00 	cmp.w	r8, #0
 8009166:	d02a      	beq.n	80091be <ai_layers_forward_all+0x66>
 8009168:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800916a:	6381      	str	r1, [r0, #56]	; 0x38
 800916c:	b319      	cbz	r1, 80091b6 <ai_layers_forward_all+0x5e>
 800916e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009170:	2001      	movs	r0, #1
 8009172:	47c0      	blx	r8
 8009174:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009176:	b1f6      	cbz	r6, 80091b6 <ai_layers_forward_all+0x5e>
 8009178:	2700      	movs	r7, #0
 800917a:	4631      	mov	r1, r6
 800917c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800917e:	2002      	movs	r0, #2
 8009180:	47c0      	blx	r8
 8009182:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8009184:	4628      	mov	r0, r5
 8009186:	696b      	ldr	r3, [r5, #20]
 8009188:	4798      	blx	r3
 800918a:	692e      	ldr	r6, [r5, #16]
 800918c:	2003      	movs	r0, #3
 800918e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009190:	42b5      	cmp	r5, r6
 8009192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009194:	d007      	beq.n	80091a6 <ai_layers_forward_all+0x4e>
 8009196:	47c0      	blx	r8
 8009198:	3701      	adds	r7, #1
 800919a:	63a6      	str	r6, [r4, #56]	; 0x38
 800919c:	2e00      	cmp	r6, #0
 800919e:	d1ec      	bne.n	800917a <ai_layers_forward_all+0x22>
 80091a0:	4638      	mov	r0, r7
 80091a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a6:	2003      	movs	r0, #3
 80091a8:	3701      	adds	r7, #1
 80091aa:	47c0      	blx	r8
 80091ac:	2300      	movs	r3, #0
 80091ae:	4638      	mov	r0, r7
 80091b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80091b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b6:	2700      	movs	r7, #0
 80091b8:	4638      	mov	r0, r7
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091be:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80091c0:	6385      	str	r5, [r0, #56]	; 0x38
 80091c2:	2d00      	cmp	r5, #0
 80091c4:	d0f7      	beq.n	80091b6 <ai_layers_forward_all+0x5e>
 80091c6:	4647      	mov	r7, r8
 80091c8:	696b      	ldr	r3, [r5, #20]
 80091ca:	4628      	mov	r0, r5
 80091cc:	4798      	blx	r3
 80091ce:	462b      	mov	r3, r5
 80091d0:	692d      	ldr	r5, [r5, #16]
 80091d2:	429d      	cmp	r5, r3
 80091d4:	d004      	beq.n	80091e0 <ai_layers_forward_all+0x88>
 80091d6:	3701      	adds	r7, #1
 80091d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80091da:	2d00      	cmp	r5, #0
 80091dc:	d1f4      	bne.n	80091c8 <ai_layers_forward_all+0x70>
 80091de:	e7df      	b.n	80091a0 <ai_layers_forward_all+0x48>
 80091e0:	2300      	movs	r3, #0
 80091e2:	3701      	adds	r7, #1
 80091e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80091e6:	e7db      	b.n	80091a0 <ai_layers_forward_all+0x48>

080091e8 <lite_dense_if32of32wf32>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	ed2d 8b0c 	vpush	{d8-d13}
 80091f0:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 80091f4:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80091f8:	4287      	cmp	r7, r0
 80091fa:	f240 8105 	bls.w	8009408 <lite_dense_if32of32wf32+0x220>
 80091fe:	f1a6 0810 	sub.w	r8, r6, #16
 8009202:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8009206:	4605      	mov	r5, r0
 8009208:	f006 0b0f 	and.w	fp, r6, #15
 800920c:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009210:	f108 0801 	add.w	r8, r8, #1
 8009214:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8009218:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800921c:	2e0f      	cmp	r6, #15
 800921e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8009434 <lite_dense_if32of32wf32+0x24c>
 8009222:	f240 8102 	bls.w	800942a <lite_dense_if32of32wf32+0x242>
 8009226:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800922a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800922e:	46b6      	mov	lr, r6
 8009230:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8009234:	f1ae 0e10 	sub.w	lr, lr, #16
 8009238:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800923c:	3440      	adds	r4, #64	; 0x40
 800923e:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8009242:	f1be 0f0f 	cmp.w	lr, #15
 8009246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800924a:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800924e:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8009252:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8009256:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800925a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800925e:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8009262:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8009266:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800926a:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800926e:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8009272:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8009276:	eee5 7a86 	vfma.f32	s15, s11, s12
 800927a:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800927e:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8009282:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8009286:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800928a:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800928e:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8009292:	eeed 7a26 	vfma.f32	s15, s26, s13
 8009296:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800929a:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800929e:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 80092a2:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 80092a6:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 80092aa:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 80092ae:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80092b2:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80092b6:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80092ba:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80092be:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80092c2:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80092c6:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80092ca:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80092ce:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80092d2:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80092d6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80092da:	eee9 7a89 	vfma.f32	s15, s19, s18
 80092de:	eee8 7a88 	vfma.f32	s15, s17, s16
 80092e2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80092e6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80092ea:	eee2 7a22 	vfma.f32	s15, s4, s5
 80092ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 80092f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80092f6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80092fa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009302:	d895      	bhi.n	8009230 <lite_dense_if32of32wf32+0x48>
 8009304:	eb02 0e0a 	add.w	lr, r2, sl
 8009308:	465c      	mov	r4, fp
 800930a:	46c4      	mov	ip, r8
 800930c:	2c00      	cmp	r4, #0
 800930e:	d075      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009310:	eddc 6a00 	vldr	s13, [ip]
 8009314:	2c01      	cmp	r4, #1
 8009316:	edde 7a00 	vldr	s15, [lr]
 800931a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800931e:	d06d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009320:	eddc 6a01 	vldr	s13, [ip, #4]
 8009324:	2c02      	cmp	r4, #2
 8009326:	edde 7a01 	vldr	s15, [lr, #4]
 800932a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800932e:	d065      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009330:	eddc 6a02 	vldr	s13, [ip, #8]
 8009334:	2c03      	cmp	r4, #3
 8009336:	edde 7a02 	vldr	s15, [lr, #8]
 800933a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800933e:	d05d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009340:	eddc 6a03 	vldr	s13, [ip, #12]
 8009344:	2c04      	cmp	r4, #4
 8009346:	edde 7a03 	vldr	s15, [lr, #12]
 800934a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800934e:	d055      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009350:	eddc 6a04 	vldr	s13, [ip, #16]
 8009354:	2c05      	cmp	r4, #5
 8009356:	edde 7a04 	vldr	s15, [lr, #16]
 800935a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800935e:	d04d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009360:	eddc 6a05 	vldr	s13, [ip, #20]
 8009364:	2c06      	cmp	r4, #6
 8009366:	edde 7a05 	vldr	s15, [lr, #20]
 800936a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800936e:	d045      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009370:	eddc 6a06 	vldr	s13, [ip, #24]
 8009374:	2c07      	cmp	r4, #7
 8009376:	edde 7a06 	vldr	s15, [lr, #24]
 800937a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800937e:	d03d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009380:	eddc 6a07 	vldr	s13, [ip, #28]
 8009384:	2c08      	cmp	r4, #8
 8009386:	edde 7a07 	vldr	s15, [lr, #28]
 800938a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800938e:	d035      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 8009390:	eddc 6a08 	vldr	s13, [ip, #32]
 8009394:	2c09      	cmp	r4, #9
 8009396:	edde 7a08 	vldr	s15, [lr, #32]
 800939a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800939e:	d02d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 80093a0:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80093a4:	2c0a      	cmp	r4, #10
 80093a6:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80093aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093ae:	d025      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 80093b0:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80093b4:	2c0b      	cmp	r4, #11
 80093b6:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80093ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093be:	d01d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 80093c0:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80093c4:	2c0c      	cmp	r4, #12
 80093c6:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80093ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093ce:	d015      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 80093d0:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80093d4:	3c0d      	subs	r4, #13
 80093d6:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80093da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093de:	d00d      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 80093e0:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80093e4:	2c01      	cmp	r4, #1
 80093e6:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80093ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093ee:	d005      	beq.n	80093fc <lite_dense_if32of32wf32+0x214>
 80093f0:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80093f4:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80093f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80093fc:	eca5 7a01 	vstmia	r5!, {s14}
 8009400:	42af      	cmp	r7, r5
 8009402:	444a      	add	r2, r9
 8009404:	f63f af0a 	bhi.w	800921c <lite_dense_if32of32wf32+0x34>
 8009408:	b15b      	cbz	r3, 8009422 <lite_dense_if32of32wf32+0x23a>
 800940a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800940c:	b14a      	cbz	r2, 8009422 <lite_dense_if32of32wf32+0x23a>
 800940e:	edd0 7a00 	vldr	s15, [r0]
 8009412:	ecb3 7a01 	vldmia	r3!, {s14}
 8009416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800941a:	ece0 7a01 	vstmia	r0!, {s15}
 800941e:	4287      	cmp	r7, r0
 8009420:	d1f5      	bne.n	800940e <lite_dense_if32of32wf32+0x226>
 8009422:	ecbd 8b0c 	vpop	{d8-d13}
 8009426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942a:	4634      	mov	r4, r6
 800942c:	4696      	mov	lr, r2
 800942e:	468c      	mov	ip, r1
 8009430:	e76c      	b.n	800930c <lite_dense_if32of32wf32+0x124>
 8009432:	bf00      	nop
 8009434:	00000000 	.word	0x00000000

08009438 <ai_version_get>:
 8009438:	0212      	lsls	r2, r2, #8
 800943a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800943e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8009442:	4770      	bx	lr

08009444 <get_tensor_byte_size>:
 8009444:	b430      	push	{r4, r5}
 8009446:	6985      	ldr	r5, [r0, #24]
 8009448:	68c4      	ldr	r4, [r0, #12]
 800944a:	6941      	ldr	r1, [r0, #20]
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <get_tensor_byte_size+0x24>)
 800944e:	6828      	ldr	r0, [r5, #0]
 8009450:	4a06      	ldr	r2, [pc, #24]	; (800946c <get_tensor_byte_size+0x28>)
 8009452:	4003      	ands	r3, r0
 8009454:	68c9      	ldr	r1, [r1, #12]
 8009456:	68e0      	ldr	r0, [r4, #12]
 8009458:	4293      	cmp	r3, r2
 800945a:	fb01 f000 	mul.w	r0, r1, r0
 800945e:	d101      	bne.n	8009464 <get_tensor_byte_size+0x20>
 8009460:	3007      	adds	r0, #7
 8009462:	08c0      	lsrs	r0, r0, #3
 8009464:	bc30      	pop	{r4, r5}
 8009466:	4770      	bx	lr
 8009468:	017fffff 	.word	0x017fffff
 800946c:	000400c0 	.word	0x000400c0

08009470 <ai_array_to_buffer_fmt>:
 8009470:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009474:	2b02      	cmp	r3, #2
 8009476:	d050      	beq.n	800951a <ai_array_to_buffer_fmt+0xaa>
 8009478:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800947c:	4b29      	ldr	r3, [pc, #164]	; (8009524 <ai_array_to_buffer_fmt+0xb4>)
 800947e:	429a      	cmp	r2, r3
 8009480:	d00b      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 8009482:	dc1c      	bgt.n	80094be <ai_array_to_buffer_fmt+0x4e>
 8009484:	4b28      	ldr	r3, [pc, #160]	; (8009528 <ai_array_to_buffer_fmt+0xb8>)
 8009486:	429a      	cmp	r2, r3
 8009488:	d007      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 800948a:	dd0b      	ble.n	80094a4 <ai_array_to_buffer_fmt+0x34>
 800948c:	4b27      	ldr	r3, [pc, #156]	; (800952c <ai_array_to_buffer_fmt+0xbc>)
 800948e:	429a      	cmp	r2, r3
 8009490:	d003      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 8009492:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8009496:	429a      	cmp	r2, r3
 8009498:	d131      	bne.n	80094fe <ai_array_to_buffer_fmt+0x8e>
 800949a:	4613      	mov	r3, r2
 800949c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80094a0:	4318      	orrs	r0, r3
 80094a2:	4770      	bx	lr
 80094a4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d0f6      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 80094ac:	dd2c      	ble.n	8009508 <ai_array_to_buffer_fmt+0x98>
 80094ae:	4b20      	ldr	r3, [pc, #128]	; (8009530 <ai_array_to_buffer_fmt+0xc0>)
 80094b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80094b4:	429a      	cmp	r2, r3
 80094b6:	bf18      	it	ne
 80094b8:	2340      	movne	r3, #64	; 0x40
 80094ba:	4318      	orrs	r0, r3
 80094bc:	4770      	bx	lr
 80094be:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <ai_array_to_buffer_fmt+0xc4>)
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d0ea      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 80094c4:	dd0e      	ble.n	80094e4 <ai_array_to_buffer_fmt+0x74>
 80094c6:	4b1c      	ldr	r3, [pc, #112]	; (8009538 <ai_array_to_buffer_fmt+0xc8>)
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d0e6      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 80094cc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d0e2      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 80094d4:	4b19      	ldr	r3, [pc, #100]	; (800953c <ai_array_to_buffer_fmt+0xcc>)
 80094d6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80094da:	429a      	cmp	r2, r3
 80094dc:	bf18      	it	ne
 80094de:	2340      	movne	r3, #64	; 0x40
 80094e0:	4318      	orrs	r0, r3
 80094e2:	4770      	bx	lr
 80094e4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d0d6      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 80094ec:	3307      	adds	r3, #7
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d0d3      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 80094f2:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80094f6:	429a      	cmp	r2, r3
 80094f8:	bf18      	it	ne
 80094fa:	2340      	movne	r3, #64	; 0x40
 80094fc:	e7ce      	b.n	800949c <ai_array_to_buffer_fmt+0x2c>
 80094fe:	4b10      	ldr	r3, [pc, #64]	; (8009540 <ai_array_to_buffer_fmt+0xd0>)
 8009500:	429a      	cmp	r2, r3
 8009502:	bf18      	it	ne
 8009504:	2340      	movne	r3, #64	; 0x40
 8009506:	e7c9      	b.n	800949c <ai_array_to_buffer_fmt+0x2c>
 8009508:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800950c:	429a      	cmp	r2, r3
 800950e:	d0c4      	beq.n	800949a <ai_array_to_buffer_fmt+0x2a>
 8009510:	3380      	adds	r3, #128	; 0x80
 8009512:	429a      	cmp	r2, r3
 8009514:	bf18      	it	ne
 8009516:	2340      	movne	r3, #64	; 0x40
 8009518:	e7c0      	b.n	800949c <ai_array_to_buffer_fmt+0x2c>
 800951a:	4b0a      	ldr	r3, [pc, #40]	; (8009544 <ai_array_to_buffer_fmt+0xd4>)
 800951c:	4003      	ands	r3, r0
 800951e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009522:	e7bb      	b.n	800949c <ai_array_to_buffer_fmt+0x2c>
 8009524:	00840040 	.word	0x00840040
 8009528:	00040840 	.word	0x00040840
 800952c:	00041040 	.word	0x00041040
 8009530:	00040447 	.word	0x00040447
 8009534:	00840840 	.word	0x00840840
 8009538:	00841040 	.word	0x00841040
 800953c:	0084084f 	.word	0x0084084f
 8009540:	0004084f 	.word	0x0004084f
 8009544:	00803fff 	.word	0x00803fff

08009548 <ai_array_get_byte_size>:
 8009548:	b319      	cbz	r1, 8009592 <ai_array_get_byte_size+0x4a>
 800954a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800954e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8009552:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8009556:	11c0      	asrs	r0, r0, #7
 8009558:	fb03 f101 	mul.w	r1, r3, r1
 800955c:	2a04      	cmp	r2, #4
 800955e:	f101 0107 	add.w	r1, r1, #7
 8009562:	f021 0107 	bic.w	r1, r1, #7
 8009566:	fa21 f10c 	lsr.w	r1, r1, ip
 800956a:	d00b      	beq.n	8009584 <ai_array_get_byte_size+0x3c>
 800956c:	2a08      	cmp	r2, #8
 800956e:	d002      	beq.n	8009576 <ai_array_get_byte_size+0x2e>
 8009570:	3107      	adds	r1, #7
 8009572:	08c8      	lsrs	r0, r1, #3
 8009574:	4770      	bx	lr
 8009576:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800957a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800957e:	3107      	adds	r1, #7
 8009580:	08c8      	lsrs	r0, r1, #3
 8009582:	4770      	bx	lr
 8009584:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009588:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800958c:	3107      	adds	r1, #7
 800958e:	08c8      	lsrs	r0, r1, #3
 8009590:	4770      	bx	lr
 8009592:	4608      	mov	r0, r1
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop

08009598 <ai_array_get_data_byte_size>:
 8009598:	b161      	cbz	r1, 80095b4 <ai_array_get_data_byte_size+0x1c>
 800959a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800959e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80095a2:	fb03 f101 	mul.w	r1, r3, r1
 80095a6:	1dc8      	adds	r0, r1, #7
 80095a8:	f020 0007 	bic.w	r0, r0, #7
 80095ac:	40d0      	lsrs	r0, r2
 80095ae:	3007      	adds	r0, #7
 80095b0:	08c0      	lsrs	r0, r0, #3
 80095b2:	4770      	bx	lr
 80095b4:	4608      	mov	r0, r1
 80095b6:	4770      	bx	lr

080095b8 <__errno>:
 80095b8:	4b01      	ldr	r3, [pc, #4]	; (80095c0 <__errno+0x8>)
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	200006a0 	.word	0x200006a0

080095c4 <__libc_init_array>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	4d0d      	ldr	r5, [pc, #52]	; (80095fc <__libc_init_array+0x38>)
 80095c8:	4c0d      	ldr	r4, [pc, #52]	; (8009600 <__libc_init_array+0x3c>)
 80095ca:	1b64      	subs	r4, r4, r5
 80095cc:	10a4      	asrs	r4, r4, #2
 80095ce:	2600      	movs	r6, #0
 80095d0:	42a6      	cmp	r6, r4
 80095d2:	d109      	bne.n	80095e8 <__libc_init_array+0x24>
 80095d4:	4d0b      	ldr	r5, [pc, #44]	; (8009604 <__libc_init_array+0x40>)
 80095d6:	4c0c      	ldr	r4, [pc, #48]	; (8009608 <__libc_init_array+0x44>)
 80095d8:	f000 fc8c 	bl	8009ef4 <_init>
 80095dc:	1b64      	subs	r4, r4, r5
 80095de:	10a4      	asrs	r4, r4, #2
 80095e0:	2600      	movs	r6, #0
 80095e2:	42a6      	cmp	r6, r4
 80095e4:	d105      	bne.n	80095f2 <__libc_init_array+0x2e>
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ec:	4798      	blx	r3
 80095ee:	3601      	adds	r6, #1
 80095f0:	e7ee      	b.n	80095d0 <__libc_init_array+0xc>
 80095f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f6:	4798      	blx	r3
 80095f8:	3601      	adds	r6, #1
 80095fa:	e7f2      	b.n	80095e2 <__libc_init_array+0x1e>
 80095fc:	0800a584 	.word	0x0800a584
 8009600:	0800a584 	.word	0x0800a584
 8009604:	0800a584 	.word	0x0800a584
 8009608:	0800a588 	.word	0x0800a588

0800960c <memcpy>:
 800960c:	440a      	add	r2, r1
 800960e:	4291      	cmp	r1, r2
 8009610:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009614:	d100      	bne.n	8009618 <memcpy+0xc>
 8009616:	4770      	bx	lr
 8009618:	b510      	push	{r4, lr}
 800961a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800961e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009622:	4291      	cmp	r1, r2
 8009624:	d1f9      	bne.n	800961a <memcpy+0xe>
 8009626:	bd10      	pop	{r4, pc}

08009628 <memset>:
 8009628:	4402      	add	r2, r0
 800962a:	4603      	mov	r3, r0
 800962c:	4293      	cmp	r3, r2
 800962e:	d100      	bne.n	8009632 <memset+0xa>
 8009630:	4770      	bx	lr
 8009632:	f803 1b01 	strb.w	r1, [r3], #1
 8009636:	e7f9      	b.n	800962c <memset+0x4>

08009638 <_free_r>:
 8009638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800963a:	2900      	cmp	r1, #0
 800963c:	d044      	beq.n	80096c8 <_free_r+0x90>
 800963e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009642:	9001      	str	r0, [sp, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	f1a1 0404 	sub.w	r4, r1, #4
 800964a:	bfb8      	it	lt
 800964c:	18e4      	addlt	r4, r4, r3
 800964e:	f000 f903 	bl	8009858 <__malloc_lock>
 8009652:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <_free_r+0x94>)
 8009654:	9801      	ldr	r0, [sp, #4]
 8009656:	6813      	ldr	r3, [r2, #0]
 8009658:	b933      	cbnz	r3, 8009668 <_free_r+0x30>
 800965a:	6063      	str	r3, [r4, #4]
 800965c:	6014      	str	r4, [r2, #0]
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009664:	f000 b8fe 	b.w	8009864 <__malloc_unlock>
 8009668:	42a3      	cmp	r3, r4
 800966a:	d908      	bls.n	800967e <_free_r+0x46>
 800966c:	6825      	ldr	r5, [r4, #0]
 800966e:	1961      	adds	r1, r4, r5
 8009670:	428b      	cmp	r3, r1
 8009672:	bf01      	itttt	eq
 8009674:	6819      	ldreq	r1, [r3, #0]
 8009676:	685b      	ldreq	r3, [r3, #4]
 8009678:	1949      	addeq	r1, r1, r5
 800967a:	6021      	streq	r1, [r4, #0]
 800967c:	e7ed      	b.n	800965a <_free_r+0x22>
 800967e:	461a      	mov	r2, r3
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	b10b      	cbz	r3, 8009688 <_free_r+0x50>
 8009684:	42a3      	cmp	r3, r4
 8009686:	d9fa      	bls.n	800967e <_free_r+0x46>
 8009688:	6811      	ldr	r1, [r2, #0]
 800968a:	1855      	adds	r5, r2, r1
 800968c:	42a5      	cmp	r5, r4
 800968e:	d10b      	bne.n	80096a8 <_free_r+0x70>
 8009690:	6824      	ldr	r4, [r4, #0]
 8009692:	4421      	add	r1, r4
 8009694:	1854      	adds	r4, r2, r1
 8009696:	42a3      	cmp	r3, r4
 8009698:	6011      	str	r1, [r2, #0]
 800969a:	d1e0      	bne.n	800965e <_free_r+0x26>
 800969c:	681c      	ldr	r4, [r3, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	6053      	str	r3, [r2, #4]
 80096a2:	4421      	add	r1, r4
 80096a4:	6011      	str	r1, [r2, #0]
 80096a6:	e7da      	b.n	800965e <_free_r+0x26>
 80096a8:	d902      	bls.n	80096b0 <_free_r+0x78>
 80096aa:	230c      	movs	r3, #12
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	e7d6      	b.n	800965e <_free_r+0x26>
 80096b0:	6825      	ldr	r5, [r4, #0]
 80096b2:	1961      	adds	r1, r4, r5
 80096b4:	428b      	cmp	r3, r1
 80096b6:	bf04      	itt	eq
 80096b8:	6819      	ldreq	r1, [r3, #0]
 80096ba:	685b      	ldreq	r3, [r3, #4]
 80096bc:	6063      	str	r3, [r4, #4]
 80096be:	bf04      	itt	eq
 80096c0:	1949      	addeq	r1, r1, r5
 80096c2:	6021      	streq	r1, [r4, #0]
 80096c4:	6054      	str	r4, [r2, #4]
 80096c6:	e7ca      	b.n	800965e <_free_r+0x26>
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	2000159c 	.word	0x2000159c

080096d0 <sbrk_aligned>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	4e0e      	ldr	r6, [pc, #56]	; (800970c <sbrk_aligned+0x3c>)
 80096d4:	460c      	mov	r4, r1
 80096d6:	6831      	ldr	r1, [r6, #0]
 80096d8:	4605      	mov	r5, r0
 80096da:	b911      	cbnz	r1, 80096e2 <sbrk_aligned+0x12>
 80096dc:	f000 f88c 	bl	80097f8 <_sbrk_r>
 80096e0:	6030      	str	r0, [r6, #0]
 80096e2:	4621      	mov	r1, r4
 80096e4:	4628      	mov	r0, r5
 80096e6:	f000 f887 	bl	80097f8 <_sbrk_r>
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	d00a      	beq.n	8009704 <sbrk_aligned+0x34>
 80096ee:	1cc4      	adds	r4, r0, #3
 80096f0:	f024 0403 	bic.w	r4, r4, #3
 80096f4:	42a0      	cmp	r0, r4
 80096f6:	d007      	beq.n	8009708 <sbrk_aligned+0x38>
 80096f8:	1a21      	subs	r1, r4, r0
 80096fa:	4628      	mov	r0, r5
 80096fc:	f000 f87c 	bl	80097f8 <_sbrk_r>
 8009700:	3001      	adds	r0, #1
 8009702:	d101      	bne.n	8009708 <sbrk_aligned+0x38>
 8009704:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009708:	4620      	mov	r0, r4
 800970a:	bd70      	pop	{r4, r5, r6, pc}
 800970c:	200015a0 	.word	0x200015a0

08009710 <_malloc_r>:
 8009710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009714:	1ccd      	adds	r5, r1, #3
 8009716:	f025 0503 	bic.w	r5, r5, #3
 800971a:	3508      	adds	r5, #8
 800971c:	2d0c      	cmp	r5, #12
 800971e:	bf38      	it	cc
 8009720:	250c      	movcc	r5, #12
 8009722:	2d00      	cmp	r5, #0
 8009724:	4607      	mov	r7, r0
 8009726:	db01      	blt.n	800972c <_malloc_r+0x1c>
 8009728:	42a9      	cmp	r1, r5
 800972a:	d905      	bls.n	8009738 <_malloc_r+0x28>
 800972c:	230c      	movs	r3, #12
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	2600      	movs	r6, #0
 8009732:	4630      	mov	r0, r6
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009738:	4e2e      	ldr	r6, [pc, #184]	; (80097f4 <_malloc_r+0xe4>)
 800973a:	f000 f88d 	bl	8009858 <__malloc_lock>
 800973e:	6833      	ldr	r3, [r6, #0]
 8009740:	461c      	mov	r4, r3
 8009742:	bb34      	cbnz	r4, 8009792 <_malloc_r+0x82>
 8009744:	4629      	mov	r1, r5
 8009746:	4638      	mov	r0, r7
 8009748:	f7ff ffc2 	bl	80096d0 <sbrk_aligned>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	4604      	mov	r4, r0
 8009750:	d14d      	bne.n	80097ee <_malloc_r+0xde>
 8009752:	6834      	ldr	r4, [r6, #0]
 8009754:	4626      	mov	r6, r4
 8009756:	2e00      	cmp	r6, #0
 8009758:	d140      	bne.n	80097dc <_malloc_r+0xcc>
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	4631      	mov	r1, r6
 800975e:	4638      	mov	r0, r7
 8009760:	eb04 0803 	add.w	r8, r4, r3
 8009764:	f000 f848 	bl	80097f8 <_sbrk_r>
 8009768:	4580      	cmp	r8, r0
 800976a:	d13a      	bne.n	80097e2 <_malloc_r+0xd2>
 800976c:	6821      	ldr	r1, [r4, #0]
 800976e:	3503      	adds	r5, #3
 8009770:	1a6d      	subs	r5, r5, r1
 8009772:	f025 0503 	bic.w	r5, r5, #3
 8009776:	3508      	adds	r5, #8
 8009778:	2d0c      	cmp	r5, #12
 800977a:	bf38      	it	cc
 800977c:	250c      	movcc	r5, #12
 800977e:	4629      	mov	r1, r5
 8009780:	4638      	mov	r0, r7
 8009782:	f7ff ffa5 	bl	80096d0 <sbrk_aligned>
 8009786:	3001      	adds	r0, #1
 8009788:	d02b      	beq.n	80097e2 <_malloc_r+0xd2>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	442b      	add	r3, r5
 800978e:	6023      	str	r3, [r4, #0]
 8009790:	e00e      	b.n	80097b0 <_malloc_r+0xa0>
 8009792:	6822      	ldr	r2, [r4, #0]
 8009794:	1b52      	subs	r2, r2, r5
 8009796:	d41e      	bmi.n	80097d6 <_malloc_r+0xc6>
 8009798:	2a0b      	cmp	r2, #11
 800979a:	d916      	bls.n	80097ca <_malloc_r+0xba>
 800979c:	1961      	adds	r1, r4, r5
 800979e:	42a3      	cmp	r3, r4
 80097a0:	6025      	str	r5, [r4, #0]
 80097a2:	bf18      	it	ne
 80097a4:	6059      	strne	r1, [r3, #4]
 80097a6:	6863      	ldr	r3, [r4, #4]
 80097a8:	bf08      	it	eq
 80097aa:	6031      	streq	r1, [r6, #0]
 80097ac:	5162      	str	r2, [r4, r5]
 80097ae:	604b      	str	r3, [r1, #4]
 80097b0:	4638      	mov	r0, r7
 80097b2:	f104 060b 	add.w	r6, r4, #11
 80097b6:	f000 f855 	bl	8009864 <__malloc_unlock>
 80097ba:	f026 0607 	bic.w	r6, r6, #7
 80097be:	1d23      	adds	r3, r4, #4
 80097c0:	1af2      	subs	r2, r6, r3
 80097c2:	d0b6      	beq.n	8009732 <_malloc_r+0x22>
 80097c4:	1b9b      	subs	r3, r3, r6
 80097c6:	50a3      	str	r3, [r4, r2]
 80097c8:	e7b3      	b.n	8009732 <_malloc_r+0x22>
 80097ca:	6862      	ldr	r2, [r4, #4]
 80097cc:	42a3      	cmp	r3, r4
 80097ce:	bf0c      	ite	eq
 80097d0:	6032      	streq	r2, [r6, #0]
 80097d2:	605a      	strne	r2, [r3, #4]
 80097d4:	e7ec      	b.n	80097b0 <_malloc_r+0xa0>
 80097d6:	4623      	mov	r3, r4
 80097d8:	6864      	ldr	r4, [r4, #4]
 80097da:	e7b2      	b.n	8009742 <_malloc_r+0x32>
 80097dc:	4634      	mov	r4, r6
 80097de:	6876      	ldr	r6, [r6, #4]
 80097e0:	e7b9      	b.n	8009756 <_malloc_r+0x46>
 80097e2:	230c      	movs	r3, #12
 80097e4:	603b      	str	r3, [r7, #0]
 80097e6:	4638      	mov	r0, r7
 80097e8:	f000 f83c 	bl	8009864 <__malloc_unlock>
 80097ec:	e7a1      	b.n	8009732 <_malloc_r+0x22>
 80097ee:	6025      	str	r5, [r4, #0]
 80097f0:	e7de      	b.n	80097b0 <_malloc_r+0xa0>
 80097f2:	bf00      	nop
 80097f4:	2000159c 	.word	0x2000159c

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 fbbe 	bl	8001f84 <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	200015a4 	.word	0x200015a4

08009818 <siprintf>:
 8009818:	b40e      	push	{r1, r2, r3}
 800981a:	b500      	push	{lr}
 800981c:	b09c      	sub	sp, #112	; 0x70
 800981e:	ab1d      	add	r3, sp, #116	; 0x74
 8009820:	9002      	str	r0, [sp, #8]
 8009822:	9006      	str	r0, [sp, #24]
 8009824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009828:	4809      	ldr	r0, [pc, #36]	; (8009850 <siprintf+0x38>)
 800982a:	9107      	str	r1, [sp, #28]
 800982c:	9104      	str	r1, [sp, #16]
 800982e:	4909      	ldr	r1, [pc, #36]	; (8009854 <siprintf+0x3c>)
 8009830:	f853 2b04 	ldr.w	r2, [r3], #4
 8009834:	9105      	str	r1, [sp, #20]
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	a902      	add	r1, sp, #8
 800983c:	f000 f8a2 	bl	8009984 <_svfiprintf_r>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	b01c      	add	sp, #112	; 0x70
 8009848:	f85d eb04 	ldr.w	lr, [sp], #4
 800984c:	b003      	add	sp, #12
 800984e:	4770      	bx	lr
 8009850:	200006a0 	.word	0x200006a0
 8009854:	ffff0208 	.word	0xffff0208

08009858 <__malloc_lock>:
 8009858:	4801      	ldr	r0, [pc, #4]	; (8009860 <__malloc_lock+0x8>)
 800985a:	f000 bb27 	b.w	8009eac <__retarget_lock_acquire_recursive>
 800985e:	bf00      	nop
 8009860:	200015a8 	.word	0x200015a8

08009864 <__malloc_unlock>:
 8009864:	4801      	ldr	r0, [pc, #4]	; (800986c <__malloc_unlock+0x8>)
 8009866:	f000 bb22 	b.w	8009eae <__retarget_lock_release_recursive>
 800986a:	bf00      	nop
 800986c:	200015a8 	.word	0x200015a8

08009870 <_realloc_r>:
 8009870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009874:	4680      	mov	r8, r0
 8009876:	4614      	mov	r4, r2
 8009878:	460e      	mov	r6, r1
 800987a:	b921      	cbnz	r1, 8009886 <_realloc_r+0x16>
 800987c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009880:	4611      	mov	r1, r2
 8009882:	f7ff bf45 	b.w	8009710 <_malloc_r>
 8009886:	b92a      	cbnz	r2, 8009894 <_realloc_r+0x24>
 8009888:	f7ff fed6 	bl	8009638 <_free_r>
 800988c:	4625      	mov	r5, r4
 800988e:	4628      	mov	r0, r5
 8009890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009894:	f000 fb26 	bl	8009ee4 <_malloc_usable_size_r>
 8009898:	4284      	cmp	r4, r0
 800989a:	4607      	mov	r7, r0
 800989c:	d802      	bhi.n	80098a4 <_realloc_r+0x34>
 800989e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098a2:	d812      	bhi.n	80098ca <_realloc_r+0x5a>
 80098a4:	4621      	mov	r1, r4
 80098a6:	4640      	mov	r0, r8
 80098a8:	f7ff ff32 	bl	8009710 <_malloc_r>
 80098ac:	4605      	mov	r5, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0ed      	beq.n	800988e <_realloc_r+0x1e>
 80098b2:	42bc      	cmp	r4, r7
 80098b4:	4622      	mov	r2, r4
 80098b6:	4631      	mov	r1, r6
 80098b8:	bf28      	it	cs
 80098ba:	463a      	movcs	r2, r7
 80098bc:	f7ff fea6 	bl	800960c <memcpy>
 80098c0:	4631      	mov	r1, r6
 80098c2:	4640      	mov	r0, r8
 80098c4:	f7ff feb8 	bl	8009638 <_free_r>
 80098c8:	e7e1      	b.n	800988e <_realloc_r+0x1e>
 80098ca:	4635      	mov	r5, r6
 80098cc:	e7df      	b.n	800988e <_realloc_r+0x1e>

080098ce <__ssputs_r>:
 80098ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d2:	688e      	ldr	r6, [r1, #8]
 80098d4:	429e      	cmp	r6, r3
 80098d6:	4682      	mov	sl, r0
 80098d8:	460c      	mov	r4, r1
 80098da:	4690      	mov	r8, r2
 80098dc:	461f      	mov	r7, r3
 80098de:	d838      	bhi.n	8009952 <__ssputs_r+0x84>
 80098e0:	898a      	ldrh	r2, [r1, #12]
 80098e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098e6:	d032      	beq.n	800994e <__ssputs_r+0x80>
 80098e8:	6825      	ldr	r5, [r4, #0]
 80098ea:	6909      	ldr	r1, [r1, #16]
 80098ec:	eba5 0901 	sub.w	r9, r5, r1
 80098f0:	6965      	ldr	r5, [r4, #20]
 80098f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098fa:	3301      	adds	r3, #1
 80098fc:	444b      	add	r3, r9
 80098fe:	106d      	asrs	r5, r5, #1
 8009900:	429d      	cmp	r5, r3
 8009902:	bf38      	it	cc
 8009904:	461d      	movcc	r5, r3
 8009906:	0553      	lsls	r3, r2, #21
 8009908:	d531      	bpl.n	800996e <__ssputs_r+0xa0>
 800990a:	4629      	mov	r1, r5
 800990c:	f7ff ff00 	bl	8009710 <_malloc_r>
 8009910:	4606      	mov	r6, r0
 8009912:	b950      	cbnz	r0, 800992a <__ssputs_r+0x5c>
 8009914:	230c      	movs	r3, #12
 8009916:	f8ca 3000 	str.w	r3, [sl]
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800992a:	6921      	ldr	r1, [r4, #16]
 800992c:	464a      	mov	r2, r9
 800992e:	f7ff fe6d 	bl	800960c <memcpy>
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	6126      	str	r6, [r4, #16]
 8009940:	6165      	str	r5, [r4, #20]
 8009942:	444e      	add	r6, r9
 8009944:	eba5 0509 	sub.w	r5, r5, r9
 8009948:	6026      	str	r6, [r4, #0]
 800994a:	60a5      	str	r5, [r4, #8]
 800994c:	463e      	mov	r6, r7
 800994e:	42be      	cmp	r6, r7
 8009950:	d900      	bls.n	8009954 <__ssputs_r+0x86>
 8009952:	463e      	mov	r6, r7
 8009954:	6820      	ldr	r0, [r4, #0]
 8009956:	4632      	mov	r2, r6
 8009958:	4641      	mov	r1, r8
 800995a:	f000 faa9 	bl	8009eb0 <memmove>
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	1b9b      	subs	r3, r3, r6
 8009962:	60a3      	str	r3, [r4, #8]
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	4433      	add	r3, r6
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	2000      	movs	r0, #0
 800996c:	e7db      	b.n	8009926 <__ssputs_r+0x58>
 800996e:	462a      	mov	r2, r5
 8009970:	f7ff ff7e 	bl	8009870 <_realloc_r>
 8009974:	4606      	mov	r6, r0
 8009976:	2800      	cmp	r0, #0
 8009978:	d1e1      	bne.n	800993e <__ssputs_r+0x70>
 800997a:	6921      	ldr	r1, [r4, #16]
 800997c:	4650      	mov	r0, sl
 800997e:	f7ff fe5b 	bl	8009638 <_free_r>
 8009982:	e7c7      	b.n	8009914 <__ssputs_r+0x46>

08009984 <_svfiprintf_r>:
 8009984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009988:	4698      	mov	r8, r3
 800998a:	898b      	ldrh	r3, [r1, #12]
 800998c:	061b      	lsls	r3, r3, #24
 800998e:	b09d      	sub	sp, #116	; 0x74
 8009990:	4607      	mov	r7, r0
 8009992:	460d      	mov	r5, r1
 8009994:	4614      	mov	r4, r2
 8009996:	d50e      	bpl.n	80099b6 <_svfiprintf_r+0x32>
 8009998:	690b      	ldr	r3, [r1, #16]
 800999a:	b963      	cbnz	r3, 80099b6 <_svfiprintf_r+0x32>
 800999c:	2140      	movs	r1, #64	; 0x40
 800999e:	f7ff feb7 	bl	8009710 <_malloc_r>
 80099a2:	6028      	str	r0, [r5, #0]
 80099a4:	6128      	str	r0, [r5, #16]
 80099a6:	b920      	cbnz	r0, 80099b2 <_svfiprintf_r+0x2e>
 80099a8:	230c      	movs	r3, #12
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099b0:	e0d1      	b.n	8009b56 <_svfiprintf_r+0x1d2>
 80099b2:	2340      	movs	r3, #64	; 0x40
 80099b4:	616b      	str	r3, [r5, #20]
 80099b6:	2300      	movs	r3, #0
 80099b8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ba:	2320      	movs	r3, #32
 80099bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099c4:	2330      	movs	r3, #48	; 0x30
 80099c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b70 <_svfiprintf_r+0x1ec>
 80099ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ce:	f04f 0901 	mov.w	r9, #1
 80099d2:	4623      	mov	r3, r4
 80099d4:	469a      	mov	sl, r3
 80099d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099da:	b10a      	cbz	r2, 80099e0 <_svfiprintf_r+0x5c>
 80099dc:	2a25      	cmp	r2, #37	; 0x25
 80099de:	d1f9      	bne.n	80099d4 <_svfiprintf_r+0x50>
 80099e0:	ebba 0b04 	subs.w	fp, sl, r4
 80099e4:	d00b      	beq.n	80099fe <_svfiprintf_r+0x7a>
 80099e6:	465b      	mov	r3, fp
 80099e8:	4622      	mov	r2, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	4638      	mov	r0, r7
 80099ee:	f7ff ff6e 	bl	80098ce <__ssputs_r>
 80099f2:	3001      	adds	r0, #1
 80099f4:	f000 80aa 	beq.w	8009b4c <_svfiprintf_r+0x1c8>
 80099f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099fa:	445a      	add	r2, fp
 80099fc:	9209      	str	r2, [sp, #36]	; 0x24
 80099fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80a2 	beq.w	8009b4c <_svfiprintf_r+0x1c8>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a12:	f10a 0a01 	add.w	sl, sl, #1
 8009a16:	9304      	str	r3, [sp, #16]
 8009a18:	9307      	str	r3, [sp, #28]
 8009a1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a20:	4654      	mov	r4, sl
 8009a22:	2205      	movs	r2, #5
 8009a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a28:	4851      	ldr	r0, [pc, #324]	; (8009b70 <_svfiprintf_r+0x1ec>)
 8009a2a:	f7f6 fc09 	bl	8000240 <memchr>
 8009a2e:	9a04      	ldr	r2, [sp, #16]
 8009a30:	b9d8      	cbnz	r0, 8009a6a <_svfiprintf_r+0xe6>
 8009a32:	06d0      	lsls	r0, r2, #27
 8009a34:	bf44      	itt	mi
 8009a36:	2320      	movmi	r3, #32
 8009a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a3c:	0711      	lsls	r1, r2, #28
 8009a3e:	bf44      	itt	mi
 8009a40:	232b      	movmi	r3, #43	; 0x2b
 8009a42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a46:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a4c:	d015      	beq.n	8009a7a <_svfiprintf_r+0xf6>
 8009a4e:	9a07      	ldr	r2, [sp, #28]
 8009a50:	4654      	mov	r4, sl
 8009a52:	2000      	movs	r0, #0
 8009a54:	f04f 0c0a 	mov.w	ip, #10
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5e:	3b30      	subs	r3, #48	; 0x30
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d94e      	bls.n	8009b02 <_svfiprintf_r+0x17e>
 8009a64:	b1b0      	cbz	r0, 8009a94 <_svfiprintf_r+0x110>
 8009a66:	9207      	str	r2, [sp, #28]
 8009a68:	e014      	b.n	8009a94 <_svfiprintf_r+0x110>
 8009a6a:	eba0 0308 	sub.w	r3, r0, r8
 8009a6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a72:	4313      	orrs	r3, r2
 8009a74:	9304      	str	r3, [sp, #16]
 8009a76:	46a2      	mov	sl, r4
 8009a78:	e7d2      	b.n	8009a20 <_svfiprintf_r+0x9c>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	1d19      	adds	r1, r3, #4
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	9103      	str	r1, [sp, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bfbb      	ittet	lt
 8009a86:	425b      	neglt	r3, r3
 8009a88:	f042 0202 	orrlt.w	r2, r2, #2
 8009a8c:	9307      	strge	r3, [sp, #28]
 8009a8e:	9307      	strlt	r3, [sp, #28]
 8009a90:	bfb8      	it	lt
 8009a92:	9204      	strlt	r2, [sp, #16]
 8009a94:	7823      	ldrb	r3, [r4, #0]
 8009a96:	2b2e      	cmp	r3, #46	; 0x2e
 8009a98:	d10c      	bne.n	8009ab4 <_svfiprintf_r+0x130>
 8009a9a:	7863      	ldrb	r3, [r4, #1]
 8009a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9e:	d135      	bne.n	8009b0c <_svfiprintf_r+0x188>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	1d1a      	adds	r2, r3, #4
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	9203      	str	r2, [sp, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	bfb8      	it	lt
 8009aac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ab0:	3402      	adds	r4, #2
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b80 <_svfiprintf_r+0x1fc>
 8009ab8:	7821      	ldrb	r1, [r4, #0]
 8009aba:	2203      	movs	r2, #3
 8009abc:	4650      	mov	r0, sl
 8009abe:	f7f6 fbbf 	bl	8000240 <memchr>
 8009ac2:	b140      	cbz	r0, 8009ad6 <_svfiprintf_r+0x152>
 8009ac4:	2340      	movs	r3, #64	; 0x40
 8009ac6:	eba0 000a 	sub.w	r0, r0, sl
 8009aca:	fa03 f000 	lsl.w	r0, r3, r0
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	4303      	orrs	r3, r0
 8009ad2:	3401      	adds	r4, #1
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ada:	4826      	ldr	r0, [pc, #152]	; (8009b74 <_svfiprintf_r+0x1f0>)
 8009adc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae0:	2206      	movs	r2, #6
 8009ae2:	f7f6 fbad 	bl	8000240 <memchr>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d038      	beq.n	8009b5c <_svfiprintf_r+0x1d8>
 8009aea:	4b23      	ldr	r3, [pc, #140]	; (8009b78 <_svfiprintf_r+0x1f4>)
 8009aec:	bb1b      	cbnz	r3, 8009b36 <_svfiprintf_r+0x1b2>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	3307      	adds	r3, #7
 8009af2:	f023 0307 	bic.w	r3, r3, #7
 8009af6:	3308      	adds	r3, #8
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afc:	4433      	add	r3, r6
 8009afe:	9309      	str	r3, [sp, #36]	; 0x24
 8009b00:	e767      	b.n	80099d2 <_svfiprintf_r+0x4e>
 8009b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b06:	460c      	mov	r4, r1
 8009b08:	2001      	movs	r0, #1
 8009b0a:	e7a5      	b.n	8009a58 <_svfiprintf_r+0xd4>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	3401      	adds	r4, #1
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	4619      	mov	r1, r3
 8009b14:	f04f 0c0a 	mov.w	ip, #10
 8009b18:	4620      	mov	r0, r4
 8009b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b1e:	3a30      	subs	r2, #48	; 0x30
 8009b20:	2a09      	cmp	r2, #9
 8009b22:	d903      	bls.n	8009b2c <_svfiprintf_r+0x1a8>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0c5      	beq.n	8009ab4 <_svfiprintf_r+0x130>
 8009b28:	9105      	str	r1, [sp, #20]
 8009b2a:	e7c3      	b.n	8009ab4 <_svfiprintf_r+0x130>
 8009b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b30:	4604      	mov	r4, r0
 8009b32:	2301      	movs	r3, #1
 8009b34:	e7f0      	b.n	8009b18 <_svfiprintf_r+0x194>
 8009b36:	ab03      	add	r3, sp, #12
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4b0f      	ldr	r3, [pc, #60]	; (8009b7c <_svfiprintf_r+0x1f8>)
 8009b3e:	a904      	add	r1, sp, #16
 8009b40:	4638      	mov	r0, r7
 8009b42:	f3af 8000 	nop.w
 8009b46:	1c42      	adds	r2, r0, #1
 8009b48:	4606      	mov	r6, r0
 8009b4a:	d1d6      	bne.n	8009afa <_svfiprintf_r+0x176>
 8009b4c:	89ab      	ldrh	r3, [r5, #12]
 8009b4e:	065b      	lsls	r3, r3, #25
 8009b50:	f53f af2c 	bmi.w	80099ac <_svfiprintf_r+0x28>
 8009b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b56:	b01d      	add	sp, #116	; 0x74
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	ab03      	add	r3, sp, #12
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	462a      	mov	r2, r5
 8009b62:	4b06      	ldr	r3, [pc, #24]	; (8009b7c <_svfiprintf_r+0x1f8>)
 8009b64:	a904      	add	r1, sp, #16
 8009b66:	4638      	mov	r0, r7
 8009b68:	f000 f87a 	bl	8009c60 <_printf_i>
 8009b6c:	e7eb      	b.n	8009b46 <_svfiprintf_r+0x1c2>
 8009b6e:	bf00      	nop
 8009b70:	0800a548 	.word	0x0800a548
 8009b74:	0800a552 	.word	0x0800a552
 8009b78:	00000000 	.word	0x00000000
 8009b7c:	080098cf 	.word	0x080098cf
 8009b80:	0800a54e 	.word	0x0800a54e

08009b84 <_printf_common>:
 8009b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b88:	4616      	mov	r6, r2
 8009b8a:	4699      	mov	r9, r3
 8009b8c:	688a      	ldr	r2, [r1, #8]
 8009b8e:	690b      	ldr	r3, [r1, #16]
 8009b90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	bfb8      	it	lt
 8009b98:	4613      	movlt	r3, r2
 8009b9a:	6033      	str	r3, [r6, #0]
 8009b9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	b10a      	cbz	r2, 8009baa <_printf_common+0x26>
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	0699      	lsls	r1, r3, #26
 8009bae:	bf42      	ittt	mi
 8009bb0:	6833      	ldrmi	r3, [r6, #0]
 8009bb2:	3302      	addmi	r3, #2
 8009bb4:	6033      	strmi	r3, [r6, #0]
 8009bb6:	6825      	ldr	r5, [r4, #0]
 8009bb8:	f015 0506 	ands.w	r5, r5, #6
 8009bbc:	d106      	bne.n	8009bcc <_printf_common+0x48>
 8009bbe:	f104 0a19 	add.w	sl, r4, #25
 8009bc2:	68e3      	ldr	r3, [r4, #12]
 8009bc4:	6832      	ldr	r2, [r6, #0]
 8009bc6:	1a9b      	subs	r3, r3, r2
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	dc26      	bgt.n	8009c1a <_printf_common+0x96>
 8009bcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bd0:	1e13      	subs	r3, r2, #0
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	bf18      	it	ne
 8009bd6:	2301      	movne	r3, #1
 8009bd8:	0692      	lsls	r2, r2, #26
 8009bda:	d42b      	bmi.n	8009c34 <_printf_common+0xb0>
 8009bdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009be0:	4649      	mov	r1, r9
 8009be2:	4638      	mov	r0, r7
 8009be4:	47c0      	blx	r8
 8009be6:	3001      	adds	r0, #1
 8009be8:	d01e      	beq.n	8009c28 <_printf_common+0xa4>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	68e5      	ldr	r5, [r4, #12]
 8009bee:	6832      	ldr	r2, [r6, #0]
 8009bf0:	f003 0306 	and.w	r3, r3, #6
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	bf08      	it	eq
 8009bf8:	1aad      	subeq	r5, r5, r2
 8009bfa:	68a3      	ldr	r3, [r4, #8]
 8009bfc:	6922      	ldr	r2, [r4, #16]
 8009bfe:	bf0c      	ite	eq
 8009c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c04:	2500      	movne	r5, #0
 8009c06:	4293      	cmp	r3, r2
 8009c08:	bfc4      	itt	gt
 8009c0a:	1a9b      	subgt	r3, r3, r2
 8009c0c:	18ed      	addgt	r5, r5, r3
 8009c0e:	2600      	movs	r6, #0
 8009c10:	341a      	adds	r4, #26
 8009c12:	42b5      	cmp	r5, r6
 8009c14:	d11a      	bne.n	8009c4c <_printf_common+0xc8>
 8009c16:	2000      	movs	r0, #0
 8009c18:	e008      	b.n	8009c2c <_printf_common+0xa8>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4652      	mov	r2, sl
 8009c1e:	4649      	mov	r1, r9
 8009c20:	4638      	mov	r0, r7
 8009c22:	47c0      	blx	r8
 8009c24:	3001      	adds	r0, #1
 8009c26:	d103      	bne.n	8009c30 <_printf_common+0xac>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c30:	3501      	adds	r5, #1
 8009c32:	e7c6      	b.n	8009bc2 <_printf_common+0x3e>
 8009c34:	18e1      	adds	r1, r4, r3
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	2030      	movs	r0, #48	; 0x30
 8009c3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c3e:	4422      	add	r2, r4
 8009c40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c48:	3302      	adds	r3, #2
 8009c4a:	e7c7      	b.n	8009bdc <_printf_common+0x58>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	4622      	mov	r2, r4
 8009c50:	4649      	mov	r1, r9
 8009c52:	4638      	mov	r0, r7
 8009c54:	47c0      	blx	r8
 8009c56:	3001      	adds	r0, #1
 8009c58:	d0e6      	beq.n	8009c28 <_printf_common+0xa4>
 8009c5a:	3601      	adds	r6, #1
 8009c5c:	e7d9      	b.n	8009c12 <_printf_common+0x8e>
	...

08009c60 <_printf_i>:
 8009c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c64:	7e0f      	ldrb	r7, [r1, #24]
 8009c66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c68:	2f78      	cmp	r7, #120	; 0x78
 8009c6a:	4691      	mov	r9, r2
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	469a      	mov	sl, r3
 8009c72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c76:	d807      	bhi.n	8009c88 <_printf_i+0x28>
 8009c78:	2f62      	cmp	r7, #98	; 0x62
 8009c7a:	d80a      	bhi.n	8009c92 <_printf_i+0x32>
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	f000 80d8 	beq.w	8009e32 <_printf_i+0x1d2>
 8009c82:	2f58      	cmp	r7, #88	; 0x58
 8009c84:	f000 80a3 	beq.w	8009dce <_printf_i+0x16e>
 8009c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c90:	e03a      	b.n	8009d08 <_printf_i+0xa8>
 8009c92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c96:	2b15      	cmp	r3, #21
 8009c98:	d8f6      	bhi.n	8009c88 <_printf_i+0x28>
 8009c9a:	a101      	add	r1, pc, #4	; (adr r1, 8009ca0 <_printf_i+0x40>)
 8009c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ca0:	08009cf9 	.word	0x08009cf9
 8009ca4:	08009d0d 	.word	0x08009d0d
 8009ca8:	08009c89 	.word	0x08009c89
 8009cac:	08009c89 	.word	0x08009c89
 8009cb0:	08009c89 	.word	0x08009c89
 8009cb4:	08009c89 	.word	0x08009c89
 8009cb8:	08009d0d 	.word	0x08009d0d
 8009cbc:	08009c89 	.word	0x08009c89
 8009cc0:	08009c89 	.word	0x08009c89
 8009cc4:	08009c89 	.word	0x08009c89
 8009cc8:	08009c89 	.word	0x08009c89
 8009ccc:	08009e19 	.word	0x08009e19
 8009cd0:	08009d3d 	.word	0x08009d3d
 8009cd4:	08009dfb 	.word	0x08009dfb
 8009cd8:	08009c89 	.word	0x08009c89
 8009cdc:	08009c89 	.word	0x08009c89
 8009ce0:	08009e3b 	.word	0x08009e3b
 8009ce4:	08009c89 	.word	0x08009c89
 8009ce8:	08009d3d 	.word	0x08009d3d
 8009cec:	08009c89 	.word	0x08009c89
 8009cf0:	08009c89 	.word	0x08009c89
 8009cf4:	08009e03 	.word	0x08009e03
 8009cf8:	682b      	ldr	r3, [r5, #0]
 8009cfa:	1d1a      	adds	r2, r3, #4
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	602a      	str	r2, [r5, #0]
 8009d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e0a3      	b.n	8009e54 <_printf_i+0x1f4>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	6829      	ldr	r1, [r5, #0]
 8009d10:	0606      	lsls	r6, r0, #24
 8009d12:	f101 0304 	add.w	r3, r1, #4
 8009d16:	d50a      	bpl.n	8009d2e <_printf_i+0xce>
 8009d18:	680e      	ldr	r6, [r1, #0]
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	2e00      	cmp	r6, #0
 8009d1e:	da03      	bge.n	8009d28 <_printf_i+0xc8>
 8009d20:	232d      	movs	r3, #45	; 0x2d
 8009d22:	4276      	negs	r6, r6
 8009d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d28:	485e      	ldr	r0, [pc, #376]	; (8009ea4 <_printf_i+0x244>)
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	e019      	b.n	8009d62 <_printf_i+0x102>
 8009d2e:	680e      	ldr	r6, [r1, #0]
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d36:	bf18      	it	ne
 8009d38:	b236      	sxthne	r6, r6
 8009d3a:	e7ef      	b.n	8009d1c <_printf_i+0xbc>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1d19      	adds	r1, r3, #4
 8009d42:	6029      	str	r1, [r5, #0]
 8009d44:	0601      	lsls	r1, r0, #24
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0xec>
 8009d48:	681e      	ldr	r6, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <_printf_i+0xf2>
 8009d4c:	0646      	lsls	r6, r0, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0xe8>
 8009d50:	881e      	ldrh	r6, [r3, #0]
 8009d52:	4854      	ldr	r0, [pc, #336]	; (8009ea4 <_printf_i+0x244>)
 8009d54:	2f6f      	cmp	r7, #111	; 0x6f
 8009d56:	bf0c      	ite	eq
 8009d58:	2308      	moveq	r3, #8
 8009d5a:	230a      	movne	r3, #10
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d62:	6865      	ldr	r5, [r4, #4]
 8009d64:	60a5      	str	r5, [r4, #8]
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	bfa2      	ittt	ge
 8009d6a:	6821      	ldrge	r1, [r4, #0]
 8009d6c:	f021 0104 	bicge.w	r1, r1, #4
 8009d70:	6021      	strge	r1, [r4, #0]
 8009d72:	b90e      	cbnz	r6, 8009d78 <_printf_i+0x118>
 8009d74:	2d00      	cmp	r5, #0
 8009d76:	d04d      	beq.n	8009e14 <_printf_i+0x1b4>
 8009d78:	4615      	mov	r5, r2
 8009d7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d7e:	fb03 6711 	mls	r7, r3, r1, r6
 8009d82:	5dc7      	ldrb	r7, [r0, r7]
 8009d84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d88:	4637      	mov	r7, r6
 8009d8a:	42bb      	cmp	r3, r7
 8009d8c:	460e      	mov	r6, r1
 8009d8e:	d9f4      	bls.n	8009d7a <_printf_i+0x11a>
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d10b      	bne.n	8009dac <_printf_i+0x14c>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	07de      	lsls	r6, r3, #31
 8009d98:	d508      	bpl.n	8009dac <_printf_i+0x14c>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	6861      	ldr	r1, [r4, #4]
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	bfde      	ittt	le
 8009da2:	2330      	movle	r3, #48	; 0x30
 8009da4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009da8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009dac:	1b52      	subs	r2, r2, r5
 8009dae:	6122      	str	r2, [r4, #16]
 8009db0:	f8cd a000 	str.w	sl, [sp]
 8009db4:	464b      	mov	r3, r9
 8009db6:	aa03      	add	r2, sp, #12
 8009db8:	4621      	mov	r1, r4
 8009dba:	4640      	mov	r0, r8
 8009dbc:	f7ff fee2 	bl	8009b84 <_printf_common>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d14c      	bne.n	8009e5e <_printf_i+0x1fe>
 8009dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc8:	b004      	add	sp, #16
 8009dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dce:	4835      	ldr	r0, [pc, #212]	; (8009ea4 <_printf_i+0x244>)
 8009dd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009dd4:	6829      	ldr	r1, [r5, #0]
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ddc:	6029      	str	r1, [r5, #0]
 8009dde:	061d      	lsls	r5, r3, #24
 8009de0:	d514      	bpl.n	8009e0c <_printf_i+0x1ac>
 8009de2:	07df      	lsls	r7, r3, #31
 8009de4:	bf44      	itt	mi
 8009de6:	f043 0320 	orrmi.w	r3, r3, #32
 8009dea:	6023      	strmi	r3, [r4, #0]
 8009dec:	b91e      	cbnz	r6, 8009df6 <_printf_i+0x196>
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	f023 0320 	bic.w	r3, r3, #32
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	2310      	movs	r3, #16
 8009df8:	e7b0      	b.n	8009d5c <_printf_i+0xfc>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f043 0320 	orr.w	r3, r3, #32
 8009e00:	6023      	str	r3, [r4, #0]
 8009e02:	2378      	movs	r3, #120	; 0x78
 8009e04:	4828      	ldr	r0, [pc, #160]	; (8009ea8 <_printf_i+0x248>)
 8009e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e0a:	e7e3      	b.n	8009dd4 <_printf_i+0x174>
 8009e0c:	0659      	lsls	r1, r3, #25
 8009e0e:	bf48      	it	mi
 8009e10:	b2b6      	uxthmi	r6, r6
 8009e12:	e7e6      	b.n	8009de2 <_printf_i+0x182>
 8009e14:	4615      	mov	r5, r2
 8009e16:	e7bb      	b.n	8009d90 <_printf_i+0x130>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	6826      	ldr	r6, [r4, #0]
 8009e1c:	6961      	ldr	r1, [r4, #20]
 8009e1e:	1d18      	adds	r0, r3, #4
 8009e20:	6028      	str	r0, [r5, #0]
 8009e22:	0635      	lsls	r5, r6, #24
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	d501      	bpl.n	8009e2c <_printf_i+0x1cc>
 8009e28:	6019      	str	r1, [r3, #0]
 8009e2a:	e002      	b.n	8009e32 <_printf_i+0x1d2>
 8009e2c:	0670      	lsls	r0, r6, #25
 8009e2e:	d5fb      	bpl.n	8009e28 <_printf_i+0x1c8>
 8009e30:	8019      	strh	r1, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	6123      	str	r3, [r4, #16]
 8009e36:	4615      	mov	r5, r2
 8009e38:	e7ba      	b.n	8009db0 <_printf_i+0x150>
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	1d1a      	adds	r2, r3, #4
 8009e3e:	602a      	str	r2, [r5, #0]
 8009e40:	681d      	ldr	r5, [r3, #0]
 8009e42:	6862      	ldr	r2, [r4, #4]
 8009e44:	2100      	movs	r1, #0
 8009e46:	4628      	mov	r0, r5
 8009e48:	f7f6 f9fa 	bl	8000240 <memchr>
 8009e4c:	b108      	cbz	r0, 8009e52 <_printf_i+0x1f2>
 8009e4e:	1b40      	subs	r0, r0, r5
 8009e50:	6060      	str	r0, [r4, #4]
 8009e52:	6863      	ldr	r3, [r4, #4]
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	2300      	movs	r3, #0
 8009e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e5c:	e7a8      	b.n	8009db0 <_printf_i+0x150>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4649      	mov	r1, r9
 8009e64:	4640      	mov	r0, r8
 8009e66:	47d0      	blx	sl
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d0ab      	beq.n	8009dc4 <_printf_i+0x164>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	079b      	lsls	r3, r3, #30
 8009e70:	d413      	bmi.n	8009e9a <_printf_i+0x23a>
 8009e72:	68e0      	ldr	r0, [r4, #12]
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	4298      	cmp	r0, r3
 8009e78:	bfb8      	it	lt
 8009e7a:	4618      	movlt	r0, r3
 8009e7c:	e7a4      	b.n	8009dc8 <_printf_i+0x168>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4632      	mov	r2, r6
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d09b      	beq.n	8009dc4 <_printf_i+0x164>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	68e3      	ldr	r3, [r4, #12]
 8009e90:	9903      	ldr	r1, [sp, #12]
 8009e92:	1a5b      	subs	r3, r3, r1
 8009e94:	42ab      	cmp	r3, r5
 8009e96:	dcf2      	bgt.n	8009e7e <_printf_i+0x21e>
 8009e98:	e7eb      	b.n	8009e72 <_printf_i+0x212>
 8009e9a:	2500      	movs	r5, #0
 8009e9c:	f104 0619 	add.w	r6, r4, #25
 8009ea0:	e7f5      	b.n	8009e8e <_printf_i+0x22e>
 8009ea2:	bf00      	nop
 8009ea4:	0800a559 	.word	0x0800a559
 8009ea8:	0800a56a 	.word	0x0800a56a

08009eac <__retarget_lock_acquire_recursive>:
 8009eac:	4770      	bx	lr

08009eae <__retarget_lock_release_recursive>:
 8009eae:	4770      	bx	lr

08009eb0 <memmove>:
 8009eb0:	4288      	cmp	r0, r1
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	eb01 0402 	add.w	r4, r1, r2
 8009eb8:	d902      	bls.n	8009ec0 <memmove+0x10>
 8009eba:	4284      	cmp	r4, r0
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	d807      	bhi.n	8009ed0 <memmove+0x20>
 8009ec0:	1e43      	subs	r3, r0, #1
 8009ec2:	42a1      	cmp	r1, r4
 8009ec4:	d008      	beq.n	8009ed8 <memmove+0x28>
 8009ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ece:	e7f8      	b.n	8009ec2 <memmove+0x12>
 8009ed0:	4402      	add	r2, r0
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	428a      	cmp	r2, r1
 8009ed6:	d100      	bne.n	8009eda <memmove+0x2a>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ee2:	e7f7      	b.n	8009ed4 <memmove+0x24>

08009ee4 <_malloc_usable_size_r>:
 8009ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ee8:	1f18      	subs	r0, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfbc      	itt	lt
 8009eee:	580b      	ldrlt	r3, [r1, r0]
 8009ef0:	18c0      	addlt	r0, r0, r3
 8009ef2:	4770      	bx	lr

08009ef4 <_init>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	bf00      	nop
 8009ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efa:	bc08      	pop	{r3}
 8009efc:	469e      	mov	lr, r3
 8009efe:	4770      	bx	lr

08009f00 <_fini>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	bf00      	nop
 8009f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f06:	bc08      	pop	{r3}
 8009f08:	469e      	mov	lr, r3
 8009f0a:	4770      	bx	lr
