
Config SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ced0  0800ced0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ced8  0800ced8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced8  0800ced8  0001ced8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cedc  0800cedc  0001cedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800cee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000070  0800cf50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000f24  0800cf50  00020f24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bf3  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049a2  00000000  00000000  00045c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d68  00000000  00000000  0004a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b78  00000000  00000000  0004c3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035791  00000000  00000000  0004df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000279ed  00000000  00000000  000836a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00134a08  00000000  00000000  000ab096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dfa9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080d4  00000000  00000000  001dfaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cd24 	.word	0x0800cd24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800cd24 	.word	0x0800cd24

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <get_time>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char* time, date;

void get_time(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af02      	add	r7, sp, #8
 RTC_DateTypeDef gDate;
 RTC_TimeTypeDef gTime;
/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	4814      	ldr	r0, [pc, #80]	; (8000654 <get_time+0x60>)
 8000602:	f005 f8d5 	bl	80057b0 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <get_time+0x60>)
 8000610:	f005 f92c 	bl	800586c <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <get_time+0x64>)
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	783b      	ldrb	r3, [r7, #0]
 800061a:	461a      	mov	r2, r3
 800061c:	787b      	ldrb	r3, [r7, #1]
 800061e:	4619      	mov	r1, r3
 8000620:	78bb      	ldrb	r3, [r7, #2]
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	460b      	mov	r3, r1
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <get_time+0x68>)
 8000628:	f00b ff0e 	bl	800c448 <siprintf>
/* Display date Format: dd-mm-yy */
 sprintf((char*)date,"%02d-%02d-%4d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <get_time+0x6c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	7dbb      	ldrb	r3, [r7, #22]
 8000634:	461a      	mov	r2, r3
 8000636:	7d7b      	ldrb	r3, [r7, #21]
 8000638:	4619      	mov	r1, r3
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	460b      	mov	r3, r1
 8000644:	4907      	ldr	r1, [pc, #28]	; (8000664 <get_time+0x70>)
 8000646:	f00b feff 	bl	800c448 <siprintf>

}
 800064a:	bf00      	nop
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000013c 	.word	0x2000013c
 8000658:	20000a50 	.word	0x20000a50
 800065c:	0800cd3c 	.word	0x0800cd3c
 8000660:	20000a54 	.word	0x20000a54
 8000664:	0800cd4c 	.word	0x0800cd4c

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800066e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  FRESULT res; /* FatFs function common result code */
  uint32_t byteswritten, bytesread; /* File write/read counts */
  uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000670:	4b5c      	ldr	r3, [pc, #368]	; (80007e4 <main+0x17c>)
 8000672:	f507 7401 	add.w	r4, r7, #516	; 0x204
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000680:	c403      	stmia	r4!, {r0, r1}
 8000682:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 fd39 	bl	80020fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f8be 	bl	8000808 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800068c:	f000 f92a 	bl	80008e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 fd10 	bl	80010b4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000694:	f000 f950 	bl	8000938 <MX_ADC3_Init>
  MX_DSIHOST_DSI_Init();
 8000698:	f000 f9a0 	bl	80009dc <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 800069c:	f000 fc0e 	bl	8000ebc <MX_FMC_Init>
  MX_QUADSPI_Init();
 80006a0:	f000 fa54 	bl	8000b4c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80006a4:	f000 faae 	bl	8000c04 <MX_SAI1_Init>
  MX_SAI2_Init();
 80006a8:	f000 fad8 	bl	8000c5c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80006ac:	f000 fb30 	bl	8000d10 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006b0:	f000 fb4e 	bl	8000d50 <MX_SPDIFRX_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 fb7e 	bl	8000db4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006b8:	f000 fbac 	bl	8000e14 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80006bc:	f000 fbd8 	bl	8000e70 <MX_DMA_Init>
  MX_RTC_Init();
 80006c0:	f000 fa70 	bl	8000ba4 <MX_RTC_Init>
  MX_FATFS_Init();
 80006c4:	f008 fe44 	bl	8009350 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ce:	4846      	ldr	r0, [pc, #280]	; (80007e8 <main+0x180>)
 80006d0:	f003 fa62 	bl	8003b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2101      	movs	r1, #1
 80006d8:	4844      	ldr	r0, [pc, #272]	; (80007ec <main+0x184>)
 80006da:	f003 fa5d 	bl	8003b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2102      	movs	r1, #2
 80006e2:	4842      	ldr	r0, [pc, #264]	; (80007ec <main+0x184>)
 80006e4:	f003 fa58 	bl	8003b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2108      	movs	r1, #8
 80006ec:	483f      	ldr	r0, [pc, #252]	; (80007ec <main+0x184>)
 80006ee:	f003 fa53 	bl	8003b98 <HAL_GPIO_WritePin>
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80006f2:	2200      	movs	r2, #0
 80006f4:	493e      	ldr	r1, [pc, #248]	; (80007f0 <main+0x188>)
 80006f6:	483f      	ldr	r0, [pc, #252]	; (80007f4 <main+0x18c>)
 80006f8:	f00a fdca 	bl	800b290 <f_mount>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d006      	beq.n	8000710 <main+0xa8>
      {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 8000702:	2108      	movs	r1, #8
 8000704:	4839      	ldr	r0, [pc, #228]	; (80007ec <main+0x184>)
 8000706:	f003 fa60 	bl	8003bca <HAL_GPIO_TogglePin>
          Error_Handler();
 800070a:	f000 ff41 	bl	8001590 <Error_Handler>
 800070e:	e044      	b.n	800079a <main+0x132>
      }
      else
      {
          if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	2200      	movs	r2, #0
 800071a:	2107      	movs	r1, #7
 800071c:	4834      	ldr	r0, [pc, #208]	; (80007f0 <main+0x188>)
 800071e:	f00b f9d9 	bl	800bad4 <f_mkfs>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <main+0xce>
          {
        	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 8000728:	2108      	movs	r1, #8
 800072a:	4830      	ldr	r0, [pc, #192]	; (80007ec <main+0x184>)
 800072c:	f003 fa4d 	bl	8003bca <HAL_GPIO_TogglePin>
              Error_Handler();
 8000730:	f000 ff2e 	bl	8001590 <Error_Handler>
 8000734:	e031      	b.n	800079a <main+0x132>
          }
          else
          {
              //Open file for writing (Create)
              if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000736:	220a      	movs	r2, #10
 8000738:	492f      	ldr	r1, [pc, #188]	; (80007f8 <main+0x190>)
 800073a:	4830      	ldr	r0, [pc, #192]	; (80007fc <main+0x194>)
 800073c:	f00a fdee 	bl	800b31c <f_open>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <main+0xec>
              {
            	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 8000746:	2108      	movs	r1, #8
 8000748:	4828      	ldr	r0, [pc, #160]	; (80007ec <main+0x184>)
 800074a:	f003 fa3e 	bl	8003bca <HAL_GPIO_TogglePin>
                  Error_Handler();
 800074e:	f000 ff1f 	bl	8001590 <Error_Handler>
 8000752:	e022      	b.n	800079a <main+0x132>
              {



                  //Write to the text file
                  res = f_write(&SDFile, time, strlen((char *)time), (void *)&byteswritten);
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <main+0x198>)
 8000756:	681c      	ldr	r4, [r3, #0]
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <main+0x198>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fd6f 	bl	8000240 <strlen>
 8000762:	4602      	mov	r2, r0
 8000764:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000768:	4621      	mov	r1, r4
 800076a:	4824      	ldr	r0, [pc, #144]	; (80007fc <main+0x194>)
 800076c:	f00a ff94 	bl	800b698 <f_write>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
                  if((byteswritten == 0) || (res != FR_OK))
 8000776:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800077a:	2b00      	cmp	r3, #0
 800077c:	d003      	beq.n	8000786 <main+0x11e>
 800077e:	f897 3227 	ldrb.w	r3, [r7, #551]	; 0x227
 8000782:	2b00      	cmp	r3, #0
 8000784:	d006      	beq.n	8000794 <main+0x12c>
                  {
                	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 8000786:	2108      	movs	r1, #8
 8000788:	4818      	ldr	r0, [pc, #96]	; (80007ec <main+0x184>)
 800078a:	f003 fa1e 	bl	8003bca <HAL_GPIO_TogglePin>
                      Error_Handler();
 800078e:	f000 feff 	bl	8001590 <Error_Handler>
 8000792:	e002      	b.n	800079a <main+0x132>
                  else
                  {



                      f_close(&SDFile);
 8000794:	4819      	ldr	r0, [pc, #100]	; (80007fc <main+0x194>)
 8000796:	f00b f972 	bl	800ba7e <f_close>
                  }
              }
          }
      }
      f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <main+0x18c>)
 80007a0:	f00a fd76 	bl	800b290 <f_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80007a4:	2102      	movs	r1, #2
 80007a6:	4811      	ldr	r0, [pc, #68]	; (80007ec <main+0x184>)
 80007a8:	f003 fa0f 	bl	8003bca <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b0:	f001 fd00 	bl	80021b4 <HAL_Delay>
	  get_time();
 80007b4:	f7ff ff1e 	bl	80005f4 <get_time>
	  if (HAL_GPIO_ReadPin(JOY_SEL_GPIO_Port, JOY_SEL_Pin) == 1)
 80007b8:	2101      	movs	r1, #1
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <main+0x19c>)
 80007bc:	f003 f9d4 	bl	8003b68 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d106      	bne.n	80007d4 <main+0x16c>
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007cc:	4806      	ldr	r0, [pc, #24]	; (80007e8 <main+0x180>)
 80007ce:	f003 f9e3 	bl	8003b98 <HAL_GPIO_WritePin>
 80007d2:	e7e7      	b.n	80007a4 <main+0x13c>
	  else
	  {
		  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <main+0x180>)
 80007dc:	f003 f9dc 	bl	8003b98 <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80007e0:	e7e0      	b.n	80007a4 <main+0x13c>
 80007e2:	bf00      	nop
 80007e4:	0800cd68 	.word	0x0800cd68
 80007e8:	40022000 	.word	0x40022000
 80007ec:	40022400 	.word	0x40022400
 80007f0:	20000a74 	.word	0x20000a74
 80007f4:	20000a78 	.word	0x20000a78
 80007f8:	0800cd5c 	.word	0x0800cd5c
 80007fc:	20000ca8 	.word	0x20000ca8
 8000800:	20000a50 	.word	0x20000a50
 8000804:	40020400 	.word	0x40020400

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2234      	movs	r2, #52	; 0x34
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00b fe0e 	bl	800c438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800082c:	f003 fc3c 	bl	80040a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <SystemClock_Config+0xd4>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a29      	ldr	r2, [pc, #164]	; (80008dc <SystemClock_Config+0xd4>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <SystemClock_Config+0xd4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xd8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000850:	4a23      	ldr	r2, [pc, #140]	; (80008e0 <SystemClock_Config+0xd8>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <SystemClock_Config+0xd8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000864:	2309      	movs	r3, #9
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 800087c:	2319      	movs	r3, #25
 800087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000880:	23c0      	movs	r3, #192	; 0xc0
 8000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000884:	2304      	movs	r3, #4
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fcd9 	bl	800424c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008a0:	f000 fe76 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 ff70 	bl	80047a8 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80008ce:	f000 fe5f 	bl	8001590 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3750      	adds	r7, #80	; 0x50
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40007000 	.word	0x40007000

080008e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0a4      	sub	sp, #144	; 0x90
 80008e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2290      	movs	r2, #144	; 0x90
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00b fda1 	bl	800c438 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 80008f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008fa:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80008fc:	23c0      	movs	r3, #192	; 0xc0
 80008fe:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000904:	2303      	movs	r3, #3
 8000906:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800090c:	2301      	movs	r3, #1
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000914:	2300      	movs	r3, #0
 8000916:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000918:	2300      	movs	r3, #0
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f928 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <PeriphCommonClock_Config+0x4a>
  {
    Error_Handler();
 800092a:	f000 fe31 	bl	8001590 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3790      	adds	r7, #144	; 0x90
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800094a:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_ADC3_Init+0x98>)
 800094c:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_ADC3_Init+0x9c>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_ADC3_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_ADC3_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000972:	2200      	movs	r2, #0
 8000974:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000978:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_ADC3_Init+0xa0>)
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_ADC3_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000984:	2201      	movs	r2, #1
 8000986:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_ADC3_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000992:	2201      	movs	r2, #1
 8000994:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_ADC3_Init+0x98>)
 8000998:	f001 fc30 	bl	80021fc <HAL_ADC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 fdf5 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009a6:	2308      	movs	r3, #8
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_ADC3_Init+0x98>)
 80009b8:	f001 fc64 	bl	8002284 <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80009c2:	f000 fde5 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000008c 	.word	0x2000008c
 80009d4:	40012200 	.word	0x40012200
 80009d8:	0f000001 	.word	0x0f000001

080009dc <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0a0      	sub	sp, #128	; 0x80
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80009e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009f2:	2224      	movs	r2, #36	; 0x24
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f00b fd1e 	bl	800c438 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2234      	movs	r2, #52	; 0x34
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f00b fd0f 	bl	800c438 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a1a:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a1c:	4a4a      	ldr	r2, [pc, #296]	; (8000b48 <MX_DSIHOST_DSI_Init+0x16c>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a20:	4b48      	ldr	r3, [pc, #288]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000a2c:	4b45      	ldr	r3, [pc, #276]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000a32:	2314      	movs	r3, #20
 8000a34:	677b      	str	r3, [r7, #116]	; 0x74
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	67bb      	str	r3, [r7, #120]	; 0x78
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a42:	4619      	mov	r1, r3
 8000a44:	483f      	ldr	r0, [pc, #252]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a46:	f002 fb25 	bl	8003094 <HAL_DSI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_DSIHOST_DSI_Init+0x78>
  {
    Error_Handler();
 8000a50:	f000 fd9e 	bl	8001590 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	653b      	str	r3, [r7, #80]	; 0x50
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	657b      	str	r3, [r7, #84]	; 0x54
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	65bb      	str	r3, [r7, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	65fb      	str	r3, [r7, #92]	; 0x5c
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	663b      	str	r3, [r7, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	667b      	str	r3, [r7, #100]	; 0x64
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	66bb      	str	r3, [r7, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	66fb      	str	r3, [r7, #108]	; 0x6c
  HostTimeouts.BTATimeout = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4831      	ldr	r0, [pc, #196]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000a80:	f002 fdd0 	bl	8003624 <HAL_DSI_ConfigHostTimeouts>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_DSIHOST_DSI_Init+0xb2>
  {
    Error_Handler();
 8000a8a:	f000 fd81 	bl	8001590 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000a8e:	231c      	movs	r3, #28
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a92:	2321      	movs	r3, #33	; 0x21
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  PhyTimings.DataLaneHS2LPTime = 15;
 8000a96:	230f      	movs	r3, #15
 8000a98:	643b      	str	r3, [r7, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a9a:	2319      	movs	r3, #25
 8000a9c:	647b      	str	r3, [r7, #68]	; 0x44
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  PhyTimings.StopWaitTime = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000aa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4825      	ldr	r0, [pc, #148]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000aae:	f002 fd4f 	bl	8003550 <HAL_DSI_ConfigPhyTimer>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_DSIHOST_DSI_Init+0xe0>
  {
    Error_Handler();
 8000ab8:	f000 fd6a 	bl	8001590 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000abc:	2104      	movs	r1, #4
 8000abe:	4821      	ldr	r0, [pc, #132]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000ac0:	f002 fd1e 	bl	8003500 <HAL_DSI_ConfigFlowControl>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DSIHOST_DSI_Init+0xf2>
  {
    Error_Handler();
 8000aca:	f000 fd61 	bl	8001590 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000ace:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ad2:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000ad4:	f002 fe6e 	bl	80037b4 <HAL_DSI_SetLowPowerRXFilter>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_DSIHOST_DSI_Init+0x106>
  {
    Error_Handler();
 8000ade:	f000 fd57 	bl	8001590 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000ae6:	f002 fbf1 	bl	80032cc <HAL_DSI_ConfigErrorMonitor>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_DSIHOST_DSI_Init+0x118>
  {
    Error_Handler();
 8000af0:	f000 fd4e 	bl	8001590 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_DSIHOST_DSI_Init+0x168>)
 8000b2e:	f002 fc89 	bl	8003444 <HAL_DSI_ConfigCommand>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000b38:	f000 fd2a 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3780      	adds	r7, #128	; 0x80
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000d4 	.word	0x200000d4
 8000b48:	40016c00 	.word	0x40016c00

08000b4c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_QUADSPI_Init+0x54>)
 8000b54:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b6a:	221a      	movs	r2, #26
 8000b6c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b70:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000b74:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_QUADSPI_Init+0x50>)
 8000b8a:	f003 fa9d 	bl	80040c8 <HAL_QSPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000b94:	f000 fcfc 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200000f0 	.word	0x200000f0
 8000ba0:	a0001000 	.word	0xa0001000

08000ba4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_RTC_Init+0x58>)
 8000bbe:	4a10      	ldr	r2, [pc, #64]	; (8000c00 <MX_RTC_Init+0x5c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_RTC_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_RTC_Init+0x58>)
 8000bca:	227f      	movs	r2, #127	; 0x7f
 8000bcc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_RTC_Init+0x58>)
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_RTC_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_RTC_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_RTC_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_RTC_Init+0x58>)
 8000be8:	f004 fd5e 	bl	80056a8 <HAL_RTC_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 fccd 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000013c 	.word	0x2000013c
 8000c00:	40002800 	.word	0x40002800

08000c04 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c0a:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <MX_SAI1_Init+0x54>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c2e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c32:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_SAI1_Init+0x50>)
 8000c42:	f004 ff05 	bl	8005a50 <HAL_SAI_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_SAI1_Init+0x4c>
  {
    Error_Handler();
 8000c4c:	f000 fca0 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	2000015c 	.word	0x2000015c
 8000c58:	40015804 	.word	0x40015804

08000c5c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <MX_SAI2_Init+0xac>)
 8000c64:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c74:	2240      	movs	r2, #64	; 0x40
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_SAI2_Init+0xb0>)
 8000ca0:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cbc:	2208      	movs	r2, #8
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_SAI2_Init+0xa8>)
 8000cf2:	f004 fead 	bl	8005a50 <HAL_SAI_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000cfc:	f000 fc48 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001e0 	.word	0x200001e0
 8000d08:	40015c24 	.word	0x40015c24
 8000d0c:	0002ee00 	.word	0x0002ee00

08000d10 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d16:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <MX_SDMMC1_SD_Init+0x3c>)
 8000d18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d32:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	20000264 	.word	0x20000264
 8000d4c:	40012c00 	.word	0x40012c00

08000d50 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d56:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000d5a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d62:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_SPDIFRX_Init+0x60>)
 8000d9c:	f006 fb6e 	bl	800747c <HAL_SPDIFRX_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8000da6:	f000 fbf3 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200003a8 	.word	0x200003a8

08000db4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <MX_USART1_UART_Init+0x5c>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_USART1_UART_Init+0x58>)
 8000df8:	f006 fbe4 	bl	80075c4 <HAL_UART_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e02:	f000 fbc5 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200003f4 	.word	0x200003f4
 8000e10:	40011000 	.word	0x40011000

08000e14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e22:	2206      	movs	r2, #6
 8000e24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	f002 ffde 	bl	8003e18 <HAL_PCD_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e62:	f000 fb95 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000047c 	.word	0x2000047c

08000e70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <MX_DMA_Init+0x48>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <MX_DMA_Init+0x48>)
 8000e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_DMA_Init+0x48>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	203b      	movs	r0, #59	; 0x3b
 8000e94:	f001 fd21 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e98:	203b      	movs	r0, #59	; 0x3b
 8000e9a:	f001 fd3a 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2045      	movs	r0, #69	; 0x45
 8000ea4:	f001 fd19 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ea8:	2045      	movs	r0, #69	; 0x45
 8000eaa:	f001 fd32 	bl	8002912 <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08e      	sub	sp, #56	; 0x38
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
 8000ed2:	615a      	str	r2, [r3, #20]
 8000ed4:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the NOR1 memory initialization sequence
  */
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000ee8:	4b6d      	ldr	r3, [pc, #436]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000eea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000eee:	601a      	str	r2, [r3, #0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000ef2:	4a6c      	ldr	r2, [pc, #432]	; (80010a4 <MX_FMC_Init+0x1e8>)
 8000ef4:	605a      	str	r2, [r3, #4]
  /* hnor1.Init */
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000ef6:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000efc:	4b68      	ldr	r3, [pc, #416]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f04:	2208      	movs	r2, #8
 8000f06:	611a      	str	r2, [r3, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f08:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f0a:	2210      	movs	r2, #16
 8000f0c:	615a      	str	r2, [r3, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f14:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f1a:	4b61      	ldr	r3, [pc, #388]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000f20:	4b5f      	ldr	r3, [pc, #380]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f26:	4b5e      	ldr	r3, [pc, #376]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f2c:	4b5c      	ldr	r3, [pc, #368]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000f32:	4b5b      	ldr	r3, [pc, #364]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f38:	631a      	str	r2, [r3, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f3a:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f46:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f52:	230f      	movs	r3, #15
 8000f54:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000f56:	230f      	movs	r3, #15
 8000f58:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000f62:	2310      	movs	r3, #16
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000f66:	2311      	movs	r3, #17
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	2200      	movs	r2, #0
 8000f74:	4619      	mov	r1, r3
 8000f76:	484a      	ldr	r0, [pc, #296]	; (80010a0 <MX_FMC_Init+0x1e4>)
 8000f78:	f002 fe42 	bl	8003c00 <HAL_NOR_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_FMC_Init+0xca>
  {
    Error_Handler( );
 8000f82:	f000 fb05 	bl	8001590 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000f88:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f8c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000f90:	4a44      	ldr	r2, [pc, #272]	; (80010a4 <MX_FMC_Init+0x1e8>)
 8000f92:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8000f94:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000f96:	2204      	movs	r2, #4
 8000f98:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000fa0:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fa8:	2210      	movs	r2, #16
 8000faa:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000fac:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fde:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 255;
 8000ff8:	23ff      	movs	r3, #255	; 0xff
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001000:	2310      	movs	r3, #16
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001004:	2311      	movs	r3, #17
 8001006:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001008:	2300      	movs	r3, #0
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <MX_FMC_Init+0x1ec>)
 8001016:	f006 fa8d 	bl	8007534 <HAL_SRAM_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_FMC_Init+0x168>
  {
    Error_Handler( );
 8001020:	f000 fab6 	bl	8001590 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_FMC_Init+0x1f4>)
 8001028:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_FMC_Init+0x1f0>)
 800102c:	2200      	movs	r2, #0
 800102e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001036:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001038:	2208      	movs	r2, #8
 800103a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_FMC_Init+0x1f0>)
 800103e:	2220      	movs	r2, #32
 8001040:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_FMC_Init+0x1f0>)
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_FMC_Init+0x1f0>)
 800105c:	2200      	movs	r2, #0
 800105e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001062:	2200      	movs	r2, #0
 8001064:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001066:	2310      	movs	r3, #16
 8001068:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800106a:	2310      	movs	r3, #16
 800106c:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 16;
 800106e:	2310      	movs	r3, #16
 8001070:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 16;
 8001072:	2310      	movs	r3, #16
 8001074:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 16;
 8001076:	2310      	movs	r3, #16
 8001078:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 16;
 800107a:	2310      	movs	r3, #16
 800107c:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 16;
 800107e:	2310      	movs	r3, #16
 8001080:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <MX_FMC_Init+0x1f0>)
 8001088:	f006 f9c3 	bl	8007412 <HAL_SDRAM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_FMC_Init+0x1da>
  {
    Error_Handler( );
 8001092:	f000 fa7d 	bl	8001590 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	; 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000984 	.word	0x20000984
 80010a4:	a0000104 	.word	0xa0000104
 80010a8:	200009d0 	.word	0x200009d0
 80010ac:	20000a1c 	.word	0x20000a1c
 80010b0:	a0000140 	.word	0xa0000140

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b090      	sub	sp, #64	; 0x40
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ca:	4bad      	ldr	r3, [pc, #692]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4aac      	ldr	r2, [pc, #688]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4baa      	ldr	r3, [pc, #680]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010e2:	4ba7      	ldr	r3, [pc, #668]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4aa6      	ldr	r2, [pc, #664]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4ba4      	ldr	r3, [pc, #656]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4ba1      	ldr	r3, [pc, #644]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4aa0      	ldr	r2, [pc, #640]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b9e      	ldr	r3, [pc, #632]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	623b      	str	r3, [r7, #32]
 8001110:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b9b      	ldr	r3, [pc, #620]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a9a      	ldr	r2, [pc, #616]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b98      	ldr	r3, [pc, #608]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	61fb      	str	r3, [r7, #28]
 8001128:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	4b95      	ldr	r3, [pc, #596]	; (8001380 <MX_GPIO_Init+0x2cc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a94      	ldr	r2, [pc, #592]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b92      	ldr	r3, [pc, #584]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b8f      	ldr	r3, [pc, #572]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a8e      	ldr	r2, [pc, #568]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800115a:	4b89      	ldr	r3, [pc, #548]	; (8001380 <MX_GPIO_Init+0x2cc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a88      	ldr	r2, [pc, #544]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b86      	ldr	r3, [pc, #536]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001172:	4b83      	ldr	r3, [pc, #524]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a82      	ldr	r2, [pc, #520]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800118a:	4b7d      	ldr	r3, [pc, #500]	; (8001380 <MX_GPIO_Init+0x2cc>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a7c      	ldr	r2, [pc, #496]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b7a      	ldr	r3, [pc, #488]	; (8001380 <MX_GPIO_Init+0x2cc>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a2:	4b77      	ldr	r3, [pc, #476]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a76      	ldr	r2, [pc, #472]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	4b71      	ldr	r3, [pc, #452]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a70      	ldr	r2, [pc, #448]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80011c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <MX_GPIO_Init+0x2cc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 80011d2:	2200      	movs	r2, #0
 80011d4:	f243 010b 	movw	r1, #12299	; 0x300b
 80011d8:	486a      	ldr	r0, [pc, #424]	; (8001384 <MX_GPIO_Init+0x2d0>)
 80011da:	f002 fcdd 	bl	8003b98 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e4:	4868      	ldr	r0, [pc, #416]	; (8001388 <MX_GPIO_Init+0x2d4>)
 80011e6:	f002 fcd7 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80011ea:	2304      	movs	r3, #4
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fa:	230b      	movs	r3, #11
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001202:	4619      	mov	r1, r3
 8001204:	4861      	ldr	r0, [pc, #388]	; (800138c <MX_GPIO_Init+0x2d8>)
 8001206:	f002 fb03 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 800120a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121c:	230b      	movs	r3, #11
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	485a      	ldr	r0, [pc, #360]	; (8001390 <MX_GPIO_Init+0x2dc>)
 8001228:	f002 faf2 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800122c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001232:	2312      	movs	r3, #18
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800123e:	2304      	movs	r3, #4
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4852      	ldr	r0, [pc, #328]	; (8001394 <MX_GPIO_Init+0x2e0>)
 800124a:	f002 fae1 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800124e:	f643 4322 	movw	r3, #15394	; 0x3c22
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001260:	230a      	movs	r3, #10
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	484a      	ldr	r0, [pc, #296]	; (8001394 <MX_GPIO_Init+0x2e0>)
 800126c:	f002 fad0 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_D3_Pin SD2_D2_Pin */
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 8001270:	2318      	movs	r3, #24
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001280:	230a      	movs	r3, #10
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4842      	ldr	r0, [pc, #264]	; (8001394 <MX_GPIO_Init+0x2e0>)
 800128c:	f002 fac0 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_CMD_Pin SD2_CLK_Pin */
  GPIO_InitStruct.Pin = SD2_CMD_Pin|SD2_CLK_Pin;
 8001290:	23c0      	movs	r3, #192	; 0xc0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80012a0:	230b      	movs	r3, #11
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a8:	4619      	mov	r1, r3
 80012aa:	483b      	ldr	r0, [pc, #236]	; (8001398 <MX_GPIO_Init+0x2e4>)
 80012ac:	f002 fab0 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_VSYNC_Pin */
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80012c0:	230d      	movs	r3, #13
 80012c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c8:	4619      	mov	r1, r3
 80012ca:	4832      	ldr	r0, [pc, #200]	; (8001394 <MX_GPIO_Init+0x2e0>)
 80012cc:	f002 faa0 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_GPIO_Pin MII_MDIO_GPIO_Pin LED3_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 80012d0:	f243 030b 	movw	r3, #12299	; 0x300b
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80012e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4826      	ldr	r0, [pc, #152]	; (8001384 <MX_GPIO_Init+0x2d0>)
 80012ea:	f002 fa91 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXPANDER_INT_Pin */
  GPIO_InitStruct.Pin = EXPANDER_INT_Pin;
 80012ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	4820      	ldr	r0, [pc, #128]	; (8001388 <MX_GPIO_Init+0x2d4>)
 8001306:	f002 fa83 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800130a:	23f8      	movs	r3, #248	; 0xf8
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800131a:	230e      	movs	r3, #14
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	481d      	ldr	r0, [pc, #116]	; (800139c <MX_GPIO_Init+0x2e8>)
 8001326:	f002 fa73 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_D1_Pin */
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 800132a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800133c:	230b      	movs	r3, #11
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001344:	4619      	mov	r1, r3
 8001346:	4812      	ldr	r0, [pc, #72]	; (8001390 <MX_GPIO_Init+0x2dc>)
 8001348:	f002 fa62 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B2_Pin LCD_B3_Pin LCD_R5_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 800134c:	f24c 0330 	movw	r3, #49200	; 0xc030
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800135e:	230e      	movs	r3, #14
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001366:	4619      	mov	r1, r3
 8001368:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_GPIO_Init+0x2d0>)
 800136a:	f002 fa51 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_D5_Pin */
  GPIO_InitStruct.Pin = PAR_D5_Pin;
 800136e:	2308      	movs	r3, #8
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	e010      	b.n	80013a0 <MX_GPIO_Init+0x2ec>
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40022400 	.word	0x40022400
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	40021800 	.word	0x40021800
 8001394:	40020400 	.word	0x40020400
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40022800 	.word	0x40022800
 80013a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013a2:	230d      	movs	r3, #13
 80013a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013aa:	4619      	mov	r1, r3
 80013ac:	4872      	ldr	r0, [pc, #456]	; (8001578 <MX_GPIO_Init+0x4c4>)
 80013ae:	f002 fa2f 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_WKUP_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_WKUP_KEY_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c6:	4619      	mov	r1, r3
 80013c8:	486c      	ldr	r0, [pc, #432]	; (800157c <MX_GPIO_Init+0x4c8>)
 80013ca:	f002 fa21 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 80013ce:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e0:	230e      	movs	r3, #14
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4865      	ldr	r0, [pc, #404]	; (8001580 <MX_GPIO_Init+0x4cc>)
 80013ec:	f002 fa10 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 80013f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001402:	230a      	movs	r3, #10
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140a:	4619      	mov	r1, r3
 800140c:	485c      	ldr	r0, [pc, #368]	; (8001580 <MX_GPIO_Init+0x4cc>)
 800140e:	f002 f9ff 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_MCO_Pin */
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 8001412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001424:	2300      	movs	r3, #0
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142c:	4619      	mov	r1, r3
 800142e:	4855      	ldr	r0, [pc, #340]	; (8001584 <MX_GPIO_Init+0x4d0>)
 8001430:	f002 f9ee 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	484c      	ldr	r0, [pc, #304]	; (8001580 <MX_GPIO_Init+0x4cc>)
 800144e:	f002 f9df 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001452:	2310      	movs	r3, #16
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001462:	230a      	movs	r3, #10
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	4846      	ldr	r0, [pc, #280]	; (8001588 <MX_GPIO_Init+0x4d4>)
 800146e:	f002 f9cf 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_CLK_Pin MII_TXD2_Pin MII_RXD0_Pin MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 8001472:	233c      	movs	r3, #60	; 0x3c
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001482:	230b      	movs	r3, #11
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800148a:	4619      	mov	r1, r3
 800148c:	483b      	ldr	r0, [pc, #236]	; (800157c <MX_GPIO_Init+0x4c8>)
 800148e:	f002 f9bf 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001492:	2301      	movs	r3, #1
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014a2:	230a      	movs	r3, #10
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014aa:	4619      	mov	r1, r3
 80014ac:	4833      	ldr	r0, [pc, #204]	; (800157c <MX_GPIO_Init+0x4c8>)
 80014ae:	f002 f9af 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80014b2:	2382      	movs	r3, #130	; 0x82
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c2:	230b      	movs	r3, #11
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	482d      	ldr	r0, [pc, #180]	; (8001584 <MX_GPIO_Init+0x4d0>)
 80014ce:	f002 f99f 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAR_HSYNC_Pin PAR_PCLK_Pin */
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 80014d2:	2350      	movs	r3, #80	; 0x50
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80014e2:	230d      	movs	r3, #13
 80014e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ea:	4619      	mov	r1, r3
 80014ec:	4825      	ldr	r0, [pc, #148]	; (8001584 <MX_GPIO_Init+0x4d0>)
 80014ee:	f002 f98f 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RXD3_Pin MII_RXD2_Pin */
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001502:	230b      	movs	r3, #11
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150a:	4619      	mov	r1, r3
 800150c:	481e      	ldr	r0, [pc, #120]	; (8001588 <MX_GPIO_Init+0x4d4>)
 800150e:	f002 f97f 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001512:	2328      	movs	r3, #40	; 0x28
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001522:	230a      	movs	r3, #10
 8001524:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800152a:	4619      	mov	r1, r3
 800152c:	4815      	ldr	r0, [pc, #84]	; (8001584 <MX_GPIO_Init+0x4d0>)
 800152e:	f002 f96f 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_SEL_Pin PB15 */
  GPIO_InitStruct.Pin = JOY_SEL_Pin|GPIO_PIN_15;
 8001532:	f248 0301 	movw	r3, #32769	; 0x8001
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001544:	4619      	mov	r1, r3
 8001546:	4811      	ldr	r0, [pc, #68]	; (800158c <MX_GPIO_Init+0x4d8>)
 8001548:	f002 f962 	bl	8003810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS2_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS2_DM_Pin;
 800154c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	2302      	movs	r3, #2
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800155e:	230c      	movs	r3, #12
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(USB_FS2_DM_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001566:	4619      	mov	r1, r3
 8001568:	4808      	ldr	r0, [pc, #32]	; (800158c <MX_GPIO_Init+0x4d8>)
 800156a:	f002 f951 	bl	8003810 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3740      	adds	r7, #64	; 0x40
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40020c00 	.word	0x40020c00
 800157c:	40020800 	.word	0x40020800
 8001580:	40022000 	.word	0x40022000
 8001584:	40020000 	.word	0x40020000
 8001588:	40021c00 	.word	0x40021c00
 800158c:	40020400 	.word	0x40020400

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_MspInit+0x44>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <HAL_MspInit+0x44>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <HAL_MspInit+0x44>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <HAL_MspInit+0x44>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <HAL_MspInit+0x44>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_MspInit+0x44>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a15      	ldr	r2, [pc, #84]	; (8001658 <HAL_ADC_MspInit+0x74>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d124      	bne.n	8001650 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_ADC_MspInit+0x78>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_ADC_MspInit+0x78>)
 800160c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_ADC_MspInit+0x78>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_ADC_MspInit+0x78>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_ADC_MspInit+0x78>)
 8001624:	f043 0320 	orr.w	r3, r3, #32
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_ADC_MspInit+0x78>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8001636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163c:	2303      	movs	r3, #3
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <HAL_ADC_MspInit+0x7c>)
 800164c:	f002 f8e0 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	; 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40012200 	.word	0x40012200
 800165c:	40023800 	.word	0x40023800
 8001660:	40021400 	.word	0x40021400

08001664 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_DSI_MspInit+0x7c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d127      	bne.n	80016d6 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_DSI_MspInit+0x80>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a16      	ldr	r2, [pc, #88]	; (80016e4 <HAL_DSI_MspInit+0x80>)
 800168c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_DSI_MspInit+0x80>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_DSI_MspInit+0x80>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <HAL_DSI_MspInit+0x80>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_DSI_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80016b6:	2304      	movs	r3, #4
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80016c6:	230d      	movs	r3, #13
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_DSI_MspInit+0x84>)
 80016d2:	f002 f89d 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40016c00 	.word	0x40016c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40022400 	.word	0x40022400

080016ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a35      	ldr	r2, [pc, #212]	; (80017e0 <HAL_QSPI_MspInit+0xf4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d164      	bne.n	80017d8 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 8001710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001712:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6393      	str	r3, [r2, #56]	; 0x38
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a2e      	ldr	r2, [pc, #184]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800173e:	4b29      	ldr	r3, [pc, #164]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 8001744:	f043 0320 	orr.w	r3, r3, #32
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_QSPI_MspInit+0xf8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001756:	2340      	movs	r3, #64	; 0x40
 8001758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001766:	230a      	movs	r3, #10
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <HAL_QSPI_MspInit+0xfc>)
 8001772:	f002 f84d 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin;
 8001776:	23c0      	movs	r3, #192	; 0xc0
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001786:	2309      	movs	r3, #9
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4816      	ldr	r0, [pc, #88]	; (80017ec <HAL_QSPI_MspInit+0x100>)
 8001792:	f002 f83d 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017a8:	230a      	movs	r3, #10
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	480e      	ldr	r0, [pc, #56]	; (80017ec <HAL_QSPI_MspInit+0x100>)
 80017b4:	f002 f82c 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80017b8:	2304      	movs	r3, #4
 80017ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017c8:	2309      	movs	r3, #9
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_QSPI_MspInit+0xfc>)
 80017d4:	f002 f81c 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	; 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	a0001000 	.word	0xa0001000
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40021400 	.word	0x40021400

080017f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0a6      	sub	sp, #152	; 0x98
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	2290      	movs	r2, #144	; 0x90
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f00a fe19 	bl	800c438 <memset>
  if(hrtc->Instance==RTC)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_RTC_MspInit+0x54>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d114      	bne.n	800183a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001810:	2320      	movs	r3, #32
 8001812:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4618      	mov	r0, r3
 8001820:	f003 f9a8 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800182a:	f7ff feb1 	bl	8001590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_RTC_MspInit+0x58>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <HAL_RTC_MspInit+0x58>)
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800183a:	bf00      	nop
 800183c:	3798      	adds	r7, #152	; 0x98
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40002800 	.word	0x40002800
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0ae      	sub	sp, #184	; 0xb8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2290      	movs	r2, #144	; 0x90
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fde3 	bl	800c438 <memset>
  if(hsd->Instance==SDMMC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a74      	ldr	r2, [pc, #464]	; (8001a48 <HAL_SD_MspInit+0x1fc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	f040 80e0 	bne.w	8001a3e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800187e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001882:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4618      	mov	r0, r3
 8001896:	f003 f96d 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80018a0:	f7ff fe76 	bl	8001590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018a4:	4b69      	ldr	r3, [pc, #420]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	4a68      	ldr	r2, [pc, #416]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018ae:	6453      	str	r3, [r2, #68]	; 0x44
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	4a62      	ldr	r2, [pc, #392]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6313      	str	r3, [r2, #48]	; 0x30
 80018c8:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a5c      	ldr	r2, [pc, #368]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018da:	f043 0308 	orr.w	r3, r3, #8
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HAL_SD_MspInit+0x200>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SD1_CLK_Pin|SD1_D3_Pin|SD1_D2_Pin|SD1_D1_Pin
 80018ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SD1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001906:	230c      	movs	r3, #12
 8001908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001910:	4619      	mov	r1, r3
 8001912:	484f      	ldr	r0, [pc, #316]	; (8001a50 <HAL_SD_MspInit+0x204>)
 8001914:	f001 ff7c 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD1_CMD_Pin;
 8001918:	2304      	movs	r3, #4
 800191a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001930:	230c      	movs	r3, #12
 8001932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SD1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800193a:	4619      	mov	r1, r3
 800193c:	4845      	ldr	r0, [pc, #276]	; (8001a54 <HAL_SD_MspInit+0x208>)
 800193e:	f001 ff67 	bl	8003810 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001942:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001944:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <HAL_SD_MspInit+0x210>)
 8001946:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 800194a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800194e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001956:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 800195e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001962:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001966:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800196a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 800196e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001972:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001974:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001976:	2220      	movs	r2, #32
 8001978:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001980:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001982:	2204      	movs	r2, #4
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001988:	2203      	movs	r2, #3
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 800198e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001994:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 8001996:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800199c:	482e      	ldr	r0, [pc, #184]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 800199e:	f000 ffd3 	bl	8002948 <HAL_DMA_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80019a8:	f7ff fdf2 	bl	8001590 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
 80019b2:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <HAL_SD_MspInit+0x20c>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019ba:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_SD_MspInit+0x218>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019e0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019ec:	2220      	movs	r2, #32
 80019ee:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_SD_MspInit+0x214>)
 80019fe:	2203      	movs	r2, #3
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_SD_MspInit+0x214>)
 8001a04:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_SD_MspInit+0x214>)
 8001a0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001a12:	4813      	ldr	r0, [pc, #76]	; (8001a60 <HAL_SD_MspInit+0x214>)
 8001a14:	f000 ff98 	bl	8002948 <HAL_DMA_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001a1e:	f7ff fdb7 	bl	8001590 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_SD_MspInit+0x214>)
 8001a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a28:	4a0d      	ldr	r2, [pc, #52]	; (8001a60 <HAL_SD_MspInit+0x214>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	2031      	movs	r0, #49	; 0x31
 8001a34:	f000 ff51 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a38:	2031      	movs	r0, #49	; 0x31
 8001a3a:	f000 ff6a 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a3e:	bf00      	nop
 8001a40:	37b8      	adds	r7, #184	; 0xb8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012c00 	.word	0x40012c00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	200002e8 	.word	0x200002e8
 8001a5c:	40026458 	.word	0x40026458
 8001a60:	20000348 	.word	0x20000348
 8001a64:	400264a0 	.word	0x400264a0

08001a68 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0ae      	sub	sp, #184	; 0xb8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2290      	movs	r2, #144	; 0x90
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00a fcd5 	bl	800c438 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001a96:	d144      	bne.n	8001b22 <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001a98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a9e:	23c0      	movs	r3, #192	; 0xc0
 8001aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 f85c 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001ac2:	f7ff fd65 	bl	8001590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_SPDIFRX_MspInit+0xc4>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <HAL_SPDIFRX_MspInit+0xc4>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <HAL_SPDIFRX_MspInit+0xc4>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ade:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <HAL_SPDIFRX_MspInit+0xc4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_SPDIFRX_MspInit+0xc4>)
 8001ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <HAL_SPDIFRX_MspInit+0xc4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX1_Pin;
 8001af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001b10:	2307      	movs	r3, #7
 8001b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 8001b16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <HAL_SPDIFRX_MspInit+0xc8>)
 8001b1e:	f001 fe77 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	37b8      	adds	r7, #184	; 0xb8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40021800 	.word	0x40021800

08001b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ae      	sub	sp, #184	; 0xb8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2290      	movs	r2, #144	; 0x90
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00a fc6f 	bl	800c438 <memset>
  if(huart->Instance==USART1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a21      	ldr	r2, [pc, #132]	; (8001be4 <HAL_UART_MspInit+0xb0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d13b      	bne.n	8001bdc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b64:	2340      	movs	r3, #64	; 0x40
 8001b66:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4618      	mov	r0, r3
 8001b72:	f002 ffff 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b7c:	f7ff fd08 	bl	8001590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_UART_MspInit+0xb4>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <HAL_UART_MspInit+0xb4>)
 8001b86:	f043 0310 	orr.w	r3, r3, #16
 8001b8a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_UART_MspInit+0xb4>)
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f003 0310 	and.w	r3, r3, #16
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_UART_MspInit+0xb4>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <HAL_UART_MspInit+0xb4>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <HAL_UART_MspInit+0xb4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS2320IrDA0T_Pin;
 8001bb0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_UART_MspInit+0xb8>)
 8001bd8:	f001 fe1a 	bl	8003810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	37b8      	adds	r7, #184	; 0xb8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40011000 	.word	0x40011000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0ae      	sub	sp, #184	; 0xb8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2290      	movs	r2, #144	; 0x90
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00a fc11 	bl	800c438 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1e:	d149      	bne.n	8001cb4 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 ff9f 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c3c:	f7ff fca8 	bl	8001590 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001c58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c72:	230a      	movs	r3, #10
 8001c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4810      	ldr	r0, [pc, #64]	; (8001cc0 <HAL_PCD_MspInit+0xd0>)
 8001c80:	f001 fdc6 	bl	8003810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c84:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c8e:	6353      	str	r3, [r2, #52]	; 0x34
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <HAL_PCD_MspInit+0xcc>)
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	37b8      	adds	r7, #184	; 0xb8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_FMC_MspInit+0x124>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d17e      	bne.n	8001dde <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <HAL_FMC_MspInit+0x124>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ce6:	4b41      	ldr	r3, [pc, #260]	; (8001dec <HAL_FMC_MspInit+0x128>)
 8001ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cea:	4a40      	ldr	r2, [pc, #256]	; (8001dec <HAL_FMC_MspInit+0x128>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6393      	str	r3, [r2, #56]	; 0x38
 8001cf2:	4b3e      	ldr	r3, [pc, #248]	; (8001dec <HAL_FMC_MspInit+0x128>)
 8001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = A20_Pin|A19_Pin|FMC_NBL1_Pin|FMC_NBL0_Pin
 8001cfe:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001d02:	607b      	str	r3, [r7, #4]
                          |A21_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d10:	230c      	movs	r3, #12
 8001d12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	4619      	mov	r1, r3
 8001d18:	4835      	ldr	r0, [pc, #212]	; (8001df0 <HAL_FMC_MspInit+0x12c>)
 8001d1a:	f001 fd79 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|NAND_INT_Pin|FMC_NE3_Pin
 8001d1e:	f248 13ff 	movw	r3, #33279	; 0x81ff
 8001d22:	607b      	str	r3, [r7, #4]
                          |A11_Pin|A13_Pin|A12_Pin|A10_Pin
                          |A15_Pin|A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d30:	230c      	movs	r3, #12
 8001d32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	482e      	ldr	r0, [pc, #184]	; (8001df4 <HAL_FMC_MspInit+0x130>)
 8001d3a:	f001 fd69 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|FMC_NWE_Pin|D3_Pin|FMC_NOE_Pin
 8001d3e:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001d42:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D15_Pin|D0_Pin|D14_Pin
                          |D13_Pin|A17_Pin|A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d50:	230c      	movs	r3, #12
 8001d52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4827      	ldr	r0, [pc, #156]	; (8001df8 <HAL_FMC_MspInit+0x134>)
 8001d5a:	f001 fd59 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001d5e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001d62:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d70:	230c      	movs	r3, #12
 8001d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4820      	ldr	r0, [pc, #128]	; (8001dfc <HAL_FMC_MspInit+0x138>)
 8001d7a:	f001 fd49 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001d7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d82:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d90:	230c      	movs	r3, #12
 8001d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	4619      	mov	r1, r3
 8001d98:	4819      	ldr	r0, [pc, #100]	; (8001e00 <HAL_FMC_MspInit+0x13c>)
 8001d9a:	f001 fd39 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8001d9e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001da2:	607b      	str	r3, [r7, #4]
                          |SDNE0_Pin|SDCKE0_Pin|D20_Pin|D17_Pin
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001db0:	230c      	movs	r3, #12
 8001db2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4812      	ldr	r0, [pc, #72]	; (8001e04 <HAL_FMC_MspInit+0x140>)
 8001dba:	f001 fd29 	bl	8003810 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin;
 8001dbe:	23c0      	movs	r3, #192	; 0xc0
 8001dc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001dce:	2309      	movs	r3, #9
 8001dd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480c      	ldr	r0, [pc, #48]	; (8001e08 <HAL_FMC_MspInit+0x144>)
 8001dd8:	f001 fd1a 	bl	8003810 <HAL_GPIO_Init>
 8001ddc:	e000      	b.n	8001de0 <HAL_FMC_MspInit+0x11c>
    return;
 8001dde:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000a58 	.word	0x20000a58
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40021800 	.word	0x40021800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021c00 	.word	0x40021c00
 8001e08:	40020800 	.word	0x40020800

08001e0c <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 8001e14:	f7ff ff56 	bl	8001cc4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e28:	f7ff ff4c 	bl	8001cc4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e3c:	f7ff ff42 	bl	8001cc4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a43      	ldr	r2, [pc, #268]	; (8001f64 <HAL_SAI_MspInit+0x11c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d124      	bne.n	8001ea4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001e5a:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_SAI_MspInit+0x120>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e62:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_SAI_MspInit+0x124>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a41      	ldr	r2, [pc, #260]	; (8001f6c <HAL_SAI_MspInit+0x124>)
 8001e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b3f      	ldr	r3, [pc, #252]	; (8001f6c <HAL_SAI_MspInit+0x124>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	; (8001f68 <HAL_SAI_MspInit+0x120>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	4a39      	ldr	r2, [pc, #228]	; (8001f68 <HAL_SAI_MspInit+0x120>)
 8001e82:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 8001e84:	2302      	movs	r3, #2
 8001e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e94:	2306      	movs	r3, #6
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4834      	ldr	r0, [pc, #208]	; (8001f70 <HAL_SAI_MspInit+0x128>)
 8001ea0:	f001 fcb6 	bl	8003810 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <HAL_SAI_MspInit+0x12c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d155      	bne.n	8001f5a <HAL_SAI_MspInit+0x112>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <HAL_SAI_MspInit+0x130>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10b      	bne.n	8001ece <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_SAI_MspInit+0x124>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a2c      	ldr	r2, [pc, #176]	; (8001f6c <HAL_SAI_MspInit+0x124>)
 8001ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <HAL_SAI_MspInit+0x124>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8001ece:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_SAI_MspInit+0x130>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a28      	ldr	r2, [pc, #160]	; (8001f78 <HAL_SAI_MspInit+0x130>)
 8001ed6:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ee8:	230a      	movs	r3, #10
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4822      	ldr	r0, [pc, #136]	; (8001f7c <HAL_SAI_MspInit+0x134>)
 8001ef4:	f001 fc8c 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 8001ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	481a      	ldr	r0, [pc, #104]	; (8001f80 <HAL_SAI_MspInit+0x138>)
 8001f16:	f001 fc7b 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	4813      	ldr	r0, [pc, #76]	; (8001f84 <HAL_SAI_MspInit+0x13c>)
 8001f36:	f001 fc6b 	bl	8003810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <HAL_SAI_MspInit+0x13c>)
 8001f56:	f001 fc5b 	bl	8003810 <HAL_GPIO_Init>

    }
}
 8001f5a:	bf00      	nop
 8001f5c:	3728      	adds	r7, #40	; 0x28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40015804 	.word	0x40015804
 8001f68:	20000a5c 	.word	0x20000a5c
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40015c24 	.word	0x40015c24
 8001f78:	20000a60 	.word	0x20000a60
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40020000 	.word	0x40020000

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f8ce 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <SDMMC1_IRQHandler+0x10>)
 8001fe2:	f004 f96b 	bl	80062bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000264 	.word	0x20000264

08001ff0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <DMA2_Stream3_IRQHandler+0x10>)
 8001ff6:	f000 fdd7 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200002e8 	.word	0x200002e8

08002004 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <DMA2_Stream6_IRQHandler+0x10>)
 800200a:	f000 fdcd 	bl	8002ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000348 	.word	0x20000348

08002018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <_sbrk+0x5c>)
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <_sbrk+0x60>)
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <_sbrk+0x64>)
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <_sbrk+0x68>)
 8002038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <_sbrk+0x64>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	429a      	cmp	r2, r3
 8002046:	d207      	bcs.n	8002058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002048:	f00a f9cc 	bl	800c3e4 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	220c      	movs	r2, #12
 8002050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002056:	e009      	b.n	800206c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <_sbrk+0x64>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <_sbrk+0x64>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206a:	68fb      	ldr	r3, [r7, #12]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20080000 	.word	0x20080000
 8002078:	00000800 	.word	0x00000800
 800207c:	20000a64 	.word	0x20000a64
 8002080:	20000f28 	.word	0x20000f28

08002084 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <SystemInit+0x20>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <SystemInit+0x20>)
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c4:	4c0b      	ldr	r4, [pc, #44]	; (80020f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d2:	f7ff ffd7 	bl	8002084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f00a f98b 	bl	800c3f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7fe fac5 	bl	8000668 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020ec:	0800cee0 	.word	0x0800cee0
  ldr r2, =_sbss
 80020f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020f4:	20000f24 	.word	0x20000f24

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>

080020fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fe:	2003      	movs	r0, #3
 8002100:	f000 fbe0 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002104:	2000      	movs	r0, #0
 8002106:	f000 f805 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210a:	f7ff fa47 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fbfb 	bl	800292e <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002150:	f000 fbc3 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000000 	.word	0x20000000
 800216c:	20000008 	.word	0x20000008
 8002170:	20000004 	.word	0x20000004

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000008 	.word	0x20000008
 8002198:	20000a68 	.word	0x20000a68

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000a68 	.word	0x20000a68

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008

080021fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e031      	b.n	8002276 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff f9e2 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_ADC_Init+0x84>)
 8002240:	4013      	ands	r3, r2
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f970 	bl	8002530 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
 8002266:	e001      	b.n	800226c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	ffffeefd 	.word	0xffffeefd

08002284 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1c>
 800229c:	2302      	movs	r3, #2
 800229e:	e136      	b.n	800250e <HAL_ADC_ConfigChannel+0x28a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d93a      	bls.n	8002326 <HAL_ADC_ConfigChannel+0xa2>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022b8:	d035      	beq.n	8002326 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68d9      	ldr	r1, [r3, #12]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	2207      	movs	r2, #7
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a8d      	ldr	r2, [pc, #564]	; (800251c <HAL_ADC_ConfigChannel+0x298>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10a      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68d9      	ldr	r1, [r3, #12]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	061a      	lsls	r2, r3, #24
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fe:	e035      	b.n	800236c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68d9      	ldr	r1, [r3, #12]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	4603      	mov	r3, r0
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4403      	add	r3, r0
 8002318:	3b1e      	subs	r3, #30
 800231a:	409a      	lsls	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002324:	e022      	b.n	800236c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6919      	ldr	r1, [r3, #16]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	2207      	movs	r2, #7
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43da      	mvns	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	400a      	ands	r2, r1
 8002348:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6919      	ldr	r1, [r3, #16]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	4603      	mov	r3, r0
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4403      	add	r3, r0
 8002362:	409a      	lsls	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b06      	cmp	r3, #6
 8002372:	d824      	bhi.n	80023be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b05      	subs	r3, #5
 8002386:	221f      	movs	r2, #31
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43da      	mvns	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	400a      	ands	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	3b05      	subs	r3, #5
 80023b0:	fa00 f203 	lsl.w	r2, r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
 80023bc:	e04c      	b.n	8002458 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d824      	bhi.n	8002410 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b23      	subs	r3, #35	; 0x23
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b23      	subs	r3, #35	; 0x23
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
 800240e:	e023      	b.n	8002458 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b41      	subs	r3, #65	; 0x41
 8002422:	221f      	movs	r2, #31
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43da      	mvns	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	400a      	ands	r2, r1
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	b29b      	uxth	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	3b41      	subs	r3, #65	; 0x41
 800244c:	fa00 f203 	lsl.w	r2, r0, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a30      	ldr	r2, [pc, #192]	; (8002520 <HAL_ADC_ConfigChannel+0x29c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1f4>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800246a:	d105      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800246c:	4b2d      	ldr	r3, [pc, #180]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4a2c      	ldr	r2, [pc, #176]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 8002472:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002476:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_ADC_ConfigChannel+0x29c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10f      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x21e>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b12      	cmp	r3, #18
 8002488:	d10b      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a25      	ldr	r2, [pc, #148]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 8002490:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002494:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4a22      	ldr	r2, [pc, #136]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 800249c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_ADC_ConfigChannel+0x29c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d12b      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x280>
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_ADC_ConfigChannel+0x298>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d003      	beq.n	80024be <HAL_ADC_ConfigChannel+0x23a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d122      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 80024c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80024c8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_ADC_ConfigChannel+0x2a0>)
 80024d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_ADC_ConfigChannel+0x298>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80024e0:	4b11      	ldr	r3, [pc, #68]	; (8002528 <HAL_ADC_ConfigChannel+0x2a4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a11      	ldr	r2, [pc, #68]	; (800252c <HAL_ADC_ConfigChannel+0x2a8>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	0c9a      	lsrs	r2, r3, #18
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024f6:	e002      	b.n	80024fe <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f9      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	10000012 	.word	0x10000012
 8002520:	40012000 	.word	0x40012000
 8002524:	40012300 	.word	0x40012300
 8002528:	20000000 	.word	0x20000000
 800252c:	431bde83 	.word	0x431bde83

08002530 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002538:	4b78      	ldr	r3, [pc, #480]	; (800271c <ADC_Init+0x1ec>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a77      	ldr	r2, [pc, #476]	; (800271c <ADC_Init+0x1ec>)
 800253e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002542:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002544:	4b75      	ldr	r3, [pc, #468]	; (800271c <ADC_Init+0x1ec>)
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4973      	ldr	r1, [pc, #460]	; (800271c <ADC_Init+0x1ec>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6859      	ldr	r1, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	021a      	lsls	r2, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	4a58      	ldr	r2, [pc, #352]	; (8002720 <ADC_Init+0x1f0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6899      	ldr	r1, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	e00f      	b.n	800262a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0202 	bic.w	r2, r2, #2
 8002638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	005a      	lsls	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	3b01      	subs	r3, #1
 8002684:	035a      	lsls	r2, r3, #13
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	e007      	b.n	80026a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	051a      	lsls	r2, r3, #20
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026e2:	025a      	lsls	r2, r3, #9
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	029a      	lsls	r2, r3, #10
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40012300 	.word	0x40012300
 8002720:	0f000001 	.word	0x0f000001

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <__NVIC_SetPriorityGrouping+0x40>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x40>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	05fa0000 	.word	0x05fa0000

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff3e 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff31 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ffa2 	bl	8002880 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fc22 	bl	800219c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e099      	b.n	8002a98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002984:	e00f      	b.n	80029a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002986:	f7ff fc09 	bl	800219c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b05      	cmp	r3, #5
 8002992:	d908      	bls.n	80029a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2220      	movs	r2, #32
 8002998:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2203      	movs	r2, #3
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e078      	b.n	8002a98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e8      	bne.n	8002986 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_DMA_Init+0x158>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d107      	bne.n	8002a10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0307 	bic.w	r3, r3, #7
 8002a26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d117      	bne.n	8002a6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 faa5 	bl	8002f9c <DMA_CheckFifoParam>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a66:	2301      	movs	r3, #1
 8002a68:	e016      	b.n	8002a98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fa5c 	bl	8002f30 <DMA_CalcBaseAndBitshift>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	223f      	movs	r2, #63	; 0x3f
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	e010803f 	.word	0xe010803f

08002aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_DMA_Start_IT+0x26>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e048      	b.n	8002b5c <HAL_DMA_Start_IT+0xb8>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d137      	bne.n	8002b4e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f9ee 	bl	8002ed4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0216 	orr.w	r2, r2, #22
 8002b12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b22:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0208 	orr.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e005      	b.n	8002b5a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b56:	2302      	movs	r3, #2
 8002b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2280      	movs	r2, #128	; 0x80
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00c      	b.n	8002b9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2205      	movs	r2, #5
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002bb4:	4b8e      	ldr	r3, [pc, #568]	; (8002df0 <HAL_DMA_IRQHandler+0x248>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a8e      	ldr	r2, [pc, #568]	; (8002df4 <HAL_DMA_IRQHandler+0x24c>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	0a9b      	lsrs	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01a      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d013      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2208      	movs	r2, #8
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2201      	movs	r2, #1
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	2210      	movs	r2, #16
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d043      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d03c      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d108      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d024      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e01f      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e016      	b.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0208 	bic.w	r2, r2, #8
 8002d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 808f 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8087 	beq.w	8002e48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2220      	movs	r2, #32
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d136      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0216 	bic.w	r2, r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695a      	ldr	r2, [r3, #20]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <HAL_DMA_IRQHandler+0x1da>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0208 	bic.w	r2, r2, #8
 8002d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	223f      	movs	r2, #63	; 0x3f
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d07e      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
        }
        return;
 8002dbe:	e079      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01d      	beq.n	8002e0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d031      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
 8002dec:	e02c      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
 8002dee:	bf00      	nop
 8002df0:	20000000 	.word	0x20000000
 8002df4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d023      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
 8002e08:	e01e      	b.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10f      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0210 	bic.w	r2, r2, #16
 8002e26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d032      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d307      	bcc.n	8002e90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f2      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x2cc>
 8002e8e:	e000      	b.n	8002e92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
 8002eb2:	e000      	b.n	8002eb6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eb4:	bf00      	nop
    }
  }
}
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d108      	bne.n	8002f14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f12:	e007      	b.n	8002f24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3b10      	subs	r3, #16
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <DMA_CalcBaseAndBitshift+0x60>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f4a:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <DMA_CalcBaseAndBitshift+0x64>)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	461a      	mov	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b03      	cmp	r3, #3
 8002f5c:	d908      	bls.n	8002f70 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <DMA_CalcBaseAndBitshift+0x68>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	1d1a      	adds	r2, r3, #4
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8002f6e:	e006      	b.n	8002f7e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <DMA_CalcBaseAndBitshift+0x68>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	aaaaaaab 	.word	0xaaaaaaab
 8002f94:	0800cde0 	.word	0x0800cde0
 8002f98:	fffffc00 	.word	0xfffffc00

08002f9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11f      	bne.n	8002ff6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d856      	bhi.n	800306a <DMA_CheckFifoParam+0xce>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <DMA_CheckFifoParam+0x28>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fe7 	.word	0x08002fe7
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	0800306b 	.word	0x0800306b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d046      	beq.n	800306e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe4:	e043      	b.n	800306e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fee:	d140      	bne.n	8003072 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff4:	e03d      	b.n	8003072 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffe:	d121      	bne.n	8003044 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d837      	bhi.n	8003076 <DMA_CheckFifoParam+0xda>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <DMA_CheckFifoParam+0x70>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	0800301d 	.word	0x0800301d
 8003010:	08003023 	.word	0x08003023
 8003014:	0800301d 	.word	0x0800301d
 8003018:	08003035 	.word	0x08003035
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      break;
 8003020:	e030      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d025      	beq.n	800307a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003032:	e022      	b.n	800307a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800303c:	d11f      	bne.n	800307e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003042:	e01c      	b.n	800307e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2b02      	cmp	r3, #2
 8003048:	d903      	bls.n	8003052 <DMA_CheckFifoParam+0xb6>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b03      	cmp	r3, #3
 800304e:	d003      	beq.n	8003058 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003050:	e018      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	73fb      	strb	r3, [r7, #15]
      break;
 8003056:	e015      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00e      	beq.n	8003082 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e00b      	b.n	8003082 <DMA_CheckFifoParam+0xe6>
      break;
 800306a:	bf00      	nop
 800306c:	e00a      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 800306e:	bf00      	nop
 8003070:	e008      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 8003072:	bf00      	nop
 8003074:	e006      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 8003076:	bf00      	nop
 8003078:	e004      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 800307a:	bf00      	nop
 800307c:	e002      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;   
 800307e:	bf00      	nop
 8003080:	e000      	b.n	8003084 <DMA_CheckFifoParam+0xe8>
      break;
 8003082:	bf00      	nop
    }
  } 
  
  return status; 
 8003084:	7bfb      	ldrb	r3, [r7, #15]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop

08003094 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e109      	b.n	80032bc <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7c5b      	ldrb	r3, [r3, #17]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fad6 	bl	8001664 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80030d2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80030de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e6:	f7ff f859 	bl	800219c <HAL_GetTick>
 80030ea:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80030ec:	e009      	b.n	8003102 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80030ee:	f7ff f855 	bl	800219c <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030fc:	d901      	bls.n	8003102 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0dc      	b.n	80032bc <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800310a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ed      	beq.n	80030ee <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b69      	ldr	r3, [pc, #420]	; (80032c4 <HAL_DSI_Init+0x230>)
 8003120:	400b      	ands	r3, r1
 8003122:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800313a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003142:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8003176:	2001      	movs	r0, #1
 8003178:	f7ff f81c 	bl	80021b4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f7ff f80e 	bl	800219c <HAL_GetTick>
 8003180:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003182:	e009      	b.n	8003198 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003184:	f7ff f80a 	bl	800219c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003192:	d901      	bls.n	8003198 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e091      	b.n	80032bc <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ed      	beq.n	8003184 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0206 	orr.w	r2, r2, #6
 80031b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0203 	bic.w	r2, r2, #3
 80031cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0203 	bic.w	r2, r2, #3
 80031fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003222:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <HAL_DSI_Init+0x1b0>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	e000      	b.n	8003246 <HAL_DSI_Init+0x1b2>
 8003244:	2301      	movs	r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <HAL_DSI_Init+0x234>)
 800324c:	fb03 f202 	mul.w	r2, r3, r2
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	409a      	lsls	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800327c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	430a      	orrs	r2, r1
 8003290:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2200      	movs	r2, #0
 800329a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3720      	adds	r7, #32
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	fffc8603 	.word	0xfffc8603
 80032c8:	003d0900 	.word	0x003d0900

080032cc <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7c1b      	ldrb	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_DSI_ConfigErrorMonitor+0x16>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0aa      	b.n	8003438 <HAL_DSI_ConfigErrorMonitor+0x16c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800331c:	430b      	orrs	r3, r1
 800331e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d009      	beq.n	8003340 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800333c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d009      	beq.n	800335e <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0202 	orr.w	r2, r2, #2
 8003378:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f003 0310 	and.w	r3, r3, #16
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 020c 	orr.w	r2, r2, #12
 8003396:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d009      	beq.n	80033b8 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0210 	orr.w	r2, r2, #16
 80033b4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800340e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800342c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	7c1b      	ldrb	r3, [r3, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_DSI_ConfigCommand+0x16>
 8003456:	2302      	movs	r3, #2
 8003458:	e049      	b.n	80034ee <HAL_DSI_ConfigCommand+0xaa>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_DSI_ConfigCommand+0xb8>)
 800346c:	400b      	ands	r3, r1
 800346e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800347e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003484:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800348a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003490:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003496:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800349c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 80034a2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80034a8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80034ae:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80034b4:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80034ba:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0202 	bic.w	r2, r2, #2
 80034d2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	fef080ff 	.word	0xfef080ff

08003500 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7c1b      	ldrb	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_DSI_ConfigFlowControl+0x16>
 8003512:	2302      	movs	r3, #2
 8003514:	e016      	b.n	8003544 <HAL_DSI_ConfigFlowControl+0x44>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 021f 	bic.w	r2, r2, #31
 800352a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7c1b      	ldrb	r3, [r3, #16]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_DSI_ConfigPhyTimer+0x16>
 8003562:	2302      	movs	r3, #2
 8003564:	e058      	b.n	8003618 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4293      	cmp	r3, r2
 8003576:	bf38      	it	cc
 8003578:	4613      	movcc	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800358c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	041a      	lsls	r2, r3, #16
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80035ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80035f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	021a      	lsls	r2, r3, #8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7c1b      	ldrb	r3, [r3, #16]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d101      	bne.n	800363a <HAL_DSI_ConfigHostTimeouts+0x16>
 8003636:	2302      	movs	r3, #2
 8003638:	e0b4      	b.n	80037a4 <HAL_DSI_ConfigHostTimeouts+0x180>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2201      	movs	r2, #1
 800363e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800364e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	021a      	lsls	r2, r3, #8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b292      	uxth	r2, r2
 8003670:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003692:	400b      	ands	r3, r1
 8003694:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4b3f      	ldr	r3, [pc, #252]	; (80037b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80036b4:	400b      	ands	r3, r1
 80036b6:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68da      	ldr	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80036d8:	400b      	ands	r3, r1
 80036da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	691a      	ldr	r2, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003702:	400b      	ands	r3, r1
 8003704:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800372e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003756:	400b      	ands	r3, r1
 8003758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8003780:	400b      	ands	r3, r1
 8003782:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6a1a      	ldr	r2, [r3, #32]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	ffff0000 	.word	0xffff0000

080037b4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7c1b      	ldrb	r3, [r3, #16]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_DSI_SetLowPowerRXFilter+0x16>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e01b      	b.n	8003802 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80037e0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	065a      	lsls	r2, r3, #25
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003810:	b480      	push	{r7}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e175      	b.n	8003b1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003830:	2201      	movs	r2, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4013      	ands	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	429a      	cmp	r2, r3
 800384a:	f040 8164 	bne.w	8003b16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d005      	beq.n	8003866 <HAL_GPIO_Init+0x56>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d130      	bne.n	80038c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800389c:	2201      	movs	r2, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 0201 	and.w	r2, r3, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d017      	beq.n	8003904 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d123      	bne.n	8003958 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	08da      	lsrs	r2, r3, #3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3208      	adds	r2, #8
 8003918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	220f      	movs	r2, #15
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4013      	ands	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	08da      	lsrs	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3208      	adds	r2, #8
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f003 0203 	and.w	r2, r3, #3
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80be 	beq.w	8003b16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_GPIO_Init+0x324>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_GPIO_Init+0x324>)
 80039a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a4:	6453      	str	r3, [r2, #68]	; 0x44
 80039a6:	4b63      	ldr	r3, [pc, #396]	; (8003b34 <HAL_GPIO_Init+0x324>)
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039b2:	4a61      	ldr	r2, [pc, #388]	; (8003b38 <HAL_GPIO_Init+0x328>)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	3302      	adds	r3, #2
 80039ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	220f      	movs	r2, #15
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4013      	ands	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a58      	ldr	r2, [pc, #352]	; (8003b3c <HAL_GPIO_Init+0x32c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d037      	beq.n	8003a4e <HAL_GPIO_Init+0x23e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a57      	ldr	r2, [pc, #348]	; (8003b40 <HAL_GPIO_Init+0x330>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d031      	beq.n	8003a4a <HAL_GPIO_Init+0x23a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a56      	ldr	r2, [pc, #344]	; (8003b44 <HAL_GPIO_Init+0x334>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d02b      	beq.n	8003a46 <HAL_GPIO_Init+0x236>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a55      	ldr	r2, [pc, #340]	; (8003b48 <HAL_GPIO_Init+0x338>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d025      	beq.n	8003a42 <HAL_GPIO_Init+0x232>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a54      	ldr	r2, [pc, #336]	; (8003b4c <HAL_GPIO_Init+0x33c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01f      	beq.n	8003a3e <HAL_GPIO_Init+0x22e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a53      	ldr	r2, [pc, #332]	; (8003b50 <HAL_GPIO_Init+0x340>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d019      	beq.n	8003a3a <HAL_GPIO_Init+0x22a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a52      	ldr	r2, [pc, #328]	; (8003b54 <HAL_GPIO_Init+0x344>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d013      	beq.n	8003a36 <HAL_GPIO_Init+0x226>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a51      	ldr	r2, [pc, #324]	; (8003b58 <HAL_GPIO_Init+0x348>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00d      	beq.n	8003a32 <HAL_GPIO_Init+0x222>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a50      	ldr	r2, [pc, #320]	; (8003b5c <HAL_GPIO_Init+0x34c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <HAL_GPIO_Init+0x21e>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4f      	ldr	r2, [pc, #316]	; (8003b60 <HAL_GPIO_Init+0x350>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_GPIO_Init+0x21a>
 8003a26:	2309      	movs	r3, #9
 8003a28:	e012      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	e010      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	e00e      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a32:	2307      	movs	r3, #7
 8003a34:	e00c      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a36:	2306      	movs	r3, #6
 8003a38:	e00a      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a3a:	2305      	movs	r3, #5
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x240>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a60:	4935      	ldr	r1, [pc, #212]	; (8003b38 <HAL_GPIO_Init+0x328>)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a98:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003abc:	4a29      	ldr	r2, [pc, #164]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac2:	4b28      	ldr	r3, [pc, #160]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b10:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <HAL_GPIO_Init+0x354>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	f67f ae86 	bls.w	8003830 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3724      	adds	r7, #36	; 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40013800 	.word	0x40013800
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020400 	.word	0x40020400
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020c00 	.word	0x40020c00
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40021400 	.word	0x40021400
 8003b54:	40021800 	.word	0x40021800
 8003b58:	40021c00 	.word	0x40021c00
 8003b5c:	40022000 	.word	0x40022000
 8003b60:	40022400 	.word	0x40022400
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e001      	b.n	8003b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bb4:	e003      	b.n	8003bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	041a      	lsls	r2, r3, #16
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	400b      	ands	r3, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_NOR_Init>:
  * @param  ExtTiming pointer to NOR extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing,
                               FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t deviceaddress;
  HAL_StatusTypeDef status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	74fb      	strb	r3, [r7, #19]

  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_NOR_Init+0x1a>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e090      	b.n	8003d3c <HAL_NOR_Init+0x13c>
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_NOR_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hnor->Lock = HAL_UNLOCKED;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hnor->MspInitCallback(hnor);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NOR_MspInit(hnor);
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7fe f8ec 	bl	8001e0c <HAL_NOR_MspInit>
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f004 f928 	bl	8007e94 <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68b9      	ldr	r1, [r7, #8]
 8003c50:	f004 f9b0 	bl	8007fb4 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6858      	ldr	r0, [r3, #4]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	f004 f9f7 	bl	8008054 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	6892      	ldr	r2, [r2, #8]
 8003c6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	f041 0101 	orr.w	r1, r1, #1
 8003c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <HAL_NOR_Init+0x92>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8003c8a:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <HAL_NOR_Init+0x144>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e002      	b.n	8003c98 <HAL_NOR_Init+0x98>
  }
  else
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8003c92:	4b2c      	ldr	r3, [pc, #176]	; (8003d44 <HAL_NOR_Init+0x144>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Select the NOR device address */
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d103      	bne.n	8003cb0 <HAL_NOR_Init+0xb0>
  {
    deviceaddress = NOR_MEMORY_ADRESS1;
 8003ca8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e012      	b.n	8003cd6 <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d103      	bne.n	8003cc0 <HAL_NOR_Init+0xc0>
  {
    deviceaddress = NOR_MEMORY_ADRESS2;
 8003cb8:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e00a      	b.n	8003cd6 <HAL_NOR_Init+0xd6>
  }
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d103      	bne.n	8003cd0 <HAL_NOR_Init+0xd0>
  {
    deviceaddress = NOR_MEMORY_ADRESS3;
 8003cc8:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e002      	b.n	8003cd6 <HAL_NOR_Init+0xd6>
  }
  else /* FMC_NORSRAM_BANK4 */
  {
    deviceaddress = NOR_MEMORY_ADRESS4;
 8003cd0:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003cd4:	617b      	str	r3, [r7, #20]
  }

  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_NOR_Init+0xf8>
  {
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f004 f9eb 	bl	80080c4 <FMC_NORSRAM_WriteOperation_Disable>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf6:	e020      	b.n	8003d3a <HAL_NOR_Init+0x13a>
  }
  else
  {
    /* Get the value of the command set */
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_NOR_Init+0x144>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d102      	bne.n	8003d06 <HAL_NOR_Init+0x106>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	33aa      	adds	r3, #170	; 0xaa
 8003d04:	e001      	b.n	8003d0a <HAL_NOR_Init+0x10a>
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3355      	adds	r3, #85	; 0x55
 8003d0a:	2298      	movs	r2, #152	; 0x98
 8003d0c:	801a      	strh	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d0e:	f3bf 8f4f 	dsb	sy
}
 8003d12:	bf00      	nop
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_NOR_Init+0x144>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d102      	bne.n	8003d22 <HAL_NOR_Init+0x122>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	3326      	adds	r3, #38	; 0x26
 8003d20:	e001      	b.n	8003d26 <HAL_NOR_Init+0x126>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	3313      	adds	r3, #19
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	649a      	str	r2, [r3, #72]	; 0x48

    status = HAL_NOR_ReturnToReadMode(hnor);
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f809 	bl	8003d48 <HAL_NOR_ReturnToReadMode>
 8003d36:	4603      	mov	r3, r0
 8003d38:	74fb      	strb	r3, [r7, #19]
  }

  return status;
 8003d3a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000a6c 	.word	0x20000a6c

08003d48 <HAL_NOR_ReturnToReadMode>:
  * @param  hnor pointer to a NOR_HandleTypeDef structure that contains
  *                the configuration information for NOR module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_ReturnToReadMode(NOR_HandleTypeDef *hnor)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	72fb      	strb	r3, [r7, #11]

  /* Check the NOR controller state */
  state = hnor->State;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5a:	72bb      	strb	r3, [r7, #10]
  if (state == HAL_NOR_STATE_BUSY)
 8003d5c:	7abb      	ldrb	r3, [r7, #10]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d101      	bne.n	8003d66 <HAL_NOR_ReturnToReadMode+0x1e>
  {
    return HAL_BUSY;
 8003d62:	2302      	movs	r3, #2
 8003d64:	e052      	b.n	8003e0c <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
 8003d66:	7abb      	ldrb	r3, [r7, #10]
 8003d68:	2b04      	cmp	r3, #4
 8003d6a:	d101      	bne.n	8003d70 <HAL_NOR_ReturnToReadMode+0x28>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e04d      	b.n	8003e0c <HAL_NOR_ReturnToReadMode+0xc4>
  }
  else if (state == HAL_NOR_STATE_READY)
 8003d70:	7abb      	ldrb	r3, [r7, #10]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d149      	bne.n	8003e0a <HAL_NOR_ReturnToReadMode+0xc2>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_NOR_ReturnToReadMode+0x3c>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e043      	b.n	8003e0c <HAL_NOR_ReturnToReadMode+0xc4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d103      	bne.n	8003da4 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
 8003d9c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e012      	b.n	8003dca <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d103      	bne.n	8003db4 <HAL_NOR_ReturnToReadMode+0x6c>
    {
      deviceaddress = NOR_MEMORY_ADRESS2;
 8003dac:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e00a      	b.n	8003dca <HAL_NOR_ReturnToReadMode+0x82>
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK3)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d103      	bne.n	8003dc4 <HAL_NOR_ReturnToReadMode+0x7c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
 8003dbc:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e002      	b.n	8003dca <HAL_NOR_ReturnToReadMode+0x82>
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8003dc4:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003dc8:	60fb      	str	r3, [r7, #12]
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d105      	bne.n	8003dde <HAL_NOR_ReturnToReadMode+0x96>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	22f0      	movs	r2, #240	; 0xf0
 8003dd6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dd8:	f3bf 8f4f 	dsb	sy
}
 8003ddc:	e00b      	b.n	8003df6 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d105      	bne.n	8003df2 <HAL_NOR_ReturnToReadMode+0xaa>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	22ff      	movs	r2, #255	; 0xff
 8003dea:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003dec:	f3bf 8f4f 	dsb	sy
}
 8003df0:	e001      	b.n	8003df6 <HAL_NOR_ReturnToReadMode+0xae>
    }
    else
    {
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	72fb      	strb	r3, [r7, #11]
    }

    /* Check the NOR controller state */
    hnor->State = state;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7aba      	ldrb	r2, [r7, #10]
 8003dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_ERROR;
  }

  return status;
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	e000      	b.n	8003e0c <HAL_NOR_ReturnToReadMode+0xc4>
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1a:	b08f      	sub	sp, #60	; 0x3c
 8003e1c:	af0a      	add	r7, sp, #40	; 0x28
 8003e1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e116      	b.n	8004058 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7fd fed3 	bl	8001bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d102      	bne.n	8003e64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 ffd5 	bl	8008e18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	687e      	ldr	r6, [r7, #4]
 8003e76:	466d      	mov	r5, sp
 8003e78:	f106 0410 	add.w	r4, r6, #16
 8003e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e88:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e8c:	1d33      	adds	r3, r6, #4
 8003e8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e90:	6838      	ldr	r0, [r7, #0]
 8003e92:	f004 ff69 	bl	8008d68 <USB_CoreInit>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0d7      	b.n	8004058 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f004 ffc3 	bl	8008e3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	73fb      	strb	r3, [r7, #15]
 8003eb8:	e04a      	b.n	8003f50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003eba:	7bfa      	ldrb	r2, [r7, #15]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	333d      	adds	r3, #61	; 0x3d
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	333c      	adds	r3, #60	; 0x3c
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	b298      	uxth	r0, r3
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3344      	adds	r3, #68	; 0x44
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	3340      	adds	r3, #64	; 0x40
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3348      	adds	r3, #72	; 0x48
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f22:	7bfa      	ldrb	r2, [r7, #15]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334c      	adds	r3, #76	; 0x4c
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f36:	7bfa      	ldrb	r2, [r7, #15]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	3354      	adds	r3, #84	; 0x54
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3af      	bcc.n	8003eba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e044      	b.n	8003fea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f76:	7bfa      	ldrb	r2, [r7, #15]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	4413      	add	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d3b5      	bcc.n	8003f60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	687e      	ldr	r6, [r7, #4]
 8003ffc:	466d      	mov	r5, sp
 8003ffe:	f106 0410 	add.w	r4, r6, #16
 8004002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800400e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004012:	1d33      	adds	r3, r6, #4
 8004014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004016:	6838      	ldr	r0, [r7, #0]
 8004018:	f004 ff5c 	bl	8008ed4 <USB_DevInit>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e014      	b.n	8004058 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	2b01      	cmp	r3, #1
 8004044:	d102      	bne.n	800404c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f80a 	bl	8004060 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f005 f91a 	bl	800928a <USB_DevDisconnect>

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004060 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004090:	4313      	orrs	r3, r2
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	10000003 	.word	0x10000003

080040a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a04      	ldr	r2, [pc, #16]	; (80040c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b6:	6013      	str	r3, [r2, #0]
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40007000 	.word	0x40007000

080040c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7fe f864 	bl	800219c <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e067      	b.n	80041b0 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7fd faf9 	bl	80016ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80040fa:	f241 3188 	movw	r1, #5000	; 0x1388
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f85e 	bl	80041c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	3b01      	subs	r3, #1
 8004114:	021a      	lsls	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	2120      	movs	r1, #32
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f856 	bl	80041dc <QSPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d135      	bne.n	80041a6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_QSPI_Init+0xf0>)
 8004142:	4013      	ands	r3, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6852      	ldr	r2, [r2, #4]
 8004148:	0611      	lsls	r1, r2, #24
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68d2      	ldr	r2, [r2, #12]
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	69d2      	ldr	r2, [r2, #28]
 8004154:	4311      	orrs	r1, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6a12      	ldr	r2, [r2, #32]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <HAL_QSPI_Init+0xf4>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6912      	ldr	r2, [r2, #16]
 8004172:	0411      	lsls	r1, r2, #16
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6952      	ldr	r2, [r2, #20]
 8004178:	4311      	orrs	r1, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6992      	ldr	r2, [r2, #24]
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	430b      	orrs	r3, r1
 8004186:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041ae:	7afb      	ldrb	r3, [r7, #11]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	00ffff2f 	.word	0x00ffff2f
 80041bc:	ffe0f8fe 	.word	0xffe0f8fe

080041c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041ec:	e01a      	b.n	8004224 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f4:	d016      	beq.n	8004224 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fd ffd1 	bl	800219c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2204      	movs	r2, #4
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	f043 0201 	orr.w	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e00e      	b.n	8004242 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	79fb      	ldrb	r3, [r7, #7]
 800423c:	429a      	cmp	r2, r3
 800423e:	d1d6      	bne.n	80041ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e29b      	b.n	800479a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8087 	beq.w	800437e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004270:	4b96      	ldr	r3, [pc, #600]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b04      	cmp	r3, #4
 800427a:	d00c      	beq.n	8004296 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427c:	4b93      	ldr	r3, [pc, #588]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b08      	cmp	r3, #8
 8004286:	d112      	bne.n	80042ae <HAL_RCC_OscConfig+0x62>
 8004288:	4b90      	ldr	r3, [pc, #576]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004294:	d10b      	bne.n	80042ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004296:	4b8d      	ldr	r3, [pc, #564]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d06c      	beq.n	800437c <HAL_RCC_OscConfig+0x130>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d168      	bne.n	800437c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e275      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x7a>
 80042b8:	4b84      	ldr	r3, [pc, #528]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a83      	ldr	r2, [pc, #524]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_OscConfig+0xd8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x9c>
 80042ce:	4b7f      	ldr	r3, [pc, #508]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7e      	ldr	r2, [pc, #504]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b7c      	ldr	r3, [pc, #496]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a7b      	ldr	r2, [pc, #492]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <HAL_RCC_OscConfig+0xd8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0xc0>
 80042f2:	4b76      	ldr	r3, [pc, #472]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a75      	ldr	r2, [pc, #468]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b73      	ldr	r3, [pc, #460]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a72      	ldr	r2, [pc, #456]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xd8>
 800430c:	4b6f      	ldr	r3, [pc, #444]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6e      	ldr	r2, [pc, #440]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b6c      	ldr	r3, [pc, #432]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800431e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd ff36 	bl	800219c <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004334:	f7fd ff32 	bl	800219c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e229      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b61      	ldr	r3, [pc, #388]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xe8>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd ff22 	bl	800219c <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fd ff1e 	bl	800219c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e215      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b57      	ldr	r3, [pc, #348]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x110>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d069      	beq.n	800445e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800438a:	4b50      	ldr	r3, [pc, #320]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b4d      	ldr	r3, [pc, #308]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x190>
 80043a2:	4b4a      	ldr	r3, [pc, #296]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b47      	ldr	r3, [pc, #284]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1e9      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b41      	ldr	r3, [pc, #260]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	493d      	ldr	r1, [pc, #244]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e040      	b.n	800445e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a38      	ldr	r2, [pc, #224]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fed4 	bl	800219c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fd fed0 	bl	800219c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e1c7      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b30      	ldr	r3, [pc, #192]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b2d      	ldr	r3, [pc, #180]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4929      	ldr	r1, [pc, #164]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
 800442a:	e018      	b.n	800445e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442c:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a26      	ldr	r2, [pc, #152]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd feb0 	bl	800219c <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004440:	f7fd feac 	bl	800219c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1a3      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d038      	beq.n	80044dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d019      	beq.n	80044a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b16      	ldr	r3, [pc, #88]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004476:	4a15      	ldr	r2, [pc, #84]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fd fe8d 	bl	800219c <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004486:	f7fd fe89 	bl	800219c <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e180      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x23a>
 80044a4:	e01a      	b.n	80044dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044aa:	4a08      	ldr	r2, [pc, #32]	; (80044cc <HAL_RCC_OscConfig+0x280>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fd fe73 	bl	800219c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fd fe6f 	bl	800219c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d903      	bls.n	80044d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e166      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
 80044cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ee      	bne.n	80044ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80a4 	beq.w	8004632 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ea:	4b8c      	ldr	r3, [pc, #560]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10d      	bne.n	8004512 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f6:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a88      	ldr	r2, [pc, #544]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b86      	ldr	r3, [pc, #536]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004512:	4b83      	ldr	r3, [pc, #524]	; (8004720 <HAL_RCC_OscConfig+0x4d4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800451e:	4b80      	ldr	r3, [pc, #512]	; (8004720 <HAL_RCC_OscConfig+0x4d4>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7f      	ldr	r2, [pc, #508]	; (8004720 <HAL_RCC_OscConfig+0x4d4>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fd fe37 	bl	800219c <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fd fe33 	bl	800219c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b64      	cmp	r3, #100	; 0x64
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e12a      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	4b76      	ldr	r3, [pc, #472]	; (8004720 <HAL_RCC_OscConfig+0x4d4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x31a>
 8004558:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	4a6f      	ldr	r2, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	; 0x70
 8004564:	e02d      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x33c>
 800456e:	4b6b      	ldr	r3, [pc, #428]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a6a      	ldr	r2, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
 800457a:	4b68      	ldr	r3, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	4a67      	ldr	r2, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	6713      	str	r3, [r2, #112]	; 0x70
 8004586:	e01c      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x35e>
 8004590:	4b62      	ldr	r3, [pc, #392]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a61      	ldr	r2, [pc, #388]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	4b5f      	ldr	r3, [pc, #380]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	4a5e      	ldr	r2, [pc, #376]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	; 0x70
 80045a8:	e00b      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
 80045aa:	4b5c      	ldr	r3, [pc, #368]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a5b      	ldr	r2, [pc, #364]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
 80045b6:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fd fde7 	bl	800219c <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fd fde3 	bl	800219c <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0d8      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCC_OscConfig+0x386>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fdd1 	bl	800219c <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fd fdcd 	bl	800219c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	; 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0c2      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	4b41      	ldr	r3, [pc, #260]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a3c      	ldr	r2, [pc, #240]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80ae 	beq.w	8004798 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800463c:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d06d      	beq.n	8004724 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d14b      	bne.n	80046e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b32      	ldr	r3, [pc, #200]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a31      	ldr	r2, [pc, #196]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fd9e 	bl	800219c <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fd fd9a 	bl	800219c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e091      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b29      	ldr	r3, [pc, #164]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	071b      	lsls	r3, r3, #28
 80046ae:	491b      	ldr	r1, [pc, #108]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fd6c 	bl	800219c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fd fd68 	bl	800219c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e05f      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x47c>
 80046e6:	e057      	b.n	8004798 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a0b      	ldr	r2, [pc, #44]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 80046ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fd fd52 	bl	800219c <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fc:	f7fd fd4e 	bl	800219c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e045      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470e:	4b03      	ldr	r3, [pc, #12]	; (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f0      	bne.n	80046fc <HAL_RCC_OscConfig+0x4b0>
 800471a:	e03d      	b.n	8004798 <HAL_RCC_OscConfig+0x54c>
 800471c:	40023800 	.word	0x40023800
 8004720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004724:	4b1f      	ldr	r3, [pc, #124]	; (80047a4 <HAL_RCC_OscConfig+0x558>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d030      	beq.n	8004794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d129      	bne.n	8004794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d122      	bne.n	8004794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d119      	bne.n	8004794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d10f      	bne.n	8004794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d107      	bne.n	8004794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0d0      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c0:	4b6a      	ldr	r3, [pc, #424]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d910      	bls.n	80047f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b67      	ldr	r3, [pc, #412]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 020f 	bic.w	r2, r3, #15
 80047d6:	4965      	ldr	r1, [pc, #404]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b63      	ldr	r3, [pc, #396]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e0b8      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d020      	beq.n	800483e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004808:	4b59      	ldr	r3, [pc, #356]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004812:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004820:	4b53      	ldr	r3, [pc, #332]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	4a52      	ldr	r2, [pc, #328]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800482a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800482c:	4b50      	ldr	r3, [pc, #320]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	494d      	ldr	r1, [pc, #308]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d040      	beq.n	80048cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004852:	4b47      	ldr	r3, [pc, #284]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d115      	bne.n	800488a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d107      	bne.n	800487a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e073      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487a:	4b3d      	ldr	r3, [pc, #244]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e06b      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488a:	4b39      	ldr	r3, [pc, #228]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4936      	ldr	r1, [pc, #216]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	4313      	orrs	r3, r2
 800489a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800489c:	f7fd fc7e 	bl	800219c <HAL_GetTick>
 80048a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a4:	f7fd fc7a 	bl	800219c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e053      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ba:	4b2d      	ldr	r3, [pc, #180]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 020c 	and.w	r2, r3, #12
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d1eb      	bne.n	80048a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048cc:	4b27      	ldr	r3, [pc, #156]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d210      	bcs.n	80048fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048da:	4b24      	ldr	r3, [pc, #144]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 020f 	bic.w	r2, r3, #15
 80048e2:	4922      	ldr	r1, [pc, #136]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004908:	4b19      	ldr	r3, [pc, #100]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4916      	ldr	r1, [pc, #88]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0308 	and.w	r3, r3, #8
 8004922:	2b00      	cmp	r3, #0
 8004924:	d009      	beq.n	800493a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	490e      	ldr	r1, [pc, #56]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	4313      	orrs	r3, r2
 8004938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800493a:	f000 f821 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 800493e:	4602      	mov	r2, r0
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_ClockConfig+0x1c8>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	490a      	ldr	r1, [pc, #40]	; (8004974 <HAL_RCC_ClockConfig+0x1cc>)
 800494c:	5ccb      	ldrb	r3, [r1, r3]
 800494e:	fa22 f303 	lsr.w	r3, r2, r3
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <HAL_RCC_ClockConfig+0x1d0>)
 8004954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCC_ClockConfig+0x1d4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fbda 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023c00 	.word	0x40023c00
 8004970:	40023800 	.word	0x40023800
 8004974:	0800cdc8 	.word	0x0800cdc8
 8004978:	20000000 	.word	0x20000000
 800497c:	20000004 	.word	0x20000004

08004980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004984:	b090      	sub	sp, #64	; 0x40
 8004986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
 800498c:	2300      	movs	r3, #0
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004990:	2300      	movs	r3, #0
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004998:	4b59      	ldr	r3, [pc, #356]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x180>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d00d      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0x40>
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	f200 80a1 	bhi.w	8004aec <HAL_RCC_GetSysClockFreq+0x16c>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x34>
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x3a>
 80049b2:	e09b      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b4:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x184>)
 80049b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049b8:	e09b      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049ba:	4b53      	ldr	r3, [pc, #332]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049be:	e098      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049c0:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049ca:	4b4d      	ldr	r3, [pc, #308]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d028      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d6:	4b4a      	ldr	r3, [pc, #296]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	099b      	lsrs	r3, r3, #6
 80049dc:	2200      	movs	r2, #0
 80049de:	623b      	str	r3, [r7, #32]
 80049e0:	627a      	str	r2, [r7, #36]	; 0x24
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049e8:	2100      	movs	r1, #0
 80049ea:	4b47      	ldr	r3, [pc, #284]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80049ec:	fb03 f201 	mul.w	r2, r3, r1
 80049f0:	2300      	movs	r3, #0
 80049f2:	fb00 f303 	mul.w	r3, r0, r3
 80049f6:	4413      	add	r3, r2
 80049f8:	4a43      	ldr	r2, [pc, #268]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x188>)
 80049fa:	fba0 1202 	umull	r1, r2, r0, r2
 80049fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a00:	460a      	mov	r2, r1
 8004a02:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a06:	4413      	add	r3, r2
 8004a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	61fa      	str	r2, [r7, #28]
 8004a12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a16:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a1a:	f7fb fc69 	bl	80002f0 <__aeabi_uldivmod>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	4613      	mov	r3, r2
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a26:	e053      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a28:	4b35      	ldr	r3, [pc, #212]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	2200      	movs	r2, #0
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	617a      	str	r2, [r7, #20]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a3a:	f04f 0b00 	mov.w	fp, #0
 8004a3e:	4652      	mov	r2, sl
 8004a40:	465b      	mov	r3, fp
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f04f 0100 	mov.w	r1, #0
 8004a4a:	0159      	lsls	r1, r3, #5
 8004a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a50:	0150      	lsls	r0, r2, #5
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	ebb2 080a 	subs.w	r8, r2, sl
 8004a5a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a6a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a6e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a72:	ebb2 0408 	subs.w	r4, r2, r8
 8004a76:	eb63 0509 	sbc.w	r5, r3, r9
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	00eb      	lsls	r3, r5, #3
 8004a84:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a88:	00e2      	lsls	r2, r4, #3
 8004a8a:	4614      	mov	r4, r2
 8004a8c:	461d      	mov	r5, r3
 8004a8e:	eb14 030a 	adds.w	r3, r4, sl
 8004a92:	603b      	str	r3, [r7, #0]
 8004a94:	eb45 030b 	adc.w	r3, r5, fp
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	028b      	lsls	r3, r1, #10
 8004aaa:	4621      	mov	r1, r4
 8004aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	028a      	lsls	r2, r1, #10
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aba:	2200      	movs	r2, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	60fa      	str	r2, [r7, #12]
 8004ac0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac4:	f7fb fc14 	bl	80002f0 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	3301      	adds	r3, #1
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x184>)
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3740      	adds	r7, #64	; 0x40
 8004af8:	46bd      	mov	sp, r7
 8004afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	017d7840 	.word	0x017d7840

08004b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000000 	.word	0x20000000

08004b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b28:	f7ff fff0 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0a9b      	lsrs	r3, r3, #10
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	0800cdd8 	.word	0x0800cdd8

08004b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b50:	f7ff ffdc 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b54:	4602      	mov	r2, r0
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	0b5b      	lsrs	r3, r3, #13
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4903      	ldr	r1, [pc, #12]	; (8004b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b62:	5ccb      	ldrb	r3, [r1, r3]
 8004b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	0800cdd8 	.word	0x0800cdd8

08004b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d012      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b9c:	4b69      	ldr	r3, [pc, #420]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	4a68      	ldr	r2, [pc, #416]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ba6:	6093      	str	r3, [r2, #8]
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb0:	4964      	ldr	r1, [pc, #400]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d017      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bce:	4b5d      	ldr	r3, [pc, #372]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	4959      	ldr	r1, [pc, #356]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d017      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c0a:	4b4e      	ldr	r3, [pc, #312]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	494a      	ldr	r1, [pc, #296]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c28:	d101      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c36:	2301      	movs	r3, #1
 8004c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 808b 	beq.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	4b3a      	ldr	r3, [pc, #232]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	4a39      	ldr	r2, [pc, #228]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6413      	str	r3, [r2, #64]	; 0x40
 8004c64:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a34      	ldr	r2, [pc, #208]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7c:	f7fd fa8e 	bl	800219c <HAL_GetTick>
 8004c80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c84:	f7fd fa8a 	bl	800219c <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	; 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e38f      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c96:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca2:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d035      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d02e      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc0:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ce2:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d114      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fa52 	bl	800219c <HAL_GetTick>
 8004cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fa4e 	bl	800219c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e351      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d111      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d3a:	400b      	ands	r3, r1
 8004d3c:	4901      	ldr	r1, [pc, #4]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
 8004d42:	e00b      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	0ffffcff 	.word	0x0ffffcff
 8004d50:	4bac      	ldr	r3, [pc, #688]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4aab      	ldr	r2, [pc, #684]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	4ba9      	ldr	r3, [pc, #676]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d68:	49a6      	ldr	r1, [pc, #664]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d7a:	4ba2      	ldr	r3, [pc, #648]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d80:	4aa0      	ldr	r2, [pc, #640]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d8a:	4b9e      	ldr	r3, [pc, #632]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	499b      	ldr	r1, [pc, #620]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004da8:	4b96      	ldr	r3, [pc, #600]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db6:	4993      	ldr	r1, [pc, #588]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dca:	4b8e      	ldr	r3, [pc, #568]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd8:	498a      	ldr	r1, [pc, #552]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dec:	4b85      	ldr	r3, [pc, #532]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfa:	4982      	ldr	r1, [pc, #520]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e0e:	4b7d      	ldr	r3, [pc, #500]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4979      	ldr	r1, [pc, #484]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e30:	4b74      	ldr	r3, [pc, #464]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4971      	ldr	r1, [pc, #452]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e52:	4b6c      	ldr	r3, [pc, #432]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	f023 020c 	bic.w	r2, r3, #12
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e60:	4968      	ldr	r1, [pc, #416]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e74:	4b63      	ldr	r3, [pc, #396]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	4960      	ldr	r1, [pc, #384]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e96:	4b5b      	ldr	r3, [pc, #364]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	4957      	ldr	r1, [pc, #348]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004eb8:	4b52      	ldr	r3, [pc, #328]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	494f      	ldr	r1, [pc, #316]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eda:	4b4a      	ldr	r3, [pc, #296]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	4946      	ldr	r1, [pc, #280]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004efc:	4b41      	ldr	r3, [pc, #260]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0a:	493e      	ldr	r1, [pc, #248]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f1e:	4b39      	ldr	r3, [pc, #228]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	4935      	ldr	r1, [pc, #212]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f40:	4b30      	ldr	r3, [pc, #192]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f4e:	492d      	ldr	r1, [pc, #180]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f62:	4b28      	ldr	r3, [pc, #160]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f70:	4924      	ldr	r1, [pc, #144]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f80:	d101      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f82:	2301      	movs	r3, #1
 8004f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb0:	4914      	ldr	r1, [pc, #80]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd4:	490b      	ldr	r1, [pc, #44]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00f      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff8:	4902      	ldr	r1, [pc, #8]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005000:	e002      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00b      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005014:	4b8a      	ldr	r3, [pc, #552]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800501a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	4986      	ldr	r1, [pc, #536]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005038:	4b81      	ldr	r3, [pc, #516]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800503a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005048:	497d      	ldr	r1, [pc, #500]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d006      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80d6 	beq.w	8005210 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005064:	4b76      	ldr	r3, [pc, #472]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a75      	ldr	r2, [pc, #468]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800506a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800506e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005070:	f7fd f894 	bl	800219c <HAL_GetTick>
 8005074:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005078:	f7fd f890 	bl	800219c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b64      	cmp	r3, #100	; 0x64
 8005084:	d901      	bls.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e195      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800508a:	4b6d      	ldr	r3, [pc, #436]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d021      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d11d      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050aa:	4b65      	ldr	r3, [pc, #404]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	0e1b      	lsrs	r3, r3, #24
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	041b      	lsls	r3, r3, #16
 80050d0:	431a      	orrs	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4958      	ldr	r1, [pc, #352]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02e      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005110:	d129      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005112:	4b4b      	ldr	r3, [pc, #300]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005120:	4b47      	ldr	r3, [pc, #284]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005126:	0f1b      	lsrs	r3, r3, #28
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	019a      	lsls	r2, r3, #6
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	071b      	lsls	r3, r3, #28
 8005146:	493e      	ldr	r1, [pc, #248]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800514e:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005154:	f023 021f 	bic.w	r2, r3, #31
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	3b01      	subs	r3, #1
 800515e:	4938      	ldr	r1, [pc, #224]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01d      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005172:	4b33      	ldr	r3, [pc, #204]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005178:	0e1b      	lsrs	r3, r3, #24
 800517a:	f003 030f 	and.w	r3, r3, #15
 800517e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005180:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005186:	0f1b      	lsrs	r3, r3, #28
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	019a      	lsls	r2, r3, #6
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	431a      	orrs	r2, r3
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	061b      	lsls	r3, r3, #24
 80051a0:	431a      	orrs	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	4926      	ldr	r1, [pc, #152]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d011      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	019a      	lsls	r2, r3, #6
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	041b      	lsls	r3, r3, #16
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	431a      	orrs	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	071b      	lsls	r3, r3, #28
 80051d6:	491a      	ldr	r1, [pc, #104]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a17      	ldr	r2, [pc, #92]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ea:	f7fc ffd7 	bl	800219c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051f2:	f7fc ffd3 	bl	800219c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b64      	cmp	r3, #100	; 0x64
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0d8      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b01      	cmp	r3, #1
 8005214:	f040 80ce 	bne.w	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005218:	4b09      	ldr	r3, [pc, #36]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a08      	ldr	r2, [pc, #32]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005224:	f7fc ffba 	bl	800219c <HAL_GetTick>
 8005228:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800522a:	e00b      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800522c:	f7fc ffb6 	bl	800219c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d904      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e0bb      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005244:	4b5e      	ldr	r3, [pc, #376]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005250:	d0ec      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800526e:	2b00      	cmp	r3, #0
 8005270:	d02e      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d12a      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800527a:	4b51      	ldr	r3, [pc, #324]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005288:	4b4d      	ldr	r3, [pc, #308]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	0f1b      	lsrs	r3, r3, #28
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	019a      	lsls	r2, r3, #6
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	071b      	lsls	r3, r3, #28
 80052ae:	4944      	ldr	r1, [pc, #272]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052b6:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	3b01      	subs	r3, #1
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	493d      	ldr	r1, [pc, #244]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d022      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e4:	d11d      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052e6:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	0e1b      	lsrs	r3, r3, #24
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f4:	4b32      	ldr	r3, [pc, #200]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	0f1b      	lsrs	r3, r3, #28
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	019a      	lsls	r2, r3, #6
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	431a      	orrs	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	061b      	lsls	r3, r3, #24
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	071b      	lsls	r3, r3, #28
 800531a:	4929      	ldr	r1, [pc, #164]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d028      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800532e:	4b24      	ldr	r3, [pc, #144]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005334:	0e1b      	lsrs	r3, r3, #24
 8005336:	f003 030f 	and.w	r3, r3, #15
 800533a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800533c:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	0c1b      	lsrs	r3, r3, #16
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	019a      	lsls	r2, r3, #6
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	041b      	lsls	r3, r3, #16
 8005354:	431a      	orrs	r2, r3
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	071b      	lsls	r3, r3, #28
 8005362:	4917      	ldr	r1, [pc, #92]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4911      	ldr	r1, [pc, #68]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005380:	4b0f      	ldr	r3, [pc, #60]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a0e      	ldr	r2, [pc, #56]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800538c:	f7fc ff06 	bl	800219c <HAL_GetTick>
 8005390:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005392:	e008      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005394:	f7fc ff02 	bl	800219c <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b64      	cmp	r3, #100	; 0x64
 80053a0:	d901      	bls.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e007      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053a6:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053b2:	d1ef      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800

080053c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053e2:	f040 80a3 	bne.w	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80053e6:	4ba8      	ldr	r3, [pc, #672]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ec:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053f4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053fc:	f000 808a 	beq.w	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005406:	f200 8093 	bhi.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005410:	d07d      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005418:	f200 808a 	bhi.w	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005428:	d039      	beq.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800542a:	e081      	b.n	8005530 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800542c:	4b96      	ldr	r3, [pc, #600]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005438:	4b93      	ldr	r3, [pc, #588]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005440:	4a92      	ldr	r2, [pc, #584]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	e007      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800544a:	4b8f      	ldr	r3, [pc, #572]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005452:	4a8f      	ldr	r2, [pc, #572]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005454:	fbb2 f3f3 	udiv	r3, r2, r3
 8005458:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800545a:	4b8b      	ldr	r3, [pc, #556]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005460:	0e1b      	lsrs	r3, r3, #24
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005468:	4b87      	ldr	r3, [pc, #540]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546e:	099b      	lsrs	r3, r3, #6
 8005470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	fb03 f202 	mul.w	r2, r3, r2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005482:	4b81      	ldr	r3, [pc, #516]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005488:	0a1b      	lsrs	r3, r3, #8
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	3301      	adds	r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	fbb2 f3f3 	udiv	r3, r2, r3
 800549a:	617b      	str	r3, [r7, #20]
        break;
 800549c:	e049      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d108      	bne.n	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054aa:	4b77      	ldr	r3, [pc, #476]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b2:	4a76      	ldr	r2, [pc, #472]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e007      	b.n	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054bc:	4b72      	ldr	r3, [pc, #456]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c4:	4a72      	ldr	r2, [pc, #456]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80054cc:	4b6e      	ldr	r3, [pc, #440]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d2:	0e1b      	lsrs	r3, r3, #24
 80054d4:	f003 030f 	and.w	r3, r3, #15
 80054d8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80054da:	4b6b      	ldr	r3, [pc, #428]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e0:	099b      	lsrs	r3, r3, #6
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	fb03 f202 	mul.w	r2, r3, r2
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f2:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80054f4:	4b64      	ldr	r3, [pc, #400]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	fbb2 f3f3 	udiv	r3, r2, r3
 800550a:	617b      	str	r3, [r7, #20]
        break;
 800550c:	e011      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800550e:	4b61      	ldr	r3, [pc, #388]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005510:	617b      	str	r3, [r7, #20]
        break;
 8005512:	e00e      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005514:	4b5c      	ldr	r3, [pc, #368]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d102      	bne.n	8005526 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005520:	4b5a      	ldr	r3, [pc, #360]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005522:	617b      	str	r3, [r7, #20]
        break;
 8005524:	e005      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005526:	4b5a      	ldr	r3, [pc, #360]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005528:	617b      	str	r3, [r7, #20]
        break;
 800552a:	e002      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8005530:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005538:	f040 80a3 	bne.w	8005682 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800553c:	4b52      	ldr	r3, [pc, #328]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800553e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005542:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800554a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005552:	f000 808a 	beq.w	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800555c:	f200 809c 	bhi.w	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005566:	d07d      	beq.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800556e:	f200 8093 	bhi.w	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d004      	beq.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557e:	d039      	beq.n	80055f4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005580:	e08a      	b.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005582:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d108      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800558e:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005596:	4a3d      	ldr	r2, [pc, #244]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	e007      	b.n	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80055a0:	4b39      	ldr	r3, [pc, #228]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a8:	4a39      	ldr	r2, [pc, #228]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b6:	0e1b      	lsrs	r3, r3, #24
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80055be:	4b32      	ldr	r3, [pc, #200]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	099b      	lsrs	r3, r3, #6
 80055c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	fb03 f202 	mul.w	r2, r3, r2
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80055d8:	4b2b      	ldr	r3, [pc, #172]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	f003 031f 	and.w	r3, r3, #31
 80055e4:	3301      	adds	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	617b      	str	r3, [r7, #20]
        break;
 80055f2:	e052      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055f4:	4b24      	ldr	r3, [pc, #144]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005608:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	e007      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005612:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800561a:	4a1d      	ldr	r2, [pc, #116]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005622:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005628:	0e1b      	lsrs	r3, r3, #24
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005630:	4b15      	ldr	r3, [pc, #84]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005636:	099b      	lsrs	r3, r3, #6
 8005638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	fb03 f202 	mul.w	r2, r3, r2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	3301      	adds	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	617b      	str	r3, [r7, #20]
        break;
 8005662:	e01a      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005666:	617b      	str	r3, [r7, #20]
        break;
 8005668:	e017      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005678:	617b      	str	r3, [r7, #20]
        break;
 800567a:	e00e      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800567e:	617b      	str	r3, [r7, #20]
        break;
 8005680:	e00b      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8005682:	bf00      	nop
 8005684:	e009      	b.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005686:	bf00      	nop
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	017d7840 	.word	0x017d7840
 8005694:	00bb8000 	.word	0x00bb8000
        break;
 8005698:	bf00      	nop

  return frequency;
 800569a:	697b      	ldr	r3, [r7, #20]
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e071      	b.n	80057a2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7f5b      	ldrb	r3, [r3, #29]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d105      	bne.n	80056d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fc f88e 	bl	80017f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0310 	and.w	r3, r3, #16
 80056e4:	2b10      	cmp	r3, #16
 80056e6:	d053      	beq.n	8005790 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	22ca      	movs	r2, #202	; 0xca
 80056ee:	625a      	str	r2, [r3, #36]	; 0x24
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2253      	movs	r2, #83	; 0x53
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f92f 	bl	800595c <RTC_EnterInitMode>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d12a      	bne.n	800575e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_RTC_Init+0x104>)
 8005714:	400b      	ands	r3, r1
 8005716:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6899      	ldr	r1, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68d2      	ldr	r2, [r2, #12]
 800573e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6919      	ldr	r1, [r3, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	041a      	lsls	r2, r3, #16
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f938 	bl	80059ca <RTC_ExitInitMode>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d110      	bne.n	8005786 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0208 	bic.w	r2, r2, #8
 8005772:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	22ff      	movs	r2, #255	; 0xff
 800578c:	625a      	str	r2, [r3, #36]	; 0x24
 800578e:	e001      	b.n	8005794 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005790:	2300      	movs	r3, #0
 8005792:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	ff8fffbf 	.word	0xff8fffbf

080057b0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_RTC_GetTime+0xb8>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	0d9b      	lsrs	r3, r3, #22
 8005816:	b2db      	uxtb	r3, r3
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	b2da      	uxtb	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11a      	bne.n	800585e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f8f1 	bl	8005a14 <RTC_Bcd2ToByte>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f8e8 	bl	8005a14 <RTC_Bcd2ToByte>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	789b      	ldrb	r3, [r3, #2]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f8df 	bl	8005a14 <RTC_Bcd2ToByte>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	007f7f7f 	.word	0x007f7f7f

0800586c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RTC_GetDate+0x9c>)
 8005884:	4013      	ands	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	0a1b      	lsrs	r3, r3, #8
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	0b5b      	lsrs	r3, r3, #13
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d11a      	bne.n	80058fc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	78db      	ldrb	r3, [r3, #3]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f8a2 	bl	8005a14 <RTC_Bcd2ToByte>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 f899 	bl	8005a14 <RTC_Bcd2ToByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	789b      	ldrb	r3, [r3, #2]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 f890 	bl	8005a14 <RTC_Bcd2ToByte>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	00ffff3f 	.word	0x00ffff3f

0800590c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005926:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005928:	f7fc fc38 	bl	800219c <HAL_GetTick>
 800592c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800592e:	e009      	b.n	8005944 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005930:	f7fc fc34 	bl	800219c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800593e:	d901      	bls.n	8005944 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e007      	b.n	8005954 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0ee      	beq.n	8005930 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d122      	bne.n	80059c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005988:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800598a:	f7fc fc07 	bl	800219c <HAL_GetTick>
 800598e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005990:	e00c      	b.n	80059ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005992:	f7fc fc03 	bl	800219c <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059a0:	d904      	bls.n	80059ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <RTC_EnterInitMode+0x64>
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d1e8      	bne.n	8005992 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff89 	bl	800590c <HAL_RTC_WaitForSynchro>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2204      	movs	r2, #4
 8005a04:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	b2db      	uxtb	r3, r3
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e156      	b.n	8005d1c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc f9e0 	bl	8001e48 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f95b 	bl	8005d4c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_SAI_Init+0x68>
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d80d      	bhi.n	8005abe <HAL_SAI_Init+0x6e>
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_SAI_Init+0x5c>
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d003      	beq.n	8005ab2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005aaa:	e008      	b.n	8005abe <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61fb      	str	r3, [r7, #28]
      break;
 8005ab0:	e006      	b.n	8005ac0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	61fb      	str	r3, [r7, #28]
      break;
 8005ab6:	e003      	b.n	8005ac0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	61fb      	str	r3, [r7, #28]
      break;
 8005abc:	e000      	b.n	8005ac0 <HAL_SAI_Init+0x70>
      break;
 8005abe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d81e      	bhi.n	8005b06 <HAL_SAI_Init+0xb6>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <HAL_SAI_Init+0x80>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005ae7 	.word	0x08005ae7
 8005ad8:	08005aef 	.word	0x08005aef
 8005adc:	08005af7 	.word	0x08005af7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ae4:	e010      	b.n	8005b08 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aea:	617b      	str	r3, [r7, #20]
    }
    break;
 8005aec:	e00c      	b.n	8005b08 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005af2:	617b      	str	r3, [r7, #20]
    }
    break;
 8005af4:	e008      	b.n	8005b08 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005afa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005b04:	e000      	b.n	8005b08 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005b06:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a85      	ldr	r2, [pc, #532]	; (8005d24 <HAL_SAI_Init+0x2d4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d004      	beq.n	8005b1c <HAL_SAI_Init+0xcc>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a84      	ldr	r2, [pc, #528]	; (8005d28 <HAL_SAI_Init+0x2d8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005b1c:	4a83      	ldr	r2, [pc, #524]	; (8005d2c <HAL_SAI_Init+0x2dc>)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e002      	b.n	8005b2a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005b24:	4a82      	ldr	r2, [pc, #520]	; (8005d30 <HAL_SAI_Init+0x2e0>)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d04c      	beq.n	8005bcc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a7a      	ldr	r2, [pc, #488]	; (8005d24 <HAL_SAI_Init+0x2d4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d004      	beq.n	8005b4a <HAL_SAI_Init+0xfa>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a78      	ldr	r2, [pc, #480]	; (8005d28 <HAL_SAI_Init+0x2d8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d104      	bne.n	8005b54 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005b4a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b4e:	f7ff fc39 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b52:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a76      	ldr	r2, [pc, #472]	; (8005d34 <HAL_SAI_Init+0x2e4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_SAI_Init+0x118>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a75      	ldr	r2, [pc, #468]	; (8005d38 <HAL_SAI_Init+0x2e8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d104      	bne.n	8005b72 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005b6c:	f7ff fc2a 	bl	80053c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b70:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	4613      	mov	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4413      	add	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	025b      	lsls	r3, r3, #9
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a6b      	ldr	r2, [pc, #428]	; (8005d3c <HAL_SAI_Init+0x2ec>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	08da      	lsrs	r2, r3, #3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005b98:	68f9      	ldr	r1, [r7, #12]
 8005b9a:	4b68      	ldr	r3, [pc, #416]	; (8005d3c <HAL_SAI_Init+0x2ec>)
 8005b9c:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba0:	08da      	lsrs	r2, r3, #3
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	1aca      	subs	r2, r1, r3
 8005bac:	2a08      	cmp	r2, #8
 8005bae:	d904      	bls.n	8005bba <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d104      	bne.n	8005bcc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	085a      	lsrs	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_SAI_Init+0x18c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d109      	bne.n	8005bf0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_SAI_Init+0x198>
 8005be4:	2300      	movs	r3, #0
 8005be6:	e001      	b.n	8005bec <HAL_SAI_Init+0x19c>
 8005be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	e008      	b.n	8005c02 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d102      	bne.n	8005bfe <HAL_SAI_Init+0x1ae>
 8005bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bfc:	e000      	b.n	8005c00 <HAL_SAI_Init+0x1b0>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6819      	ldr	r1, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b4c      	ldr	r3, [pc, #304]	; (8005d40 <HAL_SAI_Init+0x2f0>)
 8005c0e:	400b      	ands	r3, r1
 8005c10:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6819      	ldr	r1, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c20:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c26:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005c3a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005c46:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	051b      	lsls	r3, r3, #20
 8005c4e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b38      	ldr	r3, [pc, #224]	; (8005d44 <HAL_SAI_Init+0x2f4>)
 8005c64:	400b      	ands	r3, r1
 8005c66:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6899      	ldr	r1, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <HAL_SAI_Init+0x2f8>)
 8005c92:	400b      	ands	r3, r1
 8005c94:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6899      	ldr	r1, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005ca6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005cac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005cb2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005cbc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68d9      	ldr	r1, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005cd4:	400b      	ands	r3, r1
 8005cd6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68d9      	ldr	r1, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40015804 	.word	0x40015804
 8005d28:	40015824 	.word	0x40015824
 8005d2c:	40015800 	.word	0x40015800
 8005d30:	40015c00 	.word	0x40015c00
 8005d34:	40015c04 	.word	0x40015c04
 8005d38:	40015c24 	.word	0x40015c24
 8005d3c:	cccccccd 	.word	0xcccccccd
 8005d40:	ff05c010 	.word	0xff05c010
 8005d44:	ffff1ff0 	.word	0xffff1ff0
 8005d48:	fff88000 	.word	0xfff88000

08005d4c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005d54:	4b17      	ldr	r3, [pc, #92]	; (8005db4 <SAI_Disable+0x68>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <SAI_Disable+0x6c>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0b1b      	lsrs	r3, r3, #12
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d76:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	60fa      	str	r2, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10a      	bne.n	8005d98 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	72fb      	strb	r3, [r7, #11]
      break;
 8005d96:	e006      	b.n	8005da6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e8      	bne.n	8005d78 <SAI_Disable+0x2c>

  return status;
 8005da6:	7afb      	ldrb	r3, [r7, #11]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	20000000 	.word	0x20000000
 8005db8:	95cbec1b 	.word	0x95cbec1b

08005dbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e022      	b.n	8005e14 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fb fd33 	bl	800184c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2203      	movs	r2, #3
 8005dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f814 	bl	8005e1c <HAL_SD_InitCard>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e00a      	b.n	8005e14 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e1c:	b5b0      	push	{r4, r5, r7, lr}
 8005e1e:	b08e      	sub	sp, #56	; 0x38
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005e38:	2376      	movs	r3, #118	; 0x76
 8005e3a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681d      	ldr	r5, [r3, #0]
 8005e40:	466c      	mov	r4, sp
 8005e42:	f107 0314 	add.w	r3, r7, #20
 8005e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e4e:	f107 0308 	add.w	r3, r7, #8
 8005e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e54:	4628      	mov	r0, r5
 8005e56:	f002 fa11 	bl	800827c <SDMMC_Init>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e059      	b.n	8005f20 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f002 fa45 	bl	8008310 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e94:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005e96:	2002      	movs	r0, #2
 8005e98:	f7fc f98c 	bl	80021b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fff3 	bl	8006e88 <SD_PowerON>
 8005ea2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e02e      	b.n	8005f20 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 ff12 	bl	8006cec <SD_InitCard>
 8005ec8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00b      	beq.n	8005ee8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e01b      	b.n	8005f20 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f002 fa9f 	bl	8008434 <SDMMC_CmdBlockLength>
 8005ef6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00f      	beq.n	8005f1e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <HAL_SD_InitCard+0x10c>)
 8005f04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bdb0      	pop	{r4, r5, r7, pc}
 8005f28:	004005ff 	.word	0x004005ff

08005f2c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	; 0x30
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0c3      	b.n	80060dc <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 80bc 	bne.w	80060da <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d907      	bls.n	8005f86 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0aa      	b.n	80060dc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4a4e      	ldr	r2, [pc, #312]	; (80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	4a4d      	ldr	r2, [pc, #308]	; (80060e8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005fb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2200      	movs	r2, #0
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3380      	adds	r3, #128	; 0x80
 8005fec:	4619      	mov	r1, r3
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	025b      	lsls	r3, r3, #9
 8005ff4:	089b      	lsrs	r3, r3, #2
 8005ff6:	f7fc fd55 	bl	8002aa4 <HAL_DMA_Start_IT>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d017      	beq.n	8006030 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800600e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a35      	ldr	r2, [pc, #212]	; (80060ec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006016:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e055      	b.n	80060dc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0208 	orr.w	r2, r2, #8
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	2b01      	cmp	r3, #1
 8006046:	d002      	beq.n	800604e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	025b      	lsls	r3, r3, #9
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800604e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006052:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	025b      	lsls	r3, r3, #9
 8006058:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800605a:	2390      	movs	r3, #144	; 0x90
 800605c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800605e:	2302      	movs	r3, #2
 8006060:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006062:	2300      	movs	r3, #0
 8006064:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006066:	2301      	movs	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f107 0210 	add.w	r2, r7, #16
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f002 f9b1 	bl	80083dc <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d90a      	bls.n	8006096 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2282      	movs	r2, #130	; 0x82
 8006084:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800608c:	4618      	mov	r0, r3
 800608e:	f002 fa15 	bl	80084bc <SDMMC_CmdReadMultiBlock>
 8006092:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006094:	e009      	b.n	80060aa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2281      	movs	r2, #129	; 0x81
 800609a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060a2:	4618      	mov	r0, r3
 80060a4:	f002 f9e8 	bl	8008478 <SDMMC_CmdReadSingleBlock>
 80060a8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d012      	beq.n	80060d6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a0d      	ldr	r2, [pc, #52]	; (80060ec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	431a      	orrs	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e002      	b.n	80060dc <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e000      	b.n	80060dc <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80060da:	2302      	movs	r3, #2
  }
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3730      	adds	r7, #48	; 0x30
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	08006afb 	.word	0x08006afb
 80060e8:	08006b6d 	.word	0x08006b6d
 80060ec:	004005ff 	.word	0x004005ff

080060f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08c      	sub	sp, #48	; 0x30
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d107      	bne.n	8006118 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e0c6      	b.n	80062a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	f040 80bf 	bne.w	80062a4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800612c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	441a      	add	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006136:	429a      	cmp	r2, r3
 8006138:	d907      	bls.n	800614a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e0ad      	b.n	80062a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2203      	movs	r2, #3
 800614e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 021a 	orr.w	r2, r2, #26
 8006168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616e:	4a50      	ldr	r2, [pc, #320]	; (80062b0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006170:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	4a4f      	ldr	r2, [pc, #316]	; (80062b4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006178:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	2200      	movs	r2, #0
 8006180:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	2b01      	cmp	r3, #1
 8006188:	d002      	beq.n	8006190 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	025b      	lsls	r3, r3, #9
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d90a      	bls.n	80061ac <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	22a0      	movs	r2, #160	; 0xa0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 f9ce 	bl	8008544 <SDMMC_CmdWriteMultiBlock>
 80061a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80061aa:	e009      	b.n	80061c0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2290      	movs	r2, #144	; 0x90
 80061b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061b8:	4618      	mov	r0, r3
 80061ba:	f002 f9a1 	bl	8008500 <SDMMC_CmdWriteSingleBlock>
 80061be:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d012      	beq.n	80061ec <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3b      	ldr	r2, [pc, #236]	; (80062b8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80061cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e05c      	b.n	80062a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0208 	orr.w	r2, r2, #8
 80061fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	2240      	movs	r2, #64	; 0x40
 8006202:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3380      	adds	r3, #128	; 0x80
 800622c:	461a      	mov	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	025b      	lsls	r3, r3, #9
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	f7fc fc36 	bl	8002aa4 <HAL_DMA_Start_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01a      	beq.n	8006274 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 021a 	bic.w	r2, r2, #26
 800624c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e018      	b.n	80062a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006278:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	025b      	lsls	r3, r3, #9
 800627e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006280:	2390      	movs	r3, #144	; 0x90
 8006282:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006284:	2300      	movs	r3, #0
 8006286:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006288:	2300      	movs	r3, #0
 800628a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800628c:	2301      	movs	r3, #1
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f107 0210 	add.w	r2, r7, #16
 8006298:	4611      	mov	r1, r2
 800629a:	4618      	mov	r0, r3
 800629c:	f002 f89e 	bl	80083dc <SDMMC_ConfigData>

      return HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	e000      	b.n	80062a6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
  }
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3730      	adds	r7, #48	; 0x30
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	08006ad1 	.word	0x08006ad1
 80062b4:	08006b6d 	.word	0x08006b6d
 80062b8:	004005ff 	.word	0x004005ff

080062bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_SD_IRQHandler+0x2e>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 ffef 	bl	80072c6 <SD_Read_IT>
 80062e8:	e15a      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 808d 	beq.w	8006414 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006302:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b9a      	ldr	r3, [pc, #616]	; (8006578 <HAL_SD_IRQHandler+0x2bc>)
 8006310:	400b      	ands	r3, r1
 8006312:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d039      	beq.n	80063a2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <HAL_SD_IRQHandler+0x86>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d011      	beq.n	8006366 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f002 f91e 	bl	8008588 <SDMMC_CmdStopTransfer>
 800634c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f921 	bl	80065a8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f240 523a 	movw	r2, #1338	; 0x53a
 800636e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <HAL_SD_IRQHandler+0xd6>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f003 f882 	bl	800949c <HAL_SD_RxCpltCallback>
 8006398:	e102      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f003 f874 	bl	8009488 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063a0:	e0fe      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 80f9 	beq.w	80065a0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f003 0320 	and.w	r3, r3, #32
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4618      	mov	r0, r3
 80063be:	f002 f8e3 	bl	8008588 <SDMMC_CmdStopTransfer>
 80063c2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f8e6 	bl	80065a8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 80dc 	bne.w	80065a0 <HAL_SD_IRQHandler+0x2e4>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	f040 80d6 	bne.w	80065a0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0208 	bic.w	r2, r2, #8
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f003 f83b 	bl	8009488 <HAL_SD_TxCpltCallback>
}
 8006412:	e0c5      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_SD_IRQHandler+0x178>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 ff9b 	bl	8007368 <SD_Write_IT>
 8006432:	e0b5      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80ae 	beq.w	80065a0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f043 0202 	orr.w	r2, r3, #2
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	f043 0208 	orr.w	r2, r3, #8
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f043 0210 	orr.w	r2, r3, #16
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80064c4:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f002 f85c 	bl	8008588 <SDMMC_CmdStopTransfer>
 80064d0:	4602      	mov	r2, r0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00a      	beq.n	80064fc <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f857 	bl	80065a8 <HAL_SD_ErrorCallback>
}
 80064fa:	e051      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b00      	cmp	r3, #0
 8006504:	d04c      	beq.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f003 0310 	and.w	r3, r3, #16
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <HAL_SD_IRQHandler+0x25e>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d011      	beq.n	800653e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	4a17      	ldr	r2, [pc, #92]	; (800657c <HAL_SD_IRQHandler+0x2c0>)
 8006520:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	4618      	mov	r0, r3
 8006528:	f7fc fb1c 	bl	8002b64 <HAL_DMA_Abort_IT>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d036      	beq.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fb6a 	bl	8006c10 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800653c:	e030      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <HAL_SD_IRQHandler+0x296>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <HAL_SD_IRQHandler+0x2c4>)
 8006558:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	4618      	mov	r0, r3
 8006560:	f7fc fb00 	bl	8002b64 <HAL_DMA_Abort_IT>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01a      	beq.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fb85 	bl	8006c7e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006574:	e014      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
 8006576:	bf00      	nop
 8006578:	ffff3ec5 	.word	0xffff3ec5
 800657c:	08006c11 	.word	0x08006c11
 8006580:	08006c7f 	.word	0x08006c7f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f002 ff6b 	bl	8009474 <HAL_SD_AbortCallback>
}
 800659e:	e7ff      	b.n	80065a0 <HAL_SD_IRQHandler+0x2e4>
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ca:	0f9b      	lsrs	r3, r3, #30
 80065cc:	b2da      	uxtb	r2, r3
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d6:	0e9b      	lsrs	r3, r3, #26
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e8:	0e1b      	lsrs	r3, r3, #24
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fa:	0c1b      	lsrs	r3, r3, #16
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006606:	0a1b      	lsrs	r3, r3, #8
 8006608:	b2da      	uxtb	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006612:	b2da      	uxtb	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800661c:	0d1b      	lsrs	r3, r3, #20
 800661e:	b29a      	uxth	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006628:	0c1b      	lsrs	r3, r3, #16
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	b2da      	uxtb	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800663a:	0bdb      	lsrs	r3, r3, #15
 800663c:	b2db      	uxtb	r3, r3
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	b2da      	uxtb	r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800664c:	0b9b      	lsrs	r3, r3, #14
 800664e:	b2db      	uxtb	r3, r3
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	b2da      	uxtb	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800665e:	0b5b      	lsrs	r3, r3, #13
 8006660:	b2db      	uxtb	r3, r3
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006670:	0b1b      	lsrs	r3, r3, #12
 8006672:	b2db      	uxtb	r3, r3
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	b2da      	uxtb	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2200      	movs	r2, #0
 8006682:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006688:	2b00      	cmp	r3, #0
 800668a:	d163      	bne.n	8006754 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006690:	009a      	lsls	r2, r3, #2
 8006692:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006696:	4013      	ands	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800669c:	0f92      	lsrs	r2, r2, #30
 800669e:	431a      	orrs	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066a8:	0edb      	lsrs	r3, r3, #27
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ba:	0e1b      	lsrs	r3, r3, #24
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066cc:	0d5b      	lsrs	r3, r3, #21
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f003 0307 	and.w	r3, r3, #7
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066de:	0c9b      	lsrs	r3, r3, #18
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f0:	0bdb      	lsrs	r3, r3, #15
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	7e1b      	ldrb	r3, [r3, #24]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	f003 0307 	and.w	r3, r3, #7
 8006712:	3302      	adds	r3, #2
 8006714:	2201      	movs	r2, #1
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800671e:	fb03 f202 	mul.w	r2, r3, r2
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	7a1b      	ldrb	r3, [r3, #8]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	2201      	movs	r2, #1
 8006732:	409a      	lsls	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006740:	0a52      	lsrs	r2, r2, #9
 8006742:	fb03 f202 	mul.w	r2, r3, r2
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006750:	661a      	str	r2, [r3, #96]	; 0x60
 8006752:	e031      	b.n	80067b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006758:	2b01      	cmp	r3, #1
 800675a:	d11d      	bne.n	8006798 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	431a      	orrs	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	3301      	adds	r3, #1
 8006778:	029a      	lsls	r2, r3, #10
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800678c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	661a      	str	r2, [r3, #96]	; 0x60
 8006796:	e00f      	b.n	80067b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a58      	ldr	r2, [pc, #352]	; (8006900 <HAL_SD_GetCardCSD+0x344>)
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e09d      	b.n	80068f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067bc:	0b9b      	lsrs	r3, r3, #14
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ce:	09db      	lsrs	r3, r3, #7
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067f0:	0fdb      	lsrs	r3, r3, #31
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fc:	0f5b      	lsrs	r3, r3, #29
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f003 0303 	and.w	r3, r3, #3
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680e:	0e9b      	lsrs	r3, r3, #26
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	b2da      	uxtb	r2, r3
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	0d9b      	lsrs	r3, r3, #22
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	b2da      	uxtb	r2, r3
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	0d5b      	lsrs	r3, r3, #21
 8006834:	b2db      	uxtb	r3, r3
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	b2da      	uxtb	r2, r3
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	b2db      	uxtb	r3, r3
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006862:	0bdb      	lsrs	r3, r3, #15
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	0b9b      	lsrs	r3, r3, #14
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	0b5b      	lsrs	r3, r3, #13
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	b2da      	uxtb	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689e:	0b1b      	lsrs	r3, r3, #12
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b2:	0a9b      	lsrs	r3, r3, #10
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	004005ff 	.word	0x004005ff

08006904 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800695c:	b5b0      	push	{r4, r5, r7, lr}
 800695e:	b08e      	sub	sp, #56	; 0x38
 8006960:	af04      	add	r7, sp, #16
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2203      	movs	r2, #3
 8006970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006978:	2b03      	cmp	r3, #3
 800697a:	d02e      	beq.n	80069da <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d106      	bne.n	8006992 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	639a      	str	r2, [r3, #56]	; 0x38
 8006990:	e029      	b.n	80069e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006998:	d10a      	bne.n	80069b0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fb2a 	bl	8006ff4 <SD_WideBus_Enable>
 80069a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a6:	6a3b      	ldr	r3, [r7, #32]
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	639a      	str	r2, [r3, #56]	; 0x38
 80069ae:	e01a      	b.n	80069e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fb67 	bl	800708a <SD_WideBus_Disable>
 80069bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
 80069ca:	e00c      	b.n	80069e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	639a      	str	r2, [r3, #56]	; 0x38
 80069d8:	e005      	b.n	80069e6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00b      	beq.n	8006a06 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a26      	ldr	r2, [pc, #152]	; (8006a8c <HAL_SD_ConfigWideBusOperation+0x130>)
 80069f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a04:	e01f      	b.n	8006a46 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681d      	ldr	r5, [r3, #0]
 8006a2c:	466c      	mov	r4, sp
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a3a:	f107 0308 	add.w	r3, r7, #8
 8006a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a40:	4628      	mov	r0, r5
 8006a42:	f001 fc1b 	bl	800827c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f001 fcf0 	bl	8008434 <SDMMC_CmdBlockLength>
 8006a54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00c      	beq.n	8006a76 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <HAL_SD_ConfigWideBusOperation+0x130>)
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3728      	adds	r7, #40	; 0x28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bdb0      	pop	{r4, r5, r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	004005ff 	.word	0x004005ff

08006a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa7e 	bl	8006fa4 <SD_SendStatus>
 8006aa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006ac6:	693b      	ldr	r3, [r7, #16]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	2b82      	cmp	r3, #130	; 0x82
 8006b0e:	d111      	bne.n	8006b34 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f001 fd37 	bl	8008588 <SDMMC_CmdStopTransfer>
 8006b1a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d008      	beq.n	8006b34 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff fd3a 	bl	80065a8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0208 	bic.w	r2, r2, #8
 8006b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b4c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f002 fc9d 	bl	800949c <HAL_SD_RxCpltCallback>
#endif
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b78:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fc f99e 	bl	8002ebc <HAL_DMA_GetError>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d03e      	beq.n	8006c04 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d002      	beq.n	8006ba2 <SD_DMAError+0x36>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d12d      	bne.n	8006bfe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a19      	ldr	r2, [pc, #100]	; (8006c0c <SD_DMAError+0xa0>)
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006bc6:	6978      	ldr	r0, [r7, #20]
 8006bc8:	f7ff ff62 	bl	8006a90 <HAL_SD_GetCardState>
 8006bcc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b06      	cmp	r3, #6
 8006bd2:	d002      	beq.n	8006bda <SD_DMAError+0x6e>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d10a      	bne.n	8006bf0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 fcd2 	bl	8008588 <SDMMC_CmdStopTransfer>
 8006be4:	4602      	mov	r2, r0
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	431a      	orrs	r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006bfe:	6978      	ldr	r0, [r7, #20]
 8006c00:	f7ff fcd2 	bl	80065a8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006c04:	bf00      	nop
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	004005ff 	.word	0x004005ff

08006c10 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c26:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f7ff ff31 	bl	8006a90 <HAL_SD_GetCardState>
 8006c2e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b06      	cmp	r3, #6
 8006c42:	d002      	beq.n	8006c4a <SD_DMATxAbort+0x3a>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b05      	cmp	r3, #5
 8006c48:	d10a      	bne.n	8006c60 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fc9a 	bl	8008588 <SDMMC_CmdStopTransfer>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f002 fc03 	bl	8009474 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006c6e:	e002      	b.n	8006c76 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f7ff fc99 	bl	80065a8 <HAL_SD_ErrorCallback>
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c94:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fefa 	bl	8006a90 <HAL_SD_GetCardState>
 8006c9c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b06      	cmp	r3, #6
 8006cb0:	d002      	beq.n	8006cb8 <SD_DMARxAbort+0x3a>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b05      	cmp	r3, #5
 8006cb6:	d10a      	bne.n	8006cce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 fc63 	bl	8008588 <SDMMC_CmdStopTransfer>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d103      	bne.n	8006cde <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f002 fbcc 	bl	8009474 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006cdc:	e002      	b.n	8006ce4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f7ff fc62 	bl	80065a8 <HAL_SD_ErrorCallback>
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006cec:	b5b0      	push	{r4, r5, r7, lr}
 8006cee:	b094      	sub	sp, #80	; 0x50
 8006cf0:	af04      	add	r7, sp, #16
 8006cf2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fb15 	bl	800832c <SDMMC_GetPowerState>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d0c:	e0b8      	b.n	8006e80 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d02f      	beq.n	8006d76 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f001 fd3f 	bl	800879e <SDMMC_CmdSendCID>
 8006d20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <SD_InitCard+0x40>
    {
      return errorstate;
 8006d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d2a:	e0a9      	b.n	8006e80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fb3f 	bl	80083b6 <SDMMC_GetResponse>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2104      	movs	r1, #4
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fb36 	bl	80083b6 <SDMMC_GetResponse>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2108      	movs	r1, #8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fb2d 	bl	80083b6 <SDMMC_GetResponse>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	210c      	movs	r1, #12
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 fb24 	bl	80083b6 <SDMMC_GetResponse>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d00d      	beq.n	8006d9a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f107 020e 	add.w	r2, r7, #14
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fd45 	bl	8008818 <SDMMC_CmdSetRelAdd>
 8006d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <SD_InitCard+0xae>
    {
      return errorstate;
 8006d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d98:	e072      	b.n	8006e80 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d036      	beq.n	8006e10 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006da2:	89fb      	ldrh	r3, [r7, #14]
 8006da4:	461a      	mov	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f001 fd0f 	bl	80087da <SDMMC_CmdSendCSD>
 8006dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc6:	e05b      	b.n	8006e80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 faf1 	bl	80083b6 <SDMMC_GetResponse>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2104      	movs	r1, #4
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 fae8 	bl	80083b6 <SDMMC_GetResponse>
 8006de6:	4602      	mov	r2, r0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2108      	movs	r1, #8
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fadf 	bl	80083b6 <SDMMC_GetResponse>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	210c      	movs	r1, #12
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fad6 	bl	80083b6 <SDMMC_GetResponse>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2104      	movs	r1, #4
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 facd 	bl	80083b6 <SDMMC_GetResponse>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	0d1a      	lsrs	r2, r3, #20
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e24:	f107 0310 	add.w	r3, r7, #16
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fbc6 	bl	80065bc <HAL_SD_GetCardCSD>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e3a:	e021      	b.n	8006e80 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e44:	041b      	lsls	r3, r3, #16
 8006e46:	2200      	movs	r2, #0
 8006e48:	461c      	mov	r4, r3
 8006e4a:	4615      	mov	r5, r2
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	462b      	mov	r3, r5
 8006e50:	4608      	mov	r0, r1
 8006e52:	f001 fbbb 	bl	80085cc <SDMMC_CmdSelDesel>
 8006e56:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <SD_InitCard+0x176>
  {
    return errorstate;
 8006e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e60:	e00e      	b.n	8006e80 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681d      	ldr	r5, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	466c      	mov	r4, sp
 8006e6a:	f103 0210 	add.w	r2, r3, #16
 8006e6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e74:	3304      	adds	r3, #4
 8006e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e78:	4628      	mov	r0, r5
 8006e7a:	f001 f9ff 	bl	800827c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3740      	adds	r7, #64	; 0x40
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bdb0      	pop	{r4, r5, r7, pc}

08006e88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fbb6 	bl	8008612 <SDMMC_CmdGoIdleState>
 8006ea6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	e072      	b.n	8006f98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fbc9 	bl	800864e <SDMMC_CmdOperCond>
 8006ebc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f001 fb9f 	bl	8008612 <SDMMC_CmdGoIdleState>
 8006ed4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	e05b      	b.n	8006f98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d137      	bne.n	8006f5e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fbc9 	bl	800868c <SDMMC_CmdAppCommand>
 8006efa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d02d      	beq.n	8006f5e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f06:	e047      	b.n	8006f98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fbbc 	bl	800868c <SDMMC_CmdAppCommand>
 8006f14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <SD_PowerON+0x98>
    {
      return errorstate;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	e03b      	b.n	8006f98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	491e      	ldr	r1, [pc, #120]	; (8006fa0 <SD_PowerON+0x118>)
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 fbd2 	bl	80086d0 <SDMMC_CmdAppOperCommand>
 8006f2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f38:	e02e      	b.n	8006f98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 fa38 	bl	80083b6 <SDMMC_GetResponse>
 8006f46:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	0fdb      	lsrs	r3, r3, #31
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <SD_PowerON+0xcc>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <SD_PowerON+0xce>
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]

    count++;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d802      	bhi.n	8006f6e <SD_PowerON+0xe6>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0cc      	beq.n	8006f08 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d902      	bls.n	8006f7e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f7c:	e00c      	b.n	8006f98 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8006f8e:	e002      	b.n	8006f96 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	c1100000 	.word	0xc1100000

08006fa4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006fb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fb8:	e018      	b.n	8006fec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	4610      	mov	r0, r2
 8006fc8:	f001 fc47 	bl	800885a <SDMMC_CmdSendStatus>
 8006fcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	e009      	b.n	8006fec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 f9e9 	bl	80083b6 <SDMMC_GetResponse>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f001 f9d3 	bl	80083b6 <SDMMC_GetResponse>
 8007010:	4603      	mov	r3, r0
 8007012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701a:	d102      	bne.n	8007022 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800701c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007020:	e02f      	b.n	8007082 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f879 	bl	8007120 <SD_FindSCR>
 800702e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	e023      	b.n	8007082 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01c      	beq.n	800707e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	041b      	lsls	r3, r3, #16
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f001 fb1b 	bl	800868c <SDMMC_CmdAppCommand>
 8007056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	e00f      	b.n	8007082 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2102      	movs	r1, #2
 8007068:	4618      	mov	r0, r3
 800706a:	f001 fb55 	bl	8008718 <SDMMC_CmdBusWidth>
 800706e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	e003      	b.n	8007082 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800707a:	2300      	movs	r3, #0
 800707c:	e001      	b.n	8007082 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800707e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2100      	movs	r1, #0
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 f988 	bl	80083b6 <SDMMC_GetResponse>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070b0:	d102      	bne.n	80070b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070b6:	e02f      	b.n	8007118 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80070b8:	f107 030c 	add.w	r3, r7, #12
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f82e 	bl	8007120 <SD_FindSCR>
 80070c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	e023      	b.n	8007118 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01c      	beq.n	8007114 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e2:	041b      	lsls	r3, r3, #16
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f001 fad0 	bl	800868c <SDMMC_CmdAppCommand>
 80070ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	e00f      	b.n	8007118 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fb0a 	bl	8008718 <SDMMC_CmdBusWidth>
 8007104:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	e003      	b.n	8007118 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007110:	2300      	movs	r3, #0
 8007112:	e001      	b.n	8007118 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007114:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007118:	4618      	mov	r0, r3
 800711a:	3718      	adds	r7, #24
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007120:	b590      	push	{r4, r7, lr}
 8007122:	b08f      	sub	sp, #60	; 0x3c
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800712a:	f7fb f837 	bl	800219c <HAL_GetTick>
 800712e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007134:	2300      	movs	r3, #0
 8007136:	60bb      	str	r3, [r7, #8]
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2108      	movs	r1, #8
 8007146:	4618      	mov	r0, r3
 8007148:	f001 f974 	bl	8008434 <SDMMC_CmdBlockLength>
 800714c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	e0b2      	b.n	80072be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	4619      	mov	r1, r3
 8007164:	4610      	mov	r0, r2
 8007166:	f001 fa91 	bl	800868c <SDMMC_CmdAppCommand>
 800716a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d001      	beq.n	8007176 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	e0a3      	b.n	80072be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800717a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800717c:	2308      	movs	r3, #8
 800717e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007180:	2330      	movs	r3, #48	; 0x30
 8007182:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007184:	2302      	movs	r3, #2
 8007186:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007188:	2300      	movs	r3, #0
 800718a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800718c:	2301      	movs	r3, #1
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f107 0210 	add.w	r2, r7, #16
 8007198:	4611      	mov	r1, r2
 800719a:	4618      	mov	r0, r3
 800719c:	f001 f91e 	bl	80083dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 fad9 	bl	800875c <SDMMC_CmdSendSCR>
 80071aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d02a      	beq.n	8007208 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	e083      	b.n	80072be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00f      	beq.n	80071e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6819      	ldr	r1, [r3, #0]
 80071c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	f107 0208 	add.w	r2, r7, #8
 80071d0:	18d4      	adds	r4, r2, r3
 80071d2:	4608      	mov	r0, r1
 80071d4:	f001 f87e 	bl	80082d4 <SDMMC_ReadFIFO>
 80071d8:	4603      	mov	r3, r0
 80071da:	6023      	str	r3, [r4, #0]
      index++;
 80071dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071de:	3301      	adds	r3, #1
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
 80071e2:	e006      	b.n	80071f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d012      	beq.n	8007218 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071f2:	f7fa ffd3 	bl	800219c <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007200:	d102      	bne.n	8007208 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007202:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007206:	e05a      	b.n	80072be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0cf      	beq.n	80071b6 <SD_FindSCR+0x96>
 8007216:	e000      	b.n	800721a <SD_FindSCR+0xfa>
      break;
 8007218:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	f003 0308 	and.w	r3, r3, #8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d005      	beq.n	8007234 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2208      	movs	r2, #8
 800722e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007230:	2308      	movs	r3, #8
 8007232:	e044      	b.n	80072be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2202      	movs	r2, #2
 8007248:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800724a:	2302      	movs	r3, #2
 800724c:	e037      	b.n	80072be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2220      	movs	r2, #32
 8007262:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007264:	2320      	movs	r3, #32
 8007266:	e02a      	b.n	80072be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f240 523a 	movw	r2, #1338	; 0x53a
 8007270:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	061a      	lsls	r2, r3, #24
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800727e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007288:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	0e1b      	lsrs	r3, r3, #24
 800728e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	601a      	str	r2, [r3, #0]
    scr++;
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	3304      	adds	r3, #4
 8007298:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	061a      	lsls	r2, r3, #24
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80072b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	373c      	adds	r7, #60	; 0x3c
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd90      	pop	{r4, r7, pc}

080072c6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b086      	sub	sp, #24
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d03f      	beq.n	8007360 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	e033      	b.n	800734e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 fff2 	bl	80082d4 <SDMMC_ReadFIFO>
 80072f0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3b01      	subs	r3, #1
 8007304:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	b2da      	uxtb	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	3b01      	subs	r3, #1
 800731a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	0c1b      	lsrs	r3, r3, #16
 8007320:	b2da      	uxtb	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3301      	adds	r3, #1
 800732a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	3b01      	subs	r3, #1
 8007330:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3301      	adds	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	3b01      	subs	r3, #1
 8007346:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	3301      	adds	r3, #1
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b07      	cmp	r3, #7
 8007352:	d9c8      	bls.n	80072e6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d043      	beq.n	800740a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	e037      	b.n	80073f8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3b01      	subs	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	021a      	lsls	r2, r3, #8
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3301      	adds	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	041a      	lsls	r2, r3, #16
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	061a      	lsls	r2, r3, #24
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3301      	adds	r3, #1
 80073da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	3b01      	subs	r3, #1
 80073e0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f107 0208 	add.w	r2, r7, #8
 80073ea:	4611      	mov	r1, r2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 ff7e 	bl	80082ee <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	3301      	adds	r3, #1
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2b07      	cmp	r3, #7
 80073fc:	d9c4      	bls.n	8007388 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800740a:	bf00      	nop
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e025      	b.n	8007472 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fa fcfa 	bl	8001e34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f000 fe4c 	bl	80080f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	461a      	mov	r2, r3
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	f000 fea0 	bl	80081a8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e04c      	b.n	8007528 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fa fae0 	bl	8001a68 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0203 	bic.w	r2, r2, #3
 80074be:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	4b19      	ldr	r3, [pc, #100]	; (8007530 <HAL_SPDIFRX_Init+0xb4>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80074d8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80074de:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80074e4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80074ea:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80074f0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80074f6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80074fc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8007502:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8007508:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	fff88407 	.word	0xfff88407

08007534 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e038      	b.n	80075bc <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007550:	b2db      	uxtb	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7fa fc5e 	bl	8001e20 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3308      	adds	r3, #8
 800756c:	4619      	mov	r1, r3
 800756e:	4610      	mov	r0, r2
 8007570:	f000 fc90 	bl	8007e94 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	461a      	mov	r2, r3
 800757e:	68b9      	ldr	r1, [r7, #8]
 8007580:	f000 fd18 	bl	8007fb4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6858      	ldr	r0, [r3, #4]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	f000 fd5f 	bl	8008054 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	6892      	ldr	r2, [r2, #8]
 800759e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	6892      	ldr	r2, [r2, #8]
 80075aa:	f041 0101 	orr.w	r1, r1, #1
 80075ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e040      	b.n	8007658 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fa faa4 	bl	8001b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2224      	movs	r2, #36	; 0x24
 80075f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0201 	bic.w	r2, r2, #1
 8007600:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f82c 	bl	8007660 <UART_SetConfig>
 8007608:	4603      	mov	r3, r0
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e022      	b.n	8007658 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa84 	bl	8007b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800762e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800763e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fb0b 	bl	8007c6c <UART_CheckIdleState>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007668:	2300      	movs	r3, #0
 800766a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	431a      	orrs	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	4ba6      	ldr	r3, [pc, #664]	; (8007924 <UART_SetConfig+0x2c4>)
 800768c:	4013      	ands	r3, r2
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	430b      	orrs	r3, r1
 8007696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a94      	ldr	r2, [pc, #592]	; (8007928 <UART_SetConfig+0x2c8>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d120      	bne.n	800771e <UART_SetConfig+0xbe>
 80076dc:	4b93      	ldr	r3, [pc, #588]	; (800792c <UART_SetConfig+0x2cc>)
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d816      	bhi.n	8007718 <UART_SetConfig+0xb8>
 80076ea:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x90>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007701 	.word	0x08007701
 80076f4:	0800770d 	.word	0x0800770d
 80076f8:	08007707 	.word	0x08007707
 80076fc:	08007713 	.word	0x08007713
 8007700:	2301      	movs	r3, #1
 8007702:	77fb      	strb	r3, [r7, #31]
 8007704:	e150      	b.n	80079a8 <UART_SetConfig+0x348>
 8007706:	2302      	movs	r3, #2
 8007708:	77fb      	strb	r3, [r7, #31]
 800770a:	e14d      	b.n	80079a8 <UART_SetConfig+0x348>
 800770c:	2304      	movs	r3, #4
 800770e:	77fb      	strb	r3, [r7, #31]
 8007710:	e14a      	b.n	80079a8 <UART_SetConfig+0x348>
 8007712:	2308      	movs	r3, #8
 8007714:	77fb      	strb	r3, [r7, #31]
 8007716:	e147      	b.n	80079a8 <UART_SetConfig+0x348>
 8007718:	2310      	movs	r3, #16
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e144      	b.n	80079a8 <UART_SetConfig+0x348>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a83      	ldr	r2, [pc, #524]	; (8007930 <UART_SetConfig+0x2d0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d132      	bne.n	800778e <UART_SetConfig+0x12e>
 8007728:	4b80      	ldr	r3, [pc, #512]	; (800792c <UART_SetConfig+0x2cc>)
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	f003 030c 	and.w	r3, r3, #12
 8007732:	2b0c      	cmp	r3, #12
 8007734:	d828      	bhi.n	8007788 <UART_SetConfig+0x128>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0xdc>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007771 	.word	0x08007771
 8007740:	08007789 	.word	0x08007789
 8007744:	08007789 	.word	0x08007789
 8007748:	08007789 	.word	0x08007789
 800774c:	0800777d 	.word	0x0800777d
 8007750:	08007789 	.word	0x08007789
 8007754:	08007789 	.word	0x08007789
 8007758:	08007789 	.word	0x08007789
 800775c:	08007777 	.word	0x08007777
 8007760:	08007789 	.word	0x08007789
 8007764:	08007789 	.word	0x08007789
 8007768:	08007789 	.word	0x08007789
 800776c:	08007783 	.word	0x08007783
 8007770:	2300      	movs	r3, #0
 8007772:	77fb      	strb	r3, [r7, #31]
 8007774:	e118      	b.n	80079a8 <UART_SetConfig+0x348>
 8007776:	2302      	movs	r3, #2
 8007778:	77fb      	strb	r3, [r7, #31]
 800777a:	e115      	b.n	80079a8 <UART_SetConfig+0x348>
 800777c:	2304      	movs	r3, #4
 800777e:	77fb      	strb	r3, [r7, #31]
 8007780:	e112      	b.n	80079a8 <UART_SetConfig+0x348>
 8007782:	2308      	movs	r3, #8
 8007784:	77fb      	strb	r3, [r7, #31]
 8007786:	e10f      	b.n	80079a8 <UART_SetConfig+0x348>
 8007788:	2310      	movs	r3, #16
 800778a:	77fb      	strb	r3, [r7, #31]
 800778c:	e10c      	b.n	80079a8 <UART_SetConfig+0x348>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a68      	ldr	r2, [pc, #416]	; (8007934 <UART_SetConfig+0x2d4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d120      	bne.n	80077da <UART_SetConfig+0x17a>
 8007798:	4b64      	ldr	r3, [pc, #400]	; (800792c <UART_SetConfig+0x2cc>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077a2:	2b30      	cmp	r3, #48	; 0x30
 80077a4:	d013      	beq.n	80077ce <UART_SetConfig+0x16e>
 80077a6:	2b30      	cmp	r3, #48	; 0x30
 80077a8:	d814      	bhi.n	80077d4 <UART_SetConfig+0x174>
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d009      	beq.n	80077c2 <UART_SetConfig+0x162>
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	d810      	bhi.n	80077d4 <UART_SetConfig+0x174>
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <UART_SetConfig+0x15c>
 80077b6:	2b10      	cmp	r3, #16
 80077b8:	d006      	beq.n	80077c8 <UART_SetConfig+0x168>
 80077ba:	e00b      	b.n	80077d4 <UART_SetConfig+0x174>
 80077bc:	2300      	movs	r3, #0
 80077be:	77fb      	strb	r3, [r7, #31]
 80077c0:	e0f2      	b.n	80079a8 <UART_SetConfig+0x348>
 80077c2:	2302      	movs	r3, #2
 80077c4:	77fb      	strb	r3, [r7, #31]
 80077c6:	e0ef      	b.n	80079a8 <UART_SetConfig+0x348>
 80077c8:	2304      	movs	r3, #4
 80077ca:	77fb      	strb	r3, [r7, #31]
 80077cc:	e0ec      	b.n	80079a8 <UART_SetConfig+0x348>
 80077ce:	2308      	movs	r3, #8
 80077d0:	77fb      	strb	r3, [r7, #31]
 80077d2:	e0e9      	b.n	80079a8 <UART_SetConfig+0x348>
 80077d4:	2310      	movs	r3, #16
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	e0e6      	b.n	80079a8 <UART_SetConfig+0x348>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a56      	ldr	r2, [pc, #344]	; (8007938 <UART_SetConfig+0x2d8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d120      	bne.n	8007826 <UART_SetConfig+0x1c6>
 80077e4:	4b51      	ldr	r3, [pc, #324]	; (800792c <UART_SetConfig+0x2cc>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077ee:	2bc0      	cmp	r3, #192	; 0xc0
 80077f0:	d013      	beq.n	800781a <UART_SetConfig+0x1ba>
 80077f2:	2bc0      	cmp	r3, #192	; 0xc0
 80077f4:	d814      	bhi.n	8007820 <UART_SetConfig+0x1c0>
 80077f6:	2b80      	cmp	r3, #128	; 0x80
 80077f8:	d009      	beq.n	800780e <UART_SetConfig+0x1ae>
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d810      	bhi.n	8007820 <UART_SetConfig+0x1c0>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <UART_SetConfig+0x1a8>
 8007802:	2b40      	cmp	r3, #64	; 0x40
 8007804:	d006      	beq.n	8007814 <UART_SetConfig+0x1b4>
 8007806:	e00b      	b.n	8007820 <UART_SetConfig+0x1c0>
 8007808:	2300      	movs	r3, #0
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e0cc      	b.n	80079a8 <UART_SetConfig+0x348>
 800780e:	2302      	movs	r3, #2
 8007810:	77fb      	strb	r3, [r7, #31]
 8007812:	e0c9      	b.n	80079a8 <UART_SetConfig+0x348>
 8007814:	2304      	movs	r3, #4
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e0c6      	b.n	80079a8 <UART_SetConfig+0x348>
 800781a:	2308      	movs	r3, #8
 800781c:	77fb      	strb	r3, [r7, #31]
 800781e:	e0c3      	b.n	80079a8 <UART_SetConfig+0x348>
 8007820:	2310      	movs	r3, #16
 8007822:	77fb      	strb	r3, [r7, #31]
 8007824:	e0c0      	b.n	80079a8 <UART_SetConfig+0x348>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a44      	ldr	r2, [pc, #272]	; (800793c <UART_SetConfig+0x2dc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d125      	bne.n	800787c <UART_SetConfig+0x21c>
 8007830:	4b3e      	ldr	r3, [pc, #248]	; (800792c <UART_SetConfig+0x2cc>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800783a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783e:	d017      	beq.n	8007870 <UART_SetConfig+0x210>
 8007840:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007844:	d817      	bhi.n	8007876 <UART_SetConfig+0x216>
 8007846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784a:	d00b      	beq.n	8007864 <UART_SetConfig+0x204>
 800784c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007850:	d811      	bhi.n	8007876 <UART_SetConfig+0x216>
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <UART_SetConfig+0x1fe>
 8007856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785a:	d006      	beq.n	800786a <UART_SetConfig+0x20a>
 800785c:	e00b      	b.n	8007876 <UART_SetConfig+0x216>
 800785e:	2300      	movs	r3, #0
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e0a1      	b.n	80079a8 <UART_SetConfig+0x348>
 8007864:	2302      	movs	r3, #2
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e09e      	b.n	80079a8 <UART_SetConfig+0x348>
 800786a:	2304      	movs	r3, #4
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e09b      	b.n	80079a8 <UART_SetConfig+0x348>
 8007870:	2308      	movs	r3, #8
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e098      	b.n	80079a8 <UART_SetConfig+0x348>
 8007876:	2310      	movs	r3, #16
 8007878:	77fb      	strb	r3, [r7, #31]
 800787a:	e095      	b.n	80079a8 <UART_SetConfig+0x348>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a2f      	ldr	r2, [pc, #188]	; (8007940 <UART_SetConfig+0x2e0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d125      	bne.n	80078d2 <UART_SetConfig+0x272>
 8007886:	4b29      	ldr	r3, [pc, #164]	; (800792c <UART_SetConfig+0x2cc>)
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007894:	d017      	beq.n	80078c6 <UART_SetConfig+0x266>
 8007896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800789a:	d817      	bhi.n	80078cc <UART_SetConfig+0x26c>
 800789c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a0:	d00b      	beq.n	80078ba <UART_SetConfig+0x25a>
 80078a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a6:	d811      	bhi.n	80078cc <UART_SetConfig+0x26c>
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <UART_SetConfig+0x254>
 80078ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b0:	d006      	beq.n	80078c0 <UART_SetConfig+0x260>
 80078b2:	e00b      	b.n	80078cc <UART_SetConfig+0x26c>
 80078b4:	2301      	movs	r3, #1
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e076      	b.n	80079a8 <UART_SetConfig+0x348>
 80078ba:	2302      	movs	r3, #2
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e073      	b.n	80079a8 <UART_SetConfig+0x348>
 80078c0:	2304      	movs	r3, #4
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e070      	b.n	80079a8 <UART_SetConfig+0x348>
 80078c6:	2308      	movs	r3, #8
 80078c8:	77fb      	strb	r3, [r7, #31]
 80078ca:	e06d      	b.n	80079a8 <UART_SetConfig+0x348>
 80078cc:	2310      	movs	r3, #16
 80078ce:	77fb      	strb	r3, [r7, #31]
 80078d0:	e06a      	b.n	80079a8 <UART_SetConfig+0x348>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1b      	ldr	r2, [pc, #108]	; (8007944 <UART_SetConfig+0x2e4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d138      	bne.n	800794e <UART_SetConfig+0x2ee>
 80078dc:	4b13      	ldr	r3, [pc, #76]	; (800792c <UART_SetConfig+0x2cc>)
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ea:	d017      	beq.n	800791c <UART_SetConfig+0x2bc>
 80078ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078f0:	d82a      	bhi.n	8007948 <UART_SetConfig+0x2e8>
 80078f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f6:	d00b      	beq.n	8007910 <UART_SetConfig+0x2b0>
 80078f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078fc:	d824      	bhi.n	8007948 <UART_SetConfig+0x2e8>
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <UART_SetConfig+0x2aa>
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007906:	d006      	beq.n	8007916 <UART_SetConfig+0x2b6>
 8007908:	e01e      	b.n	8007948 <UART_SetConfig+0x2e8>
 800790a:	2300      	movs	r3, #0
 800790c:	77fb      	strb	r3, [r7, #31]
 800790e:	e04b      	b.n	80079a8 <UART_SetConfig+0x348>
 8007910:	2302      	movs	r3, #2
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e048      	b.n	80079a8 <UART_SetConfig+0x348>
 8007916:	2304      	movs	r3, #4
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e045      	b.n	80079a8 <UART_SetConfig+0x348>
 800791c:	2308      	movs	r3, #8
 800791e:	77fb      	strb	r3, [r7, #31]
 8007920:	e042      	b.n	80079a8 <UART_SetConfig+0x348>
 8007922:	bf00      	nop
 8007924:	efff69f3 	.word	0xefff69f3
 8007928:	40011000 	.word	0x40011000
 800792c:	40023800 	.word	0x40023800
 8007930:	40004400 	.word	0x40004400
 8007934:	40004800 	.word	0x40004800
 8007938:	40004c00 	.word	0x40004c00
 800793c:	40005000 	.word	0x40005000
 8007940:	40011400 	.word	0x40011400
 8007944:	40007800 	.word	0x40007800
 8007948:	2310      	movs	r3, #16
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e02c      	b.n	80079a8 <UART_SetConfig+0x348>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a72      	ldr	r2, [pc, #456]	; (8007b1c <UART_SetConfig+0x4bc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d125      	bne.n	80079a4 <UART_SetConfig+0x344>
 8007958:	4b71      	ldr	r3, [pc, #452]	; (8007b20 <UART_SetConfig+0x4c0>)
 800795a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007962:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007966:	d017      	beq.n	8007998 <UART_SetConfig+0x338>
 8007968:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800796c:	d817      	bhi.n	800799e <UART_SetConfig+0x33e>
 800796e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007972:	d00b      	beq.n	800798c <UART_SetConfig+0x32c>
 8007974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007978:	d811      	bhi.n	800799e <UART_SetConfig+0x33e>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <UART_SetConfig+0x326>
 800797e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007982:	d006      	beq.n	8007992 <UART_SetConfig+0x332>
 8007984:	e00b      	b.n	800799e <UART_SetConfig+0x33e>
 8007986:	2300      	movs	r3, #0
 8007988:	77fb      	strb	r3, [r7, #31]
 800798a:	e00d      	b.n	80079a8 <UART_SetConfig+0x348>
 800798c:	2302      	movs	r3, #2
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e00a      	b.n	80079a8 <UART_SetConfig+0x348>
 8007992:	2304      	movs	r3, #4
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e007      	b.n	80079a8 <UART_SetConfig+0x348>
 8007998:	2308      	movs	r3, #8
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e004      	b.n	80079a8 <UART_SetConfig+0x348>
 800799e:	2310      	movs	r3, #16
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e001      	b.n	80079a8 <UART_SetConfig+0x348>
 80079a4:	2310      	movs	r3, #16
 80079a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079b0:	d15b      	bne.n	8007a6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079b2:	7ffb      	ldrb	r3, [r7, #31]
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d828      	bhi.n	8007a0a <UART_SetConfig+0x3aa>
 80079b8:	a201      	add	r2, pc, #4	; (adr r2, 80079c0 <UART_SetConfig+0x360>)
 80079ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079be:	bf00      	nop
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079ed 	.word	0x080079ed
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	08007a0b 	.word	0x08007a0b
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	08007a0b 	.word	0x08007a0b
 80079d8:	08007a0b 	.word	0x08007a0b
 80079dc:	08007a0b 	.word	0x08007a0b
 80079e0:	08007a03 	.word	0x08007a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fd f89e 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 80079e8:	61b8      	str	r0, [r7, #24]
        break;
 80079ea:	e013      	b.n	8007a14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079ec:	f7fd f8ae 	bl	8004b4c <HAL_RCC_GetPCLK2Freq>
 80079f0:	61b8      	str	r0, [r7, #24]
        break;
 80079f2:	e00f      	b.n	8007a14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b4b      	ldr	r3, [pc, #300]	; (8007b24 <UART_SetConfig+0x4c4>)
 80079f6:	61bb      	str	r3, [r7, #24]
        break;
 80079f8:	e00c      	b.n	8007a14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fa:	f7fc ffc1 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 80079fe:	61b8      	str	r0, [r7, #24]
        break;
 8007a00:	e008      	b.n	8007a14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a06:	61bb      	str	r3, [r7, #24]
        break;
 8007a08:	e004      	b.n	8007a14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	77bb      	strb	r3, [r7, #30]
        break;
 8007a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d074      	beq.n	8007b04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	005a      	lsls	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	d916      	bls.n	8007a64 <UART_SetConfig+0x404>
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d212      	bcs.n	8007a64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	f023 030f 	bic.w	r3, r3, #15
 8007a46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	89fa      	ldrh	r2, [r7, #14]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e04f      	b.n	8007b04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	77bb      	strb	r3, [r7, #30]
 8007a68:	e04c      	b.n	8007b04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a6a:	7ffb      	ldrb	r3, [r7, #31]
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d828      	bhi.n	8007ac2 <UART_SetConfig+0x462>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <UART_SetConfig+0x418>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007a9d 	.word	0x08007a9d
 8007a7c:	08007aa5 	.word	0x08007aa5
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007ac3 	.word	0x08007ac3
 8007a88:	08007ab3 	.word	0x08007ab3
 8007a8c:	08007ac3 	.word	0x08007ac3
 8007a90:	08007ac3 	.word	0x08007ac3
 8007a94:	08007ac3 	.word	0x08007ac3
 8007a98:	08007abb 	.word	0x08007abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a9c:	f7fd f842 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 8007aa0:	61b8      	str	r0, [r7, #24]
        break;
 8007aa2:	e013      	b.n	8007acc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007aa4:	f7fd f852 	bl	8004b4c <HAL_RCC_GetPCLK2Freq>
 8007aa8:	61b8      	str	r0, [r7, #24]
        break;
 8007aaa:	e00f      	b.n	8007acc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aac:	4b1d      	ldr	r3, [pc, #116]	; (8007b24 <UART_SetConfig+0x4c4>)
 8007aae:	61bb      	str	r3, [r7, #24]
        break;
 8007ab0:	e00c      	b.n	8007acc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ab2:	f7fc ff65 	bl	8004980 <HAL_RCC_GetSysClockFreq>
 8007ab6:	61b8      	str	r0, [r7, #24]
        break;
 8007ab8:	e008      	b.n	8007acc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007abe:	61bb      	str	r3, [r7, #24]
        break;
 8007ac0:	e004      	b.n	8007acc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	77bb      	strb	r3, [r7, #30]
        break;
 8007aca:	bf00      	nop
    }

    if (pclk != 0U)
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d018      	beq.n	8007b04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	085a      	lsrs	r2, r3, #1
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	441a      	add	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b0f      	cmp	r3, #15
 8007aea:	d909      	bls.n	8007b00 <UART_SetConfig+0x4a0>
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af2:	d205      	bcs.n	8007b00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60da      	str	r2, [r3, #12]
 8007afe:	e001      	b.n	8007b04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b10:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40007c00 	.word	0x40007c00
 8007b20:	40023800 	.word	0x40023800
 8007b24:	00f42400 	.word	0x00f42400

08007b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00a      	beq.n	8007b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	f003 0320 	and.w	r3, r3, #32
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01a      	beq.n	8007c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c26:	d10a      	bne.n	8007c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	605a      	str	r2, [r3, #4]
  }
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c7c:	f7fa fa8e 	bl	800219c <HAL_GetTick>
 8007c80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0308 	and.w	r3, r3, #8
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d10e      	bne.n	8007cae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f831 	bl	8007d06 <UART_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e027      	b.n	8007cfe <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b04      	cmp	r3, #4
 8007cba:	d10e      	bne.n	8007cda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f81b 	bl	8007d06 <UART_WaitOnFlagUntilTimeout>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e011      	b.n	8007cfe <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b09c      	sub	sp, #112	; 0x70
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	4613      	mov	r3, r2
 8007d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d16:	e0a7      	b.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1e:	f000 80a3 	beq.w	8007e68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d22:	f7fa fa3b 	bl	800219c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d302      	bcc.n	8007d38 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d13f      	bne.n	8007db8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e6      	bne.n	8007d38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	663b      	str	r3, [r7, #96]	; 0x60
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e068      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0304 	and.w	r3, r3, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d050      	beq.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd4:	d148      	bne.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	e853 3f00 	ldrex	r3, [r3]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007df4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007e00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e6      	bne.n	8007de0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3308      	adds	r3, #8
 8007e18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	613b      	str	r3, [r7, #16]
   return(result);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f023 0301 	bic.w	r3, r3, #1
 8007e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e32:	623a      	str	r2, [r7, #32]
 8007e34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	69f9      	ldr	r1, [r7, #28]
 8007e38:	6a3a      	ldr	r2, [r7, #32]
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e5      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2220      	movs	r2, #32
 8007e4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e64:	2303      	movs	r3, #3
 8007e66:	e010      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	4013      	ands	r3, r2
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	461a      	mov	r2, r3
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	f43f af48 	beq.w	8007d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3770      	adds	r7, #112	; 0x70
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b087      	sub	sp, #28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	f023 0101 	bic.w	r1, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b08      	cmp	r3, #8
 8007ebc:	d102      	bne.n	8007ec4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e001      	b.n	8007ec8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007ed4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007eda:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007ee0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007ee6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007eec:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007ef2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007ef8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007efe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007f04:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	693a      	ldr	r2, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8007f2c:	4b20      	ldr	r3, [pc, #128]	; (8007fb0 <FMC_NORSRAM_Init+0x11c>)
 8007f2e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f36:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f3e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007f46:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	43db      	mvns	r3, r3
 8007f56:	ea02 0103 	and.w	r1, r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	4319      	orrs	r1, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f70:	d10c      	bne.n	8007f8c <FMC_NORSRAM_Init+0xf8>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d006      	beq.n	8007fa2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	371c      	adds	r7, #28
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	0008fb7f 	.word	0x0008fb7f

08007fb4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	1c5a      	adds	r2, r3, #1
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fca:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	041b      	lsls	r3, r3, #16
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	051b      	lsls	r3, r3, #20
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	3b02      	subs	r3, #2
 8007ffa:	061b      	lsls	r3, r3, #24
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	4313      	orrs	r3, r2
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	3201      	adds	r2, #1
 8008008:	4319      	orrs	r1, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800801c:	d113      	bne.n	8008046 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008026:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	3b01      	subs	r3, #1
 800802e:	051b      	lsls	r3, r3, #20
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4313      	orrs	r3, r2
 8008034:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008068:	d11d      	bne.n	80080a6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008074:	4013      	ands	r3, r2
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	6852      	ldr	r2, [r2, #4]
 800807e:	0112      	lsls	r2, r2, #4
 8008080:	4311      	orrs	r1, r2
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	6892      	ldr	r2, [r2, #8]
 8008086:	0212      	lsls	r2, r2, #8
 8008088:	4311      	orrs	r1, r2
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	6992      	ldr	r2, [r2, #24]
 800808e:	4311      	orrs	r1, r2
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	68d2      	ldr	r2, [r2, #12]
 8008094:	0412      	lsls	r2, r2, #16
 8008096:	430a      	orrs	r2, r1
 8008098:	ea43 0102 	orr.w	r1, r3, r2
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80080a4:	e005      	b.n	80080b2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80080ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	cff00000 	.word	0xcff00000

080080c4 <FMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_WriteOperation_Disable(FMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d121      	bne.n	8008146 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	4b27      	ldr	r3, [pc, #156]	; (80081a4 <FMC_SDRAM_Init+0xb4>)
 8008108:	4013      	ands	r3, r2
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	6851      	ldr	r1, [r2, #4]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	6892      	ldr	r2, [r2, #8]
 8008112:	4311      	orrs	r1, r2
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	68d2      	ldr	r2, [r2, #12]
 8008118:	4311      	orrs	r1, r2
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	6912      	ldr	r2, [r2, #16]
 800811e:	4311      	orrs	r1, r2
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	6952      	ldr	r2, [r2, #20]
 8008124:	4311      	orrs	r1, r2
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	6992      	ldr	r2, [r2, #24]
 800812a:	4311      	orrs	r1, r2
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	69d2      	ldr	r2, [r2, #28]
 8008130:	4311      	orrs	r1, r2
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	6a12      	ldr	r2, [r2, #32]
 8008136:	4311      	orrs	r1, r2
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800813c:	430a      	orrs	r2, r1
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e026      	b.n	8008194 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	69d9      	ldr	r1, [r3, #28]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	4319      	orrs	r1, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	430b      	orrs	r3, r1
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	4b0e      	ldr	r3, [pc, #56]	; (80081a4 <FMC_SDRAM_Init+0xb4>)
 800816a:	4013      	ands	r3, r2
 800816c:	683a      	ldr	r2, [r7, #0]
 800816e:	6851      	ldr	r1, [r2, #4]
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	6892      	ldr	r2, [r2, #8]
 8008174:	4311      	orrs	r1, r2
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	68d2      	ldr	r2, [r2, #12]
 800817a:	4311      	orrs	r1, r2
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	6912      	ldr	r2, [r2, #16]
 8008180:	4311      	orrs	r1, r2
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	6952      	ldr	r2, [r2, #20]
 8008186:	4311      	orrs	r1, r2
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	6992      	ldr	r2, [r2, #24]
 800818c:	430a      	orrs	r2, r1
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	ffff8000 	.word	0xffff8000

080081a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d128      	bne.n	800820c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	1e59      	subs	r1, r3, #1
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	4319      	orrs	r1, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	021b      	lsls	r3, r3, #8
 80081da:	4319      	orrs	r1, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	031b      	lsls	r3, r3, #12
 80081e4:	4319      	orrs	r1, r3
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	041b      	lsls	r3, r3, #16
 80081ee:	4319      	orrs	r1, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	051b      	lsls	r3, r3, #20
 80081f8:	4319      	orrs	r1, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	3b01      	subs	r3, #1
 8008200:	061b      	lsls	r3, r3, #24
 8008202:	430b      	orrs	r3, r1
 8008204:	431a      	orrs	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	609a      	str	r2, [r3, #8]
 800820a:	e02d      	b.n	8008268 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	4b19      	ldr	r3, [pc, #100]	; (8008278 <FMC_SDRAM_Timing_Init+0xd0>)
 8008212:	4013      	ands	r3, r2
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	68d2      	ldr	r2, [r2, #12]
 8008218:	3a01      	subs	r2, #1
 800821a:	0311      	lsls	r1, r2, #12
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	6952      	ldr	r2, [r2, #20]
 8008220:	3a01      	subs	r2, #1
 8008222:	0512      	lsls	r2, r2, #20
 8008224:	430a      	orrs	r2, r1
 8008226:	431a      	orrs	r2, r3
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	1e59      	subs	r1, r3, #1
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	3b01      	subs	r3, #1
 8008240:	011b      	lsls	r3, r3, #4
 8008242:	4319      	orrs	r1, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	3b01      	subs	r3, #1
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	4319      	orrs	r1, r3
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	3b01      	subs	r3, #1
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	4319      	orrs	r1, r3
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	3b01      	subs	r3, #1
 800825e:	061b      	lsls	r3, r3, #24
 8008260:	430b      	orrs	r3, r1
 8008262:	431a      	orrs	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	ff0f0fff 	.word	0xff0f0fff

0800827c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800827c:	b084      	sub	sp, #16
 800827e:	b480      	push	{r7}
 8008280:	b085      	sub	sp, #20
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	f107 001c 	add.w	r0, r7, #28
 800828a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008292:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008294:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008296:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800829a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800829e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80082a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80082a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <SDMMC_Init+0x54>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	b004      	add	sp, #16
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	ffff8100 	.word	0xffff8100

080082d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2203      	movs	r2, #3
 800831c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0303 	and.w	r3, r3, #3
}
 800833c:	4618      	mov	r0, r3
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008366:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800836c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008372:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <SDMMC_SendCommand+0x50>)
 8008380:	4013      	ands	r3, r2
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	fffff000 	.word	0xfffff000

0800839c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	b2db      	uxtb	r3, r3
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	370c      	adds	r7, #12
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	3314      	adds	r3, #20
 80083c4:	461a      	mov	r2, r3
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	4413      	add	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
}  
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008402:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008408:	431a      	orrs	r2, r3
                       Data->DPSM);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800840e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	4313      	orrs	r3, r2
 8008414:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008426:	2300      	movs	r3, #0

}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b088      	sub	sp, #32
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008442:	2310      	movs	r3, #16
 8008444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008446:	2340      	movs	r3, #64	; 0x40
 8008448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800844e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008454:	f107 0308 	add.w	r3, r7, #8
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff ff74 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008460:	f241 3288 	movw	r2, #5000	; 0x1388
 8008464:	2110      	movs	r1, #16
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa1a 	bl	80088a0 <SDMMC_GetCmdResp1>
 800846c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800846e:	69fb      	ldr	r3, [r7, #28]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008486:	2311      	movs	r3, #17
 8008488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800848a:	2340      	movs	r3, #64	; 0x40
 800848c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800848e:	2300      	movs	r3, #0
 8008490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008496:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008498:	f107 0308 	add.w	r3, r7, #8
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff ff52 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80084a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a8:	2111      	movs	r1, #17
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f9f8 	bl	80088a0 <SDMMC_GetCmdResp1>
 80084b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084b2:	69fb      	ldr	r3, [r7, #28]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3720      	adds	r7, #32
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b088      	sub	sp, #32
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80084ca:	2312      	movs	r3, #18
 80084cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084ce:	2340      	movs	r3, #64	; 0x40
 80084d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff ff30 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80084e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ec:	2112      	movs	r1, #18
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9d6 	bl	80088a0 <SDMMC_GetCmdResp1>
 80084f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084f6:	69fb      	ldr	r3, [r7, #28]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3720      	adds	r7, #32
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b088      	sub	sp, #32
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800850e:	2318      	movs	r3, #24
 8008510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008512:	2340      	movs	r3, #64	; 0x40
 8008514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008516:	2300      	movs	r3, #0
 8008518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800851a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800851e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008520:	f107 0308 	add.w	r3, r7, #8
 8008524:	4619      	mov	r1, r3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7ff ff0e 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800852c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008530:	2118      	movs	r1, #24
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 f9b4 	bl	80088a0 <SDMMC_GetCmdResp1>
 8008538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800853a:	69fb      	ldr	r3, [r7, #28]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3720      	adds	r7, #32
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008552:	2319      	movs	r3, #25
 8008554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800855e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008564:	f107 0308 	add.w	r3, r7, #8
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff feec 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008570:	f241 3288 	movw	r2, #5000	; 0x1388
 8008574:	2119      	movs	r1, #25
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f992 	bl	80088a0 <SDMMC_GetCmdResp1>
 800857c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800857e:	69fb      	ldr	r3, [r7, #28]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3720      	adds	r7, #32
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008594:	230c      	movs	r3, #12
 8008596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008598:	2340      	movs	r3, #64	; 0x40
 800859a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085a6:	f107 0308 	add.w	r3, r7, #8
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fecb 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80085b2:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <SDMMC_CmdStopTransfer+0x40>)
 80085b4:	210c      	movs	r1, #12
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f972 	bl	80088a0 <SDMMC_GetCmdResp1>
 80085bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085be:	69fb      	ldr	r3, [r7, #28]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	05f5e100 	.word	0x05f5e100

080085cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08a      	sub	sp, #40	; 0x28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80085dc:	2307      	movs	r3, #7
 80085de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085ec:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ee:	f107 0310 	add.w	r3, r7, #16
 80085f2:	4619      	mov	r1, r3
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f7ff fea7 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80085fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80085fe:	2107      	movs	r1, #7
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f94d 	bl	80088a0 <SDMMC_GetCmdResp1>
 8008606:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800860a:	4618      	mov	r0, r3
 800860c:	3728      	adds	r7, #40	; 0x28
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b088      	sub	sp, #32
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008622:	2300      	movs	r3, #0
 8008624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800862a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800862e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008630:	f107 0308 	add.w	r3, r7, #8
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff fe86 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fb67 	bl	8008d10 <SDMMC_GetCmdError>
 8008642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008644:	69fb      	ldr	r3, [r7, #28]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3720      	adds	r7, #32
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b088      	sub	sp, #32
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008656:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800865a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800865c:	2308      	movs	r3, #8
 800865e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008660:	2340      	movs	r3, #64	; 0x40
 8008662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008664:	2300      	movs	r3, #0
 8008666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800866c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800866e:	f107 0308 	add.w	r3, r7, #8
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff fe67 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fafa 	bl	8008c74 <SDMMC_GetCmdResp7>
 8008680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008682:	69fb      	ldr	r3, [r7, #28]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3720      	adds	r7, #32
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800869a:	2337      	movs	r3, #55	; 0x37
 800869c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800869e:	2340      	movs	r3, #64	; 0x40
 80086a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086ac:	f107 0308 	add.w	r3, r7, #8
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7ff fe48 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80086b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086bc:	2137      	movs	r1, #55	; 0x37
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f8ee 	bl	80088a0 <SDMMC_GetCmdResp1>
 80086c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086c6:	69fb      	ldr	r3, [r7, #28]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3720      	adds	r7, #32
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b088      	sub	sp, #32
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <SDMMC_CmdAppOperCommand+0x44>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80086e2:	2329      	movs	r3, #41	; 0x29
 80086e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086e6:	2340      	movs	r3, #64	; 0x40
 80086e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086ea:	2300      	movs	r3, #0
 80086ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086f4:	f107 0308 	add.w	r3, r7, #8
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fe24 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fa03 	bl	8008b0c <SDMMC_GetCmdResp3>
 8008706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008708:	69fb      	ldr	r3, [r7, #28]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3720      	adds	r7, #32
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	80100000 	.word	0x80100000

08008718 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008726:	2306      	movs	r3, #6
 8008728:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800872a:	2340      	movs	r3, #64	; 0x40
 800872c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800872e:	2300      	movs	r3, #0
 8008730:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008736:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008738:	f107 0308 	add.w	r3, r7, #8
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff fe02 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008744:	f241 3288 	movw	r2, #5000	; 0x1388
 8008748:	2106      	movs	r1, #6
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8a8 	bl	80088a0 <SDMMC_GetCmdResp1>
 8008750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008752:	69fb      	ldr	r3, [r7, #28]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3720      	adds	r7, #32
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008768:	2333      	movs	r3, #51	; 0x33
 800876a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800876c:	2340      	movs	r3, #64	; 0x40
 800876e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800877a:	f107 0308 	add.w	r3, r7, #8
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff fde1 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008786:	f241 3288 	movw	r2, #5000	; 0x1388
 800878a:	2133      	movs	r1, #51	; 0x33
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f887 	bl	80088a0 <SDMMC_GetCmdResp1>
 8008792:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008794:	69fb      	ldr	r3, [r7, #28]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3720      	adds	r7, #32
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b088      	sub	sp, #32
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80087aa:	2302      	movs	r3, #2
 80087ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80087ae:	23c0      	movs	r3, #192	; 0xc0
 80087b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087bc:	f107 0308 	add.w	r3, r7, #8
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fdc0 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f957 	bl	8008a7c <SDMMC_GetCmdResp2>
 80087ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087d0:	69fb      	ldr	r3, [r7, #28]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b088      	sub	sp, #32
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
 80087e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80087e8:	2309      	movs	r3, #9
 80087ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80087ec:	23c0      	movs	r3, #192	; 0xc0
 80087ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087fa:	f107 0308 	add.w	r3, r7, #8
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff fda1 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f938 	bl	8008a7c <SDMMC_GetCmdResp2>
 800880c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800880e:	69fb      	ldr	r3, [r7, #28]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3720      	adds	r7, #32
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008822:	2300      	movs	r3, #0
 8008824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008826:	2303      	movs	r3, #3
 8008828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800882a:	2340      	movs	r3, #64	; 0x40
 800882c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008838:	f107 0308 	add.w	r3, r7, #8
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fd82 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	2103      	movs	r1, #3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f99d 	bl	8008b88 <SDMMC_GetCmdResp6>
 800884e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b088      	sub	sp, #32
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008868:	230d      	movs	r3, #13
 800886a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800886c:	2340      	movs	r3, #64	; 0x40
 800886e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008870:	2300      	movs	r3, #0
 8008872:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008878:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fd61 	bl	8008348 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008886:	f241 3288 	movw	r2, #5000	; 0x1388
 800888a:	210d      	movs	r1, #13
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f807 	bl	80088a0 <SDMMC_GetCmdResp1>
 8008892:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008894:	69fb      	ldr	r3, [r7, #28]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3720      	adds	r7, #32
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b088      	sub	sp, #32
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	460b      	mov	r3, r1
 80088aa:	607a      	str	r2, [r7, #4]
 80088ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80088ae:	4b70      	ldr	r3, [pc, #448]	; (8008a70 <SDMMC_GetCmdResp1+0x1d0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a70      	ldr	r2, [pc, #448]	; (8008a74 <SDMMC_GetCmdResp1+0x1d4>)
 80088b4:	fba2 2303 	umull	r2, r3, r2, r3
 80088b8:	0a5a      	lsrs	r2, r3, #9
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	1e5a      	subs	r2, r3, #1
 80088c6:	61fa      	str	r2, [r7, #28]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088d0:	e0c9      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0ef      	beq.n	80088c2 <SDMMC_GetCmdResp1+0x22>
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1ea      	bne.n	80088c2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2204      	movs	r2, #4
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088fe:	2304      	movs	r3, #4
 8008900:	e0b1      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d004      	beq.n	8008918 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008914:	2301      	movs	r3, #1
 8008916:	e0a6      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	22c5      	movs	r2, #197	; 0xc5
 800891c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fd3c 	bl	800839c <SDMMC_GetCommandResponse>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	7afb      	ldrb	r3, [r7, #11]
 800892a:	4293      	cmp	r3, r2
 800892c:	d001      	beq.n	8008932 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800892e:	2301      	movs	r3, #1
 8008930:	e099      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008932:	2100      	movs	r1, #0
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f7ff fd3e 	bl	80083b6 <SDMMC_GetResponse>
 800893a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4b4e      	ldr	r3, [pc, #312]	; (8008a78 <SDMMC_GetCmdResp1+0x1d8>)
 8008940:	4013      	ands	r3, r2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008946:	2300      	movs	r3, #0
 8008948:	e08d      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	da02      	bge.n	8008956 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008954:	e087      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008960:	2340      	movs	r3, #64	; 0x40
 8008962:	e080      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800896e:	2380      	movs	r3, #128	; 0x80
 8008970:	e079      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800897c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008980:	e071      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800898c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008990:	e069      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a0:	e061      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80089ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b0:	e059      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089c0:	e051      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d002      	beq.n	80089d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089d0:	e049      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80089dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089e0:	e041      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80089ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f0:	e039      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80089fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a00:	e031      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d002      	beq.n	8008a12 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008a0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a10:	e029      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008a1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a20:	e021      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d002      	beq.n	8008a32 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008a2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a30:	e019      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008a3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008a40:	e011      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008a4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a50:	e009      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008a5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a60:	e001      	b.n	8008a66 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3720      	adds	r7, #32
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20000000 	.word	0x20000000
 8008a74:	10624dd3 	.word	0x10624dd3
 8008a78:	fdffe008 	.word	0xfdffe008

08008a7c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a84:	4b1f      	ldr	r3, [pc, #124]	; (8008b04 <SDMMC_GetCmdResp2+0x88>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <SDMMC_GetCmdResp2+0x8c>)
 8008a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a8e:	0a5b      	lsrs	r3, r3, #9
 8008a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a94:	fb02 f303 	mul.w	r3, r2, r3
 8008a98:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1e5a      	subs	r2, r3, #1
 8008a9e:	60fa      	str	r2, [r7, #12]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008aa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aa8:	e026      	b.n	8008af8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0ef      	beq.n	8008a9a <SDMMC_GetCmdResp2+0x1e>
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1ea      	bne.n	8008a9a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ad6:	2304      	movs	r3, #4
 8008ad8:	e00e      	b.n	8008af8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e003      	b.n	8008af8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	22c5      	movs	r2, #197	; 0xc5
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	20000000 	.word	0x20000000
 8008b08:	10624dd3 	.word	0x10624dd3

08008b0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b14:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <SDMMC_GetCmdResp3+0x74>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a1a      	ldr	r2, [pc, #104]	; (8008b84 <SDMMC_GetCmdResp3+0x78>)
 8008b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1e:	0a5b      	lsrs	r3, r3, #9
 8008b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b24:	fb02 f303 	mul.w	r3, r2, r3
 8008b28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1e5a      	subs	r2, r3, #1
 8008b2e:	60fa      	str	r2, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b38:	e01b      	b.n	8008b72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0ef      	beq.n	8008b2a <SDMMC_GetCmdResp3+0x1e>
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1ea      	bne.n	8008b2a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2204      	movs	r2, #4
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008b66:	2304      	movs	r3, #4
 8008b68:	e003      	b.n	8008b72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	22c5      	movs	r2, #197	; 0xc5
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	20000000 	.word	0x20000000
 8008b84:	10624dd3 	.word	0x10624dd3

08008b88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	460b      	mov	r3, r1
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008b96:	4b35      	ldr	r3, [pc, #212]	; (8008c6c <SDMMC_GetCmdResp6+0xe4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a35      	ldr	r2, [pc, #212]	; (8008c70 <SDMMC_GetCmdResp6+0xe8>)
 8008b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba0:	0a5b      	lsrs	r3, r3, #9
 8008ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
 8008baa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	1e5a      	subs	r2, r3, #1
 8008bb0:	61fa      	str	r2, [r7, #28]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008bb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008bba:	e052      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d0ef      	beq.n	8008bac <SDMMC_GetCmdResp6+0x24>
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1ea      	bne.n	8008bac <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d004      	beq.n	8008bec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2204      	movs	r2, #4
 8008be6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008be8:	2304      	movs	r3, #4
 8008bea:	e03a      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d004      	beq.n	8008c02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e02f      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f7ff fbca 	bl	800839c <SDMMC_GetCommandResponse>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	7afb      	ldrb	r3, [r7, #11]
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d001      	beq.n	8008c16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e025      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	22c5      	movs	r2, #197	; 0xc5
 8008c1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f7ff fbc9 	bl	80083b6 <SDMMC_GetResponse>
 8008c24:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e011      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c4c:	e009      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c5c:	e001      	b.n	8008c62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3720      	adds	r7, #32
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20000000 	.word	0x20000000
 8008c70:	10624dd3 	.word	0x10624dd3

08008c74 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c7c:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <SDMMC_GetCmdResp7+0x94>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a22      	ldr	r2, [pc, #136]	; (8008d0c <SDMMC_GetCmdResp7+0x98>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	0a5b      	lsrs	r3, r3, #9
 8008c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	1e5a      	subs	r2, r3, #1
 8008c96:	60fa      	str	r2, [r7, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ca0:	e02c      	b.n	8008cfc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0ef      	beq.n	8008c92 <SDMMC_GetCmdResp7+0x1e>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1ea      	bne.n	8008c92 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2204      	movs	r2, #4
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cce:	2304      	movs	r3, #4
 8008cd0:	e014      	b.n	8008cfc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d004      	beq.n	8008ce8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e009      	b.n	8008cfc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2240      	movs	r2, #64	; 0x40
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008cfa:	2300      	movs	r3, #0
  
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	20000000 	.word	0x20000000
 8008d0c:	10624dd3 	.word	0x10624dd3

08008d10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d18:	4b11      	ldr	r3, [pc, #68]	; (8008d60 <SDMMC_GetCmdError+0x50>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a11      	ldr	r2, [pc, #68]	; (8008d64 <SDMMC_GetCmdError+0x54>)
 8008d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d22:	0a5b      	lsrs	r3, r3, #9
 8008d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d28:	fb02 f303 	mul.w	r3, r2, r3
 8008d2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	1e5a      	subs	r2, r3, #1
 8008d32:	60fa      	str	r2, [r7, #12]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d3c:	e009      	b.n	8008d52 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d0f1      	beq.n	8008d2e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	22c5      	movs	r2, #197	; 0xc5
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20000000 	.word	0x20000000
 8008d64:	10624dd3 	.word	0x10624dd3

08008d68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d68:	b084      	sub	sp, #16
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	f107 001c 	add.w	r0, r7, #28
 8008d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d120      	bne.n	8008dc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68da      	ldr	r2, [r3, #12]
 8008d90:	4b20      	ldr	r3, [pc, #128]	; (8008e14 <USB_CoreInit+0xac>)
 8008d92:	4013      	ands	r3, r2
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d105      	bne.n	8008db6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fa96 	bl	80092e8 <USB_CoreReset>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	73fb      	strb	r3, [r7, #15]
 8008dc0:	e010      	b.n	8008de4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fa8a 	bl	80092e8 <USB_CoreReset>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d10b      	bne.n	8008e02 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f043 0206 	orr.w	r2, r3, #6
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f043 0220 	orr.w	r2, r3, #32
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e0e:	b004      	add	sp, #16
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	ffbdffbf 	.word	0xffbdffbf

08008e18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f023 0201 	bic.w	r2, r3, #1
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e56:	78fb      	ldrb	r3, [r7, #3]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d115      	bne.n	8008e88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e68:	2001      	movs	r0, #1
 8008e6a:	f7f9 f9a3 	bl	80021b4 <HAL_Delay>
      ms++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fa29 	bl	80092cc <USB_GetMode>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d01e      	beq.n	8008ebe <USB_SetCurrentMode+0x84>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b31      	cmp	r3, #49	; 0x31
 8008e84:	d9f0      	bls.n	8008e68 <USB_SetCurrentMode+0x2e>
 8008e86:	e01a      	b.n	8008ebe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d115      	bne.n	8008eba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f7f9 f98a 	bl	80021b4 <HAL_Delay>
      ms++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa10 	bl	80092cc <USB_GetMode>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <USB_SetCurrentMode+0x84>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b31      	cmp	r3, #49	; 0x31
 8008eb6:	d9f0      	bls.n	8008e9a <USB_SetCurrentMode+0x60>
 8008eb8:	e001      	b.n	8008ebe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e005      	b.n	8008eca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b32      	cmp	r3, #50	; 0x32
 8008ec2:	d101      	bne.n	8008ec8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b086      	sub	sp, #24
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
 8008ede:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e009      	b.n	8008f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	3340      	adds	r3, #64	; 0x40
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	3301      	adds	r3, #1
 8008f06:	613b      	str	r3, [r7, #16]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b0e      	cmp	r3, #14
 8008f0c:	d9f2      	bls.n	8008ef4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d11c      	bne.n	8008f4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f22:	f043 0302 	orr.w	r3, r3, #2
 8008f26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	e005      	b.n	8008f5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f60:	461a      	mov	r2, r3
 8008f62:	2300      	movs	r3, #0
 8008f64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	461a      	mov	r2, r3
 8008f76:	680b      	ldr	r3, [r1, #0]
 8008f78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d10c      	bne.n	8008f9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d104      	bne.n	8008f90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f86:	2100      	movs	r1, #0
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f965 	bl	8009258 <USB_SetDevSpeed>
 8008f8e:	e008      	b.n	8008fa2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f90:	2101      	movs	r1, #1
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f960 	bl	8009258 <USB_SetDevSpeed>
 8008f98:	e003      	b.n	8008fa2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f9a:	2103      	movs	r1, #3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f95b 	bl	8009258 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f8f3 	bl	8009190 <USB_FlushTxFifo>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f91f 	bl	80091f8 <USB_FlushRxFifo>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fca:	461a      	mov	r2, r3
 8008fcc:	2300      	movs	r3, #0
 8008fce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2300      	movs	r3, #0
 8008fda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fe8:	2300      	movs	r3, #0
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	e043      	b.n	8009076 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009004:	d118      	bne.n	8009038 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	461a      	mov	r2, r3
 800901a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	e013      	b.n	800904a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800902e:	461a      	mov	r2, r3
 8009030:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e008      	b.n	800904a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	461a      	mov	r2, r3
 8009046:	2300      	movs	r3, #0
 8009048:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009056:	461a      	mov	r2, r3
 8009058:	2300      	movs	r3, #0
 800905a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	015a      	lsls	r2, r3, #5
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4413      	add	r3, r2
 8009064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009068:	461a      	mov	r2, r3
 800906a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800906e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3301      	adds	r3, #1
 8009074:	613b      	str	r3, [r7, #16]
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	429a      	cmp	r2, r3
 800907c:	d3b7      	bcc.n	8008fee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	e043      	b.n	800910c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800909a:	d118      	bne.n	80090ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	015a      	lsls	r2, r3, #5
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	4413      	add	r3, r2
 80090aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ae:	461a      	mov	r2, r3
 80090b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	e013      	b.n	80090e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c4:	461a      	mov	r2, r3
 80090c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	e008      	b.n	80090e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	461a      	mov	r2, r3
 80090dc:	2300      	movs	r3, #0
 80090de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ec:	461a      	mov	r2, r3
 80090ee:	2300      	movs	r3, #0
 80090f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fe:	461a      	mov	r2, r3
 8009100:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009104:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	429a      	cmp	r2, r3
 8009112:	d3b7      	bcc.n	8009084 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009126:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009134:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	2b00      	cmp	r3, #0
 800913a:	d105      	bne.n	8009148 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f043 0210 	orr.w	r2, r3, #16
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699a      	ldr	r2, [r3, #24]
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <USB_DevInit+0x2b4>)
 800914e:	4313      	orrs	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	f043 0208 	orr.w	r2, r3, #8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009168:	2b01      	cmp	r3, #1
 800916a:	d105      	bne.n	8009178 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	699a      	ldr	r2, [r3, #24]
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <USB_DevInit+0x2b8>)
 8009172:	4313      	orrs	r3, r2
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009184:	b004      	add	sp, #16
 8009186:	4770      	bx	lr
 8009188:	803c3800 	.word	0x803c3800
 800918c:	40000004 	.word	0x40000004

08009190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a13      	ldr	r2, [pc, #76]	; (80091f4 <USB_FlushTxFifo+0x64>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d901      	bls.n	80091b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e01b      	b.n	80091e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	daf2      	bge.n	800919e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	019b      	lsls	r3, r3, #6
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a08      	ldr	r2, [pc, #32]	; (80091f4 <USB_FlushTxFifo+0x64>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d901      	bls.n	80091da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e006      	b.n	80091e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b20      	cmp	r3, #32
 80091e4:	d0f0      	beq.n	80091c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	00030d40 	.word	0x00030d40

080091f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a11      	ldr	r2, [pc, #68]	; (8009254 <USB_FlushRxFifo+0x5c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e018      	b.n	8009248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	daf2      	bge.n	8009204 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2210      	movs	r2, #16
 8009226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3301      	adds	r3, #1
 800922c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	4a08      	ldr	r2, [pc, #32]	; (8009254 <USB_FlushRxFifo+0x5c>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d901      	bls.n	800923a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e006      	b.n	8009248 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2b10      	cmp	r3, #16
 8009244:	d0f0      	beq.n	8009228 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	00030d40 	.word	0x00030d40

08009258 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009278:	4313      	orrs	r3, r2
 800927a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3714      	adds	r7, #20
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr

0800928a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800928a:	b480      	push	{r7}
 800928c:	b085      	sub	sp, #20
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092a4:	f023 0303 	bic.w	r3, r3, #3
 80092a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b8:	f043 0302 	orr.w	r3, r3, #2
 80092bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	695b      	ldr	r3, [r3, #20]
 80092d8:	f003 0301 	and.w	r3, r3, #1
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b085      	sub	sp, #20
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4a13      	ldr	r2, [pc, #76]	; (800934c <USB_CoreReset+0x64>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d901      	bls.n	8009306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e01b      	b.n	800933e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	daf2      	bge.n	80092f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f043 0201 	orr.w	r2, r3, #1
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3301      	adds	r3, #1
 8009322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	4a09      	ldr	r2, [pc, #36]	; (800934c <USB_CoreReset+0x64>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d901      	bls.n	8009330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e006      	b.n	800933e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b01      	cmp	r3, #1
 800933a:	d0f0      	beq.n	800931e <USB_CoreReset+0x36>

  return HAL_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	00030d40 	.word	0x00030d40

08009350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009354:	4904      	ldr	r1, [pc, #16]	; (8009368 <MX_FATFS_Init+0x18>)
 8009356:	4805      	ldr	r0, [pc, #20]	; (800936c <MX_FATFS_Init+0x1c>)
 8009358:	f003 f834 	bl	800c3c4 <FATFS_LinkDriver>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <MX_FATFS_Init+0x20>)
 8009362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009364:	bf00      	nop
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000a74 	.word	0x20000a74
 800936c:	0800cde8 	.word	0x0800cde8
 8009370:	20000a70 	.word	0x20000a70

08009374 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009378:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800937a:	4618      	mov	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800938e:	f000 f896 	bl	80094be <BSP_SD_IsDetected>
 8009392:	4603      	mov	r3, r0
 8009394:	2b01      	cmp	r3, #1
 8009396:	d001      	beq.n	800939c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009398:	2302      	movs	r3, #2
 800939a:	e012      	b.n	80093c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800939c:	480b      	ldr	r0, [pc, #44]	; (80093cc <BSP_SD_Init+0x48>)
 800939e:	f7fc fd0d 	bl	8005dbc <HAL_SD_Init>
 80093a2:	4603      	mov	r3, r0
 80093a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80093ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80093b0:	4806      	ldr	r0, [pc, #24]	; (80093cc <BSP_SD_Init+0x48>)
 80093b2:	f7fd fad3 	bl	800695c <HAL_SD_ConfigWideBusOperation>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80093c0:	79fb      	ldrb	r3, [r7, #7]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	20000264 	.word	0x20000264

080093d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	68f9      	ldr	r1, [r7, #12]
 80093e6:	4806      	ldr	r0, [pc, #24]	; (8009400 <BSP_SD_ReadBlocks_DMA+0x30>)
 80093e8:	f7fc fda0 	bl	8005f2c <HAL_SD_ReadBlocks_DMA>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20000264 	.word	0x20000264

08009404 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	68f9      	ldr	r1, [r7, #12]
 800941a:	4806      	ldr	r0, [pc, #24]	; (8009434 <BSP_SD_WriteBlocks_DMA+0x30>)
 800941c:	f7fc fe68 	bl	80060f0 <HAL_SD_WriteBlocks_DMA>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	20000264 	.word	0x20000264

08009438 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800943c:	4805      	ldr	r0, [pc, #20]	; (8009454 <BSP_SD_GetCardState+0x1c>)
 800943e:	f7fd fb27 	bl	8006a90 <HAL_SD_GetCardState>
 8009442:	4603      	mov	r3, r0
 8009444:	2b04      	cmp	r3, #4
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
}
 800944e:	4618      	mov	r0, r3
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000264 	.word	0x20000264

08009458 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4803      	ldr	r0, [pc, #12]	; (8009470 <BSP_SD_GetCardInfo+0x18>)
 8009464:	f7fd fa4e 	bl	8006904 <HAL_SD_GetCardInfo>
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20000264 	.word	0x20000264

08009474 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800947c:	f000 f818 	bl	80094b0 <BSP_SD_AbortCallback>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009490:	f000 f9a8 	bl	80097e4 <BSP_SD_WriteCpltCallback>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80094a4:	f000 f9aa 	bl	80097fc <BSP_SD_ReadCpltCallback>
}
 80094a8:	bf00      	nop
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80094b0:	b480      	push	{r7}
 80094b2:	af00      	add	r7, sp, #0

}
 80094b4:	bf00      	nop
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80094c4:	2301      	movs	r3, #1
 80094c6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80094c8:	f000 f80c 	bl	80094e4 <BSP_PlatformIsDetected>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80094d2:	2300      	movs	r3, #0
 80094d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	b2db      	uxtb	r3, r3
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80094ea:	2301      	movs	r3, #1
 80094ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80094ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094f2:	4806      	ldr	r0, [pc, #24]	; (800950c <BSP_PlatformIsDetected+0x28>)
 80094f4:	f7fa fb38 	bl	8003b68 <HAL_GPIO_ReadPin>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80094fe:	2300      	movs	r3, #0
 8009500:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009502:	79fb      	ldrb	r3, [r7, #7]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	40020400 	.word	0x40020400

08009510 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009518:	f7f8 fe40 	bl	800219c <HAL_GetTick>
 800951c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800951e:	e006      	b.n	800952e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009520:	f7ff ff8a 	bl	8009438 <BSP_SD_GetCardState>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800952a:	2300      	movs	r3, #0
 800952c:	e009      	b.n	8009542 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800952e:	f7f8 fe35 	bl	800219c <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	429a      	cmp	r2, r3
 800953c:	d8f0      	bhi.n	8009520 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800953e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <SD_CheckStatus+0x38>)
 8009558:	2201      	movs	r2, #1
 800955a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800955c:	f7ff ff6c 	bl	8009438 <BSP_SD_GetCardState>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d107      	bne.n	8009576 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009566:	4b07      	ldr	r3, [pc, #28]	; (8009584 <SD_CheckStatus+0x38>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	b2da      	uxtb	r2, r3
 8009572:	4b04      	ldr	r3, [pc, #16]	; (8009584 <SD_CheckStatus+0x38>)
 8009574:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009576:	4b03      	ldr	r3, [pc, #12]	; (8009584 <SD_CheckStatus+0x38>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	b2db      	uxtb	r3, r3
}
 800957c:	4618      	mov	r0, r3
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20000009 	.word	0x20000009

08009588 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009592:	f7ff fef7 	bl	8009384 <BSP_SD_Init>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d107      	bne.n	80095ac <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff ffd4 	bl	800954c <SD_CheckStatus>
 80095a4:	4603      	mov	r3, r0
 80095a6:	461a      	mov	r2, r3
 80095a8:	4b04      	ldr	r3, [pc, #16]	; (80095bc <SD_initialize+0x34>)
 80095aa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80095ac:	4b03      	ldr	r3, [pc, #12]	; (80095bc <SD_initialize+0x34>)
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	b2db      	uxtb	r3, r3
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	20000009 	.word	0x20000009

080095c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff ffbd 	bl	800954c <SD_CheckStatus>
 80095d2:	4603      	mov	r3, r0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80095f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80095f4:	f7ff ff8c 	bl	8009510 <SD_CheckStatusWithTimeout>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	da01      	bge.n	8009602 <SD_read+0x26>
  {
    return res;
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
 8009600:	e03b      	b.n	800967a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	68b8      	ldr	r0, [r7, #8]
 8009608:	f7ff fee2 	bl	80093d0 <BSP_SD_ReadBlocks_DMA>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d132      	bne.n	8009678 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <SD_read+0xa8>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009618:	f7f8 fdc0 	bl	800219c <HAL_GetTick>
 800961c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800961e:	bf00      	nop
 8009620:	4b18      	ldr	r3, [pc, #96]	; (8009684 <SD_read+0xa8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d108      	bne.n	800963a <SD_read+0x5e>
 8009628:	f7f8 fdb8 	bl	800219c <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	f247 522f 	movw	r2, #29999	; 0x752f
 8009636:	4293      	cmp	r3, r2
 8009638:	d9f2      	bls.n	8009620 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800963a:	4b12      	ldr	r3, [pc, #72]	; (8009684 <SD_read+0xa8>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d102      	bne.n	8009648 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]
 8009646:	e017      	b.n	8009678 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009648:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <SD_read+0xa8>)
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800964e:	f7f8 fda5 	bl	800219c <HAL_GetTick>
 8009652:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009654:	e007      	b.n	8009666 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009656:	f7ff feef 	bl	8009438 <BSP_SD_GetCardState>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <SD_read+0x8a>
          {
            res = RES_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009664:	e008      	b.n	8009678 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009666:	f7f8 fd99 	bl	800219c <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	f247 522f 	movw	r2, #29999	; 0x752f
 8009674:	4293      	cmp	r3, r2
 8009676:	d9ee      	bls.n	8009656 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009678:	7dfb      	ldrb	r3, [r7, #23]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3718      	adds	r7, #24
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000edc 	.word	0x20000edc

08009688 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60b9      	str	r1, [r7, #8]
 8009690:	607a      	str	r2, [r7, #4]
 8009692:	603b      	str	r3, [r7, #0]
 8009694:	4603      	mov	r3, r0
 8009696:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800969c:	4b24      	ldr	r3, [pc, #144]	; (8009730 <SD_write+0xa8>)
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80096a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80096a6:	f7ff ff33 	bl	8009510 <SD_CheckStatusWithTimeout>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da01      	bge.n	80096b4 <SD_write+0x2c>
  {
    return res;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
 80096b2:	e038      	b.n	8009726 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	6879      	ldr	r1, [r7, #4]
 80096b8:	68b8      	ldr	r0, [r7, #8]
 80096ba:	f7ff fea3 	bl	8009404 <BSP_SD_WriteBlocks_DMA>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d12f      	bne.n	8009724 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80096c4:	f7f8 fd6a 	bl	800219c <HAL_GetTick>
 80096c8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80096ca:	bf00      	nop
 80096cc:	4b18      	ldr	r3, [pc, #96]	; (8009730 <SD_write+0xa8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d108      	bne.n	80096e6 <SD_write+0x5e>
 80096d4:	f7f8 fd62 	bl	800219c <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	f247 522f 	movw	r2, #29999	; 0x752f
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d9f2      	bls.n	80096cc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80096e6:	4b12      	ldr	r3, [pc, #72]	; (8009730 <SD_write+0xa8>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d102      	bne.n	80096f4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	75fb      	strb	r3, [r7, #23]
 80096f2:	e017      	b.n	8009724 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80096f4:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <SD_write+0xa8>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80096fa:	f7f8 fd4f 	bl	800219c <HAL_GetTick>
 80096fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009700:	e007      	b.n	8009712 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009702:	f7ff fe99 	bl	8009438 <BSP_SD_GetCardState>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d102      	bne.n	8009712 <SD_write+0x8a>
          {
            res = RES_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75fb      	strb	r3, [r7, #23]
            break;
 8009710:	e008      	b.n	8009724 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009712:	f7f8 fd43 	bl	800219c <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009720:	4293      	cmp	r3, r2
 8009722:	d9ee      	bls.n	8009702 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009724:	7dfb      	ldrb	r3, [r7, #23]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3718      	adds	r7, #24
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20000ed8 	.word	0x20000ed8

08009734 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b08c      	sub	sp, #48	; 0x30
 8009738:	af00      	add	r7, sp, #0
 800973a:	4603      	mov	r3, r0
 800973c:	603a      	str	r2, [r7, #0]
 800973e:	71fb      	strb	r3, [r7, #7]
 8009740:	460b      	mov	r3, r1
 8009742:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800974a:	4b25      	ldr	r3, [pc, #148]	; (80097e0 <SD_ioctl+0xac>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <SD_ioctl+0x28>
 8009758:	2303      	movs	r3, #3
 800975a:	e03c      	b.n	80097d6 <SD_ioctl+0xa2>

  switch (cmd)
 800975c:	79bb      	ldrb	r3, [r7, #6]
 800975e:	2b03      	cmp	r3, #3
 8009760:	d834      	bhi.n	80097cc <SD_ioctl+0x98>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <SD_ioctl+0x34>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009779 	.word	0x08009779
 800976c:	08009781 	.word	0x08009781
 8009770:	08009799 	.word	0x08009799
 8009774:	080097b3 	.word	0x080097b3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800977e:	e028      	b.n	80097d2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009780:	f107 030c 	add.w	r3, r7, #12
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fe67 	bl	8009458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800978a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009796:	e01c      	b.n	80097d2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff fe5b 	bl	8009458 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80097a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097b0:	e00f      	b.n	80097d2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80097b2:	f107 030c 	add.w	r3, r7, #12
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fe4e 	bl	8009458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	0a5a      	lsrs	r2, r3, #9
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80097ca:	e002      	b.n	80097d2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80097cc:	2304      	movs	r3, #4
 80097ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80097d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3730      	adds	r7, #48	; 0x30
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000009 	.word	0x20000009

080097e4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80097e8:	4b03      	ldr	r3, [pc, #12]	; (80097f8 <BSP_SD_WriteCpltCallback+0x14>)
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
}
 80097ee:	bf00      	nop
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20000ed8 	.word	0x20000ed8

080097fc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009800:	4b03      	ldr	r3, [pc, #12]	; (8009810 <BSP_SD_ReadCpltCallback+0x14>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]
}
 8009806:	bf00      	nop
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000edc 	.word	0x20000edc

08009814 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	4a08      	ldr	r2, [pc, #32]	; (8009844 <disk_status+0x30>)
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	79fa      	ldrb	r2, [r7, #7]
 800982c:	4905      	ldr	r1, [pc, #20]	; (8009844 <disk_status+0x30>)
 800982e:	440a      	add	r2, r1
 8009830:	7a12      	ldrb	r2, [r2, #8]
 8009832:	4610      	mov	r0, r2
 8009834:	4798      	blx	r3
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
  return stat;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	20000f08 	.word	0x20000f08

08009848 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009852:	2300      	movs	r3, #0
 8009854:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	4a0d      	ldr	r2, [pc, #52]	; (8009890 <disk_initialize+0x48>)
 800985a:	5cd3      	ldrb	r3, [r2, r3]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d111      	bne.n	8009884 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009860:	79fb      	ldrb	r3, [r7, #7]
 8009862:	4a0b      	ldr	r2, [pc, #44]	; (8009890 <disk_initialize+0x48>)
 8009864:	2101      	movs	r1, #1
 8009866:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	4a09      	ldr	r2, [pc, #36]	; (8009890 <disk_initialize+0x48>)
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4413      	add	r3, r2
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	79fa      	ldrb	r2, [r7, #7]
 8009876:	4906      	ldr	r1, [pc, #24]	; (8009890 <disk_initialize+0x48>)
 8009878:	440a      	add	r2, r1
 800987a:	7a12      	ldrb	r2, [r2, #8]
 800987c:	4610      	mov	r0, r2
 800987e:	4798      	blx	r3
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009884:	7bfb      	ldrb	r3, [r7, #15]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	20000f08 	.word	0x20000f08

08009894 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	4a0a      	ldr	r2, [pc, #40]	; (80098d0 <disk_read+0x3c>)
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	689c      	ldr	r4, [r3, #8]
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	4a07      	ldr	r2, [pc, #28]	; (80098d0 <disk_read+0x3c>)
 80098b4:	4413      	add	r3, r2
 80098b6:	7a18      	ldrb	r0, [r3, #8]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	47a0      	blx	r4
 80098c0:	4603      	mov	r3, r0
 80098c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	371c      	adds	r7, #28
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd90      	pop	{r4, r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000f08 	.word	0x20000f08

080098d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	4a0a      	ldr	r2, [pc, #40]	; (8009910 <disk_write+0x3c>)
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	68dc      	ldr	r4, [r3, #12]
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	4a07      	ldr	r2, [pc, #28]	; (8009910 <disk_write+0x3c>)
 80098f4:	4413      	add	r3, r2
 80098f6:	7a18      	ldrb	r0, [r3, #8]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	68b9      	ldr	r1, [r7, #8]
 80098fe:	47a0      	blx	r4
 8009900:	4603      	mov	r3, r0
 8009902:	75fb      	strb	r3, [r7, #23]
  return res;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
}
 8009906:	4618      	mov	r0, r3
 8009908:	371c      	adds	r7, #28
 800990a:	46bd      	mov	sp, r7
 800990c:	bd90      	pop	{r4, r7, pc}
 800990e:	bf00      	nop
 8009910:	20000f08 	.word	0x20000f08

08009914 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	4603      	mov	r3, r0
 800991c:	603a      	str	r2, [r7, #0]
 800991e:	71fb      	strb	r3, [r7, #7]
 8009920:	460b      	mov	r3, r1
 8009922:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	4a09      	ldr	r2, [pc, #36]	; (800994c <disk_ioctl+0x38>)
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	79fa      	ldrb	r2, [r7, #7]
 8009932:	4906      	ldr	r1, [pc, #24]	; (800994c <disk_ioctl+0x38>)
 8009934:	440a      	add	r2, r1
 8009936:	7a10      	ldrb	r0, [r2, #8]
 8009938:	79b9      	ldrb	r1, [r7, #6]
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	4798      	blx	r3
 800993e:	4603      	mov	r3, r0
 8009940:	73fb      	strb	r3, [r7, #15]
  return res;
 8009942:	7bfb      	ldrb	r3, [r7, #15]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000f08 	.word	0x20000f08

08009950 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3301      	adds	r3, #1
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009960:	89fb      	ldrh	r3, [r7, #14]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	b21a      	sxth	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	b21b      	sxth	r3, r3
 800996c:	4313      	orrs	r3, r2
 800996e:	b21b      	sxth	r3, r3
 8009970:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009972:	89fb      	ldrh	r3, [r7, #14]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3303      	adds	r3, #3
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	3202      	adds	r2, #2
 8009998:	7812      	ldrb	r2, [r2, #0]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	3201      	adds	r2, #1
 80099a6:	7812      	ldrb	r2, [r2, #0]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80099b8:	68fb      	ldr	r3, [r7, #12]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	887a      	ldrh	r2, [r7, #2]
 80099da:	b2d2      	uxtb	r2, r2
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	887b      	ldrh	r3, [r7, #2]
 80099e0:	0a1b      	lsrs	r3, r3, #8
 80099e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	607a      	str	r2, [r7, #4]
 80099ea:	887a      	ldrh	r2, [r7, #2]
 80099ec:	b2d2      	uxtb	r2, r2
 80099ee:	701a      	strb	r2, [r3, #0]
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	b2d2      	uxtb	r2, r2
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	0a1b      	lsrs	r3, r3, #8
 8009a16:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	b2d2      	uxtb	r2, r2
 8009a22:	701a      	strb	r2, [r3, #0]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	0a1b      	lsrs	r3, r3, #8
 8009a28:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	1c5a      	adds	r2, r3, #1
 8009a2e:	607a      	str	r2, [r7, #4]
 8009a30:	683a      	ldr	r2, [r7, #0]
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	0a1b      	lsrs	r3, r3, #8
 8009a3a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	607a      	str	r2, [r7, #4]
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	b2d2      	uxtb	r2, r2
 8009a46:	701a      	strb	r2, [r3, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009a54:	b480      	push	{r7}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00d      	beq.n	8009a8a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	1c53      	adds	r3, r2, #1
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	1c59      	adds	r1, r3, #1
 8009a78:	6179      	str	r1, [r7, #20]
 8009a7a:	7812      	ldrb	r2, [r2, #0]
 8009a7c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	607b      	str	r3, [r7, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f1      	bne.n	8009a6e <mem_cpy+0x1a>
	}
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009a96:	b480      	push	{r7}
 8009a98:	b087      	sub	sp, #28
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	60f8      	str	r0, [r7, #12]
 8009a9e:	60b9      	str	r1, [r7, #8]
 8009aa0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	617a      	str	r2, [r7, #20]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	607b      	str	r3, [r7, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f3      	bne.n	8009aa6 <mem_set+0x10>
}
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009acc:	b480      	push	{r7}
 8009ace:	b089      	sub	sp, #36	; 0x24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	61fb      	str	r3, [r7, #28]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	61fa      	str	r2, [r7, #28]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	4619      	mov	r1, r3
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	61ba      	str	r2, [r7, #24]
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	1acb      	subs	r3, r1, r3
 8009af8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	607b      	str	r3, [r7, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <mem_cmp+0x40>
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0eb      	beq.n	8009ae4 <mem_cmp+0x18>

	return r;
 8009b0c:	697b      	ldr	r3, [r7, #20]
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3724      	adds	r7, #36	; 0x24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
 8009b22:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b24:	e002      	b.n	8009b2c <chk_chr+0x12>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	607b      	str	r3, [r7, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d005      	beq.n	8009b40 <chk_chr+0x26>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	461a      	mov	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d1f2      	bne.n	8009b26 <chk_chr+0xc>
	return *str;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	781b      	ldrb	r3, [r3, #0]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60bb      	str	r3, [r7, #8]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e029      	b.n	8009bb8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009b64:	4a27      	ldr	r2, [pc, #156]	; (8009c04 <chk_lock+0xb4>)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	4413      	add	r3, r2
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d01d      	beq.n	8009bae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b72:	4a24      	ldr	r2, [pc, #144]	; (8009c04 <chk_lock+0xb4>)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	4413      	add	r3, r2
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d116      	bne.n	8009bb2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009b84:	4a1f      	ldr	r2, [pc, #124]	; (8009c04 <chk_lock+0xb4>)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3304      	adds	r3, #4
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d10c      	bne.n	8009bb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009b98:	4a1a      	ldr	r2, [pc, #104]	; (8009c04 <chk_lock+0xb4>)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	4413      	add	r3, r2
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d102      	bne.n	8009bb2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009bac:	e007      	b.n	8009bbe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d9d2      	bls.n	8009b64 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d109      	bne.n	8009bd8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d102      	bne.n	8009bd0 <chk_lock+0x80>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d101      	bne.n	8009bd4 <chk_lock+0x84>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e010      	b.n	8009bf6 <chk_lock+0xa6>
 8009bd4:	2312      	movs	r3, #18
 8009bd6:	e00e      	b.n	8009bf6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d108      	bne.n	8009bf0 <chk_lock+0xa0>
 8009bde:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <chk_lock+0xb4>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	4413      	add	r3, r2
 8009be6:	330c      	adds	r3, #12
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bee:	d101      	bne.n	8009bf4 <chk_lock+0xa4>
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	e000      	b.n	8009bf6 <chk_lock+0xa6>
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	20000ee8 	.word	0x20000ee8

08009c08 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	e002      	b.n	8009c1a <enq_lock+0x12>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3301      	adds	r3, #1
 8009c18:	607b      	str	r3, [r7, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d806      	bhi.n	8009c2e <enq_lock+0x26>
 8009c20:	4a09      	ldr	r2, [pc, #36]	; (8009c48 <enq_lock+0x40>)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	4413      	add	r3, r2
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1f2      	bne.n	8009c14 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	bf14      	ite	ne
 8009c34:	2301      	movne	r3, #1
 8009c36:	2300      	moveq	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	20000ee8 	.word	0x20000ee8

08009c4c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	e01f      	b.n	8009c9c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009c5c:	4a41      	ldr	r2, [pc, #260]	; (8009d64 <inc_lock+0x118>)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	4413      	add	r3, r2
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d113      	bne.n	8009c96 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009c6e:	4a3d      	ldr	r2, [pc, #244]	; (8009d64 <inc_lock+0x118>)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	4413      	add	r3, r2
 8009c76:	3304      	adds	r3, #4
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d109      	bne.n	8009c96 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009c82:	4a38      	ldr	r2, [pc, #224]	; (8009d64 <inc_lock+0x118>)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	4413      	add	r3, r2
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d006      	beq.n	8009ca4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d9dc      	bls.n	8009c5c <inc_lock+0x10>
 8009ca2:	e000      	b.n	8009ca6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009ca4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d132      	bne.n	8009d12 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	e002      	b.n	8009cb8 <inc_lock+0x6c>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d806      	bhi.n	8009ccc <inc_lock+0x80>
 8009cbe:	4a29      	ldr	r2, [pc, #164]	; (8009d64 <inc_lock+0x118>)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	4413      	add	r3, r2
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1f2      	bne.n	8009cb2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d101      	bne.n	8009cd6 <inc_lock+0x8a>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	e040      	b.n	8009d58 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4922      	ldr	r1, [pc, #136]	; (8009d64 <inc_lock+0x118>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	440b      	add	r3, r1
 8009ce2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	491e      	ldr	r1, [pc, #120]	; (8009d64 <inc_lock+0x118>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	440b      	add	r3, r1
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695a      	ldr	r2, [r3, #20]
 8009cf8:	491a      	ldr	r1, [pc, #104]	; (8009d64 <inc_lock+0x118>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	440b      	add	r3, r1
 8009d00:	3308      	adds	r3, #8
 8009d02:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d04:	4a17      	ldr	r2, [pc, #92]	; (8009d64 <inc_lock+0x118>)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	4413      	add	r3, r2
 8009d0c:	330c      	adds	r3, #12
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d009      	beq.n	8009d2c <inc_lock+0xe0>
 8009d18:	4a12      	ldr	r2, [pc, #72]	; (8009d64 <inc_lock+0x118>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	4413      	add	r3, r2
 8009d20:	330c      	adds	r3, #12
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <inc_lock+0xe0>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e015      	b.n	8009d58 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d108      	bne.n	8009d44 <inc_lock+0xf8>
 8009d32:	4a0c      	ldr	r2, [pc, #48]	; (8009d64 <inc_lock+0x118>)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	011b      	lsls	r3, r3, #4
 8009d38:	4413      	add	r3, r2
 8009d3a:	330c      	adds	r3, #12
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	e001      	b.n	8009d48 <inc_lock+0xfc>
 8009d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d48:	4906      	ldr	r1, [pc, #24]	; (8009d64 <inc_lock+0x118>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	011b      	lsls	r3, r3, #4
 8009d4e:	440b      	add	r3, r1
 8009d50:	330c      	adds	r3, #12
 8009d52:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3301      	adds	r3, #1
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	20000ee8 	.word	0x20000ee8

08009d68 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3b01      	subs	r3, #1
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d825      	bhi.n	8009dc8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009d7c:	4a17      	ldr	r2, [pc, #92]	; (8009ddc <dec_lock+0x74>)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	011b      	lsls	r3, r3, #4
 8009d82:	4413      	add	r3, r2
 8009d84:	330c      	adds	r3, #12
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
 8009d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d90:	d101      	bne.n	8009d96 <dec_lock+0x2e>
 8009d92:	2300      	movs	r3, #0
 8009d94:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009d96:	89fb      	ldrh	r3, [r7, #14]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <dec_lock+0x3a>
 8009d9c:	89fb      	ldrh	r3, [r7, #14]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009da2:	4a0e      	ldr	r2, [pc, #56]	; (8009ddc <dec_lock+0x74>)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	4413      	add	r3, r2
 8009daa:	330c      	adds	r3, #12
 8009dac:	89fa      	ldrh	r2, [r7, #14]
 8009dae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009db0:	89fb      	ldrh	r3, [r7, #14]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d105      	bne.n	8009dc2 <dec_lock+0x5a>
 8009db6:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <dec_lock+0x74>)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	4413      	add	r3, r2
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	737b      	strb	r3, [r7, #13]
 8009dc6:	e001      	b.n	8009dcc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009dc8:	2302      	movs	r3, #2
 8009dca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009dcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20000ee8 	.word	0x20000ee8

08009de0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e010      	b.n	8009e10 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009dee:	4a0d      	ldr	r2, [pc, #52]	; (8009e24 <clear_lock+0x44>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4413      	add	r3, r2
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d105      	bne.n	8009e0a <clear_lock+0x2a>
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <clear_lock+0x44>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	011b      	lsls	r3, r3, #4
 8009e04:	4413      	add	r3, r2
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d9eb      	bls.n	8009dee <clear_lock+0xe>
	}
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	20000ee8 	.word	0x20000ee8

08009e28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	78db      	ldrb	r3, [r3, #3]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d034      	beq.n	8009ea6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	7858      	ldrb	r0, [r3, #1]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	697a      	ldr	r2, [r7, #20]
 8009e50:	f7ff fd40 	bl	80098d4 <disk_write>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d002      	beq.n	8009e60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	73fb      	strb	r3, [r7, #15]
 8009e5e:	e022      	b.n	8009ea6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a1b      	ldr	r3, [r3, #32]
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	1ad2      	subs	r2, r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d217      	bcs.n	8009ea6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	789b      	ldrb	r3, [r3, #2]
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	e010      	b.n	8009ea0 <sync_window+0x78>
					wsect += fs->fsize;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4413      	add	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7858      	ldrb	r0, [r3, #1]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e92:	2301      	movs	r3, #1
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	f7ff fd1d 	bl	80098d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d8eb      	bhi.n	8009e7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d01b      	beq.n	8009f00 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff ffad 	bl	8009e28 <sync_window>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d113      	bne.n	8009f00 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	7858      	ldrb	r0, [r3, #1]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	f7ff fcd5 	bl	8009894 <disk_read>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d004      	beq.n	8009efa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ef4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7ff ff87 	bl	8009e28 <sync_window>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d158      	bne.n	8009fd6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d148      	bne.n	8009fbe <sync_fs+0xb2>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	791b      	ldrb	r3, [r3, #4]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d144      	bne.n	8009fbe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	3330      	adds	r3, #48	; 0x30
 8009f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff fda9 	bl	8009a96 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3330      	adds	r3, #48	; 0x30
 8009f48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f4c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7ff fd38 	bl	80099c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	3330      	adds	r3, #48	; 0x30
 8009f5a:	4921      	ldr	r1, [pc, #132]	; (8009fe0 <sync_fs+0xd4>)
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff fd4d 	bl	80099fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3330      	adds	r3, #48	; 0x30
 8009f66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009f6a:	491e      	ldr	r1, [pc, #120]	; (8009fe4 <sync_fs+0xd8>)
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7ff fd45 	bl	80099fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3330      	adds	r3, #48	; 0x30
 8009f76:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4610      	mov	r0, r2
 8009f82:	f7ff fd3b 	bl	80099fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	3330      	adds	r3, #48	; 0x30
 8009f8a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7ff fd31 	bl	80099fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	69db      	ldr	r3, [r3, #28]
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	7858      	ldrb	r0, [r3, #1]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f7ff fc8e 	bl	80098d4 <disk_write>
			fs->fsi_flag = 0;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	785b      	ldrb	r3, [r3, #1]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff fca4 	bl	8009914 <disk_ioctl>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <sync_fs+0xca>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	41615252 	.word	0x41615252
 8009fe4:	61417272 	.word	0x61417272

08009fe8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	3b02      	subs	r3, #2
 8009ff6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	3b02      	subs	r3, #2
 8009ffe:	683a      	ldr	r2, [r7, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d301      	bcc.n	800a008 <clust2sect+0x20>
 800a004:	2300      	movs	r3, #0
 800a006:	e008      	b.n	800a01a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	895b      	ldrh	r3, [r3, #10]
 800a00c:	461a      	mov	r2, r3
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	fb03 f202 	mul.w	r2, r3, r2
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a018:	4413      	add	r3, r2
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d904      	bls.n	800a046 <get_fat+0x20>
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	695b      	ldr	r3, [r3, #20]
 800a040:	683a      	ldr	r2, [r7, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d302      	bcc.n	800a04c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a046:	2301      	movs	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	e08f      	b.n	800a16c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a04c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a050:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b03      	cmp	r3, #3
 800a058:	d062      	beq.n	800a120 <get_fat+0xfa>
 800a05a:	2b03      	cmp	r3, #3
 800a05c:	dc7c      	bgt.n	800a158 <get_fat+0x132>
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d002      	beq.n	800a068 <get_fat+0x42>
 800a062:	2b02      	cmp	r3, #2
 800a064:	d042      	beq.n	800a0ec <get_fat+0xc6>
 800a066:	e077      	b.n	800a158 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	4413      	add	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	6a1a      	ldr	r2, [r3, #32]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	0a5b      	lsrs	r3, r3, #9
 800a07e:	4413      	add	r3, r2
 800a080:	4619      	mov	r1, r3
 800a082:	6938      	ldr	r0, [r7, #16]
 800a084:	f7ff ff14 	bl	8009eb0 <move_window>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d167      	bne.n	800a15e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	60fa      	str	r2, [r7, #12]
 800a094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4413      	add	r3, r2
 800a09c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0a0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	0a5b      	lsrs	r3, r3, #9
 800a0aa:	4413      	add	r3, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6938      	ldr	r0, [r7, #16]
 800a0b0:	f7ff fefe 	bl	8009eb0 <move_window>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d153      	bne.n	800a162 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0c8:	021b      	lsls	r3, r3, #8
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	f003 0301 	and.w	r3, r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <get_fat+0xbc>
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	091b      	lsrs	r3, r3, #4
 800a0e0:	e002      	b.n	800a0e8 <get_fat+0xc2>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0e8:	617b      	str	r3, [r7, #20]
			break;
 800a0ea:	e03f      	b.n	800a16c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6a1a      	ldr	r2, [r3, #32]
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	0a1b      	lsrs	r3, r3, #8
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6938      	ldr	r0, [r7, #16]
 800a0fa:	f7ff fed9 	bl	8009eb0 <move_window>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d130      	bne.n	800a166 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a112:	4413      	add	r3, r2
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff fc1b 	bl	8009950 <ld_word>
 800a11a:	4603      	mov	r3, r0
 800a11c:	617b      	str	r3, [r7, #20]
			break;
 800a11e:	e025      	b.n	800a16c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	6a1a      	ldr	r2, [r3, #32]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	09db      	lsrs	r3, r3, #7
 800a128:	4413      	add	r3, r2
 800a12a:	4619      	mov	r1, r3
 800a12c:	6938      	ldr	r0, [r7, #16]
 800a12e:	f7ff febf 	bl	8009eb0 <move_window>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d118      	bne.n	800a16a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a146:	4413      	add	r3, r2
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fc19 	bl	8009980 <ld_dword>
 800a14e:	4603      	mov	r3, r0
 800a150:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a154:	617b      	str	r3, [r7, #20]
			break;
 800a156:	e009      	b.n	800a16c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a158:	2301      	movs	r3, #1
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e006      	b.n	800a16c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a15e:	bf00      	nop
 800a160:	e004      	b.n	800a16c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a162:	bf00      	nop
 800a164:	e002      	b.n	800a16c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a166:	bf00      	nop
 800a168:	e000      	b.n	800a16c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a16a:	bf00      	nop
		}
	}

	return val;
 800a16c:	697b      	ldr	r3, [r7, #20]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a176:	b590      	push	{r4, r7, lr}
 800a178:	b089      	sub	sp, #36	; 0x24
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a182:	2302      	movs	r3, #2
 800a184:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	f240 80d2 	bls.w	800a332 <put_fat+0x1bc>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	429a      	cmp	r2, r3
 800a196:	f080 80cc 	bcs.w	800a332 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	f000 8096 	beq.w	800a2d0 <put_fat+0x15a>
 800a1a4:	2b03      	cmp	r3, #3
 800a1a6:	f300 80cd 	bgt.w	800a344 <put_fat+0x1ce>
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d002      	beq.n	800a1b4 <put_fat+0x3e>
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d06e      	beq.n	800a290 <put_fat+0x11a>
 800a1b2:	e0c7      	b.n	800a344 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	61bb      	str	r3, [r7, #24]
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	085b      	lsrs	r3, r3, #1
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	4413      	add	r3, r2
 800a1c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1a      	ldr	r2, [r3, #32]
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	0a5b      	lsrs	r3, r3, #9
 800a1ca:	4413      	add	r3, r2
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff fe6e 	bl	8009eb0 <move_window>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1d8:	7ffb      	ldrb	r3, [r7, #31]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 80ab 	bne.w	800a336 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	1c59      	adds	r1, r3, #1
 800a1ea:	61b9      	str	r1, [r7, #24]
 800a1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f0:	4413      	add	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00d      	beq.n	800a21a <put_fat+0xa4>
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	b25b      	sxtb	r3, r3
 800a204:	f003 030f 	and.w	r3, r3, #15
 800a208:	b25a      	sxtb	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	b25b      	sxtb	r3, r3
 800a212:	4313      	orrs	r3, r2
 800a214:	b25b      	sxtb	r3, r3
 800a216:	b2db      	uxtb	r3, r3
 800a218:	e001      	b.n	800a21e <put_fat+0xa8>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2201      	movs	r2, #1
 800a226:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a1a      	ldr	r2, [r3, #32]
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	0a5b      	lsrs	r3, r3, #9
 800a230:	4413      	add	r3, r2
 800a232:	4619      	mov	r1, r3
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	f7ff fe3b 	bl	8009eb0 <move_window>
 800a23a:	4603      	mov	r3, r0
 800a23c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a23e:	7ffb      	ldrb	r3, [r7, #31]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d17a      	bne.n	800a33a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a250:	4413      	add	r3, r2
 800a252:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <put_fat+0xf0>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	091b      	lsrs	r3, r3, #4
 800a262:	b2db      	uxtb	r3, r3
 800a264:	e00e      	b.n	800a284 <put_fat+0x10e>
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	b25b      	sxtb	r3, r3
 800a26c:	f023 030f 	bic.w	r3, r3, #15
 800a270:	b25a      	sxtb	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	0a1b      	lsrs	r3, r3, #8
 800a276:	b25b      	sxtb	r3, r3
 800a278:	f003 030f 	and.w	r3, r3, #15
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	4313      	orrs	r3, r2
 800a280:	b25b      	sxtb	r3, r3
 800a282:	b2db      	uxtb	r3, r3
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	70da      	strb	r2, [r3, #3]
			break;
 800a28e:	e059      	b.n	800a344 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6a1a      	ldr	r2, [r3, #32]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	0a1b      	lsrs	r3, r3, #8
 800a298:	4413      	add	r3, r2
 800a29a:	4619      	mov	r1, r3
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fe07 	bl	8009eb0 <move_window>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2a6:	7ffb      	ldrb	r3, [r7, #31]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d148      	bne.n	800a33e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a2ba:	4413      	add	r3, r2
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	b292      	uxth	r2, r2
 800a2c0:	4611      	mov	r1, r2
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff fb7f 	bl	80099c6 <st_word>
			fs->wflag = 1;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	70da      	strb	r2, [r3, #3]
			break;
 800a2ce:	e039      	b.n	800a344 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1a      	ldr	r2, [r3, #32]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	09db      	lsrs	r3, r3, #7
 800a2d8:	4413      	add	r3, r2
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff fde7 	bl	8009eb0 <move_window>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2e6:	7ffb      	ldrb	r3, [r7, #31]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d12a      	bne.n	800a342 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a300:	4413      	add	r3, r2
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fb3c 	bl	8009980 <ld_dword>
 800a308:	4603      	mov	r3, r0
 800a30a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a30e:	4323      	orrs	r3, r4
 800a310:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a320:	4413      	add	r3, r2
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff fb69 	bl	80099fc <st_dword>
			fs->wflag = 1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	70da      	strb	r2, [r3, #3]
			break;
 800a330:	e008      	b.n	800a344 <put_fat+0x1ce>
		}
	}
 800a332:	bf00      	nop
 800a334:	e006      	b.n	800a344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a336:	bf00      	nop
 800a338:	e004      	b.n	800a344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a33a:	bf00      	nop
 800a33c:	e002      	b.n	800a344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a33e:	bf00      	nop
 800a340:	e000      	b.n	800a344 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a342:	bf00      	nop
	return res;
 800a344:	7ffb      	ldrb	r3, [r7, #31]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3724      	adds	r7, #36	; 0x24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd90      	pop	{r4, r7, pc}

0800a34e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b088      	sub	sp, #32
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d904      	bls.n	800a374 <remove_chain+0x26>
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	429a      	cmp	r2, r3
 800a372:	d301      	bcc.n	800a378 <remove_chain+0x2a>
 800a374:	2302      	movs	r3, #2
 800a376:	e04b      	b.n	800a410 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00c      	beq.n	800a398 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a382:	6879      	ldr	r1, [r7, #4]
 800a384:	69b8      	ldr	r0, [r7, #24]
 800a386:	f7ff fef6 	bl	800a176 <put_fat>
 800a38a:	4603      	mov	r3, r0
 800a38c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a38e:	7ffb      	ldrb	r3, [r7, #31]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <remove_chain+0x4a>
 800a394:	7ffb      	ldrb	r3, [r7, #31]
 800a396:	e03b      	b.n	800a410 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f7ff fe43 	bl	800a026 <get_fat>
 800a3a0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d031      	beq.n	800a40c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d101      	bne.n	800a3b2 <remove_chain+0x64>
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	e02e      	b.n	800a410 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b8:	d101      	bne.n	800a3be <remove_chain+0x70>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e028      	b.n	800a410 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a3be:	2200      	movs	r2, #0
 800a3c0:	68b9      	ldr	r1, [r7, #8]
 800a3c2:	69b8      	ldr	r0, [r7, #24]
 800a3c4:	f7ff fed7 	bl	800a176 <put_fat>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a3cc:	7ffb      	ldrb	r3, [r7, #31]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <remove_chain+0x88>
 800a3d2:	7ffb      	ldrb	r3, [r7, #31]
 800a3d4:	e01c      	b.n	800a410 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	691a      	ldr	r2, [r3, #16]
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	3b02      	subs	r3, #2
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d20b      	bcs.n	800a3fc <remove_chain+0xae>
			fs->free_clst++;
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	791b      	ldrb	r3, [r3, #4]
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	429a      	cmp	r2, r3
 800a408:	d3c6      	bcc.n	800a398 <remove_chain+0x4a>
 800a40a:	e000      	b.n	800a40e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a40c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3720      	adds	r7, #32
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b088      	sub	sp, #32
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10d      	bne.n	800a44a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d004      	beq.n	800a444 <create_chain+0x2c>
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	429a      	cmp	r2, r3
 800a442:	d31b      	bcc.n	800a47c <create_chain+0x64>
 800a444:	2301      	movs	r3, #1
 800a446:	61bb      	str	r3, [r7, #24]
 800a448:	e018      	b.n	800a47c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f7ff fdea 	bl	800a026 <get_fat>
 800a452:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d801      	bhi.n	800a45e <create_chain+0x46>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e070      	b.n	800a540 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a464:	d101      	bne.n	800a46a <create_chain+0x52>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	e06a      	b.n	800a540 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	429a      	cmp	r2, r3
 800a472:	d201      	bcs.n	800a478 <create_chain+0x60>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	e063      	b.n	800a540 <create_chain+0x128>
		scl = clst;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	3301      	adds	r3, #1
 800a484:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d307      	bcc.n	800a4a0 <create_chain+0x88>
				ncl = 2;
 800a490:	2302      	movs	r3, #2
 800a492:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d901      	bls.n	800a4a0 <create_chain+0x88>
 800a49c:	2300      	movs	r3, #0
 800a49e:	e04f      	b.n	800a540 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a4a0:	69f9      	ldr	r1, [r7, #28]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fdbf 	bl	800a026 <get_fat>
 800a4a8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00e      	beq.n	800a4ce <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d003      	beq.n	800a4be <create_chain+0xa6>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4bc:	d101      	bne.n	800a4c2 <create_chain+0xaa>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	e03e      	b.n	800a540 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a4c2:	69fa      	ldr	r2, [r7, #28]
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d1da      	bne.n	800a480 <create_chain+0x68>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e038      	b.n	800a540 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a4ce:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a4d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4d4:	69f9      	ldr	r1, [r7, #28]
 800a4d6:	6938      	ldr	r0, [r7, #16]
 800a4d8:	f7ff fe4d 	bl	800a176 <put_fat>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <create_chain+0xe2>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d006      	beq.n	800a4fa <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6938      	ldr	r0, [r7, #16]
 800a4f2:	f7ff fe40 	bl	800a176 <put_fat>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a4fa:	7dfb      	ldrb	r3, [r7, #23]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d116      	bne.n	800a52e <create_chain+0x116>
		fs->last_clst = ncl;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	69fa      	ldr	r2, [r7, #28]
 800a504:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	691a      	ldr	r2, [r3, #16]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	695b      	ldr	r3, [r3, #20]
 800a50e:	3b02      	subs	r3, #2
 800a510:	429a      	cmp	r2, r3
 800a512:	d804      	bhi.n	800a51e <create_chain+0x106>
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	1e5a      	subs	r2, r3, #1
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	791b      	ldrb	r3, [r3, #4]
 800a522:	f043 0301 	orr.w	r3, r3, #1
 800a526:	b2da      	uxtb	r2, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	711a      	strb	r2, [r3, #4]
 800a52c:	e007      	b.n	800a53e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d102      	bne.n	800a53a <create_chain+0x122>
 800a534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a538:	e000      	b.n	800a53c <create_chain+0x124>
 800a53a:	2301      	movs	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a53e:	69fb      	ldr	r3, [r7, #28]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3720      	adds	r7, #32
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	3304      	adds	r3, #4
 800a55e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	0a5b      	lsrs	r3, r3, #9
 800a564:	68fa      	ldr	r2, [r7, #12]
 800a566:	8952      	ldrh	r2, [r2, #10]
 800a568:	fbb3 f3f2 	udiv	r3, r3, r2
 800a56c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	1d1a      	adds	r2, r3, #4
 800a572:	613a      	str	r2, [r7, #16]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <clmt_clust+0x3a>
 800a57e:	2300      	movs	r3, #0
 800a580:	e010      	b.n	800a5a4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	429a      	cmp	r2, r3
 800a588:	d307      	bcc.n	800a59a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a58a:	697a      	ldr	r2, [r7, #20]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	1ad3      	subs	r3, r2, r3
 800a590:	617b      	str	r3, [r7, #20]
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	3304      	adds	r3, #4
 800a596:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a598:	e7e9      	b.n	800a56e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a59a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	4413      	add	r3, r2
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	371c      	adds	r7, #28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5c6:	d204      	bcs.n	800a5d2 <dir_sdi+0x22>
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	f003 031f 	and.w	r3, r3, #31
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e063      	b.n	800a69e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <dir_sdi+0x46>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d902      	bls.n	800a5f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10c      	bne.n	800a616 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	095b      	lsrs	r3, r3, #5
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	8912      	ldrh	r2, [r2, #8]
 800a604:	4293      	cmp	r3, r2
 800a606:	d301      	bcc.n	800a60c <dir_sdi+0x5c>
 800a608:	2302      	movs	r3, #2
 800a60a:	e048      	b.n	800a69e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	61da      	str	r2, [r3, #28]
 800a614:	e029      	b.n	800a66a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	895b      	ldrh	r3, [r3, #10]
 800a61a:	025b      	lsls	r3, r3, #9
 800a61c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a61e:	e019      	b.n	800a654 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6979      	ldr	r1, [r7, #20]
 800a624:	4618      	mov	r0, r3
 800a626:	f7ff fcfe 	bl	800a026 <get_fat>
 800a62a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a632:	d101      	bne.n	800a638 <dir_sdi+0x88>
 800a634:	2301      	movs	r3, #1
 800a636:	e032      	b.n	800a69e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d904      	bls.n	800a648 <dir_sdi+0x98>
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	429a      	cmp	r2, r3
 800a646:	d301      	bcc.n	800a64c <dir_sdi+0x9c>
 800a648:	2302      	movs	r3, #2
 800a64a:	e028      	b.n	800a69e <dir_sdi+0xee>
			ofs -= csz;
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	1ad3      	subs	r3, r2, r3
 800a652:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	429a      	cmp	r2, r3
 800a65a:	d2e1      	bcs.n	800a620 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a65c:	6979      	ldr	r1, [r7, #20]
 800a65e:	6938      	ldr	r0, [r7, #16]
 800a660:	f7ff fcc2 	bl	8009fe8 <clust2sect>
 800a664:	4602      	mov	r2, r0
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <dir_sdi+0xcc>
 800a678:	2302      	movs	r3, #2
 800a67a:	e010      	b.n	800a69e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	69da      	ldr	r2, [r3, #28]
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	0a5b      	lsrs	r3, r3, #9
 800a684:	441a      	add	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	441a      	add	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b086      	sub	sp, #24
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	3320      	adds	r3, #32
 800a6bc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <dir_next+0x28>
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6cc:	d301      	bcc.n	800a6d2 <dir_next+0x2c>
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	e0aa      	b.n	800a828 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 8098 	bne.w	800a80e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	1c5a      	adds	r2, r3, #1
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10b      	bne.n	800a708 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	8912      	ldrh	r2, [r2, #8]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f0c0 8088 	bcc.w	800a80e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	61da      	str	r2, [r3, #28]
 800a704:	2304      	movs	r3, #4
 800a706:	e08f      	b.n	800a828 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	0a5b      	lsrs	r3, r3, #9
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	8952      	ldrh	r2, [r2, #10]
 800a710:	3a01      	subs	r2, #1
 800a712:	4013      	ands	r3, r2
 800a714:	2b00      	cmp	r3, #0
 800a716:	d17a      	bne.n	800a80e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7ff fc80 	bl	800a026 <get_fat>
 800a726:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d801      	bhi.n	800a732 <dir_next+0x8c>
 800a72e:	2302      	movs	r3, #2
 800a730:	e07a      	b.n	800a828 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a738:	d101      	bne.n	800a73e <dir_next+0x98>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e074      	b.n	800a828 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	697a      	ldr	r2, [r7, #20]
 800a744:	429a      	cmp	r2, r3
 800a746:	d358      	bcc.n	800a7fa <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	61da      	str	r2, [r3, #28]
 800a754:	2304      	movs	r3, #4
 800a756:	e067      	b.n	800a828 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	4619      	mov	r1, r3
 800a760:	4610      	mov	r0, r2
 800a762:	f7ff fe59 	bl	800a418 <create_chain>
 800a766:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <dir_next+0xcc>
 800a76e:	2307      	movs	r3, #7
 800a770:	e05a      	b.n	800a828 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d101      	bne.n	800a77c <dir_next+0xd6>
 800a778:	2302      	movs	r3, #2
 800a77a:	e055      	b.n	800a828 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a782:	d101      	bne.n	800a788 <dir_next+0xe2>
 800a784:	2301      	movs	r3, #1
 800a786:	e04f      	b.n	800a828 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f7ff fb4d 	bl	8009e28 <sync_window>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <dir_next+0xf2>
 800a794:	2301      	movs	r3, #1
 800a796:	e047      	b.n	800a828 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3330      	adds	r3, #48	; 0x30
 800a79c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff f977 	bl	8009a96 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	613b      	str	r3, [r7, #16]
 800a7ac:	6979      	ldr	r1, [r7, #20]
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7ff fc1a 	bl	8009fe8 <clust2sect>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7ba:	e012      	b.n	800a7e2 <dir_next+0x13c>
						fs->wflag = 1;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff fb30 	bl	8009e28 <sync_window>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <dir_next+0x12c>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e02a      	b.n	800a828 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	895b      	ldrh	r3, [r3, #10]
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d3e6      	bcc.n	800a7bc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	1ad2      	subs	r2, r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a800:	6979      	ldr	r1, [r7, #20]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f7ff fbf0 	bl	8009fe8 <clust2sect>
 800a808:	4602      	mov	r2, r0
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a820:	441a      	add	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a840:	2100      	movs	r1, #0
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff feb4 	bl	800a5b0 <dir_sdi>
 800a848:	4603      	mov	r3, r0
 800a84a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a84c:	7dfb      	ldrb	r3, [r7, #23]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d12b      	bne.n	800a8aa <dir_alloc+0x7a>
		n = 0;
 800a852:	2300      	movs	r3, #0
 800a854:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	4619      	mov	r1, r3
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f7ff fb27 	bl	8009eb0 <move_window>
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a866:	7dfb      	ldrb	r3, [r7, #23]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d11d      	bne.n	800a8a8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2be5      	cmp	r3, #229	; 0xe5
 800a874:	d004      	beq.n	800a880 <dir_alloc+0x50>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d107      	bne.n	800a890 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	3301      	adds	r3, #1
 800a884:	613b      	str	r3, [r7, #16]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d102      	bne.n	800a894 <dir_alloc+0x64>
 800a88e:	e00c      	b.n	800a8aa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a890:	2300      	movs	r3, #0
 800a892:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a894:	2101      	movs	r1, #1
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ff05 	bl	800a6a6 <dir_next>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a8a0:	7dfb      	ldrb	r3, [r7, #23]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d0d7      	beq.n	800a856 <dir_alloc+0x26>
 800a8a6:	e000      	b.n	800a8aa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a8a8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	d101      	bne.n	800a8b4 <dir_alloc+0x84>
 800a8b0:	2307      	movs	r3, #7
 800a8b2:	75fb      	strb	r3, [r7, #23]
	return res;
 800a8b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	331a      	adds	r3, #26
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff f83f 	bl	8009950 <ld_word>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d109      	bne.n	800a8f2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	3314      	adds	r3, #20
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff f834 	bl	8009950 <ld_word>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	041b      	lsls	r3, r3, #16
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3710      	adds	r7, #16
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	331a      	adds	r3, #26
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	b292      	uxth	r2, r2
 800a910:	4611      	mov	r1, r2
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff f857 	bl	80099c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d109      	bne.n	800a934 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f103 0214 	add.w	r2, r3, #20
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	0c1b      	lsrs	r3, r3, #16
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f7ff f849 	bl	80099c6 <st_word>
	}
}
 800a934:	bf00      	nop
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a94a:	2100      	movs	r1, #0
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff fe2f 	bl	800a5b0 <dir_sdi>
 800a952:	4603      	mov	r3, r0
 800a954:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <dir_find+0x24>
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	e03e      	b.n	800a9de <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	4619      	mov	r1, r3
 800a966:	6938      	ldr	r0, [r7, #16]
 800a968:	f7ff faa2 	bl	8009eb0 <move_window>
 800a96c:	4603      	mov	r3, r0
 800a96e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a970:	7dfb      	ldrb	r3, [r7, #23]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d12f      	bne.n	800a9d6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d102      	bne.n	800a98a <dir_find+0x4e>
 800a984:	2304      	movs	r3, #4
 800a986:	75fb      	strb	r3, [r7, #23]
 800a988:	e028      	b.n	800a9dc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	330b      	adds	r3, #11
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a996:	b2da      	uxtb	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a1b      	ldr	r3, [r3, #32]
 800a9a0:	330b      	adds	r3, #11
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	f003 0308 	and.w	r3, r3, #8
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10a      	bne.n	800a9c2 <dir_find+0x86>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a18      	ldr	r0, [r3, #32]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3324      	adds	r3, #36	; 0x24
 800a9b4:	220b      	movs	r2, #11
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	f7ff f888 	bl	8009acc <mem_cmp>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00b      	beq.n	800a9da <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f7ff fe6e 	bl	800a6a6 <dir_next>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0c5      	beq.n	800a960 <dir_find+0x24>
 800a9d4:	e002      	b.n	800a9dc <dir_find+0xa0>
		if (res != FR_OK) break;
 800a9d6:	bf00      	nop
 800a9d8:	e000      	b.n	800a9dc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a9da:	bf00      	nop

	return res;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff ff1a 	bl	800a830 <dir_alloc>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d11c      	bne.n	800aa40 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	f7ff fa4f 	bl	8009eb0 <move_window>
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d111      	bne.n	800aa40 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	2220      	movs	r2, #32
 800aa22:	2100      	movs	r1, #0
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7ff f836 	bl	8009a96 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a18      	ldr	r0, [r3, #32]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3324      	adds	r3, #36	; 0x24
 800aa32:	220b      	movs	r2, #11
 800aa34:	4619      	mov	r1, r3
 800aa36:	f7ff f80d 	bl	8009a54 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	60fb      	str	r3, [r7, #12]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	3324      	adds	r3, #36	; 0x24
 800aa60:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aa62:	220b      	movs	r2, #11
 800aa64:	2120      	movs	r1, #32
 800aa66:	68b8      	ldr	r0, [r7, #8]
 800aa68:	f7ff f815 	bl	8009a96 <mem_set>
	si = i = 0; ni = 8;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	613b      	str	r3, [r7, #16]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	61fb      	str	r3, [r7, #28]
 800aa74:	2308      	movs	r3, #8
 800aa76:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	61fa      	str	r2, [r7, #28]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4413      	add	r3, r2
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aa86:	7efb      	ldrb	r3, [r7, #27]
 800aa88:	2b20      	cmp	r3, #32
 800aa8a:	d94e      	bls.n	800ab2a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aa8c:	7efb      	ldrb	r3, [r7, #27]
 800aa8e:	2b2f      	cmp	r3, #47	; 0x2f
 800aa90:	d006      	beq.n	800aaa0 <create_name+0x54>
 800aa92:	7efb      	ldrb	r3, [r7, #27]
 800aa94:	2b5c      	cmp	r3, #92	; 0x5c
 800aa96:	d110      	bne.n	800aaba <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aa98:	e002      	b.n	800aaa0 <create_name+0x54>
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	61fb      	str	r3, [r7, #28]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b2f      	cmp	r3, #47	; 0x2f
 800aaaa:	d0f6      	beq.n	800aa9a <create_name+0x4e>
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	4413      	add	r3, r2
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	2b5c      	cmp	r3, #92	; 0x5c
 800aab6:	d0f0      	beq.n	800aa9a <create_name+0x4e>
			break;
 800aab8:	e038      	b.n	800ab2c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aaba:	7efb      	ldrb	r3, [r7, #27]
 800aabc:	2b2e      	cmp	r3, #46	; 0x2e
 800aabe:	d003      	beq.n	800aac8 <create_name+0x7c>
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d30c      	bcc.n	800aae2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2b0b      	cmp	r3, #11
 800aacc:	d002      	beq.n	800aad4 <create_name+0x88>
 800aace:	7efb      	ldrb	r3, [r7, #27]
 800aad0:	2b2e      	cmp	r3, #46	; 0x2e
 800aad2:	d001      	beq.n	800aad8 <create_name+0x8c>
 800aad4:	2306      	movs	r3, #6
 800aad6:	e044      	b.n	800ab62 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800aad8:	2308      	movs	r3, #8
 800aada:	613b      	str	r3, [r7, #16]
 800aadc:	230b      	movs	r3, #11
 800aade:	617b      	str	r3, [r7, #20]
			continue;
 800aae0:	e022      	b.n	800ab28 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800aae2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da04      	bge.n	800aaf4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800aaea:	7efb      	ldrb	r3, [r7, #27]
 800aaec:	3b80      	subs	r3, #128	; 0x80
 800aaee:	4a1f      	ldr	r2, [pc, #124]	; (800ab6c <create_name+0x120>)
 800aaf0:	5cd3      	ldrb	r3, [r2, r3]
 800aaf2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aaf4:	7efb      	ldrb	r3, [r7, #27]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	481d      	ldr	r0, [pc, #116]	; (800ab70 <create_name+0x124>)
 800aafa:	f7ff f80e 	bl	8009b1a <chk_chr>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <create_name+0xbc>
 800ab04:	2306      	movs	r3, #6
 800ab06:	e02c      	b.n	800ab62 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ab08:	7efb      	ldrb	r3, [r7, #27]
 800ab0a:	2b60      	cmp	r3, #96	; 0x60
 800ab0c:	d905      	bls.n	800ab1a <create_name+0xce>
 800ab0e:	7efb      	ldrb	r3, [r7, #27]
 800ab10:	2b7a      	cmp	r3, #122	; 0x7a
 800ab12:	d802      	bhi.n	800ab1a <create_name+0xce>
 800ab14:	7efb      	ldrb	r3, [r7, #27]
 800ab16:	3b20      	subs	r3, #32
 800ab18:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	613a      	str	r2, [r7, #16]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	4413      	add	r3, r2
 800ab24:	7efa      	ldrb	r2, [r7, #27]
 800ab26:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ab28:	e7a6      	b.n	800aa78 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ab2a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	441a      	add	r2, r3
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <create_name+0xf4>
 800ab3c:	2306      	movs	r3, #6
 800ab3e:	e010      	b.n	800ab62 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2be5      	cmp	r3, #229	; 0xe5
 800ab46:	d102      	bne.n	800ab4e <create_name+0x102>
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	2205      	movs	r2, #5
 800ab4c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ab4e:	7efb      	ldrb	r3, [r7, #27]
 800ab50:	2b20      	cmp	r3, #32
 800ab52:	d801      	bhi.n	800ab58 <create_name+0x10c>
 800ab54:	2204      	movs	r2, #4
 800ab56:	e000      	b.n	800ab5a <create_name+0x10e>
 800ab58:	2200      	movs	r2, #0
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	330b      	adds	r3, #11
 800ab5e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ab60:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3720      	adds	r7, #32
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	0800cdfc 	.word	0x0800cdfc
 800ab70:	0800cd84 	.word	0x0800cd84

0800ab74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ab88:	e002      	b.n	800ab90 <follow_path+0x1c>
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	603b      	str	r3, [r7, #0]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	2b2f      	cmp	r3, #47	; 0x2f
 800ab96:	d0f8      	beq.n	800ab8a <follow_path+0x16>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b5c      	cmp	r3, #92	; 0x5c
 800ab9e:	d0f4      	beq.n	800ab8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	2200      	movs	r2, #0
 800aba4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b1f      	cmp	r3, #31
 800abac:	d80a      	bhi.n	800abc4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2280      	movs	r2, #128	; 0x80
 800abb2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800abb6:	2100      	movs	r1, #0
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fcf9 	bl	800a5b0 <dir_sdi>
 800abbe:	4603      	mov	r3, r0
 800abc0:	75fb      	strb	r3, [r7, #23]
 800abc2:	e043      	b.n	800ac4c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800abc4:	463b      	mov	r3, r7
 800abc6:	4619      	mov	r1, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff ff3f 	bl	800aa4c <create_name>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d134      	bne.n	800ac42 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff feaf 	bl	800a93c <dir_find>
 800abde:	4603      	mov	r3, r0
 800abe0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800abe8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800abea:	7dfb      	ldrb	r3, [r7, #23]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d00a      	beq.n	800ac06 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
 800abf2:	2b04      	cmp	r3, #4
 800abf4:	d127      	bne.n	800ac46 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800abf6:	7afb      	ldrb	r3, [r7, #11]
 800abf8:	f003 0304 	and.w	r3, r3, #4
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d122      	bne.n	800ac46 <follow_path+0xd2>
 800ac00:	2305      	movs	r3, #5
 800ac02:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ac04:	e01f      	b.n	800ac46 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac06:	7afb      	ldrb	r3, [r7, #11]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d11c      	bne.n	800ac4a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	799b      	ldrb	r3, [r3, #6]
 800ac14:	f003 0310 	and.w	r3, r3, #16
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ac1c:	2305      	movs	r3, #5
 800ac1e:	75fb      	strb	r3, [r7, #23]
 800ac20:	e014      	b.n	800ac4c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	695b      	ldr	r3, [r3, #20]
 800ac2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac30:	4413      	add	r3, r2
 800ac32:	4619      	mov	r1, r3
 800ac34:	68f8      	ldr	r0, [r7, #12]
 800ac36:	f7ff fe42 	bl	800a8be <ld_clust>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac40:	e7c0      	b.n	800abc4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ac42:	bf00      	nop
 800ac44:	e002      	b.n	800ac4c <follow_path+0xd8>
				break;
 800ac46:	bf00      	nop
 800ac48:	e000      	b.n	800ac4c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac4a:	bf00      	nop
			}
		}
	}

	return res;
 800ac4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b087      	sub	sp, #28
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac62:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d031      	beq.n	800acd0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	617b      	str	r3, [r7, #20]
 800ac72:	e002      	b.n	800ac7a <get_ldnumber+0x24>
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3301      	adds	r3, #1
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b20      	cmp	r3, #32
 800ac80:	d903      	bls.n	800ac8a <get_ldnumber+0x34>
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	2b3a      	cmp	r3, #58	; 0x3a
 800ac88:	d1f4      	bne.n	800ac74 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b3a      	cmp	r3, #58	; 0x3a
 800ac90:	d11c      	bne.n	800accc <get_ldnumber+0x76>
			tp = *path;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	60fa      	str	r2, [r7, #12]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	3b30      	subs	r3, #48	; 0x30
 800aca2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b09      	cmp	r3, #9
 800aca8:	d80e      	bhi.n	800acc8 <get_ldnumber+0x72>
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d10a      	bne.n	800acc8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d107      	bne.n	800acc8 <get_ldnumber+0x72>
					vol = (int)i;
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	3301      	adds	r3, #1
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	e002      	b.n	800acd2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800accc:	2300      	movs	r3, #0
 800acce:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800acd0:	693b      	ldr	r3, [r7, #16]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
	...

0800ace0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	70da      	strb	r2, [r3, #3]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acf6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff f8d8 	bl	8009eb0 <move_window>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <check_fs+0x2a>
 800ad06:	2304      	movs	r3, #4
 800ad08:	e038      	b.n	800ad7c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	3330      	adds	r3, #48	; 0x30
 800ad0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe fe1c 	bl	8009950 <ld_word>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d001      	beq.n	800ad28 <check_fs+0x48>
 800ad24:	2303      	movs	r3, #3
 800ad26:	e029      	b.n	800ad7c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad2e:	2be9      	cmp	r3, #233	; 0xe9
 800ad30:	d009      	beq.n	800ad46 <check_fs+0x66>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad38:	2beb      	cmp	r3, #235	; 0xeb
 800ad3a:	d11e      	bne.n	800ad7a <check_fs+0x9a>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ad42:	2b90      	cmp	r3, #144	; 0x90
 800ad44:	d119      	bne.n	800ad7a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3330      	adds	r3, #48	; 0x30
 800ad4a:	3336      	adds	r3, #54	; 0x36
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fe17 	bl	8009980 <ld_dword>
 800ad52:	4603      	mov	r3, r0
 800ad54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad58:	4a0a      	ldr	r2, [pc, #40]	; (800ad84 <check_fs+0xa4>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d101      	bne.n	800ad62 <check_fs+0x82>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e00c      	b.n	800ad7c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3330      	adds	r3, #48	; 0x30
 800ad66:	3352      	adds	r3, #82	; 0x52
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fe09 	bl	8009980 <ld_dword>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	4a05      	ldr	r2, [pc, #20]	; (800ad88 <check_fs+0xa8>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d101      	bne.n	800ad7a <check_fs+0x9a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	e000      	b.n	800ad7c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ad7a:	2302      	movs	r3, #2
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	00544146 	.word	0x00544146
 800ad88:	33544146 	.word	0x33544146

0800ad8c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b096      	sub	sp, #88	; 0x58
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7ff ff58 	bl	800ac56 <get_ldnumber>
 800ada6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ada8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da01      	bge.n	800adb2 <find_volume+0x26>
 800adae:	230b      	movs	r3, #11
 800adb0:	e22d      	b.n	800b20e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800adb2:	4aa1      	ldr	r2, [pc, #644]	; (800b038 <find_volume+0x2ac>)
 800adb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adba:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <find_volume+0x3a>
 800adc2:	230c      	movs	r3, #12
 800adc4:	e223      	b.n	800b20e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01a      	beq.n	800ae12 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	785b      	ldrb	r3, [r3, #1]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7fe fd17 	bl	8009814 <disk_status>
 800ade6:	4603      	mov	r3, r0
 800ade8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800adec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adf0:	f003 0301 	and.w	r3, r3, #1
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10c      	bne.n	800ae12 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d007      	beq.n	800ae0e <find_volume+0x82>
 800adfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae02:	f003 0304 	and.w	r3, r3, #4
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ae0a:	230a      	movs	r3, #10
 800ae0c:	e1ff      	b.n	800b20e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e1fd      	b.n	800b20e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae14:	2200      	movs	r2, #0
 800ae16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fe fd0f 	bl	8009848 <disk_initialize>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e1e6      	b.n	800b20e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <find_volume+0xca>
 800ae46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ae52:	230a      	movs	r3, #10
 800ae54:	e1db      	b.n	800b20e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae5e:	f7ff ff3f 	bl	800ace0 <check_fs>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ae68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d149      	bne.n	800af04 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae70:	2300      	movs	r3, #0
 800ae72:	643b      	str	r3, [r7, #64]	; 0x40
 800ae74:	e01e      	b.n	800aeb4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ae76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae7e:	011b      	lsls	r3, r3, #4
 800ae80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ae84:	4413      	add	r3, r2
 800ae86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ae88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d006      	beq.n	800aea0 <find_volume+0x114>
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	3308      	adds	r3, #8
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fe fd72 	bl	8009980 <ld_dword>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	e000      	b.n	800aea2 <find_volume+0x116>
 800aea0:	2200      	movs	r2, #0
 800aea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	3358      	adds	r3, #88	; 0x58
 800aea8:	443b      	add	r3, r7
 800aeaa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800aeae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	643b      	str	r3, [r7, #64]	; 0x40
 800aeb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d9dd      	bls.n	800ae76 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800aeba:	2300      	movs	r3, #0
 800aebc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800aebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <find_volume+0x13e>
 800aec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aec6:	3b01      	subs	r3, #1
 800aec8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800aeca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	3358      	adds	r3, #88	; 0x58
 800aed0:	443b      	add	r3, r7
 800aed2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800aed6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800aed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <find_volume+0x15e>
 800aede:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aee0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aee2:	f7ff fefd 	bl	800ace0 <check_fs>
 800aee6:	4603      	mov	r3, r0
 800aee8:	e000      	b.n	800aeec <find_volume+0x160>
 800aeea:	2303      	movs	r3, #3
 800aeec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800aef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d905      	bls.n	800af04 <find_volume+0x178>
 800aef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefa:	3301      	adds	r3, #1
 800aefc:	643b      	str	r3, [r7, #64]	; 0x40
 800aefe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af00:	2b03      	cmp	r3, #3
 800af02:	d9e2      	bls.n	800aeca <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d101      	bne.n	800af10 <find_volume+0x184>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e17e      	b.n	800b20e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af14:	2b01      	cmp	r3, #1
 800af16:	d901      	bls.n	800af1c <find_volume+0x190>
 800af18:	230d      	movs	r3, #13
 800af1a:	e178      	b.n	800b20e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	3330      	adds	r3, #48	; 0x30
 800af20:	330b      	adds	r3, #11
 800af22:	4618      	mov	r0, r3
 800af24:	f7fe fd14 	bl	8009950 <ld_word>
 800af28:	4603      	mov	r3, r0
 800af2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af2e:	d001      	beq.n	800af34 <find_volume+0x1a8>
 800af30:	230d      	movs	r3, #13
 800af32:	e16c      	b.n	800b20e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	3330      	adds	r3, #48	; 0x30
 800af38:	3316      	adds	r3, #22
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fd08 	bl	8009950 <ld_word>
 800af40:	4603      	mov	r3, r0
 800af42:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800af44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af46:	2b00      	cmp	r3, #0
 800af48:	d106      	bne.n	800af58 <find_volume+0x1cc>
 800af4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4c:	3330      	adds	r3, #48	; 0x30
 800af4e:	3324      	adds	r3, #36	; 0x24
 800af50:	4618      	mov	r0, r3
 800af52:	f7fe fd15 	bl	8009980 <ld_dword>
 800af56:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af5c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800af5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af60:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800af64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af66:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800af68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6a:	789b      	ldrb	r3, [r3, #2]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d005      	beq.n	800af7c <find_volume+0x1f0>
 800af70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af72:	789b      	ldrb	r3, [r3, #2]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d001      	beq.n	800af7c <find_volume+0x1f0>
 800af78:	230d      	movs	r3, #13
 800af7a:	e148      	b.n	800b20e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	789b      	ldrb	r3, [r3, #2]
 800af80:	461a      	mov	r2, r3
 800af82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af84:	fb02 f303 	mul.w	r3, r2, r3
 800af88:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af90:	b29a      	uxth	r2, r3
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	895b      	ldrh	r3, [r3, #10]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d008      	beq.n	800afb0 <find_volume+0x224>
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	895b      	ldrh	r3, [r3, #10]
 800afa2:	461a      	mov	r2, r3
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	895b      	ldrh	r3, [r3, #10]
 800afa8:	3b01      	subs	r3, #1
 800afaa:	4013      	ands	r3, r2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d001      	beq.n	800afb4 <find_volume+0x228>
 800afb0:	230d      	movs	r3, #13
 800afb2:	e12c      	b.n	800b20e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	3330      	adds	r3, #48	; 0x30
 800afb8:	3311      	adds	r3, #17
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fe fcc8 	bl	8009950 <ld_word>
 800afc0:	4603      	mov	r3, r0
 800afc2:	461a      	mov	r2, r3
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800afc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afca:	891b      	ldrh	r3, [r3, #8]
 800afcc:	f003 030f 	and.w	r3, r3, #15
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d001      	beq.n	800afda <find_volume+0x24e>
 800afd6:	230d      	movs	r3, #13
 800afd8:	e119      	b.n	800b20e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	3330      	adds	r3, #48	; 0x30
 800afde:	3313      	adds	r3, #19
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe fcb5 	bl	8009950 <ld_word>
 800afe6:	4603      	mov	r3, r0
 800afe8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800afea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afec:	2b00      	cmp	r3, #0
 800afee:	d106      	bne.n	800affe <find_volume+0x272>
 800aff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff2:	3330      	adds	r3, #48	; 0x30
 800aff4:	3320      	adds	r3, #32
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fcc2 	bl	8009980 <ld_dword>
 800affc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	3330      	adds	r3, #48	; 0x30
 800b002:	330e      	adds	r3, #14
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fca3 	bl	8009950 <ld_word>
 800b00a:	4603      	mov	r3, r0
 800b00c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b00e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <find_volume+0x28c>
 800b014:	230d      	movs	r3, #13
 800b016:	e0fa      	b.n	800b20e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b018:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01c:	4413      	add	r3, r2
 800b01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b020:	8912      	ldrh	r2, [r2, #8]
 800b022:	0912      	lsrs	r2, r2, #4
 800b024:	b292      	uxth	r2, r2
 800b026:	4413      	add	r3, r2
 800b028:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b02a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	429a      	cmp	r2, r3
 800b030:	d204      	bcs.n	800b03c <find_volume+0x2b0>
 800b032:	230d      	movs	r3, #13
 800b034:	e0eb      	b.n	800b20e <find_volume+0x482>
 800b036:	bf00      	nop
 800b038:	20000ee0 	.word	0x20000ee0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b044:	8952      	ldrh	r2, [r2, #10]
 800b046:	fbb3 f3f2 	udiv	r3, r3, r2
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <find_volume+0x2ca>
 800b052:	230d      	movs	r3, #13
 800b054:	e0db      	b.n	800b20e <find_volume+0x482>
		fmt = FS_FAT32;
 800b056:	2303      	movs	r3, #3
 800b058:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b05e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b062:	4293      	cmp	r3, r2
 800b064:	d802      	bhi.n	800b06c <find_volume+0x2e0>
 800b066:	2302      	movs	r3, #2
 800b068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b072:	4293      	cmp	r3, r2
 800b074:	d802      	bhi.n	800b07c <find_volume+0x2f0>
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	1c9a      	adds	r2, r3, #2
 800b080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b082:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b088:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b08a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b08e:	441a      	add	r2, r3
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	441a      	add	r2, r3
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b09e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d11e      	bne.n	800b0e4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a8:	3330      	adds	r3, #48	; 0x30
 800b0aa:	332a      	adds	r3, #42	; 0x2a
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe fc4f 	bl	8009950 <ld_word>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <find_volume+0x330>
 800b0b8:	230d      	movs	r3, #13
 800b0ba:	e0a8      	b.n	800b20e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	891b      	ldrh	r3, [r3, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d001      	beq.n	800b0c8 <find_volume+0x33c>
 800b0c4:	230d      	movs	r3, #13
 800b0c6:	e0a2      	b.n	800b20e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ca:	3330      	adds	r3, #48	; 0x30
 800b0cc:	332c      	adds	r3, #44	; 0x2c
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fe fc56 	bl	8009980 <ld_dword>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	647b      	str	r3, [r7, #68]	; 0x44
 800b0e2:	e01f      	b.n	800b124 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	891b      	ldrh	r3, [r3, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <find_volume+0x364>
 800b0ec:	230d      	movs	r3, #13
 800b0ee:	e08e      	b.n	800b20e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	6a1a      	ldr	r2, [r3, #32]
 800b0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0f6:	441a      	add	r2, r3
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b0fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b100:	2b02      	cmp	r3, #2
 800b102:	d103      	bne.n	800b10c <find_volume+0x380>
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	e00a      	b.n	800b122 <find_volume+0x396>
 800b10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10e:	695a      	ldr	r2, [r3, #20]
 800b110:	4613      	mov	r3, r2
 800b112:	005b      	lsls	r3, r3, #1
 800b114:	4413      	add	r3, r2
 800b116:	085a      	lsrs	r2, r3, #1
 800b118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b122:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	699a      	ldr	r2, [r3, #24]
 800b128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b12a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b12e:	0a5b      	lsrs	r3, r3, #9
 800b130:	429a      	cmp	r2, r3
 800b132:	d201      	bcs.n	800b138 <find_volume+0x3ac>
 800b134:	230d      	movs	r3, #13
 800b136:	e06a      	b.n	800b20e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b13e:	611a      	str	r2, [r3, #16]
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	2280      	movs	r2, #128	; 0x80
 800b14c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b14e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b152:	2b03      	cmp	r3, #3
 800b154:	d149      	bne.n	800b1ea <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	3330      	adds	r3, #48	; 0x30
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe fbf7 	bl	8009950 <ld_word>
 800b162:	4603      	mov	r3, r0
 800b164:	2b01      	cmp	r3, #1
 800b166:	d140      	bne.n	800b1ea <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b16a:	3301      	adds	r3, #1
 800b16c:	4619      	mov	r1, r3
 800b16e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b170:	f7fe fe9e 	bl	8009eb0 <move_window>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d137      	bne.n	800b1ea <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17c:	2200      	movs	r2, #0
 800b17e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	3330      	adds	r3, #48	; 0x30
 800b184:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fbe1 	bl	8009950 <ld_word>
 800b18e:	4603      	mov	r3, r0
 800b190:	461a      	mov	r2, r3
 800b192:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b196:	429a      	cmp	r2, r3
 800b198:	d127      	bne.n	800b1ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	3330      	adds	r3, #48	; 0x30
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe fbee 	bl	8009980 <ld_dword>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	4a1c      	ldr	r2, [pc, #112]	; (800b218 <find_volume+0x48c>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d11e      	bne.n	800b1ea <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	3330      	adds	r3, #48	; 0x30
 800b1b0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7fe fbe3 	bl	8009980 <ld_dword>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	4a17      	ldr	r2, [pc, #92]	; (800b21c <find_volume+0x490>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d113      	bne.n	800b1ea <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	3330      	adds	r3, #48	; 0x30
 800b1c6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe fbd8 	bl	8009980 <ld_dword>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	3330      	adds	r3, #48	; 0x30
 800b1da:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe fbce 	bl	8009980 <ld_dword>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b1f0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <find_volume+0x494>)
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	4b09      	ldr	r3, [pc, #36]	; (800b220 <find_volume+0x494>)
 800b1fc:	801a      	strh	r2, [r3, #0]
 800b1fe:	4b08      	ldr	r3, [pc, #32]	; (800b220 <find_volume+0x494>)
 800b200:	881a      	ldrh	r2, [r3, #0]
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b206:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b208:	f7fe fdea 	bl	8009de0 <clear_lock>
#endif
	return FR_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3758      	adds	r7, #88	; 0x58
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	41615252 	.word	0x41615252
 800b21c:	61417272 	.word	0x61417272
 800b220:	20000ee4 	.word	0x20000ee4

0800b224 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b22e:	2309      	movs	r3, #9
 800b230:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01c      	beq.n	800b272 <validate+0x4e>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d018      	beq.n	800b272 <validate+0x4e>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d013      	beq.n	800b272 <validate+0x4e>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	889a      	ldrh	r2, [r3, #4]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	88db      	ldrh	r3, [r3, #6]
 800b254:	429a      	cmp	r2, r3
 800b256:	d10c      	bne.n	800b272 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	785b      	ldrb	r3, [r3, #1]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe fad8 	bl	8009814 <disk_status>
 800b264:	4603      	mov	r3, r0
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <validate+0x4e>
			res = FR_OK;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b272:	7bfb      	ldrb	r3, [r7, #15]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d102      	bne.n	800b27e <validate+0x5a>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	e000      	b.n	800b280 <validate+0x5c>
 800b27e:	2300      	movs	r3, #0
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	6013      	str	r3, [r2, #0]
	return res;
 800b284:	7bfb      	ldrb	r3, [r7, #15]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
	...

0800b290 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b2a2:	f107 0310 	add.w	r3, r7, #16
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff fcd5 	bl	800ac56 <get_ldnumber>
 800b2ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	da01      	bge.n	800b2b8 <f_mount+0x28>
 800b2b4:	230b      	movs	r3, #11
 800b2b6:	e02b      	b.n	800b310 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b2b8:	4a17      	ldr	r2, [pc, #92]	; (800b318 <f_mount+0x88>)
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d005      	beq.n	800b2d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b2c8:	69b8      	ldr	r0, [r7, #24]
 800b2ca:	f7fe fd89 	bl	8009de0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b2ce:	69bb      	ldr	r3, [r7, #24]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	490d      	ldr	r1, [pc, #52]	; (800b318 <f_mount+0x88>)
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <f_mount+0x66>
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d001      	beq.n	800b2fa <f_mount+0x6a>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e00a      	b.n	800b310 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b2fa:	f107 010c 	add.w	r1, r7, #12
 800b2fe:	f107 0308 	add.w	r3, r7, #8
 800b302:	2200      	movs	r2, #0
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff fd41 	bl	800ad8c <find_volume>
 800b30a:	4603      	mov	r3, r0
 800b30c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b30e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3720      	adds	r7, #32
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000ee0 	.word	0x20000ee0

0800b31c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b098      	sub	sp, #96	; 0x60
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	4613      	mov	r3, r2
 800b328:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d101      	bne.n	800b334 <f_open+0x18>
 800b330:	2309      	movs	r3, #9
 800b332:	e1ad      	b.n	800b690 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b33a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b33c:	79fa      	ldrb	r2, [r7, #7]
 800b33e:	f107 0110 	add.w	r1, r7, #16
 800b342:	f107 0308 	add.w	r3, r7, #8
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fd20 	bl	800ad8c <find_volume>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b356:	2b00      	cmp	r3, #0
 800b358:	f040 8191 	bne.w	800b67e <f_open+0x362>
		dj.obj.fs = fs;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	f107 0314 	add.w	r3, r7, #20
 800b366:	4611      	mov	r1, r2
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff fc03 	bl	800ab74 <follow_path>
 800b36e:	4603      	mov	r3, r0
 800b370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b374:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d11a      	bne.n	800b3b2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b37c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b380:	b25b      	sxtb	r3, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	da03      	bge.n	800b38e <f_open+0x72>
				res = FR_INVALID_NAME;
 800b386:	2306      	movs	r3, #6
 800b388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b38c:	e011      	b.n	800b3b2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b38e:	79fb      	ldrb	r3, [r7, #7]
 800b390:	f023 0301 	bic.w	r3, r3, #1
 800b394:	2b00      	cmp	r3, #0
 800b396:	bf14      	ite	ne
 800b398:	2301      	movne	r3, #1
 800b39a:	2300      	moveq	r3, #0
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f107 0314 	add.w	r3, r7, #20
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fbd2 	bl	8009b50 <chk_lock>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b3b2:	79fb      	ldrb	r3, [r7, #7]
 800b3b4:	f003 031c 	and.w	r3, r3, #28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d07f      	beq.n	800b4bc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b3bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d017      	beq.n	800b3f4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b3c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b3c8:	2b04      	cmp	r3, #4
 800b3ca:	d10e      	bne.n	800b3ea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b3cc:	f7fe fc1c 	bl	8009c08 <enq_lock>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d006      	beq.n	800b3e4 <f_open+0xc8>
 800b3d6:	f107 0314 	add.w	r3, r7, #20
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fb03 	bl	800a9e6 <dir_register>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	e000      	b.n	800b3e6 <f_open+0xca>
 800b3e4:	2312      	movs	r3, #18
 800b3e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	f043 0308 	orr.w	r3, r3, #8
 800b3f0:	71fb      	strb	r3, [r7, #7]
 800b3f2:	e010      	b.n	800b416 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b3f4:	7ebb      	ldrb	r3, [r7, #26]
 800b3f6:	f003 0311 	and.w	r3, r3, #17
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <f_open+0xea>
					res = FR_DENIED;
 800b3fe:	2307      	movs	r3, #7
 800b400:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b404:	e007      	b.n	800b416 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <f_open+0xfa>
 800b410:	2308      	movs	r3, #8
 800b412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d168      	bne.n	800b4f0 <f_open+0x1d4>
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	f003 0308 	and.w	r3, r3, #8
 800b424:	2b00      	cmp	r3, #0
 800b426:	d063      	beq.n	800b4f0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b428:	f7fd ffa4 	bl	8009374 <get_fattime>
 800b42c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b430:	330e      	adds	r3, #14
 800b432:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe fae1 	bl	80099fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43c:	3316      	adds	r3, #22
 800b43e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe fadb 	bl	80099fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b448:	330b      	adds	r3, #11
 800b44a:	2220      	movs	r2, #32
 800b44c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b452:	4611      	mov	r1, r2
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff fa32 	bl	800a8be <ld_clust>
 800b45a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b460:	2200      	movs	r2, #0
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff fa4a 	bl	800a8fc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46a:	331c      	adds	r3, #28
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe fac4 	bl	80099fc <st_dword>
					fs->wflag = 1;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2201      	movs	r2, #1
 800b478:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d037      	beq.n	800b4f0 <f_open+0x1d4>
						dw = fs->winsect;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b484:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b486:	f107 0314 	add.w	r3, r7, #20
 800b48a:	2200      	movs	r2, #0
 800b48c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe ff5d 	bl	800a34e <remove_chain>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b49a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d126      	bne.n	800b4f0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe fd02 	bl	8009eb0 <move_window>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4b6:	3a01      	subs	r2, #1
 800b4b8:	60da      	str	r2, [r3, #12]
 800b4ba:	e019      	b.n	800b4f0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b4bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d115      	bne.n	800b4f0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b4c4:	7ebb      	ldrb	r3, [r7, #26]
 800b4c6:	f003 0310 	and.w	r3, r3, #16
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b4ce:	2304      	movs	r3, #4
 800b4d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b4d4:	e00c      	b.n	800b4f0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d007      	beq.n	800b4f0 <f_open+0x1d4>
 800b4e0:	7ebb      	ldrb	r3, [r7, #26]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d002      	beq.n	800b4f0 <f_open+0x1d4>
						res = FR_DENIED;
 800b4ea:	2307      	movs	r3, #7
 800b4ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d128      	bne.n	800b54a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b4f8:	79fb      	ldrb	r3, [r7, #7]
 800b4fa:	f003 0308 	and.w	r3, r3, #8
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d003      	beq.n	800b50a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b508:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	f023 0301 	bic.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf14      	ite	ne
 800b522:	2301      	movne	r3, #1
 800b524:	2300      	moveq	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	461a      	mov	r2, r3
 800b52a:	f107 0314 	add.w	r3, r7, #20
 800b52e:	4611      	mov	r1, r2
 800b530:	4618      	mov	r0, r3
 800b532:	f7fe fb8b 	bl	8009c4c <inc_lock>
 800b536:	4602      	mov	r2, r0
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	691b      	ldr	r3, [r3, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d102      	bne.n	800b54a <f_open+0x22e>
 800b544:	2302      	movs	r3, #2
 800b546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b54a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f040 8095 	bne.w	800b67e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff f9af 	bl	800a8be <ld_clust>
 800b560:	4602      	mov	r2, r0
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b568:	331c      	adds	r3, #28
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe fa08 	bl	8009980 <ld_dword>
 800b570:	4602      	mov	r2, r0
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	88da      	ldrh	r2, [r3, #6]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	79fa      	ldrb	r2, [r7, #7]
 800b58e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	3330      	adds	r3, #48	; 0x30
 800b5a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe fa72 	bl	8009a96 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b5b2:	79fb      	ldrb	r3, [r7, #7]
 800b5b4:	f003 0320 	and.w	r3, r3, #32
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d060      	beq.n	800b67e <f_open+0x362>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d05c      	beq.n	800b67e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	68da      	ldr	r2, [r3, #12]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	895b      	ldrh	r3, [r3, #10]
 800b5d0:	025b      	lsls	r3, r3, #9
 800b5d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	657b      	str	r3, [r7, #84]	; 0x54
 800b5e0:	e016      	b.n	800b610 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe fd1d 	bl	800a026 <get_fat>
 800b5ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b5ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d802      	bhi.n	800b5fa <f_open+0x2de>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b600:	d102      	bne.n	800b608 <f_open+0x2ec>
 800b602:	2301      	movs	r3, #1
 800b604:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b60c:	1ad3      	subs	r3, r2, r3
 800b60e:	657b      	str	r3, [r7, #84]	; 0x54
 800b610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b614:	2b00      	cmp	r3, #0
 800b616:	d103      	bne.n	800b620 <f_open+0x304>
 800b618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d8e0      	bhi.n	800b5e2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b624:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b626:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d127      	bne.n	800b67e <f_open+0x362>
 800b62e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	2b00      	cmp	r3, #0
 800b636:	d022      	beq.n	800b67e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7fe fcd3 	bl	8009fe8 <clust2sect>
 800b642:	6478      	str	r0, [r7, #68]	; 0x44
 800b644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b646:	2b00      	cmp	r3, #0
 800b648:	d103      	bne.n	800b652 <f_open+0x336>
						res = FR_INT_ERR;
 800b64a:	2302      	movs	r3, #2
 800b64c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b650:	e015      	b.n	800b67e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b654:	0a5a      	lsrs	r2, r3, #9
 800b656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b658:	441a      	add	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	7858      	ldrb	r0, [r3, #1]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6a1a      	ldr	r2, [r3, #32]
 800b66c:	2301      	movs	r3, #1
 800b66e:	f7fe f911 	bl	8009894 <disk_read>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <f_open+0x362>
 800b678:	2301      	movs	r3, #1
 800b67a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b67e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b682:	2b00      	cmp	r3, #0
 800b684:	d002      	beq.n	800b68c <f_open+0x370>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b68c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b690:	4618      	mov	r0, r3
 800b692:	3760      	adds	r7, #96	; 0x60
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08c      	sub	sp, #48	; 0x30
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f107 0210 	add.w	r2, r7, #16
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fdb3 	bl	800b224 <validate>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b6c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d107      	bne.n	800b6dc <f_write+0x44>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	7d5b      	ldrb	r3, [r3, #21]
 800b6d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b6d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <f_write+0x4a>
 800b6dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6e0:	e14b      	b.n	800b97a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	7d1b      	ldrb	r3, [r3, #20]
 800b6e6:	f003 0302 	and.w	r3, r3, #2
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d101      	bne.n	800b6f2 <f_write+0x5a>
 800b6ee:	2307      	movs	r3, #7
 800b6f0:	e143      	b.n	800b97a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	699a      	ldr	r2, [r3, #24]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	441a      	add	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	f080 812d 	bcs.w	800b95e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	43db      	mvns	r3, r3
 800b70a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b70c:	e127      	b.n	800b95e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 80e3 	bne.w	800b8e2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	0a5b      	lsrs	r3, r3, #9
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	8952      	ldrh	r2, [r2, #10]
 800b726:	3a01      	subs	r2, #1
 800b728:	4013      	ands	r3, r2
 800b72a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d143      	bne.n	800b7ba <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10c      	bne.n	800b754 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b742:	2b00      	cmp	r3, #0
 800b744:	d11a      	bne.n	800b77c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fe64 	bl	800a418 <create_chain>
 800b750:	62b8      	str	r0, [r7, #40]	; 0x28
 800b752:	e013      	b.n	800b77c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d007      	beq.n	800b76c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	4619      	mov	r1, r3
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f7fe fef0 	bl	800a548 <clmt_clust>
 800b768:	62b8      	str	r0, [r7, #40]	; 0x28
 800b76a:	e007      	b.n	800b77c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	69db      	ldr	r3, [r3, #28]
 800b772:	4619      	mov	r1, r3
 800b774:	4610      	mov	r0, r2
 800b776:	f7fe fe4f 	bl	800a418 <create_chain>
 800b77a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 80f2 	beq.w	800b968 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	2b01      	cmp	r3, #1
 800b788:	d104      	bne.n	800b794 <f_write+0xfc>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2202      	movs	r2, #2
 800b78e:	755a      	strb	r2, [r3, #21]
 800b790:	2302      	movs	r3, #2
 800b792:	e0f2      	b.n	800b97a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b79a:	d104      	bne.n	800b7a6 <f_write+0x10e>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	755a      	strb	r2, [r3, #21]
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	e0e9      	b.n	800b97a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7aa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <f_write+0x122>
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7d1b      	ldrb	r3, [r3, #20]
 800b7be:	b25b      	sxtb	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	da18      	bge.n	800b7f6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	7858      	ldrb	r0, [r3, #1]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6a1a      	ldr	r2, [r3, #32]
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f7fe f87e 	bl	80098d4 <disk_write>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <f_write+0x150>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	755a      	strb	r2, [r3, #21]
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e0c8      	b.n	800b97a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	7d1b      	ldrb	r3, [r3, #20]
 800b7ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b7f6:	693a      	ldr	r2, [r7, #16]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	69db      	ldr	r3, [r3, #28]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4610      	mov	r0, r2
 800b800:	f7fe fbf2 	bl	8009fe8 <clust2sect>
 800b804:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d104      	bne.n	800b816 <f_write+0x17e>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2202      	movs	r2, #2
 800b810:	755a      	strb	r2, [r3, #21]
 800b812:	2302      	movs	r3, #2
 800b814:	e0b1      	b.n	800b97a <f_write+0x2e2>
			sect += csect;
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	4413      	add	r3, r2
 800b81c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	0a5b      	lsrs	r3, r3, #9
 800b822:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d03c      	beq.n	800b8a4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	4413      	add	r3, r2
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	8952      	ldrh	r2, [r2, #10]
 800b834:	4293      	cmp	r3, r2
 800b836:	d905      	bls.n	800b844 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	895b      	ldrh	r3, [r3, #10]
 800b83c:	461a      	mov	r2, r3
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	7858      	ldrb	r0, [r3, #1]
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	69f9      	ldr	r1, [r7, #28]
 800b84e:	f7fe f841 	bl	80098d4 <disk_write>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <f_write+0x1ca>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2201      	movs	r2, #1
 800b85c:	755a      	strb	r2, [r3, #21]
 800b85e:	2301      	movs	r3, #1
 800b860:	e08b      	b.n	800b97a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6a1a      	ldr	r2, [r3, #32]
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	6a3a      	ldr	r2, [r7, #32]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d915      	bls.n	800b89c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6a1a      	ldr	r2, [r3, #32]
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	025b      	lsls	r3, r3, #9
 800b880:	69fa      	ldr	r2, [r7, #28]
 800b882:	4413      	add	r3, r2
 800b884:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b888:	4619      	mov	r1, r3
 800b88a:	f7fe f8e3 	bl	8009a54 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	7d1b      	ldrb	r3, [r3, #20]
 800b892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b896:	b2da      	uxtb	r2, r3
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	025b      	lsls	r3, r3, #9
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b8a2:	e03f      	b.n	800b924 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	697a      	ldr	r2, [r7, #20]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d016      	beq.n	800b8dc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	699a      	ldr	r2, [r3, #24]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d210      	bcs.n	800b8dc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	7858      	ldrb	r0, [r3, #1]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	f7fd ffe4 	bl	8009894 <disk_read>
 800b8cc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d004      	beq.n	800b8dc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	755a      	strb	r2, [r3, #21]
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e04e      	b.n	800b97a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	699b      	ldr	r3, [r3, #24]
 800b8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d901      	bls.n	800b8fc <f_write+0x264>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b90a:	4413      	add	r3, r2
 800b90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b90e:	69f9      	ldr	r1, [r7, #28]
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe f89f 	bl	8009a54 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	7d1b      	ldrb	r3, [r3, #20]
 800b91a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b924:	69fa      	ldr	r2, [r7, #28]
 800b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b928:	4413      	add	r3, r2
 800b92a:	61fb      	str	r3, [r7, #28]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	699a      	ldr	r2, [r3, #24]
 800b930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b932:	441a      	add	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	619a      	str	r2, [r3, #24]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	699b      	ldr	r3, [r3, #24]
 800b940:	429a      	cmp	r2, r3
 800b942:	bf38      	it	cc
 800b944:	461a      	movcc	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	60da      	str	r2, [r3, #12]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b950:	441a      	add	r2, r3
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	f47f aed4 	bne.w	800b70e <f_write+0x76>
 800b966:	e000      	b.n	800b96a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b968:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	7d1b      	ldrb	r3, [r3, #20]
 800b96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b972:	b2da      	uxtb	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b978:	2300      	movs	r3, #0
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3730      	adds	r7, #48	; 0x30
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b086      	sub	sp, #24
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f107 0208 	add.w	r2, r7, #8
 800b990:	4611      	mov	r1, r2
 800b992:	4618      	mov	r0, r3
 800b994:	f7ff fc46 	bl	800b224 <validate>
 800b998:	4603      	mov	r3, r0
 800b99a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b99c:	7dfb      	ldrb	r3, [r7, #23]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d168      	bne.n	800ba74 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	7d1b      	ldrb	r3, [r3, #20]
 800b9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d062      	beq.n	800ba74 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	7d1b      	ldrb	r3, [r3, #20]
 800b9b2:	b25b      	sxtb	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	da15      	bge.n	800b9e4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	7858      	ldrb	r0, [r3, #1]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a1a      	ldr	r2, [r3, #32]
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	f7fd ff84 	bl	80098d4 <disk_write>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <f_sync+0x54>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e04f      	b.n	800ba76 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	7d1b      	ldrb	r3, [r3, #20]
 800b9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b9e4:	f7fd fcc6 	bl	8009374 <get_fattime>
 800b9e8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	f7fe fa5c 	bl	8009eb0 <move_window>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b9fc:	7dfb      	ldrb	r3, [r7, #23]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d138      	bne.n	800ba74 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba06:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	330b      	adds	r3, #11
 800ba0c:	781a      	ldrb	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	330b      	adds	r3, #11
 800ba12:	f042 0220 	orr.w	r2, r2, #32
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6818      	ldr	r0, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	461a      	mov	r2, r3
 800ba24:	68f9      	ldr	r1, [r7, #12]
 800ba26:	f7fe ff69 	bl	800a8fc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f103 021c 	add.w	r2, r3, #28
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	4619      	mov	r1, r3
 800ba36:	4610      	mov	r0, r2
 800ba38:	f7fd ffe0 	bl	80099fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3316      	adds	r3, #22
 800ba40:	6939      	ldr	r1, [r7, #16]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fd ffda 	bl	80099fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3312      	adds	r3, #18
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fd ffb9 	bl	80099c6 <st_word>
					fs->wflag = 1;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	2201      	movs	r2, #1
 800ba58:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fa55 	bl	8009f0c <sync_fs>
 800ba62:	4603      	mov	r3, r0
 800ba64:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	7d1b      	ldrb	r3, [r3, #20]
 800ba6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b084      	sub	sp, #16
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff ff7b 	bl	800b982 <f_sync>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d118      	bne.n	800bac8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f107 0208 	add.w	r2, r7, #8
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff fbc0 	bl	800b224 <validate>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10c      	bne.n	800bac8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fe f958 	bl	8009d68 <dec_lock>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d102      	bne.n	800bac8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
	...

0800bad4 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800bad4:	b590      	push	{r4, r7, lr}
 800bad6:	b09d      	sub	sp, #116	; 0x74
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	607a      	str	r2, [r7, #4]
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	460b      	mov	r3, r1
 800bae2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800bae4:	2301      	movs	r3, #1
 800bae6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800bae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baec:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800baee:	f107 030c 	add.w	r3, r7, #12
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff f8af 	bl	800ac56 <get_ldnumber>
 800baf8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	da02      	bge.n	800bb06 <f_mkfs+0x32>
 800bb00:	230b      	movs	r3, #11
 800bb02:	f000 bc0d 	b.w	800c320 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800bb06:	4a94      	ldr	r2, [pc, #592]	; (800bd58 <f_mkfs+0x284>)
 800bb08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d005      	beq.n	800bb1e <f_mkfs+0x4a>
 800bb12:	4a91      	ldr	r2, [pc, #580]	; (800bd58 <f_mkfs+0x284>)
 800bb14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800bb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800bb2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fd fe8a 	bl	8009848 <disk_initialize>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800bb3a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <f_mkfs+0x76>
 800bb46:	2303      	movs	r3, #3
 800bb48:	e3ea      	b.n	800c320 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800bb4a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d001      	beq.n	800bb5a <f_mkfs+0x86>
 800bb56:	230a      	movs	r3, #10
 800bb58:	e3e2      	b.n	800c320 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800bb5a:	f107 0214 	add.w	r2, r7, #20
 800bb5e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb62:	2103      	movs	r1, #3
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fd fed5 	bl	8009914 <disk_ioctl>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d10c      	bne.n	800bb8a <f_mkfs+0xb6>
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d009      	beq.n	800bb8a <f_mkfs+0xb6>
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb7c:	d805      	bhi.n	800bb8a <f_mkfs+0xb6>
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	1e5a      	subs	r2, r3, #1
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	4013      	ands	r3, r2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <f_mkfs+0xba>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800bb8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb92:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d003      	beq.n	800bba2 <f_mkfs+0xce>
 800bb9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d309      	bcc.n	800bbb6 <f_mkfs+0xe2>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bba8:	d805      	bhi.n	800bbb6 <f_mkfs+0xe2>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	1e5a      	subs	r2, r3, #1
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d001      	beq.n	800bbba <f_mkfs+0xe6>
 800bbb6:	2313      	movs	r3, #19
 800bbb8:	e3b2      	b.n	800c320 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800bbba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc2:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800bbc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bbca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bbce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800bbd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	fb02 f303 	mul.w	r3, r2, r3
 800bbdc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800bbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <f_mkfs+0x114>
 800bbe4:	230e      	movs	r3, #14
 800bbe6:	e39b      	b.n	800c320 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800bbe8:	f107 0210 	add.w	r2, r7, #16
 800bbec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fd fe8e 	bl	8009914 <disk_ioctl>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <f_mkfs+0x12e>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e38e      	b.n	800c320 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800bc02:	7afb      	ldrb	r3, [r7, #11]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <f_mkfs+0x13c>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	e000      	b.n	800bc12 <f_mkfs+0x13e>
 800bc10:	233f      	movs	r3, #63	; 0x3f
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d901      	bls.n	800bc20 <f_mkfs+0x14c>
 800bc1c:	230e      	movs	r3, #14
 800bc1e:	e37f      	b.n	800c320 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800bc20:	693a      	ldr	r2, [r7, #16]
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	2b7f      	cmp	r3, #127	; 0x7f
 800bc2c:	d801      	bhi.n	800bc32 <f_mkfs+0x15e>
 800bc2e:	230e      	movs	r3, #14
 800bc30:	e376      	b.n	800c320 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b80      	cmp	r3, #128	; 0x80
 800bc36:	d901      	bls.n	800bc3c <f_mkfs+0x168>
 800bc38:	2313      	movs	r3, #19
 800bc3a:	e371      	b.n	800c320 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800bc3c:	7afb      	ldrb	r3, [r7, #11]
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00d      	beq.n	800bc62 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800bc46:	7afb      	ldrb	r3, [r7, #11]
 800bc48:	f003 0307 	and.w	r3, r3, #7
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d004      	beq.n	800bc5a <f_mkfs+0x186>
 800bc50:	7afb      	ldrb	r3, [r7, #11]
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d103      	bne.n	800bc62 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800bc5a:	2303      	movs	r3, #3
 800bc5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800bc60:	e009      	b.n	800bc76 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <f_mkfs+0x19c>
 800bc6c:	2313      	movs	r3, #19
 800bc6e:	e357      	b.n	800c320 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800bc70:	2302      	movs	r3, #2
 800bc72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800bc7a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d13c      	bne.n	800bcfc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800bc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d11b      	bne.n	800bcc0 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	0c5b      	lsrs	r3, r3, #17
 800bc8c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bc8e:	2300      	movs	r3, #0
 800bc90:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc92:	2301      	movs	r3, #1
 800bc94:	653b      	str	r3, [r7, #80]	; 0x50
 800bc96:	e005      	b.n	800bca4 <f_mkfs+0x1d0>
 800bc98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	653b      	str	r3, [r7, #80]	; 0x50
 800bca4:	4a2d      	ldr	r2, [pc, #180]	; (800bd5c <f_mkfs+0x288>)
 800bca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d007      	beq.n	800bcc0 <f_mkfs+0x1ec>
 800bcb0:	4a2a      	ldr	r2, [pc, #168]	; (800bd5c <f_mkfs+0x288>)
 800bcb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d2eb      	bcs.n	800bc98 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcc8:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	3302      	adds	r3, #2
 800bcce:	009a      	lsls	r2, r3, #2
 800bcd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd2:	4413      	add	r3, r2
 800bcd4:	1e5a      	subs	r2, r3, #1
 800bcd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcdc:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800bcde:	2320      	movs	r3, #32
 800bce0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800bce2:	2300      	movs	r3, #0
 800bce4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800bce6:	6a3b      	ldr	r3, [r7, #32]
 800bce8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d903      	bls.n	800bcf8 <f_mkfs+0x224>
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	4a1b      	ldr	r2, [pc, #108]	; (800bd60 <f_mkfs+0x28c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d952      	bls.n	800bd9e <f_mkfs+0x2ca>
 800bcf8:	230e      	movs	r3, #14
 800bcfa:	e311      	b.n	800c320 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800bcfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d11b      	bne.n	800bd3a <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	0b1b      	lsrs	r3, r3, #12
 800bd06:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800bd08:	2300      	movs	r3, #0
 800bd0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	653b      	str	r3, [r7, #80]	; 0x50
 800bd10:	e005      	b.n	800bd1e <f_mkfs+0x24a>
 800bd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd14:	3301      	adds	r3, #1
 800bd16:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd1e:	4a11      	ldr	r2, [pc, #68]	; (800bd64 <f_mkfs+0x290>)
 800bd20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d007      	beq.n	800bd3a <f_mkfs+0x266>
 800bd2a:	4a0e      	ldr	r2, [pc, #56]	; (800bd64 <f_mkfs+0x290>)
 800bd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd32:	461a      	mov	r2, r3
 800bd34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d2eb      	bcs.n	800bd12 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd42:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800bd44:	6a3b      	ldr	r3, [r7, #32]
 800bd46:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d90c      	bls.n	800bd68 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	3302      	adds	r3, #2
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd56:	e012      	b.n	800bd7e <f_mkfs+0x2aa>
 800bd58:	20000ee0 	.word	0x20000ee0
 800bd5c:	0800ce7c 	.word	0x0800ce7c
 800bd60:	0ffffff5 	.word	0x0ffffff5
 800bd64:	0800ce8c 	.word	0x0800ce8c
				} else {
					fmt = FS_FAT12;
 800bd68:	2301      	movs	r3, #1
 800bd6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800bd6e:	6a3a      	ldr	r2, [r7, #32]
 800bd70:	4613      	mov	r3, r2
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	4413      	add	r3, r2
 800bd76:	3301      	adds	r3, #1
 800bd78:	085b      	lsrs	r3, r3, #1
 800bd7a:	3303      	adds	r3, #3
 800bd7c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800bd7e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bd80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd82:	4413      	add	r3, r2
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd8c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800bd8e:	2301      	movs	r3, #1
 800bd90:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800bd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd94:	015a      	lsls	r2, r3, #5
 800bd96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd98:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd9c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800bd9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bda2:	4413      	add	r3, r2
 800bda4:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800bda6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bda8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdaa:	fb03 f202 	mul.w	r2, r3, r2
 800bdae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdb0:	4413      	add	r3, r2
 800bdb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bdb4:	4413      	add	r3, r2
 800bdb6:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800bdb8:	697a      	ldr	r2, [r7, #20]
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	1e5a      	subs	r2, r3, #1
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	425b      	negs	r3, r3
 800bdc4:	401a      	ands	r2, r3
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800bdcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d108      	bne.n	800bde6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800bdd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bdd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdd8:	4413      	add	r3, r2
 800bdda:	657b      	str	r3, [r7, #84]	; 0x54
 800bddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bde0:	4413      	add	r3, r2
 800bde2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bde4:	e006      	b.n	800bdf4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800bde6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bde8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdea:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bdf0:	4413      	add	r3, r2
 800bdf2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800bdf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf6:	011a      	lsls	r2, r3, #4
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	441a      	add	r2, r3
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	1ad2      	subs	r2, r2, r3
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	429a      	cmp	r2, r3
 800be04:	d901      	bls.n	800be0a <f_mkfs+0x336>
 800be06:	230e      	movs	r3, #14
 800be08:	e28a      	b.n	800c320 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800be0a:	693a      	ldr	r2, [r7, #16]
 800be0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be0e:	1ad2      	subs	r2, r2, r3
 800be10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be14:	fb01 f303 	mul.w	r3, r1, r3
 800be18:	1ad2      	subs	r2, r2, r3
 800be1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be1c:	1ad2      	subs	r2, r2, r3
 800be1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be20:	fbb2 f3f3 	udiv	r3, r2, r3
 800be24:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800be26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be2a:	2b03      	cmp	r3, #3
 800be2c:	d10f      	bne.n	800be4e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800be2e:	6a3b      	ldr	r3, [r7, #32]
 800be30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800be34:	4293      	cmp	r3, r2
 800be36:	d80a      	bhi.n	800be4e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d105      	bne.n	800be4a <f_mkfs+0x376>
 800be3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be40:	085b      	lsrs	r3, r3, #1
 800be42:	607b      	str	r3, [r7, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d144      	bne.n	800bed4 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800be4a:	230e      	movs	r3, #14
 800be4c:	e268      	b.n	800c320 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800be4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be52:	2b02      	cmp	r3, #2
 800be54:	d133      	bne.n	800bebe <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d91e      	bls.n	800be9e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d107      	bne.n	800be76 <f_mkfs+0x3a2>
 800be66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	2b40      	cmp	r3, #64	; 0x40
 800be6c:	d803      	bhi.n	800be76 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	607b      	str	r3, [r7, #4]
 800be74:	e033      	b.n	800bede <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800be76:	7afb      	ldrb	r3, [r7, #11]
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800be80:	2303      	movs	r3, #3
 800be82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800be86:	e02a      	b.n	800bede <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d105      	bne.n	800be9a <f_mkfs+0x3c6>
 800be8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	607b      	str	r3, [r7, #4]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b80      	cmp	r3, #128	; 0x80
 800be98:	d91e      	bls.n	800bed8 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800be9a:	230e      	movs	r3, #14
 800be9c:	e240      	b.n	800c320 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800be9e:	6a3b      	ldr	r3, [r7, #32]
 800bea0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d80a      	bhi.n	800bebe <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <f_mkfs+0x3e6>
 800beae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	607b      	str	r3, [r7, #4]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b80      	cmp	r3, #128	; 0x80
 800beb8:	d910      	bls.n	800bedc <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800beba:	230e      	movs	r3, #14
 800bebc:	e230      	b.n	800c320 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bebe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d10c      	bne.n	800bee0 <f_mkfs+0x40c>
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800becc:	4293      	cmp	r3, r2
 800bece:	d907      	bls.n	800bee0 <f_mkfs+0x40c>
 800bed0:	230e      	movs	r3, #14
 800bed2:	e225      	b.n	800c320 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800bed4:	bf00      	nop
 800bed6:	e6ce      	b.n	800bc76 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bed8:	bf00      	nop
 800beda:	e6cc      	b.n	800bc76 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bedc:	bf00      	nop
			pau = au;
 800bede:	e6ca      	b.n	800bc76 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bee0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bee2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bee4:	461a      	mov	r2, r3
 800bee6:	2100      	movs	r1, #0
 800bee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800beea:	f7fd fdd4 	bl	8009a96 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800beee:	220b      	movs	r2, #11
 800bef0:	49b2      	ldr	r1, [pc, #712]	; (800c1bc <f_mkfs+0x6e8>)
 800bef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bef4:	f7fd fdae 	bl	8009a54 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befa:	330b      	adds	r3, #11
 800befc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800befe:	4611      	mov	r1, r2
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7fd fd60 	bl	80099c6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	330d      	adds	r3, #13
 800bf0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf0c:	b2d2      	uxtb	r2, r2
 800bf0e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	330e      	adds	r3, #14
 800bf14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf16:	b292      	uxth	r2, r2
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fd fd53 	bl	80099c6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	3310      	adds	r3, #16
 800bf24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	f103 0211 	add.w	r2, r3, #17
 800bf30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf34:	2b03      	cmp	r3, #3
 800bf36:	d002      	beq.n	800bf3e <f_mkfs+0x46a>
 800bf38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	e000      	b.n	800bf40 <f_mkfs+0x46c>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fd fd3f 	bl	80099c6 <st_word>
		if (sz_vol < 0x10000) {
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf4e:	d208      	bcs.n	800bf62 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	3313      	adds	r3, #19
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	b292      	uxth	r2, r2
 800bf58:	4611      	mov	r1, r2
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fd fd33 	bl	80099c6 <st_word>
 800bf60:	e006      	b.n	800bf70 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	3320      	adds	r3, #32
 800bf66:	693a      	ldr	r2, [r7, #16]
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fd fd46 	bl	80099fc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	3315      	adds	r3, #21
 800bf74:	22f8      	movs	r2, #248	; 0xf8
 800bf76:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7a:	3318      	adds	r3, #24
 800bf7c:	213f      	movs	r1, #63	; 0x3f
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fd fd21 	bl	80099c6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	331a      	adds	r3, #26
 800bf88:	21ff      	movs	r1, #255	; 0xff
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fd fd1b 	bl	80099c6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	331c      	adds	r3, #28
 800bf94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fd fd30 	bl	80099fc <st_dword>
		if (fmt == FS_FAT32) {
 800bf9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d131      	bne.n	800c008 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bfaa:	f7fd f9e3 	bl	8009374 <get_fattime>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f7fd fd22 	bl	80099fc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	3324      	adds	r3, #36	; 0x24
 800bfbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fd fd1c 	bl	80099fc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc6:	332c      	adds	r3, #44	; 0x2c
 800bfc8:	2102      	movs	r1, #2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd fd16 	bl	80099fc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd2:	3330      	adds	r3, #48	; 0x30
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fd fcf5 	bl	80099c6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfde:	3332      	adds	r3, #50	; 0x32
 800bfe0:	2106      	movs	r1, #6
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f7fd fcef 	bl	80099c6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfea:	3340      	adds	r3, #64	; 0x40
 800bfec:	2280      	movs	r2, #128	; 0x80
 800bfee:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	3342      	adds	r3, #66	; 0x42
 800bff4:	2229      	movs	r2, #41	; 0x29
 800bff6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	3347      	adds	r3, #71	; 0x47
 800bffc:	2213      	movs	r2, #19
 800bffe:	4970      	ldr	r1, [pc, #448]	; (800c1c0 <f_mkfs+0x6ec>)
 800c000:	4618      	mov	r0, r3
 800c002:	f7fd fd27 	bl	8009a54 <mem_cpy>
 800c006:	e020      	b.n	800c04a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800c00e:	f7fd f9b1 	bl	8009374 <get_fattime>
 800c012:	4603      	mov	r3, r0
 800c014:	4619      	mov	r1, r3
 800c016:	4620      	mov	r0, r4
 800c018:	f7fd fcf0 	bl	80099fc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	3316      	adds	r3, #22
 800c020:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c022:	b292      	uxth	r2, r2
 800c024:	4611      	mov	r1, r2
 800c026:	4618      	mov	r0, r3
 800c028:	f7fd fccd 	bl	80099c6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	3324      	adds	r3, #36	; 0x24
 800c030:	2280      	movs	r2, #128	; 0x80
 800c032:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800c034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c036:	3326      	adds	r3, #38	; 0x26
 800c038:	2229      	movs	r2, #41	; 0x29
 800c03a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800c03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c03e:	332b      	adds	r3, #43	; 0x2b
 800c040:	2213      	movs	r2, #19
 800c042:	4960      	ldr	r1, [pc, #384]	; (800c1c4 <f_mkfs+0x6f0>)
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd fd05 	bl	8009a54 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c050:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c054:	4618      	mov	r0, r3
 800c056:	f7fd fcb6 	bl	80099c6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800c05a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c05e:	2301      	movs	r3, #1
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c064:	f7fd fc36 	bl	80098d4 <disk_write>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <f_mkfs+0x59e>
 800c06e:	2301      	movs	r3, #1
 800c070:	e156      	b.n	800c320 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800c072:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c076:	2b03      	cmp	r3, #3
 800c078:	d140      	bne.n	800c0fc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800c07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07c:	1d9a      	adds	r2, r3, #6
 800c07e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c082:	2301      	movs	r3, #1
 800c084:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c086:	f7fd fc25 	bl	80098d4 <disk_write>
			mem_set(buf, 0, ss);
 800c08a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c08c:	461a      	mov	r2, r3
 800c08e:	2100      	movs	r1, #0
 800c090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c092:	f7fd fd00 	bl	8009a96 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800c096:	494c      	ldr	r1, [pc, #304]	; (800c1c8 <f_mkfs+0x6f4>)
 800c098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c09a:	f7fd fcaf 	bl	80099fc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c0a4:	4949      	ldr	r1, [pc, #292]	; (800c1cc <f_mkfs+0x6f8>)
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7fd fca8 	bl	80099fc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7fd fc9f 	bl	80099fc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c0c4:	2102      	movs	r1, #2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fd fc98 	bl	80099fc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c0d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fc75 	bl	80099c6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	1dda      	adds	r2, r3, #7
 800c0e0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0e8:	f7fd fbf4 	bl	80098d4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0f8:	f7fd fbec 	bl	80098d4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800c0fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0fe:	2100      	movs	r1, #0
 800c100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c102:	f7fd fcc8 	bl	8009a96 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800c106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c108:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c10a:	2300      	movs	r3, #0
 800c10c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c10e:	e04b      	b.n	800c1a8 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800c110:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c114:	2b03      	cmp	r3, #3
 800c116:	d113      	bne.n	800c140 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800c118:	f06f 0107 	mvn.w	r1, #7
 800c11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c11e:	f7fd fc6d 	bl	80099fc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	3304      	adds	r3, #4
 800c126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd fc66 	bl	80099fc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	3308      	adds	r3, #8
 800c134:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fd fc5f 	bl	80099fc <st_dword>
 800c13e:	e00b      	b.n	800c158 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800c140:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c144:	2b01      	cmp	r3, #1
 800c146:	d101      	bne.n	800c14c <f_mkfs+0x678>
 800c148:	4b21      	ldr	r3, [pc, #132]	; (800c1d0 <f_mkfs+0x6fc>)
 800c14a:	e001      	b.n	800c150 <f_mkfs+0x67c>
 800c14c:	f06f 0307 	mvn.w	r3, #7
 800c150:	4619      	mov	r1, r3
 800c152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c154:	f7fd fc52 	bl	80099fc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800c158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c15a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800c15c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	4293      	cmp	r3, r2
 800c162:	bf28      	it	cs
 800c164:	4613      	movcs	r3, r2
 800c166:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c168:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c16c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c16e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c172:	f7fd fbaf 	bl	80098d4 <disk_write>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d001      	beq.n	800c180 <f_mkfs+0x6ac>
 800c17c:	2301      	movs	r3, #1
 800c17e:	e0cf      	b.n	800c320 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800c180:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c182:	461a      	mov	r2, r3
 800c184:	2100      	movs	r1, #0
 800c186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c188:	f7fd fc85 	bl	8009a96 <mem_set>
				sect += n; nsect -= n;
 800c18c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c18e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c190:	4413      	add	r3, r2
 800c192:	667b      	str	r3, [r7, #100]	; 0x64
 800c194:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800c19c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1dc      	bne.n	800c15c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800c1a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d3af      	bcc.n	800c110 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800c1b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c1b4:	2b03      	cmp	r3, #3
 800c1b6:	d10d      	bne.n	800c1d4 <f_mkfs+0x700>
 800c1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ba:	e00c      	b.n	800c1d6 <f_mkfs+0x702>
 800c1bc:	0800cd94 	.word	0x0800cd94
 800c1c0:	0800cda0 	.word	0x0800cda0
 800c1c4:	0800cdb4 	.word	0x0800cdb4
 800c1c8:	41615252 	.word	0x41615252
 800c1cc:	61417272 	.word	0x61417272
 800c1d0:	00fffff8 	.word	0x00fffff8
 800c1d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1d6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800c1d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	bf28      	it	cs
 800c1e0:	4613      	movcs	r3, r2
 800c1e2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800c1e4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c1e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ee:	f7fd fb71 	bl	80098d4 <disk_write>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <f_mkfs+0x728>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e091      	b.n	800c320 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800c1fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c200:	4413      	add	r3, r2
 800c202:	667b      	str	r3, [r7, #100]	; 0x64
 800c204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800c20c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e2      	bne.n	800c1d8 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800c212:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c216:	2b03      	cmp	r3, #3
 800c218:	d103      	bne.n	800c222 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800c21a:	230c      	movs	r3, #12
 800c21c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c220:	e010      	b.n	800c244 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c228:	d303      	bcc.n	800c232 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800c22a:	2306      	movs	r3, #6
 800c22c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800c230:	e008      	b.n	800c244 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800c232:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c236:	2b02      	cmp	r3, #2
 800c238:	d101      	bne.n	800c23e <f_mkfs+0x76a>
 800c23a:	2304      	movs	r3, #4
 800c23c:	e000      	b.n	800c240 <f_mkfs+0x76c>
 800c23e:	2301      	movs	r3, #1
 800c240:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800c244:	7afb      	ldrb	r3, [r7, #11]
 800c246:	f003 0308 	and.w	r3, r3, #8
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d15b      	bne.n	800c306 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800c24e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c250:	461a      	mov	r2, r3
 800c252:	2100      	movs	r1, #0
 800c254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c256:	f7fd fc1e 	bl	8009a96 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c260:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c264:	4618      	mov	r0, r3
 800c266:	f7fd fbae 	bl	80099c6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c270:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2200      	movs	r2, #0
 800c276:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	3301      	adds	r3, #1
 800c27c:	2201      	movs	r2, #1
 800c27e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	3302      	adds	r3, #2
 800c284:	2201      	movs	r2, #1
 800c286:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	3303      	adds	r3, #3
 800c28c:	2200      	movs	r2, #0
 800c28e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	3304      	adds	r3, #4
 800c294:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800c298:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29e:	441a      	add	r2, r3
 800c2a0:	4b21      	ldr	r3, [pc, #132]	; (800c328 <f_mkfs+0x854>)
 800c2a2:	fba3 1302 	umull	r1, r3, r3, r2
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	0852      	lsrs	r2, r2, #1
 800c2aa:	4413      	add	r3, r2
 800c2ac:	0b5b      	lsrs	r3, r3, #13
 800c2ae:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	3305      	adds	r3, #5
 800c2b4:	22fe      	movs	r2, #254	; 0xfe
 800c2b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800c2b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2ba:	089b      	lsrs	r3, r3, #2
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	3306      	adds	r3, #6
 800c2c2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800c2c6:	b2d2      	uxtb	r2, r2
 800c2c8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	3307      	adds	r3, #7
 800c2ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c2d0:	b2d2      	uxtb	r2, r2
 800c2d2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fd fb8e 	bl	80099fc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	330c      	adds	r3, #12
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fd fb87 	bl	80099fc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800c2ee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2f8:	f7fd faec 	bl	80098d4 <disk_write>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <f_mkfs+0x832>
 800c302:	2301      	movs	r3, #1
 800c304:	e00c      	b.n	800c320 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800c306:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c30a:	2200      	movs	r2, #0
 800c30c:	2100      	movs	r1, #0
 800c30e:	4618      	mov	r0, r3
 800c310:	f7fd fb00 	bl	8009914 <disk_ioctl>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d001      	beq.n	800c31e <f_mkfs+0x84a>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <f_mkfs+0x84c>

	return FR_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3774      	adds	r7, #116	; 0x74
 800c324:	46bd      	mov	sp, r7
 800c326:	bd90      	pop	{r4, r7, pc}
 800c328:	0515565b 	.word	0x0515565b

0800c32c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c33a:	2301      	movs	r3, #1
 800c33c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c342:	4b1f      	ldr	r3, [pc, #124]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c344:	7a5b      	ldrb	r3, [r3, #9]
 800c346:	b2db      	uxtb	r3, r3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d131      	bne.n	800c3b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c34c:	4b1c      	ldr	r3, [pc, #112]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c34e:	7a5b      	ldrb	r3, [r3, #9]
 800c350:	b2db      	uxtb	r3, r3
 800c352:	461a      	mov	r2, r3
 800c354:	4b1a      	ldr	r3, [pc, #104]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c356:	2100      	movs	r1, #0
 800c358:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c35a:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c35c:	7a5b      	ldrb	r3, [r3, #9]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4a17      	ldr	r2, [pc, #92]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c36a:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c36c:	7a5b      	ldrb	r3, [r3, #9]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	4b13      	ldr	r3, [pc, #76]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c374:	4413      	add	r3, r2
 800c376:	79fa      	ldrb	r2, [r7, #7]
 800c378:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c37a:	4b11      	ldr	r3, [pc, #68]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c37c:	7a5b      	ldrb	r3, [r3, #9]
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	1c5a      	adds	r2, r3, #1
 800c382:	b2d1      	uxtb	r1, r2
 800c384:	4a0e      	ldr	r2, [pc, #56]	; (800c3c0 <FATFS_LinkDriverEx+0x94>)
 800c386:	7251      	strb	r1, [r2, #9]
 800c388:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c38a:	7dbb      	ldrb	r3, [r7, #22]
 800c38c:	3330      	adds	r3, #48	; 0x30
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	3301      	adds	r3, #1
 800c398:	223a      	movs	r2, #58	; 0x3a
 800c39a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	3302      	adds	r3, #2
 800c3a0:	222f      	movs	r2, #47	; 0x2f
 800c3a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	3303      	adds	r3, #3
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	20000f08 	.word	0x20000f08

0800c3c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7ff ffaa 	bl	800c32c <FATFS_LinkDriverEx>
 800c3d8:	4603      	mov	r3, r0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3708      	adds	r7, #8
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
	...

0800c3e4 <__errno>:
 800c3e4:	4b01      	ldr	r3, [pc, #4]	; (800c3ec <__errno+0x8>)
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	2000000c 	.word	0x2000000c

0800c3f0 <__libc_init_array>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	4d0d      	ldr	r5, [pc, #52]	; (800c428 <__libc_init_array+0x38>)
 800c3f4:	4c0d      	ldr	r4, [pc, #52]	; (800c42c <__libc_init_array+0x3c>)
 800c3f6:	1b64      	subs	r4, r4, r5
 800c3f8:	10a4      	asrs	r4, r4, #2
 800c3fa:	2600      	movs	r6, #0
 800c3fc:	42a6      	cmp	r6, r4
 800c3fe:	d109      	bne.n	800c414 <__libc_init_array+0x24>
 800c400:	4d0b      	ldr	r5, [pc, #44]	; (800c430 <__libc_init_array+0x40>)
 800c402:	4c0c      	ldr	r4, [pc, #48]	; (800c434 <__libc_init_array+0x44>)
 800c404:	f000 fc8e 	bl	800cd24 <_init>
 800c408:	1b64      	subs	r4, r4, r5
 800c40a:	10a4      	asrs	r4, r4, #2
 800c40c:	2600      	movs	r6, #0
 800c40e:	42a6      	cmp	r6, r4
 800c410:	d105      	bne.n	800c41e <__libc_init_array+0x2e>
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	f855 3b04 	ldr.w	r3, [r5], #4
 800c418:	4798      	blx	r3
 800c41a:	3601      	adds	r6, #1
 800c41c:	e7ee      	b.n	800c3fc <__libc_init_array+0xc>
 800c41e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c422:	4798      	blx	r3
 800c424:	3601      	adds	r6, #1
 800c426:	e7f2      	b.n	800c40e <__libc_init_array+0x1e>
 800c428:	0800ced8 	.word	0x0800ced8
 800c42c:	0800ced8 	.word	0x0800ced8
 800c430:	0800ced8 	.word	0x0800ced8
 800c434:	0800cedc 	.word	0x0800cedc

0800c438 <memset>:
 800c438:	4402      	add	r2, r0
 800c43a:	4603      	mov	r3, r0
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d100      	bne.n	800c442 <memset+0xa>
 800c440:	4770      	bx	lr
 800c442:	f803 1b01 	strb.w	r1, [r3], #1
 800c446:	e7f9      	b.n	800c43c <memset+0x4>

0800c448 <siprintf>:
 800c448:	b40e      	push	{r1, r2, r3}
 800c44a:	b500      	push	{lr}
 800c44c:	b09c      	sub	sp, #112	; 0x70
 800c44e:	ab1d      	add	r3, sp, #116	; 0x74
 800c450:	9002      	str	r0, [sp, #8]
 800c452:	9006      	str	r0, [sp, #24]
 800c454:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c458:	4809      	ldr	r0, [pc, #36]	; (800c480 <siprintf+0x38>)
 800c45a:	9107      	str	r1, [sp, #28]
 800c45c:	9104      	str	r1, [sp, #16]
 800c45e:	4909      	ldr	r1, [pc, #36]	; (800c484 <siprintf+0x3c>)
 800c460:	f853 2b04 	ldr.w	r2, [r3], #4
 800c464:	9105      	str	r1, [sp, #20]
 800c466:	6800      	ldr	r0, [r0, #0]
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	a902      	add	r1, sp, #8
 800c46c:	f000 f868 	bl	800c540 <_svfiprintf_r>
 800c470:	9b02      	ldr	r3, [sp, #8]
 800c472:	2200      	movs	r2, #0
 800c474:	701a      	strb	r2, [r3, #0]
 800c476:	b01c      	add	sp, #112	; 0x70
 800c478:	f85d eb04 	ldr.w	lr, [sp], #4
 800c47c:	b003      	add	sp, #12
 800c47e:	4770      	bx	lr
 800c480:	2000000c 	.word	0x2000000c
 800c484:	ffff0208 	.word	0xffff0208

0800c488 <__ssputs_r>:
 800c488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c48c:	688e      	ldr	r6, [r1, #8]
 800c48e:	429e      	cmp	r6, r3
 800c490:	4682      	mov	sl, r0
 800c492:	460c      	mov	r4, r1
 800c494:	4690      	mov	r8, r2
 800c496:	461f      	mov	r7, r3
 800c498:	d838      	bhi.n	800c50c <__ssputs_r+0x84>
 800c49a:	898a      	ldrh	r2, [r1, #12]
 800c49c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4a0:	d032      	beq.n	800c508 <__ssputs_r+0x80>
 800c4a2:	6825      	ldr	r5, [r4, #0]
 800c4a4:	6909      	ldr	r1, [r1, #16]
 800c4a6:	eba5 0901 	sub.w	r9, r5, r1
 800c4aa:	6965      	ldr	r5, [r4, #20]
 800c4ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	444b      	add	r3, r9
 800c4b8:	106d      	asrs	r5, r5, #1
 800c4ba:	429d      	cmp	r5, r3
 800c4bc:	bf38      	it	cc
 800c4be:	461d      	movcc	r5, r3
 800c4c0:	0553      	lsls	r3, r2, #21
 800c4c2:	d531      	bpl.n	800c528 <__ssputs_r+0xa0>
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	f000 fb63 	bl	800cb90 <_malloc_r>
 800c4ca:	4606      	mov	r6, r0
 800c4cc:	b950      	cbnz	r0, 800c4e4 <__ssputs_r+0x5c>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	f8ca 3000 	str.w	r3, [sl]
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e4:	6921      	ldr	r1, [r4, #16]
 800c4e6:	464a      	mov	r2, r9
 800c4e8:	f000 fabe 	bl	800ca68 <memcpy>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f6:	81a3      	strh	r3, [r4, #12]
 800c4f8:	6126      	str	r6, [r4, #16]
 800c4fa:	6165      	str	r5, [r4, #20]
 800c4fc:	444e      	add	r6, r9
 800c4fe:	eba5 0509 	sub.w	r5, r5, r9
 800c502:	6026      	str	r6, [r4, #0]
 800c504:	60a5      	str	r5, [r4, #8]
 800c506:	463e      	mov	r6, r7
 800c508:	42be      	cmp	r6, r7
 800c50a:	d900      	bls.n	800c50e <__ssputs_r+0x86>
 800c50c:	463e      	mov	r6, r7
 800c50e:	6820      	ldr	r0, [r4, #0]
 800c510:	4632      	mov	r2, r6
 800c512:	4641      	mov	r1, r8
 800c514:	f000 fab6 	bl	800ca84 <memmove>
 800c518:	68a3      	ldr	r3, [r4, #8]
 800c51a:	1b9b      	subs	r3, r3, r6
 800c51c:	60a3      	str	r3, [r4, #8]
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	4433      	add	r3, r6
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	2000      	movs	r0, #0
 800c526:	e7db      	b.n	800c4e0 <__ssputs_r+0x58>
 800c528:	462a      	mov	r2, r5
 800c52a:	f000 fba5 	bl	800cc78 <_realloc_r>
 800c52e:	4606      	mov	r6, r0
 800c530:	2800      	cmp	r0, #0
 800c532:	d1e1      	bne.n	800c4f8 <__ssputs_r+0x70>
 800c534:	6921      	ldr	r1, [r4, #16]
 800c536:	4650      	mov	r0, sl
 800c538:	f000 fabe 	bl	800cab8 <_free_r>
 800c53c:	e7c7      	b.n	800c4ce <__ssputs_r+0x46>
	...

0800c540 <_svfiprintf_r>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	4698      	mov	r8, r3
 800c546:	898b      	ldrh	r3, [r1, #12]
 800c548:	061b      	lsls	r3, r3, #24
 800c54a:	b09d      	sub	sp, #116	; 0x74
 800c54c:	4607      	mov	r7, r0
 800c54e:	460d      	mov	r5, r1
 800c550:	4614      	mov	r4, r2
 800c552:	d50e      	bpl.n	800c572 <_svfiprintf_r+0x32>
 800c554:	690b      	ldr	r3, [r1, #16]
 800c556:	b963      	cbnz	r3, 800c572 <_svfiprintf_r+0x32>
 800c558:	2140      	movs	r1, #64	; 0x40
 800c55a:	f000 fb19 	bl	800cb90 <_malloc_r>
 800c55e:	6028      	str	r0, [r5, #0]
 800c560:	6128      	str	r0, [r5, #16]
 800c562:	b920      	cbnz	r0, 800c56e <_svfiprintf_r+0x2e>
 800c564:	230c      	movs	r3, #12
 800c566:	603b      	str	r3, [r7, #0]
 800c568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56c:	e0d1      	b.n	800c712 <_svfiprintf_r+0x1d2>
 800c56e:	2340      	movs	r3, #64	; 0x40
 800c570:	616b      	str	r3, [r5, #20]
 800c572:	2300      	movs	r3, #0
 800c574:	9309      	str	r3, [sp, #36]	; 0x24
 800c576:	2320      	movs	r3, #32
 800c578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c57c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c580:	2330      	movs	r3, #48	; 0x30
 800c582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c72c <_svfiprintf_r+0x1ec>
 800c586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c58a:	f04f 0901 	mov.w	r9, #1
 800c58e:	4623      	mov	r3, r4
 800c590:	469a      	mov	sl, r3
 800c592:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c596:	b10a      	cbz	r2, 800c59c <_svfiprintf_r+0x5c>
 800c598:	2a25      	cmp	r2, #37	; 0x25
 800c59a:	d1f9      	bne.n	800c590 <_svfiprintf_r+0x50>
 800c59c:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a0:	d00b      	beq.n	800c5ba <_svfiprintf_r+0x7a>
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ff6d 	bl	800c488 <__ssputs_r>
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	f000 80aa 	beq.w	800c708 <_svfiprintf_r+0x1c8>
 800c5b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5b6:	445a      	add	r2, fp
 800c5b8:	9209      	str	r2, [sp, #36]	; 0x24
 800c5ba:	f89a 3000 	ldrb.w	r3, [sl]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 80a2 	beq.w	800c708 <_svfiprintf_r+0x1c8>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5ce:	f10a 0a01 	add.w	sl, sl, #1
 800c5d2:	9304      	str	r3, [sp, #16]
 800c5d4:	9307      	str	r3, [sp, #28]
 800c5d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5da:	931a      	str	r3, [sp, #104]	; 0x68
 800c5dc:	4654      	mov	r4, sl
 800c5de:	2205      	movs	r2, #5
 800c5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5e4:	4851      	ldr	r0, [pc, #324]	; (800c72c <_svfiprintf_r+0x1ec>)
 800c5e6:	f7f3 fe33 	bl	8000250 <memchr>
 800c5ea:	9a04      	ldr	r2, [sp, #16]
 800c5ec:	b9d8      	cbnz	r0, 800c626 <_svfiprintf_r+0xe6>
 800c5ee:	06d0      	lsls	r0, r2, #27
 800c5f0:	bf44      	itt	mi
 800c5f2:	2320      	movmi	r3, #32
 800c5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5f8:	0711      	lsls	r1, r2, #28
 800c5fa:	bf44      	itt	mi
 800c5fc:	232b      	movmi	r3, #43	; 0x2b
 800c5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c602:	f89a 3000 	ldrb.w	r3, [sl]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d015      	beq.n	800c636 <_svfiprintf_r+0xf6>
 800c60a:	9a07      	ldr	r2, [sp, #28]
 800c60c:	4654      	mov	r4, sl
 800c60e:	2000      	movs	r0, #0
 800c610:	f04f 0c0a 	mov.w	ip, #10
 800c614:	4621      	mov	r1, r4
 800c616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c61a:	3b30      	subs	r3, #48	; 0x30
 800c61c:	2b09      	cmp	r3, #9
 800c61e:	d94e      	bls.n	800c6be <_svfiprintf_r+0x17e>
 800c620:	b1b0      	cbz	r0, 800c650 <_svfiprintf_r+0x110>
 800c622:	9207      	str	r2, [sp, #28]
 800c624:	e014      	b.n	800c650 <_svfiprintf_r+0x110>
 800c626:	eba0 0308 	sub.w	r3, r0, r8
 800c62a:	fa09 f303 	lsl.w	r3, r9, r3
 800c62e:	4313      	orrs	r3, r2
 800c630:	9304      	str	r3, [sp, #16]
 800c632:	46a2      	mov	sl, r4
 800c634:	e7d2      	b.n	800c5dc <_svfiprintf_r+0x9c>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	1d19      	adds	r1, r3, #4
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	9103      	str	r1, [sp, #12]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	bfbb      	ittet	lt
 800c642:	425b      	neglt	r3, r3
 800c644:	f042 0202 	orrlt.w	r2, r2, #2
 800c648:	9307      	strge	r3, [sp, #28]
 800c64a:	9307      	strlt	r3, [sp, #28]
 800c64c:	bfb8      	it	lt
 800c64e:	9204      	strlt	r2, [sp, #16]
 800c650:	7823      	ldrb	r3, [r4, #0]
 800c652:	2b2e      	cmp	r3, #46	; 0x2e
 800c654:	d10c      	bne.n	800c670 <_svfiprintf_r+0x130>
 800c656:	7863      	ldrb	r3, [r4, #1]
 800c658:	2b2a      	cmp	r3, #42	; 0x2a
 800c65a:	d135      	bne.n	800c6c8 <_svfiprintf_r+0x188>
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	1d1a      	adds	r2, r3, #4
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	9203      	str	r2, [sp, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfb8      	it	lt
 800c668:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c66c:	3402      	adds	r4, #2
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c73c <_svfiprintf_r+0x1fc>
 800c674:	7821      	ldrb	r1, [r4, #0]
 800c676:	2203      	movs	r2, #3
 800c678:	4650      	mov	r0, sl
 800c67a:	f7f3 fde9 	bl	8000250 <memchr>
 800c67e:	b140      	cbz	r0, 800c692 <_svfiprintf_r+0x152>
 800c680:	2340      	movs	r3, #64	; 0x40
 800c682:	eba0 000a 	sub.w	r0, r0, sl
 800c686:	fa03 f000 	lsl.w	r0, r3, r0
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	4303      	orrs	r3, r0
 800c68e:	3401      	adds	r4, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c696:	4826      	ldr	r0, [pc, #152]	; (800c730 <_svfiprintf_r+0x1f0>)
 800c698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c69c:	2206      	movs	r2, #6
 800c69e:	f7f3 fdd7 	bl	8000250 <memchr>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d038      	beq.n	800c718 <_svfiprintf_r+0x1d8>
 800c6a6:	4b23      	ldr	r3, [pc, #140]	; (800c734 <_svfiprintf_r+0x1f4>)
 800c6a8:	bb1b      	cbnz	r3, 800c6f2 <_svfiprintf_r+0x1b2>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	3307      	adds	r3, #7
 800c6ae:	f023 0307 	bic.w	r3, r3, #7
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6b8:	4433      	add	r3, r6
 800c6ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c6bc:	e767      	b.n	800c58e <_svfiprintf_r+0x4e>
 800c6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	e7a5      	b.n	800c614 <_svfiprintf_r+0xd4>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	3401      	adds	r4, #1
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f04f 0c0a 	mov.w	ip, #10
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6da:	3a30      	subs	r2, #48	; 0x30
 800c6dc:	2a09      	cmp	r2, #9
 800c6de:	d903      	bls.n	800c6e8 <_svfiprintf_r+0x1a8>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0c5      	beq.n	800c670 <_svfiprintf_r+0x130>
 800c6e4:	9105      	str	r1, [sp, #20]
 800c6e6:	e7c3      	b.n	800c670 <_svfiprintf_r+0x130>
 800c6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e7f0      	b.n	800c6d4 <_svfiprintf_r+0x194>
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	4638      	mov	r0, r7
 800c6fe:	f3af 8000 	nop.w
 800c702:	1c42      	adds	r2, r0, #1
 800c704:	4606      	mov	r6, r0
 800c706:	d1d6      	bne.n	800c6b6 <_svfiprintf_r+0x176>
 800c708:	89ab      	ldrh	r3, [r5, #12]
 800c70a:	065b      	lsls	r3, r3, #25
 800c70c:	f53f af2c 	bmi.w	800c568 <_svfiprintf_r+0x28>
 800c710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c712:	b01d      	add	sp, #116	; 0x74
 800c714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4b06      	ldr	r3, [pc, #24]	; (800c738 <_svfiprintf_r+0x1f8>)
 800c720:	a904      	add	r1, sp, #16
 800c722:	4638      	mov	r0, r7
 800c724:	f000 f87a 	bl	800c81c <_printf_i>
 800c728:	e7eb      	b.n	800c702 <_svfiprintf_r+0x1c2>
 800c72a:	bf00      	nop
 800c72c:	0800ce9a 	.word	0x0800ce9a
 800c730:	0800cea4 	.word	0x0800cea4
 800c734:	00000000 	.word	0x00000000
 800c738:	0800c489 	.word	0x0800c489
 800c73c:	0800cea0 	.word	0x0800cea0

0800c740 <_printf_common>:
 800c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	4616      	mov	r6, r2
 800c746:	4699      	mov	r9, r3
 800c748:	688a      	ldr	r2, [r1, #8]
 800c74a:	690b      	ldr	r3, [r1, #16]
 800c74c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c750:	4293      	cmp	r3, r2
 800c752:	bfb8      	it	lt
 800c754:	4613      	movlt	r3, r2
 800c756:	6033      	str	r3, [r6, #0]
 800c758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c75c:	4607      	mov	r7, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	b10a      	cbz	r2, 800c766 <_printf_common+0x26>
 800c762:	3301      	adds	r3, #1
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	0699      	lsls	r1, r3, #26
 800c76a:	bf42      	ittt	mi
 800c76c:	6833      	ldrmi	r3, [r6, #0]
 800c76e:	3302      	addmi	r3, #2
 800c770:	6033      	strmi	r3, [r6, #0]
 800c772:	6825      	ldr	r5, [r4, #0]
 800c774:	f015 0506 	ands.w	r5, r5, #6
 800c778:	d106      	bne.n	800c788 <_printf_common+0x48>
 800c77a:	f104 0a19 	add.w	sl, r4, #25
 800c77e:	68e3      	ldr	r3, [r4, #12]
 800c780:	6832      	ldr	r2, [r6, #0]
 800c782:	1a9b      	subs	r3, r3, r2
 800c784:	42ab      	cmp	r3, r5
 800c786:	dc26      	bgt.n	800c7d6 <_printf_common+0x96>
 800c788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c78c:	1e13      	subs	r3, r2, #0
 800c78e:	6822      	ldr	r2, [r4, #0]
 800c790:	bf18      	it	ne
 800c792:	2301      	movne	r3, #1
 800c794:	0692      	lsls	r2, r2, #26
 800c796:	d42b      	bmi.n	800c7f0 <_printf_common+0xb0>
 800c798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c79c:	4649      	mov	r1, r9
 800c79e:	4638      	mov	r0, r7
 800c7a0:	47c0      	blx	r8
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d01e      	beq.n	800c7e4 <_printf_common+0xa4>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	68e5      	ldr	r5, [r4, #12]
 800c7aa:	6832      	ldr	r2, [r6, #0]
 800c7ac:	f003 0306 	and.w	r3, r3, #6
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	bf08      	it	eq
 800c7b4:	1aad      	subeq	r5, r5, r2
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	6922      	ldr	r2, [r4, #16]
 800c7ba:	bf0c      	ite	eq
 800c7bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7c0:	2500      	movne	r5, #0
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	bfc4      	itt	gt
 800c7c6:	1a9b      	subgt	r3, r3, r2
 800c7c8:	18ed      	addgt	r5, r5, r3
 800c7ca:	2600      	movs	r6, #0
 800c7cc:	341a      	adds	r4, #26
 800c7ce:	42b5      	cmp	r5, r6
 800c7d0:	d11a      	bne.n	800c808 <_printf_common+0xc8>
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e008      	b.n	800c7e8 <_printf_common+0xa8>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4652      	mov	r2, sl
 800c7da:	4649      	mov	r1, r9
 800c7dc:	4638      	mov	r0, r7
 800c7de:	47c0      	blx	r8
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d103      	bne.n	800c7ec <_printf_common+0xac>
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	e7c6      	b.n	800c77e <_printf_common+0x3e>
 800c7f0:	18e1      	adds	r1, r4, r3
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	2030      	movs	r0, #48	; 0x30
 800c7f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7fa:	4422      	add	r2, r4
 800c7fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c804:	3302      	adds	r3, #2
 800c806:	e7c7      	b.n	800c798 <_printf_common+0x58>
 800c808:	2301      	movs	r3, #1
 800c80a:	4622      	mov	r2, r4
 800c80c:	4649      	mov	r1, r9
 800c80e:	4638      	mov	r0, r7
 800c810:	47c0      	blx	r8
 800c812:	3001      	adds	r0, #1
 800c814:	d0e6      	beq.n	800c7e4 <_printf_common+0xa4>
 800c816:	3601      	adds	r6, #1
 800c818:	e7d9      	b.n	800c7ce <_printf_common+0x8e>
	...

0800c81c <_printf_i>:
 800c81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	7e0f      	ldrb	r7, [r1, #24]
 800c822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c824:	2f78      	cmp	r7, #120	; 0x78
 800c826:	4691      	mov	r9, r2
 800c828:	4680      	mov	r8, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	469a      	mov	sl, r3
 800c82e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c832:	d807      	bhi.n	800c844 <_printf_i+0x28>
 800c834:	2f62      	cmp	r7, #98	; 0x62
 800c836:	d80a      	bhi.n	800c84e <_printf_i+0x32>
 800c838:	2f00      	cmp	r7, #0
 800c83a:	f000 80d8 	beq.w	800c9ee <_printf_i+0x1d2>
 800c83e:	2f58      	cmp	r7, #88	; 0x58
 800c840:	f000 80a3 	beq.w	800c98a <_printf_i+0x16e>
 800c844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c84c:	e03a      	b.n	800c8c4 <_printf_i+0xa8>
 800c84e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c852:	2b15      	cmp	r3, #21
 800c854:	d8f6      	bhi.n	800c844 <_printf_i+0x28>
 800c856:	a101      	add	r1, pc, #4	; (adr r1, 800c85c <_printf_i+0x40>)
 800c858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c85c:	0800c8b5 	.word	0x0800c8b5
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c845 	.word	0x0800c845
 800c868:	0800c845 	.word	0x0800c845
 800c86c:	0800c845 	.word	0x0800c845
 800c870:	0800c845 	.word	0x0800c845
 800c874:	0800c8c9 	.word	0x0800c8c9
 800c878:	0800c845 	.word	0x0800c845
 800c87c:	0800c845 	.word	0x0800c845
 800c880:	0800c845 	.word	0x0800c845
 800c884:	0800c845 	.word	0x0800c845
 800c888:	0800c9d5 	.word	0x0800c9d5
 800c88c:	0800c8f9 	.word	0x0800c8f9
 800c890:	0800c9b7 	.word	0x0800c9b7
 800c894:	0800c845 	.word	0x0800c845
 800c898:	0800c845 	.word	0x0800c845
 800c89c:	0800c9f7 	.word	0x0800c9f7
 800c8a0:	0800c845 	.word	0x0800c845
 800c8a4:	0800c8f9 	.word	0x0800c8f9
 800c8a8:	0800c845 	.word	0x0800c845
 800c8ac:	0800c845 	.word	0x0800c845
 800c8b0:	0800c9bf 	.word	0x0800c9bf
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	1d1a      	adds	r2, r3, #4
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	602a      	str	r2, [r5, #0]
 800c8bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e0a3      	b.n	800ca10 <_printf_i+0x1f4>
 800c8c8:	6820      	ldr	r0, [r4, #0]
 800c8ca:	6829      	ldr	r1, [r5, #0]
 800c8cc:	0606      	lsls	r6, r0, #24
 800c8ce:	f101 0304 	add.w	r3, r1, #4
 800c8d2:	d50a      	bpl.n	800c8ea <_printf_i+0xce>
 800c8d4:	680e      	ldr	r6, [r1, #0]
 800c8d6:	602b      	str	r3, [r5, #0]
 800c8d8:	2e00      	cmp	r6, #0
 800c8da:	da03      	bge.n	800c8e4 <_printf_i+0xc8>
 800c8dc:	232d      	movs	r3, #45	; 0x2d
 800c8de:	4276      	negs	r6, r6
 800c8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8e4:	485e      	ldr	r0, [pc, #376]	; (800ca60 <_printf_i+0x244>)
 800c8e6:	230a      	movs	r3, #10
 800c8e8:	e019      	b.n	800c91e <_printf_i+0x102>
 800c8ea:	680e      	ldr	r6, [r1, #0]
 800c8ec:	602b      	str	r3, [r5, #0]
 800c8ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8f2:	bf18      	it	ne
 800c8f4:	b236      	sxthne	r6, r6
 800c8f6:	e7ef      	b.n	800c8d8 <_printf_i+0xbc>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	6820      	ldr	r0, [r4, #0]
 800c8fc:	1d19      	adds	r1, r3, #4
 800c8fe:	6029      	str	r1, [r5, #0]
 800c900:	0601      	lsls	r1, r0, #24
 800c902:	d501      	bpl.n	800c908 <_printf_i+0xec>
 800c904:	681e      	ldr	r6, [r3, #0]
 800c906:	e002      	b.n	800c90e <_printf_i+0xf2>
 800c908:	0646      	lsls	r6, r0, #25
 800c90a:	d5fb      	bpl.n	800c904 <_printf_i+0xe8>
 800c90c:	881e      	ldrh	r6, [r3, #0]
 800c90e:	4854      	ldr	r0, [pc, #336]	; (800ca60 <_printf_i+0x244>)
 800c910:	2f6f      	cmp	r7, #111	; 0x6f
 800c912:	bf0c      	ite	eq
 800c914:	2308      	moveq	r3, #8
 800c916:	230a      	movne	r3, #10
 800c918:	2100      	movs	r1, #0
 800c91a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c91e:	6865      	ldr	r5, [r4, #4]
 800c920:	60a5      	str	r5, [r4, #8]
 800c922:	2d00      	cmp	r5, #0
 800c924:	bfa2      	ittt	ge
 800c926:	6821      	ldrge	r1, [r4, #0]
 800c928:	f021 0104 	bicge.w	r1, r1, #4
 800c92c:	6021      	strge	r1, [r4, #0]
 800c92e:	b90e      	cbnz	r6, 800c934 <_printf_i+0x118>
 800c930:	2d00      	cmp	r5, #0
 800c932:	d04d      	beq.n	800c9d0 <_printf_i+0x1b4>
 800c934:	4615      	mov	r5, r2
 800c936:	fbb6 f1f3 	udiv	r1, r6, r3
 800c93a:	fb03 6711 	mls	r7, r3, r1, r6
 800c93e:	5dc7      	ldrb	r7, [r0, r7]
 800c940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c944:	4637      	mov	r7, r6
 800c946:	42bb      	cmp	r3, r7
 800c948:	460e      	mov	r6, r1
 800c94a:	d9f4      	bls.n	800c936 <_printf_i+0x11a>
 800c94c:	2b08      	cmp	r3, #8
 800c94e:	d10b      	bne.n	800c968 <_printf_i+0x14c>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	07de      	lsls	r6, r3, #31
 800c954:	d508      	bpl.n	800c968 <_printf_i+0x14c>
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	6861      	ldr	r1, [r4, #4]
 800c95a:	4299      	cmp	r1, r3
 800c95c:	bfde      	ittt	le
 800c95e:	2330      	movle	r3, #48	; 0x30
 800c960:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c964:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c968:	1b52      	subs	r2, r2, r5
 800c96a:	6122      	str	r2, [r4, #16]
 800c96c:	f8cd a000 	str.w	sl, [sp]
 800c970:	464b      	mov	r3, r9
 800c972:	aa03      	add	r2, sp, #12
 800c974:	4621      	mov	r1, r4
 800c976:	4640      	mov	r0, r8
 800c978:	f7ff fee2 	bl	800c740 <_printf_common>
 800c97c:	3001      	adds	r0, #1
 800c97e:	d14c      	bne.n	800ca1a <_printf_i+0x1fe>
 800c980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c984:	b004      	add	sp, #16
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	4835      	ldr	r0, [pc, #212]	; (800ca60 <_printf_i+0x244>)
 800c98c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	f851 6b04 	ldr.w	r6, [r1], #4
 800c998:	6029      	str	r1, [r5, #0]
 800c99a:	061d      	lsls	r5, r3, #24
 800c99c:	d514      	bpl.n	800c9c8 <_printf_i+0x1ac>
 800c99e:	07df      	lsls	r7, r3, #31
 800c9a0:	bf44      	itt	mi
 800c9a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c9a6:	6023      	strmi	r3, [r4, #0]
 800c9a8:	b91e      	cbnz	r6, 800c9b2 <_printf_i+0x196>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	f023 0320 	bic.w	r3, r3, #32
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	2310      	movs	r3, #16
 800c9b4:	e7b0      	b.n	800c918 <_printf_i+0xfc>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	f043 0320 	orr.w	r3, r3, #32
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	2378      	movs	r3, #120	; 0x78
 800c9c0:	4828      	ldr	r0, [pc, #160]	; (800ca64 <_printf_i+0x248>)
 800c9c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9c6:	e7e3      	b.n	800c990 <_printf_i+0x174>
 800c9c8:	0659      	lsls	r1, r3, #25
 800c9ca:	bf48      	it	mi
 800c9cc:	b2b6      	uxthmi	r6, r6
 800c9ce:	e7e6      	b.n	800c99e <_printf_i+0x182>
 800c9d0:	4615      	mov	r5, r2
 800c9d2:	e7bb      	b.n	800c94c <_printf_i+0x130>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	6826      	ldr	r6, [r4, #0]
 800c9d8:	6961      	ldr	r1, [r4, #20]
 800c9da:	1d18      	adds	r0, r3, #4
 800c9dc:	6028      	str	r0, [r5, #0]
 800c9de:	0635      	lsls	r5, r6, #24
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	d501      	bpl.n	800c9e8 <_printf_i+0x1cc>
 800c9e4:	6019      	str	r1, [r3, #0]
 800c9e6:	e002      	b.n	800c9ee <_printf_i+0x1d2>
 800c9e8:	0670      	lsls	r0, r6, #25
 800c9ea:	d5fb      	bpl.n	800c9e4 <_printf_i+0x1c8>
 800c9ec:	8019      	strh	r1, [r3, #0]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	6123      	str	r3, [r4, #16]
 800c9f2:	4615      	mov	r5, r2
 800c9f4:	e7ba      	b.n	800c96c <_printf_i+0x150>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	1d1a      	adds	r2, r3, #4
 800c9fa:	602a      	str	r2, [r5, #0]
 800c9fc:	681d      	ldr	r5, [r3, #0]
 800c9fe:	6862      	ldr	r2, [r4, #4]
 800ca00:	2100      	movs	r1, #0
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7f3 fc24 	bl	8000250 <memchr>
 800ca08:	b108      	cbz	r0, 800ca0e <_printf_i+0x1f2>
 800ca0a:	1b40      	subs	r0, r0, r5
 800ca0c:	6060      	str	r0, [r4, #4]
 800ca0e:	6863      	ldr	r3, [r4, #4]
 800ca10:	6123      	str	r3, [r4, #16]
 800ca12:	2300      	movs	r3, #0
 800ca14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca18:	e7a8      	b.n	800c96c <_printf_i+0x150>
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	462a      	mov	r2, r5
 800ca1e:	4649      	mov	r1, r9
 800ca20:	4640      	mov	r0, r8
 800ca22:	47d0      	blx	sl
 800ca24:	3001      	adds	r0, #1
 800ca26:	d0ab      	beq.n	800c980 <_printf_i+0x164>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	079b      	lsls	r3, r3, #30
 800ca2c:	d413      	bmi.n	800ca56 <_printf_i+0x23a>
 800ca2e:	68e0      	ldr	r0, [r4, #12]
 800ca30:	9b03      	ldr	r3, [sp, #12]
 800ca32:	4298      	cmp	r0, r3
 800ca34:	bfb8      	it	lt
 800ca36:	4618      	movlt	r0, r3
 800ca38:	e7a4      	b.n	800c984 <_printf_i+0x168>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	4649      	mov	r1, r9
 800ca40:	4640      	mov	r0, r8
 800ca42:	47d0      	blx	sl
 800ca44:	3001      	adds	r0, #1
 800ca46:	d09b      	beq.n	800c980 <_printf_i+0x164>
 800ca48:	3501      	adds	r5, #1
 800ca4a:	68e3      	ldr	r3, [r4, #12]
 800ca4c:	9903      	ldr	r1, [sp, #12]
 800ca4e:	1a5b      	subs	r3, r3, r1
 800ca50:	42ab      	cmp	r3, r5
 800ca52:	dcf2      	bgt.n	800ca3a <_printf_i+0x21e>
 800ca54:	e7eb      	b.n	800ca2e <_printf_i+0x212>
 800ca56:	2500      	movs	r5, #0
 800ca58:	f104 0619 	add.w	r6, r4, #25
 800ca5c:	e7f5      	b.n	800ca4a <_printf_i+0x22e>
 800ca5e:	bf00      	nop
 800ca60:	0800ceab 	.word	0x0800ceab
 800ca64:	0800cebc 	.word	0x0800cebc

0800ca68 <memcpy>:
 800ca68:	440a      	add	r2, r1
 800ca6a:	4291      	cmp	r1, r2
 800ca6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ca70:	d100      	bne.n	800ca74 <memcpy+0xc>
 800ca72:	4770      	bx	lr
 800ca74:	b510      	push	{r4, lr}
 800ca76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca7e:	4291      	cmp	r1, r2
 800ca80:	d1f9      	bne.n	800ca76 <memcpy+0xe>
 800ca82:	bd10      	pop	{r4, pc}

0800ca84 <memmove>:
 800ca84:	4288      	cmp	r0, r1
 800ca86:	b510      	push	{r4, lr}
 800ca88:	eb01 0402 	add.w	r4, r1, r2
 800ca8c:	d902      	bls.n	800ca94 <memmove+0x10>
 800ca8e:	4284      	cmp	r4, r0
 800ca90:	4623      	mov	r3, r4
 800ca92:	d807      	bhi.n	800caa4 <memmove+0x20>
 800ca94:	1e43      	subs	r3, r0, #1
 800ca96:	42a1      	cmp	r1, r4
 800ca98:	d008      	beq.n	800caac <memmove+0x28>
 800ca9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caa2:	e7f8      	b.n	800ca96 <memmove+0x12>
 800caa4:	4402      	add	r2, r0
 800caa6:	4601      	mov	r1, r0
 800caa8:	428a      	cmp	r2, r1
 800caaa:	d100      	bne.n	800caae <memmove+0x2a>
 800caac:	bd10      	pop	{r4, pc}
 800caae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cab6:	e7f7      	b.n	800caa8 <memmove+0x24>

0800cab8 <_free_r>:
 800cab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800caba:	2900      	cmp	r1, #0
 800cabc:	d044      	beq.n	800cb48 <_free_r+0x90>
 800cabe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac2:	9001      	str	r0, [sp, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f1a1 0404 	sub.w	r4, r1, #4
 800caca:	bfb8      	it	lt
 800cacc:	18e4      	addlt	r4, r4, r3
 800cace:	f000 f913 	bl	800ccf8 <__malloc_lock>
 800cad2:	4a1e      	ldr	r2, [pc, #120]	; (800cb4c <_free_r+0x94>)
 800cad4:	9801      	ldr	r0, [sp, #4]
 800cad6:	6813      	ldr	r3, [r2, #0]
 800cad8:	b933      	cbnz	r3, 800cae8 <_free_r+0x30>
 800cada:	6063      	str	r3, [r4, #4]
 800cadc:	6014      	str	r4, [r2, #0]
 800cade:	b003      	add	sp, #12
 800cae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cae4:	f000 b90e 	b.w	800cd04 <__malloc_unlock>
 800cae8:	42a3      	cmp	r3, r4
 800caea:	d908      	bls.n	800cafe <_free_r+0x46>
 800caec:	6825      	ldr	r5, [r4, #0]
 800caee:	1961      	adds	r1, r4, r5
 800caf0:	428b      	cmp	r3, r1
 800caf2:	bf01      	itttt	eq
 800caf4:	6819      	ldreq	r1, [r3, #0]
 800caf6:	685b      	ldreq	r3, [r3, #4]
 800caf8:	1949      	addeq	r1, r1, r5
 800cafa:	6021      	streq	r1, [r4, #0]
 800cafc:	e7ed      	b.n	800cada <_free_r+0x22>
 800cafe:	461a      	mov	r2, r3
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	b10b      	cbz	r3, 800cb08 <_free_r+0x50>
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	d9fa      	bls.n	800cafe <_free_r+0x46>
 800cb08:	6811      	ldr	r1, [r2, #0]
 800cb0a:	1855      	adds	r5, r2, r1
 800cb0c:	42a5      	cmp	r5, r4
 800cb0e:	d10b      	bne.n	800cb28 <_free_r+0x70>
 800cb10:	6824      	ldr	r4, [r4, #0]
 800cb12:	4421      	add	r1, r4
 800cb14:	1854      	adds	r4, r2, r1
 800cb16:	42a3      	cmp	r3, r4
 800cb18:	6011      	str	r1, [r2, #0]
 800cb1a:	d1e0      	bne.n	800cade <_free_r+0x26>
 800cb1c:	681c      	ldr	r4, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	6053      	str	r3, [r2, #4]
 800cb22:	4421      	add	r1, r4
 800cb24:	6011      	str	r1, [r2, #0]
 800cb26:	e7da      	b.n	800cade <_free_r+0x26>
 800cb28:	d902      	bls.n	800cb30 <_free_r+0x78>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	6003      	str	r3, [r0, #0]
 800cb2e:	e7d6      	b.n	800cade <_free_r+0x26>
 800cb30:	6825      	ldr	r5, [r4, #0]
 800cb32:	1961      	adds	r1, r4, r5
 800cb34:	428b      	cmp	r3, r1
 800cb36:	bf04      	itt	eq
 800cb38:	6819      	ldreq	r1, [r3, #0]
 800cb3a:	685b      	ldreq	r3, [r3, #4]
 800cb3c:	6063      	str	r3, [r4, #4]
 800cb3e:	bf04      	itt	eq
 800cb40:	1949      	addeq	r1, r1, r5
 800cb42:	6021      	streq	r1, [r4, #0]
 800cb44:	6054      	str	r4, [r2, #4]
 800cb46:	e7ca      	b.n	800cade <_free_r+0x26>
 800cb48:	b003      	add	sp, #12
 800cb4a:	bd30      	pop	{r4, r5, pc}
 800cb4c:	20000f14 	.word	0x20000f14

0800cb50 <sbrk_aligned>:
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	4e0e      	ldr	r6, [pc, #56]	; (800cb8c <sbrk_aligned+0x3c>)
 800cb54:	460c      	mov	r4, r1
 800cb56:	6831      	ldr	r1, [r6, #0]
 800cb58:	4605      	mov	r5, r0
 800cb5a:	b911      	cbnz	r1, 800cb62 <sbrk_aligned+0x12>
 800cb5c:	f000 f8bc 	bl	800ccd8 <_sbrk_r>
 800cb60:	6030      	str	r0, [r6, #0]
 800cb62:	4621      	mov	r1, r4
 800cb64:	4628      	mov	r0, r5
 800cb66:	f000 f8b7 	bl	800ccd8 <_sbrk_r>
 800cb6a:	1c43      	adds	r3, r0, #1
 800cb6c:	d00a      	beq.n	800cb84 <sbrk_aligned+0x34>
 800cb6e:	1cc4      	adds	r4, r0, #3
 800cb70:	f024 0403 	bic.w	r4, r4, #3
 800cb74:	42a0      	cmp	r0, r4
 800cb76:	d007      	beq.n	800cb88 <sbrk_aligned+0x38>
 800cb78:	1a21      	subs	r1, r4, r0
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f8ac 	bl	800ccd8 <_sbrk_r>
 800cb80:	3001      	adds	r0, #1
 800cb82:	d101      	bne.n	800cb88 <sbrk_aligned+0x38>
 800cb84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cb88:	4620      	mov	r0, r4
 800cb8a:	bd70      	pop	{r4, r5, r6, pc}
 800cb8c:	20000f18 	.word	0x20000f18

0800cb90 <_malloc_r>:
 800cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb94:	1ccd      	adds	r5, r1, #3
 800cb96:	f025 0503 	bic.w	r5, r5, #3
 800cb9a:	3508      	adds	r5, #8
 800cb9c:	2d0c      	cmp	r5, #12
 800cb9e:	bf38      	it	cc
 800cba0:	250c      	movcc	r5, #12
 800cba2:	2d00      	cmp	r5, #0
 800cba4:	4607      	mov	r7, r0
 800cba6:	db01      	blt.n	800cbac <_malloc_r+0x1c>
 800cba8:	42a9      	cmp	r1, r5
 800cbaa:	d905      	bls.n	800cbb8 <_malloc_r+0x28>
 800cbac:	230c      	movs	r3, #12
 800cbae:	603b      	str	r3, [r7, #0]
 800cbb0:	2600      	movs	r6, #0
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb8:	4e2e      	ldr	r6, [pc, #184]	; (800cc74 <_malloc_r+0xe4>)
 800cbba:	f000 f89d 	bl	800ccf8 <__malloc_lock>
 800cbbe:	6833      	ldr	r3, [r6, #0]
 800cbc0:	461c      	mov	r4, r3
 800cbc2:	bb34      	cbnz	r4, 800cc12 <_malloc_r+0x82>
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f7ff ffc2 	bl	800cb50 <sbrk_aligned>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	4604      	mov	r4, r0
 800cbd0:	d14d      	bne.n	800cc6e <_malloc_r+0xde>
 800cbd2:	6834      	ldr	r4, [r6, #0]
 800cbd4:	4626      	mov	r6, r4
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d140      	bne.n	800cc5c <_malloc_r+0xcc>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4638      	mov	r0, r7
 800cbe0:	eb04 0803 	add.w	r8, r4, r3
 800cbe4:	f000 f878 	bl	800ccd8 <_sbrk_r>
 800cbe8:	4580      	cmp	r8, r0
 800cbea:	d13a      	bne.n	800cc62 <_malloc_r+0xd2>
 800cbec:	6821      	ldr	r1, [r4, #0]
 800cbee:	3503      	adds	r5, #3
 800cbf0:	1a6d      	subs	r5, r5, r1
 800cbf2:	f025 0503 	bic.w	r5, r5, #3
 800cbf6:	3508      	adds	r5, #8
 800cbf8:	2d0c      	cmp	r5, #12
 800cbfa:	bf38      	it	cc
 800cbfc:	250c      	movcc	r5, #12
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4638      	mov	r0, r7
 800cc02:	f7ff ffa5 	bl	800cb50 <sbrk_aligned>
 800cc06:	3001      	adds	r0, #1
 800cc08:	d02b      	beq.n	800cc62 <_malloc_r+0xd2>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	442b      	add	r3, r5
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	e00e      	b.n	800cc30 <_malloc_r+0xa0>
 800cc12:	6822      	ldr	r2, [r4, #0]
 800cc14:	1b52      	subs	r2, r2, r5
 800cc16:	d41e      	bmi.n	800cc56 <_malloc_r+0xc6>
 800cc18:	2a0b      	cmp	r2, #11
 800cc1a:	d916      	bls.n	800cc4a <_malloc_r+0xba>
 800cc1c:	1961      	adds	r1, r4, r5
 800cc1e:	42a3      	cmp	r3, r4
 800cc20:	6025      	str	r5, [r4, #0]
 800cc22:	bf18      	it	ne
 800cc24:	6059      	strne	r1, [r3, #4]
 800cc26:	6863      	ldr	r3, [r4, #4]
 800cc28:	bf08      	it	eq
 800cc2a:	6031      	streq	r1, [r6, #0]
 800cc2c:	5162      	str	r2, [r4, r5]
 800cc2e:	604b      	str	r3, [r1, #4]
 800cc30:	4638      	mov	r0, r7
 800cc32:	f104 060b 	add.w	r6, r4, #11
 800cc36:	f000 f865 	bl	800cd04 <__malloc_unlock>
 800cc3a:	f026 0607 	bic.w	r6, r6, #7
 800cc3e:	1d23      	adds	r3, r4, #4
 800cc40:	1af2      	subs	r2, r6, r3
 800cc42:	d0b6      	beq.n	800cbb2 <_malloc_r+0x22>
 800cc44:	1b9b      	subs	r3, r3, r6
 800cc46:	50a3      	str	r3, [r4, r2]
 800cc48:	e7b3      	b.n	800cbb2 <_malloc_r+0x22>
 800cc4a:	6862      	ldr	r2, [r4, #4]
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	bf0c      	ite	eq
 800cc50:	6032      	streq	r2, [r6, #0]
 800cc52:	605a      	strne	r2, [r3, #4]
 800cc54:	e7ec      	b.n	800cc30 <_malloc_r+0xa0>
 800cc56:	4623      	mov	r3, r4
 800cc58:	6864      	ldr	r4, [r4, #4]
 800cc5a:	e7b2      	b.n	800cbc2 <_malloc_r+0x32>
 800cc5c:	4634      	mov	r4, r6
 800cc5e:	6876      	ldr	r6, [r6, #4]
 800cc60:	e7b9      	b.n	800cbd6 <_malloc_r+0x46>
 800cc62:	230c      	movs	r3, #12
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	4638      	mov	r0, r7
 800cc68:	f000 f84c 	bl	800cd04 <__malloc_unlock>
 800cc6c:	e7a1      	b.n	800cbb2 <_malloc_r+0x22>
 800cc6e:	6025      	str	r5, [r4, #0]
 800cc70:	e7de      	b.n	800cc30 <_malloc_r+0xa0>
 800cc72:	bf00      	nop
 800cc74:	20000f14 	.word	0x20000f14

0800cc78 <_realloc_r>:
 800cc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7c:	4680      	mov	r8, r0
 800cc7e:	4614      	mov	r4, r2
 800cc80:	460e      	mov	r6, r1
 800cc82:	b921      	cbnz	r1, 800cc8e <_realloc_r+0x16>
 800cc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	4611      	mov	r1, r2
 800cc8a:	f7ff bf81 	b.w	800cb90 <_malloc_r>
 800cc8e:	b92a      	cbnz	r2, 800cc9c <_realloc_r+0x24>
 800cc90:	f7ff ff12 	bl	800cab8 <_free_r>
 800cc94:	4625      	mov	r5, r4
 800cc96:	4628      	mov	r0, r5
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	f000 f838 	bl	800cd10 <_malloc_usable_size_r>
 800cca0:	4284      	cmp	r4, r0
 800cca2:	4607      	mov	r7, r0
 800cca4:	d802      	bhi.n	800ccac <_realloc_r+0x34>
 800cca6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccaa:	d812      	bhi.n	800ccd2 <_realloc_r+0x5a>
 800ccac:	4621      	mov	r1, r4
 800ccae:	4640      	mov	r0, r8
 800ccb0:	f7ff ff6e 	bl	800cb90 <_malloc_r>
 800ccb4:	4605      	mov	r5, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d0ed      	beq.n	800cc96 <_realloc_r+0x1e>
 800ccba:	42bc      	cmp	r4, r7
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	bf28      	it	cs
 800ccc2:	463a      	movcs	r2, r7
 800ccc4:	f7ff fed0 	bl	800ca68 <memcpy>
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4640      	mov	r0, r8
 800cccc:	f7ff fef4 	bl	800cab8 <_free_r>
 800ccd0:	e7e1      	b.n	800cc96 <_realloc_r+0x1e>
 800ccd2:	4635      	mov	r5, r6
 800ccd4:	e7df      	b.n	800cc96 <_realloc_r+0x1e>
	...

0800ccd8 <_sbrk_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4d06      	ldr	r5, [pc, #24]	; (800ccf4 <_sbrk_r+0x1c>)
 800ccdc:	2300      	movs	r3, #0
 800ccde:	4604      	mov	r4, r0
 800cce0:	4608      	mov	r0, r1
 800cce2:	602b      	str	r3, [r5, #0]
 800cce4:	f7f5 f998 	bl	8002018 <_sbrk>
 800cce8:	1c43      	adds	r3, r0, #1
 800ccea:	d102      	bne.n	800ccf2 <_sbrk_r+0x1a>
 800ccec:	682b      	ldr	r3, [r5, #0]
 800ccee:	b103      	cbz	r3, 800ccf2 <_sbrk_r+0x1a>
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	bd38      	pop	{r3, r4, r5, pc}
 800ccf4:	20000f1c 	.word	0x20000f1c

0800ccf8 <__malloc_lock>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	; (800cd00 <__malloc_lock+0x8>)
 800ccfa:	f000 b811 	b.w	800cd20 <__retarget_lock_acquire_recursive>
 800ccfe:	bf00      	nop
 800cd00:	20000f20 	.word	0x20000f20

0800cd04 <__malloc_unlock>:
 800cd04:	4801      	ldr	r0, [pc, #4]	; (800cd0c <__malloc_unlock+0x8>)
 800cd06:	f000 b80c 	b.w	800cd22 <__retarget_lock_release_recursive>
 800cd0a:	bf00      	nop
 800cd0c:	20000f20 	.word	0x20000f20

0800cd10 <_malloc_usable_size_r>:
 800cd10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd14:	1f18      	subs	r0, r3, #4
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfbc      	itt	lt
 800cd1a:	580b      	ldrlt	r3, [r1, r0]
 800cd1c:	18c0      	addlt	r0, r0, r3
 800cd1e:	4770      	bx	lr

0800cd20 <__retarget_lock_acquire_recursive>:
 800cd20:	4770      	bx	lr

0800cd22 <__retarget_lock_release_recursive>:
 800cd22:	4770      	bx	lr

0800cd24 <_init>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	bf00      	nop
 800cd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd2a:	bc08      	pop	{r3}
 800cd2c:	469e      	mov	lr, r3
 800cd2e:	4770      	bx	lr

0800cd30 <_fini>:
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd32:	bf00      	nop
 800cd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd36:	bc08      	pop	{r3}
 800cd38:	469e      	mov	lr, r3
 800cd3a:	4770      	bx	lr
