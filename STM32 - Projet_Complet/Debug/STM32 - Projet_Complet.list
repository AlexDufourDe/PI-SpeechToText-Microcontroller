
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db98  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139b0  0800dd90  0800dd90  0001dd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021740  08021740  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  08021740  08021740  00031740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021748  08021748  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021748  08021748  00031748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802174c  0802174c  0003174c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08021750  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018bdc  20000070  080217c0  00040070  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20018c4c  080217c0  00048c4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a60  00000000  00000000  0004009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ad5  00000000  00000000  00063afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  000695d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  0006b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035acf  00000000  00000000  0006c808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000295b6  00000000  00000000  000a22d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a566  00000000  00000000  000cb88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  001f5df3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd4  00000000  00000000  001f5eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  001fca88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	0800dd78 	.word	0x0800dd78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	0800dd78 	.word	0x0800dd78

08000238 <arm_bitreversal_32>:
 8000238:	1c4b      	adds	r3, r1, #1
 800023a:	2b01      	cmp	r3, #1
 800023c:	bf98      	it	ls
 800023e:	4770      	bxls	lr
 8000240:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000244:	1c91      	adds	r1, r2, #2
 8000246:	089b      	lsrs	r3, r3, #2

08000248 <arm_bitreversal_32_0>:
 8000248:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000250:	880a      	ldrh	r2, [r1, #0]
 8000252:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000256:	4480      	add	r8, r0
 8000258:	4481      	add	r9, r0
 800025a:	4402      	add	r2, r0
 800025c:	4484      	add	ip, r0
 800025e:	f8d9 7000 	ldr.w	r7, [r9]
 8000262:	f8d8 6000 	ldr.w	r6, [r8]
 8000266:	6815      	ldr	r5, [r2, #0]
 8000268:	f8dc 4000 	ldr.w	r4, [ip]
 800026c:	f8c9 6000 	str.w	r6, [r9]
 8000270:	f8c8 7000 	str.w	r7, [r8]
 8000274:	f8cc 5000 	str.w	r5, [ip]
 8000278:	6014      	str	r4, [r2, #0]
 800027a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800027e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000282:	6855      	ldr	r5, [r2, #4]
 8000284:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000288:	f8c9 6004 	str.w	r6, [r9, #4]
 800028c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000290:	f8cc 5004 	str.w	r5, [ip, #4]
 8000294:	6054      	str	r4, [r2, #4]
 8000296:	3108      	adds	r1, #8
 8000298:	3b01      	subs	r3, #1
 800029a:	d1d5      	bne.n	8000248 <arm_bitreversal_32_0>
 800029c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a0:	4770      	bx	lr

080002a2 <arm_bitreversal_16>:
 80002a2:	1c4b      	adds	r3, r1, #1
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	bf98      	it	ls
 80002a8:	4770      	bxls	lr
 80002aa:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	1c91      	adds	r1, r2, #2
 80002b0:	089b      	lsrs	r3, r3, #2

080002b2 <arm_bitreversal_16_0>:
 80002b2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002b6:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002ba:	880a      	ldrh	r2, [r1, #0]
 80002bc:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c0:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002c4:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002c8:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002cc:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d0:	f8d9 7000 	ldr.w	r7, [r9]
 80002d4:	f8d8 6000 	ldr.w	r6, [r8]
 80002d8:	6815      	ldr	r5, [r2, #0]
 80002da:	f8dc 4000 	ldr.w	r4, [ip]
 80002de:	f8c9 6000 	str.w	r6, [r9]
 80002e2:	f8c8 7000 	str.w	r7, [r8]
 80002e6:	f8cc 5000 	str.w	r5, [ip]
 80002ea:	6014      	str	r4, [r2, #0]
 80002ec:	3108      	adds	r1, #8
 80002ee:	3b01      	subs	r3, #1
 80002f0:	d1df      	bne.n	80002b2 <arm_bitreversal_16_0>
 80002f2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002f6:	4770      	bx	lr

080002f8 <strlen>:
 80002f8:	4603      	mov	r3, r0
 80002fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d1fb      	bne.n	80002fa <strlen+0x2>
 8000302:	1a18      	subs	r0, r3, r0
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr

08000308 <__aeabi_uldivmod>:
 8000308:	b953      	cbnz	r3, 8000320 <__aeabi_uldivmod+0x18>
 800030a:	b94a      	cbnz	r2, 8000320 <__aeabi_uldivmod+0x18>
 800030c:	2900      	cmp	r1, #0
 800030e:	bf08      	it	eq
 8000310:	2800      	cmpeq	r0, #0
 8000312:	bf1c      	itt	ne
 8000314:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000318:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800031c:	f000 b974 	b.w	8000608 <__aeabi_idiv0>
 8000320:	f1ad 0c08 	sub.w	ip, sp, #8
 8000324:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000328:	f000 f806 	bl	8000338 <__udivmoddi4>
 800032c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000334:	b004      	add	sp, #16
 8000336:	4770      	bx	lr

08000338 <__udivmoddi4>:
 8000338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800033c:	9d08      	ldr	r5, [sp, #32]
 800033e:	4604      	mov	r4, r0
 8000340:	468e      	mov	lr, r1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d14d      	bne.n	80003e2 <__udivmoddi4+0xaa>
 8000346:	428a      	cmp	r2, r1
 8000348:	4694      	mov	ip, r2
 800034a:	d969      	bls.n	8000420 <__udivmoddi4+0xe8>
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	b152      	cbz	r2, 8000368 <__udivmoddi4+0x30>
 8000352:	fa01 f302 	lsl.w	r3, r1, r2
 8000356:	f1c2 0120 	rsb	r1, r2, #32
 800035a:	fa20 f101 	lsr.w	r1, r0, r1
 800035e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000362:	ea41 0e03 	orr.w	lr, r1, r3
 8000366:	4094      	lsls	r4, r2
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	0c21      	lsrs	r1, r4, #16
 800036e:	fbbe f6f8 	udiv	r6, lr, r8
 8000372:	fa1f f78c 	uxth.w	r7, ip
 8000376:	fb08 e316 	mls	r3, r8, r6, lr
 800037a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800037e:	fb06 f107 	mul.w	r1, r6, r7
 8000382:	4299      	cmp	r1, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x64>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800038e:	f080 811f 	bcs.w	80005d0 <__udivmoddi4+0x298>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 811c 	bls.w	80005d0 <__udivmoddi4+0x298>
 8000398:	3e02      	subs	r6, #2
 800039a:	4463      	add	r3, ip
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a4:	fb08 3310 	mls	r3, r8, r0, r3
 80003a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003ac:	fb00 f707 	mul.w	r7, r0, r7
 80003b0:	42a7      	cmp	r7, r4
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x92>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003bc:	f080 810a 	bcs.w	80005d4 <__udivmoddi4+0x29c>
 80003c0:	42a7      	cmp	r7, r4
 80003c2:	f240 8107 	bls.w	80005d4 <__udivmoddi4+0x29c>
 80003c6:	4464      	add	r4, ip
 80003c8:	3802      	subs	r0, #2
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	1be4      	subs	r4, r4, r7
 80003d0:	2600      	movs	r6, #0
 80003d2:	b11d      	cbz	r5, 80003dc <__udivmoddi4+0xa4>
 80003d4:	40d4      	lsrs	r4, r2
 80003d6:	2300      	movs	r3, #0
 80003d8:	e9c5 4300 	strd	r4, r3, [r5]
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0xc2>
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	f000 80ef 	beq.w	80005ca <__udivmoddi4+0x292>
 80003ec:	2600      	movs	r6, #0
 80003ee:	e9c5 0100 	strd	r0, r1, [r5]
 80003f2:	4630      	mov	r0, r6
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	fab3 f683 	clz	r6, r3
 80003fe:	2e00      	cmp	r6, #0
 8000400:	d14a      	bne.n	8000498 <__udivmoddi4+0x160>
 8000402:	428b      	cmp	r3, r1
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xd4>
 8000406:	4282      	cmp	r2, r0
 8000408:	f200 80f9 	bhi.w	80005fe <__udivmoddi4+0x2c6>
 800040c:	1a84      	subs	r4, r0, r2
 800040e:	eb61 0303 	sbc.w	r3, r1, r3
 8000412:	2001      	movs	r0, #1
 8000414:	469e      	mov	lr, r3
 8000416:	2d00      	cmp	r5, #0
 8000418:	d0e0      	beq.n	80003dc <__udivmoddi4+0xa4>
 800041a:	e9c5 4e00 	strd	r4, lr, [r5]
 800041e:	e7dd      	b.n	80003dc <__udivmoddi4+0xa4>
 8000420:	b902      	cbnz	r2, 8000424 <__udivmoddi4+0xec>
 8000422:	deff      	udf	#255	; 0xff
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	2a00      	cmp	r2, #0
 800042a:	f040 8092 	bne.w	8000552 <__udivmoddi4+0x21a>
 800042e:	eba1 010c 	sub.w	r1, r1, ip
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2601      	movs	r6, #1
 800043c:	0c20      	lsrs	r0, r4, #16
 800043e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000442:	fb07 1113 	mls	r1, r7, r3, r1
 8000446:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044a:	fb0e f003 	mul.w	r0, lr, r3
 800044e:	4288      	cmp	r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x12c>
 8000452:	eb1c 0101 	adds.w	r1, ip, r1
 8000456:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x12a>
 800045c:	4288      	cmp	r0, r1
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2c0>
 8000462:	4643      	mov	r3, r8
 8000464:	1a09      	subs	r1, r1, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb1 f0f7 	udiv	r0, r1, r7
 800046c:	fb07 1110 	mls	r1, r7, r0, r1
 8000470:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x156>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x154>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2ca>
 800048c:	4608      	mov	r0, r1
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000496:	e79c      	b.n	80003d2 <__udivmoddi4+0x9a>
 8000498:	f1c6 0720 	rsb	r7, r6, #32
 800049c:	40b3      	lsls	r3, r6
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa20 f407 	lsr.w	r4, r0, r7
 80004aa:	fa01 f306 	lsl.w	r3, r1, r6
 80004ae:	431c      	orrs	r4, r3
 80004b0:	40f9      	lsrs	r1, r7
 80004b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b6:	fa00 f306 	lsl.w	r3, r0, r6
 80004ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80004be:	0c20      	lsrs	r0, r4, #16
 80004c0:	fa1f fe8c 	uxth.w	lr, ip
 80004c4:	fb09 1118 	mls	r1, r9, r8, r1
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	fb08 f00e 	mul.w	r0, r8, lr
 80004d0:	4288      	cmp	r0, r1
 80004d2:	fa02 f206 	lsl.w	r2, r2, r6
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b8>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2bc>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2bc>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	1a09      	subs	r1, r1, r0
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004f8:	fb09 1110 	mls	r1, r9, r0, r1
 80004fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000500:	fb00 fe0e 	mul.w	lr, r0, lr
 8000504:	458e      	cmp	lr, r1
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1e2>
 8000508:	eb1c 0101 	adds.w	r1, ip, r1
 800050c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2b4>
 8000512:	458e      	cmp	lr, r1
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2b4>
 8000516:	3802      	subs	r0, #2
 8000518:	4461      	add	r1, ip
 800051a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800051e:	fba0 9402 	umull	r9, r4, r0, r2
 8000522:	eba1 010e 	sub.w	r1, r1, lr
 8000526:	42a1      	cmp	r1, r4
 8000528:	46c8      	mov	r8, r9
 800052a:	46a6      	mov	lr, r4
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x2a4>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x2a0>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x212>
 8000532:	ebb3 0208 	subs.w	r2, r3, r8
 8000536:	eb61 010e 	sbc.w	r1, r1, lr
 800053a:	fa01 f707 	lsl.w	r7, r1, r7
 800053e:	fa22 f306 	lsr.w	r3, r2, r6
 8000542:	40f1      	lsrs	r1, r6
 8000544:	431f      	orrs	r7, r3
 8000546:	e9c5 7100 	strd	r7, r1, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	f1c2 0320 	rsb	r3, r2, #32
 8000556:	40d8      	lsrs	r0, r3
 8000558:	fa0c fc02 	lsl.w	ip, ip, r2
 800055c:	fa21 f303 	lsr.w	r3, r1, r3
 8000560:	4091      	lsls	r1, r2
 8000562:	4301      	orrs	r1, r0
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000570:	fb07 3610 	mls	r6, r7, r0, r3
 8000574:	0c0b      	lsrs	r3, r1, #16
 8000576:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057a:	fb00 f60e 	mul.w	r6, r0, lr
 800057e:	429e      	cmp	r6, r3
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x260>
 8000586:	eb1c 0303 	adds.w	r3, ip, r3
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b8>
 8000590:	429e      	cmp	r6, r3
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b8>
 8000594:	3802      	subs	r0, #2
 8000596:	4463      	add	r3, ip
 8000598:	1b9b      	subs	r3, r3, r6
 800059a:	b289      	uxth	r1, r1
 800059c:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a0:	fb07 3316 	mls	r3, r7, r6, r3
 80005a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a8:	fb06 f30e 	mul.w	r3, r6, lr
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x28a>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2b0>
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2b0>
 80005be:	3e02      	subs	r6, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	1ac9      	subs	r1, r1, r3
 80005c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0x104>
 80005ca:	462e      	mov	r6, r5
 80005cc:	4628      	mov	r0, r5
 80005ce:	e705      	b.n	80003dc <__udivmoddi4+0xa4>
 80005d0:	4606      	mov	r6, r0
 80005d2:	e6e3      	b.n	800039c <__udivmoddi4+0x64>
 80005d4:	4618      	mov	r0, r3
 80005d6:	e6f8      	b.n	80003ca <__udivmoddi4+0x92>
 80005d8:	454b      	cmp	r3, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f8>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e4:	3801      	subs	r0, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f8>
 80005e8:	4646      	mov	r6, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x28a>
 80005ec:	4620      	mov	r0, r4
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1e2>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x260>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b8>
 80005f8:	3b02      	subs	r3, #2
 80005fa:	4461      	add	r1, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x12c>
 80005fe:	4630      	mov	r0, r6
 8000600:	e709      	b.n	8000416 <__udivmoddi4+0xde>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x156>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <MX_ADC1_Init+0x9c>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC1_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC1_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_ADC1_Init+0x98>)
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <MX_ADC1_Init+0xa0>)
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC1_Init+0x98>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC1_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC1_Init+0x98>)
 800066e:	f001 ff81 	bl	8002574 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fd92 	bl	80011a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_ADC1_Init+0xa4>)
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC1_Init+0x98>)
 800068e:	f001 ffb5 	bl	80025fc <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fd82 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	40012000 	.word	0x40012000
 80006ac:	0f000001 	.word	0x0f000001
 80006b0:	10000012 	.word	0x10000012

080006b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_ADC_MspInit+0x38>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d10b      	bne.n	80006de <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_ADC_MspInit+0x3c>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <HAL_ADC_MspInit+0x3c>)
 80006cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d0:	6453      	str	r3, [r2, #68]	; 0x44
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <HAL_ADC_MspInit+0x3c>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40012000 	.word	0x40012000
 80006f0:	40023800 	.word	0x40023800

080006f4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_CRC_Init+0x3c>)
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <MX_CRC_Init+0x40>)
 80006fc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_CRC_Init+0x3c>)
 8000700:	2200      	movs	r2, #0
 8000702:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_CRC_Init+0x3c>)
 8000706:	2200      	movs	r2, #0
 8000708:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_CRC_Init+0x3c>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_CRC_Init+0x3c>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_CRC_Init+0x3c>)
 8000718:	2201      	movs	r2, #1
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_CRC_Init+0x3c>)
 800071e:	f002 facf 	bl	8002cc0 <HAL_CRC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000728:	f000 fd3a 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000d4 	.word	0x200000d4
 8000734:	40023000 	.word	0x40023000

08000738 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_CRC_MspInit+0x38>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10b      	bne.n	8000762 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_CRC_MspInit+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a09      	ldr	r2, [pc, #36]	; (8000774 <HAL_CRC_MspInit+0x3c>)
 8000750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <HAL_CRC_MspInit+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023000 	.word	0x40023000
 8000774:	40023800 	.word	0x40023800

08000778 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800077c:	4b63      	ldr	r3, [pc, #396]	; (800090c <MX_DFSDM1_Init+0x194>)
 800077e:	4a64      	ldr	r2, [pc, #400]	; (8000910 <MX_DFSDM1_Init+0x198>)
 8000780:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000782:	4b62      	ldr	r3, [pc, #392]	; (800090c <MX_DFSDM1_Init+0x194>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000788:	4b60      	ldr	r3, [pc, #384]	; (800090c <MX_DFSDM1_Init+0x194>)
 800078a:	2201      	movs	r2, #1
 800078c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <MX_DFSDM1_Init+0x194>)
 8000790:	2201      	movs	r2, #1
 8000792:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000794:	4b5d      	ldr	r3, [pc, #372]	; (800090c <MX_DFSDM1_Init+0x194>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 800079a:	4b5c      	ldr	r3, [pc, #368]	; (800090c <MX_DFSDM1_Init+0x194>)
 800079c:	2200      	movs	r2, #0
 800079e:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80007a0:	4b5a      	ldr	r3, [pc, #360]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007ac:	4b57      	ldr	r3, [pc, #348]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b2:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007b4:	4b55      	ldr	r3, [pc, #340]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007b6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 80007bc:	4b53      	ldr	r3, [pc, #332]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007be:	22b0      	movs	r2, #176	; 0xb0
 80007c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80007c2:	4b52      	ldr	r3, [pc, #328]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007c8:	4850      	ldr	r0, [pc, #320]	; (800090c <MX_DFSDM1_Init+0x194>)
 80007ca:	f002 fc23 	bl	8003014 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007ce:	4b51      	ldr	r3, [pc, #324]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007d0:	4a51      	ldr	r2, [pc, #324]	; (8000918 <MX_DFSDM1_Init+0x1a0>)
 80007d2:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80007d4:	4b4f      	ldr	r3, [pc, #316]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007dc:	2201      	movs	r2, #1
 80007de:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007e6:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 80007f2:	4b48      	ldr	r3, [pc, #288]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007f8:	4b46      	ldr	r3, [pc, #280]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007fe:	4b45      	ldr	r3, [pc, #276]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 8000800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000804:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000806:	4b43      	ldr	r3, [pc, #268]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 8000808:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800080c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 8000810:	22b0      	movs	r2, #176	; 0xb0
 8000812:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000814:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 8000816:	2201      	movs	r2, #1
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 800081c:	f002 fbfa 	bl	8003014 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000820:	4b3e      	ldr	r3, [pc, #248]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000822:	4a3f      	ldr	r2, [pc, #252]	; (8000920 <MX_DFSDM1_Init+0x1a8>)
 8000824:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000826:	4b3d      	ldr	r3, [pc, #244]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000828:	2201      	movs	r2, #1
 800082a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800082c:	4b3b      	ldr	r3, [pc, #236]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 800082e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000832:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000834:	4b39      	ldr	r3, [pc, #228]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000836:	2204      	movs	r2, #4
 8000838:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800083a:	4b38      	ldr	r3, [pc, #224]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000840:	4b36      	ldr	r3, [pc, #216]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000846:	4b35      	ldr	r3, [pc, #212]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800084e:	4b33      	ldr	r3, [pc, #204]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000854:	4b31      	ldr	r3, [pc, #196]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000856:	2204      	movs	r2, #4
 8000858:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800085a:	4b30      	ldr	r3, [pc, #192]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000862:	2201      	movs	r2, #1
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000868:	2200      	movs	r2, #0
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 800086e:	2200      	movs	r2, #0
 8000870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000872:	482a      	ldr	r0, [pc, #168]	; (800091c <MX_DFSDM1_Init+0x1a4>)
 8000874:	f002 fb0e 	bl	8002e94 <HAL_DFSDM_ChannelInit>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 800087e:	f000 fc8f 	bl	80011a0 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000882:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 8000884:	4a28      	ldr	r2, [pc, #160]	; (8000928 <MX_DFSDM1_Init+0x1b0>)
 8000886:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 800088a:	2201      	movs	r2, #1
 800088c:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800088e:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 8000890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000894:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 8000898:	2204      	movs	r2, #4
 800089a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008c2:	220a      	movs	r2, #10
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_DFSDM1_Init+0x1ac>)
 80008d4:	f002 fade 	bl	8002e94 <HAL_DFSDM_ChannelInit>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 80008de:	f000 fc5f 	bl	80011a0 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008e2:	2201      	movs	r2, #1
 80008e4:	4911      	ldr	r1, [pc, #68]	; (800092c <MX_DFSDM1_Init+0x1b4>)
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <MX_DFSDM1_Init+0x194>)
 80008e8:	f002 fc6e 	bl	80031c8 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 80008ec:	490f      	ldr	r1, [pc, #60]	; (800092c <MX_DFSDM1_Init+0x1b4>)
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <MX_DFSDM1_Init+0x194>)
 80008f0:	f002 fcb0 	bl	8003254 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008f4:	2201      	movs	r2, #1
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <MX_DFSDM1_Init+0x1b4>)
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 80008fa:	f002 fc65 	bl	80031c8 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80008fe:	2101      	movs	r1, #1
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_DFSDM1_Init+0x19c>)
 8000902:	f002 fca7 	bl	8003254 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200000f8 	.word	0x200000f8
 8000910:	40017500 	.word	0x40017500
 8000914:	2000014c 	.word	0x2000014c
 8000918:	40017580 	.word	0x40017580
 800091c:	200001a0 	.word	0x200001a0
 8000920:	40017400 	.word	0x40017400
 8000924:	200001d8 	.word	0x200001d8
 8000928:	40017420 	.word	0x40017420
 800092c:	00010002 	.word	0x00010002

08000930 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000948:	4b63      	ldr	r3, [pc, #396]	; (8000ad8 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d145      	bne.n	80009dc <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000950:	4b62      	ldr	r3, [pc, #392]	; (8000adc <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	4a61      	ldr	r2, [pc, #388]	; (8000adc <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000958:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800095a:	4b60      	ldr	r3, [pc, #384]	; (8000adc <HAL_DFSDM_FilterMspInit+0x1ac>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d10b      	bne.n	800097a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000962:	4b5f      	ldr	r3, [pc, #380]	; (8000ae0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a5e      	ldr	r2, [pc, #376]	; (8000ae0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b5c      	ldr	r3, [pc, #368]	; (8000ae0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4b59      	ldr	r3, [pc, #356]	; (8000ae0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a58      	ldr	r2, [pc, #352]	; (8000ae0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80009a2:	230a      	movs	r3, #10
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	484d      	ldr	r0, [pc, #308]	; (8000ae4 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80009ae:	f003 f9a3 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009b2:	2308      	movs	r3, #8
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80009c2:	2303      	movs	r3, #3
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <HAL_DFSDM_FilterMspInit+0x1b4>)
 80009ce:	f003 f993 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a3f      	ldr	r2, [pc, #252]	; (8000ad8 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009da:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a41      	ldr	r2, [pc, #260]	; (8000ae8 <HAL_DFSDM_FilterMspInit+0x1b8>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d137      	bne.n	8000a56 <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009e8:	4a41      	ldr	r2, [pc, #260]	; (8000af0 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80009ea:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009f2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000a00:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a06:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a08:	4b38      	ldr	r3, [pc, #224]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a10:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a1e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000a20:	4b32      	ldr	r3, [pc, #200]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a26:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a28:	4b30      	ldr	r3, [pc, #192]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a2e:	482f      	ldr	r0, [pc, #188]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a30:	f002 fdbc 	bl	80035ac <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000a3a:	f000 fbb1 	bl	80011a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a2a      	ldr	r2, [pc, #168]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a27      	ldr	r2, [pc, #156]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d137      	bne.n	8000ad0 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a62:	4a26      	ldr	r2, [pc, #152]	; (8000afc <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000a64:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6c:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a6e:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a80:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a88:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a90:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000aa8:	4813      	ldr	r0, [pc, #76]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aaa:	f002 fd7f 	bl	80035ac <HAL_DMA_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000ab4:	f000 fb74 	bl	80011a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000abe:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200002d4 	.word	0x200002d4
 8000adc:	200002d0 	.word	0x200002d0
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020c00 	.word	0x40020c00
 8000ae8:	40017500 	.word	0x40017500
 8000aec:	20000210 	.word	0x20000210
 8000af0:	40026410 	.word	0x40026410
 8000af4:	40017580 	.word	0x40017580
 8000af8:	20000270 	.word	0x20000270
 8000afc:	40026488 	.word	0x40026488

08000b00 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d145      	bne.n	8000bac <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a24      	ldr	r2, [pc, #144]	; (8000bb8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b2a:	4b23      	ldr	r3, [pc, #140]	; (8000bb8 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10b      	bne.n	8000b4a <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b62:	2340      	movs	r3, #64	; 0x40
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b72:	230a      	movs	r3, #10
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4810      	ldr	r0, [pc, #64]	; (8000bc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b7e:	f003 f8bb 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b82:	2308      	movs	r3, #8
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b92:	2303      	movs	r3, #3
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4808      	ldr	r0, [pc, #32]	; (8000bc0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b9e:	f003 f8ab 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a02      	ldr	r2, [pc, #8]	; (8000bb4 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000baa:	6013      	str	r3, [r2, #0]
  }
}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002d4 	.word	0x200002d4
 8000bb8:	200002d0 	.word	0x200002d0
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_DMA_Init+0x78>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_DMA_Init+0x78>)
 8000bd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_DMA_Init+0x78>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2038      	movs	r0, #56	; 0x38
 8000be8:	f002 f833 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bec:	2038      	movs	r0, #56	; 0x38
 8000bee:	f002 f84c 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2039      	movs	r0, #57	; 0x39
 8000bf8:	f002 f82b 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bfc:	2039      	movs	r0, #57	; 0x39
 8000bfe:	f002 f844 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	203b      	movs	r0, #59	; 0x3b
 8000c08:	f002 f823 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c0c:	203b      	movs	r0, #59	; 0x3b
 8000c0e:	f002 f83c 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2044      	movs	r0, #68	; 0x44
 8000c18:	f002 f81b 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c1c:	2044      	movs	r0, #68	; 0x44
 8000c1e:	f002 f834 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2045      	movs	r0, #69	; 0x45
 8000c28:	f002 f813 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c2c:	2045      	movs	r0, #69	; 0x45
 8000c2e:	f002 f82c 	bl	8002c8a <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b5d      	ldr	r3, [pc, #372]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a5c      	ldr	r2, [pc, #368]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b5a      	ldr	r3, [pc, #360]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	4b57      	ldr	r3, [pc, #348]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a56      	ldr	r2, [pc, #344]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b54      	ldr	r3, [pc, #336]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b51      	ldr	r3, [pc, #324]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a50      	ldr	r2, [pc, #320]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b4e      	ldr	r3, [pc, #312]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a4a      	ldr	r2, [pc, #296]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb6:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	4b3f      	ldr	r3, [pc, #252]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b3c      	ldr	r3, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce6:	4b39      	ldr	r3, [pc, #228]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a38      	ldr	r2, [pc, #224]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a32      	ldr	r2, [pc, #200]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a2c      	ldr	r2, [pc, #176]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <MX_GPIO_Init+0x18c>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d34:	4826      	ldr	r0, [pc, #152]	; (8000dd0 <MX_GPIO_Init+0x190>)
 8000d36:	f003 f9a3 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	210b      	movs	r1, #11
 8000d3e:	4825      	ldr	r0, [pc, #148]	; (8000dd4 <MX_GPIO_Init+0x194>)
 8000d40:	f003 f99e 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481f      	ldr	r0, [pc, #124]	; (8000dd8 <MX_GPIO_Init+0x198>)
 8000d5c:	f002 ffcc 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000d60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4815      	ldr	r0, [pc, #84]	; (8000dd0 <MX_GPIO_Init+0x190>)
 8000d7a:	f002 ffbd 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_GPIO_Init+0x194>)
 8000d96:	f002 ffaf 	bl	8003cf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	480b      	ldr	r0, [pc, #44]	; (8000ddc <MX_GPIO_Init+0x19c>)
 8000db0:	f002 ffa2 	bl	8003cf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	2028      	movs	r0, #40	; 0x28
 8000dba:	f001 ff4a 	bl	8002c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dbe:	2028      	movs	r0, #40	; 0x28
 8000dc0:	f001 ff63 	bl	8002c8a <HAL_NVIC_EnableIRQ>

}
 8000dc4:	bf00      	nop
 8000dc6:	3738      	adds	r7, #56	; 0x38
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40022000 	.word	0x40022000
 8000dd4:	40022400 	.word	0x40022400
 8000dd8:	40020800 	.word	0x40020800
 8000ddc:	40020400 	.word	0x40020400

08000de0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000de4:	f3bf 8f4f 	dsb	sy
}
 8000de8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dea:	f3bf 8f6f 	isb	sy
}
 8000dee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <SCB_EnableICache+0x48>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000df8:	f3bf 8f4f 	dsb	sy
}
 8000dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dfe:	f3bf 8f6f 	isb	sy
}
 8000e02:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <SCB_EnableICache+0x48>)
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <SCB_EnableICache+0x48>)
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e10:	f3bf 8f4f 	dsb	sy
}
 8000e14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e16:	f3bf 8f6f 	isb	sy
}
 8000e1a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e32:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e3a:	f3bf 8f4f 	dsb	sy
}
 8000e3e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e46:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	0b5b      	lsrs	r3, r3, #13
 8000e4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e50:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e5a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	015a      	lsls	r2, r3, #5
 8000e60:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e64:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e6a:	4911      	ldr	r1, [pc, #68]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	1e5a      	subs	r2, r3, #1
 8000e76:	60ba      	str	r2, [r7, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1ef      	bne.n	8000e5c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	60fa      	str	r2, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1e5      	bne.n	8000e52 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e86:	f3bf 8f4f 	dsb	sy
}
 8000e8a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <SCB_EnableDCache+0x84>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e98:	f3bf 8f4f 	dsb	sy
}
 8000e9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9e:	f3bf 8f6f 	isb	sy
}
 8000ea2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b2      	sub	sp, #200	; 0xc8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	char input_directory[10] = "wav";
 8000eba:	4b5a      	ldr	r3, [pc, #360]	; (8001024 <main+0x170>)
 8000ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ec0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	809a      	strh	r2, [r3, #4]
	DIR dj;         /* Directory object */
	FILINFO fno;    /* File information */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000eca:	f7ff ff89 	bl	8000de0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ece:	f7ff ffad 	bl	8000e2c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f001 facd 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f8c1 	bl	800105c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eda:	f000 f931 	bl	8001140 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ede:	f7ff feaf 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee2:	f7ff fe6f 	bl	8000bc4 <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000ee6:	f7ff fc47 	bl	8000778 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000eea:	f000 f9f9 	bl	80012e0 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000eee:	f7ff fb8d 	bl	800060c <MX_ADC1_Init>
  MX_UART4_Init();
 8000ef2:	f000 fcd1 	bl	8001898 <MX_UART4_Init>
  MX_CRC_Init();
 8000ef6:	f7ff fbfd 	bl	80006f4 <MX_CRC_Init>
  MX_RTC_Init();
 8000efa:	f000 f957 	bl	80011ac <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000efe:	f000 faf9 	bl	80014f4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f02:	f007 fca3 	bl	800884c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f0a:	4947      	ldr	r1, [pc, #284]	; (8001028 <main+0x174>)
 8000f0c:	4847      	ldr	r0, [pc, #284]	; (800102c <main+0x178>)
 8000f0e:	f002 f9d1 	bl	80032b4 <HAL_DFSDM_FilterRegularStart_DMA>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <main+0x68>
    {
      Error_Handler();
 8000f18:	f000 f942 	bl	80011a0 <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f20:	4943      	ldr	r1, [pc, #268]	; (8001030 <main+0x17c>)
 8000f22:	4844      	ldr	r0, [pc, #272]	; (8001034 <main+0x180>)
 8000f24:	f002 f9c6 	bl	80032b4 <HAL_DFSDM_FilterRegularStart_DMA>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <main+0x7e>
    {
      Error_Handler();
 8000f2e:	f000 f937 	bl	80011a0 <Error_Handler>
    }


	SDInit();
 8000f32:	f00a fdeb 	bl	800bb0c <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	483e      	ldr	r0, [pc, #248]	; (8001038 <main+0x184>)
 8000f3e:	f003 f89f 	bl	8004080 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000f42:	2201      	movs	r2, #1
 8000f44:	2101      	movs	r1, #1
 8000f46:	483d      	ldr	r0, [pc, #244]	; (800103c <main+0x188>)
 8000f48:	f003 f89a 	bl	8004080 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2102      	movs	r1, #2
 8000f50:	483a      	ldr	r0, [pc, #232]	; (800103c <main+0x188>)
 8000f52:	f003 f895 	bl	8004080 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4838      	ldr	r0, [pc, #224]	; (800103c <main+0x188>)
 8000f5c:	f003 f890 	bl	8004080 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000f60:	f00a fcc4 	bl	800b8ec <Preprocessing_Init>

	 if (f_chdir("/dir1")!= FR_OK)
 8000f64:	4836      	ldr	r0, [pc, #216]	; (8001040 <main+0x18c>)
 8000f66:	f00a fb25 	bl	800b5b4 <f_chdir>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <main+0xc0>
	 {
		 Error_Handler();
 8000f70:	f000 f916 	bl	80011a0 <Error_Handler>
	 }
	 fr = f_findfirst(&dj, &fno, "", "*.WAV"); /* Start to search for photo files */
 8000f74:	1d39      	adds	r1, r7, #4
 8000f76:	f107 001c 	add.w	r0, r7, #28
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <main+0x190>)
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <main+0x194>)
 8000f7e:	f00a fc3b 	bl	800b7f8 <f_findfirst>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for the temper button to be pressed
	  while (fr == FR_OK && fno.fname[0]){
 8000f88:	e044      	b.n	8001014 <main+0x160>
		  openFile(fno.fname);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	3309      	adds	r3, #9
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a fde8 	bl	800bb64 <openFile>
		  readFile(pHeaderBuff, 44);
 8000f94:	212c      	movs	r1, #44	; 0x2c
 8000f96:	482d      	ldr	r0, [pc, #180]	; (800104c <main+0x198>)
 8000f98:	f00a fe10 	bl	800bbbc <readFile>
		  BufferCtl.fptr = *((uint32_t*) &pHeaderBuff[40]);
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <main+0x19c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <main+0x1a0>)
 8000fa2:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 8000fa6:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
		  readFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.fptr);
 8000faa:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <main+0x1a0>)
 8000fac:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000fb0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <main+0x1a0>)
 8000fb8:	f00a fe00 	bl	800bbbc <readFile>

		  //////////////////////////////////////
		  //getting the mel spectrogram
		  AudioPreprocessing_RunMethod4(BufferCtl.pcm_buff, (uint32_t*)spectrogram_output, BufferCtl.fptr);
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <main+0x1a0>)
 8000fbe:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8000fc2:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4923      	ldr	r1, [pc, #140]	; (8001058 <main+0x1a4>)
 8000fca:	4822      	ldr	r0, [pc, #136]	; (8001054 <main+0x1a0>)
 8000fcc:	f00a fd16 	bl	800b9fc <AudioPreprocessing_RunMethod4>
		  fno.fname[strlen(fno.fname)-4] = 0;
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	3309      	adds	r3, #9
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f98f 	bl	80002f8 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	3b04      	subs	r3, #4
 8000fde:	33c8      	adds	r3, #200	; 0xc8
 8000fe0:	443b      	add	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f803 2cbb 	strb.w	r2, [r3, #-187]
		  //write to the sd card
		  createFile((char*)fno.fname);
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	3309      	adds	r3, #9
 8000fec:	4618      	mov	r0, r3
 8000fee:	f00a fda1 	bl	800bb34 <createFile>
		  writeToFile((uint8_t*)spectrogram_output, 4*MEL_SPEC_SIZE);
 8000ff2:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <main+0x1a4>)
 8000ff8:	f00a fdcc 	bl	800bb94 <writeToFile>
		  SDclose();
 8000ffc:	f00a fdf2 	bl	800bbe4 <SDclose>
		  //////////////////////////////////////

		  fr = f_findnext(&dj, &fno);               /* Search for next item */
 8001000:	1d3a      	adds	r2, r7, #4
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f00a fbcd 	bl	800b7a8 <f_findnext>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	  while (fr == FR_OK && fno.fname[0]){
 8001014:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1fb      	bne.n	8001014 <main+0x160>
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1b3      	bne.n	8000f8a <main+0xd6>
 8001022:	e7f7      	b.n	8001014 <main+0x160>
 8001024:	00766177 	.word	0x00766177
 8001028:	200022dc 	.word	0x200022dc
 800102c:	2000014c 	.word	0x2000014c
 8001030:	200002dc 	.word	0x200002dc
 8001034:	200000f8 	.word	0x200000f8
 8001038:	40022000 	.word	0x40022000
 800103c:	40022400 	.word	0x40022400
 8001040:	0800dd90 	.word	0x0800dd90
 8001044:	0800dd98 	.word	0x0800dd98
 8001048:	0800dda0 	.word	0x0800dda0
 800104c:	20018c20 	.word	0x20018c20
 8001050:	20018c48 	.word	0x20018c48
 8001054:	2000910c 	.word	0x2000910c
 8001058:	20010e20 	.word	0x20010e20

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2234      	movs	r2, #52	; 0x34
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00b feb4 	bl	800cdd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <SystemClock_Config+0xdc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a2c      	ldr	r2, [pc, #176]	; (8001138 <SystemClock_Config+0xdc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <SystemClock_Config+0xdc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xe0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xe0>)
 800109e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xe0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010b0:	2309      	movs	r3, #9
 80010b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ba:	2301      	movs	r3, #1
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010be:	2302      	movs	r3, #2
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010c8:	2319      	movs	r3, #25
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80010cc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010d6:	2309      	movs	r3, #9
 80010d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010da:	2302      	movs	r3, #2
 80010dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 f84e 	bl	8004184 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010ee:	f000 f857 	bl	80011a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f2:	f002 fff7 	bl	80040e4 <HAL_PWREx_EnableOverDrive>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010fc:	f000 f850 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800110c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2107      	movs	r1, #7
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fade 	bl	80046e0 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800112a:	f000 f839 	bl	80011a0 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0a4      	sub	sp, #144	; 0x90
 8001144:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001146:	463b      	mov	r3, r7
 8001148:	2290      	movs	r2, #144	; 0x90
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f00b fe43 	bl	800cdd8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <PeriphCommonClock_Config+0x5c>)
 8001154:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8001156:	f240 13ad 	movw	r3, #429	; 0x1ad
 800115a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001160:	2306      	movs	r3, #6
 8001162:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001168:	2306      	movs	r3, #6
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001170:	2300      	movs	r3, #0
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001178:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001182:	463b      	mov	r3, r7
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fc91 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001190:	f000 f806 	bl	80011a0 <Error_Handler>
  }
}
 8001194:	bf00      	nop
 8001196:	3790      	adds	r7, #144	; 0x90
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	18300000 	.word	0x18300000

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_RTC_Init+0xd0>)
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <MX_RTC_Init+0xd4>)
 80011c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <MX_RTC_Init+0xd0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_RTC_Init+0xd0>)
 80011d2:	227f      	movs	r2, #127	; 0x7f
 80011d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <MX_RTC_Init+0xd0>)
 80011d8:	22ff      	movs	r2, #255	; 0xff
 80011da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011dc:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_RTC_Init+0xd0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_RTC_Init+0xd0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011e8:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_RTC_Init+0xd0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ee:	4823      	ldr	r0, [pc, #140]	; (800127c <MX_RTC_Init+0xd0>)
 80011f0:	f004 f9f6 	bl	80055e0 <HAL_RTC_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011fa:	f7ff ffd1 	bl	80011a0 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 80011fe:	2100      	movs	r1, #0
 8001200:	481e      	ldr	r0, [pc, #120]	; (800127c <MX_RTC_Init+0xd0>)
 8001202:	f004 fc4b 	bl	8005a9c <HAL_RTCEx_BKUPRead>
 8001206:	4603      	mov	r3, r0
 8001208:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800120c:	4293      	cmp	r3, r2
 800120e:	d02e      	beq.n	800126e <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001210:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001214:	2100      	movs	r1, #0
 8001216:	4819      	ldr	r0, [pc, #100]	; (800127c <MX_RTC_Init+0xd0>)
 8001218:	f004 fc26 	bl	8005a68 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 800121c:	2314      	movs	r3, #20
 800121e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 8001220:	2329      	movs	r3, #41	; 0x29
 8001222:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 8001224:	2300      	movs	r3, #0
 8001226:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2201      	movs	r2, #1
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_RTC_Init+0xd0>)
 8001238:	f004 fa56 	bl	80056e8 <HAL_RTC_SetTime>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001242:	f7ff ffad 	bl	80011a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001246:	2301      	movs	r3, #1
 8001248:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 800124a:	2301      	movs	r3, #1
 800124c:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 800124e:	2323      	movs	r3, #35	; 0x23
 8001250:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8001252:	2323      	movs	r3, #35	; 0x23
 8001254:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2201      	movs	r2, #1
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_RTC_Init+0xd0>)
 800125e:	f004 fadd 	bl	800581c <HAL_RTC_SetDate>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001268:	f7ff ff9a 	bl	80011a0 <Error_Handler>
  }
  return;
 800126c:	e001      	b.n	8001272 <MX_RTC_Init+0xc6>
			return;
 800126e:	bf00      	nop
 8001270:	e000      	b.n	8001274 <MX_RTC_Init+0xc8>
  return;
 8001272:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200042ec 	.word	0x200042ec
 8001280:	40002800 	.word	0x40002800

08001284 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0a6      	sub	sp, #152	; 0x98
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	2290      	movs	r2, #144	; 0x90
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f00b fd9f 	bl	800cdd8 <memset>
  if(rtcHandle->Instance==RTC)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <HAL_RTC_MspInit+0x54>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d114      	bne.n	80012ce <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012a4:	2320      	movs	r3, #32
 80012a6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fbfa 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012be:	f7ff ff6f 	bl	80011a0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_RTC_MspInit+0x58>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_RTC_MspInit+0x58>)
 80012c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012cc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012ce:	bf00      	nop
 80012d0:	3798      	adds	r7, #152	; 0x98
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40002800 	.word	0x40002800
 80012dc:	40023800 	.word	0x40023800

080012e0 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <MX_SAI2_Init+0xb0>)
 80012e6:	4a2b      	ldr	r2, [pc, #172]	; (8001394 <MX_SAI2_Init+0xb4>)
 80012e8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_SAI2_Init+0xb0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <MX_SAI2_Init+0xb0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_SAI2_Init+0xb0>)
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <MX_SAI2_Init+0xb0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001302:	4b23      	ldr	r3, [pc, #140]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001304:	2200      	movs	r2, #0
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_SAI2_Init+0xb0>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001314:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001316:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_SAI2_Init+0xb0>)
 800131e:	2201      	movs	r2, #1
 8001320:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_SAI2_Init+0xb8>)
 8001326:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_SAI2_Init+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001336:	2200      	movs	r2, #0
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_SAI2_Init+0xb0>)
 800133c:	2200      	movs	r2, #0
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001342:	2220      	movs	r2, #32
 8001344:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001348:	2210      	movs	r2, #16
 800134a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_SAI2_Init+0xb0>)
 800134e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001352:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001356:	2200      	movs	r2, #0
 8001358:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_SAI2_Init+0xb0>)
 800135c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001360:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001364:	2200      	movs	r2, #0
 8001366:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SAI2_Init+0xb0>)
 800136a:	2200      	movs	r2, #0
 800136c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001370:	2202      	movs	r2, #2
 8001372:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SAI2_Init+0xb0>)
 8001376:	2203      	movs	r2, #3
 8001378:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SAI2_Init+0xb0>)
 800137c:	f004 fba6 	bl	8005acc <HAL_SAI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8001386:	f7ff ff0b 	bl	80011a0 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000430c 	.word	0x2000430c
 8001394:	40015c24 	.word	0x40015c24
 8001398:	0002ee00 	.word	0x0002ee00

0800139c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <HAL_SAI_MspInit+0x138>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f040 808e 	bne.w	80014cc <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_SAI_MspInit+0x13c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10b      	bne.n	80013d0 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80013b8:	4b48      	ldr	r3, [pc, #288]	; (80014dc <HAL_SAI_MspInit+0x140>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	4a47      	ldr	r2, [pc, #284]	; (80014dc <HAL_SAI_MspInit+0x140>)
 80013be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013c2:	6453      	str	r3, [r2, #68]	; 0x44
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_SAI_MspInit+0x140>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80013d0:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <HAL_SAI_MspInit+0x13c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <HAL_SAI_MspInit+0x13c>)
 80013d8:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013ea:	230a      	movs	r3, #10
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4619      	mov	r1, r3
 80013f4:	483a      	ldr	r0, [pc, #232]	; (80014e0 <HAL_SAI_MspInit+0x144>)
 80013f6:	f002 fc7f 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800140c:	230a      	movs	r3, #10
 800140e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	4833      	ldr	r0, [pc, #204]	; (80014e4 <HAL_SAI_MspInit+0x148>)
 8001418:	f002 fc6e 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800142c:	230a      	movs	r3, #10
 800142e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	482c      	ldr	r0, [pc, #176]	; (80014e8 <HAL_SAI_MspInit+0x14c>)
 8001438:	f002 fc5e 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800143c:	2304      	movs	r3, #4
 800143e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 800144c:	2308      	movs	r3, #8
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4619      	mov	r1, r3
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <HAL_SAI_MspInit+0x14c>)
 8001458:	f002 fc4e 	bl	8003cf8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_SAI_MspInit+0x150>)
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_SAI_MspInit+0x154>)
 8001460:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001464:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 8001468:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_SAI_MspInit+0x150>)
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147c:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800147e:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001484:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148c:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001494:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_SAI_MspInit+0x150>)
 8001498:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800149c:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_SAI_MspInit+0x150>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80014a4:	4811      	ldr	r0, [pc, #68]	; (80014ec <HAL_SAI_MspInit+0x150>)
 80014a6:	f002 f881 	bl	80035ac <HAL_DMA_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80014b0:	f7ff fe76 	bl	80011a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <HAL_SAI_MspInit+0x150>)
 80014b8:	671a      	str	r2, [r3, #112]	; 0x70
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_SAI_MspInit+0x150>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_SAI_MspInit+0x150>)
 80014c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_SAI_MspInit+0x150>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40015c24 	.word	0x40015c24
 80014d8:	200043f0 	.word	0x200043f0
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021800 	.word	0x40021800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	20004390 	.word	0x20004390
 80014f0:	40026428 	.word	0x40026428

080014f4 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 80014fa:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <MX_SDMMC1_SD_Init+0x3c>)
 80014fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <MX_SDMMC1_SD_Init+0x38>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	200043f4 	.word	0x200043f4
 8001530:	40012c00 	.word	0x40012c00

08001534 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ae      	sub	sp, #184	; 0xb8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2290      	movs	r2, #144	; 0x90
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f00b fc3f 	bl	800cdd8 <memset>
  if(sdHandle->Instance==SDMMC1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a74      	ldr	r2, [pc, #464]	; (8001730 <HAL_SD_MspInit+0x1fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f040 80e0 	bne.w	8001726 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001566:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800156a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fa95 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001588:	f7ff fe0a 	bl	80011a0 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800158c:	4b69      	ldr	r3, [pc, #420]	; (8001734 <HAL_SD_MspInit+0x200>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	4a68      	ldr	r2, [pc, #416]	; (8001734 <HAL_SD_MspInit+0x200>)
 8001592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001596:	6453      	str	r3, [r2, #68]	; 0x44
 8001598:	4b66      	ldr	r3, [pc, #408]	; (8001734 <HAL_SD_MspInit+0x200>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	4b63      	ldr	r3, [pc, #396]	; (8001734 <HAL_SD_MspInit+0x200>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a62      	ldr	r2, [pc, #392]	; (8001734 <HAL_SD_MspInit+0x200>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30
 80015b0:	4b60      	ldr	r3, [pc, #384]	; (8001734 <HAL_SD_MspInit+0x200>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_SD_MspInit+0x200>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a5c      	ldr	r2, [pc, #368]	; (8001734 <HAL_SD_MspInit+0x200>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <HAL_SD_MspInit+0x200>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80015d4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015ee:	230c      	movs	r3, #12
 80015f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015f8:	4619      	mov	r1, r3
 80015fa:	484f      	ldr	r0, [pc, #316]	; (8001738 <HAL_SD_MspInit+0x204>)
 80015fc:	f002 fb7c 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001600:	2304      	movs	r3, #4
 8001602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001618:	230c      	movs	r3, #12
 800161a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001622:	4619      	mov	r1, r3
 8001624:	4845      	ldr	r0, [pc, #276]	; (800173c <HAL_SD_MspInit+0x208>)
 8001626:	f002 fb67 	bl	8003cf8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800162c:	4a45      	ldr	r2, [pc, #276]	; (8001744 <HAL_SD_MspInit+0x210>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001632:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001636:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001640:	2200      	movs	r2, #0
 8001642:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001644:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001646:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800164a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800164c:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800164e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001652:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001654:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800165c:	4b38      	ldr	r3, [pc, #224]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800165e:	2220      	movs	r2, #32
 8001660:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001668:	4b35      	ldr	r3, [pc, #212]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800166a:	2204      	movs	r2, #4
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001670:	2203      	movs	r2, #3
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001676:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800167e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001684:	482e      	ldr	r0, [pc, #184]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001686:	f001 ff91 	bl	80035ac <HAL_DMA_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001690:	f7ff fd86 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <HAL_SD_MspInit+0x20c>)
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
 800169a:	4a29      	ldr	r2, [pc, #164]	; (8001740 <HAL_SD_MspInit+0x20c>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016a2:	4a2a      	ldr	r2, [pc, #168]	; (800174c <HAL_SD_MspInit+0x218>)
 80016a4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ac:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016b0:	2240      	movs	r2, #64	; 0x40
 80016b2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016c8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016d4:	2220      	movs	r2, #32
 80016d6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016e6:	2203      	movs	r2, #3
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016ec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80016fa:	4813      	ldr	r0, [pc, #76]	; (8001748 <HAL_SD_MspInit+0x214>)
 80016fc:	f001 ff56 	bl	80035ac <HAL_DMA_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001706:	f7ff fd4b 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_SD_MspInit+0x214>)
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <HAL_SD_MspInit+0x214>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2031      	movs	r0, #49	; 0x31
 800171c:	f001 fa99 	bl	8002c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001720:	2031      	movs	r0, #49	; 0x31
 8001722:	f001 fab2 	bl	8002c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001726:	bf00      	nop
 8001728:	37b8      	adds	r7, #184	; 0xb8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40012c00 	.word	0x40012c00
 8001734:	40023800 	.word	0x40023800
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	20004478 	.word	0x20004478
 8001744:	400264a0 	.word	0x400264a0
 8001748:	200044d8 	.word	0x200044d8
 800174c:	40026458 	.word	0x40026458

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <HAL_MspInit+0x44>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_MspInit+0x44>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x44>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x44>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x44>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e4:	f000 fe82 	bl	80024ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80017f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017f4:	f002 fc5e 	bl	80040b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <SDMMC1_IRQHandler+0x10>)
 8001802:	f004 fd99 	bl	8006338 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200043f4 	.word	0x200043f4

08001810 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <DMA2_Stream0_IRQHandler+0x10>)
 8001816:	f001 fff9 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000210 	.word	0x20000210

08001824 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <DMA2_Stream1_IRQHandler+0x10>)
 800182a:	f001 ffef 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20004390 	.word	0x20004390

08001838 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <DMA2_Stream3_IRQHandler+0x10>)
 800183e:	f001 ffe5 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200044d8 	.word	0x200044d8

0800184c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <DMA2_Stream5_IRQHandler+0x10>)
 8001852:	f001 ffdb 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000270 	.word	0x20000270

08001860 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <DMA2_Stream6_IRQHandler+0x10>)
 8001866:	f001 ffd1 	bl	800380c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20004478 	.word	0x20004478

08001874 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_UART4_Init+0x58>)
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <MX_UART4_Init+0x5c>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_UART4_Init+0x58>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_UART4_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_UART4_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_UART4_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_UART4_Init+0x58>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_UART4_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_UART4_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_UART4_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_UART4_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_UART4_Init+0x58>)
 80018dc:	f005 fdd7 	bl	800748e <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80018e6:	f7ff fc5b 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20004538 	.word	0x20004538
 80018f4:	40004c00 	.word	0x40004c00

080018f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0ae      	sub	sp, #184	; 0xb8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2290      	movs	r2, #144	; 0x90
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f00b fa5d 	bl	800cdd8 <memset>
  if(uartHandle->Instance==UART4)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_UART_MspInit+0xf4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d15d      	bne.n	80019e4 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001928:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800192e:	2300      	movs	r3, #0
 8001930:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4618      	mov	r0, r3
 8001938:	f003 f8b8 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001942:	f7ff fc2d 	bl	80011a0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 800194c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a1d      	ldr	r2, [pc, #116]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_UART_MspInit+0xf8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800198e:	2301      	movs	r3, #1
 8001990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019a6:	2308      	movs	r3, #8
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4810      	ldr	r0, [pc, #64]	; (80019f4 <HAL_UART_MspInit+0xfc>)
 80019b4:	f002 f9a0 	bl	8003cf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80019d2:	2306      	movs	r3, #6
 80019d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019dc:	4619      	mov	r1, r3
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <HAL_UART_MspInit+0x100>)
 80019e0:	f002 f98a 	bl	8003cf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80019e4:	bf00      	nop
 80019e6:	37b8      	adds	r7, #184	; 0xb8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40004c00 	.word	0x40004c00
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40020000 	.word	0x40020000

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a00:	480d      	ldr	r0, [pc, #52]	; (8001a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a02:	490e      	ldr	r1, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a18:	4c0b      	ldr	r4, [pc, #44]	; (8001a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a26:	f7ff ff25 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f00b f9b1 	bl	800cd90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fa41 	bl	8000eb4 <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a40:	08021750 	.word	0x08021750
  ldr r2, =_sbss
 8001a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a48:	20018c4c 	.word	0x20018c4c

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>

08001a4e <buf_to_float>:
 * @param      *pInSignal  points to input signal buffer
 * @param      *pOutSignal points to output signal buffer
 * @param      len         signal length
 */
void buf_to_float(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b087      	sub	sp, #28
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e012      	b.n	8001a86 <buf_to_float+0x38>
  {
    pOutSignal[i] = (float32_t) pInSignal[i];
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	4413      	add	r3, r2
 8001a74:	ee07 1a90 	vmov	s15, r1
 8001a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7c:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3e8      	bcc.n	8001a60 <buf_to_float+0x12>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6899      	ldr	r1, [r3, #8]
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	68b8      	ldr	r0, [r7, #8]
 8001ac4:	f00a fe26 	bl	800c714 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	18d0      	adds	r0, r2, r3
 8001ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f00b f97d 	bl	800cdd8 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6818      	ldr	r0, [r3, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6a3a      	ldr	r2, [r7, #32]
 8001ae6:	68b9      	ldr	r1, [r7, #8]
 8001ae8:	f00a f958 	bl	800bd9c <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	ed93 7a00 	vldr	s14, [r3]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afc:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	3304      	adds	r3, #4
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	f103 0008 	add.w	r0, r3, #8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	1d19      	adds	r1, r3, #4
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f00a fd98 	bl	800c664 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	791b      	ldrb	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d12c      	bne.n	8001ba4 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b4e:	e023      	b.n	8001b98 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	440b      	add	r3, r1
 8001b62:	617a      	str	r2, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001b66:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	db09      	blt.n	8001b88 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001b74:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b78:	f00b fad2 	bl	800d120 <sqrtf>
 8001b7c:	eef0 7a40 	vmov.f32	s15, s0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001b86:	e004      	b.n	8001b92 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001b90:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b94:	3301      	adds	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d3d5      	bcc.n	8001b50 <SpectrogramColumn+0xb4>
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3730      	adds	r7, #48	; 0x30
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b08f      	sub	sp, #60	; 0x3c
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff5a 	bl	8001a9c <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6979      	ldr	r1, [r7, #20]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fa49 	bl	800208a <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001bfc:	e012      	b.n	8001c24 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	edd3 6a00 	vldr	s13, [r3]
 8001c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	3301      	adds	r3, #1
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
 8001c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3e8      	bcc.n	8001bfe <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c30:	e014      	b.n	8001c5c <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 8001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	d806      	bhi.n	8001c56 <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c54:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	3301      	adds	r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d3e6      	bcc.n	8001c32 <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d14a      	bne.n	8001d02 <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c70:	e018      	b.n	8001ca4 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 8001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	f00b fa1f 	bl	800d0c4 <log10f>
 8001c86:	eef0 7a40 	vmov.f32	s15, s0
 8001c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3e2      	bcc.n	8001c72 <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb0:	e022      	b.n	8001cf8 <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cc2:	eef1 7a67 	vneg.f32	s15, s15
 8001cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d504      	bpl.n	8001cda <LogMelSpectrogramColumn+0x12e>
 8001cd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd4:	eef1 7a67 	vneg.f32	s15, s15
 8001cd8:	e005      	b.n	8001ce6 <LogMelSpectrogramColumn+0x13a>
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3d8      	bcc.n	8001cb2 <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 8001d00:	e01b      	b.n	8001d3a <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
 8001d06:	e014      	b.n	8001d32 <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	18d4      	adds	r4, r2, r3
 8001d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d20:	f00b f96a 	bl	800cff8 <logf>
 8001d24:	eef0 7a40 	vmov.f32	s15, s0
 8001d28:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	3301      	adds	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3e6      	bcc.n	8001d08 <LogMelSpectrogramColumn+0x15c>
}
 8001d3a:	bf00      	nop
 8001d3c:	373c      	adds	r7, #60	; 0x3c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}

08001d42 <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b0a4      	sub	sp, #144	; 0x90
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	330c      	adds	r3, #12
 8001d78:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001d98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001da2:	f000 f9c7 	bl	8002134 <MelScale>
 8001da6:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001daa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001dae:	4618      	mov	r0, r3
 8001db0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001db4:	f000 f9be 	bl	8002134 <MelScale>
 8001db8:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001dbc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001dc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dca:	3301      	adds	r3, #1
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001dea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e0c:	e133      	b.n	8002076 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001e0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d044      	beq.n	8001e9e <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e26:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e32:	4618      	mov	r0, r3
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	f000 f9ec 	bl	8002214 <InverseMelScale>
 8001e3c:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8001e40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e42:	3301      	adds	r3, #1
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e4c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e60:	4618      	mov	r0, r3
 8001e62:	eeb0 0a67 	vmov.f32	s0, s15
 8001e66:	f000 f9d5 	bl	8002214 <InverseMelScale>
 8001e6a:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8001e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e70:	3302      	adds	r3, #2
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e8e:	4618      	mov	r0, r3
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	f000 f9be 	bl	8002214 <InverseMelScale>
 8001e98:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8001e9c:	e02e      	b.n	8001efc <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 8001e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8001ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ec8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8001edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ede:	3302      	adds	r3, #2
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ee8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8001efc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001f00:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8001f0c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001f10:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f18:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f30:	e098      	b.n	8002064 <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 8001f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00b      	beq.n	8001f50 <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8001f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8001f4e:	e011      	b.n	8001f74 <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8001f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f66:	4618      	mov	r0, r3
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	f000 f8e2 	bl	8002134 <MelScale>
 8001f70:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8001f74:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001f78:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8001f84:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001f88:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f90:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8001f94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f98:	eef1 6a67 	vneg.f32	s13, s15
 8001f9c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa4:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8001fa8:	edd7 6a06 	vldr	s13, [r7, #24]
 8001fac:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb4:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8001fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d502      	bpl.n	8001fd0 <MelFilterbank_Init+0x28e>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8001fce:	e001      	b.n	8001fd4 <MelFilterbank_Init+0x292>
      else min = upper;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 8001fd4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001fd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	dd2f      	ble.n	8002042 <MelFilterbank_Init+0x300>
      {
        weight = min;
 8001fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 8001fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d013      	beq.n	8002014 <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8001fec:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ff0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001ff4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ff8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002000:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 8002004:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002008:	edd7 7a03 	vldr	s15, [r7, #12]
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 8002014:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002018:	1d1a      	adds	r2, r3, #4
 800201a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800201e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002020:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 8002022:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202a:	d102      	bne.n	8002032 <MelFilterbank_Init+0x2f0>
          start_index = j;
 800202c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800202e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 8002032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8002038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002040:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 8002042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002048:	4413      	add	r3, r2
 800204a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800204e:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 8002050:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002056:	4413      	add	r3, r2
 8002058:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800205c:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800205e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002060:	3301      	adds	r3, #1
 8002062:	667b      	str	r3, [r7, #100]	; 0x64
 8002064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800206a:	429a      	cmp	r2, r3
 800206c:	f4ff af61 	bcc.w	8001f32 <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 8002070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002072:	3301      	adds	r3, #1
 8002074:	66bb      	str	r3, [r7, #104]	; 0x68
 8002076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207a:	429a      	cmp	r2, r3
 800207c:	f4ff aec7 	bcc.w	8001e0e <MelFilterbank_Init+0xcc>
    }
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3790      	adds	r7, #144	; 0x90
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 800208a:	b480      	push	{r7}
 800208c:	b08d      	sub	sp, #52	; 0x34
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e034      	b.n	800211e <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	4413      	add	r3, r2
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4413      	add	r3, r2
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80020d2:	8a7b      	ldrh	r3, [r7, #18]
 80020d4:	623b      	str	r3, [r7, #32]
 80020d6:	e015      	b.n	8002104 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4413      	add	r3, r2
 80020e0:	ed93 7a00 	vldr	s14, [r3]
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	1d1a      	adds	r2, r3, #4
 80020e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	3301      	adds	r3, #1
 8002102:	623b      	str	r3, [r7, #32]
 8002104:	8a3b      	ldrh	r3, [r7, #16]
 8002106:	6a3a      	ldr	r2, [r7, #32]
 8002108:	429a      	cmp	r2, r3
 800210a:	d9e5      	bls.n	80020d8 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002116:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	3301      	adds	r3, #1
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	429a      	cmp	r2, r3
 8002124:	d3c6      	bcc.n	80020b4 <MelFilterbank+0x2a>
  }
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	3734      	adds	r7, #52	; 0x34
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
 800213a:	ed87 0a01 	vstr	s0, [r7, #4]
 800213e:	4603      	mov	r3, r0
 8002140:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d042      	beq.n	80021ce <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <MelScale+0xcc>)
 8002150:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 8002152:	ed97 7a01 	vldr	s14, [r7, #4]
 8002156:	edd7 7a06 	vldr	s15, [r7, #24]
 800215a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800215e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002166:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MelScale+0xd0>)
 800216c:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800216e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002172:	edd7 7a06 	vldr	s15, [r7, #24]
 8002176:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217a:	ed97 7a05 	vldr	s14, [r7, #20]
 800217e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002182:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <MelScale+0xd4>)
 8002188:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 800218a:	ed97 7a01 	vldr	s14, [r7, #4]
 800218e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	db15      	blt.n	80021c8 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800219c:	ed97 7a01 	vldr	s14, [r7, #4]
 80021a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80021a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021a8:	eeb0 0a66 	vmov.f32	s0, s13
 80021ac:	f00a ff24 	bl	800cff8 <logf>
 80021b0:	eef0 6a40 	vmov.f32	s13, s0
 80021b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80021b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80021c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c4:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 80021c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80021cc:	e013      	b.n	80021f6 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 80021ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80021d2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800220c <MelScale+0xd8>
 80021d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	f00a ff07 	bl	800cff8 <logf>
 80021ea:	eef0 7a40 	vmov.f32	s15, s0
 80021ee:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002210 <MelScale+0xdc>
 80021f2:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80021f6:	eeb0 0a67 	vmov.f32	s0, s15
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	42855555 	.word	0x42855555
 8002204:	447a0000 	.word	0x447a0000
 8002208:	3d8ccdbb 	.word	0x3d8ccdbb
 800220c:	442f0000 	.word	0x442f0000
 8002210:	448ce000 	.word	0x448ce000

08002214 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	ed87 0a01 	vstr	s0, [r7, #4]
 800221e:	4603      	mov	r3, r0
 8002220:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d042      	beq.n	80022ae <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <InverseMelScale+0xcc>)
 8002230:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 8002232:	ed97 7a05 	vldr	s14, [r7, #20]
 8002236:	edd7 7a01 	vldr	s15, [r7, #4]
 800223a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <InverseMelScale+0xd0>)
 800224c:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800224e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002252:	edd7 7a06 	vldr	s15, [r7, #24]
 8002256:	ee77 6a67 	vsub.f32	s13, s14, s15
 800225a:	ed97 7a05 	vldr	s14, [r7, #20]
 800225e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002262:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002266:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <InverseMelScale+0xd4>)
 8002268:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 800226a:	ed97 7a01 	vldr	s14, [r7, #4]
 800226e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800227a:	db15      	blt.n	80022a8 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800227c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002280:	edd7 7a03 	vldr	s15, [r7, #12]
 8002284:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002288:	edd7 7a02 	vldr	s15, [r7, #8]
 800228c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002290:	eeb0 0a67 	vmov.f32	s0, s15
 8002294:	f00a fe3c 	bl	800cf10 <expf>
 8002298:	eeb0 7a40 	vmov.f32	s14, s0
 800229c:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 80022a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ac:	e013      	b.n	80022d6 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 80022ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80022ec <InverseMelScale+0xd8>
 80022b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022ba:	eeb0 0a47 	vmov.f32	s0, s14
 80022be:	f00a fe27 	bl	800cf10 <expf>
 80022c2:	eef0 7a40 	vmov.f32	s15, s0
 80022c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80022f0 <InverseMelScale+0xdc>
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80022d6:	eeb0 0a67 	vmov.f32	s0, s15
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	42855555 	.word	0x42855555
 80022e4:	447a0000 	.word	0x447a0000
 80022e8:	3d8ccdbb 	.word	0x3d8ccdbb
 80022ec:	448ce000 	.word	0x448ce000
 80022f0:	442f0000 	.word	0x442f0000
 80022f4:	00000000 	.word	0x00000000

080022f8 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  switch (type)
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d01c      	beq.n	800234a <Window_Init+0x52>
 8002310:	2b02      	cmp	r3, #2
 8002312:	dc25      	bgt.n	8002360 <Window_Init+0x68>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <Window_Init+0x26>
 8002318:	2b01      	cmp	r3, #1
 800231a:	d00b      	beq.n	8002334 <Window_Init+0x3c>
 800231c:	e020      	b.n	8002360 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 800231e:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8002378 <Window_Init+0x80>
 8002322:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8002326:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f837 	bl	80023a0 <cosine_sum_window_create>
      break;
 8002332:	e019      	b.n	8002368 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 8002334:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8002378 <Window_Init+0x80>
 8002338:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002380 <Window_Init+0x88>
 800233c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002388 <Window_Init+0x90>
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f82c 	bl	80023a0 <cosine_sum_window_create>
      break;
 8002348:	e00e      	b.n	8002368 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800234a:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002390 <Window_Init+0x98>
 800234e:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8002352:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002398 <Window_Init+0xa0>
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f821 	bl	80023a0 <cosine_sum_window_create>
      break;
 800235e:	e003      	b.n	8002368 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8002360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002364:	617b      	str	r3, [r7, #20]
      break;
 8002366:	bf00      	nop
  }

  return status;
 8002368:	697b      	ldr	r3, [r7, #20]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
	...
 8002380:	d70a3d71 	.word	0xd70a3d71
 8002384:	3fdd70a3 	.word	0x3fdd70a3
 8002388:	147ae148 	.word	0x147ae148
 800238c:	3fe147ae 	.word	0x3fe147ae
 8002390:	47ae147b 	.word	0x47ae147b
 8002394:	3fb47ae1 	.word	0x3fb47ae1
 8002398:	ae147ae1 	.word	0xae147ae1
 800239c:	3fdae147 	.word	0x3fdae147

080023a0 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	ed2d 8b02 	vpush	{d8}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	61f8      	str	r0, [r7, #28]
 80023ac:	61b9      	str	r1, [r7, #24]
 80023ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80023b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80023b6:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	e043      	b.n	8002448 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023ca:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002460 <cosine_sum_window_create+0xc0>
 80023ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023dc:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80023e0:	eeb0 0b45 	vmov.f64	d0, d5
 80023e4:	f00a fd48 	bl	800ce78 <cos>
 80023e8:	eeb0 6b40 	vmov.f64	d6, d0
 80023ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80023f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80023f4:	ed97 6b04 	vldr	d6, [r7, #16]
 80023f8:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002406:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002468 <cosine_sum_window_create+0xc8>
 800240a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002418:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800241c:	eeb0 0b45 	vmov.f64	d0, d5
 8002420:	f00a fd2a 	bl	800ce78 <cos>
 8002424:	eeb0 6b40 	vmov.f64	d6, d0
 8002428:	ed97 7b00 	vldr	d7, [r7]
 800242c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002430:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800243a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 800243e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	3301      	adds	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	429a      	cmp	r2, r3
 800244e:	d3b7      	bcc.n	80023c0 <cosine_sum_window_create+0x20>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	ecbd 8b02 	vpop	{d8}
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	54442d18 	.word	0x54442d18
 8002464:	401921fb 	.word	0x401921fb
 8002468:	54442d18 	.word	0x54442d18
 800246c:	402921fb 	.word	0x402921fb

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 fbe1 	bl	8002c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	200f      	movs	r0, #15
 800247c:	f000 f806 	bl	800248c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff f966 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_InitTick+0x54>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x58>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fbfb 	bl	8002ca6 <HAL_SYSTICK_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00e      	b.n	80024d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b0f      	cmp	r3, #15
 80024be:	d80a      	bhi.n	80024d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c0:	2200      	movs	r2, #0
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024c8:	f000 fbc3 	bl	8002c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024cc:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <HAL_InitTick+0x5c>)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e000      	b.n	80024d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x20>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x24>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_IncTick+0x24>)
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000008 	.word	0x20000008
 8002510:	200045c0 	.word	0x200045c0

08002514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return uwTick;
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_GetTick+0x14>)
 800251a:	681b      	ldr	r3, [r3, #0]
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	200045c0 	.word	0x200045c0

0800252c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff ffee 	bl	8002514 <HAL_GetTick>
 8002538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002544:	d005      	beq.n	8002552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <HAL_Delay+0x44>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002552:	bf00      	nop
 8002554:	f7ff ffde 	bl	8002514 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	d8f7      	bhi.n	8002554 <HAL_Delay+0x28>
  {
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000008 	.word	0x20000008

08002574 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e031      	b.n	80025ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe f88e 	bl	80006b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d116      	bne.n	80025e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_ADC_Init+0x84>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f970 	bl	80028a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f023 0303 	bic.w	r3, r3, #3
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
 80025de:	e001      	b.n	80025e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	ffffeefd 	.word	0xffffeefd

080025fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x1c>
 8002614:	2302      	movs	r3, #2
 8002616:	e136      	b.n	8002886 <HAL_ADC_ConfigChannel+0x28a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b09      	cmp	r3, #9
 8002626:	d93a      	bls.n	800269e <HAL_ADC_ConfigChannel+0xa2>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002630:	d035      	beq.n	800269e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68d9      	ldr	r1, [r3, #12]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	461a      	mov	r2, r3
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	3b1e      	subs	r3, #30
 8002648:	2207      	movs	r2, #7
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a8d      	ldr	r2, [pc, #564]	; (8002894 <HAL_ADC_ConfigChannel+0x298>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10a      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68d9      	ldr	r1, [r3, #12]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	061a      	lsls	r2, r3, #24
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002676:	e035      	b.n	80026e4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	4603      	mov	r3, r0
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4403      	add	r3, r0
 8002690:	3b1e      	subs	r3, #30
 8002692:	409a      	lsls	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800269c:	e022      	b.n	80026e4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6919      	ldr	r1, [r3, #16]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	2207      	movs	r2, #7
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43da      	mvns	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	400a      	ands	r2, r1
 80026c0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6919      	ldr	r1, [r3, #16]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4403      	add	r3, r0
 80026da:	409a      	lsls	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d824      	bhi.n	8002736 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b05      	subs	r3, #5
 80026fe:	221f      	movs	r2, #31
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43da      	mvns	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	400a      	ands	r2, r1
 800270c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	b29b      	uxth	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b05      	subs	r3, #5
 8002728:	fa00 f203 	lsl.w	r2, r0, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	635a      	str	r2, [r3, #52]	; 0x34
 8002734:	e04c      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d824      	bhi.n	8002788 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b23      	subs	r3, #35	; 0x23
 8002750:	221f      	movs	r2, #31
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43da      	mvns	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	400a      	ands	r2, r1
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b23      	subs	r3, #35	; 0x23
 800277a:	fa00 f203 	lsl.w	r2, r0, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
 8002786:	e023      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	3b41      	subs	r3, #65	; 0x41
 800279a:	221f      	movs	r2, #31
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43da      	mvns	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	400a      	ands	r2, r1
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b41      	subs	r3, #65	; 0x41
 80027c4:	fa00 f203 	lsl.w	r2, r0, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a30      	ldr	r2, [pc, #192]	; (8002898 <HAL_ADC_ConfigChannel+0x29c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10a      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1f4>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a2c      	ldr	r2, [pc, #176]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 80027ea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027ee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a28      	ldr	r2, [pc, #160]	; (8002898 <HAL_ADC_ConfigChannel+0x29c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10f      	bne.n	800281a <HAL_ADC_ConfigChannel+0x21e>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b12      	cmp	r3, #18
 8002800:	d10b      	bne.n	800281a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002802:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002808:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800280c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002818:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <HAL_ADC_ConfigChannel+0x29c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d12b      	bne.n	800287c <HAL_ADC_ConfigChannel+0x280>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_ADC_ConfigChannel+0x298>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d003      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x23a>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b11      	cmp	r3, #17
 8002834:	d122      	bne.n	800287c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002836:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a18      	ldr	r2, [pc, #96]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 800283c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002840:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_ADC_ConfigChannel+0x2a0>)
 8002848:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800284c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a10      	ldr	r2, [pc, #64]	; (8002894 <HAL_ADC_ConfigChannel+0x298>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d111      	bne.n	800287c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_ADC_ConfigChannel+0x2a4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a11      	ldr	r2, [pc, #68]	; (80028a4 <HAL_ADC_ConfigChannel+0x2a8>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	0c9a      	lsrs	r2, r3, #18
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800286e:	e002      	b.n	8002876 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3b01      	subs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	10000012 	.word	0x10000012
 8002898:	40012000 	.word	0x40012000
 800289c:	40012300 	.word	0x40012300
 80028a0:	20000000 	.word	0x20000000
 80028a4:	431bde83 	.word	0x431bde83

080028a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028b0:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <ADC_Init+0x1ec>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <ADC_Init+0x1ec>)
 80028b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028bc:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <ADC_Init+0x1ec>)
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4973      	ldr	r1, [pc, #460]	; (8002a94 <ADC_Init+0x1ec>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	021a      	lsls	r2, r3, #8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6859      	ldr	r1, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800291e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <ADC_Init+0x1f0>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800296c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	e00f      	b.n	80029a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002990:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80029a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0202 	bic.w	r2, r2, #2
 80029b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	005a      	lsls	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	3b01      	subs	r3, #1
 80029fc:	035a      	lsls	r2, r3, #13
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e007      	b.n	8002a18 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	051a      	lsls	r2, r3, #20
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6899      	ldr	r1, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a5a:	025a      	lsls	r2, r3, #9
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	029a      	lsls	r2, r3, #10
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	40012300 	.word	0x40012300
 8002a98:	0f000001 	.word	0x0f000001

08002a9c <__NVIC_SetPriorityGrouping>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <__NVIC_SetPriorityGrouping+0x40>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab8:	4013      	ands	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	; (8002adc <__NVIC_SetPriorityGrouping+0x40>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00
 8002ae0:	05fa0000 	.word	0x05fa0000

08002ae4 <__NVIC_GetPriorityGrouping>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <__NVIC_GetPriorityGrouping+0x18>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0a1b      	lsrs	r3, r3, #8
 8002aee:	f003 0307 	and.w	r3, r3, #7
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_EnableIRQ>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	db0b      	blt.n	8002b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4907      	ldr	r1, [pc, #28]	; (8002b38 <__NVIC_EnableIRQ+0x38>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	2001      	movs	r0, #1
 8002b22:	fa00 f202 	lsl.w	r2, r0, r2
 8002b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <__NVIC_SetPriority>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	db0a      	blt.n	8002b66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <__NVIC_SetPriority+0x4c>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	0112      	lsls	r2, r2, #4
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b64:	e00a      	b.n	8002b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4908      	ldr	r1, [pc, #32]	; (8002b8c <__NVIC_SetPriority+0x50>)
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	3b04      	subs	r3, #4
 8002b74:	0112      	lsls	r2, r2, #4
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	440b      	add	r3, r1
 8002b7a:	761a      	strb	r2, [r3, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000e100 	.word	0xe000e100
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <NVIC_EncodePriority>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f1c3 0307 	rsb	r3, r3, #7
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	bf28      	it	cs
 8002bae:	2304      	movcs	r3, #4
 8002bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	d902      	bls.n	8002bc0 <NVIC_EncodePriority+0x30>
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3b03      	subs	r3, #3
 8002bbe:	e000      	b.n	8002bc2 <NVIC_EncodePriority+0x32>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43da      	mvns	r2, r3
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fa01 f303 	lsl.w	r3, r1, r3
 8002be2:	43d9      	mvns	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be8:	4313      	orrs	r3, r2
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c08:	d301      	bcc.n	8002c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e00f      	b.n	8002c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <SysTick_Config+0x40>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c16:	210f      	movs	r1, #15
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c1c:	f7ff ff8e 	bl	8002b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <SysTick_Config+0x40>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <SysTick_Config+0x40>)
 8002c28:	2207      	movs	r2, #7
 8002c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	e000e010 	.word	0xe000e010

08002c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7ff ff29 	bl	8002a9c <__NVIC_SetPriorityGrouping>
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c64:	f7ff ff3e 	bl	8002ae4 <__NVIC_GetPriorityGrouping>
 8002c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff ff8e 	bl	8002b90 <NVIC_EncodePriority>
 8002c74:	4602      	mov	r2, r0
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff5d 	bl	8002b3c <__NVIC_SetPriority>
}
 8002c82:	bf00      	nop
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff31 	bl	8002b00 <__NVIC_EnableIRQ>
}
 8002c9e:	bf00      	nop
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <SysTick_Config>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e054      	b.n	8002d7c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7f5b      	ldrb	r3, [r3, #29]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7fd fd28 	bl	8000738 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	791b      	ldrb	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10c      	bne.n	8002d10 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <HAL_CRC_Init+0xc4>)
 8002cfc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0218 	bic.w	r2, r2, #24
 8002d0c:	609a      	str	r2, [r3, #8]
 8002d0e:	e00c      	b.n	8002d2a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6899      	ldr	r1, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f834 	bl	8002d88 <HAL_CRCEx_Polynomial_Set>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e028      	b.n	8002d7c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	795b      	ldrb	r3, [r3, #5]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d3a:	611a      	str	r2, [r3, #16]
 8002d3c:	e004      	b.n	8002d48 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6912      	ldr	r2, [r2, #16]
 8002d46:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	04c11db7 	.word	0x04c11db7

08002d88 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d98:	231f      	movs	r3, #31
 8002d9a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d9c:	bf00      	nop
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1e5a      	subs	r2, r3, #1
 8002da2:	613a      	str	r2, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_CRCEx_Polynomial_Set+0x34>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b18      	cmp	r3, #24
 8002dc0:	d846      	bhi.n	8002e50 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002e57 	.word	0x08002e57
 8002dcc:	08002e51 	.word	0x08002e51
 8002dd0:	08002e51 	.word	0x08002e51
 8002dd4:	08002e51 	.word	0x08002e51
 8002dd8:	08002e51 	.word	0x08002e51
 8002ddc:	08002e51 	.word	0x08002e51
 8002de0:	08002e51 	.word	0x08002e51
 8002de4:	08002e51 	.word	0x08002e51
 8002de8:	08002e45 	.word	0x08002e45
 8002dec:	08002e51 	.word	0x08002e51
 8002df0:	08002e51 	.word	0x08002e51
 8002df4:	08002e51 	.word	0x08002e51
 8002df8:	08002e51 	.word	0x08002e51
 8002dfc:	08002e51 	.word	0x08002e51
 8002e00:	08002e51 	.word	0x08002e51
 8002e04:	08002e51 	.word	0x08002e51
 8002e08:	08002e39 	.word	0x08002e39
 8002e0c:	08002e51 	.word	0x08002e51
 8002e10:	08002e51 	.word	0x08002e51
 8002e14:	08002e51 	.word	0x08002e51
 8002e18:	08002e51 	.word	0x08002e51
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e51 	.word	0x08002e51
 8002e24:	08002e51 	.word	0x08002e51
 8002e28:	08002e2d 	.word	0x08002e2d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d913      	bls.n	8002e5a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e36:	e010      	b.n	8002e5a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	d90f      	bls.n	8002e5e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e42:	e00c      	b.n	8002e5e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b0f      	cmp	r3, #15
 8002e48:	d90b      	bls.n	8002e62 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e4e:	e008      	b.n	8002e62 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	75fb      	strb	r3, [r7, #23]
      break;
 8002e54:	e006      	b.n	8002e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e56:	bf00      	nop
 8002e58:	e004      	b.n	8002e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e62:	bf00      	nop
  }
  if (status == HAL_OK)
 8002e64:	7dfb      	ldrb	r3, [r7, #23]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 0118 	bic.w	r1, r3, #24
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0ac      	b.n	8003000 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fadc 	bl	8003468 <DFSDM_GetChannelFromInstance>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4a55      	ldr	r2, [pc, #340]	; (8003008 <HAL_DFSDM_ChannelInit+0x174>)
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e09f      	b.n	8003000 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7fd fe1d 	bl	8000b00 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002ec6:	4b51      	ldr	r3, [pc, #324]	; (800300c <HAL_DFSDM_ChannelInit+0x178>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	4a4f      	ldr	r2, [pc, #316]	; (800300c <HAL_DFSDM_ChannelInit+0x178>)
 8002ece:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8002ed0:	4b4e      	ldr	r3, [pc, #312]	; (800300c <HAL_DFSDM_ChannelInit+0x178>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d125      	bne.n	8002f24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ed8:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ede:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ee2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4948      	ldr	r1, [pc, #288]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a46      	ldr	r2, [pc, #280]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ef8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002efc:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	791b      	ldrb	r3, [r3, #4]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8002f06:	4b42      	ldr	r3, [pc, #264]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	493f      	ldr	r1, [pc, #252]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002f18:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002f32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 020f 	bic.w	r2, r2, #15
 8002f60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6819      	ldr	r1, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002f88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6899      	ldr	r1, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f002 0207 	and.w	r2, r2, #7
 8002fb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fa3a 	bl	8003468 <DFSDM_GetChannelFromInstance>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_DFSDM_ChannelInit+0x174>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200045c8 	.word	0x200045c8
 800300c:	200045c4 	.word	0x200045c4
 8003010:	40017400 	.word	0x40017400

08003014 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0c6      	b.n	80031b4 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a64      	ldr	r2, [pc, #400]	; (80031bc <HAL_DFSDM_FilterInit+0x1a8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d109      	bne.n	8003044 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003034:	2b01      	cmp	r3, #1
 8003036:	d003      	beq.n	8003040 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0b7      	b.n	80031b4 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd fc67 	bl	8000930 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003070:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	7a1b      	ldrb	r3, [r3, #8]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d108      	bne.n	800308c <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800309a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7a5b      	ldrb	r3, [r3, #9]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d108      	bne.n	80030b6 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	e007      	b.n	80030c6 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80030c4:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <HAL_DFSDM_FilterInit+0x1ac>)
 80030d2:	400b      	ands	r3, r1
 80030d4:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d108      	bne.n	80030f0 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7c1b      	ldrb	r3, [r3, #16]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0210 	orr.w	r2, r2, #16
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e007      	b.n	800311a <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0210 	bic.w	r2, r2, #16
 8003118:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	7c5b      	ldrb	r3, [r3, #17]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d108      	bne.n	8003134 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0220 	orr.w	r2, r2, #32
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	e007      	b.n	8003144 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0220 	bic.w	r2, r2, #32
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6959      	ldr	r1, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b1d      	ldr	r3, [pc, #116]	; (80031c4 <HAL_DFSDM_FilterInit+0x1b0>)
 8003150:	400b      	ands	r3, r1
 8003152:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6959      	ldr	r1, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003166:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800316e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7c1a      	ldrb	r2, [r3, #16]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40017500 	.word	0x40017500
 80031c0:	ffff80f7 	.word	0xffff80f7
 80031c4:	1c00ff00 	.word	0x1c00ff00

080031c8 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d02c      	beq.n	800323c <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80031e8:	2bff      	cmp	r3, #255	; 0xff
 80031ea:	d027      	beq.n	800323c <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80031f8:	400b      	ands	r3, r1
 80031fa:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10d      	bne.n	800321e <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e00a      	b.n	8003234 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
 800323a:	e001      	b.n	8003240 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
}
 8003242:	4618      	mov	r0, r3
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	f8fbffff 	.word	0xf8fbffff

08003254 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003272:	2bff      	cmp	r3, #255	; 0xff
 8003274:	d016      	beq.n	80032a4 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	b292      	uxth	r2, r2
 800327e:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8003280:	6838      	ldr	r0, [r7, #0]
 8003282:	f000 f8d2 	bl	800342a <DFSDM_GetInjChannelsNbr>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 8003292:	2b01      	cmp	r3, #1
 8003294:	d102      	bne.n	800329c <HAL_DFSDM_FilterConfigInjChannel+0x48>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	e000      	b.n	800329e <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 800329c:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6493      	str	r3, [r2, #72]	; 0x48
 80032a2:	e001      	b.n	80032a8 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	75fb      	strb	r3, [r7, #23]
 80032d4:	e066      	b.n	80033a4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032e4:	d002      	beq.n	80032ec <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	75fb      	strb	r3, [r7, #23]
 80032ea:	e05b      	b.n	80033a4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10e      	bne.n	8003312 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	75fb      	strb	r3, [r7, #23]
 8003310:	e048      	b.n	80033a4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800331e:	2b00      	cmp	r3, #0
 8003320:	d108      	bne.n	8003334 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332c:	d102      	bne.n	8003334 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
 8003332:	e037      	b.n	80033a4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d004      	beq.n	8003348 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003344:	2b03      	cmp	r3, #3
 8003346:	d12b      	bne.n	80033a0 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334c:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003356:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	d101      	bne.n	8003368 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8003366:	e000      	b.n	800336a <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003368:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	331c      	adds	r3, #28
 800337a:	4619      	mov	r1, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f000 f9c2 	bl	8003708 <HAL_DMA_Start_IT>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d006      	beq.n	8003398 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003396:	e005      	b.n	80033a4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f8b1 	bl	8003500 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800339e:	e001      	b.n	80033a4 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	080033ed 	.word	0x080033ed
 80033b4:	08003409 	.word	0x08003409
 80033b8:	080033d1 	.word	0x080033d1

080033bc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f008 fb5c 	bl	800ba9c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f008 fb6a 	bl	800bad4 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2203      	movs	r2, #3
 800341a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff ffcd 	bl	80033bc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	b29b      	uxth	r3, r3
 800343a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800343c:	e00a      	b.n	8003454 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f1      	bne.n	800343e <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <DFSDM_GetChannelFromInstance+0x7c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d102      	bne.n	800347e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e02b      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <DFSDM_GetChannelFromInstance+0x80>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d102      	bne.n	800348c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e024      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a17      	ldr	r2, [pc, #92]	; (80034ec <DFSDM_GetChannelFromInstance+0x84>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d102      	bne.n	800349a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003494:	2302      	movs	r3, #2
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	e01d      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <DFSDM_GetChannelFromInstance+0x88>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d102      	bne.n	80034a8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80034a2:	2303      	movs	r3, #3
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	e016      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a12      	ldr	r2, [pc, #72]	; (80034f4 <DFSDM_GetChannelFromInstance+0x8c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80034b0:	2304      	movs	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e00f      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <DFSDM_GetChannelFromInstance+0x90>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d102      	bne.n	80034c4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80034be:	2305      	movs	r3, #5
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	e008      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <DFSDM_GetChannelFromInstance+0x94>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d102      	bne.n	80034d2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80034cc:	2306      	movs	r3, #6
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e001      	b.n	80034d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80034d2:	2307      	movs	r3, #7
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034d6:	68fb      	ldr	r3, [r7, #12]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40017400 	.word	0x40017400
 80034e8:	40017420 	.word	0x40017420
 80034ec:	40017440 	.word	0x40017440
 80034f0:	40017460 	.word	0x40017460
 80034f4:	40017480 	.word	0x40017480
 80034f8:	400174a0 	.word	0x400174a0
 80034fc:	400174c0 	.word	0x400174c0

08003500 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	e033      	b.n	800358a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0201 	bic.w	r2, r2, #1
 8003530:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003540:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f042 0201 	orr.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003558:	2b03      	cmp	r3, #3
 800355a:	d116      	bne.n	800358a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0202 	orr.w	r2, r2, #2
 8003572:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <DFSDM_RegConvStart+0x84>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	e000      	b.n	8003586 <DFSDM_RegConvStart+0x86>
 8003584:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <DFSDM_RegConvStart+0x98>
 8003594:	2202      	movs	r2, #2
 8003596:	e000      	b.n	800359a <DFSDM_RegConvStart+0x9a>
 8003598:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b8:	f7fe ffac 	bl	8002514 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e099      	b.n	80036fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e8:	e00f      	b.n	800360a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ea:	f7fe ff93 	bl	8002514 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d908      	bls.n	800360a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e078      	b.n	80036fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e8      	bne.n	80035ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_DMA_Init+0x158>)
 8003624:	4013      	ands	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b04      	cmp	r3, #4
 8003662:	d107      	bne.n	8003674 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	4313      	orrs	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0307 	bic.w	r3, r3, #7
 800368a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b04      	cmp	r3, #4
 800369c:	d117      	bne.n	80036ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 faa5 	bl	8003c00 <DMA_CheckFifoParam>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ca:	2301      	movs	r3, #1
 80036cc:	e016      	b.n	80036fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fa5c 	bl	8003b94 <DMA_CalcBaseAndBitshift>
 80036dc:	4603      	mov	r3, r0
 80036de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	223f      	movs	r2, #63	; 0x3f
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	e010803f 	.word	0xe010803f

08003708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_DMA_Start_IT+0x26>
 800372a:	2302      	movs	r3, #2
 800372c:	e048      	b.n	80037c0 <HAL_DMA_Start_IT+0xb8>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d137      	bne.n	80037b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 f9ee 	bl	8003b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	223f      	movs	r2, #63	; 0x3f
 8003762:	409a      	lsls	r2, r3
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0216 	orr.w	r2, r2, #22
 8003776:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003786:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0208 	orr.w	r2, r2, #8
 800379e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e005      	b.n	80037be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ba:	2302      	movs	r3, #2
 80037bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d004      	beq.n	80037e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e00c      	b.n	8003800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2205      	movs	r2, #5
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003818:	4b8e      	ldr	r3, [pc, #568]	; (8003a54 <HAL_DMA_IRQHandler+0x248>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a8e      	ldr	r2, [pc, #568]	; (8003a58 <HAL_DMA_IRQHandler+0x24c>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	2208      	movs	r2, #8
 8003838:	409a      	lsls	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4013      	ands	r3, r2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01a      	beq.n	8003878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0204 	bic.w	r2, r2, #4
 800385e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	2208      	movs	r2, #8
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0201 	orr.w	r2, r3, #1
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2201      	movs	r2, #1
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f043 0202 	orr.w	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2204      	movs	r2, #4
 80038b4:	409a      	lsls	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d012      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	2204      	movs	r2, #4
 80038d2:	409a      	lsls	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	f043 0204 	orr.w	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	2210      	movs	r2, #16
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d043      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03c      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	2210      	movs	r2, #16
 8003908:	409a      	lsls	r2, r3
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d018      	beq.n	800394e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d108      	bne.n	800393c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d024      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	4798      	blx	r3
 800393a:	e01f      	b.n	800397c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
 800394c:	e016      	b.n	800397c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0208 	bic.w	r2, r2, #8
 800396a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2220      	movs	r2, #32
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 808f 	beq.w	8003aac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8087 	beq.w	8003aac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a2:	2220      	movs	r2, #32
 80039a4:	409a      	lsls	r2, r3
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d136      	bne.n	8003a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0216 	bic.w	r2, r2, #22
 80039c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x1da>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0208 	bic.w	r2, r2, #8
 80039f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	223f      	movs	r2, #63	; 0x3f
 80039fc:	409a      	lsls	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d07e      	beq.n	8003b18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
        }
        return;
 8003a22:	e079      	b.n	8003b18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01d      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10d      	bne.n	8003a5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
 8003a50:	e02c      	b.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
 8003a52:	bf00      	nop
 8003a54:	20000000 	.word	0x20000000
 8003a58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d023      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
 8003a6c:	e01e      	b.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0210 	bic.w	r2, r2, #16
 8003a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d032      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d022      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d307      	bcc.n	8003af4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f2      	bne.n	8003ad8 <HAL_DMA_IRQHandler+0x2cc>
 8003af2:	e000      	b.n	8003af6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003af4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b18:	bf00      	nop
    }
  }
}
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d108      	bne.n	8003b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b76:	e007      	b.n	8003b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	3b10      	subs	r3, #16
 8003ba4:	4a13      	ldr	r2, [pc, #76]	; (8003bf4 <DMA_CalcBaseAndBitshift+0x60>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bae:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d908      	bls.n	8003bd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <DMA_CalcBaseAndBitshift+0x68>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	1d1a      	adds	r2, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	659a      	str	r2, [r3, #88]	; 0x58
 8003bd2:	e006      	b.n	8003be2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <DMA_CalcBaseAndBitshift+0x68>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	aaaaaaab 	.word	0xaaaaaaab
 8003bf8:	0800de00 	.word	0x0800de00
 8003bfc:	fffffc00 	.word	0xfffffc00

08003c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11f      	bne.n	8003c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d856      	bhi.n	8003cce <DMA_CheckFifoParam+0xce>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <DMA_CheckFifoParam+0x28>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c4b 	.word	0x08003c4b
 8003c30:	08003c39 	.word	0x08003c39
 8003c34:	08003ccf 	.word	0x08003ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d046      	beq.n	8003cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c48:	e043      	b.n	8003cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c52:	d140      	bne.n	8003cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e03d      	b.n	8003cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c62:	d121      	bne.n	8003ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d837      	bhi.n	8003cda <DMA_CheckFifoParam+0xda>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <DMA_CheckFifoParam+0x70>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c87 	.word	0x08003c87
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	08003c99 	.word	0x08003c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e030      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d025      	beq.n	8003cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c96:	e022      	b.n	8003cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ca0:	d11f      	bne.n	8003ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ca6:	e01c      	b.n	8003ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d903      	bls.n	8003cb6 <DMA_CheckFifoParam+0xb6>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d003      	beq.n	8003cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cb4:	e018      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cba:	e015      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e00b      	b.n	8003ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e00a      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e008      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e006      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e004      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e175      	b.n	8004004 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d18:	2201      	movs	r2, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	f040 8164 	bne.w	8003ffe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d005      	beq.n	8003d4e <HAL_GPIO_Init+0x56>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d130      	bne.n	8003db0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d84:	2201      	movs	r2, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 0201 	and.w	r2, r3, #1
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d017      	beq.n	8003dec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d123      	bne.n	8003e40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	08da      	lsrs	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3208      	adds	r2, #8
 8003e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	220f      	movs	r2, #15
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	08da      	lsrs	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3208      	adds	r2, #8
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 0203 	and.w	r2, r3, #3
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80be 	beq.w	8003ffe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e82:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a65      	ldr	r2, [pc, #404]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_GPIO_Init+0x324>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e9a:	4a61      	ldr	r2, [pc, #388]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_GPIO_Init+0x32c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d037      	beq.n	8003f36 <HAL_GPIO_Init+0x23e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_GPIO_Init+0x330>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_GPIO_Init+0x23a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a56      	ldr	r2, [pc, #344]	; (800402c <HAL_GPIO_Init+0x334>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <HAL_GPIO_Init+0x236>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a55      	ldr	r2, [pc, #340]	; (8004030 <HAL_GPIO_Init+0x338>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d025      	beq.n	8003f2a <HAL_GPIO_Init+0x232>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a54      	ldr	r2, [pc, #336]	; (8004034 <HAL_GPIO_Init+0x33c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <HAL_GPIO_Init+0x22e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a53      	ldr	r2, [pc, #332]	; (8004038 <HAL_GPIO_Init+0x340>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d019      	beq.n	8003f22 <HAL_GPIO_Init+0x22a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_GPIO_Init+0x344>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a51      	ldr	r2, [pc, #324]	; (8004040 <HAL_GPIO_Init+0x348>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00d      	beq.n	8003f1a <HAL_GPIO_Init+0x222>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a50      	ldr	r2, [pc, #320]	; (8004044 <HAL_GPIO_Init+0x34c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d007      	beq.n	8003f16 <HAL_GPIO_Init+0x21e>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a4f      	ldr	r2, [pc, #316]	; (8004048 <HAL_GPIO_Init+0x350>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_GPIO_Init+0x21a>
 8003f0e:	2309      	movs	r3, #9
 8003f10:	e012      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f12:	230a      	movs	r3, #10
 8003f14:	e010      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f16:	2308      	movs	r3, #8
 8003f18:	e00e      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	e00c      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f1e:	2306      	movs	r3, #6
 8003f20:	e00a      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f22:	2305      	movs	r3, #5
 8003f24:	e008      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f26:	2304      	movs	r3, #4
 8003f28:	e006      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e004      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e002      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_GPIO_Init+0x240>
 8003f36:	2300      	movs	r3, #0
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	0092      	lsls	r2, r2, #2
 8003f40:	4093      	lsls	r3, r2
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f48:	4935      	ldr	r1, [pc, #212]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4013      	ands	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <HAL_GPIO_Init+0x354>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b28      	ldr	r3, [pc, #160]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_GPIO_Init+0x354>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_GPIO_Init+0x354>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	f67f ae86 	bls.w	8003d18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	3724      	adds	r7, #36	; 0x24
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	40013800 	.word	0x40013800
 8004024:	40020000 	.word	0x40020000
 8004028:	40020400 	.word	0x40020400
 800402c:	40020800 	.word	0x40020800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40021000 	.word	0x40021000
 8004038:	40021400 	.word	0x40021400
 800403c:	40021800 	.word	0x40021800
 8004040:	40021c00 	.word	0x40021c00
 8004044:	40022000 	.word	0x40022000
 8004048:	40022400 	.word	0x40022400
 800404c:	40013c00 	.word	0x40013c00

08004050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e001      	b.n	8004072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
 800408c:	4613      	mov	r3, r2
 800408e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004090:	787b      	ldrb	r3, [r7, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800409c:	e003      	b.n	80040a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	041a      	lsls	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	88fb      	ldrh	r3, [r7, #6]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ca:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f007 fd90 	bl	800bbf8 <HAL_GPIO_EXTI_Callback>
  }
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40013c00 	.word	0x40013c00

080040e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	4b23      	ldr	r3, [pc, #140]	; (800417c <HAL_PWREx_EnableOverDrive+0x98>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <HAL_PWREx_EnableOverDrive+0x98>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b20      	ldr	r3, [pc, #128]	; (800417c <HAL_PWREx_EnableOverDrive+0x98>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004106:	4b1e      	ldr	r3, [pc, #120]	; (8004180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004112:	f7fe f9ff 	bl	8002514 <HAL_GetTick>
 8004116:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004118:	e009      	b.n	800412e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800411a:	f7fe f9fb 	bl	8002514 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004128:	d901      	bls.n	800412e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e022      	b.n	8004174 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800412e:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413a:	d1ee      	bne.n	800411a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800413c:	4b10      	ldr	r3, [pc, #64]	; (8004180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a0f      	ldr	r2, [pc, #60]	; (8004180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004146:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004148:	f7fe f9e4 	bl	8002514 <HAL_GetTick>
 800414c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800414e:	e009      	b.n	8004164 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004150:	f7fe f9e0 	bl	8002514 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800415e:	d901      	bls.n	8004164 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e007      	b.n	8004174 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004170:	d1ee      	bne.n	8004150 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40023800 	.word	0x40023800
 8004180:	40007000 	.word	0x40007000

08004184 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e29b      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8087 	beq.w	80042b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041a8:	4b96      	ldr	r3, [pc, #600]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d00c      	beq.n	80041ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b4:	4b93      	ldr	r3, [pc, #588]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d112      	bne.n	80041e6 <HAL_RCC_OscConfig+0x62>
 80041c0:	4b90      	ldr	r3, [pc, #576]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041cc:	d10b      	bne.n	80041e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ce:	4b8d      	ldr	r3, [pc, #564]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d06c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x130>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d168      	bne.n	80042b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e275      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x7a>
 80041f0:	4b84      	ldr	r3, [pc, #528]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a83      	ldr	r2, [pc, #524]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e02e      	b.n	800425c <HAL_RCC_OscConfig+0xd8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x9c>
 8004206:	4b7f      	ldr	r3, [pc, #508]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7e      	ldr	r2, [pc, #504]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b7c      	ldr	r3, [pc, #496]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7b      	ldr	r2, [pc, #492]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xd8>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0xc0>
 800422a:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b73      	ldr	r3, [pc, #460]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a72      	ldr	r2, [pc, #456]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xd8>
 8004244:	4b6f      	ldr	r3, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6e      	ldr	r2, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a6b      	ldr	r2, [pc, #428]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe f956 	bl	8002514 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7fe f952 	bl	8002514 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e229      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xe8>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fe f942 	bl	8002514 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe f93e 	bl	8002514 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e215      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b57      	ldr	r3, [pc, #348]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x110>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d069      	beq.n	8004396 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042c2:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x190>
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x17a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1e9      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	493d      	ldr	r1, [pc, #244]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e040      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b39      	ldr	r3, [pc, #228]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a38      	ldr	r2, [pc, #224]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe f8f4 	bl	8002514 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004330:	f7fe f8f0 	bl	8002514 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1c7      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	4b30      	ldr	r3, [pc, #192]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4929      	ldr	r1, [pc, #164]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
 8004362:	e018      	b.n	8004396 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a26      	ldr	r2, [pc, #152]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fe f8d0 	bl	8002514 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004378:	f7fe f8cc 	bl	8002514 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e1a3      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d038      	beq.n	8004414 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d019      	beq.n	80043de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80043ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe f8ad 	bl	8002514 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fe f8a9 	bl	8002514 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e180      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d0:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x23a>
 80043dc:	e01a      	b.n	8004414 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_RCC_OscConfig+0x280>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fe f893 	bl	8002514 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fe f88f 	bl	8002514 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d903      	bls.n	8004408 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e166      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
 8004404:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004408:	4b92      	ldr	r3, [pc, #584]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ee      	bne.n	80043f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a4 	beq.w	800456a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004422:	4b8c      	ldr	r3, [pc, #560]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10d      	bne.n	800444a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	4b89      	ldr	r3, [pc, #548]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a88      	ldr	r2, [pc, #544]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
 800443a:	4b86      	ldr	r3, [pc, #536]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004446:	2301      	movs	r3, #1
 8004448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	4b83      	ldr	r3, [pc, #524]	; (8004658 <HAL_RCC_OscConfig+0x4d4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d118      	bne.n	8004488 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004456:	4b80      	ldr	r3, [pc, #512]	; (8004658 <HAL_RCC_OscConfig+0x4d4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a7f      	ldr	r2, [pc, #508]	; (8004658 <HAL_RCC_OscConfig+0x4d4>)
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004462:	f7fe f857 	bl	8002514 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800446a:	f7fe f853 	bl	8002514 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b64      	cmp	r3, #100	; 0x64
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e12a      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	4b76      	ldr	r3, [pc, #472]	; (8004658 <HAL_RCC_OscConfig+0x4d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x31a>
 8004490:	4b70      	ldr	r3, [pc, #448]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a6f      	ldr	r2, [pc, #444]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
 800449c:	e02d      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x33c>
 80044a6:	4b6b      	ldr	r3, [pc, #428]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a6a      	ldr	r2, [pc, #424]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	4b68      	ldr	r3, [pc, #416]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a67      	ldr	r2, [pc, #412]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044b8:	f023 0304 	bic.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	e01c      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCC_OscConfig+0x35e>
 80044c8:	4b62      	ldr	r3, [pc, #392]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a61      	ldr	r2, [pc, #388]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	f043 0304 	orr.w	r3, r3, #4
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	4a5e      	ldr	r2, [pc, #376]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6713      	str	r3, [r2, #112]	; 0x70
 80044e0:	e00b      	b.n	80044fa <HAL_RCC_OscConfig+0x376>
 80044e2:	4b5c      	ldr	r3, [pc, #368]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a5b      	ldr	r2, [pc, #364]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70
 80044ee:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	4a58      	ldr	r2, [pc, #352]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80044f4:	f023 0304 	bic.w	r3, r3, #4
 80044f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d015      	beq.n	800452e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004502:	f7fe f807 	bl	8002514 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004508:	e00a      	b.n	8004520 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fe f803 	bl	8002514 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f241 3288 	movw	r2, #5000	; 0x1388
 8004518:	4293      	cmp	r3, r2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0d8      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	4b4c      	ldr	r3, [pc, #304]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0ee      	beq.n	800450a <HAL_RCC_OscConfig+0x386>
 800452c:	e014      	b.n	8004558 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fd fff1 	bl	8002514 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fd ffed 	bl	8002514 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0c2      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454c:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1ee      	bne.n	8004536 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	4a3c      	ldr	r2, [pc, #240]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80ae 	beq.w	80046d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004574:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 030c 	and.w	r3, r3, #12
 800457c:	2b08      	cmp	r3, #8
 800457e:	d06d      	beq.n	800465c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d14b      	bne.n	8004620 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004588:	4b32      	ldr	r3, [pc, #200]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a31      	ldr	r2, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fd ffbe 	bl	8002514 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fd ffba 	bl	8002514 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e091      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	4b29      	ldr	r3, [pc, #164]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69da      	ldr	r2, [r3, #28]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	085b      	lsrs	r3, r3, #1
 80045d2:	3b01      	subs	r3, #1
 80045d4:	041b      	lsls	r3, r3, #16
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	491b      	ldr	r1, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a18      	ldr	r2, [pc, #96]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd ff8c 	bl	8002514 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fd ff88 	bl	8002514 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e05f      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x47c>
 800461e:	e057      	b.n	80046d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd ff72 	bl	8002514 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd ff6e 	bl	8002514 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e045      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x4b0>
 8004652:	e03d      	b.n	80046d0 <HAL_RCC_OscConfig+0x54c>
 8004654:	40023800 	.word	0x40023800
 8004658:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800465c:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <HAL_RCC_OscConfig+0x558>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d030      	beq.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d129      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d122      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800468c:	4013      	ands	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004692:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004694:	4293      	cmp	r3, r2
 8004696:	d119      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d10f      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d0      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	4965      	ldr	r1, [pc, #404]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d040      	beq.n	8004804 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d115      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e073      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	4b3d      	ldr	r3, [pc, #244]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06b      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b39      	ldr	r3, [pc, #228]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4936      	ldr	r1, [pc, #216]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fe9e 	bl	8002514 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fd fe9a 	bl	8002514 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e053      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b2d      	ldr	r3, [pc, #180]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d210      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 020f 	bic.w	r2, r3, #15
 800481a:	4922      	ldr	r1, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x1cc>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1d0>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd fdfa 	bl	800248c <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	0800dde8 	.word	0x0800dde8
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000004 	.word	0x20000004

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b090      	sub	sp, #64	; 0x40
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	637b      	str	r3, [r7, #52]	; 0x34
 80048c4:	2300      	movs	r3, #0
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c8:	2300      	movs	r3, #0
 80048ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b59      	ldr	r3, [pc, #356]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80a1 	bhi.w	8004a24 <HAL_RCC_GetSysClockFreq+0x16c>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e09b      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x184>)
 80048ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048f0:	e09b      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x188>)
 80048f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048f6:	e098      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004902:	4b4d      	ldr	r3, [pc, #308]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d028      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b4a      	ldr	r3, [pc, #296]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	627a      	str	r2, [r7, #36]	; 0x24
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004920:	2100      	movs	r1, #0
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004924:	fb03 f201 	mul.w	r2, r3, r1
 8004928:	2300      	movs	r3, #0
 800492a:	fb00 f303 	mul.w	r3, r0, r3
 800492e:	4413      	add	r3, r2
 8004930:	4a43      	ldr	r2, [pc, #268]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004932:	fba0 1202 	umull	r1, r2, r0, r2
 8004936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004938:	460a      	mov	r2, r1
 800493a:	62ba      	str	r2, [r7, #40]	; 0x28
 800493c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493e:	4413      	add	r3, r2
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	2200      	movs	r2, #0
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	61fa      	str	r2, [r7, #28]
 800494a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800494e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004952:	f7fb fcd9 	bl	8000308 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4613      	mov	r3, r2
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495e:	e053      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4b35      	ldr	r3, [pc, #212]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	2200      	movs	r2, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	617a      	str	r2, [r7, #20]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004972:	f04f 0b00 	mov.w	fp, #0
 8004976:	4652      	mov	r2, sl
 8004978:	465b      	mov	r3, fp
 800497a:	f04f 0000 	mov.w	r0, #0
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004988:	0150      	lsls	r0, r2, #5
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	ebb2 080a 	subs.w	r8, r2, sl
 8004992:	eb63 090b 	sbc.w	r9, r3, fp
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049aa:	ebb2 0408 	subs.w	r4, r2, r8
 80049ae:	eb63 0509 	sbc.w	r5, r3, r9
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	00eb      	lsls	r3, r5, #3
 80049bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c0:	00e2      	lsls	r2, r4, #3
 80049c2:	4614      	mov	r4, r2
 80049c4:	461d      	mov	r5, r3
 80049c6:	eb14 030a 	adds.w	r3, r4, sl
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	eb45 030b 	adc.w	r3, r5, fp
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049de:	4629      	mov	r1, r5
 80049e0:	028b      	lsls	r3, r1, #10
 80049e2:	4621      	mov	r1, r4
 80049e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e8:	4621      	mov	r1, r4
 80049ea:	028a      	lsls	r2, r1, #10
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	2200      	movs	r2, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	60fa      	str	r2, [r7, #12]
 80049f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049fc:	f7fb fc84 	bl	8000308 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	3301      	adds	r3, #1
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004a18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3740      	adds	r7, #64	; 0x40
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	00f42400 	.word	0x00f42400
 8004a40:	017d7840 	.word	0x017d7840

08004a44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000000 	.word	0x20000000

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff0 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	0a9b      	lsrs	r3, r3, #10
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	0800ddf8 	.word	0x0800ddf8

08004a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a88:	f7ff ffdc 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0b5b      	lsrs	r3, r3, #13
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4903      	ldr	r1, [pc, #12]	; (8004aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	0800ddf8 	.word	0x0800ddf8

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d012      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ad4:	4b69      	ldr	r3, [pc, #420]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a68      	ldr	r2, [pc, #416]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ade:	6093      	str	r3, [r2, #8]
 8004ae0:	4b66      	ldr	r3, [pc, #408]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	4964      	ldr	r1, [pc, #400]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	4959      	ldr	r1, [pc, #356]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d017      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b42:	4b4e      	ldr	r3, [pc, #312]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	494a      	ldr	r1, [pc, #296]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b60:	d101      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 808b 	beq.w	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b3a      	ldr	r3, [pc, #232]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9c:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ba8:	4b35      	ldr	r3, [pc, #212]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a34      	ldr	r2, [pc, #208]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fd fcae 	bl	8002514 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd fcaa 	bl	8002514 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	; 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e38f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bce:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bda:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d035      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d02e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf8:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	4a1d      	ldr	r2, [pc, #116]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a1a      	ldr	r2, [pc, #104]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c1a:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c20:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d114      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd fc72 	bl	8002514 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd fc6e 	bl	8002514 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e351      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ee      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	d111      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c72:	400b      	ands	r3, r1
 8004c74:	4901      	ldr	r1, [pc, #4]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	0ffffcff 	.word	0x0ffffcff
 8004c88:	4bac      	ldr	r3, [pc, #688]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4aab      	ldr	r2, [pc, #684]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	4ba9      	ldr	r3, [pc, #676]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	49a6      	ldr	r1, [pc, #664]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d010      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb2:	4ba2      	ldr	r3, [pc, #648]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb8:	4aa0      	ldr	r2, [pc, #640]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cc2:	4b9e      	ldr	r3, [pc, #632]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	499b      	ldr	r1, [pc, #620]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce0:	4b96      	ldr	r3, [pc, #600]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cee:	4993      	ldr	r1, [pc, #588]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d02:	4b8e      	ldr	r3, [pc, #568]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d10:	498a      	ldr	r1, [pc, #552]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d24:	4b85      	ldr	r3, [pc, #532]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d32:	4982      	ldr	r1, [pc, #520]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d46:	4b7d      	ldr	r3, [pc, #500]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4979      	ldr	r1, [pc, #484]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d68:	4b74      	ldr	r3, [pc, #464]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4971      	ldr	r1, [pc, #452]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8a:	4b6c      	ldr	r3, [pc, #432]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f023 020c 	bic.w	r2, r3, #12
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d98:	4968      	ldr	r1, [pc, #416]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dac:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	4960      	ldr	r1, [pc, #384]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dce:	4b5b      	ldr	r3, [pc, #364]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	4957      	ldr	r1, [pc, #348]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df0:	4b52      	ldr	r3, [pc, #328]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	494f      	ldr	r1, [pc, #316]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e12:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	4946      	ldr	r1, [pc, #280]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e34:	4b41      	ldr	r3, [pc, #260]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e42:	493e      	ldr	r1, [pc, #248]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e56:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	4935      	ldr	r1, [pc, #212]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e78:	4b30      	ldr	r3, [pc, #192]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e86:	492d      	ldr	r1, [pc, #180]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d011      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e9a:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ea8:	4924      	ldr	r1, [pc, #144]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	4914      	ldr	r1, [pc, #80]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0c:	490b      	ldr	r1, [pc, #44]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f30:	4902      	ldr	r1, [pc, #8]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f38:	e002      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00b      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f4c:	4b8a      	ldr	r3, [pc, #552]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	4986      	ldr	r1, [pc, #536]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f70:	4b81      	ldr	r3, [pc, #516]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f80:	497d      	ldr	r1, [pc, #500]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d006      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80d6 	beq.w	8005148 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f9c:	4b76      	ldr	r3, [pc, #472]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a75      	ldr	r2, [pc, #468]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa8:	f7fd fab4 	bl	8002514 <HAL_GetTick>
 8004fac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fb0:	f7fd fab0 	bl	8002514 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e195      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc2:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d021      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d11d      	bne.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fe2:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ff0:	4b61      	ldr	r3, [pc, #388]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	0e1b      	lsrs	r3, r3, #24
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	019a      	lsls	r2, r3, #6
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	041b      	lsls	r3, r3, #16
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	071b      	lsls	r3, r3, #28
 8005016:	4958      	ldr	r1, [pc, #352]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d004      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02e      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d129      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800504a:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005058:	4b47      	ldr	r3, [pc, #284]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	0f1b      	lsrs	r3, r3, #28
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	019a      	lsls	r2, r3, #6
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	071b      	lsls	r3, r3, #28
 800507e:	493e      	ldr	r1, [pc, #248]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005086:	4b3c      	ldr	r3, [pc, #240]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800508c:	f023 021f 	bic.w	r2, r3, #31
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	3b01      	subs	r3, #1
 8005096:	4938      	ldr	r1, [pc, #224]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d01d      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050b8:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4926      	ldr	r1, [pc, #152]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	019a      	lsls	r2, r3, #6
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	061b      	lsls	r3, r3, #24
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	071b      	lsls	r3, r3, #28
 800510e:	491a      	ldr	r1, [pc, #104]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005116:	4b18      	ldr	r3, [pc, #96]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800511c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fd f9f7 	bl	8002514 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800512a:	f7fd f9f3 	bl	8002514 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	; 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0d8      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800513c:	4b0e      	ldr	r3, [pc, #56]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b01      	cmp	r3, #1
 800514c:	f040 80ce 	bne.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005156:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800515c:	f7fd f9da 	bl	8002514 <HAL_GetTick>
 8005160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005162:	e00b      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005164:	f7fd f9d6 	bl	8002514 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d904      	bls.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0bb      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005188:	d0ec      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02e      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d12a      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051b2:	4b51      	ldr	r3, [pc, #324]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	0c1b      	lsrs	r3, r3, #16
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051c0:	4b4d      	ldr	r3, [pc, #308]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	0f1b      	lsrs	r3, r3, #28
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	019a      	lsls	r2, r3, #6
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	071b      	lsls	r3, r3, #28
 80051e6:	4944      	ldr	r1, [pc, #272]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051ee:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	3b01      	subs	r3, #1
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	493d      	ldr	r1, [pc, #244]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d022      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521c:	d11d      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800521e:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	0e1b      	lsrs	r3, r3, #24
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800522c:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	0f1b      	lsrs	r3, r3, #28
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	019a      	lsls	r2, r3, #6
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	431a      	orrs	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	061b      	lsls	r3, r3, #24
 800524c:	431a      	orrs	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	071b      	lsls	r3, r3, #28
 8005252:	4929      	ldr	r1, [pc, #164]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d028      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005266:	4b24      	ldr	r3, [pc, #144]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	0e1b      	lsrs	r3, r3, #24
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	019a      	lsls	r2, r3, #6
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	431a      	orrs	r2, r3
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	071b      	lsls	r3, r3, #28
 800529a:	4917      	ldr	r1, [pc, #92]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	4911      	ldr	r1, [pc, #68]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0e      	ldr	r2, [pc, #56]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c4:	f7fd f926 	bl	8002514 <HAL_GetTick>
 80052c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052cc:	f7fd f922 	bl	8002514 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b64      	cmp	r3, #100	; 0x64
 80052d8:	d901      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e007      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d1ef      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800

080052fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800531a:	f040 80a3 	bne.w	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800531e:	4ba8      	ldr	r3, [pc, #672]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005324:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800532c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005334:	f000 808a 	beq.w	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800533e:	f200 8093 	bhi.w	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005348:	d07d      	beq.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005350:	f200 808a 	bhi.w	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005360:	d039      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005362:	e081      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005364:	4b96      	ldr	r3, [pc, #600]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005370:	4b93      	ldr	r3, [pc, #588]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005378:	4a92      	ldr	r2, [pc, #584]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800537a:	fbb2 f3f3 	udiv	r3, r2, r3
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	e007      	b.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005382:	4b8f      	ldr	r3, [pc, #572]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800538a:	4a8f      	ldr	r2, [pc, #572]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005392:	4b8b      	ldr	r3, [pc, #556]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	0e1b      	lsrs	r3, r3, #24
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80053a0:	4b87      	ldr	r3, [pc, #540]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	099b      	lsrs	r3, r3, #6
 80053a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	fb03 f202 	mul.w	r2, r3, r2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80053ba:	4b81      	ldr	r3, [pc, #516]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	617b      	str	r3, [r7, #20]
        break;
 80053d4:	e049      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053d6:	4b7a      	ldr	r3, [pc, #488]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053e2:	4b77      	ldr	r3, [pc, #476]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ea:	4a76      	ldr	r2, [pc, #472]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80053ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e007      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053f4:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fc:	4a72      	ldr	r2, [pc, #456]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005404:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540a:	0e1b      	lsrs	r3, r3, #24
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005412:	4b6b      	ldr	r3, [pc, #428]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	fb03 f202 	mul.w	r2, r3, r2
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800542c:	4b64      	ldr	r3, [pc, #400]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800542e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	3301      	adds	r3, #1
 8005438:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005442:	617b      	str	r3, [r7, #20]
        break;
 8005444:	e011      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005446:	4b61      	ldr	r3, [pc, #388]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005448:	617b      	str	r3, [r7, #20]
        break;
 800544a:	e00e      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800544c:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005458:	4b5a      	ldr	r3, [pc, #360]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800545a:	617b      	str	r3, [r7, #20]
        break;
 800545c:	e005      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800545e:	4b5a      	ldr	r3, [pc, #360]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005460:	617b      	str	r3, [r7, #20]
        break;
 8005462:	e002      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8005464:	bf00      	nop
 8005466:	e000      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8005468:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005470:	f040 80a3 	bne.w	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005474:	4b52      	ldr	r3, [pc, #328]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800547a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005482:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800548a:	f000 808a 	beq.w	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005494:	f200 809c 	bhi.w	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800549e:	d07d      	beq.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a6:	f200 8093 	bhi.w	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d004      	beq.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b6:	d039      	beq.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80054b8:	e08a      	b.n	80055d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d108      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054c6:	4b3e      	ldr	r3, [pc, #248]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ce:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80054d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e007      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054d8:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e0:	4a39      	ldr	r2, [pc, #228]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	0e1b      	lsrs	r3, r3, #24
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80054f6:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	fb03 f202 	mul.w	r2, r3, r2
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005510:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005516:	0a1b      	lsrs	r3, r3, #8
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
        break;
 800552a:	e052      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d108      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005538:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005540:	4a20      	ldr	r2, [pc, #128]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005542:	fbb2 f3f3 	udiv	r3, r2, r3
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e007      	b.n	800555a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005552:	4a1d      	ldr	r2, [pc, #116]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800555a:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800555c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005560:	0e1b      	lsrs	r3, r3, #24
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800556a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556e:	099b      	lsrs	r3, r3, #6
 8005570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	fb03 f202 	mul.w	r2, r3, r2
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	617b      	str	r3, [r7, #20]
        break;
 800559a:	e01a      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800559e:	617b      	str	r3, [r7, #20]
        break;
 80055a0:	e017      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80055b0:	617b      	str	r3, [r7, #20]
        break;
 80055b2:	e00e      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80055b6:	617b      	str	r3, [r7, #20]
        break;
 80055b8:	e00b      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 80055ba:	bf00      	nop
 80055bc:	e009      	b.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80055be:	bf00      	nop
 80055c0:	40023800 	.word	0x40023800
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	017d7840 	.word	0x017d7840
 80055cc:	00bb8000 	.word	0x00bb8000
        break;
 80055d0:	bf00      	nop

  return frequency;
 80055d2:	697b      	ldr	r3, [r7, #20]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e071      	b.n	80056da <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7f5b      	ldrb	r3, [r3, #29]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d105      	bne.n	800560c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fb fe3c 	bl	8001284 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b10      	cmp	r3, #16
 800561e:	d053      	beq.n	80056c8 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	22ca      	movs	r2, #202	; 0xca
 8005626:	625a      	str	r2, [r3, #36]	; 0x24
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2253      	movs	r2, #83	; 0x53
 800562e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f99f 	bl	8005974 <RTC_EnterInitMode>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d12a      	bne.n	8005696 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6899      	ldr	r1, [r3, #8]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <HAL_RTC_Init+0x104>)
 800564c:	400b      	ands	r3, r1
 800564e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6899      	ldr	r1, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68d2      	ldr	r2, [r2, #12]
 8005676:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6919      	ldr	r1, [r3, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	041a      	lsls	r2, r3, #16
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f9a8 	bl	80059e2 <RTC_ExitInitMode>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0208 	bic.w	r2, r2, #8
 80056aa:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699a      	ldr	r2, [r3, #24]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	22ff      	movs	r2, #255	; 0xff
 80056c4:	625a      	str	r2, [r3, #36]	; 0x24
 80056c6:	e001      	b.n	80056cc <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	ff8fffbf 	.word	0xff8fffbf

080056e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056e8:	b590      	push	{r4, r7, lr}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	7f1b      	ldrb	r3, [r3, #28]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_RTC_SetTime+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e085      	b.n	8005810 <HAL_RTC_SetTime+0x128>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2202      	movs	r2, #2
 800570e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d126      	bne.n	8005764 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f97c 	bl	8005a2c <RTC_ByteToBcd2>
 8005734:	4603      	mov	r3, r0
 8005736:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f975 	bl	8005a2c <RTC_ByteToBcd2>
 8005742:	4603      	mov	r3, r0
 8005744:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005746:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	789b      	ldrb	r3, [r3, #2]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f96d 	bl	8005a2c <RTC_ByteToBcd2>
 8005752:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005754:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	78db      	ldrb	r3, [r3, #3]
 800575c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e018      	b.n	8005796 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005784:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800578a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	78db      	ldrb	r3, [r3, #3]
 8005790:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	22ca      	movs	r2, #202	; 0xca
 800579c:	625a      	str	r2, [r3, #36]	; 0x24
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2253      	movs	r2, #83	; 0x53
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f8e4 	bl	8005974 <RTC_EnterInitMode>
 80057ac:	4603      	mov	r3, r0
 80057ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057b0:	7cfb      	ldrb	r3, [r7, #19]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11e      	bne.n	80057f4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <HAL_RTC_SetTime+0x130>)
 80057be:	400b      	ands	r3, r1
 80057c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6899      	ldr	r1, [r3, #8]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 f8f9 	bl	80059e2 <RTC_ExitInitMode>
 80057f0:	4603      	mov	r3, r0
 80057f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057f4:	7cfb      	ldrb	r3, [r7, #19]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d102      	bne.n	8005800 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	22ff      	movs	r2, #255	; 0xff
 8005806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	771a      	strb	r2, [r3, #28]

  return status;
 800580e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	bd90      	pop	{r4, r7, pc}
 8005818:	007f7f7f 	.word	0x007f7f7f

0800581c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	7f1b      	ldrb	r3, [r3, #28]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_RTC_SetDate+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e06f      	b.n	8005918 <HAL_RTC_SetDate+0xfc>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2202      	movs	r2, #2
 8005842:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10e      	bne.n	8005868 <HAL_RTC_SetDate+0x4c>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	f023 0310 	bic.w	r3, r3, #16
 800585e:	b2db      	uxtb	r3, r3
 8005860:	330a      	adds	r3, #10
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d11c      	bne.n	80058a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f8da 	bl	8005a2c <RTC_ByteToBcd2>
 8005878:	4603      	mov	r3, r0
 800587a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f8d3 	bl	8005a2c <RTC_ByteToBcd2>
 8005886:	4603      	mov	r3, r0
 8005888:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800588a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	789b      	ldrb	r3, [r3, #2]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f8cb 	bl	8005a2c <RTC_ByteToBcd2>
 8005896:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005898:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e00e      	b.n	80058c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	78db      	ldrb	r3, [r3, #3]
 80058ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058b4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80058ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	22ca      	movs	r2, #202	; 0xca
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2253      	movs	r2, #83	; 0x53
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f84c 	bl	8005974 <RTC_EnterInitMode>
 80058dc:	4603      	mov	r3, r0
 80058de:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80058e0:	7cfb      	ldrb	r3, [r7, #19]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	6979      	ldr	r1, [r7, #20]
 80058ec:	4b0c      	ldr	r3, [pc, #48]	; (8005920 <HAL_RTC_SetDate+0x104>)
 80058ee:	400b      	ands	r3, r1
 80058f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f875 	bl	80059e2 <RTC_ExitInitMode>
 80058f8:	4603      	mov	r3, r0
 80058fa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80058fc:	7cfb      	ldrb	r3, [r7, #19]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	22ff      	movs	r2, #255	; 0xff
 800590e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	771a      	strb	r2, [r3, #28]

  return status;
 8005916:	7cfb      	ldrb	r3, [r7, #19]
}
 8005918:	4618      	mov	r0, r3
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}
 8005920:	00ffff3f 	.word	0x00ffff3f

08005924 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800593e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005940:	f7fc fde8 	bl	8002514 <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005946:	e009      	b.n	800595c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005948:	f7fc fde4 	bl	8002514 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005956:	d901      	bls.n	800595c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e007      	b.n	800596c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0ee      	beq.n	8005948 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d122      	bne.n	80059d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059a2:	f7fc fdb7 	bl	8002514 <HAL_GetTick>
 80059a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059a8:	e00c      	b.n	80059c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059aa:	f7fc fdb3 	bl	8002514 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059b8:	d904      	bls.n	80059c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <RTC_EnterInitMode+0x64>
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d1e8      	bne.n	80059aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff ff89 	bl	8005924 <HAL_RTC_WaitForSynchro>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005a3a:	e005      	b.n	8005a48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	3b0a      	subs	r3, #10
 8005a46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	2b09      	cmp	r3, #9
 8005a4c:	d8f6      	bhi.n	8005a3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	b2db      	uxtb	r3, r3
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3350      	adds	r3, #80	; 0x50
 8005a7e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4413      	add	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3350      	adds	r3, #80	; 0x50
 8005ab0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e156      	b.n	8005d98 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fb fc4c 	bl	800139c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2202      	movs	r2, #2
 8005b08:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f95b 	bl	8005dc8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d00c      	beq.n	8005b34 <HAL_SAI_Init+0x68>
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d80d      	bhi.n	8005b3a <HAL_SAI_Init+0x6e>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_SAI_Init+0x5c>
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d003      	beq.n	8005b2e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005b26:	e008      	b.n	8005b3a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	61fb      	str	r3, [r7, #28]
      break;
 8005b2c:	e006      	b.n	8005b3c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005b2e:	2310      	movs	r3, #16
 8005b30:	61fb      	str	r3, [r7, #28]
      break;
 8005b32:	e003      	b.n	8005b3c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005b34:	2320      	movs	r3, #32
 8005b36:	61fb      	str	r3, [r7, #28]
      break;
 8005b38:	e000      	b.n	8005b3c <HAL_SAI_Init+0x70>
      break;
 8005b3a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d81e      	bhi.n	8005b82 <HAL_SAI_Init+0xb6>
 8005b44:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <HAL_SAI_Init+0x80>)
 8005b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4a:	bf00      	nop
 8005b4c:	08005b5d 	.word	0x08005b5d
 8005b50:	08005b63 	.word	0x08005b63
 8005b54:	08005b6b 	.word	0x08005b6b
 8005b58:	08005b73 	.word	0x08005b73
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005b60:	e010      	b.n	8005b84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b66:	617b      	str	r3, [r7, #20]
    }
    break;
 8005b68:	e00c      	b.n	8005b84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b6e:	617b      	str	r3, [r7, #20]
    }
    break;
 8005b70:	e008      	b.n	8005b84 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b76:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005b80:	e000      	b.n	8005b84 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005b82:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a85      	ldr	r2, [pc, #532]	; (8005da0 <HAL_SAI_Init+0x2d4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_SAI_Init+0xcc>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a84      	ldr	r2, [pc, #528]	; (8005da4 <HAL_SAI_Init+0x2d8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005b98:	4a83      	ldr	r2, [pc, #524]	; (8005da8 <HAL_SAI_Init+0x2dc>)
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e002      	b.n	8005ba6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005ba0:	4a82      	ldr	r2, [pc, #520]	; (8005dac <HAL_SAI_Init+0x2e0>)
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04c      	beq.n	8005c48 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a7a      	ldr	r2, [pc, #488]	; (8005da0 <HAL_SAI_Init+0x2d4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d004      	beq.n	8005bc6 <HAL_SAI_Init+0xfa>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a78      	ldr	r2, [pc, #480]	; (8005da4 <HAL_SAI_Init+0x2d8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d104      	bne.n	8005bd0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005bc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005bca:	f7ff fb97 	bl	80052fc <HAL_RCCEx_GetPeriphCLKFreq>
 8005bce:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a76      	ldr	r2, [pc, #472]	; (8005db0 <HAL_SAI_Init+0x2e4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d004      	beq.n	8005be4 <HAL_SAI_Init+0x118>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a75      	ldr	r2, [pc, #468]	; (8005db4 <HAL_SAI_Init+0x2e8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d104      	bne.n	8005bee <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005be4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005be8:	f7ff fb88 	bl	80052fc <HAL_RCCEx_GetPeriphCLKFreq>
 8005bec:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	025b      	lsls	r3, r3, #9
 8005c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c04:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a6b      	ldr	r2, [pc, #428]	; (8005db8 <HAL_SAI_Init+0x2ec>)
 8005c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0e:	08da      	lsrs	r2, r3, #3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005c14:	68f9      	ldr	r1, [r7, #12]
 8005c16:	4b68      	ldr	r3, [pc, #416]	; (8005db8 <HAL_SAI_Init+0x2ec>)
 8005c18:	fba3 2301 	umull	r2, r3, r3, r1
 8005c1c:	08da      	lsrs	r2, r3, #3
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	1aca      	subs	r2, r1, r3
 8005c28:	2a08      	cmp	r2, #8
 8005c2a:	d904      	bls.n	8005c36 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	2b04      	cmp	r3, #4
 8005c3c:	d104      	bne.n	8005c48 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	085a      	lsrs	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_SAI_Init+0x18c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d109      	bne.n	8005c6c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_SAI_Init+0x198>
 8005c60:	2300      	movs	r3, #0
 8005c62:	e001      	b.n	8005c68 <HAL_SAI_Init+0x19c>
 8005c64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	e008      	b.n	8005c7e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d102      	bne.n	8005c7a <HAL_SAI_Init+0x1ae>
 8005c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c78:	e000      	b.n	8005c7c <HAL_SAI_Init+0x1b0>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <HAL_SAI_Init+0x2f0>)
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ca2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005cb6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005cc2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	051b      	lsls	r3, r3, #20
 8005cca:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6859      	ldr	r1, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b38      	ldr	r3, [pc, #224]	; (8005dc0 <HAL_SAI_Init+0x2f4>)
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6899      	ldr	r1, [r3, #8]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	4b2d      	ldr	r3, [pc, #180]	; (8005dc4 <HAL_SAI_Init+0x2f8>)
 8005d0e:	400b      	ands	r3, r1
 8005d10:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6899      	ldr	r1, [r3, #8]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005d22:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005d28:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005d2e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	3b01      	subs	r3, #1
 8005d36:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005d38:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68d9      	ldr	r1, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005d50:	400b      	ands	r3, r1
 8005d52:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d62:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	3b01      	subs	r3, #1
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40015804 	.word	0x40015804
 8005da4:	40015824 	.word	0x40015824
 8005da8:	40015800 	.word	0x40015800
 8005dac:	40015c00 	.word	0x40015c00
 8005db0:	40015c04 	.word	0x40015c04
 8005db4:	40015c24 	.word	0x40015c24
 8005db8:	cccccccd 	.word	0xcccccccd
 8005dbc:	ff05c010 	.word	0xff05c010
 8005dc0:	ffff1ff0 	.word	0xffff1ff0
 8005dc4:	fff88000 	.word	0xfff88000

08005dc8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005dd0:	4b17      	ldr	r3, [pc, #92]	; (8005e30 <SAI_Disable+0x68>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <SAI_Disable+0x6c>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	0b1b      	lsrs	r3, r3, #12
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005df2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1e5a      	subs	r2, r3, #1
 8005df8:	60fa      	str	r2, [r7, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	72fb      	strb	r3, [r7, #11]
      break;
 8005e12:	e006      	b.n	8005e22 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e8      	bne.n	8005df4 <SAI_Disable+0x2c>

  return status;
 8005e22:	7afb      	ldrb	r3, [r7, #11]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000000 	.word	0x20000000
 8005e34:	95cbec1b 	.word	0x95cbec1b

08005e38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e022      	b.n	8005e90 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fb fb69 	bl	8001534 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2203      	movs	r2, #3
 8005e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f814 	bl	8005e98 <HAL_SD_InitCard>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e00a      	b.n	8005e90 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e98:	b5b0      	push	{r4, r5, r7, lr}
 8005e9a:	b08e      	sub	sp, #56	; 0x38
 8005e9c:	af04      	add	r7, sp, #16
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005eb4:	2376      	movs	r3, #118	; 0x76
 8005eb6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681d      	ldr	r5, [r3, #0]
 8005ebc:	466c      	mov	r4, sp
 8005ebe:	f107 0314 	add.w	r3, r7, #20
 8005ec2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ec6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f001 ff45 	bl	8007d60 <SDMMC_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e059      	b.n	8005f9c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ef6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 ff79 	bl	8007df4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f10:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005f12:	2002      	movs	r0, #2
 8005f14:	f7fc fb0a 	bl	800252c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fff3 	bl	8006f04 <SD_PowerON>
 8005f1e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e02e      	b.n	8005f9c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 ff12 	bl	8006d68 <SD_InitCard>
 8005f44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e01b      	b.n	8005f9c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 ffd3 	bl	8007f18 <SDMMC_CmdBlockLength>
 8005f72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00f      	beq.n	8005f9a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <HAL_SD_InitCard+0x10c>)
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3728      	adds	r7, #40	; 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa4:	004005ff 	.word	0x004005ff

08005fa8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d107      	bne.n	8005fd0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0c3      	b.n	8006158 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	f040 80bc 	bne.w	8006156 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	441a      	add	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d907      	bls.n	8006002 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e0aa      	b.n	8006158 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2203      	movs	r2, #3
 8006006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2200      	movs	r2, #0
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	4a4e      	ldr	r2, [pc, #312]	; (8006160 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	4a4d      	ldr	r2, [pc, #308]	; (8006164 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2200      	movs	r2, #0
 8006038:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	2200      	movs	r2, #0
 8006040:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3380      	adds	r3, #128	; 0x80
 8006068:	4619      	mov	r1, r3
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	025b      	lsls	r3, r3, #9
 8006070:	089b      	lsrs	r3, r3, #2
 8006072:	f7fd fb49 	bl	8003708 <HAL_DMA_Start_IT>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d017      	beq.n	80060ac <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800608a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a35      	ldr	r2, [pc, #212]	; (8006168 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e055      	b.n	8006158 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0208 	orr.w	r2, r2, #8
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d002      	beq.n	80060ca <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	025b      	lsls	r3, r3, #9
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	025b      	lsls	r3, r3, #9
 80060d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060d6:	2390      	movs	r3, #144	; 0x90
 80060d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060da:	2302      	movs	r3, #2
 80060dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060de:	2300      	movs	r3, #0
 80060e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f107 0210 	add.w	r2, r7, #16
 80060ee:	4611      	mov	r1, r2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 fee5 	bl	8007ec0 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d90a      	bls.n	8006112 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2282      	movs	r2, #130	; 0x82
 8006100:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006108:	4618      	mov	r0, r3
 800610a:	f001 ff49 	bl	8007fa0 <SDMMC_CmdReadMultiBlock>
 800610e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006110:	e009      	b.n	8006126 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2281      	movs	r2, #129	; 0x81
 8006116:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800611e:	4618      	mov	r0, r3
 8006120:	f001 ff1c 	bl	8007f5c <SDMMC_CmdReadSingleBlock>
 8006124:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d012      	beq.n	8006152 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a0d      	ldr	r2, [pc, #52]	; (8006168 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	431a      	orrs	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e002      	b.n	8006158 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	; 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08006b77 	.word	0x08006b77
 8006164:	08006be9 	.word	0x08006be9
 8006168:	004005ff 	.word	0x004005ff

0800616c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08c      	sub	sp, #48	; 0x30
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d107      	bne.n	8006194 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0c6      	b.n	8006322 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	f040 80bf 	bne.w	8006320 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d907      	bls.n	80061c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0ad      	b.n	8006322 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2203      	movs	r2, #3
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 021a 	orr.w	r2, r2, #26
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	4a50      	ldr	r2, [pc, #320]	; (800632c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	4a4f      	ldr	r2, [pc, #316]	; (8006330 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80061f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	2200      	movs	r2, #0
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006202:	2b01      	cmp	r3, #1
 8006204:	d002      	beq.n	800620c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	025b      	lsls	r3, r3, #9
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d90a      	bls.n	8006228 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	22a0      	movs	r2, #160	; 0xa0
 8006216:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800621e:	4618      	mov	r0, r3
 8006220:	f001 ff02 	bl	8008028 <SDMMC_CmdWriteMultiBlock>
 8006224:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006226:	e009      	b.n	800623c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2290      	movs	r2, #144	; 0x90
 800622c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fed5 	bl	8007fe4 <SDMMC_CmdWriteSingleBlock>
 800623a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d012      	beq.n	8006268 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a3b      	ldr	r2, [pc, #236]	; (8006334 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006248:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	431a      	orrs	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e05c      	b.n	8006322 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0208 	orr.w	r2, r2, #8
 8006276:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	2240      	movs	r2, #64	; 0x40
 800627e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3380      	adds	r3, #128	; 0x80
 80062a8:	461a      	mov	r2, r3
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	025b      	lsls	r3, r3, #9
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	f7fd fa2a 	bl	8003708 <HAL_DMA_Start_IT>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01a      	beq.n	80062f0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 021a 	bic.w	r2, r2, #26
 80062c8:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a19      	ldr	r2, [pc, #100]	; (8006334 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e018      	b.n	8006322 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	025b      	lsls	r3, r3, #9
 80062fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80062fc:	2390      	movs	r3, #144	; 0x90
 80062fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006300:	2300      	movs	r3, #0
 8006302:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006304:	2300      	movs	r3, #0
 8006306:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006308:	2301      	movs	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f107 0210 	add.w	r2, r7, #16
 8006314:	4611      	mov	r1, r2
 8006316:	4618      	mov	r0, r3
 8006318:	f001 fdd2 	bl	8007ec0 <SDMMC_ConfigData>

      return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e000      	b.n	8006322 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006320:	2302      	movs	r3, #2
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	3730      	adds	r7, #48	; 0x30
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	08006b4d 	.word	0x08006b4d
 8006330:	08006be9 	.word	0x08006be9
 8006334:	004005ff 	.word	0x004005ff

08006338 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006344:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_SD_IRQHandler+0x2e>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 ffef 	bl	8007342 <SD_Read_IT>
 8006364:	e15a      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	f000 808d 	beq.w	8006490 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b9a      	ldr	r3, [pc, #616]	; (80065f4 <HAL_SD_IRQHandler+0x2bc>)
 800638c:	400b      	ands	r3, r1
 800638e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0201 	bic.w	r2, r2, #1
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d039      	beq.n	800641e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <HAL_SD_IRQHandler+0x86>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 fe52 	bl	800806c <SDMMC_CmdStopTransfer>
 80063c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f921 	bl	8006624 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f240 523a 	movw	r2, #1338	; 0x53a
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d104      	bne.n	800640e <HAL_SD_IRQHandler+0xd6>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f002 fac2 	bl	8008998 <HAL_SD_RxCpltCallback>
 8006414:	e102      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f002 fab4 	bl	8008984 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800641c:	e0fe      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80f9 	beq.w	800661c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0320 	and.w	r3, r3, #32
 8006430:	2b00      	cmp	r3, #0
 8006432:	d011      	beq.n	8006458 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fe17 	bl	800806c <SDMMC_CmdStopTransfer>
 800643e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	431a      	orrs	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f8e6 	bl	8006624 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 80dc 	bne.w	800661c <HAL_SD_IRQHandler+0x2e4>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 80d6 	bne.w	800661c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0208 	bic.w	r2, r2, #8
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f002 fa7b 	bl	8008984 <HAL_SD_TxCpltCallback>
}
 800648e:	e0c5      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_SD_IRQHandler+0x178>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d003      	beq.n	80064b0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 ff9b 	bl	80073e4 <SD_Write_IT>
 80064ae:	e0b5      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 80ae 	beq.w	800661c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	f003 0302 	and.w	r3, r3, #2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	f043 0202 	orr.w	r2, r3, #2
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	f043 0208 	orr.w	r2, r3, #8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064fa:	f003 0320 	and.w	r3, r3, #32
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	f043 0220 	orr.w	r2, r3, #32
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	f043 0210 	orr.w	r2, r3, #16
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006530:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006540:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f001 fd90 	bl	800806c <SDMMC_CmdStopTransfer>
 800654c:	4602      	mov	r2, r0
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	431a      	orrs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f857 	bl	8006624 <HAL_SD_ErrorCallback>
}
 8006576:	e051      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d04c      	beq.n	800661c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <HAL_SD_IRQHandler+0x25e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <HAL_SD_IRQHandler+0x2c0>)
 800659c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fd f910 	bl	80037c8 <HAL_DMA_Abort_IT>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d036      	beq.n	800661c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fb6a 	bl	8006c8c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80065b8:	e030      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d104      	bne.n	80065ce <HAL_SD_IRQHandler+0x296>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d018      	beq.n	8006600 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <HAL_SD_IRQHandler+0x2c4>)
 80065d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fd f8f4 	bl	80037c8 <HAL_DMA_Abort_IT>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01a      	beq.n	800661c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	4618      	mov	r0, r3
 80065ec:	f000 fb85 	bl	8006cfa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80065f0:	e014      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
 80065f2:	bf00      	nop
 80065f4:	ffff3ec5 	.word	0xffff3ec5
 80065f8:	08006c8d 	.word	0x08006c8d
 80065fc:	08006cfb 	.word	0x08006cfb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f002 f9ab 	bl	8008970 <HAL_SD_AbortCallback>
}
 800661a:	e7ff      	b.n	800661c <HAL_SD_IRQHandler+0x2e4>
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006646:	0f9b      	lsrs	r3, r3, #30
 8006648:	b2da      	uxtb	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006652:	0e9b      	lsrs	r3, r3, #26
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	b2da      	uxtb	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006664:	0e1b      	lsrs	r3, r3, #24
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	b2da      	uxtb	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	b2da      	uxtb	r2, r3
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b2da      	uxtb	r2, r3
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668e:	b2da      	uxtb	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006698:	0d1b      	lsrs	r3, r3, #20
 800669a:	b29a      	uxth	r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a4:	0c1b      	lsrs	r3, r3, #16
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066b6:	0bdb      	lsrs	r3, r3, #15
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066c8:	0b9b      	lsrs	r3, r3, #14
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066da:	0b5b      	lsrs	r3, r3, #13
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	b2da      	uxtb	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ec:	0b1b      	lsrs	r3, r3, #12
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006704:	2b00      	cmp	r3, #0
 8006706:	d163      	bne.n	80067d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800670c:	009a      	lsls	r2, r3, #2
 800670e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006712:	4013      	ands	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006718:	0f92      	lsrs	r2, r2, #30
 800671a:	431a      	orrs	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006724:	0edb      	lsrs	r3, r3, #27
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	b2da      	uxtb	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006736:	0e1b      	lsrs	r3, r3, #24
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	b2da      	uxtb	r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006748:	0d5b      	lsrs	r3, r3, #21
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	b2da      	uxtb	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675a:	0c9b      	lsrs	r3, r3, #18
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	b2da      	uxtb	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676c:	0bdb      	lsrs	r3, r3, #15
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	b2da      	uxtb	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	7e1b      	ldrb	r3, [r3, #24]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	3302      	adds	r3, #2
 8006790:	2201      	movs	r2, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800679a:	fb03 f202 	mul.w	r2, r3, r2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	7a1b      	ldrb	r3, [r3, #8]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	f003 030f 	and.w	r3, r3, #15
 80067ac:	2201      	movs	r2, #1
 80067ae:	409a      	lsls	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80067bc:	0a52      	lsrs	r2, r2, #9
 80067be:	fb03 f202 	mul.w	r2, r3, r2
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067cc:	661a      	str	r2, [r3, #96]	; 0x60
 80067ce:	e031      	b.n	8006834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d11d      	bne.n	8006814 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	0c1b      	lsrs	r3, r3, #16
 80067e8:	431a      	orrs	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	3301      	adds	r3, #1
 80067f4:	029a      	lsls	r2, r3, #10
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006808:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	661a      	str	r2, [r3, #96]	; 0x60
 8006812:	e00f      	b.n	8006834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a58      	ldr	r2, [pc, #352]	; (800697c <HAL_SD_GetCardCSD+0x344>)
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e09d      	b.n	8006970 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006838:	0b9b      	lsrs	r3, r3, #14
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800684a:	09db      	lsrs	r3, r3, #7
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006862:	b2da      	uxtb	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	0fdb      	lsrs	r3, r3, #31
 800686e:	b2da      	uxtb	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006878:	0f5b      	lsrs	r3, r3, #29
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	b2da      	uxtb	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	0e9b      	lsrs	r3, r3, #26
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	b2da      	uxtb	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689c:	0d9b      	lsrs	r3, r3, #22
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	0d5b      	lsrs	r3, r3, #21
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	0c1b      	lsrs	r3, r3, #16
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	0bdb      	lsrs	r3, r3, #15
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0301 	and.w	r3, r3, #1
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	0b9b      	lsrs	r3, r3, #14
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	0b5b      	lsrs	r3, r3, #13
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	0b1b      	lsrs	r3, r3, #12
 800691c:	b2db      	uxtb	r3, r3
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	0a9b      	lsrs	r3, r3, #10
 8006930:	b2db      	uxtb	r3, r3
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	b2da      	uxtb	r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	b2da      	uxtb	r2, r3
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	085b      	lsrs	r3, r3, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695e:	b2da      	uxtb	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	004005ff 	.word	0x004005ff

08006980 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80069d8:	b5b0      	push	{r4, r5, r7, lr}
 80069da:	b08e      	sub	sp, #56	; 0x38
 80069dc:	af04      	add	r7, sp, #16
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80069e2:	2300      	movs	r3, #0
 80069e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2203      	movs	r2, #3
 80069ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d02e      	beq.n	8006a56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	d106      	bne.n	8006a0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a0c:	e029      	b.n	8006a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a14:	d10a      	bne.n	8006a2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fb2a 	bl	8007070 <SD_WideBus_Enable>
 8006a1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
 8006a2a:	e01a      	b.n	8006a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb67 	bl	8007106 <SD_WideBus_Disable>
 8006a38:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
 8006a46:	e00c      	b.n	8006a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38
 8006a54:	e005      	b.n	8006a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006a70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a80:	e01f      	b.n	8006ac2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681d      	ldr	r5, [r3, #0]
 8006aa8:	466c      	mov	r4, sp
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ab6:	f107 0308 	add.w	r3, r7, #8
 8006aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006abc:	4628      	mov	r0, r5
 8006abe:	f001 f94f 	bl	8007d60 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fa24 	bl	8007f18 <SDMMC_CmdBlockLength>
 8006ad0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00c      	beq.n	8006af2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bdb0      	pop	{r4, r5, r7, pc}
 8006b06:	bf00      	nop
 8006b08:	004005ff 	.word	0x004005ff

08006b0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fa7e 	bl	8007020 <SD_SendStatus>
 8006b24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	0a5b      	lsrs	r3, r3, #9
 8006b3c:	f003 030f 	and.w	r3, r3, #15
 8006b40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006b42:	693b      	ldr	r3, [r7, #16]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006b6a:	bf00      	nop
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b084      	sub	sp, #16
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	2b82      	cmp	r3, #130	; 0x82
 8006b8a:	d111      	bne.n	8006bb0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f001 fa6b 	bl	800806c <SDMMC_CmdStopTransfer>
 8006b96:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d008      	beq.n	8006bb0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff fd3a 	bl	8006624 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0208 	bic.w	r2, r2, #8
 8006bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f240 523a 	movw	r2, #1338	; 0x53a
 8006bc8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f001 fedd 	bl	8008998 <HAL_SD_RxCpltCallback>
#endif
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fc ff92 	bl	8003b20 <HAL_DMA_GetError>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d03e      	beq.n	8006c80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d002      	beq.n	8006c1e <SD_DMAError+0x36>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d12d      	bne.n	8006c7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a19      	ldr	r2, [pc, #100]	; (8006c88 <SD_DMAError+0xa0>)
 8006c24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006c34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006c42:	6978      	ldr	r0, [r7, #20]
 8006c44:	f7ff ff62 	bl	8006b0c <HAL_SD_GetCardState>
 8006c48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d002      	beq.n	8006c56 <SD_DMAError+0x6e>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d10a      	bne.n	8006c6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fa06 	bl	800806c <SDMMC_CmdStopTransfer>
 8006c60:	4602      	mov	r2, r0
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	431a      	orrs	r2, r3
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006c7a:	6978      	ldr	r0, [r7, #20]
 8006c7c:	f7ff fcd2 	bl	8006624 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006c80:	bf00      	nop
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	004005ff 	.word	0x004005ff

08006c8c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006ca2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff ff31 	bl	8006b0c <HAL_SD_GetCardState>
 8006caa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b06      	cmp	r3, #6
 8006cbe:	d002      	beq.n	8006cc6 <SD_DMATxAbort+0x3a>
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b05      	cmp	r3, #5
 8006cc4:	d10a      	bne.n	8006cdc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 f9ce 	bl	800806c <SDMMC_CmdStopTransfer>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f001 fe43 	bl	8008970 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006cea:	e002      	b.n	8006cf2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fc99 	bl	8006624 <HAL_SD_ErrorCallback>
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d06:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff fefa 	bl	8006b0c <HAL_SD_GetCardState>
 8006d18:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d002      	beq.n	8006d34 <SD_DMARxAbort+0x3a>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b05      	cmp	r3, #5
 8006d32:	d10a      	bne.n	8006d4a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 f997 	bl	800806c <SDMMC_CmdStopTransfer>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d103      	bne.n	8006d5a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f001 fe0c 	bl	8008970 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006d58:	e002      	b.n	8006d60 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff fc62 	bl	8006624 <HAL_SD_ErrorCallback>
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d68:	b5b0      	push	{r4, r5, r7, lr}
 8006d6a:	b094      	sub	sp, #80	; 0x50
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006d70:	2301      	movs	r3, #1
 8006d72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 f849 	bl	8007e10 <SDMMC_GetPowerState>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d102      	bne.n	8006d8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d88:	e0b8      	b.n	8006efc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d02f      	beq.n	8006df2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f001 fa73 	bl	8008282 <SDMMC_CmdSendCID>
 8006d9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <SD_InitCard+0x40>
    {
      return errorstate;
 8006da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da6:	e0a9      	b.n	8006efc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 f873 	bl	8007e9a <SDMMC_GetResponse>
 8006db4:	4602      	mov	r2, r0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2104      	movs	r1, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f001 f86a 	bl	8007e9a <SDMMC_GetResponse>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2108      	movs	r1, #8
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f001 f861 	bl	8007e9a <SDMMC_GetResponse>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	210c      	movs	r1, #12
 8006de4:	4618      	mov	r0, r3
 8006de6:	f001 f858 	bl	8007e9a <SDMMC_GetResponse>
 8006dea:	4602      	mov	r2, r0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d00d      	beq.n	8006e16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f107 020e 	add.w	r2, r7, #14
 8006e02:	4611      	mov	r1, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f001 fa79 	bl	80082fc <SDMMC_CmdSetRelAdd>
 8006e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <SD_InitCard+0xae>
    {
      return errorstate;
 8006e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e14:	e072      	b.n	8006efc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d036      	beq.n	8006e8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006e1e:	89fb      	ldrh	r3, [r7, #14]
 8006e20:	461a      	mov	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2e:	041b      	lsls	r3, r3, #16
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f001 fa43 	bl	80082be <SDMMC_CmdSendCSD>
 8006e38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	e05b      	b.n	8006efc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 f825 	bl	8007e9a <SDMMC_GetResponse>
 8006e50:	4602      	mov	r2, r0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f001 f81c 	bl	8007e9a <SDMMC_GetResponse>
 8006e62:	4602      	mov	r2, r0
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2108      	movs	r1, #8
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 f813 	bl	8007e9a <SDMMC_GetResponse>
 8006e74:	4602      	mov	r2, r0
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	210c      	movs	r1, #12
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f80a 	bl	8007e9a <SDMMC_GetResponse>
 8006e86:	4602      	mov	r2, r0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2104      	movs	r1, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f801 	bl	8007e9a <SDMMC_GetResponse>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	0d1a      	lsrs	r2, r3, #20
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff fbc6 	bl	8006638 <HAL_SD_GetCardCSD>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006eb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006eb6:	e021      	b.n	8006efc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6819      	ldr	r1, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	461c      	mov	r4, r3
 8006ec6:	4615      	mov	r5, r2
 8006ec8:	4622      	mov	r2, r4
 8006eca:	462b      	mov	r3, r5
 8006ecc:	4608      	mov	r0, r1
 8006ece:	f001 f8ef 	bl	80080b0 <SDMMC_CmdSelDesel>
 8006ed2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <SD_InitCard+0x176>
  {
    return errorstate;
 8006eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006edc:	e00e      	b.n	8006efc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681d      	ldr	r5, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	466c      	mov	r4, sp
 8006ee6:	f103 0210 	add.w	r2, r3, #16
 8006eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8006eec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 ff33 	bl	8007d60 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3740      	adds	r7, #64	; 0x40
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bdb0      	pop	{r4, r5, r7, pc}

08006f04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 f8ea 	bl	80080f6 <SDMMC_CmdGoIdleState>
 8006f22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	e072      	b.n	8007014 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 f8fd 	bl	8008132 <SDMMC_CmdOperCond>
 8006f38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 f8d3 	bl	80080f6 <SDMMC_CmdGoIdleState>
 8006f50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d004      	beq.n	8006f62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	e05b      	b.n	8007014 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d137      	bne.n	8006fda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 f8fd 	bl	8008170 <SDMMC_CmdAppCommand>
 8006f76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d02d      	beq.n	8006fda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f82:	e047      	b.n	8007014 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 f8f0 	bl	8008170 <SDMMC_CmdAppCommand>
 8006f90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <SD_PowerON+0x98>
    {
      return errorstate;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	e03b      	b.n	8007014 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	491e      	ldr	r1, [pc, #120]	; (800701c <SD_PowerON+0x118>)
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f906 	bl	80081b4 <SDMMC_CmdAppOperCommand>
 8006fa8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fb4:	e02e      	b.n	8007014 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 ff6c 	bl	8007e9a <SDMMC_GetResponse>
 8006fc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	0fdb      	lsrs	r3, r3, #31
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <SD_PowerON+0xcc>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <SD_PowerON+0xce>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	613b      	str	r3, [r7, #16]

    count++;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d802      	bhi.n	8006fea <SD_PowerON+0xe6>
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0cc      	beq.n	8006f84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d902      	bls.n	8006ffa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ff8:	e00c      	b.n	8007014 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	645a      	str	r2, [r3, #68]	; 0x44
 800700a:	e002      	b.n	8007012 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3718      	adds	r7, #24
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	c1100000 	.word	0xc1100000

08007020 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007030:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007034:	e018      	b.n	8007068 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	4619      	mov	r1, r3
 8007042:	4610      	mov	r0, r2
 8007044:	f001 f97b 	bl	800833e <SDMMC_CmdSendStatus>
 8007048:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	e009      	b.n	8007068 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2100      	movs	r1, #0
 800705a:	4618      	mov	r0, r3
 800705c:	f000 ff1d 	bl	8007e9a <SDMMC_GetResponse>
 8007060:	4602      	mov	r2, r0
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f000 ff07 	bl	8007e9a <SDMMC_GetResponse>
 800708c:	4603      	mov	r3, r0
 800708e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007096:	d102      	bne.n	800709e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007098:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800709c:	e02f      	b.n	80070fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800709e:	f107 030c 	add.w	r3, r7, #12
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f879 	bl	800719c <SD_FindSCR>
 80070aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	e023      	b.n	80070fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01c      	beq.n	80070fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f001 f84f 	bl	8008170 <SDMMC_CmdAppCommand>
 80070d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	e00f      	b.n	80070fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2102      	movs	r1, #2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f889 	bl	80081fc <SDMMC_CmdBusWidth>
 80070ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	e003      	b.n	80070fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e001      	b.n	80070fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b086      	sub	sp, #24
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2100      	movs	r1, #0
 800711c:	4618      	mov	r0, r3
 800711e:	f000 febc 	bl	8007e9a <SDMMC_GetResponse>
 8007122:	4603      	mov	r3, r0
 8007124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712c:	d102      	bne.n	8007134 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800712e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007132:	e02f      	b.n	8007194 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f82e 	bl	800719c <SD_FindSCR>
 8007140:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	e023      	b.n	8007194 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d01c      	beq.n	8007190 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	041b      	lsls	r3, r3, #16
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f001 f804 	bl	8008170 <SDMMC_CmdAppCommand>
 8007168:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	e00f      	b.n	8007194 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2100      	movs	r1, #0
 800717a:	4618      	mov	r0, r3
 800717c:	f001 f83e 	bl	80081fc <SDMMC_CmdBusWidth>
 8007180:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	e003      	b.n	8007194 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800718c:	2300      	movs	r3, #0
 800718e:	e001      	b.n	8007194 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007190:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800719c:	b590      	push	{r4, r7, lr}
 800719e:	b08f      	sub	sp, #60	; 0x3c
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071a6:	f7fb f9b5 	bl	8002514 <HAL_GetTick>
 80071aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80071b0:	2300      	movs	r3, #0
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2108      	movs	r1, #8
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fea8 	bl	8007f18 <SDMMC_CmdBlockLength>
 80071c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	e0b2      	b.n	800733a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f000 ffc5 	bl	8008170 <SDMMC_CmdAppCommand>
 80071e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80071ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f0:	e0a3      	b.n	800733a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80071f8:	2308      	movs	r3, #8
 80071fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80071fc:	2330      	movs	r3, #48	; 0x30
 80071fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007200:	2302      	movs	r3, #2
 8007202:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007204:	2300      	movs	r3, #0
 8007206:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007208:	2301      	movs	r3, #1
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f107 0210 	add.w	r2, r7, #16
 8007214:	4611      	mov	r1, r2
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fe52 	bl	8007ec0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	f001 f80d 	bl	8008240 <SDMMC_CmdSendSCR>
 8007226:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02a      	beq.n	8007284 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	e083      	b.n	800733a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00f      	beq.n	8007260 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f107 0208 	add.w	r2, r7, #8
 800724c:	18d4      	adds	r4, r2, r3
 800724e:	4608      	mov	r0, r1
 8007250:	f000 fdb2 	bl	8007db8 <SDMMC_ReadFIFO>
 8007254:	4603      	mov	r3, r0
 8007256:	6023      	str	r3, [r4, #0]
      index++;
 8007258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725a:	3301      	adds	r3, #1
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
 800725e:	e006      	b.n	800726e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d012      	beq.n	8007294 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800726e:	f7fb f951 	bl	8002514 <HAL_GetTick>
 8007272:	4602      	mov	r2, r0
 8007274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727c:	d102      	bne.n	8007284 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800727e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007282:	e05a      	b.n	800733a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0cf      	beq.n	8007232 <SD_FindSCR+0x96>
 8007292:	e000      	b.n	8007296 <SD_FindSCR+0xfa>
      break;
 8007294:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729c:	f003 0308 	and.w	r3, r3, #8
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d005      	beq.n	80072b0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2208      	movs	r2, #8
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80072ac:	2308      	movs	r3, #8
 80072ae:	e044      	b.n	800733a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2202      	movs	r2, #2
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	e037      	b.n	800733a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d0:	f003 0320 	and.w	r3, r3, #32
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2220      	movs	r2, #32
 80072de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80072e0:	2320      	movs	r3, #32
 80072e2:	e02a      	b.n	800733a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	061a      	lsls	r2, r3, #24
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007304:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	0e1b      	lsrs	r3, r3, #24
 800730a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	601a      	str	r2, [r3, #0]
    scr++;
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	3304      	adds	r3, #4
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	061a      	lsls	r2, r3, #24
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007322:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800732c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	0e1b      	lsrs	r3, r3, #24
 8007332:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	373c      	adds	r7, #60	; 0x3c
 800733e:	46bd      	mov	sp, r7
 8007340:	bd90      	pop	{r4, r7, pc}

08007342 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03f      	beq.n	80073dc <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	e033      	b.n	80073ca <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fd26 	bl	8007db8 <SDMMC_ReadFIFO>
 800736c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	b2da      	uxtb	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3301      	adds	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	3b01      	subs	r3, #1
 8007380:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	0a1b      	lsrs	r3, r3, #8
 8007386:	b2da      	uxtb	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3b01      	subs	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	0c1b      	lsrs	r3, r3, #16
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	0e1b      	lsrs	r3, r3, #24
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3301      	adds	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	d9c8      	bls.n	8007362 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80073dc:	bf00      	nop
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d043      	beq.n	8007486 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80073fe:	2300      	movs	r3, #0
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	e037      	b.n	8007474 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	60bb      	str	r3, [r7, #8]
      tmp++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	3b01      	subs	r3, #1
 8007414:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	021a      	lsls	r2, r3, #8
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4313      	orrs	r3, r2
 8007420:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	3b01      	subs	r3, #1
 800742c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	041a      	lsls	r2, r3, #16
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
 8007438:	60bb      	str	r3, [r7, #8]
      tmp++;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3301      	adds	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	3b01      	subs	r3, #1
 8007444:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	061a      	lsls	r2, r3, #24
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4313      	orrs	r3, r2
 8007450:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	3b01      	subs	r3, #1
 800745c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f107 0208 	add.w	r2, r7, #8
 8007466:	4611      	mov	r1, r2
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fcb2 	bl	8007dd2 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	3301      	adds	r3, #1
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2b07      	cmp	r3, #7
 8007478:	d9c4      	bls.n	8007404 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007486:	bf00      	nop
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e040      	b.n	8007522 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d106      	bne.n	80074b6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fa fa21 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2224      	movs	r2, #36	; 0x24
 80074ba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0201 	bic.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f82d 	bl	800752c <UART_SetConfig>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e022      	b.n	8007522 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa85 	bl	80079f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007508:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 0201 	orr.w	r2, r2, #1
 8007518:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb0c 	bl	8007b38 <UART_CheckIdleState>
 8007520:	4603      	mov	r3, r0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689a      	ldr	r2, [r3, #8]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	69db      	ldr	r3, [r3, #28]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	4ba6      	ldr	r3, [pc, #664]	; (80077f0 <UART_SetConfig+0x2c4>)
 8007558:	4013      	ands	r3, r2
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	6979      	ldr	r1, [r7, #20]
 8007560:	430b      	orrs	r3, r1
 8007562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a1b      	ldr	r3, [r3, #32]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	430a      	orrs	r2, r1
 800759c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a94      	ldr	r2, [pc, #592]	; (80077f4 <UART_SetConfig+0x2c8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d120      	bne.n	80075ea <UART_SetConfig+0xbe>
 80075a8:	4b93      	ldr	r3, [pc, #588]	; (80077f8 <UART_SetConfig+0x2cc>)
 80075aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d816      	bhi.n	80075e4 <UART_SetConfig+0xb8>
 80075b6:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <UART_SetConfig+0x90>)
 80075b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075bc:	080075cd 	.word	0x080075cd
 80075c0:	080075d9 	.word	0x080075d9
 80075c4:	080075d3 	.word	0x080075d3
 80075c8:	080075df 	.word	0x080075df
 80075cc:	2301      	movs	r3, #1
 80075ce:	77fb      	strb	r3, [r7, #31]
 80075d0:	e150      	b.n	8007874 <UART_SetConfig+0x348>
 80075d2:	2302      	movs	r3, #2
 80075d4:	77fb      	strb	r3, [r7, #31]
 80075d6:	e14d      	b.n	8007874 <UART_SetConfig+0x348>
 80075d8:	2304      	movs	r3, #4
 80075da:	77fb      	strb	r3, [r7, #31]
 80075dc:	e14a      	b.n	8007874 <UART_SetConfig+0x348>
 80075de:	2308      	movs	r3, #8
 80075e0:	77fb      	strb	r3, [r7, #31]
 80075e2:	e147      	b.n	8007874 <UART_SetConfig+0x348>
 80075e4:	2310      	movs	r3, #16
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e144      	b.n	8007874 <UART_SetConfig+0x348>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a83      	ldr	r2, [pc, #524]	; (80077fc <UART_SetConfig+0x2d0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d132      	bne.n	800765a <UART_SetConfig+0x12e>
 80075f4:	4b80      	ldr	r3, [pc, #512]	; (80077f8 <UART_SetConfig+0x2cc>)
 80075f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fa:	f003 030c 	and.w	r3, r3, #12
 80075fe:	2b0c      	cmp	r3, #12
 8007600:	d828      	bhi.n	8007654 <UART_SetConfig+0x128>
 8007602:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <UART_SetConfig+0xdc>)
 8007604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007608:	0800763d 	.word	0x0800763d
 800760c:	08007655 	.word	0x08007655
 8007610:	08007655 	.word	0x08007655
 8007614:	08007655 	.word	0x08007655
 8007618:	08007649 	.word	0x08007649
 800761c:	08007655 	.word	0x08007655
 8007620:	08007655 	.word	0x08007655
 8007624:	08007655 	.word	0x08007655
 8007628:	08007643 	.word	0x08007643
 800762c:	08007655 	.word	0x08007655
 8007630:	08007655 	.word	0x08007655
 8007634:	08007655 	.word	0x08007655
 8007638:	0800764f 	.word	0x0800764f
 800763c:	2300      	movs	r3, #0
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e118      	b.n	8007874 <UART_SetConfig+0x348>
 8007642:	2302      	movs	r3, #2
 8007644:	77fb      	strb	r3, [r7, #31]
 8007646:	e115      	b.n	8007874 <UART_SetConfig+0x348>
 8007648:	2304      	movs	r3, #4
 800764a:	77fb      	strb	r3, [r7, #31]
 800764c:	e112      	b.n	8007874 <UART_SetConfig+0x348>
 800764e:	2308      	movs	r3, #8
 8007650:	77fb      	strb	r3, [r7, #31]
 8007652:	e10f      	b.n	8007874 <UART_SetConfig+0x348>
 8007654:	2310      	movs	r3, #16
 8007656:	77fb      	strb	r3, [r7, #31]
 8007658:	e10c      	b.n	8007874 <UART_SetConfig+0x348>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a68      	ldr	r2, [pc, #416]	; (8007800 <UART_SetConfig+0x2d4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d120      	bne.n	80076a6 <UART_SetConfig+0x17a>
 8007664:	4b64      	ldr	r3, [pc, #400]	; (80077f8 <UART_SetConfig+0x2cc>)
 8007666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800766e:	2b30      	cmp	r3, #48	; 0x30
 8007670:	d013      	beq.n	800769a <UART_SetConfig+0x16e>
 8007672:	2b30      	cmp	r3, #48	; 0x30
 8007674:	d814      	bhi.n	80076a0 <UART_SetConfig+0x174>
 8007676:	2b20      	cmp	r3, #32
 8007678:	d009      	beq.n	800768e <UART_SetConfig+0x162>
 800767a:	2b20      	cmp	r3, #32
 800767c:	d810      	bhi.n	80076a0 <UART_SetConfig+0x174>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <UART_SetConfig+0x15c>
 8007682:	2b10      	cmp	r3, #16
 8007684:	d006      	beq.n	8007694 <UART_SetConfig+0x168>
 8007686:	e00b      	b.n	80076a0 <UART_SetConfig+0x174>
 8007688:	2300      	movs	r3, #0
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e0f2      	b.n	8007874 <UART_SetConfig+0x348>
 800768e:	2302      	movs	r3, #2
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e0ef      	b.n	8007874 <UART_SetConfig+0x348>
 8007694:	2304      	movs	r3, #4
 8007696:	77fb      	strb	r3, [r7, #31]
 8007698:	e0ec      	b.n	8007874 <UART_SetConfig+0x348>
 800769a:	2308      	movs	r3, #8
 800769c:	77fb      	strb	r3, [r7, #31]
 800769e:	e0e9      	b.n	8007874 <UART_SetConfig+0x348>
 80076a0:	2310      	movs	r3, #16
 80076a2:	77fb      	strb	r3, [r7, #31]
 80076a4:	e0e6      	b.n	8007874 <UART_SetConfig+0x348>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a56      	ldr	r2, [pc, #344]	; (8007804 <UART_SetConfig+0x2d8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d120      	bne.n	80076f2 <UART_SetConfig+0x1c6>
 80076b0:	4b51      	ldr	r3, [pc, #324]	; (80077f8 <UART_SetConfig+0x2cc>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076ba:	2bc0      	cmp	r3, #192	; 0xc0
 80076bc:	d013      	beq.n	80076e6 <UART_SetConfig+0x1ba>
 80076be:	2bc0      	cmp	r3, #192	; 0xc0
 80076c0:	d814      	bhi.n	80076ec <UART_SetConfig+0x1c0>
 80076c2:	2b80      	cmp	r3, #128	; 0x80
 80076c4:	d009      	beq.n	80076da <UART_SetConfig+0x1ae>
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d810      	bhi.n	80076ec <UART_SetConfig+0x1c0>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <UART_SetConfig+0x1a8>
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d006      	beq.n	80076e0 <UART_SetConfig+0x1b4>
 80076d2:	e00b      	b.n	80076ec <UART_SetConfig+0x1c0>
 80076d4:	2300      	movs	r3, #0
 80076d6:	77fb      	strb	r3, [r7, #31]
 80076d8:	e0cc      	b.n	8007874 <UART_SetConfig+0x348>
 80076da:	2302      	movs	r3, #2
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	e0c9      	b.n	8007874 <UART_SetConfig+0x348>
 80076e0:	2304      	movs	r3, #4
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e0c6      	b.n	8007874 <UART_SetConfig+0x348>
 80076e6:	2308      	movs	r3, #8
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e0c3      	b.n	8007874 <UART_SetConfig+0x348>
 80076ec:	2310      	movs	r3, #16
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e0c0      	b.n	8007874 <UART_SetConfig+0x348>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a44      	ldr	r2, [pc, #272]	; (8007808 <UART_SetConfig+0x2dc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d125      	bne.n	8007748 <UART_SetConfig+0x21c>
 80076fc:	4b3e      	ldr	r3, [pc, #248]	; (80077f8 <UART_SetConfig+0x2cc>)
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770a:	d017      	beq.n	800773c <UART_SetConfig+0x210>
 800770c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007710:	d817      	bhi.n	8007742 <UART_SetConfig+0x216>
 8007712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007716:	d00b      	beq.n	8007730 <UART_SetConfig+0x204>
 8007718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771c:	d811      	bhi.n	8007742 <UART_SetConfig+0x216>
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <UART_SetConfig+0x1fe>
 8007722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007726:	d006      	beq.n	8007736 <UART_SetConfig+0x20a>
 8007728:	e00b      	b.n	8007742 <UART_SetConfig+0x216>
 800772a:	2300      	movs	r3, #0
 800772c:	77fb      	strb	r3, [r7, #31]
 800772e:	e0a1      	b.n	8007874 <UART_SetConfig+0x348>
 8007730:	2302      	movs	r3, #2
 8007732:	77fb      	strb	r3, [r7, #31]
 8007734:	e09e      	b.n	8007874 <UART_SetConfig+0x348>
 8007736:	2304      	movs	r3, #4
 8007738:	77fb      	strb	r3, [r7, #31]
 800773a:	e09b      	b.n	8007874 <UART_SetConfig+0x348>
 800773c:	2308      	movs	r3, #8
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e098      	b.n	8007874 <UART_SetConfig+0x348>
 8007742:	2310      	movs	r3, #16
 8007744:	77fb      	strb	r3, [r7, #31]
 8007746:	e095      	b.n	8007874 <UART_SetConfig+0x348>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a2f      	ldr	r2, [pc, #188]	; (800780c <UART_SetConfig+0x2e0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d125      	bne.n	800779e <UART_SetConfig+0x272>
 8007752:	4b29      	ldr	r3, [pc, #164]	; (80077f8 <UART_SetConfig+0x2cc>)
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800775c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007760:	d017      	beq.n	8007792 <UART_SetConfig+0x266>
 8007762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007766:	d817      	bhi.n	8007798 <UART_SetConfig+0x26c>
 8007768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776c:	d00b      	beq.n	8007786 <UART_SetConfig+0x25a>
 800776e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007772:	d811      	bhi.n	8007798 <UART_SetConfig+0x26c>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <UART_SetConfig+0x254>
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777c:	d006      	beq.n	800778c <UART_SetConfig+0x260>
 800777e:	e00b      	b.n	8007798 <UART_SetConfig+0x26c>
 8007780:	2301      	movs	r3, #1
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e076      	b.n	8007874 <UART_SetConfig+0x348>
 8007786:	2302      	movs	r3, #2
 8007788:	77fb      	strb	r3, [r7, #31]
 800778a:	e073      	b.n	8007874 <UART_SetConfig+0x348>
 800778c:	2304      	movs	r3, #4
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e070      	b.n	8007874 <UART_SetConfig+0x348>
 8007792:	2308      	movs	r3, #8
 8007794:	77fb      	strb	r3, [r7, #31]
 8007796:	e06d      	b.n	8007874 <UART_SetConfig+0x348>
 8007798:	2310      	movs	r3, #16
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e06a      	b.n	8007874 <UART_SetConfig+0x348>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1b      	ldr	r2, [pc, #108]	; (8007810 <UART_SetConfig+0x2e4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d138      	bne.n	800781a <UART_SetConfig+0x2ee>
 80077a8:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <UART_SetConfig+0x2cc>)
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80077b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b6:	d017      	beq.n	80077e8 <UART_SetConfig+0x2bc>
 80077b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077bc:	d82a      	bhi.n	8007814 <UART_SetConfig+0x2e8>
 80077be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c2:	d00b      	beq.n	80077dc <UART_SetConfig+0x2b0>
 80077c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c8:	d824      	bhi.n	8007814 <UART_SetConfig+0x2e8>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <UART_SetConfig+0x2aa>
 80077ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d2:	d006      	beq.n	80077e2 <UART_SetConfig+0x2b6>
 80077d4:	e01e      	b.n	8007814 <UART_SetConfig+0x2e8>
 80077d6:	2300      	movs	r3, #0
 80077d8:	77fb      	strb	r3, [r7, #31]
 80077da:	e04b      	b.n	8007874 <UART_SetConfig+0x348>
 80077dc:	2302      	movs	r3, #2
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e048      	b.n	8007874 <UART_SetConfig+0x348>
 80077e2:	2304      	movs	r3, #4
 80077e4:	77fb      	strb	r3, [r7, #31]
 80077e6:	e045      	b.n	8007874 <UART_SetConfig+0x348>
 80077e8:	2308      	movs	r3, #8
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e042      	b.n	8007874 <UART_SetConfig+0x348>
 80077ee:	bf00      	nop
 80077f0:	efff69f3 	.word	0xefff69f3
 80077f4:	40011000 	.word	0x40011000
 80077f8:	40023800 	.word	0x40023800
 80077fc:	40004400 	.word	0x40004400
 8007800:	40004800 	.word	0x40004800
 8007804:	40004c00 	.word	0x40004c00
 8007808:	40005000 	.word	0x40005000
 800780c:	40011400 	.word	0x40011400
 8007810:	40007800 	.word	0x40007800
 8007814:	2310      	movs	r3, #16
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e02c      	b.n	8007874 <UART_SetConfig+0x348>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a72      	ldr	r2, [pc, #456]	; (80079e8 <UART_SetConfig+0x4bc>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d125      	bne.n	8007870 <UART_SetConfig+0x344>
 8007824:	4b71      	ldr	r3, [pc, #452]	; (80079ec <UART_SetConfig+0x4c0>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800782e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007832:	d017      	beq.n	8007864 <UART_SetConfig+0x338>
 8007834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007838:	d817      	bhi.n	800786a <UART_SetConfig+0x33e>
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800783e:	d00b      	beq.n	8007858 <UART_SetConfig+0x32c>
 8007840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007844:	d811      	bhi.n	800786a <UART_SetConfig+0x33e>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <UART_SetConfig+0x326>
 800784a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784e:	d006      	beq.n	800785e <UART_SetConfig+0x332>
 8007850:	e00b      	b.n	800786a <UART_SetConfig+0x33e>
 8007852:	2300      	movs	r3, #0
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e00d      	b.n	8007874 <UART_SetConfig+0x348>
 8007858:	2302      	movs	r3, #2
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e00a      	b.n	8007874 <UART_SetConfig+0x348>
 800785e:	2304      	movs	r3, #4
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e007      	b.n	8007874 <UART_SetConfig+0x348>
 8007864:	2308      	movs	r3, #8
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e004      	b.n	8007874 <UART_SetConfig+0x348>
 800786a:	2310      	movs	r3, #16
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e001      	b.n	8007874 <UART_SetConfig+0x348>
 8007870:	2310      	movs	r3, #16
 8007872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800787c:	d15b      	bne.n	8007936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800787e:	7ffb      	ldrb	r3, [r7, #31]
 8007880:	2b08      	cmp	r3, #8
 8007882:	d828      	bhi.n	80078d6 <UART_SetConfig+0x3aa>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x360>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b9 	.word	0x080078b9
 8007894:	080078c1 	.word	0x080078c1
 8007898:	080078d7 	.word	0x080078d7
 800789c:	080078c7 	.word	0x080078c7
 80078a0:	080078d7 	.word	0x080078d7
 80078a4:	080078d7 	.word	0x080078d7
 80078a8:	080078d7 	.word	0x080078d7
 80078ac:	080078cf 	.word	0x080078cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b0:	f7fd f8d4 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 80078b4:	61b8      	str	r0, [r7, #24]
        break;
 80078b6:	e013      	b.n	80078e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078b8:	f7fd f8e4 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 80078bc:	61b8      	str	r0, [r7, #24]
        break;
 80078be:	e00f      	b.n	80078e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078c0:	4b4b      	ldr	r3, [pc, #300]	; (80079f0 <UART_SetConfig+0x4c4>)
 80078c2:	61bb      	str	r3, [r7, #24]
        break;
 80078c4:	e00c      	b.n	80078e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078c6:	f7fc fff7 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 80078ca:	61b8      	str	r0, [r7, #24]
        break;
 80078cc:	e008      	b.n	80078e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d2:	61bb      	str	r3, [r7, #24]
        break;
 80078d4:	e004      	b.n	80078e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80078d6:	2300      	movs	r3, #0
 80078d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	77bb      	strb	r3, [r7, #30]
        break;
 80078de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d074      	beq.n	80079d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	005a      	lsls	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	085b      	lsrs	r3, r3, #1
 80078f0:	441a      	add	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b0f      	cmp	r3, #15
 8007900:	d916      	bls.n	8007930 <UART_SetConfig+0x404>
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007908:	d212      	bcs.n	8007930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f023 030f 	bic.w	r3, r3, #15
 8007912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	085b      	lsrs	r3, r3, #1
 8007918:	b29b      	uxth	r3, r3
 800791a:	f003 0307 	and.w	r3, r3, #7
 800791e:	b29a      	uxth	r2, r3
 8007920:	89fb      	ldrh	r3, [r7, #14]
 8007922:	4313      	orrs	r3, r2
 8007924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	89fa      	ldrh	r2, [r7, #14]
 800792c:	60da      	str	r2, [r3, #12]
 800792e:	e04f      	b.n	80079d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	77bb      	strb	r3, [r7, #30]
 8007934:	e04c      	b.n	80079d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007936:	7ffb      	ldrb	r3, [r7, #31]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d828      	bhi.n	800798e <UART_SetConfig+0x462>
 800793c:	a201      	add	r2, pc, #4	; (adr r2, 8007944 <UART_SetConfig+0x418>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007969 	.word	0x08007969
 8007948:	08007971 	.word	0x08007971
 800794c:	08007979 	.word	0x08007979
 8007950:	0800798f 	.word	0x0800798f
 8007954:	0800797f 	.word	0x0800797f
 8007958:	0800798f 	.word	0x0800798f
 800795c:	0800798f 	.word	0x0800798f
 8007960:	0800798f 	.word	0x0800798f
 8007964:	08007987 	.word	0x08007987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007968:	f7fd f878 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 800796c:	61b8      	str	r0, [r7, #24]
        break;
 800796e:	e013      	b.n	8007998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007970:	f7fd f888 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 8007974:	61b8      	str	r0, [r7, #24]
        break;
 8007976:	e00f      	b.n	8007998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007978:	4b1d      	ldr	r3, [pc, #116]	; (80079f0 <UART_SetConfig+0x4c4>)
 800797a:	61bb      	str	r3, [r7, #24]
        break;
 800797c:	e00c      	b.n	8007998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797e:	f7fc ff9b 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8007982:	61b8      	str	r0, [r7, #24]
        break;
 8007984:	e008      	b.n	8007998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800798a:	61bb      	str	r3, [r7, #24]
        break;
 800798c:	e004      	b.n	8007998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	77bb      	strb	r3, [r7, #30]
        break;
 8007996:	bf00      	nop
    }

    if (pclk != 0U)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d018      	beq.n	80079d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	085a      	lsrs	r2, r3, #1
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	441a      	add	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b0f      	cmp	r3, #15
 80079b6:	d909      	bls.n	80079cc <UART_SetConfig+0x4a0>
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079be:	d205      	bcs.n	80079cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60da      	str	r2, [r3, #12]
 80079ca:	e001      	b.n	80079d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80079dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3720      	adds	r7, #32
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	40007c00 	.word	0x40007c00
 80079ec:	40023800 	.word	0x40023800
 80079f0:	00f42400 	.word	0x00f42400

080079f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a66:	f003 0308 	and.w	r3, r3, #8
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01a      	beq.n	8007b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007af2:	d10a      	bne.n	8007b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	605a      	str	r2, [r3, #4]
  }
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b48:	f7fa fce4 	bl	8002514 <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d10e      	bne.n	8007b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f831 	bl	8007bd2 <UART_WaitOnFlagUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e027      	b.n	8007bca <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d10e      	bne.n	8007ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f81b 	bl	8007bd2 <UART_WaitOnFlagUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e011      	b.n	8007bca <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b09c      	sub	sp, #112	; 0x70
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	4613      	mov	r3, r2
 8007be0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be2:	e0a7      	b.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bea:	f000 80a3 	beq.w	8007d34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7fa fc91 	bl	8002514 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x32>
 8007bfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d13f      	bne.n	8007c84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c18:	667b      	str	r3, [r7, #100]	; 0x64
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e6      	bne.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c48:	f023 0301 	bic.w	r3, r3, #1
 8007c4c:	663b      	str	r3, [r7, #96]	; 0x60
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3308      	adds	r3, #8
 8007c54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c56:	64ba      	str	r2, [r7, #72]	; 0x48
 8007c58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c5e:	e841 2300 	strex	r3, r2, [r1]
 8007c62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1e5      	bne.n	8007c36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e068      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d050      	beq.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca0:	d148      	bne.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007caa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ccc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e6      	bne.n	8007cac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	613b      	str	r3, [r7, #16]
   return(result);
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f023 0301 	bic.w	r3, r3, #1
 8007cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cfe:	623a      	str	r2, [r7, #32]
 8007d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	69f9      	ldr	r1, [r7, #28]
 8007d04:	6a3a      	ldr	r2, [r7, #32]
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e5      	bne.n	8007cde <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2220      	movs	r2, #32
 8007d16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e010      	b.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69da      	ldr	r2, [r3, #28]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	bf0c      	ite	eq
 8007d44:	2301      	moveq	r3, #1
 8007d46:	2300      	movne	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	f43f af48 	beq.w	8007be4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3770      	adds	r7, #112	; 0x70
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007d60:	b084      	sub	sp, #16
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	f107 001c 	add.w	r0, r7, #28
 8007d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007d76:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007d78:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007d7a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007d7e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007d82:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007d86:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007d8a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	4b07      	ldr	r3, [pc, #28]	; (8007db4 <SDMMC_Init+0x54>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	b004      	add	sp, #16
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	ffff8100 	.word	0xffff8100

08007db8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2203      	movs	r2, #3
 8007e00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0303 	and.w	r3, r3, #3
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007e4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007e50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007e56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <SDMMC_SendCommand+0x50>)
 8007e64:	4013      	ands	r3, r2
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	fffff000 	.word	0xfffff000

08007e80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	b2db      	uxtb	r3, r3
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
}  
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ee6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007eec:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007ef2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	431a      	orrs	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0

}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3714      	adds	r7, #20
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007f26:	2310      	movs	r3, #16
 8007f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f38:	f107 0308 	add.w	r3, r7, #8
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff ff74 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f48:	2110      	movs	r1, #16
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa1a 	bl	8008384 <SDMMC_GetCmdResp1>
 8007f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f52:	69fb      	ldr	r3, [r7, #28]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007f6a:	2311      	movs	r3, #17
 8007f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f6e:	2340      	movs	r3, #64	; 0x40
 8007f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f7c:	f107 0308 	add.w	r3, r7, #8
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7ff ff52 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8c:	2111      	movs	r1, #17
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9f8 	bl	8008384 <SDMMC_GetCmdResp1>
 8007f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f96:	69fb      	ldr	r3, [r7, #28]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007fae:	2312      	movs	r3, #18
 8007fb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fb2:	2340      	movs	r3, #64	; 0x40
 8007fb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fc0:	f107 0308 	add.w	r3, r7, #8
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7ff ff30 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd0:	2112      	movs	r1, #18
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9d6 	bl	8008384 <SDMMC_GetCmdResp1>
 8007fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fda:	69fb      	ldr	r3, [r7, #28]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3720      	adds	r7, #32
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007ff2:	2318      	movs	r3, #24
 8007ff4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ff6:	2340      	movs	r3, #64	; 0x40
 8007ff8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008002:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008004:	f107 0308 	add.w	r3, r7, #8
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f7ff ff0e 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008010:	f241 3288 	movw	r2, #5000	; 0x1388
 8008014:	2118      	movs	r1, #24
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f9b4 	bl	8008384 <SDMMC_GetCmdResp1>
 800801c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800801e:	69fb      	ldr	r3, [r7, #28]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008036:	2319      	movs	r3, #25
 8008038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800803a:	2340      	movs	r3, #64	; 0x40
 800803c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008048:	f107 0308 	add.w	r3, r7, #8
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff feec 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008054:	f241 3288 	movw	r2, #5000	; 0x1388
 8008058:	2119      	movs	r1, #25
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f992 	bl	8008384 <SDMMC_GetCmdResp1>
 8008060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008062:	69fb      	ldr	r3, [r7, #28]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008078:	230c      	movs	r3, #12
 800807a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800807c:	2340      	movs	r3, #64	; 0x40
 800807e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008088:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fecb 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008096:	4a05      	ldr	r2, [pc, #20]	; (80080ac <SDMMC_CmdStopTransfer+0x40>)
 8008098:	210c      	movs	r1, #12
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f972 	bl	8008384 <SDMMC_GetCmdResp1>
 80080a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080a2:	69fb      	ldr	r3, [r7, #28]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	05f5e100 	.word	0x05f5e100

080080b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80080c0:	2307      	movs	r3, #7
 80080c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080c4:	2340      	movs	r3, #64	; 0x40
 80080c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080d0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080d2:	f107 0310 	add.w	r3, r7, #16
 80080d6:	4619      	mov	r1, r3
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f7ff fea7 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80080de:	f241 3288 	movw	r2, #5000	; 0x1388
 80080e2:	2107      	movs	r1, #7
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f94d 	bl	8008384 <SDMMC_GetCmdResp1>
 80080ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	; 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b088      	sub	sp, #32
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80080fe:	2300      	movs	r3, #0
 8008100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008106:	2300      	movs	r3, #0
 8008108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800810e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008114:	f107 0308 	add.w	r3, r7, #8
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fe86 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fb67 	bl	80087f4 <SDMMC_GetCmdError>
 8008126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008128:	69fb      	ldr	r3, [r7, #28]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b088      	sub	sp, #32
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800813a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800813e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008140:	2308      	movs	r3, #8
 8008142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800814c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008152:	f107 0308 	add.w	r3, r7, #8
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff fe67 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fafa 	bl	8008758 <SDMMC_GetCmdResp7>
 8008164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008166:	69fb      	ldr	r3, [r7, #28]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3720      	adds	r7, #32
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b088      	sub	sp, #32
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800817e:	2337      	movs	r3, #55	; 0x37
 8008180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800818a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800818e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008190:	f107 0308 	add.w	r3, r7, #8
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fe48 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800819c:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a0:	2137      	movs	r1, #55	; 0x37
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f8ee 	bl	8008384 <SDMMC_GetCmdResp1>
 80081a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081aa:	69fb      	ldr	r3, [r7, #28]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3720      	adds	r7, #32
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	4b0d      	ldr	r3, [pc, #52]	; (80081f8 <SDMMC_CmdAppOperCommand+0x44>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80081c6:	2329      	movs	r3, #41	; 0x29
 80081c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081ce:	2300      	movs	r3, #0
 80081d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fe24 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fa03 	bl	80085f0 <SDMMC_GetCmdResp3>
 80081ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081ec:	69fb      	ldr	r3, [r7, #28]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3720      	adds	r7, #32
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	80100000 	.word	0x80100000

080081fc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800820a:	2306      	movs	r3, #6
 800820c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800820e:	2340      	movs	r3, #64	; 0x40
 8008210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800821c:	f107 0308 	add.w	r3, r7, #8
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fe02 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008228:	f241 3288 	movw	r2, #5000	; 0x1388
 800822c:	2106      	movs	r1, #6
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8a8 	bl	8008384 <SDMMC_GetCmdResp1>
 8008234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008236:	69fb      	ldr	r3, [r7, #28]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b088      	sub	sp, #32
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800824c:	2333      	movs	r3, #51	; 0x33
 800824e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008250:	2340      	movs	r3, #64	; 0x40
 8008252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800825e:	f107 0308 	add.w	r3, r7, #8
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7ff fde1 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800826a:	f241 3288 	movw	r2, #5000	; 0x1388
 800826e:	2133      	movs	r1, #51	; 0x33
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f887 	bl	8008384 <SDMMC_GetCmdResp1>
 8008276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008278:	69fb      	ldr	r3, [r7, #28]
}
 800827a:	4618      	mov	r0, r3
 800827c:	3720      	adds	r7, #32
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b088      	sub	sp, #32
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800828a:	2300      	movs	r3, #0
 800828c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800828e:	2302      	movs	r3, #2
 8008290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008292:	23c0      	movs	r3, #192	; 0xc0
 8008294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800829e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082a0:	f107 0308 	add.w	r3, r7, #8
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff fdc0 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f957 	bl	8008560 <SDMMC_GetCmdResp2>
 80082b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b4:	69fb      	ldr	r3, [r7, #28]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3720      	adds	r7, #32
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b088      	sub	sp, #32
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80082cc:	2309      	movs	r3, #9
 80082ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80082d0:	23c0      	movs	r3, #192	; 0xc0
 80082d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082de:	f107 0308 	add.w	r3, r7, #8
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fda1 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f938 	bl	8008560 <SDMMC_GetCmdResp2>
 80082f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082f2:	69fb      	ldr	r3, [r7, #28]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800830a:	2303      	movs	r3, #3
 800830c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800830e:	2340      	movs	r3, #64	; 0x40
 8008310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800831a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800831c:	f107 0308 	add.w	r3, r7, #8
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff fd82 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	2103      	movs	r1, #3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f99d 	bl	800866c <SDMMC_GetCmdResp6>
 8008332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008334:	69fb      	ldr	r3, [r7, #28]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3720      	adds	r7, #32
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b088      	sub	sp, #32
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800834c:	230d      	movs	r3, #13
 800834e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fd61 	bl	8007e2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800836a:	f241 3288 	movw	r2, #5000	; 0x1388
 800836e:	210d      	movs	r1, #13
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 f807 	bl	8008384 <SDMMC_GetCmdResp1>
 8008376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008378:	69fb      	ldr	r3, [r7, #28]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	460b      	mov	r3, r1
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008392:	4b70      	ldr	r3, [pc, #448]	; (8008554 <SDMMC_GetCmdResp1+0x1d0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a70      	ldr	r2, [pc, #448]	; (8008558 <SDMMC_GetCmdResp1+0x1d4>)
 8008398:	fba2 2303 	umull	r2, r3, r2, r3
 800839c:	0a5a      	lsrs	r2, r3, #9
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	fb02 f303 	mul.w	r3, r2, r3
 80083a4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	1e5a      	subs	r2, r3, #1
 80083aa:	61fa      	str	r2, [r7, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d102      	bne.n	80083b6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80083b4:	e0c9      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d0ef      	beq.n	80083a6 <SDMMC_GetCmdResp1+0x22>
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1ea      	bne.n	80083a6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2204      	movs	r2, #4
 80083e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083e2:	2304      	movs	r3, #4
 80083e4:	e0b1      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e0a6      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	22c5      	movs	r2, #197	; 0xc5
 8008400:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fd3c 	bl	8007e80 <SDMMC_GetCommandResponse>
 8008408:	4603      	mov	r3, r0
 800840a:	461a      	mov	r2, r3
 800840c:	7afb      	ldrb	r3, [r7, #11]
 800840e:	4293      	cmp	r3, r2
 8008410:	d001      	beq.n	8008416 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008412:	2301      	movs	r3, #1
 8008414:	e099      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008416:	2100      	movs	r1, #0
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff fd3e 	bl	8007e9a <SDMMC_GetResponse>
 800841e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	4b4e      	ldr	r3, [pc, #312]	; (800855c <SDMMC_GetCmdResp1+0x1d8>)
 8008424:	4013      	ands	r3, r2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800842a:	2300      	movs	r3, #0
 800842c:	e08d      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da02      	bge.n	800843a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008438:	e087      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008444:	2340      	movs	r3, #64	; 0x40
 8008446:	e080      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008452:	2380      	movs	r3, #128	; 0x80
 8008454:	e079      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008464:	e071      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008474:	e069      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008484:	e061      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008494:	e059      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084a4:	e051      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084b4:	e049      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80084c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084c4:	e041      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80084d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084d4:	e039      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80084e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084e4:	e031      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80084f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084f4:	e029      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008500:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008504:	e021      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008510:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008514:	e019      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008520:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008524:	e011      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008534:	e009      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008540:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008544:	e001      	b.n	800854a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800854a:	4618      	mov	r0, r3
 800854c:	3720      	adds	r7, #32
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000000 	.word	0x20000000
 8008558:	10624dd3 	.word	0x10624dd3
 800855c:	fdffe008 	.word	0xfdffe008

08008560 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008568:	4b1f      	ldr	r3, [pc, #124]	; (80085e8 <SDMMC_GetCmdResp2+0x88>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a1f      	ldr	r2, [pc, #124]	; (80085ec <SDMMC_GetCmdResp2+0x8c>)
 800856e:	fba2 2303 	umull	r2, r3, r2, r3
 8008572:	0a5b      	lsrs	r3, r3, #9
 8008574:	f241 3288 	movw	r2, #5000	; 0x1388
 8008578:	fb02 f303 	mul.w	r3, r2, r3
 800857c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1e5a      	subs	r2, r3, #1
 8008582:	60fa      	str	r2, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d102      	bne.n	800858e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800858c:	e026      	b.n	80085dc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800859a:	2b00      	cmp	r3, #0
 800859c:	d0ef      	beq.n	800857e <SDMMC_GetCmdResp2+0x1e>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1ea      	bne.n	800857e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2204      	movs	r2, #4
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085ba:	2304      	movs	r3, #4
 80085bc:	e00e      	b.n	80085dc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d004      	beq.n	80085d4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e003      	b.n	80085dc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	22c5      	movs	r2, #197	; 0xc5
 80085d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	20000000 	.word	0x20000000
 80085ec:	10624dd3 	.word	0x10624dd3

080085f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <SDMMC_GetCmdResp3+0x74>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a1a      	ldr	r2, [pc, #104]	; (8008668 <SDMMC_GetCmdResp3+0x78>)
 80085fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008602:	0a5b      	lsrs	r3, r3, #9
 8008604:	f241 3288 	movw	r2, #5000	; 0x1388
 8008608:	fb02 f303 	mul.w	r3, r2, r3
 800860c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	1e5a      	subs	r2, r3, #1
 8008612:	60fa      	str	r2, [r7, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d102      	bne.n	800861e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800861c:	e01b      	b.n	8008656 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008622:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0ef      	beq.n	800860e <SDMMC_GetCmdResp3+0x1e>
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1ea      	bne.n	800860e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2204      	movs	r2, #4
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800864a:	2304      	movs	r3, #4
 800864c:	e003      	b.n	8008656 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	22c5      	movs	r2, #197	; 0xc5
 8008652:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20000000 	.word	0x20000000
 8008668:	10624dd3 	.word	0x10624dd3

0800866c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	460b      	mov	r3, r1
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800867a:	4b35      	ldr	r3, [pc, #212]	; (8008750 <SDMMC_GetCmdResp6+0xe4>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a35      	ldr	r2, [pc, #212]	; (8008754 <SDMMC_GetCmdResp6+0xe8>)
 8008680:	fba2 2303 	umull	r2, r3, r2, r3
 8008684:	0a5b      	lsrs	r3, r3, #9
 8008686:	f241 3288 	movw	r2, #5000	; 0x1388
 800868a:	fb02 f303 	mul.w	r3, r2, r3
 800868e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	1e5a      	subs	r2, r3, #1
 8008694:	61fa      	str	r2, [r7, #28]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d102      	bne.n	80086a0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800869a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800869e:	e052      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0ef      	beq.n	8008690 <SDMMC_GetCmdResp6+0x24>
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1ea      	bne.n	8008690 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086be:	f003 0304 	and.w	r3, r3, #4
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2204      	movs	r2, #4
 80086ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80086cc:	2304      	movs	r3, #4
 80086ce:	e03a      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e02f      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fbca 	bl	8007e80 <SDMMC_GetCommandResponse>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d001      	beq.n	80086fa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e025      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	22c5      	movs	r2, #197	; 0xc5
 80086fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008700:	2100      	movs	r1, #0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fbc9 	bl	8007e9a <SDMMC_GetResponse>
 8008708:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d106      	bne.n	8008722 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	0c1b      	lsrs	r3, r3, #16
 8008718:	b29a      	uxth	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
 8008720:	e011      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800872c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008730:	e009      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800873c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008740:	e001      	b.n	8008746 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000000 	.word	0x20000000
 8008754:	10624dd3 	.word	0x10624dd3

08008758 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008760:	4b22      	ldr	r3, [pc, #136]	; (80087ec <SDMMC_GetCmdResp7+0x94>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a22      	ldr	r2, [pc, #136]	; (80087f0 <SDMMC_GetCmdResp7+0x98>)
 8008766:	fba2 2303 	umull	r2, r3, r2, r3
 800876a:	0a5b      	lsrs	r3, r3, #9
 800876c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008770:	fb02 f303 	mul.w	r3, r2, r3
 8008774:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	1e5a      	subs	r2, r3, #1
 800877a:	60fa      	str	r2, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d102      	bne.n	8008786 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008784:	e02c      	b.n	80087e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0ef      	beq.n	8008776 <SDMMC_GetCmdResp7+0x1e>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1ea      	bne.n	8008776 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a4:	f003 0304 	and.w	r3, r3, #4
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2204      	movs	r2, #4
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087b2:	2304      	movs	r3, #4
 80087b4:	e014      	b.n	80087e0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	f003 0301 	and.w	r3, r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e009      	b.n	80087e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2240      	movs	r2, #64	; 0x40
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087de:	2300      	movs	r3, #0
  
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	20000000 	.word	0x20000000
 80087f0:	10624dd3 	.word	0x10624dd3

080087f4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <SDMMC_GetCmdError+0x50>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a11      	ldr	r2, [pc, #68]	; (8008848 <SDMMC_GetCmdError+0x54>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	0a5b      	lsrs	r3, r3, #9
 8008808:	f241 3288 	movw	r2, #5000	; 0x1388
 800880c:	fb02 f303 	mul.w	r3, r2, r3
 8008810:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	60fa      	str	r2, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800881c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008820:	e009      	b.n	8008836 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0f1      	beq.n	8008812 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	22c5      	movs	r2, #197	; 0xc5
 8008832:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	20000000 	.word	0x20000000
 8008848:	10624dd3 	.word	0x10624dd3

0800884c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <MX_FATFS_Init+0x18>)
 8008852:	4805      	ldr	r0, [pc, #20]	; (8008868 <MX_FATFS_Init+0x1c>)
 8008854:	f003 f83a 	bl	800b8cc <FATFS_LinkDriver>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	4b03      	ldr	r3, [pc, #12]	; (800886c <MX_FATFS_Init+0x20>)
 800885e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008860:	bf00      	nop
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200045ec 	.word	0x200045ec
 8008868:	0800de08 	.word	0x0800de08
 800886c:	200045e8 	.word	0x200045e8

08008870 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008870:	b480      	push	{r7}
 8008872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008874:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008876:	4618      	mov	r0, r3
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800888a:	f000 f896 	bl	80089ba <BSP_SD_IsDetected>
 800888e:	4603      	mov	r3, r0
 8008890:	2b01      	cmp	r3, #1
 8008892:	d001      	beq.n	8008898 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008894:	2302      	movs	r3, #2
 8008896:	e012      	b.n	80088be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008898:	480b      	ldr	r0, [pc, #44]	; (80088c8 <BSP_SD_Init+0x48>)
 800889a:	f7fd facd 	bl	8005e38 <HAL_SD_Init>
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d109      	bne.n	80088bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80088a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80088ac:	4806      	ldr	r0, [pc, #24]	; (80088c8 <BSP_SD_Init+0x48>)
 80088ae:	f7fe f893 	bl	80069d8 <HAL_SD_ConfigWideBusOperation>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80088bc:	79fb      	ldrb	r3, [r7, #7]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	200043f4 	.word	0x200043f4

080088cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	68f9      	ldr	r1, [r7, #12]
 80088e2:	4806      	ldr	r0, [pc, #24]	; (80088fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80088e4:	f7fd fb60 	bl	8005fa8 <HAL_SD_ReadBlocks_DMA>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200043f4 	.word	0x200043f4

08008900 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b086      	sub	sp, #24
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	68f9      	ldr	r1, [r7, #12]
 8008916:	4806      	ldr	r0, [pc, #24]	; (8008930 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008918:	f7fd fc28 	bl	800616c <HAL_SD_WriteBlocks_DMA>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	200043f4 	.word	0x200043f4

08008934 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008938:	4805      	ldr	r0, [pc, #20]	; (8008950 <BSP_SD_GetCardState+0x1c>)
 800893a:	f7fe f8e7 	bl	8006b0c <HAL_SD_GetCardState>
 800893e:	4603      	mov	r3, r0
 8008940:	2b04      	cmp	r3, #4
 8008942:	bf14      	ite	ne
 8008944:	2301      	movne	r3, #1
 8008946:	2300      	moveq	r3, #0
 8008948:	b2db      	uxtb	r3, r3
}
 800894a:	4618      	mov	r0, r3
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200043f4 	.word	0x200043f4

08008954 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4803      	ldr	r0, [pc, #12]	; (800896c <BSP_SD_GetCardInfo+0x18>)
 8008960:	f7fe f80e 	bl	8006980 <HAL_SD_GetCardInfo>
}
 8008964:	bf00      	nop
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	200043f4 	.word	0x200043f4

08008970 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008978:	f000 f818 	bl	80089ac <BSP_SD_AbortCallback>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800898c:	f000 f9a8 	bl	8008ce0 <BSP_SD_WriteCpltCallback>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80089a0:	f000 f9aa 	bl	8008cf8 <BSP_SD_ReadCpltCallback>
}
 80089a4:	bf00      	nop
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80089ac:	b480      	push	{r7}
 80089ae:	af00      	add	r7, sp, #0

}
 80089b0:	bf00      	nop
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b082      	sub	sp, #8
 80089be:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80089c0:	2301      	movs	r3, #1
 80089c2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80089c4:	f000 f80c 	bl	80089e0 <BSP_PlatformIsDetected>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d101      	bne.n	80089d2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80089ce:	2300      	movs	r3, #0
 80089d0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	b2db      	uxtb	r3, r3
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80089e6:	2301      	movs	r3, #1
 80089e8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80089ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089ee:	4806      	ldr	r0, [pc, #24]	; (8008a08 <BSP_PlatformIsDetected+0x28>)
 80089f0:	f7fb fb2e 	bl	8004050 <HAL_GPIO_ReadPin>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80089fa:	2300      	movs	r3, #0
 80089fc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80089fe:	79fb      	ldrb	r3, [r7, #7]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	40020400 	.word	0x40020400

08008a0c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008a14:	f7f9 fd7e 	bl	8002514 <HAL_GetTick>
 8008a18:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008a1a:	e006      	b.n	8008a2a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008a1c:	f7ff ff8a 	bl	8008934 <BSP_SD_GetCardState>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e009      	b.n	8008a3e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008a2a:	f7f9 fd73 	bl	8002514 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d8f0      	bhi.n	8008a1c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008a52:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <SD_CheckStatus+0x38>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008a58:	f7ff ff6c 	bl	8008934 <BSP_SD_GetCardState>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d107      	bne.n	8008a72 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008a62:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <SD_CheckStatus+0x38>)
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f023 0301 	bic.w	r3, r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	4b04      	ldr	r3, [pc, #16]	; (8008a80 <SD_CheckStatus+0x38>)
 8008a70:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008a72:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <SD_CheckStatus+0x38>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b2db      	uxtb	r3, r3
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3708      	adds	r7, #8
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20000009 	.word	0x20000009

08008a84 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008a8e:	f7ff fef7 	bl	8008880 <BSP_SD_Init>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d107      	bne.n	8008aa8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7ff ffd4 	bl	8008a48 <SD_CheckStatus>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <SD_initialize+0x34>)
 8008aa6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008aa8:	4b03      	ldr	r3, [pc, #12]	; (8008ab8 <SD_initialize+0x34>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	b2db      	uxtb	r3, r3
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000009 	.word	0x20000009

08008abc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7ff ffbd 	bl	8008a48 <SD_CheckStatus>
 8008ace:	4603      	mov	r3, r0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008aec:	f247 5030 	movw	r0, #30000	; 0x7530
 8008af0:	f7ff ff8c 	bl	8008a0c <SD_CheckStatusWithTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	da01      	bge.n	8008afe <SD_read+0x26>
  {
    return res;
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	e03b      	b.n	8008b76 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	68b8      	ldr	r0, [r7, #8]
 8008b04:	f7ff fee2 	bl	80088cc <BSP_SD_ReadBlocks_DMA>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d132      	bne.n	8008b74 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008b0e:	4b1c      	ldr	r3, [pc, #112]	; (8008b80 <SD_read+0xa8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008b14:	f7f9 fcfe 	bl	8002514 <HAL_GetTick>
 8008b18:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008b1a:	bf00      	nop
 8008b1c:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <SD_read+0xa8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d108      	bne.n	8008b36 <SD_read+0x5e>
 8008b24:	f7f9 fcf6 	bl	8002514 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	f247 522f 	movw	r2, #29999	; 0x752f
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d9f2      	bls.n	8008b1c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <SD_read+0xa8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d102      	bne.n	8008b44 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	75fb      	strb	r3, [r7, #23]
 8008b42:	e017      	b.n	8008b74 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <SD_read+0xa8>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008b4a:	f7f9 fce3 	bl	8002514 <HAL_GetTick>
 8008b4e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008b50:	e007      	b.n	8008b62 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008b52:	f7ff feef 	bl	8008934 <BSP_SD_GetCardState>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d102      	bne.n	8008b62 <SD_read+0x8a>
          {
            res = RES_OK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008b60:	e008      	b.n	8008b74 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008b62:	f7f9 fcd7 	bl	8002514 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	f247 522f 	movw	r2, #29999	; 0x752f
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d9ee      	bls.n	8008b52 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3718      	adds	r7, #24
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20004a58 	.word	0x20004a58

08008b84 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	607a      	str	r2, [r7, #4]
 8008b8e:	603b      	str	r3, [r7, #0]
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008b98:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <SD_write+0xa8>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008b9e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008ba2:	f7ff ff33 	bl	8008a0c <SD_CheckStatusWithTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da01      	bge.n	8008bb0 <SD_write+0x2c>
  {
    return res;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	e038      	b.n	8008c22 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	68b8      	ldr	r0, [r7, #8]
 8008bb6:	f7ff fea3 	bl	8008900 <BSP_SD_WriteBlocks_DMA>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d12f      	bne.n	8008c20 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008bc0:	f7f9 fca8 	bl	8002514 <HAL_GetTick>
 8008bc4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008bc6:	bf00      	nop
 8008bc8:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <SD_write+0xa8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d108      	bne.n	8008be2 <SD_write+0x5e>
 8008bd0:	f7f9 fca0 	bl	8002514 <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f247 522f 	movw	r2, #29999	; 0x752f
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d9f2      	bls.n	8008bc8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008be2:	4b12      	ldr	r3, [pc, #72]	; (8008c2c <SD_write+0xa8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	75fb      	strb	r3, [r7, #23]
 8008bee:	e017      	b.n	8008c20 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <SD_write+0xa8>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008bf6:	f7f9 fc8d 	bl	8002514 <HAL_GetTick>
 8008bfa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008bfc:	e007      	b.n	8008c0e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008bfe:	f7ff fe99 	bl	8008934 <BSP_SD_GetCardState>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <SD_write+0x8a>
          {
            res = RES_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]
            break;
 8008c0c:	e008      	b.n	8008c20 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008c0e:	f7f9 fc81 	bl	8002514 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	f247 522f 	movw	r2, #29999	; 0x752f
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d9ee      	bls.n	8008bfe <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20004a54 	.word	0x20004a54

08008c30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08c      	sub	sp, #48	; 0x30
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	603a      	str	r2, [r7, #0]
 8008c3a:	71fb      	strb	r3, [r7, #7]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008c46:	4b25      	ldr	r3, [pc, #148]	; (8008cdc <SD_ioctl+0xac>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <SD_ioctl+0x28>
 8008c54:	2303      	movs	r3, #3
 8008c56:	e03c      	b.n	8008cd2 <SD_ioctl+0xa2>

  switch (cmd)
 8008c58:	79bb      	ldrb	r3, [r7, #6]
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d834      	bhi.n	8008cc8 <SD_ioctl+0x98>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <SD_ioctl+0x34>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008c7d 	.word	0x08008c7d
 8008c6c:	08008c95 	.word	0x08008c95
 8008c70:	08008caf 	.word	0x08008caf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c7a:	e028      	b.n	8008cce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c7c:	f107 030c 	add.w	r3, r7, #12
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fe67 	bl	8008954 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008c92:	e01c      	b.n	8008cce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008c94:	f107 030c 	add.w	r3, r7, #12
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7ff fe5b 	bl	8008954 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008cac:	e00f      	b.n	8008cce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fe4e 	bl	8008954 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	0a5a      	lsrs	r2, r3, #9
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008cc6:	e002      	b.n	8008cce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008cce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3730      	adds	r7, #48	; 0x30
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000009 	.word	0x20000009

08008ce0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008ce4:	4b03      	ldr	r3, [pc, #12]	; (8008cf4 <BSP_SD_WriteCpltCallback+0x14>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
}
 8008cea:	bf00      	nop
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	20004a54 	.word	0x20004a54

08008cf8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <BSP_SD_ReadCpltCallback+0x14>)
 8008cfe:	2201      	movs	r2, #1
 8008d00:	601a      	str	r2, [r3, #0]
}
 8008d02:	bf00      	nop
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20004a58 	.word	0x20004a58

08008d10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	4a08      	ldr	r2, [pc, #32]	; (8008d40 <disk_status+0x30>)
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	79fa      	ldrb	r2, [r7, #7]
 8008d28:	4905      	ldr	r1, [pc, #20]	; (8008d40 <disk_status+0x30>)
 8008d2a:	440a      	add	r2, r1
 8008d2c:	7a12      	ldrb	r2, [r2, #8]
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4798      	blx	r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	20004a84 	.word	0x20004a84

08008d44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008d52:	79fb      	ldrb	r3, [r7, #7]
 8008d54:	4a0d      	ldr	r2, [pc, #52]	; (8008d8c <disk_initialize+0x48>)
 8008d56:	5cd3      	ldrb	r3, [r2, r3]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d111      	bne.n	8008d80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	4a0b      	ldr	r2, [pc, #44]	; (8008d8c <disk_initialize+0x48>)
 8008d60:	2101      	movs	r1, #1
 8008d62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	4a09      	ldr	r2, [pc, #36]	; (8008d8c <disk_initialize+0x48>)
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	79fa      	ldrb	r2, [r7, #7]
 8008d72:	4906      	ldr	r1, [pc, #24]	; (8008d8c <disk_initialize+0x48>)
 8008d74:	440a      	add	r2, r1
 8008d76:	7a12      	ldrb	r2, [r2, #8]
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4798      	blx	r3
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20004a84 	.word	0x20004a84

08008d90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d90:	b590      	push	{r4, r7, lr}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <disk_read+0x3c>)
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	689c      	ldr	r4, [r3, #8]
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4a07      	ldr	r2, [pc, #28]	; (8008dcc <disk_read+0x3c>)
 8008db0:	4413      	add	r3, r2
 8008db2:	7a18      	ldrb	r0, [r3, #8]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	47a0      	blx	r4
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20004a84 	.word	0x20004a84

08008dd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60b9      	str	r1, [r7, #8]
 8008dd8:	607a      	str	r2, [r7, #4]
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
 8008de2:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <disk_write+0x3c>)
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	68dc      	ldr	r4, [r3, #12]
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	4a07      	ldr	r2, [pc, #28]	; (8008e0c <disk_write+0x3c>)
 8008df0:	4413      	add	r3, r2
 8008df2:	7a18      	ldrb	r0, [r3, #8]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	47a0      	blx	r4
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd90      	pop	{r4, r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20004a84 	.word	0x20004a84

08008e10 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	603a      	str	r2, [r7, #0]
 8008e1a:	71fb      	strb	r3, [r7, #7]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <disk_ioctl+0x38>)
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	79fa      	ldrb	r2, [r7, #7]
 8008e2e:	4906      	ldr	r1, [pc, #24]	; (8008e48 <disk_ioctl+0x38>)
 8008e30:	440a      	add	r2, r1
 8008e32:	7a10      	ldrb	r0, [r2, #8]
 8008e34:	79b9      	ldrb	r1, [r7, #6]
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	4798      	blx	r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  return res;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	20004a84 	.word	0x20004a84

08008e4c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3301      	adds	r3, #1
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
 8008e5e:	021b      	lsls	r3, r3, #8
 8008e60:	b21a      	sxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	b21b      	sxth	r3, r3
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e6e:	89fb      	ldrh	r3, [r7, #14]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3303      	adds	r3, #3
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	021b      	lsls	r3, r3, #8
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	3202      	adds	r2, #2
 8008e94:	7812      	ldrb	r2, [r2, #0]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	3201      	adds	r2, #1
 8008ea2:	7812      	ldrb	r2, [r2, #0]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	021b      	lsls	r3, r3, #8
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	7812      	ldrb	r2, [r2, #0]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]
	return rv;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	1c5a      	adds	r2, r3, #1
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	887a      	ldrh	r2, [r7, #2]
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	887b      	ldrh	r3, [r7, #2]
 8008edc:	0a1b      	lsrs	r3, r3, #8
 8008ede:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	607a      	str	r2, [r7, #4]
 8008ee6:	887a      	ldrh	r2, [r7, #2]
 8008ee8:	b2d2      	uxtb	r2, r2
 8008eea:	701a      	strb	r2, [r3, #0]
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	b2d2      	uxtb	r2, r2
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	0a1b      	lsrs	r3, r3, #8
 8008f12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	b2d2      	uxtb	r2, r2
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	0a1b      	lsrs	r3, r3, #8
 8008f24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	683a      	ldr	r2, [r7, #0]
 8008f2e:	b2d2      	uxtb	r2, r2
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	607a      	str	r2, [r7, #4]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	b2d2      	uxtb	r2, r2
 8008f42:	701a      	strb	r2, [r3, #0]
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00d      	beq.n	8008f86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	1c53      	adds	r3, r2, #1
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	1c59      	adds	r1, r3, #1
 8008f74:	6179      	str	r1, [r7, #20]
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	607b      	str	r3, [r7, #4]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1f1      	bne.n	8008f6a <mem_cpy+0x1a>
	}
}
 8008f86:	bf00      	nop
 8008f88:	371c      	adds	r7, #28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f92:	b480      	push	{r7}
 8008f94:	b087      	sub	sp, #28
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	617a      	str	r2, [r7, #20]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	607b      	str	r3, [r7, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f3      	bne.n	8008fa2 <mem_set+0x10>
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	371c      	adds	r7, #28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008fc8:	b480      	push	{r7}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	61fb      	str	r3, [r7, #28]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	61fa      	str	r2, [r7, #28]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	4619      	mov	r1, r3
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	61ba      	str	r2, [r7, #24]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	1acb      	subs	r3, r1, r3
 8008ff4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	607b      	str	r3, [r7, #4]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <mem_cmp+0x40>
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0eb      	beq.n	8008fe0 <mem_cmp+0x18>

	return r;
 8009008:	697b      	ldr	r3, [r7, #20]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3724      	adds	r7, #36	; 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009020:	e002      	b.n	8009028 <chk_chr+0x12>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3301      	adds	r3, #1
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <chk_chr+0x26>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	4293      	cmp	r3, r2
 800903a:	d1f2      	bne.n	8009022 <chk_chr+0xc>
	return *str;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	781b      	ldrb	r3, [r3, #0]
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e029      	b.n	80090b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009060:	4a27      	ldr	r2, [pc, #156]	; (8009100 <chk_lock+0xb4>)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	4413      	add	r3, r2
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d01d      	beq.n	80090aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800906e:	4a24      	ldr	r2, [pc, #144]	; (8009100 <chk_lock+0xb4>)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	011b      	lsls	r3, r3, #4
 8009074:	4413      	add	r3, r2
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d116      	bne.n	80090ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009080:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <chk_lock+0xb4>)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	4413      	add	r3, r2
 8009088:	3304      	adds	r3, #4
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009090:	429a      	cmp	r2, r3
 8009092:	d10c      	bne.n	80090ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009094:	4a1a      	ldr	r2, [pc, #104]	; (8009100 <chk_lock+0xb4>)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	011b      	lsls	r3, r3, #4
 800909a:	4413      	add	r3, r2
 800909c:	3308      	adds	r3, #8
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d102      	bne.n	80090ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80090a8:	e007      	b.n	80090ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80090aa:	2301      	movs	r3, #1
 80090ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d9d2      	bls.n	8009060 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d109      	bne.n	80090d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d102      	bne.n	80090cc <chk_lock+0x80>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d101      	bne.n	80090d0 <chk_lock+0x84>
 80090cc:	2300      	movs	r3, #0
 80090ce:	e010      	b.n	80090f2 <chk_lock+0xa6>
 80090d0:	2312      	movs	r3, #18
 80090d2:	e00e      	b.n	80090f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d108      	bne.n	80090ec <chk_lock+0xa0>
 80090da:	4a09      	ldr	r2, [pc, #36]	; (8009100 <chk_lock+0xb4>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4413      	add	r3, r2
 80090e2:	330c      	adds	r3, #12
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ea:	d101      	bne.n	80090f0 <chk_lock+0xa4>
 80090ec:	2310      	movs	r3, #16
 80090ee:	e000      	b.n	80090f2 <chk_lock+0xa6>
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20004a64 	.word	0x20004a64

08009104 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800910a:	2300      	movs	r3, #0
 800910c:	607b      	str	r3, [r7, #4]
 800910e:	e002      	b.n	8009116 <enq_lock+0x12>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3301      	adds	r3, #1
 8009114:	607b      	str	r3, [r7, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d806      	bhi.n	800912a <enq_lock+0x26>
 800911c:	4a09      	ldr	r2, [pc, #36]	; (8009144 <enq_lock+0x40>)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	4413      	add	r3, r2
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1f2      	bne.n	8009110 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b02      	cmp	r3, #2
 800912e:	bf14      	ite	ne
 8009130:	2301      	movne	r3, #1
 8009132:	2300      	moveq	r3, #0
 8009134:	b2db      	uxtb	r3, r3
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	20004a64 	.word	0x20004a64

08009148 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e01f      	b.n	8009198 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009158:	4a41      	ldr	r2, [pc, #260]	; (8009260 <inc_lock+0x118>)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	4413      	add	r3, r2
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d113      	bne.n	8009192 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800916a:	4a3d      	ldr	r2, [pc, #244]	; (8009260 <inc_lock+0x118>)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	4413      	add	r3, r2
 8009172:	3304      	adds	r3, #4
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800917a:	429a      	cmp	r2, r3
 800917c:	d109      	bne.n	8009192 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800917e:	4a38      	ldr	r2, [pc, #224]	; (8009260 <inc_lock+0x118>)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	4413      	add	r3, r2
 8009186:	3308      	adds	r3, #8
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800918e:	429a      	cmp	r2, r3
 8009190:	d006      	beq.n	80091a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d9dc      	bls.n	8009158 <inc_lock+0x10>
 800919e:	e000      	b.n	80091a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80091a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d132      	bne.n	800920e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e002      	b.n	80091b4 <inc_lock+0x6c>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d806      	bhi.n	80091c8 <inc_lock+0x80>
 80091ba:	4a29      	ldr	r2, [pc, #164]	; (8009260 <inc_lock+0x118>)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	4413      	add	r3, r2
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1f2      	bne.n	80091ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d101      	bne.n	80091d2 <inc_lock+0x8a>
 80091ce:	2300      	movs	r3, #0
 80091d0:	e040      	b.n	8009254 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4922      	ldr	r1, [pc, #136]	; (8009260 <inc_lock+0x118>)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	011b      	lsls	r3, r3, #4
 80091dc:	440b      	add	r3, r1
 80091de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	491e      	ldr	r1, [pc, #120]	; (8009260 <inc_lock+0x118>)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	440b      	add	r3, r1
 80091ec:	3304      	adds	r3, #4
 80091ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	695a      	ldr	r2, [r3, #20]
 80091f4:	491a      	ldr	r1, [pc, #104]	; (8009260 <inc_lock+0x118>)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	440b      	add	r3, r1
 80091fc:	3308      	adds	r3, #8
 80091fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009200:	4a17      	ldr	r2, [pc, #92]	; (8009260 <inc_lock+0x118>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	4413      	add	r3, r2
 8009208:	330c      	adds	r3, #12
 800920a:	2200      	movs	r2, #0
 800920c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <inc_lock+0xe0>
 8009214:	4a12      	ldr	r2, [pc, #72]	; (8009260 <inc_lock+0x118>)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	4413      	add	r3, r2
 800921c:	330c      	adds	r3, #12
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <inc_lock+0xe0>
 8009224:	2300      	movs	r3, #0
 8009226:	e015      	b.n	8009254 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d108      	bne.n	8009240 <inc_lock+0xf8>
 800922e:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <inc_lock+0x118>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	4413      	add	r3, r2
 8009236:	330c      	adds	r3, #12
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	3301      	adds	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	e001      	b.n	8009244 <inc_lock+0xfc>
 8009240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009244:	4906      	ldr	r1, [pc, #24]	; (8009260 <inc_lock+0x118>)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	440b      	add	r3, r1
 800924c:	330c      	adds	r3, #12
 800924e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	20004a64 	.word	0x20004a64

08009264 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3b01      	subs	r3, #1
 8009270:	607b      	str	r3, [r7, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d825      	bhi.n	80092c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8009278:	4a17      	ldr	r2, [pc, #92]	; (80092d8 <dec_lock+0x74>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	4413      	add	r3, r2
 8009280:	330c      	adds	r3, #12
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009286:	89fb      	ldrh	r3, [r7, #14]
 8009288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800928c:	d101      	bne.n	8009292 <dec_lock+0x2e>
 800928e:	2300      	movs	r3, #0
 8009290:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009292:	89fb      	ldrh	r3, [r7, #14]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <dec_lock+0x3a>
 8009298:	89fb      	ldrh	r3, [r7, #14]
 800929a:	3b01      	subs	r3, #1
 800929c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800929e:	4a0e      	ldr	r2, [pc, #56]	; (80092d8 <dec_lock+0x74>)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	4413      	add	r3, r2
 80092a6:	330c      	adds	r3, #12
 80092a8:	89fa      	ldrh	r2, [r7, #14]
 80092aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d105      	bne.n	80092be <dec_lock+0x5a>
 80092b2:	4a09      	ldr	r2, [pc, #36]	; (80092d8 <dec_lock+0x74>)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	011b      	lsls	r3, r3, #4
 80092b8:	4413      	add	r3, r2
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	737b      	strb	r3, [r7, #13]
 80092c2:	e001      	b.n	80092c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80092c4:	2302      	movs	r3, #2
 80092c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80092c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20004a64 	.word	0x20004a64

080092dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e010      	b.n	800930c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80092ea:	4a0d      	ldr	r2, [pc, #52]	; (8009320 <clear_lock+0x44>)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	4413      	add	r3, r2
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d105      	bne.n	8009306 <clear_lock+0x2a>
 80092fa:	4a09      	ldr	r2, [pc, #36]	; (8009320 <clear_lock+0x44>)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	011b      	lsls	r3, r3, #4
 8009300:	4413      	add	r3, r2
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d9eb      	bls.n	80092ea <clear_lock+0xe>
	}
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr
 8009320:	20004a64 	.word	0x20004a64

08009324 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	78db      	ldrb	r3, [r3, #3]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d034      	beq.n	80093a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7858      	ldrb	r0, [r3, #1]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009348:	2301      	movs	r3, #1
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	f7ff fd40 	bl	8008dd0 <disk_write>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009356:	2301      	movs	r3, #1
 8009358:	73fb      	strb	r3, [r7, #15]
 800935a:	e022      	b.n	80093a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	1ad2      	subs	r2, r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	429a      	cmp	r2, r3
 8009370:	d217      	bcs.n	80093a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	789b      	ldrb	r3, [r3, #2]
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	e010      	b.n	800939c <sync_window+0x78>
					wsect += fs->fsize;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4413      	add	r3, r2
 8009382:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7858      	ldrb	r0, [r3, #1]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800938e:	2301      	movs	r3, #1
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	f7ff fd1d 	bl	8008dd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	3b01      	subs	r3, #1
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d8eb      	bhi.n	800937a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d01b      	beq.n	80093fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7ff ffad 	bl	8009324 <sync_window>
 80093ca:	4603      	mov	r3, r0
 80093cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d113      	bne.n	80093fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	7858      	ldrb	r0, [r3, #1]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093de:	2301      	movs	r3, #1
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	f7ff fcd5 	bl	8008d90 <disk_read>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff ff87 	bl	8009324 <sync_window>
 8009416:	4603      	mov	r3, r0
 8009418:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800941a:	7bfb      	ldrb	r3, [r7, #15]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d158      	bne.n	80094d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b03      	cmp	r3, #3
 8009426:	d148      	bne.n	80094ba <sync_fs+0xb2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d144      	bne.n	80094ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3334      	adds	r3, #52	; 0x34
 8009434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff fda9 	bl	8008f92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3334      	adds	r3, #52	; 0x34
 8009444:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009448:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800944c:	4618      	mov	r0, r3
 800944e:	f7ff fd38 	bl	8008ec2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3334      	adds	r3, #52	; 0x34
 8009456:	4921      	ldr	r1, [pc, #132]	; (80094dc <sync_fs+0xd4>)
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff fd4d 	bl	8008ef8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3334      	adds	r3, #52	; 0x34
 8009462:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009466:	491e      	ldr	r1, [pc, #120]	; (80094e0 <sync_fs+0xd8>)
 8009468:	4618      	mov	r0, r3
 800946a:	f7ff fd45 	bl	8008ef8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	3334      	adds	r3, #52	; 0x34
 8009472:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	4619      	mov	r1, r3
 800947c:	4610      	mov	r0, r2
 800947e:	f7ff fd3b 	bl	8008ef8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3334      	adds	r3, #52	; 0x34
 8009486:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	f7ff fd31 	bl	8008ef8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	7858      	ldrb	r0, [r3, #1]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094ae:	2301      	movs	r3, #1
 80094b0:	f7ff fc8e 	bl	8008dd0 <disk_write>
			fs->fsi_flag = 0;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	785b      	ldrb	r3, [r3, #1]
 80094be:	2200      	movs	r2, #0
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff fca4 	bl	8008e10 <disk_ioctl>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <sync_fs+0xca>
 80094ce:	2301      	movs	r3, #1
 80094d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	41615252 	.word	0x41615252
 80094e0:	61417272 	.word	0x61417272

080094e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b083      	sub	sp, #12
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	3b02      	subs	r3, #2
 80094f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	3b02      	subs	r3, #2
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d301      	bcc.n	8009504 <clust2sect+0x20>
 8009500:	2300      	movs	r3, #0
 8009502:	e008      	b.n	8009516 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	895b      	ldrh	r3, [r3, #10]
 8009508:	461a      	mov	r2, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	fb03 f202 	mul.w	r2, r3, r2
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	4413      	add	r3, r2
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b086      	sub	sp, #24
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d904      	bls.n	8009542 <get_fat+0x20>
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	429a      	cmp	r2, r3
 8009540:	d302      	bcc.n	8009548 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009542:	2301      	movs	r3, #1
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	e08f      	b.n	8009668 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800954c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	2b03      	cmp	r3, #3
 8009554:	d062      	beq.n	800961c <get_fat+0xfa>
 8009556:	2b03      	cmp	r3, #3
 8009558:	dc7c      	bgt.n	8009654 <get_fat+0x132>
 800955a:	2b01      	cmp	r3, #1
 800955c:	d002      	beq.n	8009564 <get_fat+0x42>
 800955e:	2b02      	cmp	r3, #2
 8009560:	d042      	beq.n	80095e8 <get_fat+0xc6>
 8009562:	e077      	b.n	8009654 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	085b      	lsrs	r3, r3, #1
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	0a5b      	lsrs	r3, r3, #9
 800957a:	4413      	add	r3, r2
 800957c:	4619      	mov	r1, r3
 800957e:	6938      	ldr	r0, [r7, #16]
 8009580:	f7ff ff14 	bl	80093ac <move_window>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d167      	bne.n	800965a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1c5a      	adds	r2, r3, #1
 800958e:	60fa      	str	r2, [r7, #12]
 8009590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	4413      	add	r3, r2
 8009598:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800959c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	0a5b      	lsrs	r3, r3, #9
 80095a6:	4413      	add	r3, r2
 80095a8:	4619      	mov	r1, r3
 80095aa:	6938      	ldr	r0, [r7, #16]
 80095ac:	f7ff fefe 	bl	80093ac <move_window>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d153      	bne.n	800965e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	4413      	add	r3, r2
 80095c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	461a      	mov	r2, r3
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <get_fat+0xbc>
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	091b      	lsrs	r3, r3, #4
 80095dc:	e002      	b.n	80095e4 <get_fat+0xc2>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095e4:	617b      	str	r3, [r7, #20]
			break;
 80095e6:	e03f      	b.n	8009668 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	0a1b      	lsrs	r3, r3, #8
 80095f0:	4413      	add	r3, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	6938      	ldr	r0, [r7, #16]
 80095f6:	f7ff fed9 	bl	80093ac <move_window>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d130      	bne.n	8009662 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	005b      	lsls	r3, r3, #1
 800960a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800960e:	4413      	add	r3, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff fc1b 	bl	8008e4c <ld_word>
 8009616:	4603      	mov	r3, r0
 8009618:	617b      	str	r3, [r7, #20]
			break;
 800961a:	e025      	b.n	8009668 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	09db      	lsrs	r3, r3, #7
 8009624:	4413      	add	r3, r2
 8009626:	4619      	mov	r1, r3
 8009628:	6938      	ldr	r0, [r7, #16]
 800962a:	f7ff febf 	bl	80093ac <move_window>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d118      	bne.n	8009666 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009642:	4413      	add	r3, r2
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff fc19 	bl	8008e7c <ld_dword>
 800964a:	4603      	mov	r3, r0
 800964c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009650:	617b      	str	r3, [r7, #20]
			break;
 8009652:	e009      	b.n	8009668 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e006      	b.n	8009668 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800965a:	bf00      	nop
 800965c:	e004      	b.n	8009668 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800965e:	bf00      	nop
 8009660:	e002      	b.n	8009668 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009662:	bf00      	nop
 8009664:	e000      	b.n	8009668 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009666:	bf00      	nop
		}
	}

	return val;
 8009668:	697b      	ldr	r3, [r7, #20]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009672:	b590      	push	{r4, r7, lr}
 8009674:	b089      	sub	sp, #36	; 0x24
 8009676:	af00      	add	r7, sp, #0
 8009678:	60f8      	str	r0, [r7, #12]
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800967e:	2302      	movs	r3, #2
 8009680:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b01      	cmp	r3, #1
 8009686:	f240 80d2 	bls.w	800982e <put_fat+0x1bc>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	68ba      	ldr	r2, [r7, #8]
 8009690:	429a      	cmp	r2, r3
 8009692:	f080 80cc 	bcs.w	800982e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b03      	cmp	r3, #3
 800969c:	f000 8096 	beq.w	80097cc <put_fat+0x15a>
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	f300 80cd 	bgt.w	8009840 <put_fat+0x1ce>
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d002      	beq.n	80096b0 <put_fat+0x3e>
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d06e      	beq.n	800978c <put_fat+0x11a>
 80096ae:	e0c7      	b.n	8009840 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	61bb      	str	r3, [r7, #24]
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	4413      	add	r3, r2
 80096bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	0a5b      	lsrs	r3, r3, #9
 80096c6:	4413      	add	r3, r2
 80096c8:	4619      	mov	r1, r3
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff fe6e 	bl	80093ac <move_window>
 80096d0:	4603      	mov	r3, r0
 80096d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096d4:	7ffb      	ldrb	r3, [r7, #31]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f040 80ab 	bne.w	8009832 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	1c59      	adds	r1, r3, #1
 80096e6:	61b9      	str	r1, [r7, #24]
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	4413      	add	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00d      	beq.n	8009716 <put_fat+0xa4>
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	b25b      	sxtb	r3, r3
 8009700:	f003 030f 	and.w	r3, r3, #15
 8009704:	b25a      	sxtb	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	b2db      	uxtb	r3, r3
 800970a:	011b      	lsls	r3, r3, #4
 800970c:	b25b      	sxtb	r3, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	b25b      	sxtb	r3, r3
 8009712:	b2db      	uxtb	r3, r3
 8009714:	e001      	b.n	800971a <put_fat+0xa8>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2201      	movs	r2, #1
 8009722:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	0a5b      	lsrs	r3, r3, #9
 800972c:	4413      	add	r3, r2
 800972e:	4619      	mov	r1, r3
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7ff fe3b 	bl	80093ac <move_window>
 8009736:	4603      	mov	r3, r0
 8009738:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800973a:	7ffb      	ldrb	r3, [r7, #31]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d17a      	bne.n	8009836 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974c:	4413      	add	r3, r2
 800974e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <put_fat+0xf0>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	091b      	lsrs	r3, r3, #4
 800975e:	b2db      	uxtb	r3, r3
 8009760:	e00e      	b.n	8009780 <put_fat+0x10e>
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	b25b      	sxtb	r3, r3
 8009768:	f023 030f 	bic.w	r3, r3, #15
 800976c:	b25a      	sxtb	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	0a1b      	lsrs	r3, r3, #8
 8009772:	b25b      	sxtb	r3, r3
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	b25b      	sxtb	r3, r3
 800977a:	4313      	orrs	r3, r2
 800977c:	b25b      	sxtb	r3, r3
 800977e:	b2db      	uxtb	r3, r3
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	70da      	strb	r2, [r3, #3]
			break;
 800978a:	e059      	b.n	8009840 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	4413      	add	r3, r2
 8009796:	4619      	mov	r1, r3
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fe07 	bl	80093ac <move_window>
 800979e:	4603      	mov	r3, r0
 80097a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097a2:	7ffb      	ldrb	r3, [r7, #31]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d148      	bne.n	800983a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	005b      	lsls	r3, r3, #1
 80097b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80097b6:	4413      	add	r3, r2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	b292      	uxth	r2, r2
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff fb7f 	bl	8008ec2 <st_word>
			fs->wflag = 1;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	70da      	strb	r2, [r3, #3]
			break;
 80097ca:	e039      	b.n	8009840 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	09db      	lsrs	r3, r3, #7
 80097d4:	4413      	add	r3, r2
 80097d6:	4619      	mov	r1, r3
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff fde7 	bl	80093ac <move_window>
 80097de:	4603      	mov	r3, r0
 80097e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097e2:	7ffb      	ldrb	r3, [r7, #31]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d12a      	bne.n	800983e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80097fc:	4413      	add	r3, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7ff fb3c 	bl	8008e7c <ld_dword>
 8009804:	4603      	mov	r3, r0
 8009806:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800980a:	4323      	orrs	r3, r4
 800980c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800981c:	4413      	add	r3, r2
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff fb69 	bl	8008ef8 <st_dword>
			fs->wflag = 1;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	70da      	strb	r2, [r3, #3]
			break;
 800982c:	e008      	b.n	8009840 <put_fat+0x1ce>
		}
	}
 800982e:	bf00      	nop
 8009830:	e006      	b.n	8009840 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009832:	bf00      	nop
 8009834:	e004      	b.n	8009840 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009836:	bf00      	nop
 8009838:	e002      	b.n	8009840 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800983a:	bf00      	nop
 800983c:	e000      	b.n	8009840 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800983e:	bf00      	nop
	return res;
 8009840:	7ffb      	ldrb	r3, [r7, #31]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3724      	adds	r7, #36	; 0x24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd90      	pop	{r4, r7, pc}

0800984a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d904      	bls.n	8009870 <remove_chain+0x26>
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	429a      	cmp	r2, r3
 800986e:	d301      	bcc.n	8009874 <remove_chain+0x2a>
 8009870:	2302      	movs	r3, #2
 8009872:	e04b      	b.n	800990c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00c      	beq.n	8009894 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800987a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f7ff fef6 	bl	8009672 <put_fat>
 8009886:	4603      	mov	r3, r0
 8009888:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800988a:	7ffb      	ldrb	r3, [r7, #31]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <remove_chain+0x4a>
 8009890:	7ffb      	ldrb	r3, [r7, #31]
 8009892:	e03b      	b.n	800990c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009894:	68b9      	ldr	r1, [r7, #8]
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f7ff fe43 	bl	8009522 <get_fat>
 800989c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d031      	beq.n	8009908 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d101      	bne.n	80098ae <remove_chain+0x64>
 80098aa:	2302      	movs	r3, #2
 80098ac:	e02e      	b.n	800990c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b4:	d101      	bne.n	80098ba <remove_chain+0x70>
 80098b6:	2301      	movs	r3, #1
 80098b8:	e028      	b.n	800990c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80098ba:	2200      	movs	r2, #0
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	69b8      	ldr	r0, [r7, #24]
 80098c0:	f7ff fed7 	bl	8009672 <put_fat>
 80098c4:	4603      	mov	r3, r0
 80098c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80098c8:	7ffb      	ldrb	r3, [r7, #31]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <remove_chain+0x88>
 80098ce:	7ffb      	ldrb	r3, [r7, #31]
 80098d0:	e01c      	b.n	800990c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	691a      	ldr	r2, [r3, #16]
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	3b02      	subs	r3, #2
 80098dc:	429a      	cmp	r2, r3
 80098de:	d20b      	bcs.n	80098f8 <remove_chain+0xae>
			fs->free_clst++;
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	791b      	ldrb	r3, [r3, #4]
 80098ee:	f043 0301 	orr.w	r3, r3, #1
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	429a      	cmp	r2, r3
 8009904:	d3c6      	bcc.n	8009894 <remove_chain+0x4a>
 8009906:	e000      	b.n	800990a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009908:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10d      	bne.n	8009946 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d004      	beq.n	8009940 <create_chain+0x2c>
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	429a      	cmp	r2, r3
 800993e:	d31b      	bcc.n	8009978 <create_chain+0x64>
 8009940:	2301      	movs	r3, #1
 8009942:	61bb      	str	r3, [r7, #24]
 8009944:	e018      	b.n	8009978 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff fdea 	bl	8009522 <get_fat>
 800994e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d801      	bhi.n	800995a <create_chain+0x46>
 8009956:	2301      	movs	r3, #1
 8009958:	e070      	b.n	8009a3c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009960:	d101      	bne.n	8009966 <create_chain+0x52>
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	e06a      	b.n	8009a3c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	429a      	cmp	r2, r3
 800996e:	d201      	bcs.n	8009974 <create_chain+0x60>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	e063      	b.n	8009a3c <create_chain+0x128>
		scl = clst;
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3301      	adds	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	429a      	cmp	r2, r3
 800998a:	d307      	bcc.n	800999c <create_chain+0x88>
				ncl = 2;
 800998c:	2302      	movs	r3, #2
 800998e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009990:	69fa      	ldr	r2, [r7, #28]
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	429a      	cmp	r2, r3
 8009996:	d901      	bls.n	800999c <create_chain+0x88>
 8009998:	2300      	movs	r3, #0
 800999a:	e04f      	b.n	8009a3c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800999c:	69f9      	ldr	r1, [r7, #28]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fdbf 	bl	8009522 <get_fat>
 80099a4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d003      	beq.n	80099ba <create_chain+0xa6>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099b8:	d101      	bne.n	80099be <create_chain+0xaa>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	e03e      	b.n	8009a3c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	69bb      	ldr	r3, [r7, #24]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d1da      	bne.n	800997c <create_chain+0x68>
 80099c6:	2300      	movs	r3, #0
 80099c8:	e038      	b.n	8009a3c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80099ca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80099cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099d0:	69f9      	ldr	r1, [r7, #28]
 80099d2:	6938      	ldr	r0, [r7, #16]
 80099d4:	f7ff fe4d 	bl	8009672 <put_fat>
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <create_chain+0xe2>
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d006      	beq.n	80099f6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80099e8:	69fa      	ldr	r2, [r7, #28]
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6938      	ldr	r0, [r7, #16]
 80099ee:	f7ff fe40 	bl	8009672 <put_fat>
 80099f2:	4603      	mov	r3, r0
 80099f4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d116      	bne.n	8009a2a <create_chain+0x116>
		fs->last_clst = ncl;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	69fa      	ldr	r2, [r7, #28]
 8009a00:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	3b02      	subs	r3, #2
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d804      	bhi.n	8009a1a <create_chain+0x106>
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	1e5a      	subs	r2, r3, #1
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	f043 0301 	orr.w	r3, r3, #1
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	711a      	strb	r2, [r3, #4]
 8009a28:	e007      	b.n	8009a3a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d102      	bne.n	8009a36 <create_chain+0x122>
 8009a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a34:	e000      	b.n	8009a38 <create_chain+0x124>
 8009a36:	2301      	movs	r3, #1
 8009a38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009a3a:	69fb      	ldr	r3, [r7, #28]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	3304      	adds	r3, #4
 8009a5a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	0a5b      	lsrs	r3, r3, #9
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	8952      	ldrh	r2, [r2, #10]
 8009a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	1d1a      	adds	r2, r3, #4
 8009a6e:	613a      	str	r2, [r7, #16]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <clmt_clust+0x3a>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e010      	b.n	8009aa0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d307      	bcc.n	8009a96 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3304      	adds	r3, #4
 8009a92:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009a94:	e7e9      	b.n	8009a6a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009a96:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	4413      	add	r3, r2
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	371c      	adds	r7, #28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ac2:	d204      	bcs.n	8009ace <dir_sdi+0x22>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	f003 031f 	and.w	r3, r3, #31
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	e063      	b.n	8009b9a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d106      	bne.n	8009af2 <dir_sdi+0x46>
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d902      	bls.n	8009af2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10c      	bne.n	8009b12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	095b      	lsrs	r3, r3, #5
 8009afc:	693a      	ldr	r2, [r7, #16]
 8009afe:	8912      	ldrh	r2, [r2, #8]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d301      	bcc.n	8009b08 <dir_sdi+0x5c>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e048      	b.n	8009b9a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	61da      	str	r2, [r3, #28]
 8009b10:	e029      	b.n	8009b66 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	895b      	ldrh	r3, [r3, #10]
 8009b16:	025b      	lsls	r3, r3, #9
 8009b18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b1a:	e019      	b.n	8009b50 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6979      	ldr	r1, [r7, #20]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff fcfe 	bl	8009522 <get_fat>
 8009b26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2e:	d101      	bne.n	8009b34 <dir_sdi+0x88>
 8009b30:	2301      	movs	r3, #1
 8009b32:	e032      	b.n	8009b9a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d904      	bls.n	8009b44 <dir_sdi+0x98>
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d301      	bcc.n	8009b48 <dir_sdi+0x9c>
 8009b44:	2302      	movs	r3, #2
 8009b46:	e028      	b.n	8009b9a <dir_sdi+0xee>
			ofs -= csz;
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009b50:	683a      	ldr	r2, [r7, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d2e1      	bcs.n	8009b1c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009b58:	6979      	ldr	r1, [r7, #20]
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f7ff fcc2 	bl	80094e4 <clust2sect>
 8009b60:	4602      	mov	r2, r0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <dir_sdi+0xcc>
 8009b74:	2302      	movs	r3, #2
 8009b76:	e010      	b.n	8009b9a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	69da      	ldr	r2, [r3, #28]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	0a5b      	lsrs	r3, r3, #9
 8009b80:	441a      	add	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b92:	441a      	add	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b086      	sub	sp, #24
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	3320      	adds	r3, #32
 8009bb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	69db      	ldr	r3, [r3, #28]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <dir_next+0x28>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bc8:	d301      	bcc.n	8009bce <dir_next+0x2c>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	e0aa      	b.n	8009d24 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	f040 8098 	bne.w	8009d0a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10b      	bne.n	8009c04 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	095b      	lsrs	r3, r3, #5
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	8912      	ldrh	r2, [r2, #8]
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	f0c0 8088 	bcc.w	8009d0a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	61da      	str	r2, [r3, #28]
 8009c00:	2304      	movs	r3, #4
 8009c02:	e08f      	b.n	8009d24 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	0a5b      	lsrs	r3, r3, #9
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	8952      	ldrh	r2, [r2, #10]
 8009c0c:	3a01      	subs	r2, #1
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d17a      	bne.n	8009d0a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7ff fc80 	bl	8009522 <get_fat>
 8009c22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d801      	bhi.n	8009c2e <dir_next+0x8c>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e07a      	b.n	8009d24 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c34:	d101      	bne.n	8009c3a <dir_next+0x98>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e074      	b.n	8009d24 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d358      	bcc.n	8009cf6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d104      	bne.n	8009c54 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	61da      	str	r2, [r3, #28]
 8009c50:	2304      	movs	r3, #4
 8009c52:	e067      	b.n	8009d24 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	f7ff fe59 	bl	8009914 <create_chain>
 8009c62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <dir_next+0xcc>
 8009c6a:	2307      	movs	r3, #7
 8009c6c:	e05a      	b.n	8009d24 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <dir_next+0xd6>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e055      	b.n	8009d24 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c7e:	d101      	bne.n	8009c84 <dir_next+0xe2>
 8009c80:	2301      	movs	r3, #1
 8009c82:	e04f      	b.n	8009d24 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff fb4d 	bl	8009324 <sync_window>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <dir_next+0xf2>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e047      	b.n	8009d24 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3334      	adds	r3, #52	; 0x34
 8009c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7ff f977 	bl	8008f92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]
 8009ca8:	6979      	ldr	r1, [r7, #20]
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff fc1a 	bl	80094e4 <clust2sect>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8009cb6:	e012      	b.n	8009cde <dir_next+0x13c>
						fs->wflag = 1;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f7ff fb30 	bl	8009324 <sync_window>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <dir_next+0x12c>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e02a      	b.n	8009d24 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd8:	1c5a      	adds	r2, r3, #1
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	895b      	ldrh	r3, [r3, #10]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d3e6      	bcc.n	8009cb8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	1ad2      	subs	r2, r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009cfc:	6979      	ldr	r1, [r7, #20]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff fbf0 	bl	80094e4 <clust2sect>
 8009d04:	4602      	mov	r2, r0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1c:	441a      	add	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff feb4 	bl	8009aac <dir_sdi>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d12b      	bne.n	8009da6 <dir_alloc+0x7a>
		n = 0;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	69db      	ldr	r3, [r3, #28]
 8009d56:	4619      	mov	r1, r3
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff fb27 	bl	80093ac <move_window>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d11d      	bne.n	8009da4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2be5      	cmp	r3, #229	; 0xe5
 8009d70:	d004      	beq.n	8009d7c <dir_alloc+0x50>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d107      	bne.n	8009d8c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	613b      	str	r3, [r7, #16]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d102      	bne.n	8009d90 <dir_alloc+0x64>
 8009d8a:	e00c      	b.n	8009da6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009d90:	2101      	movs	r1, #1
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7ff ff05 	bl	8009ba2 <dir_next>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009d9c:	7dfb      	ldrb	r3, [r7, #23]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0d7      	beq.n	8009d52 <dir_alloc+0x26>
 8009da2:	e000      	b.n	8009da6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009da4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	d101      	bne.n	8009db0 <dir_alloc+0x84>
 8009dac:	2307      	movs	r3, #7
 8009dae:	75fb      	strb	r3, [r7, #23]
	return res;
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3718      	adds	r7, #24
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b084      	sub	sp, #16
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
 8009dc2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	331a      	adds	r3, #26
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff f83f 	bl	8008e4c <ld_word>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b03      	cmp	r3, #3
 8009dd8:	d109      	bne.n	8009dee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	3314      	adds	r3, #20
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff f834 	bl	8008e4c <ld_word>
 8009de4:	4603      	mov	r3, r0
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009dee:	68fb      	ldr	r3, [r7, #12]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	331a      	adds	r3, #26
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	b292      	uxth	r2, r2
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff f857 	bl	8008ec2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d109      	bne.n	8009e30 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f103 0214 	add.w	r2, r3, #20
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	0c1b      	lsrs	r3, r3, #16
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7ff f849 	bl	8008ec2 <st_word>
	}
}
 8009e30:	bf00      	nop
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009e42:	2304      	movs	r3, #4
 8009e44:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009e4c:	e03c      	b.n	8009ec8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69db      	ldr	r3, [r3, #28]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6938      	ldr	r0, [r7, #16]
 8009e56:	f7ff faa9 	bl	80093ac <move_window>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d136      	bne.n	8009ed2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d102      	bne.n	8009e78 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009e72:	2304      	movs	r3, #4
 8009e74:	75fb      	strb	r3, [r7, #23]
 8009e76:	e031      	b.n	8009edc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	330b      	adds	r3, #11
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e84:	73bb      	strb	r3, [r7, #14]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	7bba      	ldrb	r2, [r7, #14]
 8009e8a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	2be5      	cmp	r3, #229	; 0xe5
 8009e90:	d011      	beq.n	8009eb6 <dir_read+0x7e>
 8009e92:	7bfb      	ldrb	r3, [r7, #15]
 8009e94:	2b2e      	cmp	r3, #46	; 0x2e
 8009e96:	d00e      	beq.n	8009eb6 <dir_read+0x7e>
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b0f      	cmp	r3, #15
 8009e9c:	d00b      	beq.n	8009eb6 <dir_read+0x7e>
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f023 0320 	bic.w	r3, r3, #32
 8009ea4:	2b08      	cmp	r3, #8
 8009ea6:	bf0c      	ite	eq
 8009ea8:	2301      	moveq	r3, #1
 8009eaa:	2300      	movne	r3, #0
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	461a      	mov	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00f      	beq.n	8009ed6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff fe72 	bl	8009ba2 <dir_next>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d108      	bne.n	8009eda <dir_read+0xa2>
	while (dp->sect) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1be      	bne.n	8009e4e <dir_read+0x16>
 8009ed0:	e004      	b.n	8009edc <dir_read+0xa4>
		if (res != FR_OK) break;
 8009ed2:	bf00      	nop
 8009ed4:	e002      	b.n	8009edc <dir_read+0xa4>
				break;
 8009ed6:	bf00      	nop
 8009ed8:	e000      	b.n	8009edc <dir_read+0xa4>
		if (res != FR_OK) break;
 8009eda:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <dir_read+0xb0>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	61da      	str	r2, [r3, #28]
	return res;
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b086      	sub	sp, #24
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fdd2 	bl	8009aac <dir_sdi>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <dir_find+0x24>
 8009f12:	7dfb      	ldrb	r3, [r7, #23]
 8009f14:	e03e      	b.n	8009f94 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	6938      	ldr	r0, [r7, #16]
 8009f1e:	f7ff fa45 	bl	80093ac <move_window>
 8009f22:	4603      	mov	r3, r0
 8009f24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d12f      	bne.n	8009f8c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <dir_find+0x4e>
 8009f3a:	2304      	movs	r3, #4
 8009f3c:	75fb      	strb	r3, [r7, #23]
 8009f3e:	e028      	b.n	8009f92 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6a1b      	ldr	r3, [r3, #32]
 8009f44:	330b      	adds	r3, #11
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	330b      	adds	r3, #11
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	f003 0308 	and.w	r3, r3, #8
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10a      	bne.n	8009f78 <dir_find+0x86>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a18      	ldr	r0, [r3, #32]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3324      	adds	r3, #36	; 0x24
 8009f6a:	220b      	movs	r2, #11
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f7ff f82b 	bl	8008fc8 <mem_cmp>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009f78:	2100      	movs	r1, #0
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7ff fe11 	bl	8009ba2 <dir_next>
 8009f80:	4603      	mov	r3, r0
 8009f82:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0c5      	beq.n	8009f16 <dir_find+0x24>
 8009f8a:	e002      	b.n	8009f92 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009f8c:	bf00      	nop
 8009f8e:	e000      	b.n	8009f92 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f90:	bf00      	nop

	return res;
 8009f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009faa:	2101      	movs	r1, #1
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff febd 	bl	8009d2c <dir_alloc>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d11c      	bne.n	8009ff6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	68b8      	ldr	r0, [r7, #8]
 8009fc4:	f7ff f9f2 	bl	80093ac <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d111      	bne.n	8009ff6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe ffd9 	bl	8008f92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a18      	ldr	r0, [r3, #32]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	220b      	movs	r2, #11
 8009fea:	4619      	mov	r1, r3
 8009fec:	f7fe ffb0 	bl	8008f50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2200      	movs	r2, #0
 800a00e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d04e      	beq.n	800a0b6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	613b      	str	r3, [r7, #16]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a020:	e021      	b.n	800a066 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1a      	ldr	r2, [r3, #32]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	1c59      	adds	r1, r3, #1
 800a02a:	6179      	str	r1, [r7, #20]
 800a02c:	4413      	add	r3, r2
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a032:	7bfb      	ldrb	r3, [r7, #15]
 800a034:	2b20      	cmp	r3, #32
 800a036:	d100      	bne.n	800a03a <get_fileinfo+0x3a>
 800a038:	e015      	b.n	800a066 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
 800a03c:	2b05      	cmp	r3, #5
 800a03e:	d101      	bne.n	800a044 <get_fileinfo+0x44>
 800a040:	23e5      	movs	r3, #229	; 0xe5
 800a042:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b09      	cmp	r3, #9
 800a048:	d106      	bne.n	800a058 <get_fileinfo+0x58>
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	613a      	str	r2, [r7, #16]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	4413      	add	r3, r2
 800a054:	222e      	movs	r2, #46	; 0x2e
 800a056:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	613a      	str	r2, [r7, #16]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	4413      	add	r3, r2
 800a062:	7bfa      	ldrb	r2, [r7, #15]
 800a064:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b0a      	cmp	r3, #10
 800a06a:	d9da      	bls.n	800a022 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	4413      	add	r3, r2
 800a072:	3309      	adds	r3, #9
 800a074:	2200      	movs	r2, #0
 800a076:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	7ada      	ldrb	r2, [r3, #11]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	331c      	adds	r3, #28
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fe fef7 	bl	8008e7c <ld_dword>
 800a08e:	4602      	mov	r2, r0
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	3316      	adds	r3, #22
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe feee 	bl	8008e7c <ld_dword>
 800a0a0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	80da      	strh	r2, [r3, #6]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	0c1b      	lsrs	r3, r3, #16
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	809a      	strh	r2, [r3, #4]
 800a0b4:	e000      	b.n	800a0b8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a0b6:	bf00      	nop
}
 800a0b8:	3718      	adds	r7, #24
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	1c59      	adds	r1, r3, #1
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800a0d6:	89fb      	ldrh	r3, [r7, #14]
 800a0d8:	2b60      	cmp	r3, #96	; 0x60
 800a0da:	d905      	bls.n	800a0e8 <get_achar+0x28>
 800a0dc:	89fb      	ldrh	r3, [r7, #14]
 800a0de:	2b7a      	cmp	r3, #122	; 0x7a
 800a0e0:	d802      	bhi.n	800a0e8 <get_achar+0x28>
 800a0e2:	89fb      	ldrh	r3, [r7, #14]
 800a0e4:	3b20      	subs	r3, #32
 800a0e6:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800a0e8:	89fb      	ldrh	r3, [r7, #14]
 800a0ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a0ec:	d904      	bls.n	800a0f8 <get_achar+0x38>
 800a0ee:	89fb      	ldrh	r3, [r7, #14]
 800a0f0:	3b80      	subs	r3, #128	; 0x80
 800a0f2:	4a05      	ldr	r2, [pc, #20]	; (800a108 <get_achar+0x48>)
 800a0f4:	5cd3      	ldrb	r3, [r2, r3]
 800a0f6:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800a0f8:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	0800de1c 	.word	0x0800de1c

0800a10c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08a      	sub	sp, #40	; 0x28
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800a11a:	e009      	b.n	800a130 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800a11c:	f107 0308 	add.w	r3, r7, #8
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff ffcd 	bl	800a0c0 <get_achar>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <pattern_matching+0x24>
 800a12c:	2300      	movs	r3, #0
 800a12e:	e064      	b.n	800a1fa <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	1e5a      	subs	r2, r3, #1
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1f0      	bne.n	800a11c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d104      	bne.n	800a14c <pattern_matching+0x40>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <pattern_matching+0x40>
 800a148:	2301      	movs	r3, #1
 800a14a:	e056      	b.n	800a1fa <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	617b      	str	r3, [r7, #20]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	2b3f      	cmp	r3, #63	; 0x3f
 800a15a:	d003      	beq.n	800a164 <pattern_matching+0x58>
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b2a      	cmp	r3, #42	; 0x2a
 800a162:	d126      	bne.n	800a1b2 <pattern_matching+0xa6>
				nm = nx = 0;
 800a164:	2300      	movs	r3, #0
 800a166:	61fb      	str	r3, [r7, #28]
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	617a      	str	r2, [r7, #20]
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	2b3f      	cmp	r3, #63	; 0x3f
 800a176:	d103      	bne.n	800a180 <pattern_matching+0x74>
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	3301      	adds	r3, #1
 800a17c:	623b      	str	r3, [r7, #32]
 800a17e:	e001      	b.n	800a184 <pattern_matching+0x78>
 800a180:	2301      	movs	r3, #1
 800a182:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	2b3f      	cmp	r3, #63	; 0x3f
 800a18a:	d0ef      	beq.n	800a16c <pattern_matching+0x60>
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b2a      	cmp	r3, #42	; 0x2a
 800a192:	d0eb      	beq.n	800a16c <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800a194:	6978      	ldr	r0, [r7, #20]
 800a196:	6939      	ldr	r1, [r7, #16]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	6a3a      	ldr	r2, [r7, #32]
 800a19c:	f7ff ffb6 	bl	800a10c <pattern_matching>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <pattern_matching+0x9e>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e027      	b.n	800a1fa <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a1b0:	e017      	b.n	800a1e2 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800a1b2:	f107 0314 	add.w	r3, r7, #20
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff ff82 	bl	800a0c0 <get_achar>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800a1c0:	f107 0310 	add.w	r3, r7, #16
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ff7b 	bl	800a0c0 <get_achar>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800a1ce:	8b7a      	ldrh	r2, [r7, #26]
 800a1d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d104      	bne.n	800a1e0 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800a1d6:	8b7b      	ldrh	r3, [r7, #26]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1bb      	bne.n	800a154 <pattern_matching+0x48>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e00c      	b.n	800a1fa <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800a1e0:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800a1e2:	f107 0308 	add.w	r3, r7, #8
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7ff ff6a 	bl	800a0c0 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d002      	beq.n	800a1f8 <pattern_matching+0xec>
 800a1f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d1a9      	bne.n	800a14c <pattern_matching+0x40>

	return 0;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3728      	adds	r7, #40	; 0x28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	60fb      	str	r3, [r7, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3324      	adds	r3, #36	; 0x24
 800a218:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a21a:	220b      	movs	r2, #11
 800a21c:	2120      	movs	r1, #32
 800a21e:	68b8      	ldr	r0, [r7, #8]
 800a220:	f7fe feb7 	bl	8008f92 <mem_set>
	si = i = 0; ni = 8;
 800a224:	2300      	movs	r3, #0
 800a226:	613b      	str	r3, [r7, #16]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	61fb      	str	r3, [r7, #28]
 800a22c:	2308      	movs	r3, #8
 800a22e:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	4413      	add	r3, r2
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b2e      	cmp	r3, #46	; 0x2e
 800a23a:	d12f      	bne.n	800a29c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	1c5a      	adds	r2, r3, #1
 800a240:	61fa      	str	r2, [r7, #28]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800a24a:	7efb      	ldrb	r3, [r7, #27]
 800a24c:	2b2e      	cmp	r3, #46	; 0x2e
 800a24e:	d10a      	bne.n	800a266 <create_name+0x62>
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d807      	bhi.n	800a266 <create_name+0x62>
			sfn[i++] = c;
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	613a      	str	r2, [r7, #16]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	4413      	add	r3, r2
 800a260:	7efa      	ldrb	r2, [r7, #27]
 800a262:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800a264:	e7ea      	b.n	800a23c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800a266:	7efb      	ldrb	r3, [r7, #27]
 800a268:	2b2f      	cmp	r3, #47	; 0x2f
 800a26a:	d007      	beq.n	800a27c <create_name+0x78>
 800a26c:	7efb      	ldrb	r3, [r7, #27]
 800a26e:	2b5c      	cmp	r3, #92	; 0x5c
 800a270:	d004      	beq.n	800a27c <create_name+0x78>
 800a272:	7efb      	ldrb	r3, [r7, #27]
 800a274:	2b20      	cmp	r3, #32
 800a276:	d901      	bls.n	800a27c <create_name+0x78>
 800a278:	2306      	movs	r3, #6
 800a27a:	e084      	b.n	800a386 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	441a      	add	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800a286:	7efb      	ldrb	r3, [r7, #27]
 800a288:	2b20      	cmp	r3, #32
 800a28a:	d801      	bhi.n	800a290 <create_name+0x8c>
 800a28c:	2224      	movs	r2, #36	; 0x24
 800a28e:	e000      	b.n	800a292 <create_name+0x8e>
 800a290:	2220      	movs	r2, #32
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	330b      	adds	r3, #11
 800a296:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	e074      	b.n	800a386 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	61fa      	str	r2, [r7, #28]
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2aa:	7efb      	ldrb	r3, [r7, #27]
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	d94e      	bls.n	800a34e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a2b0:	7efb      	ldrb	r3, [r7, #27]
 800a2b2:	2b2f      	cmp	r3, #47	; 0x2f
 800a2b4:	d006      	beq.n	800a2c4 <create_name+0xc0>
 800a2b6:	7efb      	ldrb	r3, [r7, #27]
 800a2b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a2ba:	d110      	bne.n	800a2de <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a2bc:	e002      	b.n	800a2c4 <create_name+0xc0>
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	61fb      	str	r3, [r7, #28]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b2f      	cmp	r3, #47	; 0x2f
 800a2ce:	d0f6      	beq.n	800a2be <create_name+0xba>
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a2da:	d0f0      	beq.n	800a2be <create_name+0xba>
			break;
 800a2dc:	e038      	b.n	800a350 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a2de:	7efb      	ldrb	r3, [r7, #27]
 800a2e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2e2:	d003      	beq.n	800a2ec <create_name+0xe8>
 800a2e4:	693a      	ldr	r2, [r7, #16]
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d30c      	bcc.n	800a306 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b0b      	cmp	r3, #11
 800a2f0:	d002      	beq.n	800a2f8 <create_name+0xf4>
 800a2f2:	7efb      	ldrb	r3, [r7, #27]
 800a2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f6:	d001      	beq.n	800a2fc <create_name+0xf8>
 800a2f8:	2306      	movs	r3, #6
 800a2fa:	e044      	b.n	800a386 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800a2fc:	2308      	movs	r3, #8
 800a2fe:	613b      	str	r3, [r7, #16]
 800a300:	230b      	movs	r3, #11
 800a302:	617b      	str	r3, [r7, #20]
			continue;
 800a304:	e022      	b.n	800a34c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a306:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da04      	bge.n	800a318 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a30e:	7efb      	ldrb	r3, [r7, #27]
 800a310:	3b80      	subs	r3, #128	; 0x80
 800a312:	4a1f      	ldr	r2, [pc, #124]	; (800a390 <create_name+0x18c>)
 800a314:	5cd3      	ldrb	r3, [r2, r3]
 800a316:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a318:	7efb      	ldrb	r3, [r7, #27]
 800a31a:	4619      	mov	r1, r3
 800a31c:	481d      	ldr	r0, [pc, #116]	; (800a394 <create_name+0x190>)
 800a31e:	f7fe fe7a 	bl	8009016 <chk_chr>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <create_name+0x128>
 800a328:	2306      	movs	r3, #6
 800a32a:	e02c      	b.n	800a386 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a32c:	7efb      	ldrb	r3, [r7, #27]
 800a32e:	2b60      	cmp	r3, #96	; 0x60
 800a330:	d905      	bls.n	800a33e <create_name+0x13a>
 800a332:	7efb      	ldrb	r3, [r7, #27]
 800a334:	2b7a      	cmp	r3, #122	; 0x7a
 800a336:	d802      	bhi.n	800a33e <create_name+0x13a>
 800a338:	7efb      	ldrb	r3, [r7, #27]
 800a33a:	3b20      	subs	r3, #32
 800a33c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	613a      	str	r2, [r7, #16]
 800a344:	68ba      	ldr	r2, [r7, #8]
 800a346:	4413      	add	r3, r2
 800a348:	7efa      	ldrb	r2, [r7, #27]
 800a34a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a34c:	e7a6      	b.n	800a29c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a34e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	441a      	add	r2, r3
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <create_name+0x160>
 800a360:	2306      	movs	r3, #6
 800a362:	e010      	b.n	800a386 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2be5      	cmp	r3, #229	; 0xe5
 800a36a:	d102      	bne.n	800a372 <create_name+0x16e>
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2205      	movs	r2, #5
 800a370:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a372:	7efb      	ldrb	r3, [r7, #27]
 800a374:	2b20      	cmp	r3, #32
 800a376:	d801      	bhi.n	800a37c <create_name+0x178>
 800a378:	2204      	movs	r2, #4
 800a37a:	e000      	b.n	800a37e <create_name+0x17a>
 800a37c:	2200      	movs	r2, #0
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	330b      	adds	r3, #11
 800a382:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a384:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a386:	4618      	mov	r0, r3
 800a388:	3720      	adds	r7, #32
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	0800de1c 	.word	0x0800de1c
 800a394:	0800dda4 	.word	0x0800dda4

0800a398 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b2f      	cmp	r3, #47	; 0x2f
 800a3b2:	d00b      	beq.n	800a3cc <follow_path+0x34>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a3ba:	d007      	beq.n	800a3cc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	695a      	ldr	r2, [r3, #20]
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	609a      	str	r2, [r3, #8]
 800a3c4:	e00d      	b.n	800a3e2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	603b      	str	r3, [r7, #0]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b2f      	cmp	r3, #47	; 0x2f
 800a3d2:	d0f8      	beq.n	800a3c6 <follow_path+0x2e>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a3da:	d0f4      	beq.n	800a3c6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b1f      	cmp	r3, #31
 800a3e8:	d80a      	bhi.n	800a400 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2280      	movs	r2, #128	; 0x80
 800a3ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff fb59 	bl	8009aac <dir_sdi>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	75fb      	strb	r3, [r7, #23]
 800a3fe:	e056      	b.n	800a4ae <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a400:	463b      	mov	r3, r7
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff fefd 	bl	800a204 <create_name>
 800a40a:	4603      	mov	r3, r0
 800a40c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d147      	bne.n	800a4a4 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff fd6c 	bl	8009ef2 <dir_find>
 800a41a:	4603      	mov	r3, r0
 800a41c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a424:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d01b      	beq.n	800a464 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d13a      	bne.n	800a4a8 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800a432:	7afb      	ldrb	r3, [r7, #11]
 800a434:	f003 0320 	and.w	r3, r3, #32
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00b      	beq.n	800a454 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800a43c:	7afb      	ldrb	r3, [r7, #11]
 800a43e:	f003 0304 	and.w	r3, r3, #4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02c      	beq.n	800a4a0 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2280      	movs	r2, #128	; 0x80
 800a44a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800a452:	e029      	b.n	800a4a8 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a454:	7afb      	ldrb	r3, [r7, #11]
 800a456:	f003 0304 	and.w	r3, r3, #4
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d124      	bne.n	800a4a8 <follow_path+0x110>
 800a45e:	2305      	movs	r3, #5
 800a460:	75fb      	strb	r3, [r7, #23]
				break;
 800a462:	e021      	b.n	800a4a8 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a464:	7afb      	ldrb	r3, [r7, #11]
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d11e      	bne.n	800a4ac <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	799b      	ldrb	r3, [r3, #6]
 800a472:	f003 0310 	and.w	r3, r3, #16
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800a47a:	2305      	movs	r3, #5
 800a47c:	75fb      	strb	r3, [r7, #23]
 800a47e:	e016      	b.n	800a4ae <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a48e:	4413      	add	r3, r2
 800a490:	4619      	mov	r1, r3
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff fc91 	bl	8009dba <ld_clust>
 800a498:	4602      	mov	r2, r0
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	609a      	str	r2, [r3, #8]
 800a49e:	e7af      	b.n	800a400 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800a4a0:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4a2:	e7ad      	b.n	800a400 <follow_path+0x68>
			if (res != FR_OK) break;
 800a4a4:	bf00      	nop
 800a4a6:	e002      	b.n	800a4ae <follow_path+0x116>
				break;
 800a4a8:	bf00      	nop
 800a4aa:	e000      	b.n	800a4ae <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4ac:	bf00      	nop
			}
		}
	}

	return res;
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b087      	sub	sp, #28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d031      	beq.n	800a532 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	617b      	str	r3, [r7, #20]
 800a4d4:	e002      	b.n	800a4dc <get_ldnumber+0x24>
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	2b20      	cmp	r3, #32
 800a4e2:	d903      	bls.n	800a4ec <get_ldnumber+0x34>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b3a      	cmp	r3, #58	; 0x3a
 800a4ea:	d1f4      	bne.n	800a4d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b3a      	cmp	r3, #58	; 0x3a
 800a4f2:	d11c      	bne.n	800a52e <get_ldnumber+0x76>
			tp = *path;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	60fa      	str	r2, [r7, #12]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	3b30      	subs	r3, #48	; 0x30
 800a504:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b09      	cmp	r3, #9
 800a50a:	d80e      	bhi.n	800a52a <get_ldnumber+0x72>
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	429a      	cmp	r2, r3
 800a512:	d10a      	bne.n	800a52a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d107      	bne.n	800a52a <get_ldnumber+0x72>
					vol = (int)i;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3301      	adds	r3, #1
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	e002      	b.n	800a534 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a52e:	2300      	movs	r3, #0
 800a530:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a532:	693b      	ldr	r3, [r7, #16]
}
 800a534:	4618      	mov	r0, r3
 800a536:	371c      	adds	r7, #28
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	70da      	strb	r2, [r3, #3]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a556:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7fe ff26 	bl	80093ac <move_window>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <check_fs+0x2a>
 800a566:	2304      	movs	r3, #4
 800a568:	e038      	b.n	800a5dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3334      	adds	r3, #52	; 0x34
 800a56e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe fc6a 	bl	8008e4c <ld_word>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a580:	429a      	cmp	r2, r3
 800a582:	d001      	beq.n	800a588 <check_fs+0x48>
 800a584:	2303      	movs	r3, #3
 800a586:	e029      	b.n	800a5dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a58e:	2be9      	cmp	r3, #233	; 0xe9
 800a590:	d009      	beq.n	800a5a6 <check_fs+0x66>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a598:	2beb      	cmp	r3, #235	; 0xeb
 800a59a:	d11e      	bne.n	800a5da <check_fs+0x9a>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a5a2:	2b90      	cmp	r3, #144	; 0x90
 800a5a4:	d119      	bne.n	800a5da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3334      	adds	r3, #52	; 0x34
 800a5aa:	3336      	adds	r3, #54	; 0x36
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fc65 	bl	8008e7c <ld_dword>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5b8:	4a0a      	ldr	r2, [pc, #40]	; (800a5e4 <check_fs+0xa4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d101      	bne.n	800a5c2 <check_fs+0x82>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e00c      	b.n	800a5dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	3334      	adds	r3, #52	; 0x34
 800a5c6:	3352      	adds	r3, #82	; 0x52
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe fc57 	bl	8008e7c <ld_dword>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	4a05      	ldr	r2, [pc, #20]	; (800a5e8 <check_fs+0xa8>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d101      	bne.n	800a5da <check_fs+0x9a>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e000      	b.n	800a5dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a5da:	2302      	movs	r3, #2
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	00544146 	.word	0x00544146
 800a5e8:	33544146 	.word	0x33544146

0800a5ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b096      	sub	sp, #88	; 0x58
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff ff59 	bl	800a4b8 <get_ldnumber>
 800a606:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	da01      	bge.n	800a612 <find_volume+0x26>
 800a60e:	230b      	movs	r3, #11
 800a610:	e230      	b.n	800aa74 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a612:	4aa1      	ldr	r2, [pc, #644]	; (800a898 <find_volume+0x2ac>)
 800a614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a61a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d101      	bne.n	800a626 <find_volume+0x3a>
 800a622:	230c      	movs	r3, #12
 800a624:	e226      	b.n	800aa74 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a62a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	f023 0301 	bic.w	r3, r3, #1
 800a632:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01a      	beq.n	800a672 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	785b      	ldrb	r3, [r3, #1]
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fb65 	bl	8008d10 <disk_status>
 800a646:	4603      	mov	r3, r0
 800a648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a64c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10c      	bne.n	800a672 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d007      	beq.n	800a66e <find_volume+0x82>
 800a65e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a662:	f003 0304 	and.w	r3, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a66a:	230a      	movs	r3, #10
 800a66c:	e202      	b.n	800aa74 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800a66e:	2300      	movs	r3, #0
 800a670:	e200      	b.n	800aa74 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	2200      	movs	r2, #0
 800a676:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	785b      	ldrb	r3, [r3, #1]
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fb5d 	bl	8008d44 <disk_initialize>
 800a68a:	4603      	mov	r3, r0
 800a68c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a690:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a69c:	2303      	movs	r3, #3
 800a69e:	e1e9      	b.n	800aa74 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d007      	beq.n	800a6b6 <find_volume+0xca>
 800a6a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a6b2:	230a      	movs	r3, #10
 800a6b4:	e1de      	b.n	800aa74 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6be:	f7ff ff3f 	bl	800a540 <check_fs>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d149      	bne.n	800a764 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d4:	e01e      	b.n	800a714 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a6e4:	4413      	add	r3, r2
 800a6e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d006      	beq.n	800a700 <find_volume+0x114>
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fbc0 	bl	8008e7c <ld_dword>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	e000      	b.n	800a702 <find_volume+0x116>
 800a700:	2200      	movs	r2, #0
 800a702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	3358      	adds	r3, #88	; 0x58
 800a708:	443b      	add	r3, r7
 800a70a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a710:	3301      	adds	r3, #1
 800a712:	643b      	str	r3, [r7, #64]	; 0x40
 800a714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a716:	2b03      	cmp	r3, #3
 800a718:	d9dd      	bls.n	800a6d6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a71a:	2300      	movs	r3, #0
 800a71c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <find_volume+0x13e>
 800a724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a726:	3b01      	subs	r3, #1
 800a728:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a72a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	3358      	adds	r3, #88	; 0x58
 800a730:	443b      	add	r3, r7
 800a732:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a736:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <find_volume+0x15e>
 800a73e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a740:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a742:	f7ff fefd 	bl	800a540 <check_fs>
 800a746:	4603      	mov	r3, r0
 800a748:	e000      	b.n	800a74c <find_volume+0x160>
 800a74a:	2303      	movs	r3, #3
 800a74c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a754:	2b01      	cmp	r3, #1
 800a756:	d905      	bls.n	800a764 <find_volume+0x178>
 800a758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75a:	3301      	adds	r3, #1
 800a75c:	643b      	str	r3, [r7, #64]	; 0x40
 800a75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a760:	2b03      	cmp	r3, #3
 800a762:	d9e2      	bls.n	800a72a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a768:	2b04      	cmp	r3, #4
 800a76a:	d101      	bne.n	800a770 <find_volume+0x184>
 800a76c:	2301      	movs	r3, #1
 800a76e:	e181      	b.n	800aa74 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a774:	2b01      	cmp	r3, #1
 800a776:	d901      	bls.n	800a77c <find_volume+0x190>
 800a778:	230d      	movs	r3, #13
 800a77a:	e17b      	b.n	800aa74 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	3334      	adds	r3, #52	; 0x34
 800a780:	330b      	adds	r3, #11
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fb62 	bl	8008e4c <ld_word>
 800a788:	4603      	mov	r3, r0
 800a78a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a78e:	d001      	beq.n	800a794 <find_volume+0x1a8>
 800a790:	230d      	movs	r3, #13
 800a792:	e16f      	b.n	800aa74 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	3334      	adds	r3, #52	; 0x34
 800a798:	3316      	adds	r3, #22
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe fb56 	bl	8008e4c <ld_word>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d106      	bne.n	800a7b8 <find_volume+0x1cc>
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	3334      	adds	r3, #52	; 0x34
 800a7ae:	3324      	adds	r3, #36	; 0x24
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f7fe fb63 	bl	8008e7c <ld_dword>
 800a7b6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7bc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	789b      	ldrb	r3, [r3, #2]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d005      	beq.n	800a7dc <find_volume+0x1f0>
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	789b      	ldrb	r3, [r3, #2]
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d001      	beq.n	800a7dc <find_volume+0x1f0>
 800a7d8:	230d      	movs	r3, #13
 800a7da:	e14b      	b.n	800aa74 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	789b      	ldrb	r3, [r3, #2]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7e4:	fb02 f303 	mul.w	r3, r2, r3
 800a7e8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	895b      	ldrh	r3, [r3, #10]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d008      	beq.n	800a810 <find_volume+0x224>
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a800:	895b      	ldrh	r3, [r3, #10]
 800a802:	461a      	mov	r2, r3
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	895b      	ldrh	r3, [r3, #10]
 800a808:	3b01      	subs	r3, #1
 800a80a:	4013      	ands	r3, r2
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <find_volume+0x228>
 800a810:	230d      	movs	r3, #13
 800a812:	e12f      	b.n	800aa74 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	3334      	adds	r3, #52	; 0x34
 800a818:	3311      	adds	r3, #17
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe fb16 	bl	8008e4c <ld_word>
 800a820:	4603      	mov	r3, r0
 800a822:	461a      	mov	r2, r3
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	891b      	ldrh	r3, [r3, #8]
 800a82c:	f003 030f 	and.w	r3, r3, #15
 800a830:	b29b      	uxth	r3, r3
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <find_volume+0x24e>
 800a836:	230d      	movs	r3, #13
 800a838:	e11c      	b.n	800aa74 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83c:	3334      	adds	r3, #52	; 0x34
 800a83e:	3313      	adds	r3, #19
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe fb03 	bl	8008e4c <ld_word>
 800a846:	4603      	mov	r3, r0
 800a848:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a84a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d106      	bne.n	800a85e <find_volume+0x272>
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	3334      	adds	r3, #52	; 0x34
 800a854:	3320      	adds	r3, #32
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe fb10 	bl	8008e7c <ld_dword>
 800a85c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a860:	3334      	adds	r3, #52	; 0x34
 800a862:	330e      	adds	r3, #14
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe faf1 	bl	8008e4c <ld_word>
 800a86a:	4603      	mov	r3, r0
 800a86c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a86e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a870:	2b00      	cmp	r3, #0
 800a872:	d101      	bne.n	800a878 <find_volume+0x28c>
 800a874:	230d      	movs	r3, #13
 800a876:	e0fd      	b.n	800aa74 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a878:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a87c:	4413      	add	r3, r2
 800a87e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a880:	8912      	ldrh	r2, [r2, #8]
 800a882:	0912      	lsrs	r2, r2, #4
 800a884:	b292      	uxth	r2, r2
 800a886:	4413      	add	r3, r2
 800a888:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a88a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	429a      	cmp	r2, r3
 800a890:	d204      	bcs.n	800a89c <find_volume+0x2b0>
 800a892:	230d      	movs	r3, #13
 800a894:	e0ee      	b.n	800aa74 <find_volume+0x488>
 800a896:	bf00      	nop
 800a898:	20004a5c 	.word	0x20004a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a89c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8a4:	8952      	ldrh	r2, [r2, #10]
 800a8a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <find_volume+0x2ca>
 800a8b2:	230d      	movs	r3, #13
 800a8b4:	e0de      	b.n	800aa74 <find_volume+0x488>
		fmt = FS_FAT32;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d802      	bhi.n	800a8cc <find_volume+0x2e0>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d802      	bhi.n	800a8dc <find_volume+0x2f0>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	1c9a      	adds	r2, r3, #2
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8e8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8ee:	441a      	add	r2, r3
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a8f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	441a      	add	r2, r3
 800a8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a8fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a902:	2b03      	cmp	r3, #3
 800a904:	d11e      	bne.n	800a944 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	3334      	adds	r3, #52	; 0x34
 800a90a:	332a      	adds	r3, #42	; 0x2a
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe fa9d 	bl	8008e4c <ld_word>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <find_volume+0x330>
 800a918:	230d      	movs	r3, #13
 800a91a:	e0ab      	b.n	800aa74 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	891b      	ldrh	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <find_volume+0x33c>
 800a924:	230d      	movs	r3, #13
 800a926:	e0a5      	b.n	800aa74 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92a:	3334      	adds	r3, #52	; 0x34
 800a92c:	332c      	adds	r3, #44	; 0x2c
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe faa4 	bl	8008e7c <ld_dword>
 800a934:	4602      	mov	r2, r0
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	647b      	str	r3, [r7, #68]	; 0x44
 800a942:	e01f      	b.n	800a984 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	891b      	ldrh	r3, [r3, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <find_volume+0x364>
 800a94c:	230d      	movs	r3, #13
 800a94e:	e091      	b.n	800aa74 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a956:	441a      	add	r2, r3
 800a958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a95c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a960:	2b02      	cmp	r3, #2
 800a962:	d103      	bne.n	800a96c <find_volume+0x380>
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	e00a      	b.n	800a982 <find_volume+0x396>
 800a96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96e:	699a      	ldr	r2, [r3, #24]
 800a970:	4613      	mov	r3, r2
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	4413      	add	r3, r2
 800a976:	085a      	lsrs	r2, r3, #1
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a982:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	69da      	ldr	r2, [r3, #28]
 800a988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a98a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a98e:	0a5b      	lsrs	r3, r3, #9
 800a990:	429a      	cmp	r2, r3
 800a992:	d201      	bcs.n	800a998 <find_volume+0x3ac>
 800a994:	230d      	movs	r3, #13
 800a996:	e06d      	b.n	800aa74 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a99e:	611a      	str	r2, [r3, #16]
 800a9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a2:	691a      	ldr	r2, [r3, #16]
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9aa:	2280      	movs	r2, #128	; 0x80
 800a9ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d149      	bne.n	800aa4a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	3334      	adds	r3, #52	; 0x34
 800a9ba:	3330      	adds	r3, #48	; 0x30
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fa45 	bl	8008e4c <ld_word>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d140      	bne.n	800aa4a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9d0:	f7fe fcec 	bl	80093ac <move_window>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d137      	bne.n	800aa4a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9dc:	2200      	movs	r2, #0
 800a9de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e2:	3334      	adds	r3, #52	; 0x34
 800a9e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe fa2f 	bl	8008e4c <ld_word>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d127      	bne.n	800aa4a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	3334      	adds	r3, #52	; 0x34
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fa3c 	bl	8008e7c <ld_dword>
 800aa04:	4603      	mov	r3, r0
 800aa06:	4a1d      	ldr	r2, [pc, #116]	; (800aa7c <find_volume+0x490>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d11e      	bne.n	800aa4a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	3334      	adds	r3, #52	; 0x34
 800aa10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe fa31 	bl	8008e7c <ld_dword>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	4a18      	ldr	r2, [pc, #96]	; (800aa80 <find_volume+0x494>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d113      	bne.n	800aa4a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa24:	3334      	adds	r3, #52	; 0x34
 800aa26:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fa26 	bl	8008e7c <ld_dword>
 800aa30:	4602      	mov	r2, r0
 800aa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa34:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa38:	3334      	adds	r3, #52	; 0x34
 800aa3a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fa1c 	bl	8008e7c <ld_dword>
 800aa44:	4602      	mov	r2, r0
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa50:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa52:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <find_volume+0x498>)
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	3301      	adds	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <find_volume+0x498>)
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <find_volume+0x498>)
 800aa60:	881a      	ldrh	r2, [r3, #0]
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	2200      	movs	r2, #0
 800aa6a:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa6e:	f7fe fc35 	bl	80092dc <clear_lock>
#endif
	return FR_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3758      	adds	r7, #88	; 0x58
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	41615252 	.word	0x41615252
 800aa80:	61417272 	.word	0x61417272
 800aa84:	20004a60 	.word	0x20004a60

0800aa88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aa92:	2309      	movs	r3, #9
 800aa94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01c      	beq.n	800aad6 <validate+0x4e>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d018      	beq.n	800aad6 <validate+0x4e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d013      	beq.n	800aad6 <validate+0x4e>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	889a      	ldrh	r2, [r3, #4]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	88db      	ldrh	r3, [r3, #6]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d10c      	bne.n	800aad6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	785b      	ldrb	r3, [r3, #1]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f924 	bl	8008d10 <disk_status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <validate+0x4e>
			res = FR_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <validate+0x5a>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	e000      	b.n	800aae4 <validate+0x5c>
 800aae2:	2300      	movs	r3, #0
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	6013      	str	r3, [r2, #0]
	return res;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	4613      	mov	r3, r2
 800ab00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab06:	f107 0310 	add.w	r3, r7, #16
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff fcd4 	bl	800a4b8 <get_ldnumber>
 800ab10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da01      	bge.n	800ab1c <f_mount+0x28>
 800ab18:	230b      	movs	r3, #11
 800ab1a:	e02b      	b.n	800ab74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab1c:	4a17      	ldr	r2, [pc, #92]	; (800ab7c <f_mount+0x88>)
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab2c:	69b8      	ldr	r0, [r7, #24]
 800ab2e:	f7fe fbd5 	bl	80092dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	2200      	movs	r2, #0
 800ab36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d002      	beq.n	800ab44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	490d      	ldr	r1, [pc, #52]	; (800ab7c <f_mount+0x88>)
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <f_mount+0x66>
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d001      	beq.n	800ab5e <f_mount+0x6a>
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e00a      	b.n	800ab74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab5e:	f107 010c 	add.w	r1, r7, #12
 800ab62:	f107 0308 	add.w	r3, r7, #8
 800ab66:	2200      	movs	r2, #0
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff fd3f 	bl	800a5ec <find_volume>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20004a5c 	.word	0x20004a5c

0800ab80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b09a      	sub	sp, #104	; 0x68
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <f_open+0x18>
 800ab94:	2309      	movs	r3, #9
 800ab96:	e1ad      	b.n	800aef4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800aba0:	79fa      	ldrb	r2, [r7, #7]
 800aba2:	f107 0114 	add.w	r1, r7, #20
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff fd1e 	bl	800a5ec <find_volume>
 800abb0:	4603      	mov	r3, r0
 800abb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800abb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f040 8191 	bne.w	800aee2 <f_open+0x362>
		dj.obj.fs = fs;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	f107 0318 	add.w	r3, r7, #24
 800abca:	4611      	mov	r1, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fbe3 	bl	800a398 <follow_path>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800abd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11a      	bne.n	800ac16 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800abe0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800abe4:	b25b      	sxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	da03      	bge.n	800abf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800abea:	2306      	movs	r3, #6
 800abec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800abf0:	e011      	b.n	800ac16 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abf2:	79fb      	ldrb	r3, [r7, #7]
 800abf4:	f023 0301 	bic.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	bf14      	ite	ne
 800abfc:	2301      	movne	r3, #1
 800abfe:	2300      	moveq	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	461a      	mov	r2, r3
 800ac04:	f107 0318 	add.w	r3, r7, #24
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe fa1e 	bl	800904c <chk_lock>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	f003 031c 	and.w	r3, r3, #28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d07f      	beq.n	800ad20 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d017      	beq.n	800ac58 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac2c:	2b04      	cmp	r3, #4
 800ac2e:	d10e      	bne.n	800ac4e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac30:	f7fe fa68 	bl	8009104 <enq_lock>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d006      	beq.n	800ac48 <f_open+0xc8>
 800ac3a:	f107 0318 	add.w	r3, r7, #24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff f9ac 	bl	8009f9c <dir_register>
 800ac44:	4603      	mov	r3, r0
 800ac46:	e000      	b.n	800ac4a <f_open+0xca>
 800ac48:	2312      	movs	r3, #18
 800ac4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	f043 0308 	orr.w	r3, r3, #8
 800ac54:	71fb      	strb	r3, [r7, #7]
 800ac56:	e010      	b.n	800ac7a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac58:	7fbb      	ldrb	r3, [r7, #30]
 800ac5a:	f003 0311 	and.w	r3, r3, #17
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d003      	beq.n	800ac6a <f_open+0xea>
					res = FR_DENIED;
 800ac62:	2307      	movs	r3, #7
 800ac64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ac68:	e007      	b.n	800ac7a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac6a:	79fb      	ldrb	r3, [r7, #7]
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d002      	beq.n	800ac7a <f_open+0xfa>
 800ac74:	2308      	movs	r3, #8
 800ac76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d168      	bne.n	800ad54 <f_open+0x1d4>
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d063      	beq.n	800ad54 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ac8c:	f7fd fdf0 	bl	8008870 <get_fattime>
 800ac90:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	330e      	adds	r3, #14
 800ac96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe f92d 	bl	8008ef8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	3316      	adds	r3, #22
 800aca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7fe f927 	bl	8008ef8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800acaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acac:	330b      	adds	r3, #11
 800acae:	2220      	movs	r2, #32
 800acb0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff f87e 	bl	8009dba <ld_clust>
 800acbe:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800acc4:	2200      	movs	r2, #0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff f896 	bl	8009df8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	331c      	adds	r3, #28
 800acd0:	2100      	movs	r1, #0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe f910 	bl	8008ef8 <st_dword>
					fs->wflag = 1;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	2201      	movs	r2, #1
 800acdc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800acde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d037      	beq.n	800ad54 <f_open+0x1d4>
						dw = fs->winsect;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800acea:	f107 0318 	add.w	r3, r7, #24
 800acee:	2200      	movs	r2, #0
 800acf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7fe fda9 	bl	800984a <remove_chain>
 800acf8:	4603      	mov	r3, r0
 800acfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800acfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d126      	bne.n	800ad54 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fb4e 	bl	80093ac <move_window>
 800ad10:	4603      	mov	r3, r0
 800ad12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad1a:	3a01      	subs	r2, #1
 800ad1c:	60da      	str	r2, [r3, #12]
 800ad1e:	e019      	b.n	800ad54 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d115      	bne.n	800ad54 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ad28:	7fbb      	ldrb	r3, [r7, #30]
 800ad2a:	f003 0310 	and.w	r3, r3, #16
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d003      	beq.n	800ad3a <f_open+0x1ba>
					res = FR_NO_FILE;
 800ad32:	2304      	movs	r3, #4
 800ad34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ad38:	e00c      	b.n	800ad54 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad3a:	79fb      	ldrb	r3, [r7, #7]
 800ad3c:	f003 0302 	and.w	r3, r3, #2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d007      	beq.n	800ad54 <f_open+0x1d4>
 800ad44:	7fbb      	ldrb	r3, [r7, #30]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <f_open+0x1d4>
						res = FR_DENIED;
 800ad4e:	2307      	movs	r3, #7
 800ad50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d128      	bne.n	800adae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad5c:	79fb      	ldrb	r3, [r7, #7]
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	f023 0301 	bic.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bf14      	ite	ne
 800ad86:	2301      	movne	r3, #1
 800ad88:	2300      	moveq	r3, #0
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f107 0318 	add.w	r3, r7, #24
 800ad92:	4611      	mov	r1, r2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fe f9d7 	bl	8009148 <inc_lock>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d102      	bne.n	800adae <f_open+0x22e>
 800ada8:	2302      	movs	r3, #2
 800adaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800adae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f040 8095 	bne.w	800aee2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fe fffb 	bl	8009dba <ld_clust>
 800adc4:	4602      	mov	r2, r0
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800adca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adcc:	331c      	adds	r3, #28
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe f854 	bl	8008e7c <ld_dword>
 800add4:	4602      	mov	r2, r0
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ade0:	697a      	ldr	r2, [r7, #20]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	88da      	ldrh	r2, [r3, #6]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	79fa      	ldrb	r2, [r7, #7]
 800adf2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	3330      	adds	r3, #48	; 0x30
 800ae0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae0e:	2100      	movs	r1, #0
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe f8be 	bl	8008f92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	f003 0320 	and.w	r3, r3, #32
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d060      	beq.n	800aee2 <f_open+0x362>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d05c      	beq.n	800aee2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	895b      	ldrh	r3, [r3, #10]
 800ae34:	025b      	lsls	r3, r3, #9
 800ae36:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae44:	e016      	b.n	800ae74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fb69 	bl	8009522 <get_fat>
 800ae50:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ae52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d802      	bhi.n	800ae5e <f_open+0x2de>
 800ae58:	2302      	movs	r3, #2
 800ae5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae64:	d102      	bne.n	800ae6c <f_open+0x2ec>
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae70:	1ad3      	subs	r3, r2, r3
 800ae72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d103      	bne.n	800ae84 <f_open+0x304>
 800ae7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d8e0      	bhi.n	800ae46 <f_open+0x2c6>
				}
				fp->clust = clst;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d127      	bne.n	800aee2 <f_open+0x362>
 800ae92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d022      	beq.n	800aee2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fe fb1f 	bl	80094e4 <clust2sect>
 800aea6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <f_open+0x336>
						res = FR_INT_ERR;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800aeb4:	e015      	b.n	800aee2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aeb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeb8:	0a5a      	lsrs	r2, r3, #9
 800aeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aebc:	441a      	add	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	7858      	ldrb	r0, [r3, #1]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6a1a      	ldr	r2, [r3, #32]
 800aed0:	2301      	movs	r3, #1
 800aed2:	f7fd ff5d 	bl	8008d90 <disk_read>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d002      	beq.n	800aee2 <f_open+0x362>
 800aedc:	2301      	movs	r3, #1
 800aede:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aee2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <f_open+0x370>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aef0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3768      	adds	r7, #104	; 0x68
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08e      	sub	sp, #56	; 0x38
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f107 0214 	add.w	r2, r7, #20
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fdb3 	bl	800aa88 <validate>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d107      	bne.n	800af40 <f_read+0x44>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	7d5b      	ldrb	r3, [r3, #21]
 800af34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800af38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <f_read+0x4a>
 800af40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af44:	e115      	b.n	800b172 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	7d1b      	ldrb	r3, [r3, #20]
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d101      	bne.n	800af56 <f_read+0x5a>
 800af52:	2307      	movs	r3, #7
 800af54:	e10d      	b.n	800b172 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	429a      	cmp	r2, r3
 800af68:	f240 80fe 	bls.w	800b168 <f_read+0x26c>
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800af70:	e0fa      	b.n	800b168 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 80c6 	bne.w	800b10c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	0a5b      	lsrs	r3, r3, #9
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	8952      	ldrh	r2, [r2, #10]
 800af8a:	3a01      	subs	r2, #1
 800af8c:	4013      	ands	r3, r2
 800af8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d12f      	bne.n	800aff6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	699b      	ldr	r3, [r3, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	633b      	str	r3, [r7, #48]	; 0x30
 800afa4:	e013      	b.n	800afce <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d007      	beq.n	800afbe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	4619      	mov	r1, r3
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f7fe fd45 	bl	8009a44 <clmt_clust>
 800afba:	6338      	str	r0, [r7, #48]	; 0x30
 800afbc:	e007      	b.n	800afce <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	4619      	mov	r1, r3
 800afc6:	4610      	mov	r0, r2
 800afc8:	f7fe faab 	bl	8009522 <get_fat>
 800afcc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d804      	bhi.n	800afde <f_read+0xe2>
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2202      	movs	r2, #2
 800afd8:	755a      	strb	r2, [r3, #21]
 800afda:	2302      	movs	r3, #2
 800afdc:	e0c9      	b.n	800b172 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afe4:	d104      	bne.n	800aff0 <f_read+0xf4>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2201      	movs	r2, #1
 800afea:	755a      	strb	r2, [r3, #21]
 800afec:	2301      	movs	r3, #1
 800afee:	e0c0      	b.n	800b172 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aff4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aff6:	697a      	ldr	r2, [r7, #20]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	4619      	mov	r1, r3
 800affe:	4610      	mov	r0, r2
 800b000:	f7fe fa70 	bl	80094e4 <clust2sect>
 800b004:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d104      	bne.n	800b016 <f_read+0x11a>
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2202      	movs	r2, #2
 800b010:	755a      	strb	r2, [r3, #21]
 800b012:	2302      	movs	r3, #2
 800b014:	e0ad      	b.n	800b172 <f_read+0x276>
			sect += csect;
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	4413      	add	r3, r2
 800b01c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	0a5b      	lsrs	r3, r3, #9
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d039      	beq.n	800b09e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b02a:	69fa      	ldr	r2, [r7, #28]
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	4413      	add	r3, r2
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	8952      	ldrh	r2, [r2, #10]
 800b034:	4293      	cmp	r3, r2
 800b036:	d905      	bls.n	800b044 <f_read+0x148>
					cc = fs->csize - csect;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	895b      	ldrh	r3, [r3, #10]
 800b03c:	461a      	mov	r2, r3
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	7858      	ldrb	r0, [r3, #1]
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b04e:	f7fd fe9f 	bl	8008d90 <disk_read>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d004      	beq.n	800b062 <f_read+0x166>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	755a      	strb	r2, [r3, #21]
 800b05e:	2301      	movs	r3, #1
 800b060:	e087      	b.n	800b172 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	7d1b      	ldrb	r3, [r3, #20]
 800b066:	b25b      	sxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	da14      	bge.n	800b096 <f_read+0x19a>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6a1a      	ldr	r2, [r3, #32]
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b076:	429a      	cmp	r2, r3
 800b078:	d90d      	bls.n	800b096 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a1a      	ldr	r2, [r3, #32]
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	025b      	lsls	r3, r3, #9
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	18d0      	adds	r0, r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3330      	adds	r3, #48	; 0x30
 800b08c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b090:	4619      	mov	r1, r3
 800b092:	f7fd ff5d 	bl	8008f50 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	025b      	lsls	r3, r3, #9
 800b09a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b09c:	e050      	b.n	800b140 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d02e      	beq.n	800b106 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	7d1b      	ldrb	r3, [r3, #20]
 800b0ac:	b25b      	sxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	da18      	bge.n	800b0e4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	7858      	ldrb	r0, [r3, #1]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6a1a      	ldr	r2, [r3, #32]
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	f7fd fe85 	bl	8008dd0 <disk_write>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d004      	beq.n	800b0d6 <f_read+0x1da>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	755a      	strb	r2, [r3, #21]
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e04d      	b.n	800b172 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	7d1b      	ldrb	r3, [r3, #20]
 800b0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	7858      	ldrb	r0, [r3, #1]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	f7fd fe4d 	bl	8008d90 <disk_read>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d004      	beq.n	800b106 <f_read+0x20a>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	755a      	strb	r2, [r3, #21]
 800b102:	2301      	movs	r3, #1
 800b104:	e035      	b.n	800b172 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b114:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b118:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b11a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d901      	bls.n	800b126 <f_read+0x22a>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b134:	4413      	add	r3, r2
 800b136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b138:	4619      	mov	r1, r3
 800b13a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b13c:	f7fd ff08 	bl	8008f50 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	4413      	add	r3, r2
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	699a      	ldr	r2, [r3, #24]
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	441a      	add	r2, r3
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	619a      	str	r2, [r3, #24]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	441a      	add	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	f47f af01 	bne.w	800af72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3738      	adds	r7, #56	; 0x38
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b17a:	b580      	push	{r7, lr}
 800b17c:	b08c      	sub	sp, #48	; 0x30
 800b17e:	af00      	add	r7, sp, #0
 800b180:	60f8      	str	r0, [r7, #12]
 800b182:	60b9      	str	r1, [r7, #8]
 800b184:	607a      	str	r2, [r7, #4]
 800b186:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2200      	movs	r2, #0
 800b190:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f107 0210 	add.w	r2, r7, #16
 800b198:	4611      	mov	r1, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff fc74 	bl	800aa88 <validate>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d107      	bne.n	800b1be <f_write+0x44>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	7d5b      	ldrb	r3, [r3, #21]
 800b1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b1b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d002      	beq.n	800b1c4 <f_write+0x4a>
 800b1be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b1c2:	e14b      	b.n	800b45c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	7d1b      	ldrb	r3, [r3, #20]
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <f_write+0x5a>
 800b1d0:	2307      	movs	r3, #7
 800b1d2:	e143      	b.n	800b45c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	699a      	ldr	r2, [r3, #24]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	441a      	add	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	f080 812d 	bcs.w	800b440 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	43db      	mvns	r3, r3
 800b1ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b1ee:	e127      	b.n	800b440 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 80e3 	bne.w	800b3c4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	699b      	ldr	r3, [r3, #24]
 800b202:	0a5b      	lsrs	r3, r3, #9
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	8952      	ldrh	r2, [r2, #10]
 800b208:	3a01      	subs	r2, #1
 800b20a:	4013      	ands	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d143      	bne.n	800b29c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10c      	bne.n	800b236 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b224:	2b00      	cmp	r3, #0
 800b226:	d11a      	bne.n	800b25e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2100      	movs	r1, #0
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7fe fb71 	bl	8009914 <create_chain>
 800b232:	62b8      	str	r0, [r7, #40]	; 0x28
 800b234:	e013      	b.n	800b25e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d007      	beq.n	800b24e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	4619      	mov	r1, r3
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7fe fbfd 	bl	8009a44 <clmt_clust>
 800b24a:	62b8      	str	r0, [r7, #40]	; 0x28
 800b24c:	e007      	b.n	800b25e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	4619      	mov	r1, r3
 800b256:	4610      	mov	r0, r2
 800b258:	f7fe fb5c 	bl	8009914 <create_chain>
 800b25c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80f2 	beq.w	800b44a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d104      	bne.n	800b276 <f_write+0xfc>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2202      	movs	r2, #2
 800b270:	755a      	strb	r2, [r3, #21]
 800b272:	2302      	movs	r3, #2
 800b274:	e0f2      	b.n	800b45c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b27c:	d104      	bne.n	800b288 <f_write+0x10e>
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2201      	movs	r2, #1
 800b282:	755a      	strb	r2, [r3, #21]
 800b284:	2301      	movs	r3, #1
 800b286:	e0e9      	b.n	800b45c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b28c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d102      	bne.n	800b29c <f_write+0x122>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b29a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	7d1b      	ldrb	r3, [r3, #20]
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	da18      	bge.n	800b2d8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	7858      	ldrb	r0, [r3, #1]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a1a      	ldr	r2, [r3, #32]
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	f7fd fd8b 	bl	8008dd0 <disk_write>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <f_write+0x150>
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	755a      	strb	r2, [r3, #21]
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e0c8      	b.n	800b45c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	7d1b      	ldrb	r3, [r3, #20]
 800b2ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f7fe f8ff 	bl	80094e4 <clust2sect>
 800b2e6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d104      	bne.n	800b2f8 <f_write+0x17e>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2202      	movs	r2, #2
 800b2f2:	755a      	strb	r2, [r3, #21]
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	e0b1      	b.n	800b45c <f_write+0x2e2>
			sect += csect;
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	0a5b      	lsrs	r3, r3, #9
 800b304:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b306:	6a3b      	ldr	r3, [r7, #32]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d03c      	beq.n	800b386 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b30c:	69ba      	ldr	r2, [r7, #24]
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	4413      	add	r3, r2
 800b312:	693a      	ldr	r2, [r7, #16]
 800b314:	8952      	ldrh	r2, [r2, #10]
 800b316:	4293      	cmp	r3, r2
 800b318:	d905      	bls.n	800b326 <f_write+0x1ac>
					cc = fs->csize - csect;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	895b      	ldrh	r3, [r3, #10]
 800b31e:	461a      	mov	r2, r3
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	7858      	ldrb	r0, [r3, #1]
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	69f9      	ldr	r1, [r7, #28]
 800b330:	f7fd fd4e 	bl	8008dd0 <disk_write>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <f_write+0x1ca>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2201      	movs	r2, #1
 800b33e:	755a      	strb	r2, [r3, #21]
 800b340:	2301      	movs	r3, #1
 800b342:	e08b      	b.n	800b45c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6a1a      	ldr	r2, [r3, #32]
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	6a3a      	ldr	r2, [r7, #32]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d915      	bls.n	800b37e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a1a      	ldr	r2, [r3, #32]
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	025b      	lsls	r3, r3, #9
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	4413      	add	r3, r2
 800b366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b36a:	4619      	mov	r1, r3
 800b36c:	f7fd fdf0 	bl	8008f50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	7d1b      	ldrb	r3, [r3, #20]
 800b374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	025b      	lsls	r3, r3, #9
 800b382:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b384:	e03f      	b.n	800b406 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d016      	beq.n	800b3be <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	699a      	ldr	r2, [r3, #24]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b398:	429a      	cmp	r2, r3
 800b39a:	d210      	bcs.n	800b3be <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	7858      	ldrb	r0, [r3, #1]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	697a      	ldr	r2, [r7, #20]
 800b3aa:	f7fd fcf1 	bl	8008d90 <disk_read>
 800b3ae:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	755a      	strb	r2, [r3, #21]
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e04e      	b.n	800b45c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	697a      	ldr	r2, [r7, #20]
 800b3c2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d901      	bls.n	800b3de <f_write+0x264>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ec:	4413      	add	r3, r2
 800b3ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3f0:	69f9      	ldr	r1, [r7, #28]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fd fdac 	bl	8008f50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	7d1b      	ldrb	r3, [r3, #20]
 800b3fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b400:	b2da      	uxtb	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b406:	69fa      	ldr	r2, [r7, #28]
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	4413      	add	r3, r2
 800b40c:	61fb      	str	r3, [r7, #28]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	699a      	ldr	r2, [r3, #24]
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	441a      	add	r2, r3
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	619a      	str	r2, [r3, #24]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	429a      	cmp	r2, r3
 800b424:	bf38      	it	cc
 800b426:	461a      	movcc	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	60da      	str	r2, [r3, #12]
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	441a      	add	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	f47f aed4 	bne.w	800b1f0 <f_write+0x76>
 800b448:	e000      	b.n	800b44c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b44a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	7d1b      	ldrb	r3, [r3, #20]
 800b450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b454:	b2da      	uxtb	r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3730      	adds	r7, #48	; 0x30
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f107 0208 	add.w	r2, r7, #8
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fb07 	bl	800aa88 <validate>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d168      	bne.n	800b556 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	7d1b      	ldrb	r3, [r3, #20]
 800b488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d062      	beq.n	800b556 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7d1b      	ldrb	r3, [r3, #20]
 800b494:	b25b      	sxtb	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	da15      	bge.n	800b4c6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	7858      	ldrb	r0, [r3, #1]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a1a      	ldr	r2, [r3, #32]
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	f7fd fc91 	bl	8008dd0 <disk_write>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <f_sync+0x54>
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e04f      	b.n	800b558 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	7d1b      	ldrb	r3, [r3, #20]
 800b4bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b4c6:	f7fd f9d3 	bl	8008870 <get_fattime>
 800b4ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fd ff69 	bl	80093ac <move_window>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d138      	bne.n	800b556 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	330b      	adds	r3, #11
 800b4ee:	781a      	ldrb	r2, [r3, #0]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	330b      	adds	r3, #11
 800b4f4:	f042 0220 	orr.w	r2, r2, #32
 800b4f8:	b2d2      	uxtb	r2, r2
 800b4fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6818      	ldr	r0, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	461a      	mov	r2, r3
 800b506:	68f9      	ldr	r1, [r7, #12]
 800b508:	f7fe fc76 	bl	8009df8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f103 021c 	add.w	r2, r3, #28
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f7fd fced 	bl	8008ef8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3316      	adds	r3, #22
 800b522:	6939      	ldr	r1, [r7, #16]
 800b524:	4618      	mov	r0, r3
 800b526:	f7fd fce7 	bl	8008ef8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3312      	adds	r3, #18
 800b52e:	2100      	movs	r1, #0
 800b530:	4618      	mov	r0, r3
 800b532:	f7fd fcc6 	bl	8008ec2 <st_word>
					fs->wflag = 1;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	2201      	movs	r2, #1
 800b53a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd ff62 	bl	8009408 <sync_fs>
 800b544:	4603      	mov	r3, r0
 800b546:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	7d1b      	ldrb	r3, [r3, #20]
 800b54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b550:	b2da      	uxtb	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b556:	7dfb      	ldrb	r3, [r7, #23]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff ff7b 	bl	800b464 <f_sync>
 800b56e:	4603      	mov	r3, r0
 800b570:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d118      	bne.n	800b5aa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f107 0208 	add.w	r2, r7, #8
 800b57e:	4611      	mov	r1, r2
 800b580:	4618      	mov	r0, r3
 800b582:	f7ff fa81 	bl	800aa88 <validate>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10c      	bne.n	800b5aa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	691b      	ldr	r3, [r3, #16]
 800b594:	4618      	mov	r0, r3
 800b596:	f7fd fe65 	bl	8009264 <dec_lock>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b59e:	7bfb      	ldrb	r3, [r7, #15]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d102      	bne.n	800b5aa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b093      	sub	sp, #76	; 0x4c
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b5bc:	f107 010c 	add.w	r1, r7, #12
 800b5c0:	1d3b      	adds	r3, r7, #4
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff f811 	bl	800a5ec <find_volume>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b5d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d131      	bne.n	800b63c <f_chdir+0x88>
		dj.obj.fs = fs;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	f107 0310 	add.w	r3, r7, #16
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fe fed7 	bl	800a398 <follow_path>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800b5f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d11a      	bne.n	800b62e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b5f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b5fc:	b25b      	sxtb	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	da03      	bge.n	800b60a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	615a      	str	r2, [r3, #20]
 800b608:	e011      	b.n	800b62e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800b60a:	7dbb      	ldrb	r3, [r7, #22]
 800b60c:	f003 0310 	and.w	r3, r3, #16
 800b610:	2b00      	cmp	r3, #0
 800b612:	d009      	beq.n	800b628 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b618:	68fc      	ldr	r4, [r7, #12]
 800b61a:	4611      	mov	r1, r2
 800b61c:	4618      	mov	r0, r3
 800b61e:	f7fe fbcc 	bl	8009dba <ld_clust>
 800b622:	4603      	mov	r3, r0
 800b624:	6163      	str	r3, [r4, #20]
 800b626:	e002      	b.n	800b62e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800b628:	2305      	movs	r3, #5
 800b62a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b62e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b632:	2b04      	cmp	r3, #4
 800b634:	d102      	bne.n	800b63c <f_chdir+0x88>
 800b636:	2305      	movs	r3, #5
 800b638:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800b63c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b640:	4618      	mov	r0, r3
 800b642:	374c      	adds	r7, #76	; 0x4c
 800b644:	46bd      	mov	sp, r7
 800b646:	bd90      	pop	{r4, r7, pc}

0800b648 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <f_opendir+0x14>
 800b658:	2309      	movs	r3, #9
 800b65a:	e064      	b.n	800b726 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b660:	f107 010c 	add.w	r1, r7, #12
 800b664:	463b      	mov	r3, r7
 800b666:	2200      	movs	r2, #0
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fe ffbf 	bl	800a5ec <find_volume>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b672:	7dfb      	ldrb	r3, [r7, #23]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d14f      	bne.n	800b718 <f_opendir+0xd0>
		obj->fs = fs;
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7fe fe88 	bl	800a398 <follow_path>
 800b688:	4603      	mov	r3, r0
 800b68a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d13d      	bne.n	800b70e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b698:	b25b      	sxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	db12      	blt.n	800b6c4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	799b      	ldrb	r3, [r3, #6]
 800b6a2:	f003 0310 	and.w	r3, r3, #16
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00a      	beq.n	800b6c0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a1b      	ldr	r3, [r3, #32]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	f7fe fb81 	bl	8009dba <ld_clust>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	609a      	str	r2, [r3, #8]
 800b6be:	e001      	b.n	800b6c4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b6c0:	2305      	movs	r3, #5
 800b6c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d121      	bne.n	800b70e <f_opendir+0xc6>
				obj->id = fs->id;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	88da      	ldrh	r2, [r3, #6]
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7fe f9e9 	bl	8009aac <dir_sdi>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d114      	bne.n	800b70e <f_opendir+0xc6>
					if (obj->sclust) {
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00d      	beq.n	800b708 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7fd fd2a 	bl	8009148 <inc_lock>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <f_opendir+0xc6>
 800b702:	2312      	movs	r3, #18
 800b704:	75fb      	strb	r3, [r7, #23]
 800b706:	e002      	b.n	800b70e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	2200      	movs	r2, #0
 800b70c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
 800b710:	2b04      	cmp	r3, #4
 800b712:	d101      	bne.n	800b718 <f_opendir+0xd0>
 800b714:	2305      	movs	r3, #5
 800b716:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <f_opendir+0xdc>
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b724:	7dfb      	ldrb	r3, [r7, #23]
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f107 0208 	add.w	r2, r7, #8
 800b73e:	4611      	mov	r1, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff f9a1 	bl	800aa88 <validate>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d126      	bne.n	800b79e <f_readdir+0x70>
		if (!fno) {
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b756:	2100      	movs	r1, #0
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7fe f9a7 	bl	8009aac <dir_sdi>
 800b75e:	4603      	mov	r3, r0
 800b760:	73fb      	strb	r3, [r7, #15]
 800b762:	e01c      	b.n	800b79e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b764:	2100      	movs	r1, #0
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7fe fb66 	bl	8009e38 <dir_read>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b770:	7bfb      	ldrb	r3, [r7, #15]
 800b772:	2b04      	cmp	r3, #4
 800b774:	d101      	bne.n	800b77a <f_readdir+0x4c>
 800b776:	2300      	movs	r3, #0
 800b778:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10e      	bne.n	800b79e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f7fe fc3c 	bl	800a000 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b788:	2100      	movs	r1, #0
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7fe fa09 	bl	8009ba2 <dir_next>
 800b790:	4603      	mov	r3, r0
 800b792:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	2b04      	cmp	r3, #4
 800b798:	d101      	bne.n	800b79e <f_readdir+0x70>
 800b79a:	2300      	movs	r3, #0
 800b79c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff ffba 	bl	800b72e <f_readdir>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d114      	bne.n	800b7ee <f_findnext+0x46>
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d011      	beq.n	800b7ee <f_findnext+0x46>
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	7a5b      	ldrb	r3, [r3, #9]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00d      	beq.n	800b7ee <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	f103 0109 	add.w	r1, r3, #9
 800b7dc:	2300      	movs	r3, #0
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f7fe fc94 	bl	800a10c <pattern_matching>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d100      	bne.n	800b7ec <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800b7ea:	e7e2      	b.n	800b7b2 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800b7ec:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff ff1a 	bl	800b648 <f_opendir>
 800b814:	4603      	mov	r3, r0
 800b816:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b818:	7dfb      	ldrb	r3, [r7, #23]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d105      	bne.n	800b82a <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7ff ffc1 	bl	800b7a8 <f_findnext>
 800b826:	4603      	mov	r3, r0
 800b828:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 800b82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b834:	b480      	push	{r7}
 800b836:	b087      	sub	sp, #28
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	4613      	mov	r3, r2
 800b840:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b842:	2301      	movs	r3, #1
 800b844:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b84a:	4b1f      	ldr	r3, [pc, #124]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b84c:	7a5b      	ldrb	r3, [r3, #9]
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d131      	bne.n	800b8b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b854:	4b1c      	ldr	r3, [pc, #112]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b856:	7a5b      	ldrb	r3, [r3, #9]
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b85e:	2100      	movs	r1, #0
 800b860:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b862:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b864:	7a5b      	ldrb	r3, [r3, #9]
 800b866:	b2db      	uxtb	r3, r3
 800b868:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	4413      	add	r3, r2
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b872:	4b15      	ldr	r3, [pc, #84]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b874:	7a5b      	ldrb	r3, [r3, #9]
 800b876:	b2db      	uxtb	r3, r3
 800b878:	461a      	mov	r2, r3
 800b87a:	4b13      	ldr	r3, [pc, #76]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b87c:	4413      	add	r3, r2
 800b87e:	79fa      	ldrb	r2, [r7, #7]
 800b880:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b882:	4b11      	ldr	r3, [pc, #68]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b884:	7a5b      	ldrb	r3, [r3, #9]
 800b886:	b2db      	uxtb	r3, r3
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	b2d1      	uxtb	r1, r2
 800b88c:	4a0e      	ldr	r2, [pc, #56]	; (800b8c8 <FATFS_LinkDriverEx+0x94>)
 800b88e:	7251      	strb	r1, [r2, #9]
 800b890:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b892:	7dbb      	ldrb	r3, [r7, #22]
 800b894:	3330      	adds	r3, #48	; 0x30
 800b896:	b2da      	uxtb	r2, r3
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	223a      	movs	r2, #58	; 0x3a
 800b8a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	3302      	adds	r3, #2
 800b8a8:	222f      	movs	r2, #47	; 0x2f
 800b8aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	3303      	adds	r3, #3
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20004a84 	.word	0x20004a84

0800b8cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	6839      	ldr	r1, [r7, #0]
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff ffaa 	bl	800b834 <FATFS_LinkDriverEx>
 800b8e0:	4603      	mov	r3, r0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b8f6:	4836      	ldr	r0, [pc, #216]	; (800b9d0 <Preprocessing_Init+0xe4>)
 800b8f8:	f7f6 fcfe 	bl	80022f8 <Window_Init>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d000      	beq.n	800b904 <Preprocessing_Init+0x18>
  {
    while(1);
 800b902:	e7fe      	b.n	800b902 <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800b904:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b908:	4832      	ldr	r0, [pc, #200]	; (800b9d4 <Preprocessing_Init+0xe8>)
 800b90a:	f000 f993 	bl	800bc34 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800b90e:	4b32      	ldr	r3, [pc, #200]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b910:	4a30      	ldr	r2, [pc, #192]	; (800b9d4 <Preprocessing_Init+0xe8>)
 800b912:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800b914:	4b30      	ldr	r3, [pc, #192]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b916:	2201      	movs	r2, #1
 800b918:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800b91a:	4b2f      	ldr	r3, [pc, #188]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b91c:	4a2c      	ldr	r2, [pc, #176]	; (800b9d0 <Preprocessing_Init+0xe4>)
 800b91e:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800b920:	4b2d      	ldr	r3, [pc, #180]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b922:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b926:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800b928:	4b2b      	ldr	r3, [pc, #172]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b92a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b92e:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800b930:	4b29      	ldr	r3, [pc, #164]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b936:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800b938:	4b27      	ldr	r3, [pc, #156]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b93a:	4a28      	ldr	r2, [pc, #160]	; (800b9dc <Preprocessing_Init+0xf0>)
 800b93c:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800b93e:	4b28      	ldr	r3, [pc, #160]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b940:	4a28      	ldr	r2, [pc, #160]	; (800b9e4 <Preprocessing_Init+0xf8>)
 800b942:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800b944:	4b26      	ldr	r3, [pc, #152]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b946:	4a28      	ldr	r2, [pc, #160]	; (800b9e8 <Preprocessing_Init+0xfc>)
 800b948:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800b94a:	4b25      	ldr	r3, [pc, #148]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b94c:	4a27      	ldr	r2, [pc, #156]	; (800b9ec <Preprocessing_Init+0x100>)
 800b94e:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800b950:	4b23      	ldr	r3, [pc, #140]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b952:	2280      	movs	r2, #128	; 0x80
 800b954:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800b956:	4b22      	ldr	r3, [pc, #136]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b95c:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800b95e:	4b20      	ldr	r3, [pc, #128]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b960:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b964:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800b966:	4b1e      	ldr	r3, [pc, #120]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800b96e:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	ee07 3a90 	vmov	s15, r3
 800b976:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800b97a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b97e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b986:	4b16      	ldr	r3, [pc, #88]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b988:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800b98c:	4b14      	ldr	r3, [pc, #80]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800b994:	4b12      	ldr	r3, [pc, #72]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b996:	2201      	movs	r2, #1
 800b998:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800b99a:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b99c:	2201      	movs	r2, #1
 800b99e:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800b9a0:	480f      	ldr	r0, [pc, #60]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b9a2:	f7f6 f9ce 	bl	8001d42 <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800b9a6:	4b12      	ldr	r3, [pc, #72]	; (800b9f0 <Preprocessing_Init+0x104>)
 800b9a8:	4a0b      	ldr	r2, [pc, #44]	; (800b9d8 <Preprocessing_Init+0xec>)
 800b9aa:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800b9ac:	4b10      	ldr	r3, [pc, #64]	; (800b9f0 <Preprocessing_Init+0x104>)
 800b9ae:	4a0c      	ldr	r2, [pc, #48]	; (800b9e0 <Preprocessing_Init+0xf4>)
 800b9b0:	605a      	str	r2, [r3, #4]

  S_LogMelSpectr.MelSpectrogramConf = &S_MelSpectr;
 800b9b2:	4b10      	ldr	r3, [pc, #64]	; (800b9f4 <Preprocessing_Init+0x108>)
 800b9b4:	4a0e      	ldr	r2, [pc, #56]	; (800b9f0 <Preprocessing_Init+0x104>)
 800b9b6:	601a      	str	r2, [r3, #0]
  S_LogMelSpectr.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800b9b8:	4b0e      	ldr	r3, [pc, #56]	; (800b9f4 <Preprocessing_Init+0x108>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	711a      	strb	r2, [r3, #4]
  S_LogMelSpectr.Ref = 1;
 800b9be:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <Preprocessing_Init+0x108>)
 800b9c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b9c4:	609a      	str	r2, [r3, #8]
  S_LogMelSpectr.TopdB = 80;
 800b9c6:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <Preprocessing_Init+0x108>)
 800b9c8:	4a0b      	ldr	r2, [pc, #44]	; (800b9f8 <Preprocessing_Init+0x10c>)
 800b9ca:	60da      	str	r2, [r3, #12]

}
 800b9cc:	bf00      	nop
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	20005d0c 	.word	0x20005d0c
 800b9d4:	20004a90 	.word	0x20004a90
 800b9d8:	20004ad8 	.word	0x20004ad8
 800b9dc:	20006d0c 	.word	0x20006d0c
 800b9e0:	20004aa8 	.word	0x20004aa8
 800b9e4:	20008d0c 	.word	0x20008d0c
 800b9e8:	20008f0c 	.word	0x20008f0c
 800b9ec:	20007d0c 	.word	0x20007d0c
 800b9f0:	20004af4 	.word	0x20004af4
 800b9f4:	20004afc 	.word	0x20004afc
 800b9f8:	42a00000 	.word	0x42a00000

0800b9fc <AudioPreprocessing_RunMethod4>:
  }
}

//Method 4: Mel scale spectrogram without normalized input and with db scale output
void AudioPreprocessing_RunMethod4(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
	uint32_t num_frames;
	//zero pads at the end of the audio buffer
	if (END_ZERO_PADDING)
	{
	  memset(&pInSignal[signal_len], 0, FRAME_LEN);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ba14:	2100      	movs	r1, #0
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 f9de 	bl	800cdd8 <memset>
	  num_frames = 1 + (signal_len) / HOP_LEN;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	0a1b      	lsrs	r3, r3, #8
 800ba20:	3301      	adds	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
	else
	{
	  num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
	}

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800ba24:	2300      	movs	r3, #0
 800ba26:	61fb      	str	r3, [r7, #28]
 800ba28:	e029      	b.n	800ba7e <AudioPreprocessing_RunMethod4+0x82>
  {
    buf_to_float(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	025b      	lsls	r3, r3, #9
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	4413      	add	r3, r2
 800ba32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ba36:	4916      	ldr	r1, [pc, #88]	; (800ba90 <AudioPreprocessing_RunMethod4+0x94>)
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7f6 f808 	bl	8001a4e <buf_to_float>
    LogMelSpectrogramColumn(&S_LogMelSpectr, pInFrame, pOutColBuffer);
 800ba3e:	4a15      	ldr	r2, [pc, #84]	; (800ba94 <AudioPreprocessing_RunMethod4+0x98>)
 800ba40:	4913      	ldr	r1, [pc, #76]	; (800ba90 <AudioPreprocessing_RunMethod4+0x94>)
 800ba42:	4815      	ldr	r0, [pc, #84]	; (800ba98 <AudioPreprocessing_RunMethod4+0x9c>)
 800ba44:	f7f6 f8b2 	bl	8001bac <LogMelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800ba48:	2300      	movs	r3, #0
 800ba4a:	61bb      	str	r3, [r7, #24]
 800ba4c:	e011      	b.n	800ba72 <AudioPreprocessing_RunMethod4+0x76>
    {
    	pOut[num_frames * frame_index + i] = pOutColBuffer[i];
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	69fa      	ldr	r2, [r7, #28]
 800ba52:	fb03 f202 	mul.w	r2, r3, r2
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	4413      	add	r3, r2
 800ba60:	490c      	ldr	r1, [pc, #48]	; (800ba94 <AudioPreprocessing_RunMethod4+0x98>)
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	0092      	lsls	r2, r2, #2
 800ba66:	440a      	add	r2, r1
 800ba68:	6812      	ldr	r2, [r2, #0]
 800ba6a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	61bb      	str	r3, [r7, #24]
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	2b7f      	cmp	r3, #127	; 0x7f
 800ba76:	d9ea      	bls.n	800ba4e <AudioPreprocessing_RunMethod4+0x52>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d3d1      	bcc.n	800ba2a <AudioPreprocessing_RunMethod4+0x2e>
    }
  }
}
 800ba86:	bf00      	nop
 800ba88:	bf00      	nop
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	20004b0c 	.word	0x20004b0c
 800ba94:	20005b0c 	.word	0x20005b0c
 800ba98:	20004afc 	.word	0x20004afc

0800ba9c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a08      	ldr	r2, [pc, #32]	; (800bac8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d103      	bne.n	800bab4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800baae:	2201      	movs	r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800bab2:	e002      	b.n	800baba <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800bab4:	4b06      	ldr	r3, [pc, #24]	; (800bad0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	bf00      	nop
 800babc:	370c      	adds	r7, #12
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
 800bac6:	bf00      	nop
 800bac8:	200000f8 	.word	0x200000f8
 800bacc:	200042dc 	.word	0x200042dc
 800bad0:	200042e4 	.word	0x200042e4

0800bad4 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a08      	ldr	r2, [pc, #32]	; (800bb00 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d103      	bne.n	800baec <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800bae4:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800bae6:	2201      	movs	r2, #1
 800bae8:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800baea:	e002      	b.n	800baf2 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800baec:	4b06      	ldr	r3, [pc, #24]	; (800bb08 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800baee:	2201      	movs	r2, #1
 800baf0:	601a      	str	r2, [r3, #0]
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	200000f8 	.word	0x200000f8
 800bb04:	200042e0 	.word	0x200042e0
 800bb08:	200042e8 	.word	0x200042e8

0800bb0c <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800bb10:	2200      	movs	r2, #0
 800bb12:	4906      	ldr	r1, [pc, #24]	; (800bb2c <SDInit+0x20>)
 800bb14:	4806      	ldr	r0, [pc, #24]	; (800bb30 <SDInit+0x24>)
 800bb16:	f7fe ffed 	bl	800aaf4 <f_mount>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <SDInit+0x18>
	      {
	          Error_Handler();
 800bb20:	f7f5 fb3e 	bl	80011a0 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	200045ec 	.word	0x200045ec
 800bb30:	200045f0 	.word	0x200045f0

0800bb34 <createFile>:

int createFile(char* file_name)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800bb3c:	220a      	movs	r2, #10
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	4807      	ldr	r0, [pc, #28]	; (800bb60 <createFile+0x2c>)
 800bb42:	f7ff f81d 	bl	800ab80 <f_open>
 800bb46:	4603      	mov	r3, r0
 800bb48:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <createFile+0x22>
	  {
		  return -1;
 800bb50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb54:	e000      	b.n	800bb58 <createFile+0x24>
	  }
	  return 0;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	20004824 	.word	0x20004824

0800bb64 <openFile>:
int openFile(char* file_name)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_OPEN_EXISTING | FA_READ);
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	6879      	ldr	r1, [r7, #4]
 800bb70:	4807      	ldr	r0, [pc, #28]	; (800bb90 <openFile+0x2c>)
 800bb72:	f7ff f805 	bl	800ab80 <f_open>
 800bb76:	4603      	mov	r3, r0
 800bb78:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <openFile+0x22>
	  {
		  return -1;
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb84:	e000      	b.n	800bb88 <openFile+0x24>
	  }
	  return 0;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	20004824 	.word	0x20004824

0800bb94 <writeToFile>:

int writeToFile(char* text, int size)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	f107 030c 	add.w	r3, r7, #12
 800bba4:	6879      	ldr	r1, [r7, #4]
 800bba6:	4804      	ldr	r0, [pc, #16]	; (800bbb8 <writeToFile+0x24>)
 800bba8:	f7ff fae7 	bl	800b17a <f_write>
	return byteswritten;
 800bbac:	68fb      	ldr	r3, [r7, #12]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20004824 	.word	0x20004824

0800bbbc <readFile>:
int readFile(char*buffer , int size)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
	uint32_t bytesread;
	int err;
	f_read(&SDFile, buffer, size, (void *)&bytesread);
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	f107 030c 	add.w	r3, r7, #12
 800bbcc:	6879      	ldr	r1, [r7, #4]
 800bbce:	4804      	ldr	r0, [pc, #16]	; (800bbe0 <readFile+0x24>)
 800bbd0:	f7ff f994 	bl	800aefc <f_read>
	return bytesread;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20004824 	.word	0x20004824

0800bbe4 <SDclose>:
int SDclose()
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800bbe8:	4802      	ldr	r0, [pc, #8]	; (800bbf4 <SDclose+0x10>)
 800bbea:	f7ff fcb9 	bl	800b560 <f_close>
	return 0;
 800bbee:	2300      	movs	r3, #0
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20004824 	.word	0x20004824

0800bbf8 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	4603      	mov	r3, r0
 800bc00:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800bc02:	88fb      	ldrh	r3, [r7, #6]
 800bc04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc08:	d10a      	bne.n	800bc20 <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800bc0a:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <HAL_GPIO_EXTI_Callback+0x38>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	bf0c      	ite	eq
 800bc12:	2301      	moveq	r3, #1
 800bc14:	2300      	movne	r3, #0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4b05      	ldr	r3, [pc, #20]	; (800bc30 <HAL_GPIO_EXTI_Callback+0x38>)
 800bc1c:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800bc1e:	e000      	b.n	800bc22 <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800bc20:	bf00      	nop
}
 800bc22:	bf00      	nop
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	200002d8 	.word	0x200002d8

0800bc34 <arm_rfft_fast_init_f32>:
 800bc34:	084b      	lsrs	r3, r1, #1
 800bc36:	2b80      	cmp	r3, #128	; 0x80
 800bc38:	b430      	push	{r4, r5}
 800bc3a:	8201      	strh	r1, [r0, #16]
 800bc3c:	8003      	strh	r3, [r0, #0]
 800bc3e:	d070      	beq.n	800bd22 <arm_rfft_fast_init_f32+0xee>
 800bc40:	d916      	bls.n	800bc70 <arm_rfft_fast_init_f32+0x3c>
 800bc42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc46:	d05f      	beq.n	800bd08 <arm_rfft_fast_init_f32+0xd4>
 800bc48:	d936      	bls.n	800bcb8 <arm_rfft_fast_init_f32+0x84>
 800bc4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc4e:	d026      	beq.n	800bc9e <arm_rfft_fast_init_f32+0x6a>
 800bc50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc54:	d112      	bne.n	800bc7c <arm_rfft_fast_init_f32+0x48>
 800bc56:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800bc5a:	4c38      	ldr	r4, [pc, #224]	; (800bd3c <arm_rfft_fast_init_f32+0x108>)
 800bc5c:	4938      	ldr	r1, [pc, #224]	; (800bd40 <arm_rfft_fast_init_f32+0x10c>)
 800bc5e:	2300      	movs	r3, #0
 800bc60:	4a38      	ldr	r2, [pc, #224]	; (800bd44 <arm_rfft_fast_init_f32+0x110>)
 800bc62:	8185      	strh	r5, [r0, #12]
 800bc64:	6084      	str	r4, [r0, #8]
 800bc66:	6041      	str	r1, [r0, #4]
 800bc68:	6142      	str	r2, [r0, #20]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	bc30      	pop	{r4, r5}
 800bc6e:	4770      	bx	lr
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	d031      	beq.n	800bcd8 <arm_rfft_fast_init_f32+0xa4>
 800bc74:	2b40      	cmp	r3, #64	; 0x40
 800bc76:	d006      	beq.n	800bc86 <arm_rfft_fast_init_f32+0x52>
 800bc78:	2b10      	cmp	r3, #16
 800bc7a:	d039      	beq.n	800bcf0 <arm_rfft_fast_init_f32+0xbc>
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc80:	bc30      	pop	{r4, r5}
 800bc82:	4618      	mov	r0, r3
 800bc84:	4770      	bx	lr
 800bc86:	2538      	movs	r5, #56	; 0x38
 800bc88:	4c2f      	ldr	r4, [pc, #188]	; (800bd48 <arm_rfft_fast_init_f32+0x114>)
 800bc8a:	4930      	ldr	r1, [pc, #192]	; (800bd4c <arm_rfft_fast_init_f32+0x118>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4a30      	ldr	r2, [pc, #192]	; (800bd50 <arm_rfft_fast_init_f32+0x11c>)
 800bc90:	8185      	strh	r5, [r0, #12]
 800bc92:	6084      	str	r4, [r0, #8]
 800bc94:	6041      	str	r1, [r0, #4]
 800bc96:	6142      	str	r2, [r0, #20]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	bc30      	pop	{r4, r5}
 800bc9c:	4770      	bx	lr
 800bc9e:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800bca2:	4c2c      	ldr	r4, [pc, #176]	; (800bd54 <arm_rfft_fast_init_f32+0x120>)
 800bca4:	492c      	ldr	r1, [pc, #176]	; (800bd58 <arm_rfft_fast_init_f32+0x124>)
 800bca6:	2300      	movs	r3, #0
 800bca8:	4a2c      	ldr	r2, [pc, #176]	; (800bd5c <arm_rfft_fast_init_f32+0x128>)
 800bcaa:	8185      	strh	r5, [r0, #12]
 800bcac:	6084      	str	r4, [r0, #8]
 800bcae:	6041      	str	r1, [r0, #4]
 800bcb0:	6142      	str	r2, [r0, #20]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	bc30      	pop	{r4, r5}
 800bcb6:	4770      	bx	lr
 800bcb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcbc:	d1de      	bne.n	800bc7c <arm_rfft_fast_init_f32+0x48>
 800bcbe:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800bcc2:	4c27      	ldr	r4, [pc, #156]	; (800bd60 <arm_rfft_fast_init_f32+0x12c>)
 800bcc4:	4927      	ldr	r1, [pc, #156]	; (800bd64 <arm_rfft_fast_init_f32+0x130>)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	4a27      	ldr	r2, [pc, #156]	; (800bd68 <arm_rfft_fast_init_f32+0x134>)
 800bcca:	8185      	strh	r5, [r0, #12]
 800bccc:	6084      	str	r4, [r0, #8]
 800bcce:	6041      	str	r1, [r0, #4]
 800bcd0:	6142      	str	r2, [r0, #20]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	bc30      	pop	{r4, r5}
 800bcd6:	4770      	bx	lr
 800bcd8:	2530      	movs	r5, #48	; 0x30
 800bcda:	4c24      	ldr	r4, [pc, #144]	; (800bd6c <arm_rfft_fast_init_f32+0x138>)
 800bcdc:	4924      	ldr	r1, [pc, #144]	; (800bd70 <arm_rfft_fast_init_f32+0x13c>)
 800bcde:	2300      	movs	r3, #0
 800bce0:	4a24      	ldr	r2, [pc, #144]	; (800bd74 <arm_rfft_fast_init_f32+0x140>)
 800bce2:	8185      	strh	r5, [r0, #12]
 800bce4:	6084      	str	r4, [r0, #8]
 800bce6:	6041      	str	r1, [r0, #4]
 800bce8:	6142      	str	r2, [r0, #20]
 800bcea:	4618      	mov	r0, r3
 800bcec:	bc30      	pop	{r4, r5}
 800bcee:	4770      	bx	lr
 800bcf0:	2514      	movs	r5, #20
 800bcf2:	4c21      	ldr	r4, [pc, #132]	; (800bd78 <arm_rfft_fast_init_f32+0x144>)
 800bcf4:	4921      	ldr	r1, [pc, #132]	; (800bd7c <arm_rfft_fast_init_f32+0x148>)
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	4a21      	ldr	r2, [pc, #132]	; (800bd80 <arm_rfft_fast_init_f32+0x14c>)
 800bcfa:	8185      	strh	r5, [r0, #12]
 800bcfc:	6084      	str	r4, [r0, #8]
 800bcfe:	6041      	str	r1, [r0, #4]
 800bd00:	6142      	str	r2, [r0, #20]
 800bd02:	4618      	mov	r0, r3
 800bd04:	bc30      	pop	{r4, r5}
 800bd06:	4770      	bx	lr
 800bd08:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800bd0c:	4c1d      	ldr	r4, [pc, #116]	; (800bd84 <arm_rfft_fast_init_f32+0x150>)
 800bd0e:	491e      	ldr	r1, [pc, #120]	; (800bd88 <arm_rfft_fast_init_f32+0x154>)
 800bd10:	2300      	movs	r3, #0
 800bd12:	4a1e      	ldr	r2, [pc, #120]	; (800bd8c <arm_rfft_fast_init_f32+0x158>)
 800bd14:	8185      	strh	r5, [r0, #12]
 800bd16:	6084      	str	r4, [r0, #8]
 800bd18:	6041      	str	r1, [r0, #4]
 800bd1a:	6142      	str	r2, [r0, #20]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	bc30      	pop	{r4, r5}
 800bd20:	4770      	bx	lr
 800bd22:	25d0      	movs	r5, #208	; 0xd0
 800bd24:	4c1a      	ldr	r4, [pc, #104]	; (800bd90 <arm_rfft_fast_init_f32+0x15c>)
 800bd26:	491b      	ldr	r1, [pc, #108]	; (800bd94 <arm_rfft_fast_init_f32+0x160>)
 800bd28:	2300      	movs	r3, #0
 800bd2a:	4a1b      	ldr	r2, [pc, #108]	; (800bd98 <arm_rfft_fast_init_f32+0x164>)
 800bd2c:	8185      	strh	r5, [r0, #12]
 800bd2e:	6084      	str	r4, [r0, #8]
 800bd30:	6041      	str	r1, [r0, #4]
 800bd32:	6142      	str	r2, [r0, #20]
 800bd34:	4618      	mov	r0, r3
 800bd36:	bc30      	pop	{r4, r5}
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	0801cca4 	.word	0x0801cca4
 800bd40:	0800de9c 	.word	0x0800de9c
 800bd44:	0801400c 	.word	0x0801400c
 800bd48:	08011f9c 	.word	0x08011f9c
 800bd4c:	0801ea64 	.word	0x0801ea64
 800bd50:	08020f54 	.word	0x08020f54
 800bd54:	0801a98c 	.word	0x0801a98c
 800bd58:	0801888c 	.word	0x0801888c
 800bd5c:	0801200c 	.word	0x0801200c
 800bd60:	08020be4 	.word	0x08020be4
 800bd64:	0801800c 	.word	0x0801800c
 800bd68:	0801ec64 	.word	0x0801ec64
 800bd6c:	0801b844 	.word	0x0801b844
 800bd70:	0801a88c 	.word	0x0801a88c
 800bd74:	08011e9c 	.word	0x08011e9c
 800bd78:	0801b79c 	.word	0x0801b79c
 800bd7c:	0801880c 	.word	0x0801880c
 800bd80:	0801b7c4 	.word	0x0801b7c4
 800bd84:	0801f464 	.word	0x0801f464
 800bd88:	0801bca4 	.word	0x0801bca4
 800bd8c:	0801f7e4 	.word	0x0801f7e4
 800bd90:	08021154 	.word	0x08021154
 800bd94:	0801b8a4 	.word	0x0801b8a4
 800bd98:	080207e4 	.word	0x080207e4

0800bd9c <arm_rfft_fast_f32>:
 800bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	8a05      	ldrh	r5, [r0, #16]
 800bda2:	4606      	mov	r6, r0
 800bda4:	4617      	mov	r7, r2
 800bda6:	460c      	mov	r4, r1
 800bda8:	086d      	lsrs	r5, r5, #1
 800bdaa:	8005      	strh	r5, [r0, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d15e      	bne.n	800be6e <arm_rfft_fast_f32+0xd2>
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f000 fbde 	bl	800c574 <arm_cfft_f32>
 800bdb8:	edd4 7a00 	vldr	s15, [r4]
 800bdbc:	ed94 7a01 	vldr	s14, [r4, #4]
 800bdc0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bdc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bdc8:	8832      	ldrh	r2, [r6, #0]
 800bdca:	ee37 7a07 	vadd.f32	s14, s14, s14
 800bdce:	6975      	ldr	r5, [r6, #20]
 800bdd0:	3a01      	subs	r2, #1
 800bdd2:	eeb0 3a46 	vmov.f32	s6, s12
 800bdd6:	3510      	adds	r5, #16
 800bdd8:	f107 0610 	add.w	r6, r7, #16
 800bddc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800bde0:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800bde4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bde8:	f104 0310 	add.w	r3, r4, #16
 800bdec:	3808      	subs	r0, #8
 800bdee:	ee26 7a86 	vmul.f32	s14, s13, s12
 800bdf2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bdf6:	ed87 7a00 	vstr	s14, [r7]
 800bdfa:	edc7 7a01 	vstr	s15, [r7, #4]
 800bdfe:	ed90 7a02 	vldr	s14, [r0, #8]
 800be02:	3a01      	subs	r2, #1
 800be04:	ed53 6a02 	vldr	s13, [r3, #-8]
 800be08:	f1a0 0008 	sub.w	r0, r0, #8
 800be0c:	ed15 6a02 	vldr	s12, [r5, #-8]
 800be10:	f103 0308 	add.w	r3, r3, #8
 800be14:	ee77 7a66 	vsub.f32	s15, s14, s13
 800be18:	edd0 3a05 	vldr	s7, [r0, #20]
 800be1c:	ed13 5a03 	vldr	s10, [r3, #-12]
 800be20:	ee77 4a26 	vadd.f32	s9, s14, s13
 800be24:	ed55 5a01 	vldr	s11, [r5, #-4]
 800be28:	f106 0608 	add.w	r6, r6, #8
 800be2c:	ee66 6a27 	vmul.f32	s13, s12, s15
 800be30:	f105 0508 	add.w	r5, r5, #8
 800be34:	ee33 4a85 	vadd.f32	s8, s7, s10
 800be38:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800be3c:	ee35 5a63 	vsub.f32	s10, s10, s7
 800be40:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800be44:	ee26 6a04 	vmul.f32	s12, s12, s8
 800be48:	ee77 7a05 	vadd.f32	s15, s14, s10
 800be4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800be50:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800be54:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800be58:	ee67 7a83 	vmul.f32	s15, s15, s6
 800be5c:	ee27 7a03 	vmul.f32	s14, s14, s6
 800be60:	ed46 7a03 	vstr	s15, [r6, #-12]
 800be64:	ed06 7a04 	vstr	s14, [r6, #-16]
 800be68:	d1c9      	bne.n	800bdfe <arm_rfft_fast_f32+0x62>
 800be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6e:	edd1 7a00 	vldr	s15, [r1]
 800be72:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800be76:	edd1 6a01 	vldr	s13, [r1, #4]
 800be7a:	1e68      	subs	r0, r5, #1
 800be7c:	6975      	ldr	r5, [r6, #20]
 800be7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800be82:	00c1      	lsls	r1, r0, #3
 800be84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be88:	ee27 7a23 	vmul.f32	s14, s14, s7
 800be8c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800be90:	ed82 7a00 	vstr	s14, [r2]
 800be94:	edc2 7a01 	vstr	s15, [r2, #4]
 800be98:	b3e0      	cbz	r0, 800bf14 <arm_rfft_fast_f32+0x178>
 800be9a:	3908      	subs	r1, #8
 800be9c:	f104 0210 	add.w	r2, r4, #16
 800bea0:	3510      	adds	r5, #16
 800bea2:	440c      	add	r4, r1
 800bea4:	f107 0110 	add.w	r1, r7, #16
 800bea8:	ed94 7a02 	vldr	s14, [r4, #8]
 800beac:	3801      	subs	r0, #1
 800beae:	ed52 6a02 	vldr	s13, [r2, #-8]
 800beb2:	f1a4 0408 	sub.w	r4, r4, #8
 800beb6:	ed15 6a02 	vldr	s12, [r5, #-8]
 800beba:	f102 0208 	add.w	r2, r2, #8
 800bebe:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800bec2:	ed94 4a05 	vldr	s8, [r4, #20]
 800bec6:	ed12 5a03 	vldr	s10, [r2, #-12]
 800beca:	ee77 6a26 	vadd.f32	s13, s14, s13
 800bece:	ed55 5a01 	vldr	s11, [r5, #-4]
 800bed2:	f101 0108 	add.w	r1, r1, #8
 800bed6:	ee26 3a27 	vmul.f32	s6, s12, s15
 800beda:	f105 0508 	add.w	r5, r5, #8
 800bede:	ee74 4a05 	vadd.f32	s9, s8, s10
 800bee2:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800bee6:	ee35 5a44 	vsub.f32	s10, s10, s8
 800beea:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800beee:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bef2:	ee77 7a05 	vadd.f32	s15, s14, s10
 800bef6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800befa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800befe:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800bf02:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bf06:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bf0a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800bf0e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800bf12:	d1c9      	bne.n	800bea8 <arm_rfft_fast_f32+0x10c>
 800bf14:	461a      	mov	r2, r3
 800bf16:	4639      	mov	r1, r7
 800bf18:	4630      	mov	r0, r6
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf20:	f000 bb28 	b.w	800c574 <arm_cfft_f32>

0800bf24 <arm_cfft_radix8by2_f32>:
 800bf24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf28:	4607      	mov	r7, r0
 800bf2a:	4608      	mov	r0, r1
 800bf2c:	ed2d 8b06 	vpush	{d8-d10}
 800bf30:	f8b7 e000 	ldrh.w	lr, [r7]
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800bf3a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800bf3e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800bf42:	f000 80b0 	beq.w	800c0a6 <arm_cfft_radix8by2_f32+0x182>
 800bf46:	008b      	lsls	r3, r1, #2
 800bf48:	3210      	adds	r2, #16
 800bf4a:	f100 0610 	add.w	r6, r0, #16
 800bf4e:	f108 0510 	add.w	r5, r8, #16
 800bf52:	3310      	adds	r3, #16
 800bf54:	18c4      	adds	r4, r0, r3
 800bf56:	4443      	add	r3, r8
 800bf58:	ed55 6a04 	vldr	s13, [r5, #-16]
 800bf5c:	f1be 0e01 	subs.w	lr, lr, #1
 800bf60:	ed56 4a04 	vldr	s9, [r6, #-16]
 800bf64:	f104 0410 	add.w	r4, r4, #16
 800bf68:	ed15 7a03 	vldr	s14, [r5, #-12]
 800bf6c:	f106 0610 	add.w	r6, r6, #16
 800bf70:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800bf74:	ed55 7a02 	vldr	s15, [r5, #-8]
 800bf78:	ed55 2a01 	vldr	s5, [r5, #-4]
 800bf7c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800bf80:	ed53 0a04 	vldr	s1, [r3, #-16]
 800bf84:	f102 0210 	add.w	r2, r2, #16
 800bf88:	ed13 5a03 	vldr	s10, [r3, #-12]
 800bf8c:	f105 0510 	add.w	r5, r5, #16
 800bf90:	ed13 3a02 	vldr	s6, [r3, #-8]
 800bf94:	f103 0310 	add.w	r3, r3, #16
 800bf98:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800bf9c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800bfa0:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800bfa4:	ee33 8a83 	vadd.f32	s16, s7, s6
 800bfa8:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800bfac:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800bfb0:	ee34 0a06 	vadd.f32	s0, s8, s12
 800bfb4:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800bfb8:	ee76 aa87 	vadd.f32	s21, s13, s14
 800bfbc:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800bfc0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800bfc4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800bfc8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800bfcc:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800bfd0:	ee71 8a05 	vadd.f32	s17, s2, s10
 800bfd4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800bfd8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800bfdc:	ee72 9a22 	vadd.f32	s19, s4, s5
 800bfe0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800bfe4:	ee35 5a41 	vsub.f32	s10, s10, s2
 800bfe8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800bfec:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800bff0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800bff4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800bff8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800bffc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800c000:	ee72 7a62 	vsub.f32	s15, s4, s5
 800c004:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800c008:	ee73 2a63 	vsub.f32	s5, s6, s7
 800c00c:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800c010:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800c014:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800c018:	ee24 3a84 	vmul.f32	s6, s9, s8
 800c01c:	ee27 2a26 	vmul.f32	s4, s14, s13
 800c020:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800c024:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800c028:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c02c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c030:	ee65 6a26 	vmul.f32	s13, s10, s13
 800c034:	ee25 5a04 	vmul.f32	s10, s10, s8
 800c038:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c03c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c040:	ee33 4a02 	vadd.f32	s8, s6, s4
 800c044:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800c048:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800c04c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800c050:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800c054:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800c058:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800c05c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c060:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800c064:	ee27 4a87 	vmul.f32	s8, s15, s14
 800c068:	ee61 5a87 	vmul.f32	s11, s3, s14
 800c06c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c070:	ee22 5a87 	vmul.f32	s10, s5, s14
 800c074:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c078:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c07c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800c080:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c084:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c088:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c08c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c090:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800c094:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800c098:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800c09c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800c0a0:	f47f af5a 	bne.w	800bf58 <arm_cfft_radix8by2_f32+0x34>
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	b28c      	uxth	r4, r1
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	f000 fb78 	bl	800c7a0 <arm_radix8_butterfly_f32>
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	2302      	movs	r3, #2
 800c0b8:	ecbd 8b06 	vpop	{d8-d10}
 800c0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c0:	f000 bb6e 	b.w	800c7a0 <arm_radix8_butterfly_f32>

0800c0c4 <arm_cfft_radix8by4_f32>:
 800c0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c8:	ed2d 8b06 	vpush	{d8-d10}
 800c0cc:	8804      	ldrh	r4, [r0, #0]
 800c0ce:	b08f      	sub	sp, #60	; 0x3c
 800c0d0:	ed91 6a00 	vldr	s12, [r1]
 800c0d4:	460a      	mov	r2, r1
 800c0d6:	0864      	lsrs	r4, r4, #1
 800c0d8:	ed91 7a01 	vldr	s14, [r1, #4]
 800c0dc:	9101      	str	r1, [sp, #4]
 800c0de:	00a3      	lsls	r3, r4, #2
 800c0e0:	6841      	ldr	r1, [r0, #4]
 800c0e2:	0864      	lsrs	r4, r4, #1
 800c0e4:	900c      	str	r0, [sp, #48]	; 0x30
 800c0e6:	9205      	str	r2, [sp, #20]
 800c0e8:	f101 0610 	add.w	r6, r1, #16
 800c0ec:	4625      	mov	r5, r4
 800c0ee:	940b      	str	r4, [sp, #44]	; 0x2c
 800c0f0:	f101 0408 	add.w	r4, r1, #8
 800c0f4:	9602      	str	r6, [sp, #8]
 800c0f6:	9407      	str	r4, [sp, #28]
 800c0f8:	18d4      	adds	r4, r2, r3
 800c0fa:	1eaa      	subs	r2, r5, #2
 800c0fc:	f101 0518 	add.w	r5, r1, #24
 800c100:	18e0      	adds	r0, r4, r3
 800c102:	edd4 4a00 	vldr	s9, [r4]
 800c106:	ed94 4a01 	vldr	s8, [r4, #4]
 800c10a:	46a6      	mov	lr, r4
 800c10c:	edd0 6a00 	vldr	s13, [r0]
 800c110:	18c7      	adds	r7, r0, r3
 800c112:	edd0 7a01 	vldr	s15, [r0, #4]
 800c116:	46a0      	mov	r8, r4
 800c118:	ee76 5a26 	vadd.f32	s11, s12, s13
 800c11c:	ed97 5a00 	vldr	s10, [r7]
 800c120:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c124:	4604      	mov	r4, r0
 800c126:	9506      	str	r5, [sp, #24]
 800c128:	4605      	mov	r5, r0
 800c12a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800c12e:	900a      	str	r0, [sp, #40]	; 0x28
 800c130:	9801      	ldr	r0, [sp, #4]
 800c132:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c13a:	ed97 3a01 	vldr	s6, [r7, #4]
 800c13e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800c142:	46bc      	mov	ip, r7
 800c144:	ee76 3a84 	vadd.f32	s7, s13, s8
 800c148:	9704      	str	r7, [sp, #16]
 800c14a:	ee36 7a44 	vsub.f32	s14, s12, s8
 800c14e:	f8cd e00c 	str.w	lr, [sp, #12]
 800c152:	ee12 9a90 	vmov	r9, s5
 800c156:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800c15a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c15e:	1f3e      	subs	r6, r7, #4
 800c160:	f840 9b08 	str.w	r9, [r0], #8
 800c164:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800c168:	edde 2a01 	vldr	s5, [lr, #4]
 800c16c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c170:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c174:	eddc 4a01 	vldr	s9, [ip, #4]
 800c178:	ee36 6a22 	vadd.f32	s12, s12, s5
 800c17c:	9001      	str	r0, [sp, #4]
 800c17e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c182:	9805      	ldr	r0, [sp, #20]
 800c184:	ee13 9a90 	vmov	r9, s7
 800c188:	ee37 7a43 	vsub.f32	s14, s14, s6
 800c18c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c190:	f1ae 0704 	sub.w	r7, lr, #4
 800c194:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c198:	ee76 6a83 	vadd.f32	s13, s13, s6
 800c19c:	ed80 6a01 	vstr	s12, [r0, #4]
 800c1a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c1a4:	f848 9b08 	str.w	r9, [r8], #8
 800c1a8:	edce 4a01 	vstr	s9, [lr, #4]
 800c1ac:	ee15 ea90 	vmov	lr, s11
 800c1b0:	f844 eb08 	str.w	lr, [r4], #8
 800c1b4:	ee16 ea90 	vmov	lr, s13
 800c1b8:	9408      	str	r4, [sp, #32]
 800c1ba:	462c      	mov	r4, r5
 800c1bc:	ed85 7a01 	vstr	s14, [r5, #4]
 800c1c0:	9d04      	ldr	r5, [sp, #16]
 800c1c2:	f84c eb08 	str.w	lr, [ip], #8
 800c1c6:	edc5 7a01 	vstr	s15, [r5, #4]
 800c1ca:	0855      	lsrs	r5, r2, #1
 800c1cc:	9509      	str	r5, [sp, #36]	; 0x24
 800c1ce:	f000 8130 	beq.w	800c432 <arm_cfft_radix8by4_f32+0x36e>
 800c1d2:	9805      	ldr	r0, [sp, #20]
 800c1d4:	3b08      	subs	r3, #8
 800c1d6:	46ab      	mov	fp, r5
 800c1d8:	f1a4 020c 	sub.w	r2, r4, #12
 800c1dc:	f100 0510 	add.w	r5, r0, #16
 800c1e0:	f101 0920 	add.w	r9, r1, #32
 800c1e4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800c1e8:	f8dd a008 	ldr.w	sl, [sp, #8]
 800c1ec:	4433      	add	r3, r6
 800c1ee:	3410      	adds	r4, #16
 800c1f0:	4660      	mov	r0, ip
 800c1f2:	4641      	mov	r1, r8
 800c1f4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800c1f8:	ed54 6a02 	vldr	s13, [r4, #-8]
 800c1fc:	f1bb 0b01 	subs.w	fp, fp, #1
 800c200:	ed55 5a02 	vldr	s11, [r5, #-8]
 800c204:	f10a 0a08 	add.w	sl, sl, #8
 800c208:	edd1 7a00 	vldr	s15, [r1]
 800c20c:	f105 0508 	add.w	r5, r5, #8
 800c210:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800c214:	edd0 2a00 	vldr	s5, [r0]
 800c218:	ed14 7a01 	vldr	s14, [r4, #-4]
 800c21c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800c220:	ed55 6a03 	vldr	s13, [r5, #-12]
 800c224:	f1a2 0208 	sub.w	r2, r2, #8
 800c228:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800c22c:	ed90 2a01 	vldr	s4, [r0, #4]
 800c230:	ee36 5a87 	vadd.f32	s10, s13, s14
 800c234:	ed91 6a01 	vldr	s12, [r1, #4]
 800c238:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c23c:	f109 0910 	add.w	r9, r9, #16
 800c240:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800c244:	f104 0408 	add.w	r4, r4, #8
 800c248:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800c24c:	f10e 0e18 	add.w	lr, lr, #24
 800c250:	ee37 3a67 	vsub.f32	s6, s14, s15
 800c254:	f1a3 0308 	sub.w	r3, r3, #8
 800c258:	ed45 6a04 	vstr	s13, [r5, #-16]
 800c25c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c260:	edd1 6a01 	vldr	s13, [r1, #4]
 800c264:	ee75 1a86 	vadd.f32	s3, s11, s12
 800c268:	edd0 4a01 	vldr	s9, [r0, #4]
 800c26c:	ee33 3a22 	vadd.f32	s6, s6, s5
 800c270:	ee75 6a26 	vadd.f32	s13, s10, s13
 800c274:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c278:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c27c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c280:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800c284:	ee35 5a42 	vsub.f32	s10, s10, s4
 800c288:	ed45 6a03 	vstr	s13, [r5, #-12]
 800c28c:	ee36 2a02 	vadd.f32	s4, s12, s4
 800c290:	edd6 7a00 	vldr	s15, [r6]
 800c294:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800c298:	ed97 1a00 	vldr	s2, [r7]
 800c29c:	ee77 2a62 	vsub.f32	s5, s14, s5
 800c2a0:	ed92 8a04 	vldr	s16, [r2, #16]
 800c2a4:	ee71 8a27 	vadd.f32	s17, s2, s15
 800c2a8:	ed93 aa04 	vldr	s20, [r3, #16]
 800c2ac:	ed16 7a01 	vldr	s14, [r6, #-4]
 800c2b0:	ee71 7a67 	vsub.f32	s15, s2, s15
 800c2b4:	ed57 0a01 	vldr	s1, [r7, #-4]
 800c2b8:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800c2bc:	ee38 6a88 	vadd.f32	s12, s17, s16
 800c2c0:	edd3 9a03 	vldr	s19, [r3, #12]
 800c2c4:	ee30 0a87 	vadd.f32	s0, s1, s14
 800c2c8:	ed92 9a03 	vldr	s18, [r2, #12]
 800c2cc:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800c2d0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800c2d4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800c2d8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800c2dc:	ee16 ca10 	vmov	ip, s12
 800c2e0:	ee30 6a49 	vsub.f32	s12, s0, s18
 800c2e4:	ee77 4a01 	vadd.f32	s9, s14, s2
 800c2e8:	f847 c908 	str.w	ip, [r7], #-8
 800c2ec:	ee34 4a29 	vadd.f32	s8, s8, s19
 800c2f0:	edd2 8a03 	vldr	s17, [r2, #12]
 800c2f4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800c2f8:	ed93 8a03 	vldr	s16, [r3, #12]
 800c2fc:	ee71 0a47 	vsub.f32	s1, s2, s14
 800c300:	ee30 0a28 	vadd.f32	s0, s0, s17
 800c304:	ee39 1a67 	vsub.f32	s2, s18, s15
 800c308:	ee36 6a69 	vsub.f32	s12, s12, s19
 800c30c:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c310:	ee75 5aca 	vsub.f32	s11, s11, s20
 800c314:	ed87 0a01 	vstr	s0, [r7, #4]
 800c318:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800c31c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800c320:	ee21 8a80 	vmul.f32	s16, s3, s0
 800c324:	ee23 7a26 	vmul.f32	s14, s6, s13
 800c328:	ee64 7a26 	vmul.f32	s15, s8, s13
 800c32c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c330:	ee24 4a00 	vmul.f32	s8, s8, s0
 800c334:	ee23 3a00 	vmul.f32	s6, s6, s0
 800c338:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800c33c:	ee24 0a80 	vmul.f32	s0, s9, s0
 800c340:	ee38 7a07 	vadd.f32	s14, s16, s14
 800c344:	ee76 6a84 	vadd.f32	s13, s13, s8
 800c348:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c34c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800c350:	ee17 ca10 	vmov	ip, s14
 800c354:	f841 cb08 	str.w	ip, [r1], #8
 800c358:	ed01 3a01 	vstr	s6, [r1, #-4]
 800c35c:	ed82 0a04 	vstr	s0, [r2, #16]
 800c360:	edc2 6a03 	vstr	s13, [r2, #12]
 800c364:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800c368:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800c36c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800c370:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800c374:	ee65 4a27 	vmul.f32	s9, s10, s15
 800c378:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800c37c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800c380:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c384:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c388:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c38c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c390:	ee34 6a24 	vadd.f32	s12, s8, s9
 800c394:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800c398:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c39c:	ee17 ca90 	vmov	ip, s15
 800c3a0:	ed04 6a04 	vstr	s12, [r4, #-16]
 800c3a4:	ed04 5a03 	vstr	s10, [r4, #-12]
 800c3a8:	f846 c908 	str.w	ip, [r6], #-8
 800c3ac:	edc6 6a01 	vstr	s13, [r6, #4]
 800c3b0:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800c3b4:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800c3b8:	ee62 5a27 	vmul.f32	s11, s4, s15
 800c3bc:	ee22 6a87 	vmul.f32	s12, s5, s14
 800c3c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 800c3c4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800c3c8:	ee61 6a07 	vmul.f32	s13, s2, s14
 800c3cc:	ee20 7a87 	vmul.f32	s14, s1, s14
 800c3d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c3d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 800c3d8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800c3dc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800c3e0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800c3e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3e8:	ee16 ca10 	vmov	ip, s12
 800c3ec:	f840 cb08 	str.w	ip, [r0], #8
 800c3f0:	ed40 2a01 	vstr	s5, [r0, #-4]
 800c3f4:	edc3 0a04 	vstr	s1, [r3, #16]
 800c3f8:	edc3 7a03 	vstr	s15, [r3, #12]
 800c3fc:	f47f aefc 	bne.w	800c1f8 <arm_cfft_radix8by4_f32+0x134>
 800c400:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c402:	9802      	ldr	r0, [sp, #8]
 800c404:	00cb      	lsls	r3, r1, #3
 800c406:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800c40a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c40e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c412:	4498      	add	r8, r3
 800c414:	449c      	add	ip, r3
 800c416:	9102      	str	r1, [sp, #8]
 800c418:	9901      	ldr	r1, [sp, #4]
 800c41a:	4419      	add	r1, r3
 800c41c:	9101      	str	r1, [sp, #4]
 800c41e:	9907      	ldr	r1, [sp, #28]
 800c420:	4419      	add	r1, r3
 800c422:	9107      	str	r1, [sp, #28]
 800c424:	9908      	ldr	r1, [sp, #32]
 800c426:	4419      	add	r1, r3
 800c428:	9b06      	ldr	r3, [sp, #24]
 800c42a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c42e:	9108      	str	r1, [sp, #32]
 800c430:	9306      	str	r3, [sp, #24]
 800c432:	9a01      	ldr	r2, [sp, #4]
 800c434:	2304      	movs	r3, #4
 800c436:	9e08      	ldr	r6, [sp, #32]
 800c438:	edd2 7a00 	vldr	s15, [r2]
 800c43c:	ed96 7a00 	vldr	s14, [r6]
 800c440:	edd8 2a00 	vldr	s5, [r8]
 800c444:	ee77 5a87 	vadd.f32	s11, s15, s14
 800c448:	ed9c 3a00 	vldr	s6, [ip]
 800c44c:	ed92 6a01 	vldr	s12, [r2, #4]
 800c450:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c454:	edd6 6a01 	vldr	s13, [r6, #4]
 800c458:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800c45c:	ed9c 2a01 	vldr	s4, [ip, #4]
 800c460:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c464:	edd8 7a01 	vldr	s15, [r8, #4]
 800c468:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c46c:	9d02      	ldr	r5, [sp, #8]
 800c46e:	ee34 6a83 	vadd.f32	s12, s9, s6
 800c472:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800c476:	ee37 4a27 	vadd.f32	s8, s14, s15
 800c47a:	9805      	ldr	r0, [sp, #20]
 800c47c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800c480:	4621      	mov	r1, r4
 800c482:	ed82 6a00 	vstr	s12, [r2]
 800c486:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800c48a:	edd8 3a01 	vldr	s7, [r8, #4]
 800c48e:	ee75 5a67 	vsub.f32	s11, s10, s15
 800c492:	eddc 1a01 	vldr	s3, [ip, #4]
 800c496:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c49a:	ee75 3a23 	vadd.f32	s7, s10, s7
 800c49e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800c4a2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800c4a6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800c4aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c4ae:	ee36 6a43 	vsub.f32	s12, s12, s6
 800c4b2:	ed82 5a01 	vstr	s10, [r2, #4]
 800c4b6:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800c4ba:	9a07      	ldr	r2, [sp, #28]
 800c4bc:	ee77 7a02 	vadd.f32	s15, s14, s4
 800c4c0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800c4c4:	edd2 2a00 	vldr	s5, [r2]
 800c4c8:	ed92 5a01 	vldr	s10, [r2, #4]
 800c4cc:	ee64 3a22 	vmul.f32	s7, s8, s5
 800c4d0:	ee24 4a05 	vmul.f32	s8, s8, s10
 800c4d4:	ee24 5a85 	vmul.f32	s10, s9, s10
 800c4d8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800c4dc:	ee33 5a85 	vadd.f32	s10, s7, s10
 800c4e0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800c4e4:	ed88 5a00 	vstr	s10, [r8]
 800c4e8:	edc8 4a01 	vstr	s9, [r8, #4]
 800c4ec:	edd5 4a01 	vldr	s9, [r5, #4]
 800c4f0:	edd5 6a00 	vldr	s13, [r5]
 800c4f4:	9d06      	ldr	r5, [sp, #24]
 800c4f6:	ee26 5a26 	vmul.f32	s10, s12, s13
 800c4fa:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c4fe:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800c502:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c506:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800c50a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c50e:	ed86 6a01 	vstr	s12, [r6, #4]
 800c512:	edc6 5a00 	vstr	s11, [r6]
 800c516:	edd5 5a01 	vldr	s11, [r5, #4]
 800c51a:	edd5 6a00 	vldr	s13, [r5]
 800c51e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c520:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800c524:	ee67 6a26 	vmul.f32	s13, s14, s13
 800c528:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c52c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c530:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c534:	ee36 7a07 	vadd.f32	s14, s12, s14
 800c538:	edcc 7a01 	vstr	s15, [ip, #4]
 800c53c:	ed8c 7a00 	vstr	s14, [ip]
 800c540:	6872      	ldr	r2, [r6, #4]
 800c542:	f000 f92d 	bl	800c7a0 <arm_radix8_butterfly_f32>
 800c546:	9803      	ldr	r0, [sp, #12]
 800c548:	4621      	mov	r1, r4
 800c54a:	6872      	ldr	r2, [r6, #4]
 800c54c:	2304      	movs	r3, #4
 800c54e:	f000 f927 	bl	800c7a0 <arm_radix8_butterfly_f32>
 800c552:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c554:	4621      	mov	r1, r4
 800c556:	6872      	ldr	r2, [r6, #4]
 800c558:	2304      	movs	r3, #4
 800c55a:	f000 f921 	bl	800c7a0 <arm_radix8_butterfly_f32>
 800c55e:	4621      	mov	r1, r4
 800c560:	6872      	ldr	r2, [r6, #4]
 800c562:	2304      	movs	r3, #4
 800c564:	9804      	ldr	r0, [sp, #16]
 800c566:	b00f      	add	sp, #60	; 0x3c
 800c568:	ecbd 8b06 	vpop	{d8-d10}
 800c56c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c570:	f000 b916 	b.w	800c7a0 <arm_radix8_butterfly_f32>

0800c574 <arm_cfft_f32>:
 800c574:	2a01      	cmp	r2, #1
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	4606      	mov	r6, r0
 800c57c:	4617      	mov	r7, r2
 800c57e:	460c      	mov	r4, r1
 800c580:	4698      	mov	r8, r3
 800c582:	8805      	ldrh	r5, [r0, #0]
 800c584:	d053      	beq.n	800c62e <arm_cfft_f32+0xba>
 800c586:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c58a:	d04b      	beq.n	800c624 <arm_cfft_f32+0xb0>
 800c58c:	d916      	bls.n	800c5bc <arm_cfft_f32+0x48>
 800c58e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c592:	d01a      	beq.n	800c5ca <arm_cfft_f32+0x56>
 800c594:	d95a      	bls.n	800c64c <arm_cfft_f32+0xd8>
 800c596:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c59a:	d043      	beq.n	800c624 <arm_cfft_f32+0xb0>
 800c59c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c5a0:	d105      	bne.n	800c5ae <arm_cfft_f32+0x3a>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	6872      	ldr	r2, [r6, #4]
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 f8f9 	bl	800c7a0 <arm_radix8_butterfly_f32>
 800c5ae:	f1b8 0f00 	cmp.w	r8, #0
 800c5b2:	d111      	bne.n	800c5d8 <arm_cfft_f32+0x64>
 800c5b4:	2f01      	cmp	r7, #1
 800c5b6:	d016      	beq.n	800c5e6 <arm_cfft_f32+0x72>
 800c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5bc:	2d20      	cmp	r5, #32
 800c5be:	d031      	beq.n	800c624 <arm_cfft_f32+0xb0>
 800c5c0:	d948      	bls.n	800c654 <arm_cfft_f32+0xe0>
 800c5c2:	2d40      	cmp	r5, #64	; 0x40
 800c5c4:	d0ed      	beq.n	800c5a2 <arm_cfft_f32+0x2e>
 800c5c6:	2d80      	cmp	r5, #128	; 0x80
 800c5c8:	d1f1      	bne.n	800c5ae <arm_cfft_f32+0x3a>
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f7ff fca9 	bl	800bf24 <arm_cfft_radix8by2_f32>
 800c5d2:	f1b8 0f00 	cmp.w	r8, #0
 800c5d6:	d0ed      	beq.n	800c5b4 <arm_cfft_f32+0x40>
 800c5d8:	68b2      	ldr	r2, [r6, #8]
 800c5da:	4620      	mov	r0, r4
 800c5dc:	89b1      	ldrh	r1, [r6, #12]
 800c5de:	f7f3 fe2b 	bl	8000238 <arm_bitreversal_32>
 800c5e2:	2f01      	cmp	r7, #1
 800c5e4:	d1e8      	bne.n	800c5b8 <arm_cfft_f32+0x44>
 800c5e6:	ee07 5a90 	vmov	s15, r5
 800c5ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c5f6:	2d00      	cmp	r5, #0
 800c5f8:	d0de      	beq.n	800c5b8 <arm_cfft_f32+0x44>
 800c5fa:	f104 0108 	add.w	r1, r4, #8
 800c5fe:	2300      	movs	r3, #0
 800c600:	ed11 7a02 	vldr	s14, [r1, #-8]
 800c604:	3301      	adds	r3, #1
 800c606:	ed51 7a01 	vldr	s15, [r1, #-4]
 800c60a:	3108      	adds	r1, #8
 800c60c:	429d      	cmp	r5, r3
 800c60e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c612:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c616:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c61a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c61e:	d1ef      	bne.n	800c600 <arm_cfft_f32+0x8c>
 800c620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c624:	4621      	mov	r1, r4
 800c626:	4630      	mov	r0, r6
 800c628:	f7ff fd4c 	bl	800c0c4 <arm_cfft_radix8by4_f32>
 800c62c:	e7bf      	b.n	800c5ae <arm_cfft_f32+0x3a>
 800c62e:	b1a5      	cbz	r5, 800c65a <arm_cfft_f32+0xe6>
 800c630:	f101 030c 	add.w	r3, r1, #12
 800c634:	2200      	movs	r2, #0
 800c636:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c63a:	3201      	adds	r2, #1
 800c63c:	3308      	adds	r3, #8
 800c63e:	eef1 7a67 	vneg.f32	s15, s15
 800c642:	4295      	cmp	r5, r2
 800c644:	ed43 7a04 	vstr	s15, [r3, #-16]
 800c648:	d1f5      	bne.n	800c636 <arm_cfft_f32+0xc2>
 800c64a:	e79c      	b.n	800c586 <arm_cfft_f32+0x12>
 800c64c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c650:	d0a7      	beq.n	800c5a2 <arm_cfft_f32+0x2e>
 800c652:	e7ac      	b.n	800c5ae <arm_cfft_f32+0x3a>
 800c654:	2d10      	cmp	r5, #16
 800c656:	d0b8      	beq.n	800c5ca <arm_cfft_f32+0x56>
 800c658:	e7a9      	b.n	800c5ae <arm_cfft_f32+0x3a>
 800c65a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c65e:	d896      	bhi.n	800c58e <arm_cfft_f32+0x1a>
 800c660:	e7ac      	b.n	800c5bc <arm_cfft_f32+0x48>
 800c662:	bf00      	nop

0800c664 <arm_cmplx_mag_squared_f32>:
 800c664:	b470      	push	{r4, r5, r6}
 800c666:	0896      	lsrs	r6, r2, #2
 800c668:	d03e      	beq.n	800c6e8 <arm_cmplx_mag_squared_f32+0x84>
 800c66a:	f100 0320 	add.w	r3, r0, #32
 800c66e:	f101 0410 	add.w	r4, r1, #16
 800c672:	4635      	mov	r5, r6
 800c674:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800c678:	3d01      	subs	r5, #1
 800c67a:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800c67e:	f104 0410 	add.w	r4, r4, #16
 800c682:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 800c686:	ee27 5a07 	vmul.f32	s10, s14, s14
 800c68a:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800c68e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c692:	ed13 7a04 	vldr	s14, [r3, #-16]
 800c696:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800c69a:	ed13 4a03 	vldr	s8, [r3, #-12]
 800c69e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800c6a2:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c6a6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c6aa:	ed53 4a01 	vldr	s9, [r3, #-4]
 800c6ae:	ee24 4a04 	vmul.f32	s8, s8, s8
 800c6b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c6b6:	f103 0320 	add.w	r3, r3, #32
 800c6ba:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800c6be:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c6c2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800c6c6:	ee37 7a04 	vadd.f32	s14, s14, s8
 800c6ca:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c6ce:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 800c6d2:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800c6d6:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 800c6da:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c6de:	d1c9      	bne.n	800c674 <arm_cmplx_mag_squared_f32+0x10>
 800c6e0:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800c6e4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800c6e8:	f012 0203 	ands.w	r2, r2, #3
 800c6ec:	d010      	beq.n	800c710 <arm_cmplx_mag_squared_f32+0xac>
 800c6ee:	3008      	adds	r0, #8
 800c6f0:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c6f4:	3a01      	subs	r2, #1
 800c6f6:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c6fa:	f100 0008 	add.w	r0, r0, #8
 800c6fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c702:	ee27 7a07 	vmul.f32	s14, s14, s14
 800c706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c70a:	ece1 7a01 	vstmia	r1!, {s15}
 800c70e:	d1ef      	bne.n	800c6f0 <arm_cmplx_mag_squared_f32+0x8c>
 800c710:	bc70      	pop	{r4, r5, r6}
 800c712:	4770      	bx	lr

0800c714 <arm_mult_f32>:
 800c714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c716:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c71a:	d033      	beq.n	800c784 <arm_mult_f32+0x70>
 800c71c:	f100 0610 	add.w	r6, r0, #16
 800c720:	f101 0510 	add.w	r5, r1, #16
 800c724:	f102 0410 	add.w	r4, r2, #16
 800c728:	4677      	mov	r7, lr
 800c72a:	ed16 7a04 	vldr	s14, [r6, #-16]
 800c72e:	3f01      	subs	r7, #1
 800c730:	ed15 6a04 	vldr	s12, [r5, #-16]
 800c734:	f106 0610 	add.w	r6, r6, #16
 800c738:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800c73c:	f105 0510 	add.w	r5, r5, #16
 800c740:	ee27 6a06 	vmul.f32	s12, s14, s12
 800c744:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800c748:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800c74c:	f104 0410 	add.w	r4, r4, #16
 800c750:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800c754:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800c758:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800c75c:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800c760:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c764:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800c768:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800c76c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c770:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800c774:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800c778:	d1d7      	bne.n	800c72a <arm_mult_f32+0x16>
 800c77a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c77e:	4420      	add	r0, r4
 800c780:	4421      	add	r1, r4
 800c782:	4422      	add	r2, r4
 800c784:	f013 0303 	ands.w	r3, r3, #3
 800c788:	d009      	beq.n	800c79e <arm_mult_f32+0x8a>
 800c78a:	ecf0 7a01 	vldmia	r0!, {s15}
 800c78e:	3b01      	subs	r3, #1
 800c790:	ecb1 7a01 	vldmia	r1!, {s14}
 800c794:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c798:	ece2 7a01 	vstmia	r2!, {s15}
 800c79c:	d1f5      	bne.n	800c78a <arm_mult_f32+0x76>
 800c79e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7a0 <arm_radix8_butterfly_f32>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	469e      	mov	lr, r3
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	468a      	mov	sl, r1
 800c7aa:	468b      	mov	fp, r1
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	ed2d 8b10 	vpush	{d8-d15}
 800c7b2:	469c      	mov	ip, r3
 800c7b4:	b09d      	sub	sp, #116	; 0x74
 800c7b6:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800cac4 <arm_radix8_butterfly_f32+0x324>
 800c7ba:	9019      	str	r0, [sp, #100]	; 0x64
 800c7bc:	921a      	str	r2, [sp, #104]	; 0x68
 800c7be:	931b      	str	r3, [sp, #108]	; 0x6c
 800c7c0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c7c4:	f04f 0800 	mov.w	r8, #0
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	9311      	str	r3, [sp, #68]	; 0x44
 800c7cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	0053      	lsls	r3, r2, #1
 800c7da:	18d5      	adds	r5, r2, r3
 800c7dc:	9301      	str	r3, [sp, #4]
 800c7de:	0113      	lsls	r3, r2, #4
 800c7e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c7e2:	194c      	adds	r4, r1, r5
 800c7e4:	eb02 0609 	add.w	r6, r2, r9
 800c7e8:	9302      	str	r3, [sp, #8]
 800c7ea:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	190a      	adds	r2, r1, r4
 800c7f2:	eb06 0709 	add.w	r7, r6, r9
 800c7f6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c7fa:	1888      	adds	r0, r1, r2
 800c7fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c800:	4401      	add	r1, r0
 800c802:	3204      	adds	r2, #4
 800c804:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c808:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c80c:	9b00      	ldr	r3, [sp, #0]
 800c80e:	3104      	adds	r1, #4
 800c810:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800c814:	44d8      	add	r8, fp
 800c816:	ed90 7a00 	vldr	s14, [r0]
 800c81a:	ed94 5a00 	vldr	s10, [r4]
 800c81e:	45c2      	cmp	sl, r8
 800c820:	edd7 3a00 	vldr	s7, [r7]
 800c824:	ed96 6a00 	vldr	s12, [r6]
 800c828:	ee37 1a85 	vadd.f32	s2, s15, s10
 800c82c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800c830:	ee73 4a87 	vadd.f32	s9, s7, s14
 800c834:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800c838:	edd5 7a00 	vldr	s15, [r5]
 800c83c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800c840:	ed11 7a01 	vldr	s14, [r1, #-4]
 800c844:	ee36 2a26 	vadd.f32	s4, s12, s13
 800c848:	ee37 4a87 	vadd.f32	s8, s15, s14
 800c84c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c850:	ee71 5a24 	vadd.f32	s11, s2, s9
 800c854:	ee32 6a04 	vadd.f32	s12, s4, s8
 800c858:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800c85c:	ee31 1a64 	vsub.f32	s2, s2, s9
 800c860:	ee75 4a86 	vadd.f32	s9, s11, s12
 800c864:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c868:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800c86c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800c870:	ee32 2a44 	vsub.f32	s4, s4, s8
 800c874:	ee67 7a89 	vmul.f32	s15, s15, s18
 800c878:	ed94 0a01 	vldr	s0, [r4, #4]
 800c87c:	edc4 5a00 	vstr	s11, [r4]
 800c880:	ee36 7a87 	vadd.f32	s14, s13, s14
 800c884:	edd6 5a01 	vldr	s11, [r6, #4]
 800c888:	edd5 2a01 	vldr	s5, [r5, #4]
 800c88c:	ee75 1a27 	vadd.f32	s3, s10, s15
 800c890:	ed92 4a00 	vldr	s8, [r2]
 800c894:	ee75 7a67 	vsub.f32	s15, s10, s15
 800c898:	edd1 4a00 	vldr	s9, [r1]
 800c89c:	ee27 7a09 	vmul.f32	s14, s14, s18
 800c8a0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800c8a4:	ed9c 6a00 	vldr	s12, [ip]
 800c8a8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800c8ac:	edd0 0a01 	vldr	s1, [r0, #4]
 800c8b0:	ed97 5a01 	vldr	s10, [r7, #4]
 800c8b4:	ee35 4a84 	vadd.f32	s8, s11, s8
 800c8b8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800c8bc:	ee73 5a26 	vadd.f32	s11, s6, s13
 800c8c0:	ee76 2a00 	vadd.f32	s5, s12, s0
 800c8c4:	ee73 6a66 	vsub.f32	s13, s6, s13
 800c8c8:	ee36 6a40 	vsub.f32	s12, s12, s0
 800c8cc:	ee35 0a20 	vadd.f32	s0, s10, s1
 800c8d0:	ee65 5a89 	vmul.f32	s11, s11, s18
 800c8d4:	ee35 5a60 	vsub.f32	s10, s10, s1
 800c8d8:	ee32 3a80 	vadd.f32	s6, s5, s0
 800c8dc:	ee74 0a24 	vadd.f32	s1, s8, s9
 800c8e0:	ee66 6a89 	vmul.f32	s13, s13, s18
 800c8e4:	ee74 4a64 	vsub.f32	s9, s8, s9
 800c8e8:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800c8ec:	ee75 2a25 	vadd.f32	s5, s10, s11
 800c8f0:	ee33 0a20 	vadd.f32	s0, s6, s1
 800c8f4:	ee75 5a65 	vsub.f32	s11, s10, s11
 800c8f8:	ee33 3a60 	vsub.f32	s6, s6, s1
 800c8fc:	ee36 5a26 	vadd.f32	s10, s12, s13
 800c900:	ed8c 0a00 	vstr	s0, [ip]
 800c904:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c908:	449c      	add	ip, r3
 800c90a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800c90e:	ed84 3a01 	vstr	s6, [r4, #4]
 800c912:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800c916:	441c      	add	r4, r3
 800c918:	ee71 3a24 	vadd.f32	s7, s2, s9
 800c91c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c920:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800c924:	edc7 3a00 	vstr	s7, [r7]
 800c928:	ee34 1a42 	vsub.f32	s2, s8, s4
 800c92c:	edc0 4a00 	vstr	s9, [r0]
 800c930:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800c934:	ee75 4a46 	vsub.f32	s9, s10, s12
 800c938:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c93c:	ed87 1a01 	vstr	s2, [r7, #4]
 800c940:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800c944:	441f      	add	r7, r3
 800c946:	ee32 4a04 	vadd.f32	s8, s4, s8
 800c94a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800c94e:	ee36 6a05 	vadd.f32	s12, s12, s10
 800c952:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c956:	ed80 4a01 	vstr	s8, [r0, #4]
 800c95a:	ed86 3a00 	vstr	s6, [r6]
 800c95e:	4418      	add	r0, r3
 800c960:	ed41 1a01 	vstr	s3, [r1, #-4]
 800c964:	ed42 3a01 	vstr	s7, [r2, #-4]
 800c968:	edc5 7a00 	vstr	s15, [r5]
 800c96c:	edc6 4a01 	vstr	s9, [r6, #4]
 800c970:	441e      	add	r6, r3
 800c972:	ed81 6a00 	vstr	s12, [r1]
 800c976:	4419      	add	r1, r3
 800c978:	edc2 5a00 	vstr	s11, [r2]
 800c97c:	441a      	add	r2, r3
 800c97e:	ed85 7a01 	vstr	s14, [r5, #4]
 800c982:	441d      	add	r5, r3
 800c984:	f63f af44 	bhi.w	800c810 <arm_radix8_butterfly_f32+0x70>
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c98c:	2b07      	cmp	r3, #7
 800c98e:	f240 81f4 	bls.w	800cd7a <arm_radix8_butterfly_f32+0x5da>
 800c992:	9901      	ldr	r1, [sp, #4]
 800c994:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800c998:	9d02      	ldr	r5, [sp, #8]
 800c99a:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800c99e:	3101      	adds	r1, #1
 800c9a0:	eb04 000e 	add.w	r0, r4, lr
 800c9a4:	00e4      	lsls	r4, r4, #3
 800c9a6:	3508      	adds	r5, #8
 800c9a8:	4419      	add	r1, r3
 800c9aa:	eb00 0c0e 	add.w	ip, r0, lr
 800c9ae:	9413      	str	r4, [sp, #76]	; 0x4c
 800c9b0:	00c0      	lsls	r0, r0, #3
 800c9b2:	185e      	adds	r6, r3, r1
 800c9b4:	4617      	mov	r7, r2
 800c9b6:	9218      	str	r2, [sp, #96]	; 0x60
 800c9b8:	f109 0908 	add.w	r9, r9, #8
 800c9bc:	199c      	adds	r4, r3, r6
 800c9be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c9c2:	9012      	str	r0, [sp, #72]	; 0x48
 800c9c4:	195d      	adds	r5, r3, r5
 800c9c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c9c8:	443a      	add	r2, r7
 800c9ca:	950c      	str	r5, [sp, #48]	; 0x30
 800c9cc:	4698      	mov	r8, r3
 800c9ce:	4420      	add	r0, r4
 800c9d0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800c9d2:	19d7      	adds	r7, r2, r7
 800c9d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c9d8:	4405      	add	r5, r0
 800c9da:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800c9de:	9710      	str	r7, [sp, #64]	; 0x40
 800c9e0:	eb0c 070e 	add.w	r7, ip, lr
 800c9e4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c9e8:	3404      	adds	r4, #4
 800c9ea:	3004      	adds	r0, #4
 800c9ec:	44c8      	add	r8, r9
 800c9ee:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800c9f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c9f4:	940a      	str	r4, [sp, #40]	; 0x28
 800c9f6:	9009      	str	r0, [sp, #36]	; 0x24
 800c9f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c9fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800c9fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ca02:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ca04:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800ca08:	eb07 080e 	add.w	r8, r7, lr
 800ca0c:	eb04 0900 	add.w	r9, r4, r0
 800ca10:	00f8      	lsls	r0, r7, #3
 800ca12:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800ca16:	3504      	adds	r5, #4
 800ca18:	4607      	mov	r7, r0
 800ca1a:	9017      	str	r0, [sp, #92]	; 0x5c
 800ca1c:	910b      	str	r1, [sp, #44]	; 0x2c
 800ca1e:	4618      	mov	r0, r3
 800ca20:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800ca24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ca26:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800ca2a:	18e3      	adds	r3, r4, r3
 800ca2c:	9508      	str	r5, [sp, #32]
 800ca2e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ca30:	910e      	str	r1, [sp, #56]	; 0x38
 800ca32:	4621      	mov	r1, r4
 800ca34:	eb04 0805 	add.w	r8, r4, r5
 800ca38:	9304      	str	r3, [sp, #16]
 800ca3a:	19e5      	adds	r5, r4, r7
 800ca3c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800ca40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ca42:	9316      	str	r3, [sp, #88]	; 0x58
 800ca44:	190b      	adds	r3, r1, r4
 800ca46:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ca48:	9505      	str	r5, [sp, #20]
 800ca4a:	9303      	str	r3, [sp, #12]
 800ca4c:	f100 0308 	add.w	r3, r0, #8
 800ca50:	9707      	str	r7, [sp, #28]
 800ca52:	4638      	mov	r0, r7
 800ca54:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca56:	2301      	movs	r3, #1
 800ca58:	9306      	str	r3, [sp, #24]
 800ca5a:	9b00      	ldr	r3, [sp, #0]
 800ca5c:	ed90 fa00 	vldr	s30, [r0]
 800ca60:	edd0 ba01 	vldr	s23, [r0, #4]
 800ca64:	9803      	ldr	r0, [sp, #12]
 800ca66:	9903      	ldr	r1, [sp, #12]
 800ca68:	ed90 ba01 	vldr	s22, [r0, #4]
 800ca6c:	9804      	ldr	r0, [sp, #16]
 800ca6e:	edd1 ea00 	vldr	s29, [r1]
 800ca72:	edd0 aa01 	vldr	s21, [r0, #4]
 800ca76:	9805      	ldr	r0, [sp, #20]
 800ca78:	9905      	ldr	r1, [sp, #20]
 800ca7a:	edd0 7a01 	vldr	s15, [r0, #4]
 800ca7e:	ed91 da00 	vldr	s26, [r1]
 800ca82:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ca84:	9c04      	ldr	r4, [sp, #16]
 800ca86:	edcd 7a01 	vstr	s15, [sp, #4]
 800ca8a:	edd8 7a01 	vldr	s15, [r8, #4]
 800ca8e:	9100      	str	r1, [sp, #0]
 800ca90:	edd2 fa00 	vldr	s31, [r2]
 800ca94:	ed94 ea00 	vldr	s28, [r4]
 800ca98:	ed92 ca01 	vldr	s24, [r2, #4]
 800ca9c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800caa0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800caa2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800caa4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800caa6:	edd9 da00 	vldr	s27, [r9]
 800caaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800caac:	edd8 ca00 	vldr	s25, [r8]
 800cab0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cab2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cab4:	f8dd c018 	ldr.w	ip, [sp, #24]
 800cab8:	ed99 aa01 	vldr	s20, [r9, #4]
 800cabc:	edcd 7a02 	vstr	s15, [sp, #8]
 800cac0:	9800      	ldr	r0, [sp, #0]
 800cac2:	e001      	b.n	800cac8 <arm_radix8_butterfly_f32+0x328>
 800cac4:	3f3504f3 	.word	0x3f3504f3
 800cac8:	edd5 3a00 	vldr	s7, [r5]
 800cacc:	44dc      	add	ip, fp
 800cace:	ed91 7a00 	vldr	s14, [r1]
 800cad2:	edd4 8a00 	vldr	s17, [r4]
 800cad6:	45e2      	cmp	sl, ip
 800cad8:	ed57 7a01 	vldr	s15, [r7, #-4]
 800cadc:	ed90 5a00 	vldr	s10, [r0]
 800cae0:	ed56 5a01 	vldr	s11, [r6, #-4]
 800cae4:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800cae8:	ed92 1a00 	vldr	s2, [r2]
 800caec:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800caf0:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800caf4:	ee75 9a25 	vadd.f32	s19, s10, s11
 800caf8:	ee31 3a07 	vadd.f32	s6, s2, s14
 800cafc:	ed92 8a01 	vldr	s16, [r2, #4]
 800cb00:	ee73 6a84 	vadd.f32	s13, s7, s8
 800cb04:	ee75 5a65 	vsub.f32	s11, s10, s11
 800cb08:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800cb0c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800cb10:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800cb14:	ee75 7a84 	vadd.f32	s15, s11, s8
 800cb18:	ee31 1a47 	vsub.f32	s2, s2, s14
 800cb1c:	ee31 7a85 	vadd.f32	s14, s3, s10
 800cb20:	ee67 7a89 	vmul.f32	s15, s15, s18
 800cb24:	ee33 3a46 	vsub.f32	s6, s6, s12
 800cb28:	ed82 7a00 	vstr	s14, [r2]
 800cb2c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800cb30:	ed96 6a00 	vldr	s12, [r6]
 800cb34:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800cb38:	edd5 3a01 	vldr	s7, [r5, #4]
 800cb3c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800cb40:	ed90 7a01 	vldr	s14, [r0, #4]
 800cb44:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800cb48:	edde 4a00 	vldr	s9, [lr]
 800cb4c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800cb50:	ee77 2a46 	vsub.f32	s5, s14, s12
 800cb54:	edd1 6a01 	vldr	s13, [r1, #4]
 800cb58:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800cb5c:	edd7 0a00 	vldr	s1, [r7]
 800cb60:	ee77 5a06 	vadd.f32	s11, s14, s12
 800cb64:	ed94 7a01 	vldr	s14, [r4, #4]
 800cb68:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800cb6c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800cb70:	ee78 4a66 	vsub.f32	s9, s16, s13
 800cb74:	ee78 3a26 	vadd.f32	s7, s16, s13
 800cb78:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800cb7c:	ee77 6a20 	vadd.f32	s13, s14, s1
 800cb80:	ee24 4a09 	vmul.f32	s8, s8, s18
 800cb84:	ee37 7a60 	vsub.f32	s14, s14, s1
 800cb88:	ee20 8a09 	vmul.f32	s16, s0, s18
 800cb8c:	ee75 0a86 	vadd.f32	s1, s11, s12
 800cb90:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800cb94:	ee62 2a89 	vmul.f32	s5, s5, s18
 800cb98:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800cb9c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800cba0:	ee77 7a62 	vsub.f32	s15, s14, s5
 800cba4:	ee74 5a88 	vadd.f32	s11, s9, s16
 800cba8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800cbac:	ee77 4a22 	vadd.f32	s9, s14, s5
 800cbb0:	ee71 2a04 	vadd.f32	s5, s2, s8
 800cbb4:	ee31 7a44 	vsub.f32	s14, s2, s8
 800cbb8:	ee30 1a60 	vsub.f32	s2, s0, s1
 800cbbc:	ee73 1a06 	vadd.f32	s3, s6, s12
 800cbc0:	ee33 6a46 	vsub.f32	s12, s6, s12
 800cbc4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800cbc8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800cbcc:	ee38 4a68 	vsub.f32	s8, s16, s17
 800cbd0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800cbd4:	ee72 5a25 	vadd.f32	s11, s4, s11
 800cbd8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800cbdc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800cbe0:	ee77 2a27 	vadd.f32	s5, s14, s15
 800cbe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cbe8:	ee78 7a88 	vadd.f32	s15, s17, s16
 800cbec:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800cbf0:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800cbf4:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800cbf8:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800cbfc:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800cc00:	ee70 0a20 	vadd.f32	s1, s0, s1
 800cc04:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800cc08:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800cc0c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800cc10:	edc2 0a01 	vstr	s1, [r2, #4]
 800cc14:	ee38 8a88 	vadd.f32	s16, s17, s16
 800cc18:	441a      	add	r2, r3
 800cc1a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800cc1e:	ee31 5a45 	vsub.f32	s10, s2, s10
 800cc22:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800cc26:	ed81 8a00 	vstr	s16, [r1]
 800cc2a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800cc2e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cc32:	ed81 5a01 	vstr	s10, [r1, #4]
 800cc36:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800cc3a:	edcd 3a00 	vstr	s7, [sp]
 800cc3e:	ed9d 5a02 	vldr	s10, [sp, #8]
 800cc42:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800cc46:	eddd 3a01 	vldr	s7, [sp, #4]
 800cc4a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800cc4e:	ed84 0a00 	vstr	s0, [r4]
 800cc52:	ee65 4a24 	vmul.f32	s9, s10, s9
 800cc56:	ed84 3a01 	vstr	s6, [r4, #4]
 800cc5a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800cc5e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800cc62:	eddd 3a00 	vldr	s7, [sp]
 800cc66:	ee25 5a25 	vmul.f32	s10, s10, s11
 800cc6a:	4419      	add	r1, r3
 800cc6c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800cc70:	441c      	add	r4, r3
 800cc72:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800cc76:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800cc7a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800cc7e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800cc82:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800cc86:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800cc8a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800cc8e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800cc92:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800cc96:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800cc9a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800cc9e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800cca2:	ee38 8a01 	vadd.f32	s16, s16, s2
 800cca6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800ccaa:	ee39 5a85 	vadd.f32	s10, s19, s10
 800ccae:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800ccb2:	ed07 8a01 	vstr	s16, [r7, #-4]
 800ccb6:	ee30 0a21 	vadd.f32	s0, s0, s3
 800ccba:	ed87 6a00 	vstr	s12, [r7]
 800ccbe:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ccc2:	edc0 0a00 	vstr	s1, [r0]
 800ccc6:	ee33 3a28 	vadd.f32	s6, s6, s17
 800ccca:	edc0 3a01 	vstr	s7, [r0, #4]
 800ccce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ccd2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800ccd6:	edce 4a00 	vstr	s9, [lr]
 800ccda:	4418      	add	r0, r3
 800ccdc:	ed06 0a01 	vstr	s0, [r6, #-4]
 800cce0:	441f      	add	r7, r3
 800cce2:	edc6 2a00 	vstr	s5, [r6]
 800cce6:	449e      	add	lr, r3
 800cce8:	ed85 3a00 	vstr	s6, [r5]
 800ccec:	441e      	add	r6, r3
 800ccee:	ed85 7a01 	vstr	s14, [r5, #4]
 800ccf2:	441d      	add	r5, r3
 800ccf4:	f63f aee8 	bhi.w	800cac8 <arm_radix8_butterfly_f32+0x328>
 800ccf8:	9a06      	ldr	r2, [sp, #24]
 800ccfa:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ccfc:	3201      	adds	r2, #1
 800ccfe:	4611      	mov	r1, r2
 800cd00:	9206      	str	r2, [sp, #24]
 800cd02:	9a07      	ldr	r2, [sp, #28]
 800cd04:	4402      	add	r2, r0
 800cd06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800cd08:	9207      	str	r2, [sp, #28]
 800cd0a:	9a03      	ldr	r2, [sp, #12]
 800cd0c:	4402      	add	r2, r0
 800cd0e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd10:	9203      	str	r2, [sp, #12]
 800cd12:	9a04      	ldr	r2, [sp, #16]
 800cd14:	4402      	add	r2, r0
 800cd16:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cd18:	9204      	str	r2, [sp, #16]
 800cd1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cd1c:	4491      	add	r9, r2
 800cd1e:	9a05      	ldr	r2, [sp, #20]
 800cd20:	4402      	add	r2, r0
 800cd22:	9205      	str	r2, [sp, #20]
 800cd24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd26:	4490      	add	r8, r2
 800cd28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd2a:	3208      	adds	r2, #8
 800cd2c:	920f      	str	r2, [sp, #60]	; 0x3c
 800cd2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd30:	3208      	adds	r2, #8
 800cd32:	920e      	str	r2, [sp, #56]	; 0x38
 800cd34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd36:	3208      	adds	r2, #8
 800cd38:	920d      	str	r2, [sp, #52]	; 0x34
 800cd3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd3c:	3208      	adds	r2, #8
 800cd3e:	920c      	str	r2, [sp, #48]	; 0x30
 800cd40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd42:	3208      	adds	r2, #8
 800cd44:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd48:	3208      	adds	r2, #8
 800cd4a:	920a      	str	r2, [sp, #40]	; 0x28
 800cd4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd4e:	3208      	adds	r2, #8
 800cd50:	9209      	str	r2, [sp, #36]	; 0x24
 800cd52:	9a08      	ldr	r2, [sp, #32]
 800cd54:	3208      	adds	r2, #8
 800cd56:	9208      	str	r2, [sp, #32]
 800cd58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800cd5a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800cd5c:	4622      	mov	r2, r4
 800cd5e:	4288      	cmp	r0, r1
 800cd60:	d005      	beq.n	800cd6e <arm_radix8_butterfly_f32+0x5ce>
 800cd62:	9818      	ldr	r0, [sp, #96]	; 0x60
 800cd64:	4621      	mov	r1, r4
 800cd66:	4401      	add	r1, r0
 800cd68:	9807      	ldr	r0, [sp, #28]
 800cd6a:	9110      	str	r1, [sp, #64]	; 0x40
 800cd6c:	e676      	b.n	800ca5c <arm_radix8_butterfly_f32+0x2bc>
 800cd6e:	4683      	mov	fp, r0
 800cd70:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800cd74:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800cd78:	e522      	b.n	800c7c0 <arm_radix8_butterfly_f32+0x20>
 800cd7a:	b01d      	add	sp, #116	; 0x74
 800cd7c:	ecbd 8b10 	vpop	{d8-d15}
 800cd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd84 <__errno>:
 800cd84:	4b01      	ldr	r3, [pc, #4]	; (800cd8c <__errno+0x8>)
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop
 800cd8c:	2000000c 	.word	0x2000000c

0800cd90 <__libc_init_array>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	4d0d      	ldr	r5, [pc, #52]	; (800cdc8 <__libc_init_array+0x38>)
 800cd94:	4c0d      	ldr	r4, [pc, #52]	; (800cdcc <__libc_init_array+0x3c>)
 800cd96:	1b64      	subs	r4, r4, r5
 800cd98:	10a4      	asrs	r4, r4, #2
 800cd9a:	2600      	movs	r6, #0
 800cd9c:	42a6      	cmp	r6, r4
 800cd9e:	d109      	bne.n	800cdb4 <__libc_init_array+0x24>
 800cda0:	4d0b      	ldr	r5, [pc, #44]	; (800cdd0 <__libc_init_array+0x40>)
 800cda2:	4c0c      	ldr	r4, [pc, #48]	; (800cdd4 <__libc_init_array+0x44>)
 800cda4:	f000 ffe8 	bl	800dd78 <_init>
 800cda8:	1b64      	subs	r4, r4, r5
 800cdaa:	10a4      	asrs	r4, r4, #2
 800cdac:	2600      	movs	r6, #0
 800cdae:	42a6      	cmp	r6, r4
 800cdb0:	d105      	bne.n	800cdbe <__libc_init_array+0x2e>
 800cdb2:	bd70      	pop	{r4, r5, r6, pc}
 800cdb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb8:	4798      	blx	r3
 800cdba:	3601      	adds	r6, #1
 800cdbc:	e7ee      	b.n	800cd9c <__libc_init_array+0xc>
 800cdbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc2:	4798      	blx	r3
 800cdc4:	3601      	adds	r6, #1
 800cdc6:	e7f2      	b.n	800cdae <__libc_init_array+0x1e>
 800cdc8:	08021748 	.word	0x08021748
 800cdcc:	08021748 	.word	0x08021748
 800cdd0:	08021748 	.word	0x08021748
 800cdd4:	0802174c 	.word	0x0802174c

0800cdd8 <memset>:
 800cdd8:	4402      	add	r2, r0
 800cdda:	4603      	mov	r3, r0
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d100      	bne.n	800cde2 <memset+0xa>
 800cde0:	4770      	bx	lr
 800cde2:	f803 1b01 	strb.w	r1, [r3], #1
 800cde6:	e7f9      	b.n	800cddc <memset+0x4>

0800cde8 <with_errnof>:
 800cde8:	b513      	push	{r0, r1, r4, lr}
 800cdea:	4604      	mov	r4, r0
 800cdec:	ed8d 0a01 	vstr	s0, [sp, #4]
 800cdf0:	f7ff ffc8 	bl	800cd84 <__errno>
 800cdf4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800cdf8:	6004      	str	r4, [r0, #0]
 800cdfa:	b002      	add	sp, #8
 800cdfc:	bd10      	pop	{r4, pc}

0800cdfe <xflowf>:
 800cdfe:	b130      	cbz	r0, 800ce0e <xflowf+0x10>
 800ce00:	eef1 7a40 	vneg.f32	s15, s0
 800ce04:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ce08:	2022      	movs	r0, #34	; 0x22
 800ce0a:	f7ff bfed 	b.w	800cde8 <with_errnof>
 800ce0e:	eef0 7a40 	vmov.f32	s15, s0
 800ce12:	e7f7      	b.n	800ce04 <xflowf+0x6>

0800ce14 <__math_uflowf>:
 800ce14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce1c <__math_uflowf+0x8>
 800ce18:	f7ff bff1 	b.w	800cdfe <xflowf>
 800ce1c:	10000000 	.word	0x10000000

0800ce20 <__math_may_uflowf>:
 800ce20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce28 <__math_may_uflowf+0x8>
 800ce24:	f7ff bfeb 	b.w	800cdfe <xflowf>
 800ce28:	1a200000 	.word	0x1a200000

0800ce2c <__math_oflowf>:
 800ce2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce34 <__math_oflowf+0x8>
 800ce30:	f7ff bfe5 	b.w	800cdfe <xflowf>
 800ce34:	70000000 	.word	0x70000000

0800ce38 <__math_divzerof>:
 800ce38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ce3c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800ce40:	2800      	cmp	r0, #0
 800ce42:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800ce46:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800ce54 <__math_divzerof+0x1c>
 800ce4a:	2022      	movs	r0, #34	; 0x22
 800ce4c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800ce50:	f7ff bfca 	b.w	800cde8 <with_errnof>
 800ce54:	00000000 	.word	0x00000000

0800ce58 <__math_invalidf>:
 800ce58:	eef0 7a40 	vmov.f32	s15, s0
 800ce5c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ce60:	eef4 7a67 	vcmp.f32	s15, s15
 800ce64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce68:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ce6c:	d602      	bvs.n	800ce74 <__math_invalidf+0x1c>
 800ce6e:	2021      	movs	r0, #33	; 0x21
 800ce70:	f7ff bfba 	b.w	800cde8 <with_errnof>
 800ce74:	4770      	bx	lr
	...

0800ce78 <cos>:
 800ce78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce7a:	eeb0 7b40 	vmov.f64	d7, d0
 800ce7e:	ee17 3a90 	vmov	r3, s15
 800ce82:	4a21      	ldr	r2, [pc, #132]	; (800cf08 <cos+0x90>)
 800ce84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	dc06      	bgt.n	800ce9a <cos+0x22>
 800ce8c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800cf00 <cos+0x88>
 800ce90:	b005      	add	sp, #20
 800ce92:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce96:	f000 bb03 	b.w	800d4a0 <__kernel_cos>
 800ce9a:	4a1c      	ldr	r2, [pc, #112]	; (800cf0c <cos+0x94>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	dd04      	ble.n	800ceaa <cos+0x32>
 800cea0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800cea4:	b005      	add	sp, #20
 800cea6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ceaa:	4668      	mov	r0, sp
 800ceac:	f000 f958 	bl	800d160 <__ieee754_rem_pio2>
 800ceb0:	f000 0003 	and.w	r0, r0, #3
 800ceb4:	2801      	cmp	r0, #1
 800ceb6:	d009      	beq.n	800cecc <cos+0x54>
 800ceb8:	2802      	cmp	r0, #2
 800ceba:	d010      	beq.n	800cede <cos+0x66>
 800cebc:	b9b0      	cbnz	r0, 800ceec <cos+0x74>
 800cebe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cec2:	ed9d 0b00 	vldr	d0, [sp]
 800cec6:	f000 faeb 	bl	800d4a0 <__kernel_cos>
 800ceca:	e7eb      	b.n	800cea4 <cos+0x2c>
 800cecc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ced0:	ed9d 0b00 	vldr	d0, [sp]
 800ced4:	f000 fde8 	bl	800daa8 <__kernel_sin>
 800ced8:	eeb1 0b40 	vneg.f64	d0, d0
 800cedc:	e7e2      	b.n	800cea4 <cos+0x2c>
 800cede:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cee2:	ed9d 0b00 	vldr	d0, [sp]
 800cee6:	f000 fadb 	bl	800d4a0 <__kernel_cos>
 800ceea:	e7f5      	b.n	800ced8 <cos+0x60>
 800ceec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cef0:	ed9d 0b00 	vldr	d0, [sp]
 800cef4:	2001      	movs	r0, #1
 800cef6:	f000 fdd7 	bl	800daa8 <__kernel_sin>
 800cefa:	e7d3      	b.n	800cea4 <cos+0x2c>
 800cefc:	f3af 8000 	nop.w
	...
 800cf08:	3fe921fb 	.word	0x3fe921fb
 800cf0c:	7fefffff 	.word	0x7fefffff

0800cf10 <expf>:
 800cf10:	ee10 2a10 	vmov	r2, s0
 800cf14:	f240 412a 	movw	r1, #1066	; 0x42a
 800cf18:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800cf1c:	428b      	cmp	r3, r1
 800cf1e:	b430      	push	{r4, r5}
 800cf20:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800cf24:	d92a      	bls.n	800cf7c <expf+0x6c>
 800cf26:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800cf2a:	d058      	beq.n	800cfde <expf+0xce>
 800cf2c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800cf30:	d303      	bcc.n	800cf3a <expf+0x2a>
 800cf32:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf36:	bc30      	pop	{r4, r5}
 800cf38:	4770      	bx	lr
 800cf3a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800cfe4 <expf+0xd4>
 800cf3e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cf42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf46:	dd03      	ble.n	800cf50 <expf+0x40>
 800cf48:	bc30      	pop	{r4, r5}
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	f7ff bf6e 	b.w	800ce2c <__math_oflowf>
 800cf50:	eddf 7a25 	vldr	s15, [pc, #148]	; 800cfe8 <expf+0xd8>
 800cf54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5c:	d503      	bpl.n	800cf66 <expf+0x56>
 800cf5e:	bc30      	pop	{r4, r5}
 800cf60:	2000      	movs	r0, #0
 800cf62:	f7ff bf57 	b.w	800ce14 <__math_uflowf>
 800cf66:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cfec <expf+0xdc>
 800cf6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800cf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf72:	d503      	bpl.n	800cf7c <expf+0x6c>
 800cf74:	bc30      	pop	{r4, r5}
 800cf76:	2000      	movs	r0, #0
 800cf78:	f7ff bf52 	b.w	800ce20 <__math_may_uflowf>
 800cf7c:	4b1c      	ldr	r3, [pc, #112]	; (800cff0 <expf+0xe0>)
 800cf7e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cf82:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800cf86:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800cf8a:	eeb0 7b44 	vmov.f64	d7, d4
 800cf8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cf92:	ee17 0a10 	vmov	r0, s14
 800cf96:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cf9a:	f000 021f 	and.w	r2, r0, #31
 800cf9e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800cfa2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800cfa6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800cfaa:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800cfae:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800cfb2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cfb6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800cfba:	684d      	ldr	r5, [r1, #4]
 800cfbc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	190a      	adds	r2, r1, r4
 800cfc4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800cfc8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800cfcc:	ec43 2b17 	vmov	d7, r2, r3
 800cfd0:	eea6 0b04 	vfma.f64	d0, d6, d4
 800cfd4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cfd8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cfdc:	e7ab      	b.n	800cf36 <expf+0x26>
 800cfde:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800cff4 <expf+0xe4>
 800cfe2:	e7a8      	b.n	800cf36 <expf+0x26>
 800cfe4:	42b17217 	.word	0x42b17217
 800cfe8:	c2cff1b4 	.word	0xc2cff1b4
 800cfec:	c2ce8ecf 	.word	0xc2ce8ecf
 800cff0:	080212f8 	.word	0x080212f8
 800cff4:	00000000 	.word	0x00000000

0800cff8 <logf>:
 800cff8:	ee10 3a10 	vmov	r3, s0
 800cffc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800d000:	b410      	push	{r4}
 800d002:	d055      	beq.n	800d0b0 <logf+0xb8>
 800d004:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800d008:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800d00c:	d31a      	bcc.n	800d044 <logf+0x4c>
 800d00e:	005a      	lsls	r2, r3, #1
 800d010:	d104      	bne.n	800d01c <logf+0x24>
 800d012:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d016:	2001      	movs	r0, #1
 800d018:	f7ff bf0e 	b.w	800ce38 <__math_divzerof>
 800d01c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d020:	d043      	beq.n	800d0aa <logf+0xb2>
 800d022:	2b00      	cmp	r3, #0
 800d024:	db02      	blt.n	800d02c <logf+0x34>
 800d026:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800d02a:	d303      	bcc.n	800d034 <logf+0x3c>
 800d02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d030:	f7ff bf12 	b.w	800ce58 <__math_invalidf>
 800d034:	eddf 7a20 	vldr	s15, [pc, #128]	; 800d0b8 <logf+0xc0>
 800d038:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d03c:	ee10 3a10 	vmov	r3, s0
 800d040:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800d044:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800d048:	491c      	ldr	r1, [pc, #112]	; (800d0bc <logf+0xc4>)
 800d04a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800d04e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800d052:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800d056:	0dd4      	lsrs	r4, r2, #23
 800d058:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800d05c:	05e4      	lsls	r4, r4, #23
 800d05e:	ed90 6b00 	vldr	d6, [r0]
 800d062:	1b1b      	subs	r3, r3, r4
 800d064:	ee07 3a90 	vmov	s15, r3
 800d068:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800d06c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d070:	15d2      	asrs	r2, r2, #23
 800d072:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d076:	ed90 6b02 	vldr	d6, [r0, #8]
 800d07a:	ee20 4b00 	vmul.f64	d4, d0, d0
 800d07e:	ee07 2a90 	vmov	s15, r2
 800d082:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d086:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d08a:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800d08e:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800d092:	eea5 7b00 	vfma.f64	d7, d5, d0
 800d096:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800d09a:	ee30 0b06 	vadd.f64	d0, d0, d6
 800d09e:	eea5 7b04 	vfma.f64	d7, d5, d4
 800d0a2:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d0a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d0aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800d0c0 <logf+0xc8>
 800d0b4:	e7f9      	b.n	800d0aa <logf+0xb2>
 800d0b6:	bf00      	nop
 800d0b8:	4b000000 	.word	0x4b000000
 800d0bc:	08021440 	.word	0x08021440
 800d0c0:	00000000 	.word	0x00000000

0800d0c4 <log10f>:
 800d0c4:	b508      	push	{r3, lr}
 800d0c6:	ed2d 8b02 	vpush	{d8}
 800d0ca:	eeb0 8a40 	vmov.f32	s16, s0
 800d0ce:	f000 f98b 	bl	800d3e8 <__ieee754_log10f>
 800d0d2:	eeb4 8a48 	vcmp.f32	s16, s16
 800d0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0da:	d60f      	bvs.n	800d0fc <log10f+0x38>
 800d0dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	d80a      	bhi.n	800d0fc <log10f+0x38>
 800d0e6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ee:	d108      	bne.n	800d102 <log10f+0x3e>
 800d0f0:	f7ff fe48 	bl	800cd84 <__errno>
 800d0f4:	2322      	movs	r3, #34	; 0x22
 800d0f6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800d118 <log10f+0x54>
 800d0fa:	6003      	str	r3, [r0, #0]
 800d0fc:	ecbd 8b02 	vpop	{d8}
 800d100:	bd08      	pop	{r3, pc}
 800d102:	f7ff fe3f 	bl	800cd84 <__errno>
 800d106:	ecbd 8b02 	vpop	{d8}
 800d10a:	2321      	movs	r3, #33	; 0x21
 800d10c:	6003      	str	r3, [r0, #0]
 800d10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d112:	4802      	ldr	r0, [pc, #8]	; (800d11c <log10f+0x58>)
 800d114:	f000 be2a 	b.w	800dd6c <nanf>
 800d118:	ff800000 	.word	0xff800000
 800d11c:	08021560 	.word	0x08021560

0800d120 <sqrtf>:
 800d120:	b508      	push	{r3, lr}
 800d122:	ed2d 8b02 	vpush	{d8}
 800d126:	eeb0 8a40 	vmov.f32	s16, s0
 800d12a:	f000 f9b5 	bl	800d498 <__ieee754_sqrtf>
 800d12e:	eeb4 8a48 	vcmp.f32	s16, s16
 800d132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d136:	d60c      	bvs.n	800d152 <sqrtf+0x32>
 800d138:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d158 <sqrtf+0x38>
 800d13c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d144:	d505      	bpl.n	800d152 <sqrtf+0x32>
 800d146:	f7ff fe1d 	bl	800cd84 <__errno>
 800d14a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d14e:	2321      	movs	r3, #33	; 0x21
 800d150:	6003      	str	r3, [r0, #0]
 800d152:	ecbd 8b02 	vpop	{d8}
 800d156:	bd08      	pop	{r3, pc}
	...

0800d160 <__ieee754_rem_pio2>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	eeb0 7b40 	vmov.f64	d7, d0
 800d166:	ee17 5a90 	vmov	r5, s15
 800d16a:	4b99      	ldr	r3, [pc, #612]	; (800d3d0 <__ieee754_rem_pio2+0x270>)
 800d16c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d170:	429e      	cmp	r6, r3
 800d172:	b088      	sub	sp, #32
 800d174:	4604      	mov	r4, r0
 800d176:	dc07      	bgt.n	800d188 <__ieee754_rem_pio2+0x28>
 800d178:	2200      	movs	r2, #0
 800d17a:	2300      	movs	r3, #0
 800d17c:	ed84 0b00 	vstr	d0, [r4]
 800d180:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d184:	2000      	movs	r0, #0
 800d186:	e01b      	b.n	800d1c0 <__ieee754_rem_pio2+0x60>
 800d188:	4b92      	ldr	r3, [pc, #584]	; (800d3d4 <__ieee754_rem_pio2+0x274>)
 800d18a:	429e      	cmp	r6, r3
 800d18c:	dc3b      	bgt.n	800d206 <__ieee754_rem_pio2+0xa6>
 800d18e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800d192:	2d00      	cmp	r5, #0
 800d194:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800d390 <__ieee754_rem_pio2+0x230>
 800d198:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800d19c:	dd19      	ble.n	800d1d2 <__ieee754_rem_pio2+0x72>
 800d19e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d1a2:	429e      	cmp	r6, r3
 800d1a4:	d00e      	beq.n	800d1c4 <__ieee754_rem_pio2+0x64>
 800d1a6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800d398 <__ieee754_rem_pio2+0x238>
 800d1aa:	ee37 5b46 	vsub.f64	d5, d7, d6
 800d1ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d1b2:	ed84 5b00 	vstr	d5, [r4]
 800d1b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1ba:	ed84 7b02 	vstr	d7, [r4, #8]
 800d1be:	2001      	movs	r0, #1
 800d1c0:	b008      	add	sp, #32
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
 800d1c4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800d3a0 <__ieee754_rem_pio2+0x240>
 800d1c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d1cc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800d3a8 <__ieee754_rem_pio2+0x248>
 800d1d0:	e7eb      	b.n	800d1aa <__ieee754_rem_pio2+0x4a>
 800d1d2:	429e      	cmp	r6, r3
 800d1d4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d1d8:	d00e      	beq.n	800d1f8 <__ieee754_rem_pio2+0x98>
 800d1da:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800d398 <__ieee754_rem_pio2+0x238>
 800d1de:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d1e2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d1e6:	ed84 5b00 	vstr	d5, [r4]
 800d1ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1f2:	ed84 7b02 	vstr	d7, [r4, #8]
 800d1f6:	e7e3      	b.n	800d1c0 <__ieee754_rem_pio2+0x60>
 800d1f8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d3a0 <__ieee754_rem_pio2+0x240>
 800d1fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d200:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d3a8 <__ieee754_rem_pio2+0x248>
 800d204:	e7eb      	b.n	800d1de <__ieee754_rem_pio2+0x7e>
 800d206:	4b74      	ldr	r3, [pc, #464]	; (800d3d8 <__ieee754_rem_pio2+0x278>)
 800d208:	429e      	cmp	r6, r3
 800d20a:	dc70      	bgt.n	800d2ee <__ieee754_rem_pio2+0x18e>
 800d20c:	f000 fca4 	bl	800db58 <fabs>
 800d210:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d214:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800d3b0 <__ieee754_rem_pio2+0x250>
 800d218:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d21c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d220:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d224:	ee17 0a90 	vmov	r0, s15
 800d228:	eeb1 4b45 	vneg.f64	d4, d5
 800d22c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800d390 <__ieee754_rem_pio2+0x230>
 800d230:	eea5 0b47 	vfms.f64	d0, d5, d7
 800d234:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800d398 <__ieee754_rem_pio2+0x238>
 800d238:	281f      	cmp	r0, #31
 800d23a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d23e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d242:	dc08      	bgt.n	800d256 <__ieee754_rem_pio2+0xf6>
 800d244:	4b65      	ldr	r3, [pc, #404]	; (800d3dc <__ieee754_rem_pio2+0x27c>)
 800d246:	1e42      	subs	r2, r0, #1
 800d248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d24c:	42b3      	cmp	r3, r6
 800d24e:	d002      	beq.n	800d256 <__ieee754_rem_pio2+0xf6>
 800d250:	ed84 6b00 	vstr	d6, [r4]
 800d254:	e026      	b.n	800d2a4 <__ieee754_rem_pio2+0x144>
 800d256:	ee16 3a90 	vmov	r3, s13
 800d25a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d25e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800d262:	2b10      	cmp	r3, #16
 800d264:	ea4f 5226 	mov.w	r2, r6, asr #20
 800d268:	ddf2      	ble.n	800d250 <__ieee754_rem_pio2+0xf0>
 800d26a:	eeb0 6b40 	vmov.f64	d6, d0
 800d26e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800d3a0 <__ieee754_rem_pio2+0x240>
 800d272:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800d3a8 <__ieee754_rem_pio2+0x248>
 800d276:	eea4 6b07 	vfma.f64	d6, d4, d7
 800d27a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d27e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800d282:	eeb0 7b40 	vmov.f64	d7, d0
 800d286:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800d28a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800d28e:	ee13 3a90 	vmov	r3, s7
 800d292:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d296:	1ad3      	subs	r3, r2, r3
 800d298:	2b31      	cmp	r3, #49	; 0x31
 800d29a:	dc17      	bgt.n	800d2cc <__ieee754_rem_pio2+0x16c>
 800d29c:	eeb0 0b46 	vmov.f64	d0, d6
 800d2a0:	ed84 3b00 	vstr	d3, [r4]
 800d2a4:	ed94 6b00 	vldr	d6, [r4]
 800d2a8:	2d00      	cmp	r5, #0
 800d2aa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d2ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d2b2:	ed84 0b02 	vstr	d0, [r4, #8]
 800d2b6:	da83      	bge.n	800d1c0 <__ieee754_rem_pio2+0x60>
 800d2b8:	eeb1 6b46 	vneg.f64	d6, d6
 800d2bc:	eeb1 0b40 	vneg.f64	d0, d0
 800d2c0:	ed84 6b00 	vstr	d6, [r4]
 800d2c4:	ed84 0b02 	vstr	d0, [r4, #8]
 800d2c8:	4240      	negs	r0, r0
 800d2ca:	e779      	b.n	800d1c0 <__ieee754_rem_pio2+0x60>
 800d2cc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800d3b8 <__ieee754_rem_pio2+0x258>
 800d2d0:	eeb0 0b46 	vmov.f64	d0, d6
 800d2d4:	eea4 0b03 	vfma.f64	d0, d4, d3
 800d2d8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800d2dc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800d3c0 <__ieee754_rem_pio2+0x260>
 800d2e0:	eea4 7b03 	vfma.f64	d7, d4, d3
 800d2e4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800d2e8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d2ec:	e7b0      	b.n	800d250 <__ieee754_rem_pio2+0xf0>
 800d2ee:	4b3c      	ldr	r3, [pc, #240]	; (800d3e0 <__ieee754_rem_pio2+0x280>)
 800d2f0:	429e      	cmp	r6, r3
 800d2f2:	dd06      	ble.n	800d302 <__ieee754_rem_pio2+0x1a2>
 800d2f4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800d2f8:	ed80 7b02 	vstr	d7, [r0, #8]
 800d2fc:	ed80 7b00 	vstr	d7, [r0]
 800d300:	e740      	b.n	800d184 <__ieee754_rem_pio2+0x24>
 800d302:	1532      	asrs	r2, r6, #20
 800d304:	ee10 0a10 	vmov	r0, s0
 800d308:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800d30c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800d310:	ec41 0b17 	vmov	d7, r0, r1
 800d314:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d318:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800d3c8 <__ieee754_rem_pio2+0x268>
 800d31c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d320:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d324:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d328:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d32c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800d330:	a902      	add	r1, sp, #8
 800d332:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800d336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d33a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d33e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d342:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d346:	2603      	movs	r6, #3
 800d348:	4608      	mov	r0, r1
 800d34a:	ed91 7b04 	vldr	d7, [r1, #16]
 800d34e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d356:	4633      	mov	r3, r6
 800d358:	f1a1 0108 	sub.w	r1, r1, #8
 800d35c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800d360:	d0f3      	beq.n	800d34a <__ieee754_rem_pio2+0x1ea>
 800d362:	4920      	ldr	r1, [pc, #128]	; (800d3e4 <__ieee754_rem_pio2+0x284>)
 800d364:	9101      	str	r1, [sp, #4]
 800d366:	2102      	movs	r1, #2
 800d368:	9100      	str	r1, [sp, #0]
 800d36a:	4621      	mov	r1, r4
 800d36c:	f000 f904 	bl	800d578 <__kernel_rem_pio2>
 800d370:	2d00      	cmp	r5, #0
 800d372:	f6bf af25 	bge.w	800d1c0 <__ieee754_rem_pio2+0x60>
 800d376:	ed94 7b00 	vldr	d7, [r4]
 800d37a:	eeb1 7b47 	vneg.f64	d7, d7
 800d37e:	ed84 7b00 	vstr	d7, [r4]
 800d382:	ed94 7b02 	vldr	d7, [r4, #8]
 800d386:	eeb1 7b47 	vneg.f64	d7, d7
 800d38a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d38e:	e79b      	b.n	800d2c8 <__ieee754_rem_pio2+0x168>
 800d390:	54400000 	.word	0x54400000
 800d394:	3ff921fb 	.word	0x3ff921fb
 800d398:	1a626331 	.word	0x1a626331
 800d39c:	3dd0b461 	.word	0x3dd0b461
 800d3a0:	1a600000 	.word	0x1a600000
 800d3a4:	3dd0b461 	.word	0x3dd0b461
 800d3a8:	2e037073 	.word	0x2e037073
 800d3ac:	3ba3198a 	.word	0x3ba3198a
 800d3b0:	6dc9c883 	.word	0x6dc9c883
 800d3b4:	3fe45f30 	.word	0x3fe45f30
 800d3b8:	2e000000 	.word	0x2e000000
 800d3bc:	3ba3198a 	.word	0x3ba3198a
 800d3c0:	252049c1 	.word	0x252049c1
 800d3c4:	397b839a 	.word	0x397b839a
 800d3c8:	00000000 	.word	0x00000000
 800d3cc:	41700000 	.word	0x41700000
 800d3d0:	3fe921fb 	.word	0x3fe921fb
 800d3d4:	4002d97b 	.word	0x4002d97b
 800d3d8:	413921fb 	.word	0x413921fb
 800d3dc:	08021564 	.word	0x08021564
 800d3e0:	7fefffff 	.word	0x7fefffff
 800d3e4:	080215e4 	.word	0x080215e4

0800d3e8 <__ieee754_log10f>:
 800d3e8:	b508      	push	{r3, lr}
 800d3ea:	ee10 2a10 	vmov	r2, s0
 800d3ee:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800d3f2:	ed2d 8b02 	vpush	{d8}
 800d3f6:	d108      	bne.n	800d40a <__ieee754_log10f+0x22>
 800d3f8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800d480 <__ieee754_log10f+0x98>
 800d3fc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d484 <__ieee754_log10f+0x9c>
 800d400:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800d404:	ecbd 8b02 	vpop	{d8}
 800d408:	bd08      	pop	{r3, pc}
 800d40a:	2a00      	cmp	r2, #0
 800d40c:	da02      	bge.n	800d414 <__ieee754_log10f+0x2c>
 800d40e:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d412:	e7f3      	b.n	800d3fc <__ieee754_log10f+0x14>
 800d414:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d418:	db02      	blt.n	800d420 <__ieee754_log10f+0x38>
 800d41a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d41e:	e7f1      	b.n	800d404 <__ieee754_log10f+0x1c>
 800d420:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d424:	bfbf      	itttt	lt
 800d426:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800d488 <__ieee754_log10f+0xa0>
 800d42a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d42e:	f06f 0118 	mvnlt.w	r1, #24
 800d432:	ee17 2a90 	vmovlt	r2, s15
 800d436:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800d43a:	bfa8      	it	ge
 800d43c:	2100      	movge	r1, #0
 800d43e:	3b7f      	subs	r3, #127	; 0x7f
 800d440:	440b      	add	r3, r1
 800d442:	0fd9      	lsrs	r1, r3, #31
 800d444:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800d448:	ee07 3a90 	vmov	s15, r3
 800d44c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d450:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800d454:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800d458:	ee00 3a10 	vmov	s0, r3
 800d45c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800d460:	f7ff fdca 	bl	800cff8 <logf>
 800d464:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d48c <__ieee754_log10f+0xa4>
 800d468:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d46c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d490 <__ieee754_log10f+0xa8>
 800d470:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d474:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d494 <__ieee754_log10f+0xac>
 800d478:	eea8 0a27 	vfma.f32	s0, s16, s15
 800d47c:	e7c2      	b.n	800d404 <__ieee754_log10f+0x1c>
 800d47e:	bf00      	nop
 800d480:	cc000000 	.word	0xcc000000
 800d484:	00000000 	.word	0x00000000
 800d488:	4c000000 	.word	0x4c000000
 800d48c:	3ede5bd9 	.word	0x3ede5bd9
 800d490:	355427db 	.word	0x355427db
 800d494:	3e9a2080 	.word	0x3e9a2080

0800d498 <__ieee754_sqrtf>:
 800d498:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d49c:	4770      	bx	lr
	...

0800d4a0 <__kernel_cos>:
 800d4a0:	ee10 1a90 	vmov	r1, s1
 800d4a4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d4a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d4ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800d4b0:	da05      	bge.n	800d4be <__kernel_cos+0x1e>
 800d4b2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d4b6:	ee17 3a90 	vmov	r3, s15
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d03d      	beq.n	800d53a <__kernel_cos+0x9a>
 800d4be:	ee20 3b00 	vmul.f64	d3, d0, d0
 800d4c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800d540 <__kernel_cos+0xa0>
 800d4c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800d548 <__kernel_cos+0xa8>
 800d4ca:	eea3 6b07 	vfma.f64	d6, d3, d7
 800d4ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d550 <__kernel_cos+0xb0>
 800d4d2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d4d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800d558 <__kernel_cos+0xb8>
 800d4da:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d4de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d560 <__kernel_cos+0xc0>
 800d4e2:	4b23      	ldr	r3, [pc, #140]	; (800d570 <__kernel_cos+0xd0>)
 800d4e4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d4e8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800d568 <__kernel_cos+0xc8>
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	eea7 6b03 	vfma.f64	d6, d7, d3
 800d4f2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d4f6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800d4fa:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d4fe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800d502:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d506:	dc04      	bgt.n	800d512 <__kernel_cos+0x72>
 800d508:	ee37 6b46 	vsub.f64	d6, d7, d6
 800d50c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800d510:	4770      	bx	lr
 800d512:	4b18      	ldr	r3, [pc, #96]	; (800d574 <__kernel_cos+0xd4>)
 800d514:	4299      	cmp	r1, r3
 800d516:	dc0d      	bgt.n	800d534 <__kernel_cos+0x94>
 800d518:	2200      	movs	r2, #0
 800d51a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800d51e:	ec43 2b15 	vmov	d5, r2, r3
 800d522:	ee34 0b45 	vsub.f64	d0, d4, d5
 800d526:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d52a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d52e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d532:	4770      	bx	lr
 800d534:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800d538:	e7f3      	b.n	800d522 <__kernel_cos+0x82>
 800d53a:	eeb0 0b44 	vmov.f64	d0, d4
 800d53e:	4770      	bx	lr
 800d540:	be8838d4 	.word	0xbe8838d4
 800d544:	bda8fae9 	.word	0xbda8fae9
 800d548:	bdb4b1c4 	.word	0xbdb4b1c4
 800d54c:	3e21ee9e 	.word	0x3e21ee9e
 800d550:	809c52ad 	.word	0x809c52ad
 800d554:	be927e4f 	.word	0xbe927e4f
 800d558:	19cb1590 	.word	0x19cb1590
 800d55c:	3efa01a0 	.word	0x3efa01a0
 800d560:	16c15177 	.word	0x16c15177
 800d564:	bf56c16c 	.word	0xbf56c16c
 800d568:	5555554c 	.word	0x5555554c
 800d56c:	3fa55555 	.word	0x3fa55555
 800d570:	3fd33332 	.word	0x3fd33332
 800d574:	3fe90000 	.word	0x3fe90000

0800d578 <__kernel_rem_pio2>:
 800d578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d57c:	ed2d 8b06 	vpush	{d8-d10}
 800d580:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800d584:	460f      	mov	r7, r1
 800d586:	9002      	str	r0, [sp, #8]
 800d588:	49c5      	ldr	r1, [pc, #788]	; (800d8a0 <__kernel_rem_pio2+0x328>)
 800d58a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800d58c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800d590:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800d594:	9301      	str	r3, [sp, #4]
 800d596:	f112 0f14 	cmn.w	r2, #20
 800d59a:	bfa8      	it	ge
 800d59c:	2018      	movge	r0, #24
 800d59e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800d5a2:	bfb8      	it	lt
 800d5a4:	2000      	movlt	r0, #0
 800d5a6:	f06f 0417 	mvn.w	r4, #23
 800d5aa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800d888 <__kernel_rem_pio2+0x310>
 800d5ae:	bfa4      	itt	ge
 800d5b0:	f1a2 0a03 	subge.w	sl, r2, #3
 800d5b4:	fb9a f0f0 	sdivge	r0, sl, r0
 800d5b8:	fb00 4404 	mla	r4, r0, r4, r4
 800d5bc:	1a46      	subs	r6, r0, r1
 800d5be:	4414      	add	r4, r2
 800d5c0:	eb09 0c01 	add.w	ip, r9, r1
 800d5c4:	ad1a      	add	r5, sp, #104	; 0x68
 800d5c6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	4562      	cmp	r2, ip
 800d5ce:	dd10      	ble.n	800d5f2 <__kernel_rem_pio2+0x7a>
 800d5d0:	9a01      	ldr	r2, [sp, #4]
 800d5d2:	ab1a      	add	r3, sp, #104	; 0x68
 800d5d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d5d8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800d5dc:	f04f 0c00 	mov.w	ip, #0
 800d5e0:	45cc      	cmp	ip, r9
 800d5e2:	dc26      	bgt.n	800d632 <__kernel_rem_pio2+0xba>
 800d5e4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800d888 <__kernel_rem_pio2+0x310>
 800d5e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d5ec:	4616      	mov	r6, r2
 800d5ee:	2500      	movs	r5, #0
 800d5f0:	e015      	b.n	800d61e <__kernel_rem_pio2+0xa6>
 800d5f2:	42d6      	cmn	r6, r2
 800d5f4:	d409      	bmi.n	800d60a <__kernel_rem_pio2+0x92>
 800d5f6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d602:	eca5 7b02 	vstmia	r5!, {d7}
 800d606:	3201      	adds	r2, #1
 800d608:	e7e0      	b.n	800d5cc <__kernel_rem_pio2+0x54>
 800d60a:	eeb0 7b46 	vmov.f64	d7, d6
 800d60e:	e7f8      	b.n	800d602 <__kernel_rem_pio2+0x8a>
 800d610:	ecb8 5b02 	vldmia	r8!, {d5}
 800d614:	ed96 6b00 	vldr	d6, [r6]
 800d618:	3501      	adds	r5, #1
 800d61a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d61e:	428d      	cmp	r5, r1
 800d620:	f1a6 0608 	sub.w	r6, r6, #8
 800d624:	ddf4      	ble.n	800d610 <__kernel_rem_pio2+0x98>
 800d626:	ecaa 7b02 	vstmia	sl!, {d7}
 800d62a:	f10c 0c01 	add.w	ip, ip, #1
 800d62e:	3208      	adds	r2, #8
 800d630:	e7d6      	b.n	800d5e0 <__kernel_rem_pio2+0x68>
 800d632:	ab06      	add	r3, sp, #24
 800d634:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800d890 <__kernel_rem_pio2+0x318>
 800d638:	ed9f ab97 	vldr	d10, [pc, #604]	; 800d898 <__kernel_rem_pio2+0x320>
 800d63c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d640:	9303      	str	r3, [sp, #12]
 800d642:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800d646:	464d      	mov	r5, r9
 800d648:	00eb      	lsls	r3, r5, #3
 800d64a:	9304      	str	r3, [sp, #16]
 800d64c:	ab92      	add	r3, sp, #584	; 0x248
 800d64e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800d652:	f10d 0b18 	add.w	fp, sp, #24
 800d656:	ab6a      	add	r3, sp, #424	; 0x1a8
 800d658:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800d65c:	465e      	mov	r6, fp
 800d65e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800d662:	4628      	mov	r0, r5
 800d664:	2800      	cmp	r0, #0
 800d666:	f1a2 0208 	sub.w	r2, r2, #8
 800d66a:	dc4c      	bgt.n	800d706 <__kernel_rem_pio2+0x18e>
 800d66c:	4620      	mov	r0, r4
 800d66e:	9105      	str	r1, [sp, #20]
 800d670:	f000 faf2 	bl	800dc58 <scalbn>
 800d674:	eeb0 8b40 	vmov.f64	d8, d0
 800d678:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800d67c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800d680:	f000 fa76 	bl	800db70 <floor>
 800d684:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800d688:	eea0 8b47 	vfms.f64	d8, d0, d7
 800d68c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800d690:	2c00      	cmp	r4, #0
 800d692:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800d696:	ee17 8a90 	vmov	r8, s15
 800d69a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d69e:	9905      	ldr	r1, [sp, #20]
 800d6a0:	dd43      	ble.n	800d72a <__kernel_rem_pio2+0x1b2>
 800d6a2:	1e68      	subs	r0, r5, #1
 800d6a4:	ab06      	add	r3, sp, #24
 800d6a6:	f1c4 0c18 	rsb	ip, r4, #24
 800d6aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800d6ae:	fa46 f20c 	asr.w	r2, r6, ip
 800d6b2:	4490      	add	r8, r2
 800d6b4:	fa02 f20c 	lsl.w	r2, r2, ip
 800d6b8:	1ab6      	subs	r6, r6, r2
 800d6ba:	f1c4 0217 	rsb	r2, r4, #23
 800d6be:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800d6c2:	4116      	asrs	r6, r2
 800d6c4:	2e00      	cmp	r6, #0
 800d6c6:	dd3f      	ble.n	800d748 <__kernel_rem_pio2+0x1d0>
 800d6c8:	f04f 0c00 	mov.w	ip, #0
 800d6cc:	f108 0801 	add.w	r8, r8, #1
 800d6d0:	4660      	mov	r0, ip
 800d6d2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800d6d6:	4565      	cmp	r5, ip
 800d6d8:	dc6e      	bgt.n	800d7b8 <__kernel_rem_pio2+0x240>
 800d6da:	2c00      	cmp	r4, #0
 800d6dc:	dd04      	ble.n	800d6e8 <__kernel_rem_pio2+0x170>
 800d6de:	2c01      	cmp	r4, #1
 800d6e0:	d07f      	beq.n	800d7e2 <__kernel_rem_pio2+0x26a>
 800d6e2:	2c02      	cmp	r4, #2
 800d6e4:	f000 8087 	beq.w	800d7f6 <__kernel_rem_pio2+0x27e>
 800d6e8:	2e02      	cmp	r6, #2
 800d6ea:	d12d      	bne.n	800d748 <__kernel_rem_pio2+0x1d0>
 800d6ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d6f0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800d6f4:	b340      	cbz	r0, 800d748 <__kernel_rem_pio2+0x1d0>
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	9105      	str	r1, [sp, #20]
 800d6fa:	f000 faad 	bl	800dc58 <scalbn>
 800d6fe:	9905      	ldr	r1, [sp, #20]
 800d700:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d704:	e020      	b.n	800d748 <__kernel_rem_pio2+0x1d0>
 800d706:	ee20 7b09 	vmul.f64	d7, d0, d9
 800d70a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d70e:	3801      	subs	r0, #1
 800d710:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800d714:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800d718:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d71c:	eca6 0a01 	vstmia	r6!, {s0}
 800d720:	ed92 0b00 	vldr	d0, [r2]
 800d724:	ee37 0b00 	vadd.f64	d0, d7, d0
 800d728:	e79c      	b.n	800d664 <__kernel_rem_pio2+0xec>
 800d72a:	d105      	bne.n	800d738 <__kernel_rem_pio2+0x1c0>
 800d72c:	1e6a      	subs	r2, r5, #1
 800d72e:	ab06      	add	r3, sp, #24
 800d730:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800d734:	15f6      	asrs	r6, r6, #23
 800d736:	e7c5      	b.n	800d6c4 <__kernel_rem_pio2+0x14c>
 800d738:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d73c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d744:	da36      	bge.n	800d7b4 <__kernel_rem_pio2+0x23c>
 800d746:	2600      	movs	r6, #0
 800d748:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d750:	f040 80aa 	bne.w	800d8a8 <__kernel_rem_pio2+0x330>
 800d754:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800d758:	4658      	mov	r0, fp
 800d75a:	2200      	movs	r2, #0
 800d75c:	4548      	cmp	r0, r9
 800d75e:	da52      	bge.n	800d806 <__kernel_rem_pio2+0x28e>
 800d760:	2a00      	cmp	r2, #0
 800d762:	f000 8081 	beq.w	800d868 <__kernel_rem_pio2+0x2f0>
 800d766:	ab06      	add	r3, sp, #24
 800d768:	3c18      	subs	r4, #24
 800d76a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 8087 	beq.w	800d882 <__kernel_rem_pio2+0x30a>
 800d774:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800d778:	4620      	mov	r0, r4
 800d77a:	f000 fa6d 	bl	800dc58 <scalbn>
 800d77e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d782:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800d890 <__kernel_rem_pio2+0x318>
 800d786:	a96a      	add	r1, sp, #424	; 0x1a8
 800d788:	f103 0208 	add.w	r2, r3, #8
 800d78c:	1888      	adds	r0, r1, r2
 800d78e:	4659      	mov	r1, fp
 800d790:	2900      	cmp	r1, #0
 800d792:	f280 80b7 	bge.w	800d904 <__kernel_rem_pio2+0x38c>
 800d796:	4659      	mov	r1, fp
 800d798:	2900      	cmp	r1, #0
 800d79a:	f2c0 80d5 	blt.w	800d948 <__kernel_rem_pio2+0x3d0>
 800d79e:	a86a      	add	r0, sp, #424	; 0x1a8
 800d7a0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800d7a4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800d888 <__kernel_rem_pio2+0x310>
 800d7a8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800d8a4 <__kernel_rem_pio2+0x32c>
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	ebab 0001 	sub.w	r0, fp, r1
 800d7b2:	e0be      	b.n	800d932 <__kernel_rem_pio2+0x3ba>
 800d7b4:	2602      	movs	r6, #2
 800d7b6:	e787      	b.n	800d6c8 <__kernel_rem_pio2+0x150>
 800d7b8:	f8db 2000 	ldr.w	r2, [fp]
 800d7bc:	b958      	cbnz	r0, 800d7d6 <__kernel_rem_pio2+0x25e>
 800d7be:	b122      	cbz	r2, 800d7ca <__kernel_rem_pio2+0x252>
 800d7c0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800d7c4:	f8cb 2000 	str.w	r2, [fp]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f10c 0c01 	add.w	ip, ip, #1
 800d7ce:	f10b 0b04 	add.w	fp, fp, #4
 800d7d2:	4610      	mov	r0, r2
 800d7d4:	e77f      	b.n	800d6d6 <__kernel_rem_pio2+0x15e>
 800d7d6:	ebae 0202 	sub.w	r2, lr, r2
 800d7da:	f8cb 2000 	str.w	r2, [fp]
 800d7de:	4602      	mov	r2, r0
 800d7e0:	e7f3      	b.n	800d7ca <__kernel_rem_pio2+0x252>
 800d7e2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800d7e6:	ab06      	add	r3, sp, #24
 800d7e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800d7ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800d7f0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800d7f4:	e778      	b.n	800d6e8 <__kernel_rem_pio2+0x170>
 800d7f6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800d7fa:	ab06      	add	r3, sp, #24
 800d7fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800d800:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800d804:	e7f4      	b.n	800d7f0 <__kernel_rem_pio2+0x278>
 800d806:	ab06      	add	r3, sp, #24
 800d808:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d80c:	3801      	subs	r0, #1
 800d80e:	431a      	orrs	r2, r3
 800d810:	e7a4      	b.n	800d75c <__kernel_rem_pio2+0x1e4>
 800d812:	f10c 0c01 	add.w	ip, ip, #1
 800d816:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d0f9      	beq.n	800d812 <__kernel_rem_pio2+0x29a>
 800d81e:	9b04      	ldr	r3, [sp, #16]
 800d820:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800d824:	eb0d 0203 	add.w	r2, sp, r3
 800d828:	9b01      	ldr	r3, [sp, #4]
 800d82a:	18e8      	adds	r0, r5, r3
 800d82c:	ab1a      	add	r3, sp, #104	; 0x68
 800d82e:	1c6e      	adds	r6, r5, #1
 800d830:	3a98      	subs	r2, #152	; 0x98
 800d832:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800d836:	4465      	add	r5, ip
 800d838:	42b5      	cmp	r5, r6
 800d83a:	f6ff af05 	blt.w	800d648 <__kernel_rem_pio2+0xd0>
 800d83e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800d842:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d846:	ee07 3a90 	vmov	s15, r3
 800d84a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d84e:	f04f 0c00 	mov.w	ip, #0
 800d852:	eca0 7b02 	vstmia	r0!, {d7}
 800d856:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800d888 <__kernel_rem_pio2+0x310>
 800d85a:	4680      	mov	r8, r0
 800d85c:	458c      	cmp	ip, r1
 800d85e:	dd07      	ble.n	800d870 <__kernel_rem_pio2+0x2f8>
 800d860:	eca2 7b02 	vstmia	r2!, {d7}
 800d864:	3601      	adds	r6, #1
 800d866:	e7e7      	b.n	800d838 <__kernel_rem_pio2+0x2c0>
 800d868:	9a03      	ldr	r2, [sp, #12]
 800d86a:	f04f 0c01 	mov.w	ip, #1
 800d86e:	e7d2      	b.n	800d816 <__kernel_rem_pio2+0x29e>
 800d870:	ecbe 5b02 	vldmia	lr!, {d5}
 800d874:	ed38 6b02 	vldmdb	r8!, {d6}
 800d878:	f10c 0c01 	add.w	ip, ip, #1
 800d87c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d880:	e7ec      	b.n	800d85c <__kernel_rem_pio2+0x2e4>
 800d882:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d886:	e76e      	b.n	800d766 <__kernel_rem_pio2+0x1ee>
	...
 800d894:	3e700000 	.word	0x3e700000
 800d898:	00000000 	.word	0x00000000
 800d89c:	41700000 	.word	0x41700000
 800d8a0:	08021730 	.word	0x08021730
 800d8a4:	080216f0 	.word	0x080216f0
 800d8a8:	4260      	negs	r0, r4
 800d8aa:	eeb0 0b48 	vmov.f64	d0, d8
 800d8ae:	f000 f9d3 	bl	800dc58 <scalbn>
 800d8b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800da90 <__kernel_rem_pio2+0x518>
 800d8b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800d8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8be:	db18      	blt.n	800d8f2 <__kernel_rem_pio2+0x37a>
 800d8c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800da98 <__kernel_rem_pio2+0x520>
 800d8c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d8c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800d8cc:	aa06      	add	r2, sp, #24
 800d8ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800d8d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800d8d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d8da:	f105 0b01 	add.w	fp, r5, #1
 800d8de:	ee10 3a10 	vmov	r3, s0
 800d8e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d8e6:	ee17 3a10 	vmov	r3, s14
 800d8ea:	3418      	adds	r4, #24
 800d8ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800d8f0:	e740      	b.n	800d774 <__kernel_rem_pio2+0x1fc>
 800d8f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800d8f6:	aa06      	add	r2, sp, #24
 800d8f8:	ee10 3a10 	vmov	r3, s0
 800d8fc:	46ab      	mov	fp, r5
 800d8fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d902:	e737      	b.n	800d774 <__kernel_rem_pio2+0x1fc>
 800d904:	ac06      	add	r4, sp, #24
 800d906:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800d90a:	9401      	str	r4, [sp, #4]
 800d90c:	ee07 4a90 	vmov	s15, r4
 800d910:	3901      	subs	r1, #1
 800d912:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d916:	ee27 7b00 	vmul.f64	d7, d7, d0
 800d91a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d91e:	ed20 7b02 	vstmdb	r0!, {d7}
 800d922:	e735      	b.n	800d790 <__kernel_rem_pio2+0x218>
 800d924:	ecbc 5b02 	vldmia	ip!, {d5}
 800d928:	ecb5 6b02 	vldmia	r5!, {d6}
 800d92c:	3401      	adds	r4, #1
 800d92e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d932:	454c      	cmp	r4, r9
 800d934:	dc01      	bgt.n	800d93a <__kernel_rem_pio2+0x3c2>
 800d936:	4284      	cmp	r4, r0
 800d938:	ddf4      	ble.n	800d924 <__kernel_rem_pio2+0x3ac>
 800d93a:	ac42      	add	r4, sp, #264	; 0x108
 800d93c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800d940:	ed80 7b00 	vstr	d7, [r0]
 800d944:	3901      	subs	r1, #1
 800d946:	e727      	b.n	800d798 <__kernel_rem_pio2+0x220>
 800d948:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d94a:	2902      	cmp	r1, #2
 800d94c:	dc0a      	bgt.n	800d964 <__kernel_rem_pio2+0x3ec>
 800d94e:	2900      	cmp	r1, #0
 800d950:	dc2c      	bgt.n	800d9ac <__kernel_rem_pio2+0x434>
 800d952:	d045      	beq.n	800d9e0 <__kernel_rem_pio2+0x468>
 800d954:	f008 0007 	and.w	r0, r8, #7
 800d958:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800d95c:	ecbd 8b06 	vpop	{d8-d10}
 800d960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d964:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800d966:	2a03      	cmp	r2, #3
 800d968:	d1f4      	bne.n	800d954 <__kernel_rem_pio2+0x3dc>
 800d96a:	aa42      	add	r2, sp, #264	; 0x108
 800d96c:	4413      	add	r3, r2
 800d96e:	461a      	mov	r2, r3
 800d970:	4619      	mov	r1, r3
 800d972:	4658      	mov	r0, fp
 800d974:	2800      	cmp	r0, #0
 800d976:	f1a1 0108 	sub.w	r1, r1, #8
 800d97a:	dc54      	bgt.n	800da26 <__kernel_rem_pio2+0x4ae>
 800d97c:	4659      	mov	r1, fp
 800d97e:	2901      	cmp	r1, #1
 800d980:	f1a2 0208 	sub.w	r2, r2, #8
 800d984:	dc5f      	bgt.n	800da46 <__kernel_rem_pio2+0x4ce>
 800d986:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800daa0 <__kernel_rem_pio2+0x528>
 800d98a:	3308      	adds	r3, #8
 800d98c:	f1bb 0f01 	cmp.w	fp, #1
 800d990:	dc69      	bgt.n	800da66 <__kernel_rem_pio2+0x4ee>
 800d992:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800d996:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800d99a:	2e00      	cmp	r6, #0
 800d99c:	d16a      	bne.n	800da74 <__kernel_rem_pio2+0x4fc>
 800d99e:	ed87 5b00 	vstr	d5, [r7]
 800d9a2:	ed87 6b02 	vstr	d6, [r7, #8]
 800d9a6:	ed87 7b04 	vstr	d7, [r7, #16]
 800d9aa:	e7d3      	b.n	800d954 <__kernel_rem_pio2+0x3dc>
 800d9ac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800daa0 <__kernel_rem_pio2+0x528>
 800d9b0:	ab42      	add	r3, sp, #264	; 0x108
 800d9b2:	441a      	add	r2, r3
 800d9b4:	465b      	mov	r3, fp
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	da26      	bge.n	800da08 <__kernel_rem_pio2+0x490>
 800d9ba:	b35e      	cbz	r6, 800da14 <__kernel_rem_pio2+0x49c>
 800d9bc:	eeb1 7b46 	vneg.f64	d7, d6
 800d9c0:	ed87 7b00 	vstr	d7, [r7]
 800d9c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800d9c8:	aa44      	add	r2, sp, #272	; 0x110
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9d0:	459b      	cmp	fp, r3
 800d9d2:	da22      	bge.n	800da1a <__kernel_rem_pio2+0x4a2>
 800d9d4:	b10e      	cbz	r6, 800d9da <__kernel_rem_pio2+0x462>
 800d9d6:	eeb1 7b47 	vneg.f64	d7, d7
 800d9da:	ed87 7b02 	vstr	d7, [r7, #8]
 800d9de:	e7b9      	b.n	800d954 <__kernel_rem_pio2+0x3dc>
 800d9e0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800daa0 <__kernel_rem_pio2+0x528>
 800d9e4:	ab42      	add	r3, sp, #264	; 0x108
 800d9e6:	441a      	add	r2, r3
 800d9e8:	f1bb 0f00 	cmp.w	fp, #0
 800d9ec:	da05      	bge.n	800d9fa <__kernel_rem_pio2+0x482>
 800d9ee:	b10e      	cbz	r6, 800d9f4 <__kernel_rem_pio2+0x47c>
 800d9f0:	eeb1 7b47 	vneg.f64	d7, d7
 800d9f4:	ed87 7b00 	vstr	d7, [r7]
 800d9f8:	e7ac      	b.n	800d954 <__kernel_rem_pio2+0x3dc>
 800d9fa:	ed32 6b02 	vldmdb	r2!, {d6}
 800d9fe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da02:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da06:	e7ef      	b.n	800d9e8 <__kernel_rem_pio2+0x470>
 800da08:	ed32 7b02 	vldmdb	r2!, {d7}
 800da0c:	3b01      	subs	r3, #1
 800da0e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800da12:	e7d0      	b.n	800d9b6 <__kernel_rem_pio2+0x43e>
 800da14:	eeb0 7b46 	vmov.f64	d7, d6
 800da18:	e7d2      	b.n	800d9c0 <__kernel_rem_pio2+0x448>
 800da1a:	ecb2 6b02 	vldmia	r2!, {d6}
 800da1e:	3301      	adds	r3, #1
 800da20:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da24:	e7d4      	b.n	800d9d0 <__kernel_rem_pio2+0x458>
 800da26:	ed91 7b00 	vldr	d7, [r1]
 800da2a:	ed91 5b02 	vldr	d5, [r1, #8]
 800da2e:	3801      	subs	r0, #1
 800da30:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da38:	ed81 6b00 	vstr	d6, [r1]
 800da3c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da40:	ed81 7b02 	vstr	d7, [r1, #8]
 800da44:	e796      	b.n	800d974 <__kernel_rem_pio2+0x3fc>
 800da46:	ed92 7b00 	vldr	d7, [r2]
 800da4a:	ed92 5b02 	vldr	d5, [r2, #8]
 800da4e:	3901      	subs	r1, #1
 800da50:	ee37 6b05 	vadd.f64	d6, d7, d5
 800da54:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da58:	ed82 6b00 	vstr	d6, [r2]
 800da5c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800da60:	ed82 7b02 	vstr	d7, [r2, #8]
 800da64:	e78b      	b.n	800d97e <__kernel_rem_pio2+0x406>
 800da66:	ed33 6b02 	vldmdb	r3!, {d6}
 800da6a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800da72:	e78b      	b.n	800d98c <__kernel_rem_pio2+0x414>
 800da74:	eeb1 5b45 	vneg.f64	d5, d5
 800da78:	eeb1 6b46 	vneg.f64	d6, d6
 800da7c:	ed87 5b00 	vstr	d5, [r7]
 800da80:	eeb1 7b47 	vneg.f64	d7, d7
 800da84:	ed87 6b02 	vstr	d6, [r7, #8]
 800da88:	e78d      	b.n	800d9a6 <__kernel_rem_pio2+0x42e>
 800da8a:	bf00      	nop
 800da8c:	f3af 8000 	nop.w
 800da90:	00000000 	.word	0x00000000
 800da94:	41700000 	.word	0x41700000
 800da98:	00000000 	.word	0x00000000
 800da9c:	3e700000 	.word	0x3e700000
	...

0800daa8 <__kernel_sin>:
 800daa8:	ee10 3a90 	vmov	r3, s1
 800daac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dab0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dab4:	da04      	bge.n	800dac0 <__kernel_sin+0x18>
 800dab6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800daba:	ee17 3a90 	vmov	r3, s15
 800dabe:	b35b      	cbz	r3, 800db18 <__kernel_sin+0x70>
 800dac0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800dac4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800dac8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800db20 <__kernel_sin+0x78>
 800dacc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db28 <__kernel_sin+0x80>
 800dad0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dad4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db30 <__kernel_sin+0x88>
 800dad8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dadc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db38 <__kernel_sin+0x90>
 800dae0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dae4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800db40 <__kernel_sin+0x98>
 800dae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800daec:	b930      	cbnz	r0, 800dafc <__kernel_sin+0x54>
 800daee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800db48 <__kernel_sin+0xa0>
 800daf2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800daf6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800dafa:	4770      	bx	lr
 800dafc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800db00:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800db04:	eea1 7b04 	vfma.f64	d7, d1, d4
 800db08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800db0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800db50 <__kernel_sin+0xa8>
 800db10:	eea5 1b07 	vfma.f64	d1, d5, d7
 800db14:	ee30 0b41 	vsub.f64	d0, d0, d1
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	5acfd57c 	.word	0x5acfd57c
 800db24:	3de5d93a 	.word	0x3de5d93a
 800db28:	8a2b9ceb 	.word	0x8a2b9ceb
 800db2c:	be5ae5e6 	.word	0xbe5ae5e6
 800db30:	57b1fe7d 	.word	0x57b1fe7d
 800db34:	3ec71de3 	.word	0x3ec71de3
 800db38:	19c161d5 	.word	0x19c161d5
 800db3c:	bf2a01a0 	.word	0xbf2a01a0
 800db40:	1110f8a6 	.word	0x1110f8a6
 800db44:	3f811111 	.word	0x3f811111
 800db48:	55555549 	.word	0x55555549
 800db4c:	bfc55555 	.word	0xbfc55555
 800db50:	55555549 	.word	0x55555549
 800db54:	3fc55555 	.word	0x3fc55555

0800db58 <fabs>:
 800db58:	ec51 0b10 	vmov	r0, r1, d0
 800db5c:	ee10 2a10 	vmov	r2, s0
 800db60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db64:	ec43 2b10 	vmov	d0, r2, r3
 800db68:	4770      	bx	lr
 800db6a:	0000      	movs	r0, r0
 800db6c:	0000      	movs	r0, r0
	...

0800db70 <floor>:
 800db70:	ee10 1a90 	vmov	r1, s1
 800db74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800db7c:	2b13      	cmp	r3, #19
 800db7e:	b530      	push	{r4, r5, lr}
 800db80:	ee10 0a10 	vmov	r0, s0
 800db84:	ee10 5a10 	vmov	r5, s0
 800db88:	dc31      	bgt.n	800dbee <floor+0x7e>
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	da15      	bge.n	800dbba <floor+0x4a>
 800db8e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800dc48 <floor+0xd8>
 800db92:	ee30 0b07 	vadd.f64	d0, d0, d7
 800db96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800db9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9e:	dd07      	ble.n	800dbb0 <floor+0x40>
 800dba0:	2900      	cmp	r1, #0
 800dba2:	da4e      	bge.n	800dc42 <floor+0xd2>
 800dba4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dba8:	4318      	orrs	r0, r3
 800dbaa:	d001      	beq.n	800dbb0 <floor+0x40>
 800dbac:	4928      	ldr	r1, [pc, #160]	; (800dc50 <floor+0xe0>)
 800dbae:	2000      	movs	r0, #0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	ec43 2b10 	vmov	d0, r2, r3
 800dbb8:	e020      	b.n	800dbfc <floor+0x8c>
 800dbba:	4a26      	ldr	r2, [pc, #152]	; (800dc54 <floor+0xe4>)
 800dbbc:	411a      	asrs	r2, r3
 800dbbe:	ea01 0402 	and.w	r4, r1, r2
 800dbc2:	4304      	orrs	r4, r0
 800dbc4:	d01a      	beq.n	800dbfc <floor+0x8c>
 800dbc6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800dc48 <floor+0xd8>
 800dbca:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dbce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd6:	ddeb      	ble.n	800dbb0 <floor+0x40>
 800dbd8:	2900      	cmp	r1, #0
 800dbda:	bfbe      	ittt	lt
 800dbdc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800dbe0:	fa40 f303 	asrlt.w	r3, r0, r3
 800dbe4:	18c9      	addlt	r1, r1, r3
 800dbe6:	ea21 0102 	bic.w	r1, r1, r2
 800dbea:	2000      	movs	r0, #0
 800dbec:	e7e0      	b.n	800dbb0 <floor+0x40>
 800dbee:	2b33      	cmp	r3, #51	; 0x33
 800dbf0:	dd05      	ble.n	800dbfe <floor+0x8e>
 800dbf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbf6:	d101      	bne.n	800dbfc <floor+0x8c>
 800dbf8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dbfc:	bd30      	pop	{r4, r5, pc}
 800dbfe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc06:	40e2      	lsrs	r2, r4
 800dc08:	4202      	tst	r2, r0
 800dc0a:	d0f7      	beq.n	800dbfc <floor+0x8c>
 800dc0c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800dc48 <floor+0xd8>
 800dc10:	ee30 0b07 	vadd.f64	d0, d0, d7
 800dc14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1c:	ddc8      	ble.n	800dbb0 <floor+0x40>
 800dc1e:	2900      	cmp	r1, #0
 800dc20:	da02      	bge.n	800dc28 <floor+0xb8>
 800dc22:	2b14      	cmp	r3, #20
 800dc24:	d103      	bne.n	800dc2e <floor+0xbe>
 800dc26:	3101      	adds	r1, #1
 800dc28:	ea20 0002 	bic.w	r0, r0, r2
 800dc2c:	e7c0      	b.n	800dbb0 <floor+0x40>
 800dc2e:	2401      	movs	r4, #1
 800dc30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dc34:	fa04 f303 	lsl.w	r3, r4, r3
 800dc38:	4418      	add	r0, r3
 800dc3a:	42a8      	cmp	r0, r5
 800dc3c:	bf38      	it	cc
 800dc3e:	1909      	addcc	r1, r1, r4
 800dc40:	e7f2      	b.n	800dc28 <floor+0xb8>
 800dc42:	2000      	movs	r0, #0
 800dc44:	4601      	mov	r1, r0
 800dc46:	e7b3      	b.n	800dbb0 <floor+0x40>
 800dc48:	8800759c 	.word	0x8800759c
 800dc4c:	7e37e43c 	.word	0x7e37e43c
 800dc50:	bff00000 	.word	0xbff00000
 800dc54:	000fffff 	.word	0x000fffff

0800dc58 <scalbn>:
 800dc58:	ee10 1a90 	vmov	r1, s1
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800dc62:	b98c      	cbnz	r4, 800dc88 <scalbn+0x30>
 800dc64:	ee10 3a10 	vmov	r3, s0
 800dc68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dc6c:	430b      	orrs	r3, r1
 800dc6e:	d011      	beq.n	800dc94 <scalbn+0x3c>
 800dc70:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800dd38 <scalbn+0xe0>
 800dc74:	4b3c      	ldr	r3, [pc, #240]	; (800dd68 <scalbn+0x110>)
 800dc76:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dc7a:	4298      	cmp	r0, r3
 800dc7c:	da0b      	bge.n	800dc96 <scalbn+0x3e>
 800dc7e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800dd40 <scalbn+0xe8>
 800dc82:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dc86:	e005      	b.n	800dc94 <scalbn+0x3c>
 800dc88:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	d107      	bne.n	800dca0 <scalbn+0x48>
 800dc90:	ee30 0b00 	vadd.f64	d0, d0, d0
 800dc94:	bd10      	pop	{r4, pc}
 800dc96:	ee10 1a90 	vmov	r1, s1
 800dc9a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800dc9e:	3c36      	subs	r4, #54	; 0x36
 800dca0:	4404      	add	r4, r0
 800dca2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800dca6:	429c      	cmp	r4, r3
 800dca8:	dd0d      	ble.n	800dcc6 <scalbn+0x6e>
 800dcaa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800dd48 <scalbn+0xf0>
 800dcae:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800dd50 <scalbn+0xf8>
 800dcb2:	eeb0 6b47 	vmov.f64	d6, d7
 800dcb6:	ee10 3a90 	vmov	r3, s1
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	fe27 7b05 	vselge.f64	d7, d7, d5
 800dcc0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800dcc4:	e7e6      	b.n	800dc94 <scalbn+0x3c>
 800dcc6:	2c00      	cmp	r4, #0
 800dcc8:	dd0a      	ble.n	800dce0 <scalbn+0x88>
 800dcca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800dcce:	ec53 2b10 	vmov	r2, r3, d0
 800dcd2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800dcd6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800dcda:	ec43 2b10 	vmov	d0, r2, r3
 800dcde:	e7d9      	b.n	800dc94 <scalbn+0x3c>
 800dce0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800dce4:	da19      	bge.n	800dd1a <scalbn+0xc2>
 800dce6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dcea:	4298      	cmp	r0, r3
 800dcec:	ee10 3a90 	vmov	r3, s1
 800dcf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcf4:	dd09      	ble.n	800dd0a <scalbn+0xb2>
 800dcf6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800dd48 <scalbn+0xf0>
 800dcfa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800dd50 <scalbn+0xf8>
 800dcfe:	eeb0 7b40 	vmov.f64	d7, d0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800dd08:	e7bb      	b.n	800dc82 <scalbn+0x2a>
 800dd0a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800dd40 <scalbn+0xe8>
 800dd0e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800dd58 <scalbn+0x100>
 800dd12:	eeb0 7b40 	vmov.f64	d7, d0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	e7f4      	b.n	800dd04 <scalbn+0xac>
 800dd1a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800dd1e:	ec53 2b10 	vmov	r2, r3, d0
 800dd22:	3436      	adds	r4, #54	; 0x36
 800dd24:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800dd28:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800dd2c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800dd60 <scalbn+0x108>
 800dd30:	ec43 2b10 	vmov	d0, r2, r3
 800dd34:	e7a5      	b.n	800dc82 <scalbn+0x2a>
 800dd36:	bf00      	nop
 800dd38:	00000000 	.word	0x00000000
 800dd3c:	43500000 	.word	0x43500000
 800dd40:	c2f8f359 	.word	0xc2f8f359
 800dd44:	01a56e1f 	.word	0x01a56e1f
 800dd48:	8800759c 	.word	0x8800759c
 800dd4c:	7e37e43c 	.word	0x7e37e43c
 800dd50:	8800759c 	.word	0x8800759c
 800dd54:	fe37e43c 	.word	0xfe37e43c
 800dd58:	c2f8f359 	.word	0xc2f8f359
 800dd5c:	81a56e1f 	.word	0x81a56e1f
 800dd60:	00000000 	.word	0x00000000
 800dd64:	3c900000 	.word	0x3c900000
 800dd68:	ffff3cb0 	.word	0xffff3cb0

0800dd6c <nanf>:
 800dd6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dd74 <nanf+0x8>
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	7fc00000 	.word	0x7fc00000

0800dd78 <_init>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	bf00      	nop
 800dd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7e:	bc08      	pop	{r3}
 800dd80:	469e      	mov	lr, r3
 800dd82:	4770      	bx	lr

0800dd84 <_fini>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	bf00      	nop
 800dd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd8a:	bc08      	pop	{r3}
 800dd8c:	469e      	mov	lr, r3
 800dd8e:	4770      	bx	lr
